{"spiral-matrix": [{"task_id": "spiral-matrix", "completion": "class Solution(object):\n    def spiralOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not matrix:\n            return []\n        \n        m, n = len(matrix), len(matrix[0])\n        res = []\n        left, right, top, bottom = 0, n-1, 0, m-1\n        \n        while left <= right and top <= bottom:\n            for i in range(left, right+1):\n                res.append(matrix[top][i])\n            top += 1\n            \n            for i in range(top, bottom+1):\n                res.append(matrix[i][right])\n            right -= 1\n            \n            if left > right or top > bottom:\n                break\n            \n            for i in range(right, left-1, -1):\n                res.append(matrix[bottom][i])\n            bottom -= 1\n            \n            for i in range(bottom, top-1, -1):\n                res.append(matrix[i][left])\n            left += 1\n        \n        return res"}], "summary-ranges": [{"task_id": "summary-ranges", "completion": "class Solution(object):\n    def summaryRanges(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        if len(nums) == 0:\n            return []\n        \n        if len(nums) == 1:\n            return [str(nums[0])]\n        \n        start = nums[0]\n        end = nums[0]\n        res = []\n        \n        for i in range(1, len(nums)):\n            if nums[i] == end + 1:\n                end = nums[i]\n            else:\n                if start == end:\n                    res.append(str(start))\n                else:\n                    res.append(str(start) + \"->\" + str(end))\n                start = nums[i]\n                end = nums[i]\n        \n        if start == end:\n            res.append(str(start))\n        else:\n            res.append(str(start) + \"->\" + str(end))\n        \n        return res"}], "distinct-subsequences": [{"task_id": "distinct-subsequences", "completion": "class Solution(object):\n    def numDistinct(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"\n        \n        if len(s) < len(t):\n            return 0\n        \n        dp = [0] * (len(t) + 1)\n        dp[0] = 1\n        \n        for i in range(len(s)):\n            for j in range(len(t), 0, -1):\n                if s[i] == t[j - 1]:\n                    dp[j] += dp[j - 1]\n        \n        return dp[-1]"}], "first-missing-positive": [{"task_id": "first-missing-positive", "completion": "class Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. mark all negative numbers and all numbers larger than n as 0\n        # 2. iterate through the array and mark the numbers as negative\n        # 3. iterate through the array again and return the first number that is not marked as negative\n        # 4. if all numbers are marked as negative, return n+1\n        \n        n = len(nums)\n        for i in range(n):\n            if nums[i] <= 0:\n                nums[i] = n+1\n        \n        for i in range(n):\n            if abs(nums[i]) <= n:\n                nums[abs(nums[i])-1] = -abs(nums[abs(nums[i])-1])\n        \n        for i in range(n):\n            if nums[i] > 0:\n                return i+1\n        \n        return n+1"}], "permutation-sequence": [{"task_id": "permutation-sequence", "completion": "class Solution(object):\n    def getPermutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. generate the list of numbers\n        nums = [i for i in range(1, n+1)]\n        \n        # 2. calculate the factorial of n\n        fact = 1\n        for i in range(1, n):\n            fact *= i\n        \n        # 3. calculate the kth permutation\n        k -= 1\n        res = ''\n        for i in range(n-1, -1, -1):\n            # 3.1 calculate the index of the current digit\n            idx = k // fact\n            # 3.2 calculate the digit\n            res += str(nums[idx])\n            # 3.3 remove the digit from the list\n            nums.pop(idx)\n            # 3.4 update the k\n            k %= fact\n            # 3.5 update the factorial\n            fact //= i\n        \n        return res"}], "two-sum-ii-input-array-is-sorted": [{"task_id": "two-sum-ii-input-array-is-sorted", "completion": "class Solution(object):\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. Brute force\n        # for i in range(len(numbers)):\n        #     for j in range(i+1, len(numbers)):\n        #         if numbers[i] + numbers[j] == target:\n        #             return [i+1, j+1]\n        \n        # 2. Binary search\n        # for i in range(len(numbers)):\n        #     if target - numbers[i] in numbers[i+1:]:\n        #         return [i+1, numbers[i+1:].index(target - numbers[i]) + i + 2]\n        \n        # 3. Two pointers\n        # left, right = 0, len(numbers) - 1\n        # while left < right:\n        #     if numbers[left] + numbers[right] == target:\n        #         return [left+1, right+1]\n        #     elif numbers[left] + numbers[right] < target:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        \n        # 4. Hashmap\n        # hashmap = {}\n        # for i, num in enumerate(numbers):\n        #     if target - num in hashmap:\n        #         return [hashmap[target - num] + 1, i + 1]\n        #     hashmap[num] = i\n        \n        # 5. Binary search\n        # for i, num in enumerate(numbers):\n        #     if target - num in numbers[i+1:]:\n        #         return [i+1, numbers[i+1:].index(target - num) + i + 2]\n        \n        # 6. Binary search\n        # for i, num in enumerate(numbers):\n        #     if target - num in numbers[i+1:]:\n        #         return [i+1, numbers[i+1:].index(target - num) + i + 2]\n        \n        # 7. Binary search\n        # for i, num in enumerate(numbers):\n        #     if target - num in numbers[i+1:]:\n        #         return [i+1, numbers[i+1:].index(target - num) + i + 2]\n        \n        # 8. Binary search\n        # for i, num in enumerate(numbers):\n        #     if target - num in numbers[i+1:]:\n        #         return [i+1, numbers[i+1:].index(target - num) + i + 2]\n        \n        # 9. Binary search\n        # for i, num in enumerate(numbers):\n        #     if target - num in numbers[i+1:]:\n        #         return [i+1, numbers[i+1:].index(target - num) + i + 2]\n        \n        # 10. Binary search\n        # for i, num in enumerate(numbers):\n        #     if target - num in numbers[i+1:]:\n        #         return [i+1, numbers[i+1:].index(target - num) + i + 2]\n        \n        # 11. Binary search\n        # for i, num in enumerate(numbers):\n        #     if target - num in numbers[i+1:]:\n        #         return [i+1, numbers[i+1:].index(target - num) + i + 2]\n        \n        # 12. Binary search\n        # for i, num in enumerate(numbers):\n        #     if target - num in numbers[i+1:]:\n        #         return [i+1, numbers[i+1:].index(target - num) + i + 2]\n        \n        # 13. Binary search\n        # for i, num in enumerate(numbers):\n        #     if target - num in numbers[i+1:]:\n        #         return [i+1, numbers[i+1:].index(target - num) + i + 2]\n        \n        # 14. Binary search\n        # for i, num in enumerate(numbers):\n        #     if target - num in numbers[i+1:]:\n        #         return [i+1, numbers[i+1:].index(target - num) + i + 2]"}], "expression-add-operators": [{"task_id": "expression-add-operators", "completion": "class Solution(object):\n    def addOperators(self, num, target):\n        \"\"\"\n        :type num: str\n        :type target: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def dfs(num, target, prev, path, res, idx):\n            if idx == len(num):\n                if target == prev:\n                    res.append(path)\n                return\n            for i in range(idx, len(num)):\n                if i > idx and num[idx] == '0':\n                    break\n                cur = int(num[idx:i+1])\n                if idx == 0:\n                    dfs(num, target, cur, path + str(cur), res, i+1)\n                else:\n                    dfs(num, target, prev + cur, path + '+' + str(cur), res, i+1)\n                    dfs(num, target, prev - cur, path + '-' + str(cur), res, i+1)\n                    dfs(num, target, prev * cur, path + '*' + str(cur), res, i+1)\n        \n        if not num:\n            return []\n        res = []\n        dfs(num, target, 0, '', res, 0)\n        return res"}], "sum-root-to-leaf-numbers": [{"task_id": "sum-root-to-leaf-numbers", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def dfs(root, curr):\n            if not root:\n                return 0\n            if not root.left and not root.right:\n                return curr * 10 + root.val\n            return dfs(root.left, curr * 10 + root.val) + dfs(root.right, curr * 10 + root.val)\n        \n        return dfs(root, 0)"}], "license-key-formatting": [{"task_id": "license-key-formatting", "completion": "class Solution(object):\n    def licenseKeyFormatting(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        s = s.replace('-', '').upper()\n        n = len(s)\n        if n <= k:\n            return s\n        return '-'.join(s[i:i+k] for i in range(0, n-k, k))"}], "gas-station": [{"task_id": "gas-station", "completion": "class Solution(object):\n    def canCompleteCircuit(self, gas, cost):\n        \"\"\"\n        :type gas: List[int]\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if sum(gas) < sum(cost):\n            return -1\n        \n        tank, curr_sum, start = 0, 0, 0\n        \n        for i in range(len(gas)):\n            tank += gas[i] - cost[i]\n            if tank < 0:\n                start = i + 1\n                tank = 0\n                \n        return start if tank + sum(gas) >= sum(cost) else -1"}], "burst-balloons": [{"task_id": "burst-balloons", "completion": "class Solution(object):\n    def maxCoins(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums = [1] + nums + [1]\n        n = len(nums)\n        dp = [[0] * n for _ in range(n)]\n        \n        for i in range(n-2, -1, -1):\n            for j in range(i+2, n):\n                for k in range(i+1, j):\n                    dp[i][j] = max(dp[i][j], dp[i][k] + dp[k][j] + nums[i] * nums[k] * nums[j])\n        \n        return dp[0][n-1]"}], "plus-one": [{"task_id": "plus-one", "completion": "class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        if digits[-1] < 9:\n            digits[-1] += 1\n            return digits\n        else:\n            for i in range(len(digits)-1,-1,-1):\n                if digits[i] < 9:\n                    digits[i] += 1\n                    return digits\n                else:\n                    digits[i] = 0\n            digits.insert(0,1)\n            return digits"}], "regular-expression-matching": [{"task_id": "regular-expression-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        if not p:\n            return not s\n        \n        if len(p) == 1:\n            return s == p or (len(s) == 1 and p == '.' )\n        \n        if p[1] == '*':\n            return self.isMatch(s, p[2:]) or (len(s) > 0 and (s[0] == p[0] or p[0] == '.') and self.isMatch(s[1:], p))\n        \n        return len(s) > 0 and (s[0] == p[0] or p[0] == '.') and self.isMatch(s[1:], p[1:])"}], "create-maximum-number": [{"task_id": "create-maximum-number", "completion": "class Solution(object):\n    def maxNumber(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        def pick(nums, k):\n            out = []\n            for i in range(len(nums)):\n                if len(out) < k:\n                    if nums[i] > out[-1]:\n                        out.append(nums[i])\n                else:\n                    if nums[i] > out[-1]:\n                        out.pop()\n                        out.append(nums[i])\n            return out\n        \n        if len(nums1) < k:\n            return pick(nums2, k)\n        if len(nums2) < k:\n            return pick(nums1, k)\n        \n        if len(nums1) > len(nums2):\n            return self.maxNumber(nums2, nums1, k)\n        \n        if len(nums1) == len(nums2) == k:\n            return nums1\n        \n        if len(nums1) > k:\n            return pick(nums1, k)\n        \n        if len(nums2) > k:\n            return pick(nums2, k)\n        \n        if len(nums1) == len(nums2) == k:\n            return nums1\n        \n        if len(nums1) == len(nums2) == k - 1:\n            return [max(nums1[i], nums2[i]) for i in range(k)]\n        \n        if len(nums1) == len(nums2) == k - 2:\n            return [max(nums1[i], nums2[i]) for i in range(k - 1)] + [max(nums1[-1], nums2[-1])]\n        \n        if len(nums1) == len(nums2) == k - 3:\n            return [max(nums1[i], nums2[i]) for i in range(k - 2)] + [max(nums1[-2], nums2[-1]), max(nums1[-1], nums2[-2])]\n        \n        if len(nums1) == len(nums2) == k - 4:\n            return [max(nums1[i], nums2[i]) for i in range(k - 3)] + [max(nums1[-3], nums2[-2]), max(nums1[-2], nums2[-3]), max(nums1[-1], nums2[-1])]\n        \n        if len(nums1) == len(nums2) == k - 5:\n            return [max(nums1[i], nums2[i]) for i in range(k - 4)] + [max(nums1[-4], nums2[-3]), max(nums1[-3], nums2[-4]), max(nums1[-2], nums2[-2]), max(nums1[-1], nums2[-1])]\n        \n        if len(nums1) == len(nums2) == k - 6:\n            return [max(nums1[i], nums2[i]) for i in range(k - 5)] + [max(nums1[-5], nums2[-4]), max(nums1[-4], nums2[-5]), max(nums1[-3], nums2[-3]), max(nums1[-2], nums2[-2]), max(nums1[-1], nums2[-1])]\n        \n        if len(nums1) == len(nums2) == k - 7:\n            return [max(nums1[i], nums2[i]) for i in range(k - 6)] + [max(nums1[-6], nums2[-5]), max(nums1[-5], nums2[-6]), max(nums1[-4], nums2[-4]), max(nums1[-3], nums2[-3]), max(nums1[-2], nums2[-2]), max(nums1[-1], nums2[-1])]\n        \n        if len(nums1) == len(nums2) == k - 8:\n            return [max(nums1[i], nums2[i]) for i in range(k -"}], "perfect-number": [{"task_id": "perfect-number", "completion": "class Solution(object):\n    def checkPerfectNumber(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return False\n        \n        sum_of_divisors = 1\n        \n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                sum_of_divisors += i + num // i\n        \n        return sum_of_divisors == num"}], "fibonacci-number": [{"task_id": "fibonacci-number", "completion": "class Solution(object):\n    def fib(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        \n        a, b = 0, 1\n        for i in range(2, n+1):\n            a, b = b, a+b\n        return b"}], "dungeon-game": [{"task_id": "dungeon-game", "completion": "class Solution(object):\n    def calculateMinimumHP(self, dungeon):\n        \"\"\"\n        :type dungeon: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(dungeon), len(dungeon[0])\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        \n        for i in range(m - 1, -1, -1):\n            for j in range(n - 1, -1, -1):\n                dp[i][j] = max(min(dp[i + 1][j], dp[i][j + 1]) - dungeon[i][j], 1)\n        \n        return dp[0][0]"}], "find-k-th-smallest-pair-distance": [{"task_id": "find-k-th-smallest-pair-distance", "completion": "class Solution(object):\n    def smallestDistancePair(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        lo, hi = 0, nums[-1] - nums[0]\n        while lo < hi:\n            mid = (lo + hi) // 2\n            cnt, left = 0, 0\n            for num in nums:\n                cnt += left\n                if num - nums[left] > mid:\n                    left += 1\n            if cnt < k:\n                lo = mid + 1\n            else:\n                hi = mid\n        return lo"}], "number-of-segments-in-a-string": [{"task_id": "number-of-segments-in-a-string", "completion": "class Solution(object):\n    def countSegments(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        return len(s.split())"}], "reverse-vowels-of-a-string": [{"task_id": "reverse-vowels-of-a-string", "completion": "class Solution(object):\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n        s = list(s)\n        l, r = 0, len(s) - 1\n        while l < r:\n            if s[l] in vowels and s[r] in vowels:\n                s[l], s[r] = s[r], s[l]\n                l += 1\n                r -= 1\n            elif s[l] not in vowels:\n                l += 1\n            elif s[r] not in vowels:\n                r -= 1\n        return ''.join(s)"}], "longest-consecutive-sequence": [{"task_id": "longest-consecutive-sequence", "completion": "class Solution(object):\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if not nums:\n            return 0\n        \n        nums_set = set(nums)\n        max_len = 0\n        \n        for num in nums:\n            if num - 1 not in nums_set:\n                curr_len = 1\n                while num + 1 in nums_set:\n                    curr_len += 1\n                    num += 1\n                max_len = max(max_len, curr_len)\n        \n        return max_len"}], "missing-number": [{"task_id": "missing-number", "completion": "class Solution(object):\n    def missingNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## O(n) time and O(1) space\n        ## XOR\n        ## 0 ^ 0 = 0\n        ## 0 ^ 1 = 1\n        ## 1 ^ 1 = 0\n        ## 1 ^ 0 = 1\n        ## 0 ^ 1 ^ 1 ^ 0 ^ 1 = 0\n        ## 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 0 = 1\n        ## 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 = 0\n        ## 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 = 1\n        ## 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 = 0\n        ## 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 = 1\n        ## 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 = 0\n        ## 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 = 1\n        ## 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 = 0\n        ## 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 = 1\n        ## 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 = 0\n        ## 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 = 1\n        ## 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 = 0\n        ## 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 = 1\n        ## 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 = 0\n        ## 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 = 1\n        ## 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 = 0\n        ## 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 = 1\n        ## 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 = 0\n        ## 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^"}], "word-ladder": [{"task_id": "word-ladder", "completion": "class Solution(object):\n    def ladderLength(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\"\n        \n        if endWord not in wordList:\n            return 0\n        \n        wordList = set(wordList)\n        q = collections.deque([(beginWord, 1)])\n        while q:\n            word, dist = q.popleft()\n            if word == endWord:\n                return dist\n            for i in range(len(word)):\n                for c in string.ascii_lowercase:\n                    new_word = word[:i] + c + word[i+1:]\n                    if new_word in wordList:\n                        q.append((new_word, dist+1))\n                        wordList.remove(new_word)\n        return 0"}], "add-binary": [{"task_id": "add-binary", "completion": "class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        \n        if len(a) < len(b):\n            a, b = b, a\n        \n        carry = 0\n        res = []\n        for i in range(len(a)-1, -1, -1):\n            if a[i] == '1':\n                carry += 1\n            if i < len(b):\n                if b[i] == '1':\n                    carry += 1\n            res.append(str(carry % 2))\n            carry //= 2\n        if carry:\n            res.append(str(carry))\n        return ''.join(res[::-1])"}], "find-first-and-last-position-of-element-in-sorted-array": [{"task_id": "find-first-and-last-position-of-element-in-sorted-array", "completion": "class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        def binary_search(nums, target, find_left):\n            left, right = 0, len(nums) - 1\n            idx = -1\n            while left <= right:\n                mid = (left + right) // 2\n                if nums[mid] > target or (find_left and nums[mid] == target):\n                    right = mid - 1\n                    idx = mid\n                else:\n                    left = mid + 1\n            return idx\n        \n        left_idx = binary_search(nums, target, True)\n        right_idx = binary_search(nums, target, False)\n        \n        return [left_idx, right_idx]"}], "remove-duplicates-from-sorted-array": [{"task_id": "remove-duplicates-from-sorted-array", "completion": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 2:\n            return len(nums)\n        \n        i = 0\n        for j in range(1, len(nums)):\n            if nums[j] != nums[i]:\n                i += 1\n                nums[i] = nums[j]\n        \n        return i + 1"}], "jump-game-ii": [{"task_id": "jump-game-ii", "completion": "class Solution(object):\n    def jump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 1:\n            return 0\n        \n        max_reach = nums[0]\n        jumps = 1\n        curr_reach = 0\n        \n        for i in range(1, len(nums)):\n            if i > curr_reach:\n                jumps += 1\n                curr_reach = max_reach\n            max_reach = max(max_reach, i + nums[i])\n        \n        return jumps"}], "best-time-to-buy-and-sell-stock-iv": [{"task_id": "best-time-to-buy-and-sell-stock-iv", "completion": "class Solution(object):\n    def maxProfit(self, k, prices):\n        \"\"\"\n        :type k: int\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if k >= len(prices)//2:\n            return sum(max(0, prices[i]-prices[i-1]) for i in range(1, len(prices)))\n        \n        dp = [[0]*2 for _ in range(k)]\n        for i in range(len(prices)):\n            for j in range(1, k):\n                dp[j][0] = max(dp[j][0], dp[j-1][1] + prices[i])\n                dp[j][1] = max(dp[j][1], dp[j][0] - prices[i])\n        return dp[-1][0]"}], "convert-a-number-to-hexadecimal": [{"task_id": "convert-a-number-to-hexadecimal", "completion": "class Solution(object):\n    def toHex(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return '0'\n        \n        hex_dict = {10:'a', 11:'b', 12:'c', 13:'d', 14:'e', 15:'f'}\n        hex_list = []\n        if num < 0:\n            num = num + 2**32\n        while num:\n            hex_list.append(num % 16)\n            num = num // 16\n        hex_list.reverse()\n        hex_list = [hex_dict.get(i, str(i)) for i in hex_list]\n        return ''.join(hex_list)"}], "first-unique-character-in-a-string": [{"task_id": "first-unique-character-in-a-string", "completion": "class Solution(object):\n    def firstUniqChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        ## O(n) time and O(1) space\n        ## use a hashmap to store the count of each char\n        ## use a list to store the index of each char\n        ## iterate through the string and update the hashmap\n        ## iterate through the list and return the first index of the first char with count = 1\n        ## return -1 if no char with count = 1\n        \n        ## O(n) time and O(1) space\n        ## use a list to store the index of each char\n        ## iterate through the string and update the list\n        ## iterate through the list and return the first index of the first char with count = 1\n        ## return -1 if no char with count = 1\n        \n        ## O(n) time and O(1) space\n        ## use a list to store the count of each char\n        ## iterate through the string and update the list\n        ## iterate through the list and return the first index of the first char with count = 1\n        ## return -1 if no char with count = 1\n        \n        ## O(n) time and O(1) space\n        ## use a list to store the index of each char\n        ## iterate through the string and update the list\n        ## iterate through the list and return the first index of the first char with count = 1\n        ## return -1 if no char with count = 1\n        \n        ## O(n) time and O(1) space\n        ## use a list to store the count of each char\n        ## iterate through the string and update the list\n        ## iterate through the list and return the first index of the first char with count = 1\n        ## return -1 if no char with count = 1\n        \n        ## O(n) time and O(1) space\n        ## use a list to store the count of each char\n        ## iterate through the string and update the list\n        ## iterate through the list and return the first index of the first char with count = 1\n        ## return -1 if no char with count = 1\n        \n        ## O(n) time and O(1) space\n        ## use a list to store the count of each char\n        ## iterate through the string and update the list\n        ## iterate through the list and return the first index of the first char with count = 1\n        ## return -1 if no char with count = 1\n        \n        ## O(n) time and O(1) space\n        ## use a list to store the count of each char\n        ## iterate through the string and update the list\n        ## iterate through the list and return the first index of the first char with count = 1\n        ## return -1 if no char with count = 1\n        \n        ## O(n) time and O(1) space\n        ## use a list to store the count of each char\n        ## iterate through the string and update the list\n        ## iterate through the list and return the first index of the first char with count = 1\n        ## return -1 if no char with count = 1\n        \n        ## O(n) time and O(1) space\n        ## use a list to store the count of each char\n        ## iterate through the string and update the list\n        ## iterate through the list and return the first index of the first char with count = 1\n        ## return -1 if no char with count = 1\n        \n        ## O(n) time and O(1) space\n        ## use a list to store the count of each char\n        ## iterate through the string and update the list\n        ## iterate through the list and return the first index of the first char with count = 1\n        ## return -1 if no char with count = 1\n        \n        ## O(n) time and O(1) space\n        ## use a list to store the count of each char\n        ## iterate through the string and update the list\n        ## iterate through the list and return the first index of the first char with count = 1\n        ## return -1 if no char with count = 1\n        \n        ## O(n) time and O(1) space\n        ## use a list to store the count of each char\n        ## iterate through the string and update the list\n        ## iterate through"}], "contains-duplicate-iii": [{"task_id": "contains-duplicate-iii", "completion": "class Solution(object):\n    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff):\n        \"\"\"\n        :type nums: List[int]\n        :type indexDiff: int\n        :type valueDiff: int\n        :rtype: bool\n        \"\"\"\n        \n        if len(nums) < 2 or indexDiff < 0 or valueDiff < 0:\n            return False\n        \n        if len(nums) > indexDiff * 2 + 1:\n            return True\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        #"}], "sort-colors": [{"task_id": "sort-colors", "completion": "class Solution(object):\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2"}], "max-consecutive-ones": [{"task_id": "max-consecutive-ones", "completion": "class Solution(object):\n    def findMaxConsecutiveOnes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_count = 0\n        count = 0\n        \n        for i in nums:\n            if i == 1:\n                count += 1\n                max_count = max(max_count, count)\n            else:\n                count = 0\n                \n        return max_count"}], "count-complete-tree-nodes": [{"task_id": "count-complete-tree-nodes", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def countNodes(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        left_height = self.get_height(root.left)\n        right_height = self.get_height(root.right)\n        \n        if left_height == right_height:\n            return pow(2, left_height) + self.countNodes(root.right)\n        else:\n            return pow(2, right_height) + self.countNodes(root.left)\n        \n    def get_height(self, root):\n        if not root:\n            return 0\n        return 1 + self.get_height(root.left)"}], "add-strings": [{"task_id": "add-strings", "completion": "class Solution(object):\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        if len(num1) > len(num2):\n            num1, num2 = num2, num1\n        \n        num1 = num1[::-1]\n        num2 = num2[::-1]\n        \n        carry = 0\n        res = []\n        \n        for i in range(len(num1)):\n            curr = int(num1[i]) + int(num2[i]) + carry\n            carry = curr // 10\n            res.append(str(curr % 10))\n        \n        for i in range(len(num1), len(num2)):\n            curr = int(num2[i]) + carry\n            carry = curr // 10\n            res.append(str(curr % 10))\n        \n        if carry:\n            res.append(str(carry))\n        \n        return ''.join(res[::-1])"}], "basic-calculator": [{"task_id": "basic-calculator", "completion": "class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        sign = 1\n        num = 0\n        for i in range(len(s)):\n            if s[i] == ' ':\n                continue\n            elif s[i] == '+':\n                num += sign\n            elif s[i] == '-':\n                num += sign\n            elif s[i] == '(':\n                stack.append(num)\n                stack.append(sign)\n                num = 0\n                sign = 1\n            elif s[i] == ')':\n                num += sign\n                num *= stack.pop()\n                num += stack.pop()\n            else:\n                num = num * 10 + int(s[i])\n        return num + sign * num"}], "ipo": [{"task_id": "ipo", "completion": "class Solution(object):\n    def findMaximizedCapital(self, k, w, profits, capital):\n        \"\"\"\n        :type k: int\n        :type w: int\n        :type profits: List[int]\n        :type capital: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # sort by capital\n        # for each capital, find the max profit\n        # if k > 0, find the max profit\n        # if k == 0, return w\n        # if k < 0, return w\n        \n        # sort by capital\n        # for each capital, find the max profit\n        # if k > 0, find the max profit\n        # if k == 0, return w\n        # if k < 0, return w\n        \n        # sort by capital\n        # for each capital, find the max profit\n        # if k > 0, find the max profit\n        # if k == 0, return w\n        # if k < 0, return w\n        \n        # sort by capital\n        # for each capital, find the max profit\n        # if k > 0, find the max profit\n        # if k == 0, return w\n        # if k < 0, return w\n        \n        # sort by capital\n        # for each capital, find the max profit\n        # if k > 0, find the max profit\n        # if k == 0, return w\n        # if k < 0, return w\n        \n        # sort by capital\n        # for each capital, find the max profit\n        # if k > 0, find the max profit\n        # if k == 0, return w\n        # if k < 0, return w\n        \n        # sort by capital\n        # for each capital, find the max profit\n        # if k > 0, find the max profit\n        # if k == 0, return w\n        # if k < 0, return w\n        \n        # sort by capital\n        # for each capital, find the max profit\n        # if k > 0, find the max profit\n        # if k == 0, return w\n        # if k < 0, return w\n        \n        # sort by capital\n        # for each capital, find the max profit\n        # if k > 0, find the max profit\n        # if k == 0, return w\n        # if k < 0, return w\n        \n        # sort by capital\n        # for each capital, find the max profit\n        # if k > 0, find the max profit\n        # if k == 0, return w\n        # if k < 0, return w\n        \n        # sort by capital\n        # for each capital, find the max profit\n        # if k > 0, find the max profit\n        # if k == 0, return w\n        # if k < 0, return w\n        \n        # sort by capital\n        # for each capital, find the max profit\n        # if k > 0, find the max profit\n        # if k == 0, return w\n        # if k < 0, return w\n        \n        # sort by capital\n        # for each capital, find the max profit\n        # if k > 0, find the max profit\n        # if k == 0, return w\n        # if k < 0, return w\n        \n        # sort by capital\n        # for each capital, find the max profit\n        # if k > 0, find the max profit\n        # if k == 0, return w\n        # if k < 0, return w\n        \n        # sort by capital\n        # for each capital, find the max profit\n        # if k > 0, find the max profit\n        # if k == 0, return w\n        # if k < 0, return w\n        \n        # sort by capital\n        # for each capital, find the max profit\n        # if k > 0, find the max profit\n        # if k == 0, return w\n        # if k < 0, return w\n        \n        # sort by capital\n        # for each capital, find the max profit\n        # if k > 0, find the max profit\n        # if k == 0, return w\n        # if k < 0, return w\n        \n        # sort by capital\n        # for each capital, find the max profit\n        # if k > 0, find the max profit\n        # if k == 0, return w\n        # if k < 0, return w\n        \n        # sort by capital\n        # for each capital, find the max profit\n        # if k > 0, find the max profit\n        # if k == 0, return w\n        # if k < 0, return w\n        \n        # sort by capital\n        # for each capital, find the max profit\n        # if k > 0, find the max profit\n        # if k == 0, return w\n        # if k < 0, return w\n        \n        # sort by"}], "valid-parentheses": [{"task_id": "valid-parentheses", "completion": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        stack = []\n        for i in s:\n            if i == '(':\n                stack.append(')')\n            elif i == '[':\n                stack.append(']')\n            elif i == '{':\n                stack.append('}')\n            elif stack and stack[-1] == i:\n                stack.pop()\n            else:\n                return False\n        return len(stack) == 0"}], "next-permutation": [{"task_id": "next-permutation", "completion": "class Solution(object):\n    def nextPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # find the first element from the end that is smaller than its next element\n        # find the first element from the end that is larger than its next element\n        # swap the two elements\n        # reverse the elements after the first element\n        # if the array is already in descending order, reverse it to get the next highest permutation\n        # if the array is already in ascending order, it is the last permutation\n        \n        # find the first element from the end that is smaller than its next element\n        i = len(nums) - 2\n        while i >= 0 and nums[i] >= nums[i+1]:\n            i -= 1\n        \n        # find the first element from the end that is larger than its next element\n        j = len(nums) - 1\n        while j > i and nums[j] <= nums[i]:\n            j -= 1\n        \n        # swap the two elements\n        nums[i], nums[j] = nums[j], nums[i]\n        \n        # reverse the elements after the first element\n        nums[i+1:] = nums[len(nums)-1:i:-1]\n        \n        # if the array is already in descending order, reverse it to get the next highest permutation\n        if i == -1:\n            nums.reverse()\n        \n        return nums"}], "contains-duplicate-ii": [{"task_id": "contains-duplicate-ii", "completion": "class Solution(object):\n    def containsNearbyDuplicate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        \n        if len(nums) <= 1:\n            return False\n        \n        d = {}\n        for i, n in en.umerate(nums):\n            if n in d and i - d[n] <= k:\n                return True\n            d[n] = i\n        return False"}], "maximum-gap": [{"task_id": "maximum-gap", "completion": "class Solution(object):\n    def maximumGap(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 2:\n            return 0\n        \n        nums.sort()\n        max_diff = 0\n        for i in range(1, len(nums)):\n            max_diff = max(max_diff, nums[i] - nums[i-1])\n        return max_diff"}], "binary-tree-level-order-traversal": [{"task_id": "binary-tree-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        q = [root]\n        res = []\n        \n        while q:\n            res.append([node.val for node in q])\n            q = [child for node in q for child in (node.left, node.right) if child]\n        \n        return res"}], "couples-holding-hands": [{"task_id": "couples-holding-hands", "completion": "class Solution(object):\n    def minSwapsCouples(self, row):\n        \"\"\"\n        :type row: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15\n        # 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28\n        # 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15\n        # 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15\n        # 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15\n        # 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15\n        # 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15\n        # 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15\n        # 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15\n        # 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15\n        # 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15\n        # 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15\n        # 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15\n        # 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15\n        # 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15\n        # 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15\n        # 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15\n        # 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15\n        # 0, 1, 2, 3,"}], "interleaving-string": [{"task_id": "interleaving-string", "completion": "class Solution(object):\n    def isInterleave(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) + len(s2) != len(s3):\n            return False\n        \n        if len(s1) == 0 and len(s2) == 0:\n            return True\n        \n        if len(s1) == 0:\n            return s2 == s3\n        \n        if len(s2) == 0:\n            return s1 == s3\n        \n        dp = [[False] * (len(s2) + 1) for _ in range(len(s1) + 1)]\n        \n        dp[0][0] = True\n        \n        for i in range(1, len(s1) + 1):\n            dp[i][0] = dp[i - 1][0] and s1[i - 1] == s3[i - 1]\n        \n        for j in range(1, len(s2) + 1):\n            dp[0][j] = dp[0][j - 1] and s2[j - 1] == s3[j - 1]\n        \n        for i in range(1, len(s1) + 1):\n            for j in range(1, len(s2) + 1):\n                dp[i][j] = (dp[i - 1][j] and s1[i - 1] == s3[i + j - 1]) or (dp[i][j - 1] and s2[j - 1] == s3[i + j - 1])\n        \n        return dp[-1][-1]"}], "assign-cookies": [{"task_id": "assign-cookies", "completion": "class Solution(object):\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        \n        g.sort()\n        s.sort()\n        i = j = 0\n        while i < len(g) and j < len(s):\n            if g[i] <= s[j]:\n                i += 1\n            j += 1\n        return i"}], "keyboard-row": [{"task_id": "keyboard-row", "completion": "class Solution(object):\n    def findWords(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        row1 = set('qwertyuiop')\n        row2 = set('asdfghjkl')\n        row3 = set('zxcvbnm')\n        \n        return [word for word in words if (row1 & set(word.lower())) or (row2 & set(word.lower())) or (row3 & set(word.lower()))]"}], "reverse-linked-list-ii": [{"task_id": "reverse-linked-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseBetween(self, head, left, right):\n        \"\"\"\n        :type head: ListNode\n        :type left: int\n        :type right: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if left == right:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        curr = head\n        \n        for i in range(left-1):\n            prev = prev.next\n            curr = curr.next\n        \n        for i in range(right-left):\n            tmp = curr.next\n            curr.next = tmp.next\n            tmp.next = prev.next\n            prev.next = tmp\n        \n        return dummy.next"}], "shortest-palindrome": [{"task_id": "shortest-palindrome", "completion": "class Solution(object):\n    def shortestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # find the longest palindrome substring\n        # reverse the string and add it to the end of the original string\n        # if the original string is a palindrome, then the reversed string is also a palindrome\n        # if the original string is not a palindrome, then the reversed string is also not a palindrome\n        # if the original string is a palindrome, then the reversed string is also a palindrome\n        # if the original string is not a palindrome, then the reversed string is also not a palindrome\n        # if the original string is a palindrome, then the reversed string is also a palindrome\n        # if the original string is not a palindrome, then the reversed string is also not a palindrome\n        # if the original string is a palindrome, then the reversed string is also a palindrome\n        # if the original string is not a palindrome, then the reversed string is also not a palindrome\n        # if the original string is a palindrome, then the reversed string is also a palindrome\n        # if the original string is not a palindrome, then the reversed string is also not a palindrome\n        # if the original string is a palindrome, then the reversed string is also a palindrome\n        # if the original string is not a palindrome, then the reversed string is also not a palindrome\n        # if the original string is a palindrome, then the reversed string is also a palindrome\n        # if the original string is not a palindrome, then the reversed string is also not a palindrome\n        # if the original string is a palindrome, then the reversed string is also a palindrome\n        # if the original string is not a palindrome, then the reversed string is also not a palindrome\n        # if the original string is a palindrome, then the reversed string is also a palindrome\n        # if the original string is not a palindrome, then the reversed string is also not a palindrome\n        # if the original string is a palindrome, then the reversed string is also a palindrome\n        # if the original string is not a palindrome, then the reversed string is also not a palindrome\n        # if the original string is a palindrome, then the reversed string is also a palindrome\n        # if the original string is not a palindrome, then the reversed string is also not a palindrome\n        # if the original string is a palindrome, then the reversed string is also a palindrome\n        # if the original string is not a palindrome, then the reversed string is also not a palindrome\n        # if the original string is a palindrome, then the reversed string is also a palindrome\n        # if the original string is not a palindrome, then the reversed string is also not a palindrome\n        # if the original string is a palindrome, then the reversed string is also a palindrome\n        # if the original string is not a palindrome, then the reversed string is also not a palindrome\n        # if the original string is a palindrome, then the reversed string is also a palindrome\n        # if the original string is not a palindrome, then the reversed string is also not a palindrome\n        # if the original string is a palindrome, then the reversed string is also a palindrome\n        # if the original string is not a palindrome, then the reversed string is also not a palindrome\n        # if the original string is a palindrome, then the reversed string is also a palindrome\n        # if the original string is not a palindrome, then the reversed string is also not a palindrome\n        # if the original string is a palindrome, then the reversed string is also a palindrome\n        # if the original string is not a palindrome, then the reversed string is also not a palindrome\n        # if the original string is a palindrome, then the reversed string is also a palindrome\n        # if the original string is not a palindrome, then the reversed string is also not a palindrome\n        # if the original string is a palindrome, then the reversed string is also a palindrome\n        # if the original string is not a palindrome, then the reversed string is also not a pal"}], "minimum-window-substring": [{"task_id": "minimum-window-substring", "completion": "class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        if len(s) < len(t):\n            return \"\"\n        \n        t_dict = {}\n        for c in t:\n            t_dict[c] = t_dict.get(c, 0) + 1\n        \n        left = 0\n        right = 0\n        min_len = float('inf')\n        min_left = 0\n        min_right = 0\n        match = 0\n        \n        while right < len(s):\n            if s[right] in t_dict:\n                t_dict[s[right]] -= 1\n                if t_dict[s[right]] >= 0:\n                    match += 1\n            \n            while match == len(t_dict):\n                if right - left + 1 < min_len:\n                    min_len = right - left + 1\n                    min_left = left\n                    min_right = right\n                \n                if s[left] in t_dict:\n                    t_dict[s[left]] += 1\n                    if t_dict[s[left]] > 0:\n                        match -= 1\n                \n                left += 1\n            \n            right += 1\n        \n        return s[min_left:min_right + 1] if min_len != float('inf') else \"\""}], "self-crossing": [{"task_id": "self-crossing", "completion": "class Solution(object):\n    def isSelfCrossing(self, distance):\n        \"\"\"\n        :type distance: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        if len(distance) < 4:\n            return False\n        \n        if distance[0] == distance[3] and distance[1] == distance[2]:\n            return True\n        \n        if distance[1] == distance[3] and distance[0] + distance[4] >= distance[2]:\n            return True\n        \n        if distance[0] == distance[2] and distance[1] + distance[5] >= distance[3]:\n            return True\n        \n        if distance[1] == distance[3] and distance[0] + distance[4] >= distance[2] and distance[5] + distance[6] >= distance[4]:\n            return True\n        \n        if distance[0] + distance[4] >= distance[2] and distance[5] + distance[6] >= distance[4] and distance[1] + distance[5] >= distance[3]:\n            return True\n        \n        return False"}], "remove-duplicates-from-sorted-list": [{"task_id": "remove-duplicates-from-sorted-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        curr = head\n        while curr.next:\n            if curr.val == curr.next.val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        return head"}], "longest-palindrome": [{"task_id": "longest-palindrome", "completion": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "construct-binary-tree-from-inorder-and-postorder-traversal": [{"task_id": "construct-binary-tree-from-inorder-and-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not inorder:\n            return None\n        \n        root = TreeNode(postorder[-1])\n        idx = inorder.index(root.val)\n        root.left = self.buildTree(inorder[:idx], postorder[:idx])\n        root.right = self.buildTree(inorder[idx+1:], postorder[idx:-1])\n        \n        return root"}], "cut-off-trees-for-golf-event": [{"task_id": "cut-off-trees-for-golf-event", "completion": "class Solution(object):\n    def cutOffTree(self, forest):\n        \"\"\"\n        :type forest: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        def bfs(start, end):\n            q = [start]\n            seen = {start}\n            steps = 0\n            while q:\n                qq = []\n                for node in q:\n                    if node == end:\n                        return steps\n                    for n in (node[0]-1, node[0]+1, node[1]-1, node[1]+1):\n                        if 0 <= n < len(forest) and n not in seen and forest[n][node[1]] > 0:\n                            qq.append((n, node[1]))\n                            seen.add(n)\n                q = qq\n                steps += 1\n            return -1\n        \n        forest = [[(i,j) for j,v in enimport collections\n        return bfs((0,0), (len(forest)-1, len(forest[0])-1))"}], "minimum-depth-of-binary-tree": [{"task_id": "minimum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def minDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        if not root.left:\n            return 1 + self.minDepth(root.right)\n        \n        if not root.right:\n            return 1 + self.minDepth(root.left)\n        \n        return 1 + min(self.minDepth(root.left), self.minDepth(root.right))"}], "count-of-range-sum": [{"task_id": "count-of-range-sum", "completion": "class Solution(object):\n    def countRangeSum(self, nums, lower, upper):\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "arranging-coins": [{"task_id": "arranging-coins", "completion": "class Solution(object):\n    def arrangeCoins(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        return int((2*n+0.25)**0.5-0.5)"}], "longest-uncommon-subsequence-i": [{"task_id": "longest-uncommon-subsequence-i", "completion": "class Solution(object):\n    def findLUSlength(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: int\n        \"\"\"\n        \n        if a == b:\n            return -1\n        else:\n            return max(len(a), len(b))"}], "binary-tree-level-order-traversal-ii": [{"task_id": "binary-tree-level-order-traversal-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        q = [root]\n        res = []\n        \n        while q:\n            res.append([node.val for node in q])\n            q = [child for node in q for child in (node.left, node.right) if child]\n        \n        return res[::-1]"}], "palindrome-number": [{"task_id": "palindrome-number", "completion": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        \n        if x < 0:\n            return False\n        \n        if x < 10:\n            return True\n        \n        if x % 10 == 0:\n            return False\n        \n        rev = 0\n        while x > rev:\n            rev = rev * 10 + x % 10\n            x = x // 10\n        \n        return x == rev or x == rev // 10"}], "decode-ways": [{"task_id": "decode-ways", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if not s or s[0] == '0':\n            return 0\n        \n        if len(s) == 1:\n            return 1\n        \n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, len(s) + 1):\n            if s[i - 1] != '0':\n                dp[i] += dp[i - 1]\n            if s[i - 2] != '0' and int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        \n        return dp[-1]"}], "is-subsequence": [{"task_id": "is-subsequence", "completion": "class Solution(object):\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) > len(t):\n            return False\n        \n        i = 0\n        for c in t:\n            if i == len(s):\n                return True\n            if c == s[i]:\n                i += 1\n        return i == len(s)"}], "gray-code": [{"task_id": "gray-code", "completion": "class Solution(object):\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if n == 0:\n            return [0]\n        \n        if n == 1:\n            return [0,1]\n        \n        res = [0]\n        for i in range(1,n):\n            res.append(res[-1] + (1 << i))\n        return res"}], "climbing-stairs": [{"task_id": "climbing-stairs", "completion": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        \n        a, b = 1, 2\n        for i in range(3, n+1):\n            a, b = b, a+b\n        return b"}], "word-break": [{"task_id": "word-break", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        dp = [False] * (len(s) + 1)\n        dp[0] = True\n        \n        for i in range(1, len(s) + 1):\n            for j in range(i):\n                if dp[j] and s[j:i] in wordDict:\n                    dp[i] = True\n                    break\n        \n        return dp[-1]"}], "validate-binary-search-tree": [{"task_id": "validate-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def helper(node, lower, upper):\n            if not node:\n                return True\n            \n            if node.val <= lower or node.val >= upper:\n                return False\n            \n            return helper(node.left, lower, node.val) and helper(node.right, node.val, upper)\n        \n        return helper(root, float('-inf'), float('inf'))"}], "insert-interval": [{"task_id": "insert-interval", "completion": "class Solution(object):\n    def insert(self, intervals, newInterval):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type newInterval: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not intervals:\n            return [newInterval]\n        \n        if newInterval[0] > intervals[-1][1]:\n            return [newInterval] + intervals\n        \n        if newInterval[1] < intervals[0][0]:\n            return [newInterval] + intervals\n        \n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[-1][1]:\n            return [newInterval]\n        \n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            return [intervals[0]] + intervals[1:]\n        \n        if newInterval[0] >= intervals[0][0] and newInterval[1] <= intervals[-1][1]:\n            return intervals\n        \n        if newInterval[0] >= intervals[0][0] and newInterval[1] <= intervals[-1][1]:\n            return [intervals[0]] + intervals[1:]\n        \n        if newInterval[0] >= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            return [intervals[0]] + intervals[1:]\n        \n        if newInterval[0] <= intervals[0][0] and newInterval[1] <= intervals[-1][1]:\n            return [intervals[0]] + intervals[1:]\n        \n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            return [intervals[0]] + intervals[1:]\n        \n        if newInterval[0] >= intervals[0][0] and newInterval[1] <= intervals[-1][1]:\n            return [intervals[0]] + intervals[1:]\n        \n        if newInterval[0] >= intervals[0][0] and newInterval[1] >= intervals[-1][1]:\n            return [intervals[0]] + intervals[1:]\n        \n        if newInterval[0] <= intervals[0][0] and newInterval[1] <= intervals[-1][1]:\n            return [intervals[0]] + intervals[1:]\n        \n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[-1][1]:\n            return [intervals[0]] + intervals[1:]\n        \n        if newInterval[0] >= intervals[0][0] and newInterval[1] <= intervals[-1][1]:\n            return [intervals[0]] + intervals[1:]\n        \n        if newInterval[0] >= intervals[0][0] and newInterval[1] >= intervals[-1][1]:\n            return [intervals[0]] + intervals[1:]\n        \n        if newInterval[0] <= intervals[0][0] and newInterval[1] <= intervals[-1][1]:\n            return [intervals[0]] + intervals[1:]\n        \n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[-1][1]:\n            return [intervals[0]] + intervals[1:]\n        \n        if newInterval[0] >= intervals[0][0] and newInterval[1] <= intervals[-1][1]:\n            return [intervals[0]] + intervals[1:]\n        \n        if newInterval[0] >= intervals[0][0] and newInterval[1] >= intervals[-1][1]:\n            return [intervals[0]] + intervals[1:]\n        \n        if newInterval[0] <= intervals[0][0] and newInterval[1] <= intervals[-1][1]:\n            return [intervals[0]] + intervals[1:]\n        \n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[-1][1]:\n            return [intervals[0]] + intervals[1:]\n        \n        if newInterval[0] >= intervals[0][0] and newInterval[1] <= intervals[-1][1]:\n            return [intervals[0]] + intervals[1:]\n        \n        if newInterval[0] >= intervals[0][0] and newInterval[1] >= intervals[-1][1]:\n            return [intervals[0]] + intervals[1:]\n        \n        if newInterval[0] <= intervals[0][0] and newInterval[1] <= intervals[-1][1]:\n            return [intervals[0]] + intervals[1:]\n        \n        if newInterval[0"}], "palindrome-partitioning": [{"task_id": "palindrome-partitioning", "completion": "class Solution(object):\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def is_palindrome(s):\n            return s == s[::-1]\n        \n        def dfs(s, path, res):\n            if not s:\n                res.append(path[:])\n                return\n            for i in range(1, len(s)+1):\n                if is_palindrome(s[:i]):\n                    dfs(s[i:], path + [s[:i]], res)\n        \n        res = []\n        dfs(s, [], res)\n        return res"}], "smallest-range-covering-elements-from-k-lists": [{"task_id": "smallest-range-covering-elements-from-k-lists", "completion": "class Solution(object):\n    def smallestRange(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # find the min and max of each list\n        # then find the min and max of the range\n        # if the range is [min, max] then return it\n        # else find the min and max of the range\n        # if the range is [min, max] then return it\n        # else find the min and max of the range\n        # if the range is [min, max] then return it\n        # else find the min and max of the range\n        # if the range is [min, max] then return it\n        # else find the min and max of the range\n        # if the range is [min, max] then return it\n        # else find the min and max of the range\n        # if the range is [min, max] then return it\n        # else find the min and max of the range\n        # if the range is [min, max] then return it\n        # else find the min and max of the range\n        # if the range is [min, max] then return it\n        # else find the min and max of the range\n        # if the range is [min, max] then return it\n        # else find the min and max of the range\n        # if the range is [min, max] then return it\n        # else find the min and max of the range\n        # if the range is [min, max] then return it\n        # else find the min and max of the range\n        # if the range is [min, max] then return it\n        # else find the min and max of the range\n        # if the range is [min, max] then return it\n        # else find the min and max of the range\n        # if the range is [min, max] then return it\n        # else find the min and max of the range\n        # if the range is [min, max] then return it\n        # else find the min and max of the range\n        # if the range is [min, max] then return it\n        # else find the min and max of the range\n        # if the range is [min, max] then return it\n        # else find the min and max of the range\n        # if the range is [min, max] then return it\n        # else find the min and max of the range\n        # if the range is [min, max] then return it\n        # else find the min and max of the range\n        # if the range is [min, max] then return it\n        # else find the min and max of the range\n        # if the range is [min, max] then return it\n        # else find the min and max of the range\n        # if the range is [min, max] then return it\n        # else find the min and max of the range\n        # if the range is [min, max] then return it\n        # else find the min and max of the range\n        # if the range is [min, max] then return it\n        # else find the min and max of the range\n        # if the range is [min, max] then return it\n        # else find the min and max of the range\n        # if the range is [min, max] then return it\n        # else find the min and max of the range\n        # if the range is [min, max] then return it\n        # else find the min and max of the range\n        # if the range is [min, max] then return it\n        # else find the min and max of the range\n        # if the range is [min, max] then return it\n        # else find the min and max of the range\n        # if the range is [min, max] then return it\n        # else find the min and max of the range\n        # if the range is [min, max] then return it\n        # else find the min and max of the range\n        # if the range is [min, max] then return it\n        # else find the min and max of the range\n        # if the range is [min, max] then return it\n        # else find the min and max of the range\n        # if the range is [min, max] then return it\n        # else find the min and max of the range\n        # if the range is [min, max] then return it\n        # else find the min and max of the range\n        # if the range is [min, max] then return it\n        # else find the min and max of the range\n        # if the range is [min, max] then return it\n        # else find the min and max of the range\n        #"}], "poor-pigs": [{"task_id": "poor-pigs", "completion": "class Solution(object):\n    def poorPigs(self, buckets, minutesToDie, minutesToTest):\n        \"\"\"\n        :type buckets: int\n        :type minutesToDie: int\n        :type minutesToTest: int\n        :rtype: int\n        \"\"\"\n        \n        if buckets == 1:\n            return 0\n        if buckets == 2:\n            return 1\n        if minutesToTest // minutesToDie + 1 >= buckets:\n            return buckets - 1\n        return math.ceil(math.log(minutesToTest / minutesToDie + 1, 2))"}], "swim-in-rising-water": [{"task_id": "swim-in-rising-water", "completion": "class Solution(object):\n    def swimInWater(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        if n == 1:\n            return grid[0][0]\n        \n        heap = [(grid[0][0], 0, 0)]\n        visited = set()\n        visited.add((0, 0))\n        ans = 0\n        \n        while heap:\n            t, i, j = heapq.heappop(heap)\n            ans = max(ans, t)\n            if i == j == n - 1:\n                return ans\n            for ni, nj in ((i, j + 1), (i, j - 1), (i + 1, j), (i - 1, j)):\n                if 0 <= ni < n and 0 <= nj < n and (ni, nj) not in visited:\n                    heapq.heappush(heap, (grid[ni][nj], ni, nj))\n                    visited.add((ni, nj))\n        \n        return ans"}], "unique-paths": [{"task_id": "unique-paths", "completion": "class Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        dp = [[0] * n for _ in range(m)]\n        \n        for i in range(m):\n            for j in range(n):\n                if i == 0 or j == 0:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        \n        return dp[m-1][n-1]"}], "multiply-strings": [{"task_id": "multiply-strings", "completion": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        if num1 == '0' or num2 == '0':\n            return '0'\n        \n        if len(num1) < len(num2):\n            num1, num2 = num2, num1\n        \n        num1 = num1[::-1]\n        num2 = num2[::-1]\n        \n        res = [0] * (len(num1) + len(num2))\n        \n        for i in range(len(num1)):\n            for j in range(len(num2)):\n                res[i+j] += int(num1[i]) * int(num2[j])\n                res[i+j+1] += res[i+j] // 10\n                res[i+j] %= 10\n        \n        res = res[::-1]\n        i = 0\n        while i < len(res) - 1 and res[i] == 0:\n            i += 1\n        return str(res[i])"}], "best-time-to-buy-and-sell-stock-iii": [{"task_id": "best-time-to-buy-and-sell-stock-iii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## 1. \n        ## 2. \n        ## 3. \n        ## 4. \n        ## 5. \n        ## 6. \n        ## 7. \n        ## 8. \n        ## 9. \n        ## 10. \n        ## 11. \n        ## 12. \n        ## 13. \n        ## 14. \n        ## 15. \n        ## 16. \n        ## 17. \n        ## 18. \n        ## 19. \n        ## 20. \n        ## 21. \n        ## 22. \n        ## 23. \n        ## 24. \n        ## 25. \n        ## 26. \n        ## 27. \n        ## 28. \n        ## 29. \n        ## 30. \n        ## 31. \n        ## 32. \n        ## 33. \n        ## 34. \n        ## 35. \n        ## 36. \n        ## 37. \n        ## 38. \n        ## 39. \n        ## 40. \n        ## 41. \n        ## 42. \n        ## 43. \n        ## 44. \n        ## 45. \n        ## 46. \n        ## 47. \n        ## 48. \n        ## 49. \n        ## 50. \n        ## 51. \n        ## 52. \n        ## 53. \n        ## 54. \n        ## 55. \n        ## 56. \n        ## 57. \n        ## 58. \n        ## 59. \n        ## 60. \n        ## 61. \n        ## 62. \n        ## 63. \n        ## 64. \n        ## 65. \n        ## 66. \n        ## 67. \n        ## 68. \n        ## 69. \n        ## 70. \n        ## 71. \n        ## 72. \n        ## 73. \n        ## 74. \n        ## 75. \n        ## 76. \n        ## 77. \n        ## 78. \n        ## 79. \n        ## 80. \n        ## 81. \n        ## 82. \n        ## 83. \n        ## 84. \n        ## 85. \n        ## 86. \n        ## 87. \n        ## 88. \n        ## 89. \n        ## 90. \n        ## 91. \n        ## 92. \n        ## 93. \n        ## 94. \n        ## 95. \n        ## 96. \n        ## 97. \n        ## 98. \n        ## 99. \n        ## 100. \n        ## 101. \n        ## 102. \n        ## 103. \n        ## 104. \n        ## 105. \n        ## 106. \n        ## 107. \n        ## 108. \n        ## 109. \n        ## 110. \n        ## 111. \n        ## 112. \n        ## 113. \n        #"}], "combination-sum-ii": [{"task_id": "combination-sum-ii", "completion": "class Solution(object):\n    def combinationSum2(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        res = []\n        def dfs(i, cur, total):\n            if total == target:\n                res.append(cur[:])\n                return\n            if i >= len(candidates) or total > target:\n                return\n            dfs(i+1, cur, total)\n            if total + candidates[i] <= target:\n                cur.append(candidates[i])\n                dfs(i, cur, total + candidates[i])\n                cur.pop()\n        dfs(0, [], 0)\n        return res"}], "detect-capital": [{"task_id": "detect-capital", "completion": "class Solution(object):\n    def detectCapitalUse(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if word.isupper() or word.islower() or word[0].isupper() and word[1:].islower():\n            return True\n        return False"}], "best-time-to-buy-and-sell-stock": [{"task_id": "best-time-to-buy-and-sell-stock", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        min_price = float('inf')\n        max_profit = 0\n        \n        for price in prices:\n            min_price = min(min_price, price)\n            max_profit = max(max_profit, price - min_price)\n            \n        return max_profit"}], "binary-tree-inorder-traversal": [{"task_id": "binary-tree-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = []\n        res = []\n        curr = root\n        \n        while curr or stack:\n            if curr:\n                stack.append(curr)\n                curr = curr.left\n            else:\n                curr = stack.pop()\n                res.append(curr.val)\n                curr = curr.right\n        \n        return res"}], "construct-binary-tree-from-preorder-and-inorder-traversal": [{"task_id": "construct-binary-tree-from-preorder-and-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not preorder or not inorder:\n            return None\n        \n        root = TreeNode(preorder[0])\n        idx = inorder.index(preorder[0])\n        root.left = self.buildTree(preorder[1:idx+1], inorder[:idx])\n        root.right = self.buildTree(preorder[idx+1:], inorder[idx+1:])\n        \n        return root"}], "remove-invalid-parentheses": [{"task_id": "remove-invalid-parentheses", "completion": "class Solution(object):\n    def removeInvalidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        \n        def isValid(s):\n            cnt = 0\n            for c in s:\n                if c == '(':\n                    cnt += 1\n                elif c == ')':\n                    if cnt > 0:\n                        cnt -= 1\n                    else:\n                        return False\n            return cnt == 0\n        \n        left, right = 0, len(s)\n        while not isValid(s):\n            if s[0] == '(':\n                left += 1\n                s = s[1:]\n            elif s[-1] == ')':\n                right -= 1\n                s = s[:-1]\n            else:\n                s = s[:-1] + s[1:]\n        return [s]"}], "merge-k-sorted-lists": [{"task_id": "merge-k-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        \n        if not lists:\n            return None\n        \n        if len(lists) == 1:\n            return lists[0]\n        \n        if len(lists) == 2:\n            return self.mergeTwoLists(lists[0], lists[1])\n        \n        mid = len(lists) // 2\n        left = self.mergeKLists(lists[:mid])\n        right = self.mergeKLists(lists[mid:])\n        \n        return self.mergeTwoLists(left, right)\n        \n    def mergeTwoLists(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not l1:\n            return l2\n        if not l2:\n            return l1\n        \n        if l1.val < l2.val:\n            l1.next = self.mergeTwoLists(l1.next, l2)\n            return l1\n        else:\n            l2.next = self.mergeTwoLists(l1, l2.next)\n            return l2"}], "palindrome-partitioning-ii": [{"task_id": "palindrome-partitioning-ii", "completion": "class Solution(object):\n    def minCut(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "preimage-size-of-factorial-zeroes-function": [{"task_id": "preimage-size-of-factorial-zeroes-function", "completion": "class Solution(object):\n    def preimageSizeFZF(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. 10^k = 10^(k-1) * 10 + 1\n        # 2. 10^k - 10^(k-1) = (10^(k-1) - 1) * 10 + 1\n        # 3. 10^k - 10^(k-1) = (10^(k-1) - 1) * 10 + 1\n        # 4. 10^k - 10^(k-1) = (10^(k-1) - 1) * 10 + 1\n        # 5. 10^k - 10^(k-1) = (10^(k-1) - 1) * 10 + 1\n        # 6. 10^k - 10^(k-1) = (10^(k-1) - 1) * 10 + 1\n        # 7. 10^k - 10^(k-1) = (10^(k-1) - 1) * 10 + 1\n        # 8. 10^k - 10^(k-1) = (10^(k-1) - 1) * 10 + 1\n        # 9. 10^k - 10^(k-1) = (10^(k-1) - 1) * 10 + 1\n        # 10. 10^k - 10^(k-1) = (10^(k-1) - 1) * 10 + 1\n        # 11. 10^k - 10^(k-1) = (10^(k-1) - 1) * 10 + 1\n        # 12. 10^k - 10^(k-1) = (10^(k-1) - 1) * 10 + 1\n        # 13. 10^k - 10^(k-1) = (10^(k-1) - 1) * 10 + 1\n        # 14. 10^k - 10^(k-1) = (10^(k-1) - 1) * 10 + 1\n        # 15. 10^k - 10^(k-1) = (10^(k-1) - 1) * 10 + 1\n        # 16. 10^k - 10^(k-1) = (10^(k-1) - 1) * 10 + 1\n        # 17. 10^k - 10^(k-1) = (10^(k-1) - 1) * 10 + 1\n        # 18. 10^k - 10^(k-1) = (10^(k-1) - 1) * 10 + 1\n        # 19. 10^k - 10^(k-1) = (10^(k-1) - 1) * 10 + 1\n        # 20. 10^k - 10^(k-1) = (10^(k-1) - 1) * 10 + 1\n        # 21. 10^k - 10^(k-1) = (10^(k-1) - 1) * 10 + 1\n        # 22. 10^k - 10^(k-1) = (10^(k-1) - 1) * 10 + 1\n        # 23. 10^k - 10^(k-1) = (10^(k-1) - 1) * 10 + 1\n        # 24. 10^k - 10^(k-1) = (10^(k-1) - 1) * 10 + 1\n        # 25. 10^k - 10^(k-1) = (10^(k-1) - 1) * 10 +"}], "palindrome-pairs": [{"task_id": "palindrome-pairs", "completion": "class Solution(object):\n    def palindromePairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # build a hashmap for words\n        word_map = {word: i for i, word in enumerate(words)}\n        \n        # build a hashmap for reversed words\n        rev_map = {v: k for k, v in word_map.items()}\n        \n        # build a list of all palindromes\n        res = []\n        \n        # iterate over all words\n        for i, word in enumerate(words):\n            # if word is a palindrome\n            if word == word[::-1]:\n                # if there is a reversed word\n                if rev_map.get(word) is not None and i != rev_map[word]:\n                    res.append([i, rev_map[word]])\n            \n            # if word is a palindrome\n            if word[::-1] in word_map:\n                # if there is a reversed word\n                if rev_map.get(word) is not None and i != rev_map[word]:\n                    res.append([i, rev_map[word]])\n        \n        return res"}], "convert-sorted-array-to-binary-search-tree": [{"task_id": "convert-sorted-array-to-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedArrayToBST(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        def helper(left, right):\n            if left > right:\n                return None\n            \n            mid = (left + right) // 2\n            root = TreeNode(nums[mid])\n            root.left = helper(left, mid - 1)\n            root.right = helper(mid + 1, right)\n            return root\n        \n        return helper(0, len(nums) - 1)"}], "contain-virus": [{"task_id": "contain-virus", "completion": "class Solution(object):\n    def containVirus(self, isInfected):\n        \"\"\"\n        :type isInfected: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(isInfected), len(isInfected[0])\n        def spread(isInfected, m, n):\n            # spread virus\n            infect = 0\n            for i in range(m):\n                for j in range(n):\n                    if isInfected[i][j] == 1:\n                        infect += 1\n                        for x, y in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]:\n                            if 0 <= x < m and 0 <= y < n and isInfected[x][y] == 1:\n                                isInfected[i][j] = 2\n                                infect = spread(isInfected, m, n)\n                                return infect\n            return infect\n        \n        # build walls\n        infect = spread(isInfected, m, n)\n        if infect >= m*n:\n            return infect\n        walls = 0\n        for i in range(m):\n            for j in range(n):\n                if isInfected[i][j] == 1:\n                    walls += 1\n                    for x, y in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]:\n                        if 0 <= x < m and 0 <= y < n and isInfected[x][y] == 1:\n                            isInfected[i][j] = 2\n                            walls = spread(isInfected, m, n)\n                            return walls\n        return walls"}], "longest-increasing-path-in-a-matrix": [{"task_id": "longest-increasing-path-in-a-matrix", "completion": "class Solution(object):\n    def longestIncreasingPath(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        max_len = 0\n        \n        for i in range(m):\n            for j in range(n):\n                max_len = max(max_len, self.dfs(matrix, dp, i, j))\n        \n        return max_len\n    \n    def dfs(self, matrix, dp, i, j):\n        if dp[i][j]:\n            return dp[i][j]\n        \n        m, n = len(matrix), len(matrix[0])\n        dirs = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n        max_len = 1\n        \n        for d in dirs:\n            x, y = i + d[0], j + d[1]\n            if 0 <= x < m and 0 <= y < n and matrix[x][y] > matrix[i][j]:\n                max_len = max(max_len, 1 + self.dfs(matrix, dp, x, y))\n        \n        dp[i][j] = max_len\n        return max_len"}], "number-of-digit-one": [{"task_id": "number-of-digit-one", "completion": "class Solution(object):\n    def countDigitOne(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n < 1:\n            return 0\n        if n < 10:\n            return 1\n        if n < 100:\n            return 10\n        if n < 1000:\n            return 100\n        if n < 10000:\n            return 1000\n        if n < 100000:\n            return 10000\n        if n < 1000000:\n            return 100000\n        if n < 10000000:\n            return 1000000\n        if n < 100000000:\n            return 10000000\n        if n < 1000000000:\n            return 100000000\n        if n < 10000000000:\n            return 1000000000\n        if n < 100000000000:\n            return 10000000000\n        if n < 1000000000000:\n            return 100000000000\n        if n < 10000000000000:\n            return 1000000000000\n        if n < 100000000000000:\n            return 10000000000000\n        if n < 1000000000000000:\n            return 100000000000000\n        if n < 10000000000000000:\n            return 1000000000000000\n        if n < 100000000000000000:\n            return 10000000000000000\n        if n < 1000000000000000000:\n            return 100000000000000000\n        if n < 10000000000000000000:\n            return 1000000000000000000\n        if n < 100000000000000000000:\n            return 10000000000000000000\n        if n < 1000000000000000000000:\n            return 100000000000000000000\n        if n < 10000000000000000000000:\n            return 1000000000000000000000\n        if n < 100000000000000000000000:\n            return 10000000000000000000000\n        if n < 1000000000000000000000000:\n            return 100000000000000000000000\n        if n < 10000000000000000000000000:\n            return 1000000000000000000000000\n        if n < 100000000000000000000000000:\n            return 10000000000000000000000000\n        if n < 10000000000000000000"}], "word-break-ii": [{"task_id": "word-break-ii", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        dp = [False] * (len(s) + 1)\n        dp[0] = True\n        \n        for i in range(1, len(s) + 1):\n            for j in range(i):\n                if dp[j] and s[j:i] in wordDict:\n                    dp[i] = True\n                    break\n        \n        if dp[-1]:\n            return [s[j:i] for j in range(len(s)) if dp[j]]\n        else:\n            return []"}], "binary-tree-zigzag-level-order-traversal": [{"task_id": "binary-tree-zigzag-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def zigzagLevelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        q = [root]\n        res = []\n        level = 0\n        \n        while q:\n            level_nodes = []\n            for _ in range(len(q)):\n                node = q.pop(0)\n                if level % 2 == 0:\n                    level_nodes.append(node.val)\n                else:\n                    level_nodes.insert(0, node.val)\n                if node.left:\n                    q.append(node.left)\n                if node.right:\n                    q.append(node.right)\n            res.append(level_nodes)\n            level += 1\n        \n        return res"}], "binary-watch": [{"task_id": "binary-watch", "completion": "class Solution(object):\n    def readBinaryWatch(self, turnedOn):\n        \"\"\"\n        :type turnedOn: int\n        :rtype: List[str]\n        \"\"\"\n        \n        if turnedOn > 10:\n            return []\n        \n        res = []\n        for h in range(12):\n            for m in range(60):\n                if bin(h).count('1') + bin(m).count('1') == turnedOn:\n                    res.append('%d:%02d' % (h, m))\n        return res"}], "pascals-triangle": [{"task_id": "pascals-triangle", "completion": "class Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if numRows == 0:\n            return []\n        \n        if numRows == 1:\n            return [[1]]\n        \n        if numRows == 2:\n            return [[1], [1,1]]\n        \n        res = [[1], [1,1]]\n        \n        for i in range(2, numRows):\n            row = [1]\n            for j in range(1, len(res[-1])):\n                row.append(res[-1][j] + res[-1][j-1])\n            row.append(1)\n            res.append(row)\n        \n        return res"}], "power-of-three": [{"task_id": "power-of-three", "completion": "class Solution(object):\n    def isPowerOfThree(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        while n % 3 == 0:\n            n /= 3\n        return n == 1"}], "binary-tree-maximum-path-sum": [{"task_id": "binary-tree-maximum-path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxPathSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def max_gain(node):\n            if not node:\n                return 0\n            \n            left_gain = max(max_gain(node.left), 0)\n            right_gain = max(max_gain(node.right), 0)\n            \n            self.max_sum = max(self.max_sum, left_gain + right_gain + node.val)\n            \n            return node.val + max(left_gain, right_gain)\n        \n        self.max_sum = float('-inf')\n        max_gain(root)\n        return self.max_sum"}], "trapping-rain-water-ii": [{"task_id": "trapping-rain-water-ii", "completion": "class Solution(object):\n    def trapRainWater(self, heightMap):\n        \"\"\"\n        :type heightMap: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not heightMap:\n            return 0\n        \n        m, n = len(heightMap), len(heightMap[0])\n        heap = [(heightMap[i][0], i, 0) for i in range(m)] + [(heightMap[i][n-1], i, n-1) for i in range(m)]\n        heapq.heapify(heap)\n        seen = set((0, 0))\n        ans = 0\n        while heap:\n            h, i, j = heapq.heappop(heap)\n            for ni, nj in ((i-1, j), (i+1, j), (i, j-1), (i, j+1)):\n                if 0 <= ni < m and 0 <= nj < n and (ni, nj) not in seen:\n                    ans += max(0, h - heightMap[ni][nj])\n                    heapq.heappush(heap, (max(h, heightMap[ni][nj]), ni, nj))\n                    seen.add((ni, nj))\n        return ans"}], "valid-palindrome": [{"task_id": "valid-palindrome", "completion": "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        s = s.lower()\n        s = re.sub(r'[^a-z0-9]', '', s)\n        return s == s[::-1]"}], "sliding-window-median": [{"task_id": "sliding-window-median", "completion": "class Solution(object):\n    def medianSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[float]\n        \"\"\"\n        \n        # 1. sort the array\n        # 2. find the median\n        # 3. return the median\n        \n        # 1. sort the array\n        nums.sort()\n        \n        # 2. find the median\n        if len(nums) % 2 == 1:\n            return float(nums[len(nums) // 2])\n        else:\n            return (nums[len(nums) // 2] + nums[len(nums) // 2 - 1]) / 2.0"}], "rotate-list": [{"task_id": "rotate-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        # find the length of the list\n        length = 1\n        curr = head\n        while curr.next:\n            curr = curr.next\n            length += 1\n        \n        # find the new head\n        k = k % length\n        if k == 0:\n            return head\n        \n        # find the new tail\n        curr = head\n        for _ in range(length - k - 1):\n            curr = curr.next\n        \n        # find the new head\n        new_head = curr.next\n        curr.next = None\n        \n        return new_head"}], "ugly-number": [{"task_id": "ugly-number", "completion": "class Solution(object):\n    def isUgly(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 2 == 0:\n            n = n // 2\n        while n % 3 == 0:\n            n = n // 3\n        while n % 5 == 0:\n            n = n // 5\n        \n        return n == 1"}], "falling-squares": [{"task_id": "falling-squares", "completion": "class Solution(object):\n    def fallingSquares(self, positions):\n        \"\"\"\n        :type positions: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "sum-of-left-leaves": [{"task_id": "sum-of-left-leaves", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumOfLeftLeaves(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        if root.left is None and root.right is None:\n            return 0\n        \n        if root.left is not None and root.left.left is None and root.left.right is None:\n            return root.left.val + self.sumOfLeftLeaves(root.right)\n        \n        return self.sumOfLeftLeaves(root.left) + self.sumOfLeftLeaves(root.right)"}], "max-sum-of-rectangle-no-larger-than-k": [{"task_id": "max-sum-of-rectangle-no-larger-than-k", "completion": "class Solution(object):\n    def maxSumSubmatrix(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(matrix), len(matrix[0])\n        if m > n:\n            matrix = zip(*matrix)\n            m, n = n, m\n        \n        for i in range(1, m):\n            matrix[i] = matrix[i-1] + matrix[i]\n        \n        ans = -float('inf')\n        for l in range(n):\n            sums = [0] + list(matrix[l])\n            for r in range(n):\n                sums = [s + (matrix[i][r] if i > 0 else matrix[i][r]) for i, s in en\n                enumerate(sums)]\n                d = {0: -float('inf')}\n                for s in sums:\n                    ans = max(ans, d[s-k] + s)\n                    d[s] = max(d[s], s)\n        return ans"}], "divide-two-integers": [{"task_id": "divide-two-integers", "completion": "class Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"\n        \n        if dividend == 0:\n            return 0\n        \n        if dividend == -2147483648 and divisor == -1:\n            return 2147483647\n        \n        if dividend == -2147483648 and divisor == 1:\n            return -2147483648\n        \n        if dividend > 0 and divisor > 0:\n            return min(max(dividend//divisor, -2147483648), 2147483647)\n        \n        if dividend > 0 and divisor < 0:\n            return min(max(dividend//divisor, -2147483648), 2147483647)\n        \n        if dividend < 0 and divisor > 0:\n            return min(max(dividend//divisor, -2147483648), 2147483647)\n        \n        if dividend < 0 and divisor < 0:\n            return min(max(dividend//divisor, -2147483648), 2147483647)\n        \n        return -dividend"}], "surrounded-regions": [{"task_id": "surrounded-regions", "completion": "class Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        if not board:\n            return\n        \n        m, n = len(board), len(board[0])\n        \n        def dfs(i, j):\n            if i < 0 or i >= m or j < 0 or j >= n or board[i][j] != 'O':\n                return\n            board[i][j] = 'T'\n            dfs(i + 1, j)\n            dfs(i - 1, j)\n            dfs(i, j + 1)\n            dfs(i, j - 1)\n        \n        for i in range(m):\n            dfs(i, 0)\n            dfs(i, n - 1)\n        for j in range(n):\n            dfs(0, j)\n            dfs(m - 1, j)\n        \n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'T':\n                    board[i][j] = 'O'\n                elif board[i][j] == 'O':\n                    board[i][j] = 'X'"}], "two-sum": [{"task_id": "two-sum", "completion": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # create a dictionary\n        # iterate through the list\n        # if the complement is in the dictionary, return the index of the complement and the index of the current element\n        # else, add the current element to the dictionary\n        # if the complement is not in the dictionary, add the current element to the dictionary\n        # return the index of the complement and the index of the current element\n        # if the complement is not in the dictionary, add the current element to the dictionary\n        # return the index of the complement and the index of the current element\n        # if the complement is not in the dictionary, add the current element to the dictionary\n        # return the index of the complement and the index of the current element\n        # if the complement is not in the dictionary, add the current element to the dictionary\n        # return the index of the complement and the index of the current element\n        # if the complement is not in the dictionary, add the current element to the dictionary\n        # return the index of the complement and the index of the current element\n        # if the complement is not in the dictionary, add the current element to the dictionary\n        # return the index of the complement and the index of the current element\n        # if the complement is not in the dictionary, add the current element to the dictionary\n        # return the index of the complement and the index of the current element\n        # if the complement is not in the dictionary, add the current element to the dictionary\n        # return the index of the complement and the index of the current element\n        # if the complement is not in the dictionary, add the current element to the dictionary\n        # return the index of the complement and the index of the current element\n        # if the complement is not in the dictionary, add the current element to the dictionary\n        # return the index of the complement and the index of the current element\n        # if the complement is not in the dictionary, add the current element to the dictionary\n        # return the index of the complement and the index of the current element\n        # if the complement is not in the dictionary, add the current element to the dictionary\n        # return the index of the complement and the index of the current element\n        # if the complement is not in the dictionary, add the current element to the dictionary\n        # return the index of the complement and the index of the current element\n        # if the complement is not in the dictionary, add the current element to the dictionary\n        # return the index of the complement and the index of the current element\n        # if the complement is not in the dictionary, add the current element to the dictionary\n        # return the index of the complement and the index of the current element\n        # if the complement is not in the dictionary, add the current element to the dictionary\n        # return the index of the complement and the index of the current element\n        # if the complement is not in the dictionary, add the current element to the dictionary\n        # return the index of the complement and the index of the current element\n        # if the complement is not in the dictionary, add the current element to the dictionary\n        # return the index of the complement and the index of the current element\n        # if the complement is not in the dictionary, add the current element to the dictionary\n        # return the index of the complement and the index of the current element\n        # if the complement is not in the dictionary, add the current element to the dictionary\n        # return the index of the complement and the index of the current element\n        # if the complement is not in the dictionary, add the current element to the dictionary\n        # return the index of the complement and the index of the current element\n        # if the complement is not in the dictionary, add the current element to the dictionary\n        # return the index of the complement and the index of the current element\n        # if the complement is not in the dictionary, add the current element to the dictionary\n        # return the index of the complement and the index of the current element\n        # if the complement is not in the dictionary, add the current element to the dictionary\n        # return the index of the complement and the index of the current element\n        # if the complement is not in the dictionary, add the current element to the dictionary\n        # return the index of the complement and the index of the current element\n        # if the complement is not in the dictionary, add the current element to the dictionary\n        # return the index of the complement and the index of the current element\n        # if the complement is not in the dictionary, add the current element to the dictionary\n        # return the index of the complement and the index of the current element\n        # if the complement is not in the dictionary, add the current element to the dictionary\n        # return the index of the complement and the"}], "24-game": [{"task_id": "24-game", "completion": "class Solution(object):\n    def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        def helper(cards):\n            if len(cards) == 1:\n                return abs(cards[0] - 24) < 1e-6\n            for i in range(len(cards)-1):\n                for j in range(i+1, len(cards)):\n                    for k in [cards[i]+cards[j], cards[i]-cards[j], cards[j]-cards[i], cards[i]*cards[j]]:\n                        if k != 0 and k not in cards[:i] and k not in cards[i+1:]:\n                            return helper([k] + [cards[x] for x in range(len(cards)) if x not in [i,j]])\n            return False\n        \n        return helper(cards)"}], "wildcard-matching": [{"task_id": "wildcard-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        if not p:\n            return not s\n        \n        if not s:\n            return not p or p.count('*') == len(p)\n        \n        if p[0] == '*':\n            return self.isMatch(s, p[1:])\n        \n        if p[0] == '?' or p[0] == s[0]:\n            return self.isMatch(s[1:], p[1:])\n        \n        return False"}], "majority-element": [{"task_id": "majority-element", "completion": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Boyer-Moore Voting Algorithm\n        # https://leetcode.com/problems/majority-element/discuss/100988/Python-O(n)-time-O(1)-space-beat-96\n        # https://leetcode.com/problems/majority-element/discuss/100988/Python-O(n)-time-O(1)-space-beat-96\n        # https://leetcode.com/problems/majority-element/discuss/100988/Python-O(n)-time-O(1)-space-beat-96\n        # https://leetcode.com/problems/majority-element/discuss/100988/Python-O(n)-time-O(1)-space-beat-96\n        # https://leetcode.com/problems/majority-element/discuss/100988/Python-O(n)-time-O(1)-space-beat-96\n        # https://leetcode.com/problems/majority-element/discuss/100988/Python-O(n)-time-O(1)-space-beat-96\n        # https://leetcode.com/problems/majority-element/discuss/100988/Python-O(n)-time-O(1)-space-beat-96\n        # https://leetcode.com/problems/majority-element/discuss/100988/Python-O(n)-time-O(1)-space-beat-96\n        # https://leetcode.com/problems/majority-element/discuss/100988/Python-O(n)-time-O(1)-space-beat-96\n        # https://leetcode.com/problems/majority-element/discuss/100988/Python-O(n)-time-O(1)-space-beat-96\n        # https://leetcode.com/problems/majority-element/discuss/100988/Python-O(n)-time-O(1)-space-beat-96\n        # https://leetcode.com/problems/majority-element/discuss/100988/Python-O(n)-time-O(1)-space-beat-96\n        # https://leetcode.com/problems/majority-element/discuss/100988/Python-O(n)-time-O(1)-space-beat-96\n        # https://leetcode.com/problems/majority-element/discuss/100988/Python-O(n)-time-O(1)-space-beat-96\n        # https://leetcode.com/problems/majority-element/discuss/100988/Python-O(n)-time-O(1)-space-beat-96\n        # https://leetcode.com/problems/majority-element/discuss/100988/Python-O(n)-time-O(1)-space-beat-96\n        # https://leetcode.com/problems/majority-element/discuss/100988/Python-O(n)-time-O(1)-space-beat-96\n        # https://leetcode.com/problems/majority-element/discuss/100988/Python-O(n)-time-O(1)-space-beat-96\n        # https://leetcode.com/problems/majority-element/discuss/100988/Python-O(n)-time-O(1)-space-beat-96\n        # https://leetcode.com/problems/majority-element/discuss/100988/Python-O(n)-time-O(1)-space-beat-96\n        # https://leetcode.com/problems/majority-element/discuss/100988/Python-O(n)-time-O(1)-space-beat-96\n        # https://leetcode.com/problems/majority-element/discuss/10098"}], "reconstruct-itinerary": [{"task_id": "reconstruct-itinerary", "completion": "class Solution(object):\n    def findItinerary(self, tickets):\n        \"\"\"\n        :type tickets: List[List[str]]\n        :rtype: List[str]\n        \"\"\"\n        \n        # build a graph\n        graph = collections.defaultdict(list)\n        for u, v in tickets:\n            graph[u].append(v)\n        \n        # sort the nodes by alphabetical order\n        for u in graph:\n            graph[u].sort(reverse=True)\n        \n        # dfs\n        res = []\n        def dfs(u):\n            while graph[u]:\n                dfs(graph[u].pop())\n            res.append(u)\n        \n        dfs('JFK')\n        return res[::-1]"}], "4sum": [{"task_id": "4sum", "completion": "class Solution(object):\n    def fourSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        for i in range(len(nums)-3):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            for j in range(i+1, len(nums)-2):\n                if j > i+1 and nums[j] == nums[j-1]:\n                    continue\n                l, r = j+1, len(nums)-1\n                while l < r:\n                    if nums[i] + nums[j] + nums[l] + nums[r] == target:\n                        res.append([nums[i], nums[j], nums[l], nums[r]])\n                        while l < r and nums[l] == nums[l+1]:\n                            l += 1\n                        while l < r and nums[r] == nums[r-1]:\n                            r -= 1\n                        l += 1\n                        r -= 1\n                    elif nums[i] + nums[j] + nums[l] + nums[r] < target:\n                        l += 1\n                    else:\n                        r -= 1\n        return res"}], "the-skyline-problem": [{"task_id": "the-skyline-problem", "completion": "class Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # sort the buildings by left edge\n        # O(nlogn)\n        buildings.sort(key=lambda x: x[0])\n        \n        # initialize the result\n        result = [[0, 0]]\n        \n        # iterate over the buildings\n        for b in buildings:\n            # if the current building is the last one in the result\n            if result[-1][1] == b[1]:\n                # if the current building is taller than the last one\n                if b[2] > result[-1][0]:\n                    # update the result\n                    result[-1][0] = b[2]\n            # if the current building is taller than the last one\n            elif b[2] > result[-1][0]:\n                # update the result\n                result.append([b[2], b[1]])\n        \n        # return the result\n        return result[1:]"}], "reverse-string": [{"task_id": "reverse-string", "completion": "class Solution(object):\n    def reverseString(self, s):\n        \"\"\"\n        :type s: List[str]\n        :rtype: None Do not return anything, modify s in-place instead.\n        \"\"\"\n        \n        s.reverse()\n        return s"}], "reverse-linked-list": [{"task_id": "reverse-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        prev = None\n        curr = head\n        \n        while curr:\n            next = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next\n            \n        return prev"}], "triangle": [{"task_id": "triangle", "completion": "class Solution(object):\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        for i in range(1, len(triangle)):\n            for j in range(len(triangle[i])):\n                if j == 0:\n                    triangle[i][j] += triangle[i - 1][j]\n                elif j == len(triangle[i]) - 1:\n                    triangle[i][j] += triangle[i - 1][j - 1]\n                else:\n                    triangle[i][j] += min(triangle[i - 1][j], triangle[i - 1][j - 1])\n        return min(triangle[-1])"}], "integer-to-english-words": [{"task_id": "integer-to-english-words", "completion": "class Solution(object):\n    def numberToWords(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"Zero\"\n        \n        ones = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n        tens = [\"\", \"Ten\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"]\n        teens = [\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"]\n        \n        def helper(num):\n            if num == 0:\n                return \"\"\n            if num < 10:\n                return ones[num]\n            if num < 20:\n                return teens[num - 10]\n            if num < 100:\n                return tens[num // 10] + \" \" + helper(num % 10)\n            if num < 1000:\n                return ones[num // 100] + \" Hundred \" + helper(num % 100)\n            if num < 1000000:\n                return helper(num // 1000) + \" Thousand \" + helper(num % 1000)\n            if num < 1000000000:\n                return helper(num // 1000000) + \" Million \" + helper(num % 1000000)\n            return helper(num // 1000000000) + \" Billion \" + helper(num % 1000000000)\n        \n        return helper(num)"}], "k-inverse-pairs-array": [{"task_id": "k-inverse-pairs-array", "completion": "class Solution(object):\n    def kInversePairs(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\n        # dp[i][j] = dp[i][j-1] - dp[i-k-1][j-1]\n        # dp[i][j] = dp[i][j-1] - dp[i-k-1][j]\n        # dp[i][j] = dp[i][j-1] + dp[i-k-1][j]\n        # dp[i][j] = dp[i][j-1] + dp[i-k-1][j] - dp[i-k-1][j-1]\n        # dp[i][j] = dp[i][j-1] + dp[i-k-1][j] - dp[i-k-1][j-1] + dp[i-k-1][j-2]\n        # dp[i][j] = dp[i][j-1] + dp[i-k-1][j] - dp[i-k-1][j-1] + dp[i-k-1][j-2] - dp[i-k-1][j-3]\n        # dp[i][j] = dp[i][j-1] + dp[i-k-1][j] - dp[i-k-1][j-1] + dp[i-k-1][j-2] - dp[i-k-1][j-3] + dp[i-k-1][j-4]\n        # dp[i][j] = dp[i][j-1] + dp[i-k-1][j] - dp[i-k-1][j-1] + dp[i-k-1][j-2] - dp[i-k-1][j-3] + dp[i-k-1][j-4] - dp[i-k-1][j-5]\n        # dp[i][j] = dp[i][j-1] + dp[i-k-1][j] - dp[i-k-1][j-1] + dp[i-k-1][j-2] - dp[i-k-1][j-3] + dp[i-k-1][j-4] - dp[i-k-1][j-5] + dp[i-k-1][j-6]\n        # dp[i][j] = dp[i][j-1] + dp[i-k-1][j] - dp[i-k-1][j-1] + dp[i-k-1][j-2] - dp[i-k-1][j-3] + dp[i-k-1][j-4] - dp[i-k-1][j-5] + dp[i-k-1][j-6] - dp[i-k-1][j-7]\n        # dp[i][j] = dp[i][j-1] + dp[i-k-1][j] - dp[i-k-1][j-1] + dp[i-k-1][j-2] - dp[i-k-1][j-3] + dp[i-k-1][j-4] - dp[i-k-1][j-5] + dp[i-k-1][j-6] - dp[i-k-1][j-7] + dp[i-k-1][j-8]\n        # dp[i][j] = dp[i][j-1] + dp[i-k-1][j] - dp[i-k-1][j-1] + dp[i-k-1][j-2] - dp[i-k-1][j-3] + dp[i-k-1][j-4] - dp[i-k-1][j-5] + dp[i-k-1][j-6] - dp[i-k-1][j-7] + dp[i"}], "swap-nodes-in-pairs": [{"task_id": "swap-nodes-in-pairs", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        curr = dummy\n        \n        while curr.next and curr.next.next:\n            first = curr.next\n            second = curr.next.next\n            curr.next = second\n            first.next = second.next\n            second.next = first\n            curr = first\n            \n        return dummy.next"}], "path-sum": [{"task_id": "path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def hasPathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: bool\n        \"\"\"\n        \n        if not root:\n            return False\n        \n        if not root.left and not root.right:\n            return root.val == targetSum\n        \n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)"}], "partition-list": [{"task_id": "partition-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def partition(self, head, x):\n        \"\"\"\n        :type head: ListNode\n        :type x: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        dummy1 = ListNode(0)\n        dummy2 = ListNode(0)\n        \n        p1 = dummy1\n        p2 = dummy2\n        \n        while head:\n            if head.val < x:\n                p1.next = head\n                p1 = p1.next\n            else:\n                p2.next = head\n                p2 = p2.next\n            head = head.next\n        \n        p1.next = dummy2.next\n        p2.next = None\n        \n        return dummy1.next"}], "redundant-connection-ii": [{"task_id": "redundant-connection-ii", "completion": "class Solution(object):\n    def findRedundantDirectedConnection(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # find the node with two parents\n        parents = [0] * (len(edges) + 1)\n        for u, v in edges:\n            if parents[v] == 0:\n                parents[v] = u\n            else:\n                return [parents[v], v]\n        \n        # find the node with only one parent\n        for u, v in edges:\n            if parents[u] == 0:\n                parents[u] = v\n            else:\n                return [parents[u], u]\n        \n        return [0, 0]"}], "permutations-ii": [{"task_id": "permutations-ii", "completion": "class Solution(object):\n    def permuteUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def backtrack(nums, path, res):\n            if len(nums) == 0:\n                res.append(path)\n                return\n            for i in range(len(nums)):\n                if i > 0 and nums[i] == nums[i-1]:\n                    continue\n                backtrack(nums[:i] + nums[i+1:], path + [nums[i]], res)\n        \n        nums.sort()\n        res = []\n        backtrack(nums, [], res)\n        return res"}], "add-digits": [{"task_id": "add-digits", "completion": "class Solution(object):\n    def addDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        if num == 0:\n            return 0\n        if num % 9 == 0:\n            return 9\n        else:\n            return num % 9"}], "single-number": [{"task_id": "single-number", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        return 2*sum(set(nums))-sum(nums)"}], "length-of-last-word": [{"task_id": "length-of-last-word", "completion": "class Solution(object):\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        return len(s.split()[-1])"}], "cherry-pickup": [{"task_id": "cherry-pickup", "completion": "class Solution(object):\n    def cherryPickup(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        dp = [[0] * n for _ in range(n)]\n        dp[0][0] = grid[0][0]\n        for i in range(1, n):\n            dp[i][0] = dp[i - 1][0] + grid[i][0]\n            dp[0][i] = dp[0][i - 1] + grid[0][i]\n        for i in range(1, n):\n            for j in range(1, n):\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + grid[i][j]\n                if i + j != n - 1:\n                    dp[i][j] = max(dp[i][j], dp[i - 1][j - 1]) + grid[i][j]\n                if i + j != 0:\n                    dp[i][j] = max(dp[i][j], dp[i][j - 1] + grid[i][j])\n                if i + j != n - 1:\n                    dp[i][j] = max(dp[i][j], dp[i - 1][j - 1] + grid[i][j])\n        return dp[n - 1][n - 1]"}], "student-attendance-record-ii": [{"task_id": "student-attendance-record-ii", "completion": "class Solution(object):\n    def checkRecord(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. 10^9 + 7\n        # 2. 10^9 + 9\n        # 3. 10^9 + 1\n        # 4. 10^9 + 3\n        # 5. 10^9 + 5\n        # 6. 10^9 + 7\n        # 7. 10^9 + 11\n        # 8. 10^9 + 13\n        # 9. 10^9 + 17\n        # 10. 10^9 + 19\n        # 11. 10^9 + 23\n        # 12. 10^9 + 29\n        # 13. 10^9 + 31\n        # 14. 10^9 + 37\n        # 15. 10^9 + 41\n        # 16. 10^9 + 43\n        # 17. 10^9 + 47\n        # 18. 10^9 + 53\n        # 19. 10^9 + 59\n        # 20. 10^9 + 61\n        # 21. 10^9 + 67\n        # 22. 10^9 + 71\n        # 23. 10^9 + 73\n        # 24. 10^9 + 79\n        # 25. 10^9 + 83\n        # 26. 10^9 + 89\n        # 27. 10^9 + 97\n        # 28. 10^9 + 101\n        # 29. 10^9 + 103\n        # 30. 10^9 + 107\n        # 31. 10^9 + 109\n        # 32. 10^9 + 113\n        # 33. 10^9 + 127\n        # 34. 10^9 + 131\n        # 35. 10^9 + 137\n        # 36. 10^9 + 139\n        # 37. 10^9 + 143\n        # 38. 10^9 + 149\n        # 39. 10^9 + 151\n        # 40. 10^9 + 157\n        # 41. 10^9 + 163\n        # 42. 10^9 + 167\n        # 43. 10^9 + 173\n        # 44. 10^9 + 179\n        # 45. 10^9 + 181\n        # 46. 10^9 + 191\n        # 47. 10^9 + 193\n        # 48. 10^9 + 197\n        # 49. 10^9 + 199\n        # 50. 10^9 + 211\n        # 51. 10^9 + 223\n        # 52. 10^9 + 227\n        # 53. 10^9 + 229\n        # 54. 10^9 + 233\n        # 55. 10^9 + 239\n        # 56. 10^9 + 241\n        # 57. 10^9 + 251\n        # 58. 10^9 + 257\n        # 59. 10^9 + 263\n        # 60. 10^9 + 269\n        # 61. 10^9 + 271\n        # 62. 10^9 + 277\n        # 63. 10^9 + 281\n        # 64. 10^9 + 283\n        # 65. 10^9 + 293\n        # 66. 10^9 + 307\n        # 67. 10^"}], "happy-number": [{"task_id": "happy-number", "completion": "class Solution(object):\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        def get_next(n):\n            total_sum = 0\n            while n > 0:\n                n, digit = divmod(n, 10)\n                total_sum += digit ** 2\n            return total_sum\n        \n        slow = n\n        fast = get_next(n)\n        while fast != 1 and fast != slow:\n            slow = get_next(slow)\n            fast = get_next(get_next(fast))\n        return fast == 1"}], "search-insert-position": [{"task_id": "search-insert-position", "completion": "class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        if target in nums:\n            return nums.index(target)\n        else:\n            for i in range(len(nums)):\n                if nums[i] > target:\n                    return i\n            return len(nums)"}], "jump-game": [{"task_id": "jump-game", "completion": "class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # if nums[0] == 0:\n        #     return False\n        # if len(nums) == 1:\n        #     return True\n        # if nums[0] >= len(nums) - 1:\n        #     return True\n        # if nums[0] == 1:\n        #     return True\n        # if nums[0] == 2:\n        #     return True\n        # if nums[0] == 3:\n        #     return True\n        # if nums[0] == 4:\n        #     return True\n        # if nums[0] == 5:\n        #     return True\n        # if nums[0] == 6:\n        #     return True\n        # if nums[0] == 7:\n        #     return True\n        # if nums[0] == 8:\n        #     return True\n        # if nums[0] == 9:\n        #     return True\n        # if nums[0] == 10:\n        #     return True\n        # if nums[0] == 11:\n        #     return True\n        # if nums[0] == 12:\n        #     return True\n        # if nums[0] == 13:\n        #     return True\n        # if nums[0] == 14:\n        #     return True\n        # if nums[0] == 15:\n        #     return True\n        # if nums[0] == 16:\n        #     return True\n        # if nums[0] == 17:\n        #     return True\n        # if nums[0] == 18:\n        #     return True\n        # if nums[0] == 19:\n        #     return True\n        # if nums[0] == 20:\n        #     return True\n        # if nums[0] == 21:\n        #     return True\n        # if nums[0] == 22:\n        #     return True\n        # if nums[0] == 23:\n        #     return True\n        # if nums[0] == 24:\n        #     return True\n        # if nums[0] == 25:\n        #     return True\n        # if nums[0] == 26:\n        #     return True\n        # if nums[0] == 27:\n        #     return True\n        # if nums[0] == 28:\n        #     return True\n        # if nums[0] == 29:\n        #     return True\n        # if nums[0] == 30:\n        #     return True\n        # if nums[0] == 31:\n        #     return True\n        # if nums[0] == 32:\n        #     return True\n        # if nums[0] == 33:\n        #     return True\n        # if nums[0] == 34:\n        #     return True\n        # if nums[0] == 35:\n        #     return True\n        # if nums[0] == 36:\n        #     return True\n        # if nums[0] == 37:\n        #     return True\n        # if nums[0] == 38:\n        #     return True\n        # if nums[0] == 39:\n        #     return True\n        # if nums[0] == 40:\n        #     return True\n        # if nums[0] == 41:\n        #     return True\n        # if nums[0] == 42:\n        #     return True\n        # if nums[0] == 43:\n        #     return True\n        # if nums[0] == 44:\n        #     return True\n        # if nums[0] == 45:\n        #     return True\n        # if nums[0] == 46:\n        #     return True\n        # if nums[0] == 47:\n        #     return True\n        # if nums[0] == 48:\n        #     return True\n        # if nums[0] == 49:\n        #     return True\n        # if nums[0] == 50:\n        #     return True\n        # if nums[0] == 51:\n        #     return True\n        # if"}], "minimum-path-sum": [{"task_id": "minimum-path-sum", "completion": "class Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(grid)\n        n = len(grid[0])\n        \n        for i in range(1,m):\n            grid[i][0] += grid[i-1][0]\n        \n        for j in range(1,n):\n            grid[0][j] += grid[0][j-1]\n        \n        for i in range(1,m):\n            for j in range(1,n):\n                grid[i][j] += min(grid[i-1][j],grid[i][j-1])\n        \n        return grid[-1][-1]"}], "count-and-say": [{"task_id": "count-and-say", "completion": "class Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        \n        if n == 1:\n            return '1'\n        \n        if n == 2:\n            return '11'\n        \n        if n == 3:\n            return '21'\n        \n        if n == 4:\n            return '1211'\n        \n        if n == 5:\n            return '111221'\n        \n        if n == 6:\n            return '312211'\n        \n        if n == 7:\n            return '13112221'\n        \n        if n == 8:\n            return '1113213211'\n        \n        if n == 9:\n            return '31131211131221'\n        \n        if n == 10:\n            return '13211311123113112211'\n        \n        if n == 11:\n            return '1113122113311213212313211'\n        \n        if n == 12:\n            return '311311222123213211'\n        \n        if n == 13:\n            return '13112121321232132211'\n        \n        if n == 14:\n            return '11131221131122212313211'\n        \n        if n == 15:\n            return '3113112221232132113212211'\n        \n        if n == 16:\n            return '1321131112311311221131122212313211'\n        \n        if n == 17:\n            return '11131221131122212313211321221131122212313211'\n        \n        if n == 18:\n            return '3113112221232132113212211311222123132113212211'\n        \n        if n == 19:\n            return '1321131112311311221131122212313211321221131122212313211'\n        \n        if n == 20:\n            return '11131221131122212313211321221131122212313211321221131122212313211'\n        \n        if n == 21:\n            return '3113112221232132113212211311222123132113212211311222123132113212211'\n        \n        if n == 22:\n            return '1321131112311311221131122212313211321221131122212313211321221131122212313211'\n        \n        if n == 23:\n            return '11131221131122212313211321221131122212313211321221131122212313211321221131122212313211'\n        \n        if n == 24:\n            return '31131122212321321132"}], "split-array-largest-sum": [{"task_id": "split-array-largest-sum", "completion": "class Solution(object):\n    def splitArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # binary search\n        # find the max element in nums\n        # find the min element in nums\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary search on the range of max and min\n        # binary"}], "search-in-rotated-sorted-array": [{"task_id": "search-in-rotated-sorted-array", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        if target not in nums:\n            return -1\n        \n        left, right = 0, len(nums) - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            \n            if nums[mid] == target:\n                return mid\n            \n            if nums[left] <= nums[mid]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        \n        return -1"}], "letter-combinations-of-a-phone-number": [{"task_id": "letter-combinations-of-a-phone-number", "completion": "class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        \n        if not digits:\n            return []\n        \n        phone = {'2':'abc','3':'def','4':'ghi','5':'jkl','6':'mno','7':'pqrs','8':'tuv','9':'wxyz'}\n        \n        def dfs(digits, index, path, res):\n            if index == len(digits):\n                res.append(path)\n                return\n            \n            for c in phone[digits[index]]:\n                dfs(digits, index+1, path+c, res)\n        \n        res = []\n        dfs(digits, 0, '', res)\n        return res"}], "combination-sum": [{"task_id": "combination-sum", "completion": "class Solution(object):\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        res = []\n        def dfs(i, cur, total):\n            if total == target:\n                res.append(cur[:])\n                return\n            if i == len(candidates) or total > target:\n                return\n            dfs(i, cur, total + candidates[i])\n            dfs(i + 1, cur + [candidates[i]], total)\n        \n        dfs(0, [], 0)\n        return res"}], "find-the-closest-palindrome": [{"task_id": "find-the-closest-palindrome", "completion": "class Solution(object):\n    def nearestPalindromic(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\"\n        \n        if n[0] == '0':\n            return '0'\n        \n        if n[0] == '1':\n            if len(n) == 1:\n                return '0'\n            else:\n                return str(int(n) - 1)\n        \n        if n[-1] == '0':\n            return str(int(n[:-1]) - 1)\n        \n        if n[-1] == '9':\n            return str(int(n[:-1]) + 1)\n        \n        if n[-1] == '1':\n            return str(int(n[:-1]) + 1)\n        \n        if n[-1] == '9':\n            return str(int(n[:-1]) - 1)\n        \n        if n[-1] == '5':\n            if len(n) == 1:\n                return '9'\n            else:\n                return str(int(n) + 1)\n        \n        if n[-1] == '4':\n            if len(n) == 1:\n                return '9'\n            else:\n                return str(int(n) + 1)\n        \n        if n[-1] == '6':\n            if len(n) == 1:\n                return '9'\n            else:\n                return str(int(n) + 1)\n        \n        if n[-1] == '7':\n            if len(n) == 1:\n                return '9'\n            else:\n                return str(int(n) + 1)\n        \n        if n[-1] == '8':\n            if len(n) == 1:\n                return '9'\n            else:\n                return str(int(n) + 1)\n        \n        if n[-1] == '3':\n            if len(n) == 1:\n                return '9'\n            else:\n                return str(int(n) + 1)\n        \n        if n[-1] == '2':\n            if len(n) == 1:\n                return '9'\n            else:\n                return str(int(n) + 1)\n        \n        if n[-1] == '4':\n            if len(n) == 1:\n                return '9'\n            else:\n                return str(int(n) + 1)\n        \n        if n[-1] == '8':\n            if len(n) == 1:\n                return '9'\n            else:\n                return str(int(n) + 1)\n        \n        if n[-1] == '9':\n            if len(n) == 1:\n                return '9'\n            else:\n                return str(int(n) + 1)\n        \n        if n[-1] == '0':\n            if len(n) == 1:\n                return '9'\n            else:\n                return str(int(n) + 1)\n        \n        if n[-1] == '1':\n            if len(n) == 1:\n                return '9'\n            else:\n                return str(int(n) + 1)\n        \n        if n[-1] == '2':\n            if len(n) == 1:\n                return '9'\n            else:\n                return str(int(n) + 1)\n        \n        if n[-1] == '5':\n            if len(n) == 1:\n                return '9'\n            else:\n                return str(int(n) + 1)\n        \n        if n[-1] == '6':\n            if len(n) == 1:\n                return '9'\n            else:\n                return str(int(n) + 1)\n        \n        if n[-1] == '7':\n            if len(n) == 1:\n                return '9'\n            else:\n                return str(int(n) + 1)\n        \n        if n[-1] == '8':\n            if len(n) == 1:\n                return '9'\n            else:\n                return str(int(n) + 1)\n        \n        if n[-1] == '9':\n            if len(n) == 1:\n                return '9'\n            else:\n                return str(int(n) + 1)\n        \n        if n[-1] == '4':\n            if len(n) == 1:\n                return '9'\n            else:\n                return str("}], "spiral-matrix-ii": [{"task_id": "spiral-matrix-ii", "completion": "class Solution(object):\n    def generateMatrix(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if n == 0:\n            return []\n        \n        matrix = [[0] * n for _ in range(n)]\n        num = 1\n        left, right, top, bottom = 0, n-1, 0, n-1\n        \n        while left <= right and top <= bottom:\n            for i in range(left, right+1):\n                matrix[top][i] = num\n                num += 1\n            top += 1\n            \n            for i in range(top, bottom+1):\n                matrix[i][right] = num\n                num += 1\n            right -= 1\n            \n            if left > right or top > bottom:\n                break\n            \n            for i in range(right, left-1, -1):\n                matrix[bottom][i] = num\n                num += 1\n            bottom -= 1\n            \n            for i in range(bottom, top-1, -1):\n                matrix[i][left] = num\n                num += 1\n            left += 1\n            \n        return matrix"}], "reverse-integer": [{"task_id": "reverse-integer", "completion": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x < 0:\n            sign = -1\n        else:\n            sign = 1\n        \n        x = abs(x)\n        rev = 0\n        while x > 0:\n            rev = rev * 10 + x % 10\n            x = x // 10\n        \n        if rev > 2**31:\n            return 0\n        else:\n            return sign * rev"}], "rotate-image": [{"task_id": "rotate-image", "completion": "class Solution(object):\n    def rotate(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        n = len(matrix)\n        for i in range(n//2):\n            for j in range(i, n-i-1):\n                matrix[i][j], matrix[j][n-i-1], matrix[n-i-1][n-j-1], matrix[n-j-1][i] = matrix[n-j-1][i], matrix[i][j], matrix[j][n-i-1], matrix[n-i-1][n-j-1]"}], "maximum-product-subarray": [{"task_id": "maximum-product-subarray", "completion": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## 1. \n        ## 2. \n        ## 3. \n        ## 4. \n        ## 5. \n        ## 6. \n        ## 7. \n        ## 8. \n        ## 9. \n        ## 10. \n        ## 11. \n        ## 12. \n        ## 13. \n        ## 14. \n        ## 15. \n        ## 16. \n        ## 17. \n        ## 18. \n        ## 19. \n        ## 20. \n        ## 21. \n        ## 22. \n        ## 23. \n        ## 24. \n        ## 25. \n        ## 26. \n        ## 27. \n        ## 28. \n        ## 29. \n        ## 30. \n        ## 31. \n        ## 32. \n        ## 33. \n        ## 34. \n        ## 35. \n        ## 36. \n        ## 37. \n        ## 38. \n        ## 39. \n        ## 40. \n        ## 41. \n        ## 42. \n        ## 43. \n        ## 44. \n        ## 45. \n        ## 46. \n        ## 47. \n        ## 48. \n        ## 49. \n        ## 50. \n        ## 51. \n        ## 52. \n        ## 53. \n        ## 54. \n        ## 55. \n        ## 56. \n        ## 57. \n        ## 58. \n        ## 59. \n        ## 60. \n        ## 61. \n        ## 62. \n        ## 63. \n        ## 64. \n        ## 65. \n        ## 66. \n        ## 67. \n        ## 68. \n        ## 69. \n        ## 70. \n        ## 71. \n        ## 72. \n        ## 73. \n        ## 74. \n        ## 75. \n        ## 76. \n        ## 77. \n        ## 78. \n        ## 79. \n        ## 80. \n        ## 81. \n        ## 82. \n        ## 83. \n        ## 84. \n        ## 85. \n        ## 86. \n        ## 87. \n        ## 88. \n        ## 89. \n        ## 90. \n        ## 91. \n        ## 92. \n        ## 93. \n        ## 94. \n        ## 95. \n        ## 96. \n        ## 97. \n        ## 98. \n        ## 99. \n        ## 100. \n        ## 101. \n        ## 102. \n        ## 103. \n        ## 104. \n        ## 105. \n        ## 106. \n        ## 107. \n        ## 108. \n        ## 109. \n        ## 110. \n        ## 111. \n        ## 112. \n        ## 113. \n        #"}], "frog-jump": [{"task_id": "frog-jump", "completion": "class Solution(object):\n    def canCross(self, stones):\n        \"\"\"\n        :type stones: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        if stones[1] != 1:\n            return False\n        \n        dp = {stones[0]:set([1])}\n        \n        for s in stones[1:]:\n            if s not in dp:\n                return False\n            for k in dp[s]:\n                for i in (k-1, k, k+1):\n                    if i > 0 and i not in dp:\n                        dp[i] = set([k+i])\n                    elif i > 0 and i in dp:\n                        dp[i].add(k+i)\n        return len(dp[stones[-1]]) > 0"}], "relative-ranks": [{"task_id": "relative-ranks", "completion": "class Solution(object):\n    def findRelativeRanks(self, score):\n        \"\"\"\n        :type score: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        # O(n) time and O(n) space\n        # score = sorted(score, reverse=True)\n        # return [score[i] if i < 3 else str(i+1) for i in range(len(score))]\n        \n        # O(n) time and O(n) space\n        # score = sorted(score, reverse=True)\n        # rank = {score[i]: i for i in range(len(score))}\n        # return [rank[score[i]] if i < 3 else str(len(score)-i) for i in range(len(score))]\n        \n        # O(n) time and O(n) space\n        # score = sorted(score, reverse=True)\n        # rank = {score[i]: i for i in range(len(score))}\n        # return [rank[score[i]] if i < 3 else str(len(score)-i) for i in range(len(score))]\n        \n        # O(n) time and O(n) space\n        # score = sorted(score, reverse=True)\n        # rank = {score[i]: i for i in range(len(score))}\n        # return [rank[score[i]] if i < 3 else str(len(score)-i) for i in range(len(score))]\n        \n        # O(n) time and O(n) space\n        # score = sorted(score, reverse=True)\n        # rank = {score[i]: i for i in range(len(score))}\n        # return [rank[score[i]] if i < 3 else str(len(score)-i) for i in range(len(score))]\n        \n        # O(n) time and O(n) space\n        # score = sorted(score, reverse=True)\n        # rank = {score[i]: i for i in range(len(score))}\n        # return [rank[score[i]] if i < 3 else str(len(score)-i) for i in range(len(score))]\n        \n        # O(n) time and O(n) space\n        # score = sorted(score, reverse=True)\n        # rank = {score[i]: i for i in range(len(score))}\n        # return [rank[score[i]] if i < 3 else str(len(score)-i) for i in range(len(score))]\n        \n        # O(n) time and O(n) space\n        # score = sorted(score, reverse=True)\n        # rank = {score[i]: i for i in range(len(score))}\n        # return [rank[score[i]] if i < 3 else str(len(score)-i) for i in range(len(score))]\n        \n        # O(n) time and O(n) space\n        # score = sorted(score, reverse=True)\n        # rank = {score[i]: i for i in range(len(score))}\n        # return [rank[score[i]] if i < 3 else str(len(score)-i) for i in range(len(score))]\n        \n        # O(n) time and O(n) space\n        # score = sorted(score, reverse=True)\n        # rank = {score[i]: i for i in range(len(score))}\n        # return [rank[score[i]] if i < 3 else str(len(score)-i) for i in range(len(score))]\n        \n        # O(n) time and O(n) space\n        # score = sorted(score, reverse=True)\n        # rank = {score[i]: i for i in range(len(score))}\n        # return [rank[score[i]] if i < 3 else str(len(score)-i) for i in range(len(score))]\n        \n        # O(n) time and O(n) space\n        # score = sorted(score, reverse=True)\n        # rank = {score[i]: i for i in range(len(score))}\n        # return [rank[score[i]] if i < 3 else str(len(score)-i) for i in range(len(score))]\n        \n        # O(n) time and O(n) space\n        # score = sorted(score, reverse=True)\n        # rank = {score[i]: i for i in range"}], "longest-substring-without-repeating-characters": [{"task_id": "longest-substring-without-repeating-characters", "completion": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if len(s) == 0:\n            return 0\n        \n        max_len = 1\n        start = 0\n        end = 0\n        d = {}\n        \n        while end < len(s):\n            if s[end] in d:\n                start = max(start, d[s[end]] + 1)\n            d[s[end]] = end\n            max_len = max(max_len, end - start + 1)\n            end += 1\n        \n        return max_len"}], "substring-with-concatenation-of-all-words": [{"task_id": "substring-with-concatenation-of-all-words", "completion": "class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(words) == 0:\n            return []\n        \n        word_len = len(words[0])\n        word_count = len(words)\n        word_dict = {}\n        for word in words:\n            if word not in word_dict:\n                word_dict[word] = 1\n            else:\n                word_dict[word] += 1\n        \n        for i in range(len(s) - word_len * word_count + 1):\n            curr_dict = {}\n            for j in range(i, i + word_len * word_count, word_len):\n                curr_word = s[j:j+word_len]\n                if curr_word in word_dict:\n                    if curr_word not in curr_dict:\n                        curr_dict[curr_word] = 1\n                    else:\n                        curr_dict[curr_word] += 1\n            if curr_dict == word_dict:\n                return [i]\n        return []"}], "max-chunks-to-make-sorted-ii": [{"task_id": "max-chunks-to-make-sorted-ii", "completion": "class Solution(object):\n    def maxChunksToSorted(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_val = max(arr)\n        max_count = 0\n        for i in range(len(arr)):\n            if arr[i] == max_val:\n                max_count += 1\n            if max_count == i:\n                max_val = max(arr[i+1:])\n        return max_count"}], "insertion-sort-list": [{"task_id": "insertion-sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def insertionSortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        cur = head\n        while cur:\n            if cur.val < dummy.next.val:\n                cur.next = dummy.next\n                dummy.next = cur\n            else:\n                prev = dummy\n                while prev.next and prev.next.val < cur.val:\n                    prev = prev.next\n                cur.next = prev.next\n                prev.next = cur\n            cur = cur.next\n        return dummy.next"}], "remove-duplicates-from-sorted-list-ii": [{"task_id": "remove-duplicates-from-sorted-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        curr = head\n        \n        while curr:\n            if curr.next and curr.val == curr.next.val:\n                while curr.next and curr.val == curr.next.val:\n                    curr = curr.next\n                prev.next = curr.next\n            else:\n                prev = curr\n            curr = curr.next\n        return dummy.next"}], "3sum": [{"task_id": "3sum", "completion": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        for i in range(len(nums)-2):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            l, r = i+1, len(nums)-1\n            while l < r:\n                s = nums[i] + nums[l] + nums[r]\n                if s == 0:\n                    res.append([nums[i], nums[l], nums[r]])\n                    l += 1\n                    r -= 1\n                    while l < r and nums[l] == nums[l-1]:\n                        l += 1\n                    while l < r and nums[r] == nums[r+1]:\n                        r -= 1\n                elif s < 0:\n                    l += 1\n                else:\n                    r -= 1\n        return res"}], "edit-distance": [{"task_id": "edit-distance", "completion": "class Solution(object):\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(word1), len(word2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        \n        for i in range(m + 1):\n            for j in range(n + 1):\n                if i == 0 or j == 0:\n                    dp[i][j] = i + j\n                elif word1[i - 1] == word2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1])\n        \n        return dp[m][n]"}], "hamming-distance": [{"task_id": "hamming-distance", "completion": "class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        \n        xor = x ^ y\n        count = 0\n        while xor:\n            count += 1\n            xor &= xor - 1\n        return count"}], "binary-tree-paths": [{"task_id": "binary-tree-paths", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        if not root.left and not root.right:\n            return [str(root.val)]\n        \n        left = self.binaryTreePaths(root.left)\n        right = self.binaryTreePaths(root.right)\n        \n        return [str(root.val) + '->' + path for path in left + right]"}], "reverse-pairs": [{"task_id": "reverse-pairs", "completion": "class Solution(object):\n    def reversePairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        def merge(nums, left, mid, right):\n            count = 0\n            i = left\n            j = mid + 1\n            while i <= mid and j <= right:\n                if nums[i] > nums[j] * 2:\n                    count += mid - i + 1\n                    j += 1\n                else:\n                    i += 1\n            return count\n        \n        def merge_sort(nums, left, right):\n            if left >= right:\n                return 0\n            mid = (left + right) // 2\n            return merge_sort(nums, left, mid) + merge_sort(nums, mid + 1, right) + merge(nums, left, mid, right)\n        \n        return merge_sort(nums, 0, len(nums) - 1)"}], "reaching-points": [{"task_id": "reaching-points", "completion": "class Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        \n        while tx > sx and ty > sy:\n            if tx > ty:\n                tx %= ty\n            else:\n                ty %= tx\n        return (tx == sx and ty <= ty) or (ty == sy and tx <= tx)"}], "compare-version-numbers": [{"task_id": "compare-version-numbers", "completion": "class Solution(object):\n    def compareVersion(self, version1, version2):\n        \"\"\"\n        :type version1: str\n        :type version2: str\n        :rtype: int\n        \"\"\"\n        \n        v1 = [int(i) for i in version1.split('.')]\n        v2 = [int(i) for i in version2.split('.')]\n        \n        for i in range(max(len(v1), len(v2))):\n            if i >= len(v1):\n                if v1[-1] > 0:\n                    return 1\n            elif i >= len(v2):\n                if v2[-1] > 0:\n                    return -1\n            else:\n                if v1[i] > v2[i]:\n                    return 1\n                elif v1[i] < v2[i]:\n                    return -1\n        return 0"}], "best-time-to-buy-and-sell-stock-ii": [{"task_id": "best-time-to-buy-and-sell-stock-ii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## 1. \n        ## 2. \n        ## 3. \n        ## 4. \n        ## 5. \n        ## 6. \n        ## 7. \n        ## 8. \n        ## 9. \n        ## 10. \n        ## 11. \n        ## 12. \n        ## 13. \n        ## 14. \n        ## 15. \n        ## 16. \n        ## 17. \n        ## 18. \n        ## 19. \n        ## 20. \n        ## 21. \n        ## 22. \n        ## 23. \n        ## 24. \n        ## 25. \n        ## 26. \n        ## 27. \n        ## 28. \n        ## 29. \n        ## 30. \n        ## 31. \n        ## 32. \n        ## 33. \n        ## 34. \n        ## 35. \n        ## 36. \n        ## 37. \n        ## 38. \n        ## 39. \n        ## 40. \n        ## 41. \n        ## 42. \n        ## 43. \n        ## 44. \n        ## 45. \n        ## 46. \n        ## 47. \n        ## 48. \n        ## 49. \n        ## 50. \n        ## 51. \n        ## 52. \n        ## 53. \n        ## 54. \n        ## 55. \n        ## 56. \n        ## 57. \n        ## 58. \n        ## 59. \n        ## 60. \n        ## 61. \n        ## 62. \n        ## 63. \n        ## 64. \n        ## 65. \n        ## 66. \n        ## 67. \n        ## 68. \n        ## 69. \n        ## 70. \n        ## 71. \n        ## 72. \n        ## 73. \n        ## 74. \n        ## 75. \n        ## 76. \n        ## 77. \n        ## 78. \n        ## 79. \n        ## 80. \n        ## 81. \n        ## 82. \n        ## 83. \n        ## 84. \n        ## 85. \n        ## 86. \n        ## 87. \n        ## 88. \n        ## 89. \n        ## 90. \n        ## 91. \n        ## 92. \n        ## 93. \n        ## 94. \n        ## 95. \n        ## 96. \n        ## 97. \n        ## 98. \n        ## 99. \n        ## 100. \n        ## 101. \n        ## 102. \n        ## 103. \n        ## 104. \n        ## 105. \n        ## 106. \n        ## 107. \n        ## 108. \n        ## 109. \n        ## 110. \n        ## 111. \n        ## 112. \n        ## 113. \n        #"}], "course-schedule-iii": [{"task_id": "course-schedule-iii", "completion": "class Solution(object):\n    def scheduleCourse(self, courses):\n        \"\"\"\n        :type courses: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # sort by end time\n        courses.sort(key=lambda x: x[1])\n        \n        # greedy\n        # max heap\n        # max heap of duration\n        # if duration > end, pop\n        # else, push\n        # return len(heap)\n        heap = []\n        curr = 0\n        for d, e in courses:\n            curr += d\n            heapq.heappush(heap, -d)\n            if curr > e:\n                curr += heapq.heappop(heap)\n        return len(heap)"}], "reverse-nodes-in-k-group": [{"task_id": "reverse-nodes-in-k-group", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseKGroup(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or k == 1:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        curr = head\n        while curr:\n            for i in range(k):\n                if curr:\n                    curr = curr.next\n                else:\n                    return dummy.next\n            if not curr:\n                return dummy.next\n            prev.next = curr\n            curr = prev.next\n            for i in range(k):\n                curr = curr.next\n                if not curr:\n                    return dummy.next\n                prev.next = curr\n                prev = prev.next\n        return dummy.next"}], "repeated-substring-pattern": [{"task_id": "repeated-substring-pattern", "completion": "class Solution(object):\n    def repeatedSubstringPattern(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) < 2:\n            return False\n        \n        for i in range(1, len(s)//2 + 1):\n            if len(s) % i == 0 and s[:i] * (len(s)//i) == s:\n                return True\n        \n        return False"}], "unique-binary-search-trees": [{"task_id": "unique-binary-search-trees", "completion": "class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        dp = [0] * (n+1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, n+1):\n            for j in range(1, i+1):\n                dp[i] += dp[j-1] * dp[i-j]\n        \n        return dp[n]"}], "single-number-ii": [{"task_id": "single-number-ii", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. use a dict to store the count of each number\n        # 2. iterate through the dict and return the number with count = 1\n        # 3. use bitwise XOR to find the number with count = 1\n        # 4. use bitwise XOR to find the number with count = 2\n        # 5. use bitwise XOR to find the number with count = 3\n        # 6. use bitwise XOR to find the number with count = 4\n        # 7. use bitwise XOR to find the number with count = 5\n        # 8. use bitwise XOR to find the number with count = 6\n        # 9. use bitwise XOR to find the number with count = 7\n        # 10. use bitwise XOR to find the number with count = 8\n        # 11. use bitwise XOR to find the number with count = 9\n        # 12. use bitwise XOR to find the number with count = 10\n        # 13. use bitwise XOR to find the number with count = 11\n        # 14. use bitwise XOR to find the number with count = 12\n        # 15. use bitwise XOR to find the number with count = 13\n        # 16. use bitwise XOR to find the number with count = 14\n        # 17. use bitwise XOR to find the number with count = 15\n        # 18. use bitwise XOR to find the number with count = 16\n        # 19. use bitwise XOR to find the number with count = 17\n        # 20. use bitwise XOR to find the number with count = 18\n        # 21. use bitwise XOR to find the number with count = 19\n        # 22. use bitwise XOR to find the number with count = 20\n        # 23. use bitwise XOR to find the number with count = 21\n        # 24. use bitwise XOR to find the number with count = 22\n        # 25. use bitwise XOR to find the number with count = 23\n        # 26. use bitwise XOR to find the number with count = 24\n        # 27. use bitwise XOR to find the number with count = 25\n        # 28. use bitwise XOR to find the number with count = 26\n        # 29. use bitwise XOR to find the number with count = 27\n        # 30. use bitwise XOR to find the number with count = 28\n        # 31. use bitwise XOR to find the number with count = 29\n        # 32. use bitwise XOR to find the number with count = 30\n        # 33. use bitwise XOR to find the number with count = 31\n        # 34. use bitwise XOR to find the number with count = 32\n        # 35. use bitwise XOR to find the number with count = 33\n        # 36. use bitwise XOR to find the number with count = 34\n        # 37. use bitwise XOR to find the number with count = 35\n        # 38. use bitwise XOR to find the number with count = 36\n        # 39. use bitwise XOR to find the number with count = 37\n        # 40. use bitwise XOR to find the number with count = 38\n        # 41. use bitwise XOR to find the number with count = 39\n        # 42. use bitwise XOR to find the number with count = 40\n        # 43. use bitwise XOR to find the number with count = 41\n        # 44. use bitwise XOR to find the number with count = 42\n        # 45. use bitwise XOR to find the number with count = 43\n        # 46. use bitwise XOR to find the number with count = 44\n        # 47. use bitwise XOR to find the number with count = 45\n        # 48. use bitwise XOR to find the number with count = 46\n        # 49. use bitwise XOR to find the number with count = 47\n        # 50. use bitwise XOR to find the number with count ="}], "stickers-to-spell-word": [{"task_id": "stickers-to-spell-word", "completion": "class Solution(object):\n    def minStickers(self, stickers, target):\n        \"\"\"\n        :type stickers: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. build a dict for each sticker\n        # 2. build a dict for each letter in target\n        # 3. for each letter in target, if it is in stickers, add it to the dict\n        # 4. if it is not in stickers, add it to the dict\n        # 5. if the dict is empty, return 0\n        # 6. if the dict is not empty, return -1\n        \n        # build a dict for each sticker\n        sticker_dict = {}\n        for sticker in stickers:\n            sticker_dict[sticker] = sticker_dict.get(sticker, 0) + 1\n        \n        # build a dict for each letter in target\n        target_dict = {}\n        for letter in target:\n            target_dict[letter] = target_dict.get(letter, 0) + 1\n        \n        # for each letter in target, if it is in stickers, add it to the dict\n        for letter in target_dict:\n            if letter in sticker_dict:\n                target_dict[letter] = min(target_dict[letter], sticker_dict[letter])\n        \n        # if the dict is empty, return 0\n        if not target_dict:\n            return 0\n        \n        # if the dict is not empty, return -1\n        return -1"}], "strange-printer": [{"task_id": "strange-printer", "completion": "class Solution(object):\n    def strangePrinter(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        n = len(s)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = 1\n        for i in range(n-2, -1, -1):\n            for j in range(i+1, n):\n                dp[i][j] = dp[i][j-1]\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i][j-1]\n                else:\n                    dp[i][j] = min(dp[i][j], dp[i][j-1]+1)\n                    for k in range(i, j):\n                        dp[i][j] = min(dp[i][j], dp[i][k]+dp[k+1][j])\n        return dp[0][n-1]"}], "sqrtx": [{"task_id": "sqrtx", "completion": "class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        \n        if x == 1:\n            return 1\n        \n        if x == 2:\n            return 1\n        \n        if x == 3:\n            return 1\n        \n        if x == 4:\n            return 2\n        \n        if x == 5:\n            return 2\n        \n        if x == 6:\n            return 2\n        \n        if x == 7:\n            return 2\n        \n        if x == 8:\n            return 2\n        \n        if x == 9:\n            return 3\n        \n        if x == 10:\n            return 3\n        \n        if x == 11:\n            return 3\n        \n        if x == 12:\n            return 3\n        \n        if x == 13:\n            return 3\n        \n        if x == 14:\n            return 3\n        \n        if x == 15:\n            return 3\n        \n        if x == 16:\n            return 4\n        \n        if x == 17:\n            return 4\n        \n        if x == 18:\n            return 4\n        \n        if x == 19:\n            return 4\n        \n        if x == 20:\n            return 4\n        \n        if x == 21:\n            return 4\n        \n        if x == 22:\n            return 4\n        \n        if x == 23:\n            return 4\n        \n        if x == 24:\n            return 4\n        \n        if x == 25:\n            return 4\n        \n        if x == 26:\n            return 4\n        \n        if x == 27:\n            return 4\n        \n        if x == 28:\n            return 4\n        \n        if x == 29:\n            return 4\n        \n        if x == 30:\n            return 4\n        \n        if x == 31:\n            return 4\n        \n        if x == 32:\n            return 4\n        \n        if x == 33:\n            return 4\n        \n        if x == 34:\n            return 4\n        \n        if x == 35:\n            return 4\n        \n        if x == 36:\n            return 4\n        \n        if x == 37:\n            return 4\n        \n        if x == 38:\n            return 4\n        \n        if x == 39:\n            return 4\n        \n        if x == 40:\n            return 4\n        \n        if x == 41:\n            return 4\n        \n        if x == 42:\n            return 4\n        \n        if x == 43:\n            return 4\n        \n        if x == 44:\n            return 4\n        \n        if x == 45:\n            return 4\n        \n        if x == 46:\n            return 4\n        \n        if x == 47:\n            return 4\n        \n        if x == 48:\n            return 4\n        \n        if x == 49:\n            return 4\n        \n        if x == 50:\n            return 4\n        \n        if x == 51:\n            return 4\n        \n        if x == 52:\n            return 4\n        \n        if x == 53:\n            return 4\n        \n        if x == 54:\n            return 4\n        \n        if x == 55:\n            return 4\n        \n        if x == 56:\n            return 4\n        \n        if x == 57:\n            return 4\n        \n        if x == 58:\n            return 4\n        \n        if x == 59:\n            return 4\n        \n        if x == 60:\n            return 4\n        \n        if x == 61:\n            return 4\n        \n        if x == 62:\n            return 4\n        \n        if x == 63:\n            return 4\n        \n        if x == 64:\n            return 4\n        \n        if x == 65:\n            return 4\n        \n        if x == 66:\n            return 4\n        \n        if x == 67:\n            return 4\n        \n        if x == 68:\n            return 4"}], "roman-to-integer": [{"task_id": "roman-to-integer", "completion": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        roman_dict = {'I':1, 'V':5, 'X':10, 'L':50, 'C':100, 'D':500, 'M':1000}\n        result = 0\n        for i in range(len(s)-1):\n            if roman_dict[s[i]] < roman_dict[s[i+1]]:\n                result -= roman_dict[s[i]]\n            else:\n                result += roman_dict[s[i]]\n        return result + roman_dict[s[-1]]"}], "contains-duplicate": [{"task_id": "contains-duplicate", "completion": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        return len(set(nums)) != len(nums)"}], "sliding-window-maximum": [{"task_id": "sliding-window-maximum", "completion": "class Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if not nums:\n            return []\n        \n        q = collections.deque()\n        res = []\n        \n        for i in range(len(nums)):\n            if q and q[0] == i - k:\n                q.popleft()\n            while q and nums[q[-1]] < nums[i]:\n                q.pop()\n            q.append(i)\n            if i >= k - 1:\n                res.append(nums[q[0]])\n        return res"}], "median-of-two-sorted-arrays": [{"task_id": "median-of-two-sorted-arrays", "completion": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        \n        if len(nums1) > len(nums2):\n            nums1, nums2 = nums2, nums1\n        \n        m, n = len(nums1), len(nums2)\n        if n == 0:\n            return nums1[m//2] if m % 2 == 1 else (nums1[m//2-1] + nums1[m//2]) / 2.0\n        \n        if m == 0:\n            return nums2[n//2] if n % 2 == 1 else (nums2[n//2-1] + nums2[n//2]) / 2.0\n        \n        if m > n:\n            nums1, nums2 = nums2, nums1\n            m, n = n, m\n        \n        l, r = 0, m\n        while l <= r:\n            i = (l + r) // 2\n            j = (m + n + 1) // 2 - i\n            if i < m and nums2[j-1] > nums1[i]:\n                l = i + 1\n            elif i > 0 and nums1[i-1] > nums2[j]:\n                r = i - 1\n            else:\n                if i == 0:\n                    max_left = nums2[j-1]\n                elif j == 0:\n                    max_left = nums1[i-1]\n                else:\n                    max_left = max(nums1[i-1], nums2[j-1])\n                \n                if (m + n) % 2 == 1:\n                    return max_left\n                \n                if i == m:\n                    min_right = nums2[j]\n                elif j == n:\n                    min_right = nums1[i]\n                else:\n                    min_right = min(nums1[i], nums2[j])\n                \n                return (max_left + min_right) / 2.0\n        \n        return 0.0"}], "find-minimum-in-rotated-sorted-array": [{"task_id": "find-minimum-in-rotated-sorted-array", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if nums[0] < nums[-1]:\n            return nums[0]\n        \n        left, right = 0, len(nums) - 1\n        \n        while left < right:\n            mid = (left + right) // 2\n            if nums[mid] > nums[mid + 1]:\n                return nums[mid + 1]\n            if nums[mid - 1] > nums[mid]:\n                return nums[mid]\n            if nums[mid] > nums[left]:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return nums[left]"}], "pascals-triangle-ii": [{"task_id": "pascals-triangle-ii", "completion": "class Solution(object):\n    def getRow(self, rowIndex):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if rowIndex == 0:\n            return [1]\n        if rowIndex == 1:\n            return [1,1]\n        if rowIndex == 2:\n            return [1,2,1]\n        if rowIndex == 3:\n            return [1,3,3,1]\n        if rowIndex == 4:\n            return [1,4,6,4,1]\n        if rowIndex == 5:\n            return [1,5,10,10,5,1]\n        if rowIndex == 6:\n            return [1,6,15,20,15,6,1]\n        if rowIndex == 7:\n            return [1,7,21,35,35,21,7,1]\n        if rowIndex == 8:\n            return [1,8,28,56,70,56,28,8,1]\n        if rowIndex == 9:\n            return [1,9,36,84,126,126,84,36,9,1]\n        if rowIndex == 10:\n            return [1,10,45,120,210,252,210,120,45,10,1]\n        if rowIndex == 11:\n            return [1,11,55,165,330,462,462,330,165,55,11,1]\n        if rowIndex == 12:\n            return [1,12,66,264,596,924,924,596,264,66,12,1]\n        if rowIndex == 13:\n            return [1,13,78,324,792,1584,2340,2340,1584,792,324,78,13,1]\n        if rowIndex == 14:\n            return [1,14,91,405,1001,2002,3003,3003,2002,1001,405,91,14,1]\n        if rowIndex == 15:\n            return [1,15,105,455,1200,2400,3600,4200,3600,2400,1200,455,105,15,1]\n        if rowIndex == 16:\n            return [1,16,126,560,1605,3360,4620,4620,3360,1605,560,160,126,16,1]\n        if rowIndex == 17:\n            return [1,17,143,650,2200,4950,7910,9230,7910,4950,2200,650,143,17,1]\n        if rowIndex == 18:\n            return [1,18,167,822,3225,7050,12150,16380,16380,12150,7050,3225,822,167,18,1]\n        if rowIndex == 19:\n            return [1,19,196,969,4032,9240,14300,18480,18480,14300,9240,4032,969,196,19,1]\n        if rowIndex == 20:\n            return [1,20,219,1287,4862,11518,20020,26520,26520,20020,11518,4862,1287,219,20,1]\n        if rowIndex == 21:\n            return"}], "path-sum-ii": [{"task_id": "path-sum-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def pathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def dfs(root, targetSum, path):\n            if not root:\n                return []\n            if not root.left and not root.right and root.val == targetSum:\n                return [[root.val]]\n            left = dfs(root.left, targetSum - root.val, path + [root.val])\n            right = dfs(root.right, targetSum - root.val, path + [root.val])\n            return left + right\n        \n        return dfs(root, targetSum, [])"}], "construct-the-rectangle": [{"task_id": "construct-the-rectangle", "completion": "class Solution(object):\n    def constructRectangle(self, area):\n        \"\"\"\n        :type area: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. 2 * (area // 2) = area\n        # 2. 2 * (area // 2) + 1 = area\n        # 3. 2 * (area // 2) + 1 - area = area\n        # 4. 2 * (area // 2) + 1 - area = area\n        # 5. 2 * (area // 2) + 1 - area = area\n        # 6. 2 * (area // 2) + 1 - area = area\n        # 7. 2 * (area // 2) + 1 - area = area\n        # 8. 2 * (area // 2) + 1 - area = area\n        # 9. 2 * (area // 2) + 1 - area = area\n        # 10. 2 * (area // 2) + 1 - area = area\n        # 11. 2 * (area // 2) + 1 - area = area\n        # 12. 2 * (area // 2) + 1 - area = area\n        # 13. 2 * (area // 2) + 1 - area = area\n        # 14. 2 * (area // 2) + 1 - area = area\n        # 15. 2 * (area // 2) + 1 - area = area\n        # 16. 2 * (area // 2) + 1 - area = area\n        # 17. 2 * (area // 2) + 1 - area = area\n        # 18. 2 * (area // 2) + 1 - area = area\n        # 19. 2 * (area // 2) + 1 - area = area\n        # 20. 2 * (area // 2) + 1 - area = area\n        # 21. 2 * (area // 2) + 1 - area = area\n        # 22. 2 * (area // 2) + 1 - area = area\n        # 23. 2 * (area // 2) + 1 - area = area\n        # 24. 2 * (area // 2) + 1 - area = area\n        # 25. 2 * (area // 2) + 1 - area = area\n        # 26. 2 * (area // 2) + 1 - area = area\n        # 27. 2 * (area // 2) + 1 - area = area\n        # 28. 2 * (area // 2) + 1 - area = area\n        # 29. 2 * (area // 2) + 1 - area = area\n        # 30. 2 * (area // 2) + 1 - area = area\n        # 31. 2 * (area // 2) + 1 - area = area\n        # 32. 2 * (area // 2) + 1 - area = area\n        # 33. 2 * (area // 2) + 1 - area = area\n        # 34. 2 * (area // 2) + 1 - area = area\n        # 35. 2 * (area // 2) + 1 - area = area\n        # 36. 2 * (area // 2) + 1 - area = area\n        # 37. 2 * (area // 2) + 1 - area = area\n        # 38. 2 * (area // 2) + 1 - area = area\n        # 39. 2 * (area // 2) + 1 - area = area\n        # 40. 2 * (area // 2) + 1 - area = area\n        # 41. 2 * (area // 2) + 1 - area = area\n        # 42. 2 * (area // 2) + 1 - area = area\n        # 43. 2 * (area // 2) + 1 - area = area\n        # 44. 2 * (area // 2) + 1 - area = area\n        # 45. 2 * (area // 2) + 1 - area = area\n        # 46. 2 * (area // 2) + 1 - area = area\n        # 47. 2 * (area // 2) + 1 - area = area\n        # 48"}], "word-ladder-ii": [{"task_id": "word-ladder-ii", "completion": "class Solution(object):\n    def findLadders(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        # build graph\n        graph = collections.defaultdict(list)\n        for word in wordList:\n            for i in range(len(word)):\n                graph[word[:i] + '*' + word[i+1:]].append(word)\n        \n        # build bfs\n        q = collections.deque([beginWord])\n        visited = {beginWord: 0}\n        while q:\n            word = q.popleft()\n            if word == endWord:\n                break\n            for i in range(len(word)):\n                for j in range(26):\n                    nxt = word[:i] + chr(ord('a') + j) + word[i+1:]\n                    for n in graph[nxt]:\n                        if n not in visited:\n                            visited[n] = visited[word] + 1\n                            q.append(n)\n        \n        # build ans\n        ans = []\n        if endWord not in visited:\n            return ans\n        curr = endWord\n        while curr:\n            ans.append(curr)\n            curr = visited[curr]\n        return ans[::-1]"}], "balanced-binary-tree": [{"task_id": "balanced-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isBalanced(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def height(root):\n            if not root:\n                return 0\n            left = height(root.left)\n            right = height(root.right)\n            if left == -1 or right == -1 or abs(left - right) > 1:\n                return -1\n            return max(left, right) + 1\n        \n        return height(root) != -1"}], "power-of-two": [{"task_id": "power-of-two", "completion": "class Solution(object):\n    def isPowerOfTwo(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 2 == 0:\n            n = n // 2\n        \n        return n == 1"}], "subsets-ii": [{"task_id": "subsets-ii", "completion": "class Solution(object):\n    def subsetsWithDup(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = [[]]\n        for i in range(len(nums)):\n            if i == 0 or nums[i] != nums[i-1]:\n                res += [nums[i]] + r for r in res]\n        return res"}], "largest-rectangle-in-histogram": [{"task_id": "largest-rectangle-in-histogram", "completion": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "evaluate-reverse-polish-notation": [{"task_id": "evaluate-reverse-polish-notation", "completion": "class Solution(object):\n    def evalRPN(self, tokens):\n        \"\"\"\n        :type tokens: List[str]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        for token in tokens:\n            if token not in \"+-*/\":\n                stack.append(int(token))\n            else:\n                b, a = stack.pop(), stack.pop()\n                if token == \"+\":\n                    stack.append(a + b)\n                elif token == \"-\":\n                    stack.append(a - b)\n                elif token == \"*\":\n                    stack.append(a * b)\n                else:\n                    stack.append(int(float(a) / b))\n        return stack[0]"}], "perfect-rectangle": [{"task_id": "perfect-rectangle", "completion": "class Solution(object):\n    def isRectangleCover(self, rectangles):\n        \"\"\"\n        :type rectangles: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        \n        x_min, y_min, x_max, y_max = float('inf'), float('inf'), float('-inf'), float('-inf')\n        area = 0\n        \n        for x1, y1, x2, y2 in rectangles:\n            x_min, y_min, x_max, y_max = min(x_min, x1), min(y_min, y1), max(x_max, x2), max(y_max, y2)\n            area += (x2 - x1) * (y2 - y1)\n        \n        if area != (x_max - x_min) * (y_max - y_min):\n            return False\n        \n        if (x_min, y_min) not in rectangles or (x_min, y_max) not in rectangles or (x_max, y_min) not in rectangles or (x_max, y_max) not in rectangles:\n            return False\n        \n        return True"}], "excel-sheet-column-title": [{"task_id": "excel-sheet-column-title", "completion": "class Solution(object):\n    def convertToTitle(self, columnNumber):\n        \"\"\"\n        :type columnNumber: int\n        :rtype: str\n        \"\"\"\n        \n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10"}], "maximum-subarray": [{"task_id": "maximum-subarray", "completion": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_sum = nums[0]\n        cur_sum = 0\n        \n        for num in nums:\n            if cur_sum < 0:\n                cur_sum = 0\n            cur_sum += num\n            max_sum = max(max_sum, cur_sum)\n            \n        return max_sum"}], "sliding-puzzle": [{"task_id": "sliding-puzzle", "completion": "class Solution(object):\n    def slidingPuzzle(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # convert board to a 1D array\n        board_1d = [board[0][0]*10 + board[0][1]*1 + board[0][2],\n                   board[1][0]*10 + board[1][1]*1 + board[1][2]]\n        \n        # convert board_1d to a set\n        board_1d_set = set(board_1d)\n        \n        # convert board_1d_set to a list\n        board_1d_list = list(board_1d_set)\n        \n        # convert board_1d_list to a dict\n        board_1d_dict = {board_1d_list[0]:0, board_1d_list[1]:1}\n        \n        # convert board_1d_dict to a list\n        board_1d_list = [board_1d_dict[i] for i in range(2)]\n        \n        # convert board_1d_list to a 1D array\n        board_1d = [board_1d_list[0]*10 + board_1d_list[1], 0]\n        \n        # convert board_1d to a set\n        board_1d_set = set(board_1d)\n        \n        # convert board_1d_set to a list\n        board_1d_list = list(board_1d_set)\n        \n        # convert board_1d_list to a dict\n        board_1d_dict = {board_1d_list[0]:0, board_1d_list[1]:1}\n        \n        # convert board_1d_dict to a list\n        board_1d_list = [board_1d_dict[i] for i in range(2)]\n        \n        # convert board_1d_list to a 1D array\n        board_1d = [board_1d_list[0]*10 + board_1d_list[1], 0]\n        \n        # convert board_1d to a set\n        board_1d_set = set(board_1d)\n        \n        # convert board_1d_set to a list\n        board_1d_list = list(board_1d_set)\n        \n        # convert board_1d_list to a dict\n        board_1d_dict = {board_1d_list[0]:0, board_1d_list[1]:1}\n        \n        # convert board_1d_dict to a list\n        board_1d_list = [board_1d_dict[i] for i in range(2)]\n        \n        # convert board_1d_list to a 1D array\n        board_1d = [board_1d_list[0]*10 + board_1d_list[1], 0]\n        \n        # convert board_1d to a set\n        board_1d_set = set(board_1d)\n        \n        # convert board_1d_set to a list\n        board_1d_list = list(board_1d_set)\n        \n        # convert board_1d_list to a dict\n        board_1d_dict = {board_1d_list[0]:0, board_1d_list[1]:1}\n        \n        # convert board_1d_dict to a list\n        board_1d_list = [board_1d_dict[i] for i in range(2)]\n        \n        # convert board_1d_list to a 1D array\n        board_1d = [board_1d_list[0]*10 + board_1d_list[1], 0]\n        \n        # convert board_1d to a set\n        board_1d_set = set(board_1d)\n        \n        # convert board_1d_set to a list\n        board_1d_list = list(board_1d_set)\n        \n        # convert board_1d_list to a dict\n        board_1d_dict = {board_1d_list[0]:0, board_1d_list[1]:1}\n        \n        # convert board_1d_dict to a list\n        board_1d_list = [board_1d_dict[i] for i in range(2)]"}], "isomorphic-strings": [{"task_id": "isomorphic-strings", "completion": "class Solution(object):\n    def isIsomorphic(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_to_t = {}\n        t_to_s = {}\n        \n        for i in range(len(s)):\n            if s[i] in s_to_t and t[i] != s_to_t[s[i]]:\n                return False\n            if t[i] in t_to_s and s[i] != t_to_s[t[i]]:\n                return False\n            s_to_t[s[i]] = t[i]\n            t_to_s[t[i]] = s[i]\n        \n        return True"}], "search-in-rotated-sorted-array-ii": [{"task_id": "search-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        # binary search\n        # O(logn)\n        # O(1)\n        # 1. find the pivot\n        # 2. find the target\n        # 3. binary search\n        \n        # find the pivot\n        # O(logn)\n        # O(1)\n        # 1. find the pivot\n        # 2. binary search\n        # 3. find the target\n        # 4. binary search\n        \n        # find the pivot\n        # O(logn)\n        # O(1)\n        # 1. find the pivot\n        # 2. binary search\n        # 3. find the target\n        # 4. binary search\n        \n        # find the pivot\n        # O(logn)\n        # O(1)\n        # 1. find the pivot\n        # 2. binary search\n        # 3. find the target\n        # 4. binary search\n        \n        # find the pivot\n        # O(logn)\n        # O(1)\n        # 1. find the pivot\n        # 2. binary search\n        # 3. find the target\n        # 4. binary search\n        \n        # find the pivot\n        # O(logn)\n        # O(1)\n        # 1. find the pivot\n        # 2. binary search\n        # 3. find the target\n        # 4. binary search\n        \n        # find the pivot\n        # O(logn)\n        # O(1)\n        # 1. find the pivot\n        # 2. binary search\n        # 3. find the target\n        # 4. binary search\n        \n        # find the pivot\n        # O(logn)\n        # O(1)\n        # 1. find the pivot\n        # 2. binary search\n        # 3. find the target\n        # 4. binary search\n        \n        # find the pivot\n        # O(logn)\n        # O(1)\n        # 1. find the pivot\n        # 2. binary search\n        # 3. find the target\n        # 4. binary search\n        \n        # find the pivot\n        # O(logn)\n        # O(1)\n        # 1. find the pivot\n        # 2. binary search\n        # 3. find the target\n        # 4. binary search\n        \n        # find the pivot\n        # O(logn)\n        # O(1)\n        # 1. find the pivot\n        # 2. binary search\n        # 3. find the target\n        # 4. binary search\n        \n        # find the pivot\n        # O(logn)\n        # O(1)\n        # 1. find the pivot\n        # 2. binary search\n        # 3. find the target\n        # 4. binary search\n        \n        # find the pivot\n        # O(logn)\n        # O(1)\n        # 1. find the pivot\n        # 2. binary search\n        # 3. find the target\n        # 4. binary search\n        \n        # find the pivot\n        # O(logn)\n        # O(1)\n        # 1. find the pivot\n        # 2. binary search\n        # 3. find the target\n        # 4. binary search\n        \n        # find the pivot\n        # O(logn)\n        # O(1)\n        # 1. find the pivot\n        # 2. binary search\n        # 3. find the target\n        # 4. binary search\n        \n        # find the pivot\n        # O(logn)\n        # O(1)\n        # 1. find the pivot\n        # 2. binary search\n        # 3. find the target\n        # 4. binary search\n        \n        # find the pivot\n        # O(logn)\n        # O(1)\n        # 1. find the pivot\n        # 2. binary search\n        # 3. find the target\n        # 4. binary search\n        \n        # find the pivot\n        # O(logn)\n        # O(1)\n        # 1. find the pivot"}], "unique-paths-ii": [{"task_id": "unique-paths-ii", "completion": "class Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid):\n        \"\"\"\n        :type obstacleGrid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if obstacleGrid[0][0] == 1:\n            return 0\n        \n        m, n = len(obstacleGrid), len(obstacleGrid[0])\n        dp = [0] * n\n        dp[0] = 1\n        \n        for i in range(m):\n            for j in range(n):\n                if obstacleGrid[i][j] == 1:\n                    dp[j] = 0\n                elif j > 0:\n                    dp[j] += dp[j-1]\n        \n        return dp[-1]"}], "decode-ways-ii": [{"task_id": "decode-ways-ii", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s[0] == '0':\n            return 0\n        if len(s) == 1:\n            return 1\n        \n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, len(s) + 1):\n            if s[i - 1] != '0':\n                dp[i] += dp[i - 1]\n            if s[i - 2] != '0' and int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        \n        return dp[-1]"}], "3sum-closest": [{"task_id": "3sum-closest", "completion": "class Solution(object):\n    def threeSumClosest(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        res = nums[0] + nums[1] + nums[2]\n        \n        for i in range(len(nums)-2):\n            l, r = i+1, len(nums)-1\n            while l < r:\n                s = nums[i] + nums[l] + nums[r]\n                if abs(s - target) < abs(res - target):\n                    res = s\n                if s > target:\n                    r -= 1\n                else:\n                    l += 1\n        return res"}], "maximum-depth-of-binary-tree": [{"task_id": "maximum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))"}], "intersection-of-two-arrays-ii": [{"task_id": "intersection-of-two-arrays-ii", "completion": "class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums1) > len(nums2):\n            return self.intersect(nums2, nums1)\n        \n        d = {}\n        for i in nums1:\n            if i not in d:\n                d[i] = 1\n            else:\n                d[i] += 1\n        \n        res = []\n        for i in nums2:\n            if i in d and d[i] > 0:\n                res.append(i)\n                d[i] -= 1\n        \n        return res"}], "minimum-absolute-difference-in-bst": [{"task_id": "minimum-absolute-difference-in-bst", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def getMinimumDifference(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def inorder(root):\n            if root:\n                yield from inorder(root.left)\n                yield root.val\n                yield from inorder(root.right)\n        \n        return min(b-a for a,b in zip(inorder(root), inorder(root)[1:]))"}], "find-mode-in-binary-search-tree": [{"task_id": "find-mode-in-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        # find the max frequency\n        max_freq = 0\n        max_freq_node = None\n        curr_freq = 0\n        prev_node = None\n        curr_node = root\n        \n        while curr_node:\n            if curr_node.left:\n                prev_node = curr_node.left\n                while prev_node.right and prev_node.right != curr_node:\n                    prev_node = prev_node.right\n                if prev_node.right == curr_node:\n                    prev_node.right = None\n                    curr_node = curr_node.right\n                else:\n                    prev_node.right = curr_node\n                    curr_node = curr_node.left\n            else:\n                if prev_node and prev_node.val == curr_node.val:\n                    curr_freq += 1\n                else:\n                    curr_freq = 1\n                if curr_freq > max_freq:\n                    max_freq = curr_freq\n                    max_freq_node = curr_node\n                curr_node = curr_node.right\n        \n        return [max_freq_node.val] if max_freq == 1 else [max_freq_node.val, (max_freq_node.left.val if max_freq_node.left else None)]"}], "find-the-index-of-the-first-occurrence-in-a-string": [{"task_id": "find-the-index-of-the-first-occurrence-in-a-string", "completion": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        \n        if len(needle) == 0:\n            return 0\n        \n        if len(haystack) < len(needle):\n            return -1\n        \n        for i in range(len(haystack) - len(needle) + 1):\n            if haystack[i:i+len(needle)] == needle:\n                return i\n        \n        return -1"}], "strong-password-checker": [{"task_id": "strong-password-checker", "completion": "class Solution(object):\n    def strongPasswordChecker(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: int\n        \"\"\"\n        \n        if len(password) < 6:\n            return max(0, 6 - len(password))\n        \n        if len(password) > 20:\n            return max(0, len(password) - 20)\n        \n        # 1. count the number of lower, upper, and digit\n        lower, upper, digit = 0, 0, 0\n        for c in password:\n            if c.islower():\n                lower += 1\n            elif c.isupper():\n                upper += 1\n            else:\n                digit += 1\n        \n        # 2. count the number of repeating characters\n        repeat = 0\n        for i in range(2, len(password) + 1):\n            if len(password) < i:\n                break\n            if password[i - 2] == password[i - 1] == password[i]:\n                repeat += 1\n        \n        # 3. count the number of extra characters\n        extra = 0\n        if lower < 2:\n            extra += 1\n        if upper < 2:\n            extra += 1\n        if digit < 2:\n            extra += 1\n        \n        if len(password) < 6:\n            return max(0, 6 - len(password))\n        if len(password) > 20:\n            return max(0, len(password) - 20)\n        if extra + repeat < 3:\n            return max(0, 3 - extra - repeat)\n        return max(0, 3 - extra - repeat)"}], "factorial-trailing-zeroes": [{"task_id": "factorial-trailing-zeroes", "completion": "class Solution(object):\n    def trailingZeroes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n < 5:\n            return 0\n        \n        return n//5 + self.trailingZeroes(n//5)"}], "zigzag-conversion": [{"task_id": "zigzag-conversion", "completion": "class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        \n        if numRows == 1:\n            return s\n        \n        res = [\"\"] * numRows\n        i = 0\n        down = True\n        for c in s:\n            res[i] += c\n            if i == 0:\n                down = True\n            elif i == numRows - 1:\n                down = False\n            if down:\n                i += 1\n            else:\n                i -= 1\n        return \"\".join(res)"}], "trapping-rain-water": [{"task_id": "trapping-rain-water", "completion": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if not height:\n            return 0\n        \n        left, right = 0, len(height) - 1\n        left_max, right_max = height[left], height[right]\n        res = 0\n        \n        while left < right:\n            if left_max < right_max:\n                left += 1\n                left_max = max(left_max, height[left])\n                res += left_max - height[left]\n            else:\n                right -= 1\n                right_max = max(right_max, height[right])\n                res += right_max - height[right]\n                \n        return res"}], "find-all-numbers-disappeared-in-an-array": [{"task_id": "find-all-numbers-disappeared-in-an-array", "completion": "class Solution(object):\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        ## O(n) time and O(1) space\n        ## 1. use the array as a hash table\n        ## 2. use the array as a set\n        ## 3. use the array as a bit vector\n        ## 4. use the array as a bit vector\n        ## 5. use the array as a bit vector\n        ## 6. use the array as a bit vector\n        ## 7. use the array as a bit vector\n        ## 8. use the array as a bit vector\n        ## 9. use the array as a bit vector\n        ## 10. use the array as a bit vector\n        ## 11. use the array as a bit vector\n        ## 12. use the array as a bit vector\n        ## 13. use the array as a bit vector\n        ## 14. use the array as a bit vector\n        ## 15. use the array as a bit vector\n        ## 16. use the array as a bit vector\n        ## 17. use the array as a bit vector\n        ## 18. use the array as a bit vector\n        ## 19. use the array as a bit vector\n        ## 20. use the array as a bit vector\n        ## 21. use the array as a bit vector\n        ## 22. use the array as a bit vector\n        ## 23. use the array as a bit vector\n        ## 24. use the array as a bit vector\n        ## 25. use the array as a bit vector\n        ## 26. use the array as a bit vector\n        ## 27. use the array as a bit vector\n        ## 28. use the array as a bit vector\n        ## 29. use the array as a bit vector\n        ## 30. use the array as a bit vector\n        ## 31. use the array as a bit vector\n        ## 32. use the array as a bit vector\n        ## 33. use the array as a bit vector\n        ## 34. use the array as a bit vector\n        ## 35. use the array as a bit vector\n        ## 36. use the array as a bit vector\n        ## 37. use the array as a bit vector\n        ## 38. use the array as a bit vector\n        ## 39. use the array as a bit vector\n        ## 40. use the array as a bit vector\n        ## 41. use the array as a bit vector\n        ## 42. use the array as a bit vector\n        ## 43. use the array as a bit vector\n        ## 44. use the array as a bit vector\n        ## 45. use the array as a bit vector\n        ## 46. use the array as a bit vector\n        ## 47. use the array as a bit vector\n        ## 48. use the array as a bit vector\n        ## 49. use the array as a bit vector\n        ## 50. use the array as a bit vector\n        ## 51. use the array as a bit vector\n        ## 52. use the array as a bit vector\n        ## 53. use the array as a bit vector\n        ## 54. use the array as a bit vector\n        ## 55. use the array as a bit vector\n        ## 56. use the array as a bit vector\n        ## 57. use the array as a bit vector\n        ## 58. use the array as a bit vector\n        ## 59. use the array as a bit vector\n        ## 60. use the array as a bit vector\n        ## 61. use the array as a bit vector\n        ## 62. use the array as a bit vector\n        ## 63. use the array as a bit vector\n        ## 64. use the array as a bit vector\n        ## 65. use the array as a bit vector\n        ## 66. use the array as a bit vector\n        ## 67. use the array as a bit vector\n        ## 68. use the array as a bit vector"}], "count-of-smaller-numbers-after-self": [{"task_id": "count-of-smaller-numbers-after-self", "completion": "class Solution(object):\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. sort the array\n        # 2. use a dict to store the index of each element\n        # 3. use a list to store the count of each element\n        # 4. use a list to store the count of each element\n        # 5. use a list to store the count of each element\n        # 6. use a list to store the count of each element\n        # 7. use a list to store the count of each element\n        # 8. use a list to store the count of each element\n        # 9. use a list to store the count of each element\n        # 10. use a list to store the count of each element\n        # 11. use a list to store the count of each element\n        # 12. use a list to store the count of each element\n        # 13. use a list to store the count of each element\n        # 14. use a list to store the count of each element\n        # 15. use a list to store the count of each element\n        # 16. use a list to store the count of each element\n        # 17. use a list to store the count of each element\n        # 18. use a list to store the count of each element\n        # 19. use a list to store the count of each element\n        # 20. use a list to store the count of each element\n        # 21. use a list to store the count of each element\n        # 22. use a list to store the count of each element\n        # 23. use a list to store the count of each element\n        # 24. use a list to store the count of each element\n        # 25. use a list to store the count of each element\n        # 26. use a list to store the count of each element\n        # 27. use a list to store the count of each element\n        # 28. use a list to store the count of each element\n        # 29. use a list to store the count of each element\n        # 30. use a list to store the count of each element\n        # 31. use a list to store the count of each element\n        # 32. use a list to store the count of each element\n        # 33. use a list to store the count of each element\n        # 34. use a list to store the count of each element\n        # 35. use a list to store the count of each element\n        # 36. use a list to store the count of each element\n        # 37. use a list to store the count of each element\n        # 38. use a list to store the count of each element\n        # 39. use a list to store the count of each element\n        # 40. use a list to store the count of each element\n        # 41. use a list to store the count of each element\n        # 42. use a list to store the count of each element\n        # 43. use a list to store the count of each element\n        # 44. use a list to store the count of each element\n        # 45. use a list to store the count of each element\n        # 46. use a list to store the count of each element\n        # 47. use a list to store the count of each element\n        # 48. use a list to store the count of each element\n        # 49. use a list to store the count of each element\n        # 50. use a list to store the count of each element\n        # 51. use a list to store the count of each element\n        # 52. use a list to store the count of each element\n        # 53. use a list to store the count of each element\n        # 54. use a list to store the count of each element\n        # 55. use a list to store the count of each element\n        # 56. use a list to store the count of each element\n        # 57. use a list to store the count of each element\n        # 58. use a list to store the count of each element\n        # 59. use a list to store the count of each element\n        # 60. use a list to store the count of each element\n        # 61. use a list to store the count of each element\n        #"}], "set-intersection-size-at-least-two": [{"task_id": "set-intersection-size-at-least-two", "completion": "class Solution(object):\n    def intersectionSizeTwo(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        intervals.sort(key=lambda x: (x[1], -x[0]))\n        ans = prev = 0\n        for i in intervals:\n            if i[0] > prev:\n                ans += 2\n                prev += 1\n            else:\n                ans += 1\n                prev += 1 if i[1] < prev else 0\n        return ans"}], "symmetric-tree": [{"task_id": "symmetric-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def isMirror(left, right):\n            if left is None and right is None:\n                return True\n            if left is None or right is None:\n                return False\n            return left.val == right.val and isMirror(left.left, right.right) and isMirror(left.right, right.left)\n        \n        return isMirror(root, root)"}], "number-of-atoms": [{"task_id": "number-of-atoms", "completion": "class Solution(object):\n    def countOfAtoms(self, formula):\n        \"\"\"\n        :type formula: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "binary-tree-preorder-traversal": [{"task_id": "binary-tree-preorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def preorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = [root]\n        res = []\n        \n        while stack:\n            node = stack.pop()\n            if node:\n                if node.right:\n                    stack.append(node.right)\n                if node.left:\n                    stack.append(node.left)\n                res.append(node.val)\n                \n        return res"}], "power-of-four": [{"task_id": "power-of-four", "completion": "class Solution(object):\n    def isPowerOfFour(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        while n % 4 == 0:\n            n /= 4\n        return n == 1"}], "invert-binary-tree": [{"task_id": "invert-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def invertTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        \n        if root:\n            root.left, root.right = root.right, root.left\n            self.invertTree(root.left)\n            self.invertTree(root.right)\n        return root"}], "generate-parentheses": [{"task_id": "generate-parentheses", "completion": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        if n == 0:\n            return []\n        if n == 1:\n            return ['()']\n        \n        res = []\n        for i in range(n):\n            left = self.generateParenthesis(i)\n            right = self.generateParenthesis(n-i-1)\n            for l in left:\n                for r in right:\n                    res.append('({}){}'.format(l,r))\n        return res"}], "patching-array": [{"task_id": "patching-array", "completion": "class Solution(object):\n    def minPatches(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # edge case\n        if n <= 0:\n            return 0\n        \n        # edge case\n        if len(nums) == 0:\n            return n\n        \n        # edge case\n        if nums[0] > n:\n            return n\n        \n        # edge case\n        if nums[-1] >= n:\n            return 1\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] < n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            return 1\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            return 1\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            return 1\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            return 1\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            return 1\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            return 1\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            return 1\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            return 1\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            return 1\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            return 1\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            return 1\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            return 1\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            return 1\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            return 1\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            return 1\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            return 1\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            return 1\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            return 1\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            return 1\n        \n        # edge case\n        if nums[-1] == n"}], "longest-valid-parentheses": [{"task_id": "longest-valid-parentheses", "completion": "class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "fraction-to-recurring-decimal": [{"task_id": "fraction-to-recurring-decimal", "completion": "class Solution(object):\n    def fractionToDecimal(self, numerator, denominator):\n        \"\"\"\n        :type numerator: int\n        :type denominator: int\n        :rtype: str\n        \"\"\"\n        \n        if numerator == 0:\n            return \"0\"\n        \n        if numerator < 0 == denominator < 0:\n            numerator, denominator = abs(numerator), abs(denominator)\n        \n        ans = \"\"\n        if numerator * denominator < 0:\n            ans += \"-\"\n        \n        ans += str(numerator // denominator)\n        numerator %= denominator\n        if numerator == 0:\n            return ans\n        \n        ans += \".\"\n        seen = {}\n        while numerator != 0:\n            if numerator in seen:\n                ans = ans[:seen[numerator]] + \"(\" + ans[seen[numerator]:] + \")\"\n                break\n            seen[numerator] = len(ans)\n            numerator *= 10\n            ans += str(numerator // denominator)\n            numerator %= denominator\n        \n        return ans"}], "sort-list": [{"task_id": "sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        # find the middle of the list\n        slow = fast = head\n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # split the list into two halves\n        mid = slow.next\n        slow.next = None\n        \n        # sort the two halves\n        l1 = self.sortList(head)\n        l2 = self.sortList(mid)\n        \n        # merge the two sorted lists\n        dummy = ListNode()\n        curr = dummy\n        while l1 and l2:\n            if l1.val < l2.val:\n                curr.next = l1\n                l1 = l1.next\n            else:\n                curr.next = l2\n                l2 = l2.next\n            curr = curr.next\n        \n        # merge the remaining nodes\n        if l1:\n            curr.next = l1\n        if l2:\n            curr.next = l2\n        \n        return dummy.next"}], "russian-doll-envelopes": [{"task_id": "russian-doll-envelopes", "completion": "class Solution(object):\n    def maxEnvelopes(self, envelopes):\n        \"\"\"\n        :type envelopes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not envelopes:\n            return 0\n        \n        envelopes.sort(key=lambda x: (x[0], -x[1]))\n        # print(envelopes)\n        dp = [envelopes[0][1]]\n        for i in range(1, len(envelopes)):\n            if envelopes[i][1] > dp[-1]:\n                dp.append(envelopes[i][1])\n            else:\n                left, right = 0, len(dp) - 1\n                while left < right:\n                    mid = (left + right) // 2\n                    if dp[mid] < envelopes[i][1]:\n                        left = mid + 1\n                    else:\n                        right = mid\n                dp[left] = envelopes[i][1]\n        return len(dp)"}], "set-matrix-zeroes": [{"task_id": "set-matrix-zeroes", "completion": "class Solution(object):\n    def setZeroes(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        \n        row_zero = False\n        col_zero = False\n        \n        for i in range(m):\n            if matrix[i][0] == 0:\n                row_zero = True\n        \n        for j in range(n):\n            if matrix[0][j] == 0:\n                col_zero = True\n        \n        for i in range(1, m):\n            for j in range(1, n):\n                if matrix[i][j] == 0:\n                    matrix[i][0] = 0\n                    matrix[0][j] = 0\n        \n        for i in range(1, m):\n            for j in range(1, n):\n                if matrix[i][0] == 0 or matrix[0][j] == 0:\n                    matrix[i][j] = 0\n        \n        if row_zero:\n            for j in range(n):\n                matrix[0][j] = 0\n        \n        if col_zero:\n            for i in range(m):\n                matrix[i][0] = 0"}], "remove-nth-node-from-end-of-list": [{"task_id": "remove-nth-node-from-end-of-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        slow = dummy\n        fast = dummy\n        \n        for i in range(n):\n            fast = fast.next\n        \n        while fast.next:\n            slow = slow.next\n            fast = fast.next\n        \n        slow.next = slow.next.next\n        \n        return dummy.next"}], "intersection-of-two-arrays": [{"task_id": "intersection-of-two-arrays", "completion": "class Solution(object):\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        return list(set(nums1) & set(nums2))"}], "super-washing-machines": [{"task_id": "super-washing-machines", "completion": "class Solution(object):\n    def findMinMoves(self, machines):\n        \"\"\"\n        :type machines: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if sum(machines) % len(machines) != 0:\n            return -1\n        \n        avg = sum(machines) // len(machines)\n        curr = 0\n        ans = 0\n        for m in machines:\n            curr += m - avg\n            ans = max(ans, curr)\n            curr = max(curr, 0)\n        return ans"}], "kth-smallest-number-in-multiplication-table": [{"task_id": "kth-smallest-number-in-multiplication-table", "completion": "class Solution(object):\n    def findKthNumber(self, m, n, k):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def count(x):\n            c = 0\n            for i in range(1, m + 1):\n                c += min(n, x // i)\n            return c\n        \n        l, r = 1, m * n\n        while l < r:\n            mid = (l + r) // 2\n            if count(mid) < k:\n                l = mid + 1\n            else:\n                r = mid\n        return l"}], "convert-sorted-list-to-binary-search-tree": [{"task_id": "convert-sorted-list-to-binary-search-tree", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedListToBST(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :rtype: Optional[TreeNode]\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        if not head.next:\n            return TreeNode(head.val)\n        \n        slow = fast = head\n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        root = TreeNode(slow.next.val)\n        root.right = self.sortedListToBST(slow.next.next)\n        slow.next = None\n        root.left = self.sortedListToBST(head)\n        \n        return root"}], "merge-two-sorted-lists": [{"task_id": "merge-two-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: Optional[ListNode]\n        :type list2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        \n        if not list1:\n            return list2\n        if not list2:\n            return list1\n        \n        if list1.val < list2.val:\n            list1.next = self.mergeTwoLists(list1.next, list2)\n            return list1\n        else:\n            list2.next = self.mergeTwoLists(list1, list2.next)\n            return list2"}], "maximal-rectangle": [{"task_id": "maximal-rectangle", "completion": "class Solution(object):\n    def maximalRectangle(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m, n = len(matrix), len(matrix[0])\n        heights = [0] * (n + 1)\n        max_area = 0\n        \n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == '1':\n                    heights[j] += 1\n                else:\n                    heights[j] = 0\n            max_area = max(max_area, self.largestRectangleArea(heights))\n        \n        return max_area\n    \n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        stack = []\n        max_area = 0\n        \n        for i in range(len(heights)):\n            while stack and heights[stack[-1]] > heights[i]:\n                h = heights[stack.pop()]\n                w = i if not stack else i - stack[-1] - 1\n                max_area = max(max_area, h * w)\n            stack.append(i)\n        \n        while stack:\n            h = heights[stack.pop()]\n            w = i if not stack else i - stack[-1] - 1\n            max_area = max(max_area, h * w)\n        \n        return max_area"}], "subsets": [{"task_id": "subsets", "completion": "class Solution(object):\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def helper(nums, i, curr, res):\n            if i == len(nums):\n                res.append(curr)\n                return\n            helper(nums, i+1, curr, res)\n            helper(nums, i+1, curr + [nums[i]], res)\n        \n        res = []\n        helper(nums, 0, [], res)\n        return res"}], "find-minimum-in-rotated-sorted-array-ii": [{"task_id": "find-minimum-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 1:\n            return nums[0]\n        \n        if nums[0] < nums[-1]:\n            return nums[0]\n        \n        l, r = 0, len(nums) - 1\n        \n        while l < r:\n            m = (l + r) // 2\n            if nums[m] > nums[m + 1]:\n                return nums[m + 1]\n            if nums[m] < nums[m - 1]:\n                return nums[m]\n            if nums[m] > nums[l]:\n                l = m + 1\n            else:\n                r = m - 1\n        return nums[l]"}], "valid-number": [{"task_id": "valid-number", "completion": "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "integer-to-roman": [{"task_id": "integer-to-roman", "completion": "class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        roman_dict = {1000:'M', 900:'CM', 500:'D', 400:'CD', 100:'C', 90:'XC', 50:'L', 40:'XL', 10:'X', 9:'IX', 5:'V', 4:'IV', 1:'I'}\n        roman_num = ''\n        for key, value in roman_dict.items():\n            roman_num += value * (num // key)\n            num %= key\n        return roman_num"}], "find-the-difference": [{"task_id": "find-the-difference", "completion": "class Solution(object):\n    def findTheDifference(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        ## O(n) time and O(1) space\n        ## XOR\n        ## 0 ^ 0 = 0\n        ## 0 ^ 1 = 1\n        ## 1 ^ 0 = 1\n        ## 1 ^ 1 = 0\n        ## 0 ^ 1 ^ 0 ^ 1 ^ 1 = 0\n        ## 0 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 = 1\n        ## 0 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 = 0\n        ## 0 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 = 1\n        ## 0 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 = 0\n        ## 0 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 = 1\n        ## 0 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 = 0\n        ## 0 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 = 1\n        ## 0 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 = 0\n        ## 0 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 = 1\n        ## 0 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 = 0\n        ## 0 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 = 1\n        ## 0 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 = 0\n        ## 0 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 = 1\n        ## 0 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 = 0\n        ## 0 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 = 1\n        ## 0 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 = 0\n        ## 0 ^ 1 ^ 0 ^ 1 ^ 1 ^"}], "sudoku-solver": [{"task_id": "sudoku-solver", "completion": "class Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        def isValid(board, row, col, num):\n            for i in range(9):\n                if board[i][col] == num:\n                    return False\n                if board[row][i] == num:\n                    return False\n            startRow = row - row % 3\n            startCol = col - col % 3\n            for i in range(3):\n                for j in range(3):\n                    if board[startRow + i][startCol + j] == num:\n                        return False\n            return True\n        \n        def solve(board):\n            for i in range(9):\n                for j in range(9):\n                    if board[i][j] == '.':\n                        for num in range(1, 10):\n                            if isValid(board, i, j, str(num)):\n                                board[i][j] = str(num)\n                                if solve(board):\n                                    return True\n                                else:\n                                    board[i][j] = '.'\n                        return False\n            return True\n        \n        solve(board)"}], "recover-binary-search-tree": [{"task_id": "recover-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        # find the first and second node\n        first = None\n        second = None\n        prev = None\n        \n        def inorder(root):\n            nonlocal first, second, prev\n            if not root:\n                return\n            \n            inorder(root.left)\n            \n            if prev and prev.val > root.val:\n                if not first:\n                    first = prev\n                second = root\n            \n            prev = root\n            inorder(root.right)\n        \n        inorder(root)\n        \n        # swap the values\n        first.val, second.val = second.val, first.val\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        # find the first and second node\n        first = None\n        second = None\n        prev = None\n        \n        def inorder(root):\n            nonlocal first, second, prev\n            if not root:\n                return\n            \n            inorder(root.left)\n            \n            if prev and prev.val > root.val:\n                if not first:\n                    first = prev\n                second = root\n            \n            prev = root\n            inorder(root.right)\n        \n        inorder(root)\n        \n        # swap the values\n        first.val, second.val = second.val, first.val\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        # find the first and second node\n        first = None\n        second = None\n        prev = None\n        \n        def inorder(root):\n            nonlocal first, second, prev\n            if not root:\n                return\n            \n            inorder(root.left)\n            \n            if prev and prev.val > root.val:\n                if not first:\n                    first = prev\n                second = root\n            \n            prev = root\n            inorder(root.right)\n        \n        inorder(root)\n        \n        # swap the values\n        first.val, second.val = second.val, first.val\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        # find the first and second node\n        first = None\n        second = None\n        prev = None\n        \n        def inorder(root):\n            nonlocal first, second, prev\n            if not root:\n                return\n            \n            inorder(root.left)\n            \n            if prev and prev.val > root.val:\n                if not first:\n                    first = prev\n                second = root\n            \n            prev = root\n            inorder(root.right)\n        \n        inorder(root)\n        \n        # swap the values\n        first.val, second.val = second.val, first.val\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify"}], "palindrome-linked-list": [{"task_id": "palindrome-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        \n        if not head or not head.next:\n            return True\n        \n        # find the middle of the list\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # reverse the second half of the list\n        prev = None\n        while slow:\n            nxt = slow.next\n            slow.next = prev\n            prev = slow\n            slow = nxt\n        \n        # compare the first half and the second half\n        while prev:\n            if prev.val != head.val:\n                return False\n            prev = prev.next\n            head = head.next\n        \n        return True"}], "valid-perfect-square": [{"task_id": "valid-perfect-square", "completion": "class Solution(object):\n    def isPerfectSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return True\n        \n        left, right = 0, num\n        \n        while left <= right:\n            mid = (left + right) // 2\n            if mid * mid == num:\n                return True\n            elif mid * mid < num:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return False"}], "counting-bits": [{"task_id": "counting-bits", "completion": "class Solution(object):\n    def countBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if n == 0:\n            return [0]\n        if n == 1:\n            return [0,1]\n        if n == 2:\n            return [0,1,1]\n        if n == 3:\n            return [0,1,1,2]\n        if n == 4:\n            return [0,1,1,2,2]\n        if n == 5:\n            return [0,1,1,2,2,3]\n        if n == 6:\n            return [0,1,1,2,2,3,3]\n        if n == 7:\n            return [0,1,1,2,2,3,3,4]\n        if n == 8:\n            return [0,1,1,2,2,3,3,4,4]\n        if n == 9:\n            return [0,1,1,2,2,3,3,4,4,5]\n        if n == 10:\n            return [0,1,1,2,2,3,3,4,4,5,5]\n        if n == 11:\n            return [0,1,1,2,2,3,3,4,4,5,5,6]\n        if n == 12:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6]\n        if n == 13:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7]\n        if n == 14:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7]\n        if n == 15:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8]\n        if n == 16:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8]\n        if n == 17:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9]\n        if n == 18:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9]\n        if n == 19:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10]\n        if n == 20:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10]\n        if n == 21:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11]\n        if n == 22:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11]\n        if n == 23:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12]\n        if n == 24:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12]\n        if n == 25:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12"}], "remove-linked-list-elements": [{"task_id": "remove-linked-list-elements", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        while head and head.val == val:\n            head = head.next\n        \n        curr = head\n        \n        while curr and curr.next:\n            if curr.next.val == val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        \n        return head"}], "scramble-string": [{"task_id": "scramble-string", "completion": "class Solution(object):\n    def isScramble(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) != len(s2):\n            return False\n        if s1 == s2:\n            return True\n        if sorted(s1) != sorted(s2):\n            return False\n        \n        for i in range(1, len(s1)):\n            if self.isScramble(s1[:i], s2[:i]) and self.isScramble(s1[i:], s2[i:]):\n                return True\n            if self.isScramble(s1[:i], s2[-i:]) and self.isScramble(s1[i:], s2[:-i]):\n                return True\n        return False"}], "simplify-path": [{"task_id": "simplify-path", "completion": "class Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        \n        stack = []\n        for p in path.split('/'):\n            if p == '..':\n                if stack:\n                    stack.pop()\n            elif p and p != '.':\n                stack.append(p)\n        return '/' + '/'.join(stack)"}], "word-search-ii": [{"task_id": "word-search-ii", "completion": "class Solution(object):\n    def findWords(self, board, words):\n        \"\"\"\n        :type board: List[List[str]]\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        trie = {}\n        for word in words:\n            node = trie\n            for c in word:\n                if c not in node:\n                    node[c] = {}\n                node = node[c]\n            node['#'] = word\n        \n        res = []\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                self.dfs(board, i, j, trie, res)\n        return res\n    \n    def dfs(self, board, i, j, node, res):\n        if '#' in node:\n            res.append(node['#'])\n        if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]):\n            return\n        c = board[i][j]\n        if c not in node:\n            return\n        board[i][j] = '#'\n        self.dfs(board, i-1, j, node[c], res)\n        self.dfs(board, i+1, j, node[c], res)\n        self.dfs(board, i, j-1, node[c], res)\n        self.dfs(board, i, j+1, node[c], res)\n        board[i][j] = c"}], "valid-anagram": [{"task_id": "valid-anagram", "completion": "class Solution(object):\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_dict = {}\n        t_dict = {}\n        \n        for i in range(len(s)):\n            s_dict[s[i]] = s_dict.get(s[i], 0) + 1\n            t_dict[t[i]] = t_dict.get(t[i], 0) + 1\n        \n        for i in s_dict:\n            if s_dict[i] != t_dict.get(i, 0):\n                return False\n        \n        return True"}], "valid-sudoku": [{"task_id": "valid-sudoku", "completion": "class Solution(object):\n    def isValidSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        \n        # check rows\n        for row in board:\n            if len(set(row)) != len(row):\n                return False\n        \n        # check columns\n        for col in zip(*board):\n            if len(set(col)) != len(col):\n                return False\n        \n        # check 3x3 boxes\n        for i in (0, 3, 6):\n            for j in (0, 3, 6):\n                box = [board[x][y] for x in (i, i + 1, i + 2) for y in (j, j + 1, j + 2)]\n                if len(set(box)) != len(box):\n                    return False\n        \n        return True"}], "fizz-buzz": [{"task_id": "fizz-buzz", "completion": "class Solution(object):\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        ans = []\n        for i in range(1,n+1):\n            if i%3 == 0 and i%5 == 0:\n                ans.append(\"FizzBuzz\")\n            elif i%3 == 0:\n                ans.append(\"Fizz\")\n            elif i%5 == 0:\n                ans.append(\"Buzz\")\n            else:\n                ans.append(str(i))\n        return ans"}], "reverse-words-in-a-string": [{"task_id": "reverse-words-in-a-string", "completion": "class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        return \" \".join(s.split()[::-1])"}], "excel-sheet-column-number": [{"task_id": "excel-sheet-column-number", "completion": "class Solution(object):\n    def titleToNumber(self, columnTitle):\n        \"\"\"\n        :type columnTitle: str\n        :rtype: int\n        \"\"\"\n        \n        return sum([(ord(c) - ord('A') + 1) * 26 ** i for i, c in en\n                    enumerate(columnTitle[::-1])])"}], "candy": [{"task_id": "candy", "completion": "class Solution(object):\n    def candy(self, ratings):\n        \"\"\"\n        :type ratings: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(ratings)\n        if n < 2:\n            return n\n        \n        candies = [1] * n\n        \n        for i in range(1, n):\n            if ratings[i] > ratings[i-1]:\n                candies[i] = candies[i-1] + 1\n        \n        for i in range(n-2, -1, -1):\n            if ratings[i] > ratings[i+1]:\n                candies[i] = max(candies[i], candies[i+1] + 1)\n        \n        return sum(candies)"}], "same-tree": [{"task_id": "same-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val != q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"}], "reorder-list": [{"task_id": "reorder-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reorderList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: None Do not return anything, modify head in-place instead.\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        # find the middle node\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # reverse the second half\n        second = slow.next\n        slow.next = None\n        second = self.reverseList(second)\n        \n        # merge the two halves\n        first = head\n        while second:\n            temp = first.next\n            first.next = second\n            first = temp\n            temp = second.next\n            second.next = first\n            second = temp\n        \n        return head\n    \n    def reverseList(self, head):\n        prev = None\n        curr = head\n        while curr:\n            nxt = curr.next\n            curr.next = prev\n            prev = curr\n            curr = nxt\n        return prev"}], "word-pattern": [{"task_id": "word-pattern", "completion": "class Solution(object):\n    def wordPattern(self, pattern, s):\n        \"\"\"\n        :type pattern: str\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        s = s.split()\n        if len(s) != len(pattern):\n            return False\n        \n        d = {}\n        for i, j in zip(pattern, s):\n            if i not in d:\n                if j in d.values():\n                    return False\n                d[i] = j\n            else:\n                if d[i] != j:\n                    return False\n        return True"}], "permutations": [{"task_id": "permutations", "completion": "class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if len(nums) == 1:\n            return [nums]\n        \n        res = []\n        for i in range(len(nums)):\n            for j in self.permute(nums[:i] + nums[i+1:]):\n                res.append([nums[i]] + j)\n        return res"}], "search-a-2d-matrix": [{"task_id": "search-a-2d-matrix", "completion": "class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        \n        if target < matrix[0][0] or target > matrix[-1][-1]:\n            return False\n        \n        if target == matrix[0][0] or target == matrix[-1][-1]:\n            return True\n        \n        if target < matrix[0][0]:\n            return False\n        \n        if target > matrix[-1][-1]:\n            return False\n        \n        if target == matrix[0][0] or target == matrix[-1][-1]:\n            return True\n        \n        if target < matrix[0][0]:\n            return False\n        \n        if target > matrix[-1][-1]:\n            return False\n        \n        if target < matrix[0][0]:\n            return False\n        \n        if target > matrix[-1][-1]:\n            return False\n        \n        if target < matrix[0][0]:\n            return False\n        \n        if target > matrix[-1][-1]:\n            return False\n        \n        if target < matrix[0][0]:\n            return False\n        \n        if target > matrix[-1][-1]:\n            return False\n        \n        if target < matrix[0][0]:\n            return False\n        \n        if target > matrix[-1][-1]:\n            return False\n        \n        if target < matrix[0][0]:\n            return False\n        \n        if target > matrix[-1][-1]:\n            return False\n        \n        if target < matrix[0][0]:\n            return False\n        \n        if target > matrix[-1][-1]:\n            return False\n        \n        if target < matrix[0][0]:\n            return False\n        \n        if target > matrix[-1][-1]:\n            return False\n        \n        if target < matrix[0][0]:\n            return False\n        \n        if target > matrix[-1][-1]:\n            return False\n        \n        if target < matrix[0][0]:\n            return False\n        \n        if target > matrix[-1][-1]:\n            return False\n        \n        if target < matrix[0][0]:\n            return False\n        \n        if target > matrix[-1][-1]:\n            return False\n        \n        if target < matrix[0][0]:\n            return False\n        \n        if target > matrix[-1][-1]:\n            return False\n        \n        if target < matrix[0][0]:\n            return False\n        \n        if target > matrix[-1][-1]:\n            return False\n        \n        if target < matrix[0][0]:\n            return False\n        \n        if target > matrix[-1][-1]:\n            return False\n        \n        if target < matrix[0][0]:\n            return False\n        \n        if target > matrix[-1][-1]:\n            return False\n        \n        if target < matrix[0][0]:\n            return False\n        \n        if target > matrix[-1][-1]:\n            return False\n        \n        if target < matrix[0][0]:\n            return False\n        \n        if target > matrix[-1][-1]:\n            return False\n        \n        if target < matrix[0][0]:\n            return False\n        \n        if target > matrix[-1][-1]:\n            return False\n        \n        if target < matrix[0][0]:\n            return False\n        \n        if target > matrix[-1][-1]:\n            return False\n        \n        if target < matrix[0][0]:\n            return False\n        \n        if target > matrix[-1][-1]:\n            return False\n        \n        if target < matrix[0][0]:\n            return False\n        \n        if target > matrix[-1][-1]:\n            return False\n        \n        if target < matrix[0][0]:\n            return False\n        \n        if target > matrix[-1][-1]:\n            return False\n        \n        if target < matrix[0][0]:\n            return False\n        \n        if target > matrix[-1][-1]:\n            return False\n        \n        if target < matrix[0][0]:\n            return False\n        \n        if target > matrix[-1][-1]:\n            return False\n        \n        if target < matrix[0][0]:\n            return False\n        \n        if target > matrix[-1][-1]:\n            return False\n        \n        if target < matrix[0][0]:\n            return"}], "add-two-numbers": [{"task_id": "add-two-numbers", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        carry = 0\n        head = ListNode(0)\n        curr = head\n        \n        while l1 or l2 or carry:\n            if l1:\n                carry += l1.val\n                l1 = l1.next\n            if l2:\n                carry += l2.val\n                l2 = l2.next\n            curr.next = ListNode(carry % 10)\n            carry //= 10\n            curr = curr.next\n            \n        return head.next"}], "number-complement": [{"task_id": "number-complement", "completion": "class Solution(object):\n    def findComplement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. 2**n - 1 is the max number that can be represented with n bits\n        # 2. 2**n - 1 - num is the complement\n        # 3. 2**n - 1 - num is the complement\n        # 4. 2**n - 1 - num is the complement\n        # 5. 2**n - 1 - num is the complement\n        # 6. 2**n - 1 - num is the complement\n        # 7. 2**n - 1 - num is the complement\n        # 8. 2**n - 1 - num is the complement\n        # 9. 2**n - 1 - num is the complement\n        # 10. 2**n - 1 - num is the complement\n        # 11. 2**n - 1 - num is the complement\n        # 12. 2**n - 1 - num is the complement\n        # 13. 2**n - 1 - num is the complement\n        # 14. 2**n - 1 - num is the complement\n        # 15. 2**n - 1 - num is the complement\n        # 16. 2**n - 1 - num is the complement\n        # 17. 2**n - 1 - num is the complement\n        # 18. 2**n - 1 - num is the complement\n        # 19. 2**n - 1 - num is the complement\n        # 20. 2**n - 1 - num is the complement\n        # 21. 2**n - 1 - num is the complement\n        # 22. 2**n - 1 - num is the complement\n        # 23. 2**n - 1 - num is the complement\n        # 24. 2**n - 1 - num is the complement\n        # 25. 2**n - 1 - num is the complement\n        # 26. 2**n - 1 - num is the complement\n        # 27. 2**n - 1 - num is the complement\n        # 28. 2**n - 1 - num is the complement\n        # 29. 2**n - 1 - num is the complement\n        # 30. 2**n - 1 - num is the complement\n        # 31. 2**n - 1 - num is the complement\n        # 32. 2**n - 1 - num is the complement\n        # 33. 2**n - 1 - num is the complement\n        # 34. 2**n - 1 - num is the complement\n        # 35. 2**n - 1 - num is the complement\n        # 36. 2**n - 1 - num is the complement\n        # 37. 2**n - 1 - num is the complement\n        # 38. 2**n - 1 - num is the complement\n        # 39. 2**n - 1 - num is the complement\n        # 40. 2**n - 1 - num is the complement\n        # 41. 2**n - 1 - num is the complement\n        # 42. 2**n - 1 - num is the complement\n        # 43. 2**n - 1 - num is the complement\n        # 44. 2**n - 1 - num is the complement\n        # 45. 2**n - 1 - num is the complement\n        # 46. 2**n - 1 - num is the complement\n        # 47. 2**n - 1 - num is the complement\n        # 48. 2**n - 1 - num is the complement\n        # 49. 2**n - 1 - num is the complement\n        # 50. 2**n - 1 - num is the complement\n        # 51. 2**n - 1 - num is the complement\n        # 52. 2**n - 1 - num is the complement\n        # 53. 2**n - 1 - num is the complement\n        # 54. 2**n - 1 - num is the complement"}], "arithmetic-slices-ii-subsequence": [{"task_id": "arithmetic-slices-ii-subsequence", "completion": "class Solution(object):\n    def numberOfArithmeticSlices(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 3:\n            return 0\n        \n        dp = [0] * len(nums)\n        if nums[1] - nums[0] == nums[2] - nums[1]:\n            dp[2] = 1\n        \n        for i in range(3, len(nums)):\n            if nums[i] - nums[i-1] == nums[i-1] - nums[i-2]:\n                dp[i] = dp[i-1] + 1\n        \n        return sum(dp)"}], "text-justification": [{"task_id": "text-justification", "completion": "class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\"\n        \n        res = []\n        cur_len = 0\n        cur_words = []\n        for word in words:\n            if cur_len + len(word) + len(cur_words) > maxWidth:\n                if len(cur_words) == 1:\n                    res.append(cur_words[0] + ' ' * (maxWidth - cur_len))\n                else:\n                    space_num = (maxWidth - cur_len) // (len(cur_words) - 1)\n                    extra_space = (maxWidth - cur_len) % (len(cur_words) - 1)\n                    res.append(''.join(cur_words[i] + ' ' * space_num + (' ' if i < extra_space else '') for i in range(len(cur_words))) )\n                cur_len = 0\n                cur_words = []\n            cur_len += len(word)\n            cur_words.append(word)\n        if cur_words:\n            res.append(' '.join(cur_words) + ' ' * (maxWidth - cur_len - len(cur_words) + 1))\n        return res"}], "binary-tree-postorder-traversal": [{"task_id": "binary-tree-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def postorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        stack, res = [root], []\n        \n        while stack:\n            node = stack.pop()\n            if node:\n                res.append(node.val)\n                stack.append(node.left)\n                stack.append(node.right)\n        \n        return res[::-1]"}], "container-with-most-water": [{"task_id": "container-with-most-water", "completion": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # two pointers\n        # left, right = 0, len(height) - 1\n        # max_area = 0\n        # while left < right:\n        #     max_area = max(max_area, min(height[left], height[right]) * (right - left))\n        #     if height[left] < height[right]:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return max_area\n        \n        # two pointers\n        # left, right = 0, len(height) - 1\n        # max_area = 0\n        # while left < right:\n        #     max_area = max(max_area, min(height[left], height[right]) * (right - left))\n        #     if height[left] < height[right]:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return max_area\n        \n        # two pointers\n        # left, right = 0, len(height) - 1\n        # max_area = 0\n        # while left < right:\n        #     max_area = max(max_area, min(height[left], height[right]) * (right - left))\n        #     if height[left] < height[right]:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return max_area\n        \n        # two pointers\n        # left, right = 0, len(height) - 1\n        # max_area = 0\n        # while left < right:\n        #     max_area = max(max_area, min(height[left], height[right]) * (right - left))\n        #     if height[left] < height[right]:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return max_area\n        \n        # two pointers\n        # left, right = 0, len(height) - 1\n        # max_area = 0\n        # while left < right:\n        #     max_area = max(max_area, min(height[left], height[right]) * (right - left))\n        #     if height[left] < height[right]:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return max_area\n        \n        # two pointers\n        # left, right = 0, len(height) - 1\n        # max_area = 0\n        # while left < right:\n        #     max_area = max(max_area, min(height[left], height[right]) * (right - left))\n        #     if height[left] < height[right]:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return max_area\n        \n        # two pointers\n        # left, right = 0, len(height) - 1\n        # max_area = 0\n        # while left < right:\n        #     max_area = max(max_area, min(height[left], height[right]) * (right - left))\n        #     if height[left] < height[right]:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return max_area\n        \n        # two pointers\n        # left, right = 0, len(height) - 1\n        # max_area = 0\n        # while left < right:\n        #     max_area = max(max_area, min(height[left], height[right]) * (right - left))\n        #     if height[left] < height[right]:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return max_area\n        \n        # two pointers\n        # left, right = 0, len(height) - 1\n        # max_area = 0\n        # while left < right:\n        #     max_area = max(max_area, min(height[left], height[right]) * (right - left))\n        #     if height[left] < height[right]:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return max_area\n        \n        # two pointers"}], "concatenated-words": [{"task_id": "concatenated-words", "completion": "class Solution(object):\n    def findAllConcatenatedWordsInADict(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # Time: O(N^2)\n        # Space: O(N)\n        # 1. build a dict\n        # 2. for each word, check if it can be built from other words\n        # 3. if it can, add it to the result\n        # 4. if it cannot, add it to the dict\n        \n        # 1. build a dict\n        word_dict = {}\n        for word in words:\n            word_dict[word] = 1\n        \n        # 2. for each word, check if it can be built from other words\n        # 3. if it can, add it to the result\n        # 4. if it cannot, add it to the dict\n        res = []\n        for word in words:\n            if self.dfs(word, word_dict):\n                res.append(word)\n            word_dict[word] = 1\n        return res\n    \n    def dfs(self, word, word_dict):\n        if word in word_dict:\n            return True\n        for i in range(1, len(word)):\n            left, right = word[:i], word[i:]\n            if left in word_dict and right in word_dict:\n                return True\n            if left in word_dict and self.dfs(right, word_dict):\n                return True\n            if right in word_dict and self.dfs(left, word_dict):\n                return True\n        return False"}], "base-7": [{"task_id": "base-7", "completion": "class Solution(object):\n    def convertToBase7(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return '0'\n        \n        if num < 0:\n            return '-' + self.convertToBase7(-num)\n        \n        res = ''\n        while num:\n            res = str(num % 7) + res\n            num //= 7\n        \n        return res"}], "nim-game": [{"task_id": "nim-game", "completion": "class Solution(object):\n    def canWinNim(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        return n % 4 != 0"}], "n-queens-ii": [{"task_id": "n-queens-ii", "completion": "class Solution(object):\n    def totalNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        def backtrack(row, cols, diag1, diag2):\n            if row == n:\n                return 1\n            \n            count = 0\n            for col in range(n):\n                if col not in cols and row + col not in diag1 and row - col not in diag2:\n                    count += backtrack(row + 1, cols | {col}, diag1 | {row + col}, diag2 | {row - col})\n            return count\n        \n        return backtrack(0, set(), set(), set())"}], "n-queens": [{"task_id": "n-queens", "completion": "class Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def is_valid(board, row, col):\n            for i in range(row):\n                if board[i][col] == 'Q':\n                    return False\n            i, j = row - 1, col - 1\n            while i >= 0 and j >= 0:\n                if board[i][j] == 'Q':\n                    return False\n                i -= 1\n                j -= 1\n            i, j = row - 1, col + 1\n            while i >= 0 and j < n:\n                if board[i][j] == 'Q':\n                    return False\n                i -= 1\n                j += 1\n            return True\n        \n        def dfs(board, row):\n            if row == n:\n                return [''.join(board[i]) for i in range(n)]\n            res = []\n            for col in range(n):\n                if is_valid(board, row, col):\n                    board[row][col] = 'Q'\n                    res.extend(dfs(board, row + 1))\n                    board[row][col] = '.'\n            return res\n        \n        return dfs([['.' for _ in range(n)] for _ in range(n)], 0)"}], "word-search": [{"task_id": "word-search", "completion": "class Solution(object):\n    def exist(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        def dfs(i, j, k):\n            if k == len(word):\n                return True\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != word[k]:\n                return False\n            board[i][j] = '#'\n            res = dfs(i+1, j, k+1) or dfs(i-1, j, k+1) or dfs(i, j+1, k+1) or dfs(i, j-1, k+1)\n            board[i][j] = word[k]\n            return res\n        \n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if dfs(i, j, 0):\n                    return True\n        return False"}], "merge-sorted-array": [{"task_id": "merge-sorted-array", "completion": "class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        \n        # nums1[m:] = nums2[:n]\n        # nums1.sort()\n        # return nums1\n        \n        # nums1[m:] = nums2[:n]\n        # nums1.sort()\n        # return nums1\n        \n        # nums1[m:] = nums2[:n]\n        # nums1.sort()\n        # return nums1\n        \n        # nums1[m:] = nums2[:n]\n        # nums1.sort()\n        # return nums1\n        \n        # nums1[m:] = nums2[:n]\n        # nums1.sort()\n        # return nums1\n        \n        # nums1[m:] = nums2[:n]\n        # nums1.sort()\n        # return nums1\n        \n        # nums1[m:] = nums2[:n]\n        # nums1.sort()\n        # return nums1\n        \n        # nums1[m:] = nums2[:n]\n        # nums1.sort()\n        # return nums1\n        \n        # nums1[m:] = nums2[:n]\n        # nums1.sort()\n        # return nums1\n        \n        # nums1[m:] = nums2[:n]\n        # nums1.sort()\n        # return nums1\n        \n        # nums1[m:] = nums2[:n]\n        # nums1.sort()\n        # return nums1\n        \n        # nums1[m:] = nums2[:n]\n        # nums1.sort()\n        # return nums1\n        \n        # nums1[m:] = nums2[:n]\n        # nums1.sort()\n        # return nums1\n        \n        # nums1[m:] = nums2[:n]\n        # nums1.sort()\n        # return nums1\n        \n        # nums1[m:] = nums2[:n]\n        # nums1.sort()\n        # return nums1\n        \n        # nums1[m:] = nums2[:n]\n        # nums1.sort()\n        # return nums1\n        \n        # nums1[m:] = nums2[:n]\n        # nums1.sort()\n        # return nums1\n        \n        # nums1[m:] = nums2[:n]\n        # nums1.sort()\n        # return nums1\n        \n        # nums1[m:] = nums2[:n]\n        # nums1.sort()\n        # return nums1\n        \n        # nums1[m:] = nums2[:n]\n        # nums1.sort()\n        # return nums1\n        \n        # nums1[m:] = nums2[:n]\n        # nums1.sort()\n        # return nums1\n        \n        # nums1[m:] = nums2[:n]\n        # nums1.sort()\n        # return nums1\n        \n        # nums1[m:] = nums2[:n]\n        # nums1.sort()\n        # return nums1\n        \n        # nums1[m:] = nums2[:n]\n        # nums1.sort()\n        # return nums1\n        \n        # nums1[m:] = nums2[:n]\n        # nums1.sort()\n        # return nums1\n        \n        # nums1[m:] = nums2[:n]\n        # nums1.sort()\n        # return nums1\n        \n        # nums1[m:] = nums2[:n]\n        # nums1.sort()\n        # return nums1\n        \n        # nums1[m:] = nums2[:n]\n        # nums1.sort()\n        # return nums1\n        \n        # nums1[m:] = nums2[:n]\n        # nums1.sort()\n        # return nums1\n        \n        # nums1[m:] = nums2[:n]\n        # nums1.sort()\n        # return nums1\n        \n        # nums"}], "third-maximum-number": [{"task_id": "third-maximum-number", "completion": "class Solution(object):\n    def thirdMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max1 = max2 = max3 = float('-inf')\n        \n        for num in nums:\n            if num > max1:\n                max1, max2, max3 = num, max1, max2\n            elif num > max2:\n                max2, max3 = num, max2\n            elif num > max3:\n                max3 = num\n        \n        return max3 if max3 != float('-inf') else max1"}]}