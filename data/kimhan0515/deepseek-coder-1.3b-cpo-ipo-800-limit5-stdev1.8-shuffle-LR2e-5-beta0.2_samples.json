{"spiral-matrix": [{"task_id": "spiral-matrix", "completion": "class Solution(object):\n    def spiralOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not matrix:\n            return []\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        \n        left = 0\n        right = n - 1\n        top = 0\n        bottom = m - 1\n        \n        res = []\n        \n        while left <= right and top <= bottom:\n            \n            # top row\n            for i in range(left, right + 1):\n                res.append(matrix[top][i])\n            top += 1\n            \n            # right col\n            for i in range(top, bottom + 1):\n                res.append(matrix[i][right])\n            right -= 1\n            \n            if top > bottom:\n                break\n            \n            # bottom row\n            for i in range(right, left - 1, -1):\n                res.append(matrix[bottom][i])\n            bottom -= 1\n            \n            # left col\n            for i in range(bottom, top - 1, -1):\n                res.append(matrix[i][left])\n            left += 1\n            \n        return res"}], "summary-ranges": [{"task_id": "summary-ranges", "completion": "class Solution(object):\n    def summaryRanges(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        if len(nums) == 0:\n            return []\n        \n        if len(nums) == 1:\n            return [str(nums[0])]\n        \n        start = nums[0]\n        end = nums[0]\n        res = []\n        \n        for i in range(1, len(nums)):\n            if nums[i] == end + 1:\n                end = nums[i]\n            else:\n                if start == end:\n                    res.append(str(start))\n                else:\n                    res.append(str(start) + \"->\" + str(end))\n                start = nums[i]\n                end = nums[i]\n        \n        if start == end:\n            res.append(str(start))\n        else:\n            res.append(str(start) + \"->\" + str(end))\n        \n        return res"}], "distinct-subsequences": [{"task_id": "distinct-subsequences", "completion": "class Solution(object):\n    def numDistinct(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"\n        \n        if len(s) < len(t):\n            return 0\n        \n        dp = [0] * (len(t) + 1)\n        dp[0] = 1\n        \n        for i in range(1, len(s) + 1):\n            for j in range(min(i, len(t)), 0, -1):\n                if s[i - 1] == t[j - 1]:\n                    dp[j] += dp[j - 1]\n        \n        return dp[-1]"}], "first-missing-positive": [{"task_id": "first-missing-positive", "completion": "class Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. Mark all negative numbers as 0\n        # 2. Mark all numbers in the range [1, n] as 1\n        # 3. Iterate through the array and mark the numbers as -1\n        # 4. Iterate through the array again and return the first number that is not marked as -1\n        \n        n = len(nums)\n        \n        for i in range(n):\n            if nums[i] <= 0:\n                nums[i] = n + 1\n        \n        for i in range(n):\n            num = abs(nums[i])\n            if num <= n:\n                nums[num - 1] = -abs(nums[num - 1])\n        \n        for i in range(1, n + 1):\n            if nums[i - 1] > 0:\n                return i\n        \n        return n + 1"}], "permutation-sequence": [{"task_id": "permutation-sequence", "completion": "class Solution(object):\n    def getPermutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. calculate the factorial of n\n        fact = 1\n        for i in range(1, n):\n            fact *= i\n        \n        # 2. calculate the number of digits\n        digits = n\n        k -= 1\n        \n        # 3. calculate the number of digits in the current permutation\n        res = \"\"\n        while digits > 0:\n            fact //= digits\n            res += str(k // fact)\n            k %= fact\n            digits -= 1\n        \n        # 4. calculate the remaining digits\n        res += str(k + 1)\n        \n        return res"}], "two-sum-ii-input-array-is-sorted": [{"task_id": "two-sum-ii-input-array-is-sorted", "completion": "class Solution(object):\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        left = 0\n        right = len(numbers) - 1\n        \n        while left < right:\n            if numbers[left] + numbers[right] == target:\n                return [left + 1, right + 1]\n            elif numbers[left] + numbers[right] < target:\n                left += 1\n            else:\n                right -= 1\n        \n        return [-1, -1]"}], "expression-add-operators": [{"task_id": "expression-add-operators", "completion": "class Solution(object):\n    def addOperators(self, num, target):\n        \"\"\"\n        :type num: str\n        :type target: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def backtrack(i, curr, prev, res, val, op):\n            if i == len(num):\n                if val == target and curr == 0:\n                    res.append(op)\n                return\n            \n            if i == 0:\n                backtrack(i+1, curr, prev, res, val, op)\n            else:\n                backtrack(i+1, curr + int(num[i]), int(num[i]), res, val + int(num[i]), op + \"+\" + num[i])\n                backtrack(i+1, curr - int(num[i]), -int(num[i]), res, val - int(num[i]), op + \"-\" + num[i])\n                if prev != 0:\n                    backtrack(i+1, curr - prev + prev * int(num[i]), prev * int(num[i]), res, val - prev + prev * int(num[i]), op + \"*\" + num[i])\n        \n        res = []\n        backtrack(0, 0, 0, res, 0, \"\")\n        return res"}], "sum-root-to-leaf-numbers": [{"task_id": "sum-root-to-leaf-numbers", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def dfs(root, curr_sum):\n            if not root:\n                return 0\n            \n            if not root.left and not root.right:\n                return curr_sum * 10 + root.val\n            \n            left_sum = dfs(root.left, curr_sum * 10 + root.val)\n            right_sum = dfs(root.right, curr_sum * 10 + root.val)\n            \n            return left_sum + right_sum\n        \n        return dfs(root, 0)"}], "license-key-formatting": [{"task_id": "license-key-formatting", "completion": "class Solution(object):\n    def licenseKeyFormatting(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        s = s.replace('-', '').upper()\n        n = len(s)\n        if n <= k:\n            return s\n        if n % k == 0:\n            return s[:k] + '-' + self.licenseKeyFormatting(s[k:], k)\n        else:\n            return s[:n % k] + '-' + self.licenseKeyFormatting(s[n % k:], k)"}], "gas-station": [{"task_id": "gas-station", "completion": "class Solution(object):\n    def canCompleteCircuit(self, gas, cost):\n        \"\"\"\n        :type gas: List[int]\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if sum(gas) < sum(cost):\n            return -1\n        \n        tank = 0\n        start = 0\n        \n        for i in range(len(gas)):\n            tank += gas[i] - cost[i]\n            if tank < 0:\n                start = i + 1\n                tank = 0\n                \n        return start"}], "burst-balloons": [{"task_id": "burst-balloons", "completion": "class Solution(object):\n    def maxCoins(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums = [1] + nums + [1]\n        n = len(nums)\n        dp = [[0] * n for _ in range(n)]\n        \n        for i in range(n-2, -1, -1):\n            for j in range(i+2, n):\n                for k in range(i+1, j):\n                    dp[i][j] = max(dp[i][j], nums[i] * nums[k] * nums[j] + dp[i][k] + dp[k][j])\n        \n        return dp[0][n-1]"}], "plus-one": [{"task_id": "plus-one", "completion": "class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        if digits[-1] < 9:\n            digits[-1] += 1\n            return digits\n        else:\n            digits[-1] = 0\n            for i in range(len(digits)-2,-1,-1):\n                if digits[i] < 9:\n                    digits[i] += 1\n                    return digits\n                else:\n                    digits[i] = 0\n            digits.insert(0,1)\n            return digits"}], "regular-expression-matching": [{"task_id": "regular-expression-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        if not p.replace('*', ''):\n            return not s\n        \n        star = p.find('*')\n        if star == -1:\n            return False\n        \n        if p[star - 1] == '*' and star > 1:\n            return self.isMatch(s, p[star:])\n        \n        if p[star - 1] == '*' and star == 1:\n            return True\n        \n        if p[star - 1] == '*' and p[star - 2] != '*':\n            return self.isMatch(s[1:], p)\n        \n        if p[star - 1] == '*' and p[star - 2] == '*':\n            return self.isMatch(s, p[star:]) or self.isMatch(s[1:], p)\n        \n        if p[star - 1] == '*' and p[star - 2] != '*':\n            return self.isMatch(s[1:], p[star:])\n        \n        if p[star - 1] == s[0] or p[star - 1] == '.':\n            return self.isMatch(s[1:], p[star:])\n        \n        return False"}], "create-maximum-number": [{"task_id": "create-maximum-number", "completion": "class Solution(object):\n    def maxNumber(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        def findMax(nums, k):\n            stack = []\n            for i in range(len(nums)):\n                while stack and k > 0 and stack[-1] < nums[i]:\n                    stack.pop()\n                    k -= 1\n                stack.append(nums[i])\n            return stack[:-k] if k > 0 else stack\n        \n        m, n = len(nums1), len(nums2)\n        if m + n < k:\n            return []\n        if m < k:\n            return nums2[:m]\n        if n < k:\n            return nums1[:n]\n        \n        if m > n:\n            return findMax(nums1, k)\n        elif m < n:\n            return findMax(nums2, k)\n        else:\n            if nums1 > nums2:\n                return findMax(nums1, k)\n            else:\n                return findMax(nums2, k)"}], "perfect-number": [{"task_id": "perfect-number", "completion": "class Solution(object):\n    def checkPerfectNumber(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return False\n        \n        sum = 1\n        i = 2\n        while i * i <= num:\n            if num % i == 0:\n                if i * i == num:\n                    sum += i\n                else:\n                    sum += i + num // i\n            i += 1\n        \n        return sum == num"}], "fibonacci-number": [{"task_id": "fibonacci-number", "completion": "class Solution(object):\n    def fib(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        \n        a = 0\n        b = 1\n        for i in range(2, n+1):\n            c = a + b\n            a = b\n            b = c\n        return b"}], "dungeon-game": [{"task_id": "dungeon-game", "completion": "class Solution(object):\n    def calculateMinimumHP(self, dungeon):\n        \"\"\"\n        :type dungeon: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(dungeon)\n        n = len(dungeon[0])\n        \n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        \n        dp[m - 1][n] = max(1, 1 - dungeon[m - 1][n])\n        dp[m][n - 1] = max(1, 1 - dungeon[m][n - 1])\n        \n        for i in range(m - 1, -1, -1):\n            for j in range(n - 1, -1, -1):\n                dp[i][j] = max(min(dp[i + 1][j], dp[i][j + 1]) - dungeon[i][j], 1)\n        \n        return dp[0][0]"}], "find-k-th-smallest-pair-distance": [{"task_id": "find-k-th-smallest-pair-distance", "completion": "class Solution(object):\n    def smallestDistancePair(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        left, right = 0, nums[-1] - nums[0]\n        \n        while left < right:\n            mid = (left + right) // 2\n            count = 0\n            j = 0\n            for i in range(len(nums)):\n                while nums[i] - nums[j] > mid:\n                    j += 1\n                count += i - j\n            if count >= k:\n                right = mid\n            else:\n                left = mid + 1\n        return left"}], "number-of-segments-in-a-string": [{"task_id": "number-of-segments-in-a-string", "completion": "class Solution(object):\n    def countSegments(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        return len(s.split())"}], "reverse-vowels-of-a-string": [{"task_id": "reverse-vowels-of-a-string", "completion": "class Solution(object):\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n        s_list = list(s)\n        left = 0\n        right = len(s_list) - 1\n        \n        while left < right:\n            if s_list[left] in vowels and s_list[right] in vowels:\n                s_list[left], s_list[right] = s_list[right], s_list[left]\n                left += 1\n                right -= 1\n            elif s_list[left] not in vowels:\n                left += 1\n            elif s_list[right] not in vowels:\n                right -= 1\n        \n        return ''.join(s_list)"}], "longest-consecutive-sequence": [{"task_id": "longest-consecutive-sequence", "completion": "class Solution(object):\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums_set = set(nums)\n        max_len = 0\n        \n        for num in nums:\n            if num - 1 not in nums_set:\n                curr_num = num\n                curr_len = 1\n                \n                while curr_num + 1 in nums_set:\n                    curr_num += 1\n                    curr_len += 1\n                    \n                max_len = max(max_len, curr_len)\n                \n        return max_len"}], "missing-number": [{"task_id": "missing-number", "completion": "class Solution(object):\n    def missingNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## Solution 1:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Approach:\n        ## XOR all the numbers from 0 to n\n        ## XOR all the numbers from 0 to n+1\n        ## XOR all the numbers from 0 to n+2\n        ## XOR all the numbers from 0 to n+3\n        ## XOR all the numbers from 0 to n+4\n        ## XOR all the numbers from 0 to n+5\n        ## XOR all the numbers from 0 to n+6\n        ## XOR all the numbers from 0 to n+7\n        ## XOR all the numbers from 0 to n+8\n        ## XOR all the numbers from 0 to n+9\n        ## XOR all the numbers from 0 to n+10\n        ## XOR all the numbers from 0 to n+11\n        ## XOR all the numbers from 0 to n+12\n        ## XOR all the numbers from 0 to n+13\n        ## XOR all the numbers from 0 to n+14\n        ## XOR all the numbers from 0 to n+15\n        ## XOR all the numbers from 0 to n+16\n        ## XOR all the numbers from 0 to n+17\n        ## XOR all the numbers from 0 to n+18\n        ## XOR all the numbers from 0 to n+19\n        ## XOR all the numbers from 0 to n+20\n        ## XOR all the numbers from 0 to n+21\n        ## XOR all the numbers from 0 to n+22\n        ## XOR all the numbers from 0 to n+23\n        ## XOR all the numbers from 0 to n+24\n        ## XOR all the numbers from 0 to n+25\n        ## XOR all the numbers from 0 to n+26\n        ## XOR all the numbers from 0 to n+27\n        ## XOR all the numbers from 0 to n+28\n        ## XOR all the numbers from 0 to n+29\n        ## XOR all the numbers from 0 to n+30\n        ## XOR all the numbers from 0 to n+31\n        ## XOR all the numbers from 0 to n+32\n        ## XOR all the numbers from 0 to n+33\n        ## XOR all the numbers from 0 to n+34\n        ## XOR all the numbers from 0 to n+35\n        ## XOR all the numbers from 0 to n+36\n        ## XOR all the numbers from 0 to n+37\n        ## XOR all the numbers from 0 to n+38\n        ## XOR all the numbers from 0 to n+39\n        ## XOR all the numbers from 0 to n+40\n        ## XOR all the numbers from 0 to n+41\n        ## XOR all the numbers from 0 to n+42\n        ## XOR all the numbers from 0 to n+43\n        ## XOR all the numbers from 0 to n+44\n        ## XOR all the numbers from 0 to n+45\n        ## XOR all the numbers from 0 to n+46\n        ## XOR all the numbers from 0 to n+47\n        ## XOR all the numbers from 0 to n+48\n        ## XOR all the numbers from 0 to n+49\n        ## XOR all the numbers from 0 to n+50\n        ## XOR all the numbers from 0 to n+51\n        ## XOR all the numbers from 0 to n+52\n        ## XOR all the numbers from 0 to n+53\n        ## XOR all the numbers from 0 to n+54\n        ## XOR all the numbers from 0 to n+55\n        ## XOR all the numbers from 0 to n+56\n        ## XOR all the numbers from 0 to n+57\n        ## XOR all"}], "word-ladder": [{"task_id": "word-ladder", "completion": "class Solution(object):\n    def ladderLength(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\"\n        \n        if endWord not in wordList:\n            return 0\n        \n        wordList = set(wordList)\n        queue = collections.deque([beginWord])\n        level = 1\n        \n        while queue:\n            for _ in range(len(queue)):\n                word = queue.popleft()\n                if word == endWord:\n                    return level\n                for i in range(len(word)):\n                    for c in string.ascii_lowercase:\n                        new_word = word[:i] + c + word[i+1:]\n                        if new_word in wordList:\n                            queue.append(new_word)\n                            wordList.remove(new_word)\n            level += 1\n        \n        return 0"}], "add-binary": [{"task_id": "add-binary", "completion": "class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        \n        if len(a) < len(b):\n            a, b = b, a\n        \n        carry = 0\n        i = len(a) - 1\n        j = len(b) - 1\n        res = \"\"\n        \n        while i >= 0:\n            if j >= 0:\n                if a[i] == '1':\n                    carry += 1\n                if b[j] == '1':\n                    carry += 1\n            else:\n                if a[i] == '1':\n                    carry += 1\n            if carry % 2 == 1:\n                res = '1' + res\n            else:\n                res = '0' + res\n            carry = carry // 2\n            i -= 1\n            j -= 1\n        if carry == 1:\n            res = '1' + res\n        return res"}], "find-first-and-last-position-of-element-in-sorted-array": [{"task_id": "find-first-and-last-position-of-element-in-sorted-array", "completion": "class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums) == 0:\n            return [-1,-1]\n        \n        left = 0\n        right = len(nums)-1\n        \n        while left < right:\n            mid = (left + right) // 2\n            if nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid\n        \n        if nums[left] != target:\n            return [-1,-1]\n        \n        left = left + 1\n        right = len(nums)-1\n        \n        while left < right:\n            mid = (left + right) // 2 + 1\n            if nums[mid] > target:\n                right = mid - 1\n            else:\n                left = mid\n        \n        return [left, right]"}], "remove-duplicates-from-sorted-array": [{"task_id": "remove-duplicates-from-sorted-array", "completion": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 0:\n            return 0\n        \n        i = 0\n        for j in range(1, len(nums)):\n            if nums[j] != nums[i]:\n                i += 1\n                nums[i] = nums[j]\n                \n        return i + 1"}], "jump-game-ii": [{"task_id": "jump-game-ii", "completion": "class Solution(object):\n    def jump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 1:\n            return 0\n        \n        max_reach = nums[0]\n        jumps = 1\n        curr_reach = 0\n        \n        for i in range(len(nums)-1):\n            if i + nums[i] > max_reach:\n                max_reach = i + nums[i]\n            if i == curr_reach:\n                jumps += 1\n                curr_reach = max_reach\n                \n        return jumps"}], "best-time-to-buy-and-sell-stock-iv": [{"task_id": "best-time-to-buy-and-sell-stock-iv", "completion": "class Solution(object):\n    def maxProfit(self, k, prices):\n        \"\"\"\n        :type k: int\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if k >= len(prices)//2:\n            return sum(max(prices[i+1]-prices[i] for i in range(0,len(prices)-1))\n        else:\n            dp = [[0]*2 for _ in range(k+1)]\n            for i in range(len(prices)):\n                for j in range(1,k+1):\n                    dp[j][0] = max(dp[j][0],dp[j-1][1]-prices[i])\n                    dp[j][1] = max(dp[j][1],dp[j][0]+prices[i])\n            return dp[k][1]"}], "convert-a-number-to-hexadecimal": [{"task_id": "convert-a-number-to-hexadecimal", "completion": "class Solution(object):\n    def toHex(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return '0'\n        \n        if num < 0:\n            num = 2**32 + num\n        \n        hex_dict = {10:'a', 11:'b', 12:'c', 13:'d', 14:'e', 15:'f'}\n        res = ''\n        \n        while num > 0:\n            rem = num % 16\n            if rem < 10:\n                res = str(rem) + res\n            else:\n                res = hex_dict[rem] + res\n            num = num // 16\n            \n        return res"}], "first-unique-character-in-a-string": [{"task_id": "first-unique-character-in-a-string", "completion": "class Solution(object):\n    def firstUniqChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # create a hashmap to store the frequency of each character\n        # create a queue to store the index of the first non-repeating character\n        # iterate through the string\n        # if the character is not in the hashmap, add it to the hashmap with frequency 1\n        # if the character is in the hashmap, increment its frequency by 1\n        # if the character is already in the queue, remove it from the queue\n        # if the queue is empty, return -1\n        # if the queue is not empty, return the first element in the queue\n        \n        # create a hashmap to store the frequency of each character\n        # create a queue to store the index of the first non-repeating character\n        # iterate through the string\n        # if the character is not in the hashmap, add it to the hashmap with frequency 1\n        # if the character is in the hashmap, increment its frequency by 1\n        # if the character is already in the queue, remove it from the queue\n        # if the queue is empty, return -1\n        # if the queue is not empty, return the first element in the queue\n        \n        # create a hashmap to store the frequency of each character\n        # create a queue to store the index of the first non-repeating character\n        # iterate through the string\n        # if the character is not in the hashmap, add it to the hashmap with frequency 1\n        # if the character is in the hashmap, increment its frequency by 1\n        # if the character is already in the queue, remove it from the queue\n        # if the queue is empty, return -1\n        # if the queue is not empty, return the first element in the queue\n        \n        # create a hashmap to store the frequency of each character\n        # create a queue to store the index of the first non-repeating character\n        # iterate through the string\n        # if the character is not in the hashmap, add it to the hashmap with frequency 1\n        # if the character is in the hashmap, increment its frequency by 1\n        # if the character is already in the queue, remove it from the queue\n        # if the queue is empty, return -1\n        # if the queue is not empty, return the first element in the queue\n        \n        # create a hashmap to store the frequency of each character\n        # create a queue to store the index of the first non-repeating character\n        # iterate through the string\n        # if the character is not in the hashmap, add it to the hashmap with frequency 1\n        # if the character is in the hashmap, increment its frequency by 1\n        # if the character is already in the queue, remove it from the queue\n        # if the queue is empty, return -1\n        # if the queue is not empty, return the first element in the queue\n        \n        # create a hashmap to store the frequency of each character\n        # create a queue to store the index of the first non-repeating character\n        # iterate through the string\n        # if the character is not in the hashmap, add it to the hashmap with frequency 1\n        # if the character is in the hashmap, increment its frequency by 1\n        # if the character is already in the queue, remove it from the queue\n        # if the queue is empty, return -1\n        # if the queue is not empty, return the first element in the queue\n        \n        # create a hashmap to store the frequency of each character\n        # create a queue to store the index of the first non-repeating character\n        # iterate through the string\n        # if the character is not in the hashmap, add it to the hashmap with frequency 1\n        # if the character is in the hashmap, increment its frequency by 1\n        # if the character is already in the queue, remove it from the queue\n        # if the queue is empty, return -1\n        # if the queue is not empty, return the first element in the queue\n        \n        # create a hashmap to store the frequency of each character\n        # create a queue to store the index of the first non-repeating character\n        # iterate through the string\n        # if the character is not in the hashmap, add it to the hashmap with frequency 1\n        # if the character is in the hashmap, increment its frequency by 1\n        # if the character is already in the queue, remove it from the queue\n        # if the queue is empty, return -1\n        # if"}], "contains-duplicate-iii": [{"task_id": "contains-duplicate-iii", "completion": "class Solution(object):\n    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff):\n        \"\"\"\n        :type nums: List[int]\n        :type indexDiff: int\n        :type valueDiff: int\n        :rtype: bool\n        \"\"\"\n        \n        if len(nums) <= 1:\n            return False\n        \n        if valueDiff < 0:\n            return False\n        \n        if indexDiff < 0:\n            indexDiff = len(nums) + indexDiff\n        \n        if indexDiff > len(nums) - 1:\n            indexDiff = len(nums) - 1\n        \n        if valueDiff > len(nums) * 2**31 - 1:\n            valueDiff = len(nums) * 2**31 - 1\n        \n        if indexDiff == 0:\n            return False\n        \n        if indexDiff == 1:\n            return True\n        \n        if indexDiff > len(nums) - 1:\n            indexDiff = len(nums) - 1\n        \n        if valueDiff > len(nums) * 2**31 - 1:\n            valueDiff = len(nums) * 2**31 - 1\n        \n        if valueDiff == 0:\n            return False\n        \n        if valueDiff == 1:\n            return True\n        \n        if valueDiff > len(nums) * 2**31 - 1:\n            valueDiff = len(nums) * 2**31 - 1\n        \n        if valueDiff > len(nums) * 2**31 - 1:\n            valueDiff = len(nums) * 2**31 - 1\n        \n        if valueDiff > len(nums) * 2**31 - 1:\n            valueDiff = len(nums) * 2**31 - 1\n        \n        if valueDiff > len(nums) * 2**31 - 1:\n            valueDiff = len(nums) * 2**31 - 1\n        \n        if valueDiff > len(nums) * 2**31 - 1:\n            valueDiff = len(nums) * 2**31 - 1\n        \n        if valueDiff > len(nums) * 2**31 - 1:\n            valueDiff = len(nums) * 2**31 - 1\n        \n        if valueDiff > len(nums) * 2**31 - 1:\n            valueDiff = len(nums) * 2**31 - 1\n        \n        if valueDiff > len(nums) * 2**31 - 1:\n            valueDiff = len(nums) * 2**31 - 1\n        \n        if valueDiff > len(nums) * 2**31 - 1:\n            valueDiff = len(nums) * 2**31 - 1\n        \n        if valueDiff > len(nums) * 2**31 - 1:\n            valueDiff = len(nums) * 2**31 - 1\n        \n        if valueDiff > len(nums) * 2**31 - 1:\n            valueDiff = len(nums) * 2**31 - 1\n        \n        if valueDiff > len(nums) * 2**31 - 1:\n            valueDiff = len(nums) * 2**31 - 1\n        \n        if valueDiff > len(nums) * 2**31 - 1:\n            valueDiff = len(nums) * 2**31 - 1\n        \n        if valueDiff > len(nums) * 2**31 - 1:\n            valueDiff = len(nums) * 2**31 - 1\n        \n        if valueDiff > len(nums) * 2**31 - 1:\n            valueDiff = len(nums) * 2**31 - 1\n        \n        if valueDiff > len(nums) * 2**31 - 1:\n            valueDiff = len(nums) * 2**31 - 1\n        \n        if valueDiff > len(nums) * 2**31 - 1:\n            valueDiff = len(nums) * 2**31 - 1\n        \n        if valueDiff > len(nums) * 2**31 - 1:\n            valueDiff = len(nums) * 2**31 - 1\n        \n        if valueDiff > len(nums) * 2**"}], "sort-colors": [{"task_id": "sort-colors", "completion": "class Solution(object):\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,"}], "max-consecutive-ones": [{"task_id": "max-consecutive-ones", "completion": "class Solution(object):\n    def findMaxConsecutiveOnes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_count = 0\n        count = 0\n        \n        for i in nums:\n            if i == 1:\n                count += 1\n            else:\n                count = 0\n            max_count = max(max_count, count)\n        return max_count"}], "count-complete-tree-nodes": [{"task_id": "count-complete-tree-nodes", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def countNodes(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        left_height = self.get_height(root.left)\n        right_height = self.get_height(root.right)\n        \n        if left_height == right_height:\n            return pow(2, left_height) + self.countNodes(root.right)\n        else:\n            return pow(2, right_height) + self.countNodes(root.left)\n        \n    def get_height(self, root):\n        if root is None:\n            return 0\n        \n        return 1 + self.get_height(root.left)"}], "add-strings": [{"task_id": "add-strings", "completion": "class Solution(object):\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        if len(num1) < len(num2):\n            num1, num2 = num2, num1\n        \n        num1 = num1[::-1]\n        num2 = num2[::-1]\n        \n        carry = 0\n        res = ''\n        \n        for i in range(len(num1)):\n            if i < len(num2):\n                val = int(num1[i]) + int(num2[i]) + carry\n            else:\n                val = int(num1[i]) + carry\n            \n            carry = val // 10\n            res += str(val % 10)\n        \n        if carry:\n            res += str(carry)\n        \n        return res[::-1]"}], "basic-calculator": [{"task_id": "basic-calculator", "completion": "class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        num = 0\n        sign = 1\n        for i in range(len(s)):\n            if s[i] == ' ':\n                continue\n            elif s[i] == '+':\n                num = num * sign\n                stack.append(num)\n                num = 0\n                sign = 1\n            elif s[i] == '-':\n                num = num * sign\n                stack.append(num)\n                num = 0\n                sign = -1\n            elif s[i] == '(':\n                stack.append(num)\n                stack.append(sign)\n                num = 0\n                sign = 1\n            elif s[i] == ')':\n                num = num * stack.pop() + stack.pop()\n            else:\n                num = num * 10 + int(s[i])\n        return num + num * sign"}], "ipo": [{"task_id": "ipo", "completion": "class Solution(object):\n    def findMaximizedCapital(self, k, w, profits, capital):\n        \"\"\"\n        :type k: int\n        :type w: int\n        :type profits: List[int]\n        :type capital: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # sort capital and profits\n        # if capital[i] <= w, then we can do profits[i]\n        # if capital[i] > w, then we can do profits[i] * k\n        # if k == 0, then we can't do anything\n        # if k > 0, then we can do profits[i] * k\n        # if k < 0, then we can't do anything\n        \n        # sort capital and profits\n        # if capital[i] <= w, then we can do profits[i]\n        # if capital[i] > w, then we can do profits[i] * k\n        # if k == 0, then we can't do anything\n        # if k > 0, then we can do profits[i] * k\n        # if k < 0, then we can't do anything\n        \n        # sort capital and profits\n        # if capital[i] <= w, then we can do profits[i]\n        # if capital[i] > w, then we can do profits[i] * k\n        # if k == 0, then we can't do anything\n        # if k > 0, then we can do profits[i] * k\n        # if k < 0, then we can't do anything\n        \n        # sort capital and profits\n        # if capital[i] <= w, then we can do profits[i]\n        # if capital[i] > w, then we can do profits[i] * k\n        # if k == 0, then we can't do anything\n        # if k > 0, then we can do profits[i] * k\n        # if k < 0, then we can't do anything\n        \n        # sort capital and profits\n        # if capital[i] <= w, then we can do profits[i]\n        # if capital[i] > w, then we can do profits[i] * k\n        # if k == 0, then we can't do anything\n        # if k > 0, then we can do profits[i] * k\n        # if k < 0, then we can't do anything\n        \n        # sort capital and profits\n        # if capital[i] <= w, then we can do profits[i]\n        # if capital[i] > w, then we can do profits[i] * k\n        # if k == 0, then we can't do anything\n        # if k > 0, then we can do profits[i] * k\n        # if k < 0, then we can't do anything\n        \n        # sort capital and profits\n        # if capital[i] <= w, then we can do profits[i]\n        # if capital[i] > w, then we can do profits[i] * k\n        # if k == 0, then we can't do anything\n        # if k > 0, then we can do profits[i] * k\n        # if k < 0, then we can't do anything\n        \n        # sort capital and profits\n        # if capital[i] <= w, then we can do profits[i]\n        # if capital[i] > w, then we can do profits[i] * k\n        # if k == 0, then we can't do anything\n        # if k > 0, then we can do profits[i] * k\n        # if k < 0, then we can't do anything\n        \n        # sort capital and profits\n        # if capital[i] <= w, then we can do profits[i]\n        # if capital[i] > w, then we can do profits[i] * k\n        # if k == 0, then we can't do anything\n        # if k > 0, then we can do profits[i] * k\n        # if k < 0, then we can't do anything\n        \n        # sort capital and profits\n        # if capital[i] <= w, then we can do profits[i]\n        # if capital[i] > w, then we can do profits[i] * k\n        # if k == 0, then we can't do anything\n        # if k > 0, then we can do profits[i] * k\n        # if k < 0, then we can't do anything\n        \n        # sort capital and profits\n        # if capital[i] <= w, then we can do profits[i]\n        # if capital[i] > w, then we can do profits[i] * k\n        # if k == 0,"}], "valid-parentheses": [{"task_id": "valid-parentheses", "completion": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        stack = []\n        for i in s:\n            if i == '(' or i == '{' or i == '[':\n                stack.append(i)\n            else:\n                if stack:\n                    if i == ')' and stack[-1] == '(':\n                        stack.pop()\n                    elif i == '}' and stack[-1] == '{':\n                        stack.pop()\n                    elif i == ']' and stack[-1] == '[':\n                        stack.pop()\n                    else:\n                        return False\n                else:\n                    return False\n        if stack:\n            return False\n        else:\n            return True"}], "next-permutation": [{"task_id": "next-permutation", "completion": "class Solution(object):\n    def nextPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # find the first number that is smaller than the number to its right\n        # find the number that is bigger than the number to its right\n        # swap the two numbers\n        # reverse the numbers to the right of the number that was swapped\n        \n        # find the first number that is smaller than the number to its right\n        i = len(nums) - 2\n        while i >= 0 and nums[i] >= nums[i + 1]:\n            i -= 1\n        \n        # if the number is the last number, then it is the largest permutation\n        if i == -1:\n            nums.reverse()\n            return\n        \n        # find the number that is bigger than the number to its right\n        j = len(nums) - 1\n        while nums[j] <= nums[i]:\n            j -= 1\n        \n        # swap the two numbers\n        nums[i], nums[j] = nums[j], nums[i]\n        \n        # reverse the numbers to the right of the number that was swapped\n        nums[i + 1:] = nums[i + 1:][::-1]"}], "contains-duplicate-ii": [{"task_id": "contains-duplicate-ii", "completion": "class Solution(object):\n    def containsNearbyDuplicate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        \n        if len(nums) <= 1:\n            return False\n        \n        if k == 0:\n            return False\n        \n        if len(nums) == 2:\n            return nums[0] == nums[1]\n        \n        d = {}\n        \n        for i in range(len(nums)):\n            if nums[i] in d:\n                if i - d[nums[i]] <= k:\n                    return True\n            d[nums[i]] = i\n        \n        return False"}], "maximum-gap": [{"task_id": "maximum-gap", "completion": "class Solution(object):\n    def maximumGap(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 2:\n            return 0\n        \n        nums.sort()\n        max_diff = 0\n        for i in range(1, len(nums)):\n            max_diff = max(max_diff, nums[i] - nums[i - 1])\n        \n        return max_diff"}], "binary-tree-level-order-traversal": [{"task_id": "binary-tree-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        queue = [root]\n        result = []\n        \n        while queue:\n            level = []\n            for i in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.append(level)\n        return result"}], "couples-holding-hands": [{"task_id": "couples-holding-hands", "completion": "class Solution(object):\n    def minSwapsCouples(self, row):\n        \"\"\"\n        :type row: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(row)\n        if n == 2:\n            return 0\n        \n        couples = [i//2 for i in row]\n        couples.sort()\n        \n        swaps = 0\n        for i in range(1, n//2):\n            if couples[i] != couples[i-1]:\n                if couples[i] == couples[i-1]+1:\n                    swaps += 1\n                else:\n                    couples[i], couples[i-1] = couples[i-1], couples[i]\n                    swaps += 1\n        return swaps"}], "interleaving-string": [{"task_id": "interleaving-string", "completion": "class Solution(object):\n    def isInterleave(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) + len(s2) != len(s3):\n            return False\n        \n        if s1 == s3 or s2 == s3:\n            return True\n        \n        if s1 == \"\" and s2 == \"\":\n            return True\n        \n        if s1 == \"\":\n            return s2 == s3\n        \n        if s2 == \"\":\n            return s1 == s3\n        \n        dp = [[False] * (len(s2) + 1) for _ in range(len(s1) + 1)]\n        \n        dp[0][0] = True\n        \n        for i in range(1, len(s1) + 1):\n            if s1[i - 1] == s3[i - 1]:\n                dp[i][0] = True\n            else:\n                break\n        \n        for i in range(1, len(s2) + 1):\n            if s2[i - 1] == s3[i - 1]:\n                dp[0][i] = True\n            else:\n                break\n        \n        for i in range(1, len(s1) + 1):\n            for j in range(1, len(s2) + 1):\n                if s1[i - 1] == s3[i + j - 1] and dp[i - 1][j]:\n                    dp[i][j] = True\n                if s2[j - 1] == s3[i + j - 1] and dp[i][j - 1]:\n                    dp[i][j] = True\n        \n        return dp[-1][-1]"}], "assign-cookies": [{"task_id": "assign-cookies", "completion": "class Solution(object):\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        \n        g.sort()\n        s.sort()\n        i = 0\n        j = 0\n        while i < len(g) and j < len(s):\n            if g[i] <= s[j]:\n                i += 1\n            j += 1\n        return i"}], "keyboard-row": [{"task_id": "keyboard-row", "completion": "class Solution(object):\n    def findWords(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        row1 = set('qwertyuiop')\n        row2 = set('asdfghjkl')\n        row3 = set('zxcvbnm')\n        \n        res = []\n        \n        for word in words:\n            if word[0] in row1:\n                r = row1\n            elif word[0] in row2:\n                r = row2\n            else:\n                r = row3\n            \n            for c in word:\n                if c not in r:\n                    break\n            else:\n                res.append(word)\n                \n        return res"}], "reverse-linked-list-ii": [{"task_id": "reverse-linked-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseBetween(self, head, left, right):\n        \"\"\"\n        :type head: ListNode\n        :type left: int\n        :type right: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if left == right:\n            return head\n        \n        dummy = ListNode(0, head)\n        prev = dummy\n        curr = head\n        count = 1\n        \n        while count < left:\n            prev = curr\n            curr = curr.next\n            count += 1\n        \n        tail = curr\n        \n        while count <= right:\n            temp = curr.next\n            curr.next = prev\n            prev = curr\n            curr = temp\n            count += 1\n        \n        tail.next = curr\n        head = dummy.next\n        prev.next = curr\n        \n        return head"}], "shortest-palindrome": [{"task_id": "shortest-palindrome", "completion": "class Solution(object):\n    def shortestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # find the longest palindrome that can be centered at the beginning of the string\n        # if the string is a palindrome, then the longest palindrome will be the same as the string\n        # if the string is not a palindrome, then the longest palindrome will be the reverse of the string\n        # except for the last character, which will be the same as the first character\n        # for example, if the string is \"abcd\", the longest palindrome will be \"dcbabcd\"\n        # if the string is \"abba\", the longest palindrome will be \"abba\"\n        # if the string is \"abbaa\", the longest palindrome will be \"abbaa\"\n        # if the string is \"abbaab\", the longest palindrome will be \"abbaab\"\n        # if the string is \"abbaabb\", the longest palindrome will be \"abbaabb\"\n        # if the string is \"abbaabba\", the longest palindrome will be \"abbaabba\"\n        # if the string is \"abbaabbaa\", the longest palindrome will be \"abbaabbaa\"\n        # if the string is \"abbaabbaab\", the longest palindrome will be \"abbaabbaab\"\n        # if the string is \"abbaabbaaba\", the longest palindrome will be \"abbaabbaaba\"\n        # if the string is \"abbaabbaabaa\", the longest palindrome will be \"abbaabbaabaa\"\n        # if the string is \"abbaabbaabaaa\", the longest palindrome will be \"abbaabbaabaaa\"\n        # if the string is \"abbaabbaabaaab\", the longest palindrome will be \"abbaabbaabaaab\"\n        # if the string is \"abbaabbaabaaaba\", the longest palindrome will be \"abbaabbaabaaaba\"\n        # if the string is \"abbaabbaabaaabaa\", the longest palindrome will be \"abbaabbaabaaabaa\"\n        # if the string is \"abbaabbaabaaabaaa\", the longest palindrome will be \"abbaabbaabaaabaaa\"\n        # if the string is \"abbaabbaabaaabaaab\", the longest palindrome will be \"abbaabbaabaaabaaab\"\n        # if the string is \"abbaabbaabaaabaaaba\", the longest palindrome will be \"abbaabbaabaaabaaaba\"\n        # if the string is \"abbaabbaabaaabaaaba\", the longest palindrome will be \"abbaabbaabaaabaaaba\"\n        # if the string is \"abbaabbaabaaabaaabaa\", the longest palindrome will be \"abbaabbaabaaabaaabaa\"\n        # if the string is \"abbaabbaabaaabaaabaaa\", the longest palindrome will be \"abbaabbaabaaabaaabaaa\"\n        # if the string is \"abbaabbaabaaabaaabaaab\", the longest palindrome will be \"abbaabbaabaaabaaabaaab\"\n        # if the string is \"abbaabbaabaaabaaabaaaba\", the longest palindrome will be \"abbaabbaabaaabaaabaaaba\"\n        # if the string is \"abbaabbaabaaabaaabaaabaa\", the longest palindrome will be \"abbaabbaabaaabaaabaaabaa\"\n        # if the string is \"abbaabbaabaaabaaabaaabaaa\", the longest palindrome will be \"abbaabbaabaaabaaabaaabaaa\"\n        # if the string is \"abbaabbaabaaabaaabaaabaaab\", the longest palindrome will be \"abbaabbaabaaabaaabaaabaaab\"\n        # if the string is \"abbaabbaabaaabaaabaaabaaaba\", the longest palindrome will be \"abbaabbaabaaabaaabaaabaaaba\"\n        # if the string is \"abbaabbaabaaabaaabaaabaaabaa\", the longest palindrome will be \"abbaabbaabaaabaaabaaabaaabaa\"\n        # if the string is \"abbaabbaabaaabaaabaaabaaabaa"}], "minimum-window-substring": [{"task_id": "minimum-window-substring", "completion": "class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        if len(s) < len(t):\n            return \"\"\n        \n        if len(s) == len(t):\n            if s == t:\n                return s\n            else:\n                return \"\"\n        \n        t_dict = {}\n        for char in t:\n            if char not in t_dict:\n                t_dict[char] = 1\n            else:\n                t_dict[char] += 1\n        \n        s_dict = {}\n        for char in s:\n            if char not in s_dict:\n                s_dict[char] = 1\n            else:\n                s_dict[char] += 1\n        \n        if t_dict == s_dict:\n            return t\n        \n        left = 0\n        right = 0\n        min_window = len(s) + 1\n        min_left = 0\n        min_right = 0\n        \n        while right < len(s):\n            if s[right] in t_dict:\n                if s[right] in s_dict:\n                    s_dict[s[right]] -= 1\n                else:\n                    s_dict[s[right]] = 1\n                if s_dict[s[right]] < t_dict[s[right]]:\n                    if right - left + 1 < min_window:\n                        min_window = right - left + 1\n                        min_left = left\n                        min_right = right\n                right += 1\n            else:\n                if right - left + 1 < min_window:\n                    min_window = right - left + 1\n                    min_left = left\n                    min_right = right\n                left += 1\n        \n        if min_window == len(s) + 1:\n            return \"\"\n        else:\n            return s[min_left:min_right + 1]"}], "self-crossing": [{"task_id": "self-crossing", "completion": "class Solution(object):\n    def isSelfCrossing(self, distance):\n        \"\"\"\n        :type distance: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        for i in range(3, len(distance)):\n            if distance[i] >= distance[i - 2] and distance[i - 1] <= distance[i - 3]:\n                return True\n            if i >= 4 and distance[i] == distance[i - 3] and distance[i - 1] == distance[i - 4]:\n                return True\n            if i >= 5 and distance[i] + distance[i - 4] >= distance[i - 2] and distance[i - 1] == distance[i - 3]:\n                return True\n            if i >= 6 and distance[i] + distance[i - 5] >= distance[i - 2] and distance[i - 2] == distance[i - 4] and distance[i - 1] == distance[i - 3]:\n                return True\n        return False"}], "remove-duplicates-from-sorted-list": [{"task_id": "remove-duplicates-from-sorted-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        curr = head\n        while curr:\n            if curr.next and curr.val == curr.next.val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        return head"}], "longest-palindrome": [{"task_id": "longest-palindrome", "completion": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. count the number of each letter\n        # 2. if the number is odd, add 1 to the result\n        # 3. if the number is even, add it to the result\n        \n        # 1.\n        letter_count = {}\n        for letter in s:\n            if letter not in letter_count:\n                letter_count[letter] = 1\n            else:\n                letter_count[letter] += 1\n        \n        # 2.\n        result = 0\n        for letter in letter_count:\n            if letter_count[letter] % 2 == 0:\n                result += letter_count[letter]\n            else:\n                result += letter_count[letter] - 1\n        \n        # 3.\n        if result < len(s):\n            result += 1\n        \n        return result"}], "construct-binary-tree-from-inorder-and-postorder-traversal": [{"task_id": "construct-binary-tree-from-inorder-and-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not inorder:\n            return None\n        \n        root = TreeNode(postorder[-1])\n        root_index = inorder.index(root.val)\n        \n        root.right = self.buildTree(inorder[root_index+1:], postorder[root_index:-1])\n        root.left = self.buildTree(inorder[:root_index], postorder[:root_index])\n        \n        return root"}], "cut-off-trees-for-golf-event": [{"task_id": "cut-off-trees-for-golf-event", "completion": "class Solution(object):\n    def cutOffTree(self, forest):\n        \"\"\"\n        :type forest: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # get all the trees in the forest\n        trees = []\n        for row in forest:\n            for tree in row:\n                if tree > 1:\n                    trees.append(tree)\n        \n        # sort the trees in ascending order\n        trees.sort()\n        \n        # start from the top left corner\n        i = 0\n        j = 0\n        steps = 0\n        \n        # loop through the trees\n        for tree in trees:\n            # move to the next tree\n            steps += self.bfs(forest, i, j, tree)\n            \n            # if we cannot move to the next tree, return -1\n            if steps == -1:\n                return -1\n            \n            # move to the next tree\n            i, j = self.next_tree(forest, i, j)\n            \n        # return the number of steps\n        return steps\n    \n    def bfs(self, forest, i, j, target):\n        # initialize a queue with the starting point\n        queue = collections.deque([(i, j)])\n        \n        # initialize a set to keep track of visited cells\n        visited = set()\n        \n        # initialize a distance of 0\n        distance = 0\n        \n        # loop until the queue is empty\n        while queue:\n            # get the number of cells in the queue\n            size = len(queue)\n            \n            # loop through the cells in the queue\n            for _ in range(size):\n                # get the current cell\n                i, j = queue.popleft()\n                \n                # if the current cell is the target, return the distance\n                if forest[i][j] == target:\n                    return distance\n                \n                # add the current cell to the visited set\n                visited.add((i, j))\n                \n                # add the neighbors of the current cell to the queue\n                for di, dj in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n                    ni, nj = i + di, j + dj\n                    \n                    # if the neighbor is valid and not visited, add it to the queue\n                    if 0 <= ni < len(forest) and 0 <= nj < len(forest[0]) and (ni, nj) not in visited:\n                        queue.append((ni, nj))\n            \n            # increment the distance by 1\n            distance += 1\n        \n        # if the target is not found, return -1\n        return -1\n    \n    def next_tree(self, forest, i, j):\n        # loop through the directions\n        for di, dj in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n            # get the next cell\n            ni, nj = i + di, j + dj\n            \n            # if the next cell is valid and is a tree, return the next cell\n            if 0 <= ni < len(forest) and 0 <= nj < len(forest[0]) and forest[ni][nj] > 1:\n                return ni, nj\n        \n        # if no valid cell is found, return the starting point\n        return i, j"}], "minimum-depth-of-binary-tree": [{"task_id": "minimum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def minDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        if not root.left:\n            return self.minDepth(root.right) + 1\n        \n        if not root.right:\n            return self.minDepth(root.left) + 1\n        \n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1"}], "count-of-range-sum": [{"task_id": "count-of-range-sum", "completion": "class Solution(object):\n    def countRangeSum(self, nums, lower, upper):\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "arranging-coins": [{"task_id": "arranging-coins", "completion": "class Solution(object):\n    def arrangeCoins(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # Approach 1:\n        # return int((2 * n + 0.25) ** 0.5 - 0.5)\n        \n        # Approach 2:\n        # return int((sqrt(1 + 8 * n) - 1) / 2)\n        \n        # Approach 3:\n        return int((sqrt(1 + 8 * n) - 1) / 2)"}], "longest-uncommon-subsequence-i": [{"task_id": "longest-uncommon-subsequence-i", "completion": "class Solution(object):\n    def findLUSlength(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: int\n        \"\"\"\n        \n        if a == b:\n            return -1\n        else:\n            return max(len(a), len(b))"}], "binary-tree-level-order-traversal-ii": [{"task_id": "binary-tree-level-order-traversal-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        \n        while queue:\n            level = []\n            for _ in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.insert(0, level)\n        \n        return result"}], "palindrome-number": [{"task_id": "palindrome-number", "completion": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        \n        if x < 0:\n            return False\n        \n        if x < 10:\n            return True\n        \n        if x % 10 == 0:\n            return False\n        \n        rev = 0\n        while x > rev:\n            rev = rev * 10 + x % 10\n            x = x // 10\n        \n        return x == rev or x == rev // 10"}], "decode-ways": [{"task_id": "decode-ways", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s[0] == '0':\n            return 0\n        \n        if len(s) == 1:\n            return 1\n        \n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, len(s) + 1):\n            if s[i - 1] != '0':\n                dp[i] = dp[i - 1]\n            if s[i - 2] != '0' and int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        \n        return dp[-1]"}], "is-subsequence": [{"task_id": "is-subsequence", "completion": "class Solution(object):\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) == 0:\n            return True\n        if len(t) == 0:\n            return False\n        \n        i = 0\n        j = 0\n        \n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n            j += 1\n        \n        if i == len(s):\n            return True\n        else:\n            return False"}], "gray-code": [{"task_id": "gray-code", "completion": "class Solution(object):\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if n == 0:\n            return [0]\n        \n        if n == 1:\n            return [0,1]\n        \n        res = [0]\n        for i in range(1,n):\n            res.append(res[-1] + (1 << i))\n        \n        return res"}], "climbing-stairs": [{"task_id": "climbing-stairs", "completion": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        \n        a = 1\n        b = 2\n        for i in range(3, n+1):\n            c = a + b\n            a = b\n            b = c\n        return c"}], "word-break": [{"task_id": "word-break", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        \n        dp = [False] * (len(s) + 1)\n        dp[0] = True\n        \n        for i in range(1, len(s) + 1):\n            for word in wordDict:\n                if i >= len(word):\n                    if s[i - len(word):i] == word:\n                        dp[i] = dp[i - len(word)]\n                if dp[i]:\n                    break\n        return dp[-1]"}], "validate-binary-search-tree": [{"task_id": "validate-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def helper(node, lower, upper):\n            if not node:\n                return True\n            \n            if node.val <= lower or node.val >= upper:\n                return False\n            \n            return helper(node.left, lower, node.val) and helper(node.right, node.val, upper)\n        \n        return helper(root, float('-inf'), float('inf'))"}], "insert-interval": [{"task_id": "insert-interval", "completion": "class Solution(object):\n    def insert(self, intervals, newInterval):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type newInterval: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not intervals:\n            return [newInterval]\n        \n        if newInterval[0] > intervals[-1][1]:\n            return intervals + [newInterval]\n        \n        if newInterval[1] < intervals[0][0]:\n            return [newInterval] + intervals\n        \n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[-1][1]:\n            return intervals\n        \n        if newInterval[0] <= intervals[0][0]:\n            newInterval[0] = intervals[0][0]\n        \n        if newInterval[1] >= intervals[-1][1]:\n            newInterval[1] = intervals[-1][1]\n        \n        intervals.remove(intervals[0])\n        intervals.remove(intervals[-1])\n        \n        return [newInterval] + intervals"}], "palindrome-partitioning": [{"task_id": "palindrome-partitioning", "completion": "class Solution(object):\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def isPalindrome(s):\n            return s == s[::-1]\n        \n        def backtrack(s, start, path, res):\n            if start == len(s):\n                res.append(path[:])\n                return\n            \n            for i in range(start, len(s)):\n                if isPalindrome(s[start:i+1]):\n                    path.append(s[start:i+1])\n                    backtrack(s, i+1, path, res)\n                    path.pop()\n        \n        res = []\n        backtrack(s, 0, [], res)\n        return res"}], "smallest-range-covering-elements-from-k-lists": [{"task_id": "smallest-range-covering-elements-from-k-lists", "completion": "class Solution(object):\n    def smallestRange(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. Find the min and max of all the numbers in the first list\n        # 2. Iterate through the rest of the lists and update the min and max\n        # 3. If the max - min is less than the current max - min, update the min and max\n        # 4. If the max - min is equal to the current max - min, update the min and max\n        # 5. If the max - min is less than the current max - min, update the min and max\n        # 6. If the max - min is equal to the current max - min, update the min and max\n        # 7. If the max - min is less than the current max - min, update the min and max\n        # 8. If the max - min is equal to the current max - min, update the min and max\n        # 9. If the max - min is less than the current max - min, update the min and max\n        # 10. If the max - min is equal to the current max - min, update the min and max\n        # 11. If the max - min is less than the current max - min, update the min and max\n        # 12. If the max - min is equal to the current max - min, update the min and max\n        # 13. If the max - min is less than the current max - min, update the min and max\n        # 14. If the max - min is equal to the current max - min, update the min and max\n        # 15. If the max - min is less than the current max - min, update the min and max\n        # 16. If the max - min is equal to the current max - min, update the min and max\n        # 17. If the max - min is less than the current max - min, update the min and max\n        # 18. If the max - min is equal to the current max - min, update the min and max\n        # 19. If the max - min is less than the current max - min, update the min and max\n        # 20. If the max - min is equal to the current max - min, update the min and max\n        # 21. If the max - min is less than the current max - min, update the min and max\n        # 22. If the max - min is equal to the current max - min, update the min and max\n        # 23. If the max - min is less than the current max - min, update the min and max\n        # 24. If the max - min is equal to the current max - min, update the min and max\n        # 25. If the max - min is less than the current max - min, update the min and max\n        # 26. If the max - min is equal to the current max - min, update the min and max\n        # 27. If the max - min is less than the current max - min, update the min and max\n        # 28. If the max - min is equal to the current max - min, update the min and max\n        # 29. If the max - min is less than the current max - min, update the min and max\n        # 30. If the max - min is equal to the current max - min, update the min and max\n        # 31. If the max - min is less than the current max - min, update the min and max\n        # 32. If the max - min is equal to the current max - min, update the min and max\n        # 33. If the max - min is less than the current max - min, update the min and max\n        # 34. If the max - min is equal to the current max - min, update the min and max\n        # 35. If the max - min is less than the current max - min, update the min and max\n        # 36. If the max - min is equal to the current max - min, update the min and max\n        # 37. If the max - min is less than the current max - min, update the min and max\n        # 38. If the max - min is equal to the current max - min, update the min and max\n        # 39. If the max - min is less than the current max - min, update the min and max\n        # 40. If the max - min is equal to the current max - min, update the min and max\n        # 4"}], "poor-pigs": [{"task_id": "poor-pigs", "completion": "class Solution(object):\n    def poorPigs(self, buckets, minutesToDie, minutesToTest):\n        \"\"\"\n        :type buckets: int\n        :type minutesToDie: int\n        :type minutesToTest: int\n        :rtype: int\n        \"\"\"\n        \n        # 1000 buckets, 15 minutes, 30 minutes\n        # 1000 / 15 = 62.5\n        # 62.5 buckets, 15 minutes, 30 minutes\n        # 62.5 / 15 = 4.166666666666667\n        # 4.166666666666667 buckets, 15 minutes, 30 minutes\n        # 4.166666666666667 / 15 = 2.583333333333333\n        # 2.583333333333333 buckets, 15 minutes, 30 minutes\n        # 2.583333333333333 / 15 = 1.791666666666667\n        # 1.791666666666667 buckets, 15 minutes, 30 minutes\n        # 1.791666666666667 / 15 = 1.390277777777778\n        # 1.390277777777778 buckets, 15 minutes, 30 minutes\n        # 1.390277777777778 / 15 = 1.195138888888889\n        # 1.195138888888889 buckets, 15 minutes, 30 minutes\n        # 1.195138888888889 / 15 = 1.097222222222222\n        # 1.097222222222222 buckets, 15 minutes, 30 minutes\n        # 1.097222222222222 / 15 = 1.048611111111111\n        # 1.048611111111111 buckets, 15 minutes, 30 minutes\n        # 1.048611111111111 / 15 = 1.024305555555556\n        # 1.024305555555556 buckets, 15 minutes, 30 minutes\n        # 1.024305555555556 / 15 = 1.012152777777778\n        # 1.012152777777778 buckets, 15 minutes, 30 minutes\n        # 1.012152777777778 / 15 = 1.006076923076923\n        # 1.006076923076923 buckets, 15 minutes, 30 minutes\n        # 1.006076923076923 / 15 = 1.003037735849056\n        # 1.003037735849056 buckets, 15 minutes, 30 minutes\n        # 1.003037735849056 / 15 = 1.001518987341773\n        # 1.001518987341773 buckets, 15 minutes, 30 minutes\n        # 1.001518987341773 / 15 = 1.000759259259259\n        # 1.000759259259259 buckets, 1"}], "swim-in-rising-water": [{"task_id": "swim-in-rising-water", "completion": "class Solution(object):\n    def swimInWater(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        if n == 1:\n            return grid[0][0]\n        \n        heap = [(grid[0][0], 0, 0)]\n        visited = set()\n        visited.add((0, 0))\n        res = 0\n        \n        while heap:\n            curr_time, x, y = heapq.heappop(heap)\n            res = max(res, curr_time)\n            if x == n - 1 and y == n - 1:\n                return res\n            \n            for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                new_x, new_y = x + dx, y + dy\n                if new_x < 0 or new_x >= n or new_y < 0 or new_y >= n or (new_x, new_y) in visited:\n                    continue\n                heapq.heappush(heap, (grid[new_x][new_y], new_x, new_y))\n                visited.add((new_x, new_y))\n                \n        return res"}], "unique-paths": [{"task_id": "unique-paths", "completion": "class Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        dp = [[0] * n for _ in range(m)]\n        \n        for i in range(m):\n            for j in range(n):\n                if i == 0 or j == 0:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        \n        return dp[m-1][n-1]"}], "multiply-strings": [{"task_id": "multiply-strings", "completion": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        if num1 == \"0\" or num2 == \"0\":\n            return \"0\"\n        \n        num1 = num1[::-1]\n        num2 = num2[::-1]\n        \n        res = [0] * (len(num1) + len(num2))\n        \n        for i in range(len(num1)):\n            for j in range(len(num2)):\n                res[i+j] += int(num1[i]) * int(num2[j])\n                \n        for i in range(len(res)-1):\n            res[i+1] += res[i] // 10\n            res[i] = res[i] % 10\n            \n        res = res[::-1]\n        \n        i = 0\n        while i < len(res) and res[i] == 0:\n            i += 1\n            \n        return ''.join(map(str, res[i:]))"}], "best-time-to-buy-and-sell-stock-iii": [{"task_id": "best-time-to-buy-and-sell-stock-iii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## 1. \n        ## 2. \n        ## 3. \n        ## 4. \n        ## 5. \n        ## 6. \n        ## 7. \n        ## 8. \n        ## 9. \n        ## 10. \n        ## 11. \n        ## 12. \n        ## 13. \n        ## 14. \n        ## 15. \n        ## 16. \n        ## 17. \n        ## 18. \n        ## 19. \n        ## 20. \n        ## 21. \n        ## 22. \n        ## 23. \n        ## 24. \n        ## 25. \n        ## 26. \n        ## 27. \n        ## 28. \n        ## 29. \n        ## 30. \n        ## 31. \n        ## 32. \n        ## 33. \n        ## 34. \n        ## 35. \n        ## 36. \n        ## 37. \n        ## 38. \n        ## 39. \n        ## 40. \n        ## 41. \n        ## 42. \n        ## 43. \n        ## 44. \n        ## 45. \n        ## 46. \n        ## 47. \n        ## 48. \n        ## 49. \n        ## 50. \n        ## 51. \n        ## 52. \n        ## 53. \n        ## 54. \n        ## 55. \n        ## 56. \n        ## 57. \n        ## 58. \n        ## 59. \n        ## 60. \n        ## 61. \n        ## 62. \n        ## 63. \n        ## 64. \n        ## 65. \n        ## 66. \n        ## 67. \n        ## 68. \n        ## 69. \n        ## 70. \n        ## 71. \n        ## 72. \n        ## 73. \n        ## 74. \n        ## 75. \n        ## 76. \n        ## 77. \n        ## 78. \n        ## 79. \n        ## 80. \n        ## 81. \n        ## 82. \n        ## 83. \n        ## 84. \n        ## 85. \n        ## 86. \n        ## 87. \n        ## 88. \n        ## 89. \n        ## 90. \n        ## 91. \n        ## 92. \n        ## 93. \n        ## 94. \n        ## 95. \n        ## 96. \n        ## 97. \n        ## 98. \n        ## 99. \n        ## 100. \n        ## 101. \n        ## 102. \n        ## 103. \n        ## 104. \n        ## 105. \n        ## 106. \n        ## 107. \n        ## 108. \n        ## 109. \n        ## 110. \n        ## 111. \n        ## 112. \n        ## 113. \n        #"}], "combination-sum-ii": [{"task_id": "combination-sum-ii", "completion": "class Solution(object):\n    def combinationSum2(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        res = []\n        self.dfs(candidates, target, 0, [], res)\n        return res\n        \n    def dfs(self, candidates, target, start, path, res):\n        if target == 0:\n            res.append(path[:])\n            return\n        for i in range(start, len(candidates)):\n            if i > start and candidates[i] == candidates[i-1]:\n                continue\n            if candidates[i] > target:\n                break\n            self.dfs(candidates, target - candidates[i], i + 1, path + [candidates[i]], res)"}], "detect-capital": [{"task_id": "detect-capital", "completion": "class Solution(object):\n    def detectCapitalUse(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if word.isupper() or word.islower() or word[0].isupper():\n            return True\n        elif word[1:].isupper():\n            return False\n        else:\n            return True"}], "best-time-to-buy-and-sell-stock": [{"task_id": "best-time-to-buy-and-sell-stock", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        min_price = float('inf')\n        max_profit = 0\n        \n        for price in prices:\n            min_price = min(min_price, price)\n            max_profit = max(max_profit, price - min_price)\n            \n        return max_profit"}], "binary-tree-inorder-traversal": [{"task_id": "binary-tree-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = []\n        result = []\n        curr = root\n        \n        while curr is not None or len(stack) > 0:\n            if curr is not None:\n                stack.append(curr)\n                curr = curr.left\n            else:\n                curr = stack.pop()\n                result.append(curr.val)\n                curr = curr.right\n                \n        return result"}], "construct-binary-tree-from-preorder-and-inorder-traversal": [{"task_id": "construct-binary-tree-from-preorder-and-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not preorder:\n            return None\n        \n        root = TreeNode(preorder[0])\n        root_index = inorder.index(preorder[0])\n        \n        root.left = self.buildTree(preorder[1:root_index+1], inorder[:root_index])\n        root.right = self.buildTree(preorder[root_index+1:], inorder[root_index+1:])\n        \n        return root"}], "remove-invalid-parentheses": [{"task_id": "remove-invalid-parentheses", "completion": "class Solution(object):\n    def removeInvalidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. find the left and right count of '(' and ')'\n        # 2. find the min count of '(' and ')'\n        # 3. find the min count of '(' and ')'\n        # 4. find the min count of '(' and ')'\n        # 5. find the min count of '(' and ')'\n        # 6. find the min count of '(' and ')'\n        # 7. find the min count of '(' and ')'\n        # 8. find the min count of '(' and ')'\n        # 9. find the min count of '(' and ')'\n        # 10. find the min count of '(' and ')'\n        # 11. find the min count of '(' and ')'\n        # 12. find the min count of '(' and ')'\n        # 13. find the min count of '(' and ')'\n        # 14. find the min count of '(' and ')'\n        # 15. find the min count of '(' and ')'\n        # 16. find the min count of '(' and ')'\n        # 17. find the min count of '(' and ')'\n        # 18. find the min count of '(' and ')'\n        # 19. find the min count of '(' and ')'\n        # 20. find the min count of '(' and ')'\n        # 21. find the min count of '(' and ')'\n        # 22. find the min count of '(' and ')'\n        # 23. find the min count of '(' and ')'\n        # 24. find the min count of '(' and ')'\n        # 25. find the min count of '(' and ')'\n        # 26. find the min count of '(' and ')'\n        # 27. find the min count of '(' and ')'\n        # 28. find the min count of '(' and ')'\n        # 29. find the min count of '(' and ')'\n        # 30. find the min count of '(' and ')'\n        # 31. find the min count of '(' and ')'\n        # 32. find the min count of '(' and ')'\n        # 33. find the min count of '(' and ')'\n        # 34. find the min count of '(' and ')'\n        # 35. find the min count of '(' and ')'\n        # 36. find the min count of '(' and ')'\n        # 37. find the min count of '(' and ')'\n        # 38. find the min count of '(' and ')'\n        # 39. find the min count of '(' and ')'\n        # 40. find the min count of '(' and ')'\n        # 41. find the min count of '(' and ')'\n        # 42. find the min count of '(' and ')'\n        # 43. find the min count of '(' and ')'\n        # 44. find the min count of '(' and ')'\n        # 45. find the min count of '(' and ')'\n        # 46. find the min count of '(' and ')'\n        # 47. find the min count of '(' and ')'\n        # 48. find the min count of '(' and ')'\n        # 49. find the min count of '(' and ')'\n        # 50. find the min count of '(' and ')'\n        # 51. find the min count of '(' and ')'\n        # 52. find the min count of '(' and ')'\n        # 53. find the min count of '(' and ')'\n        # 54. find the min count of '(' and ')'\n        # 55. find the min count of '(' and ')'\n        # 56. find the min count of '(' and ')'\n        # 57. find the min count of '(' and ')'\n        # 58. find the min count of '(' and ')'\n        # 59. find the min count of '(' and ')'\n        # 60. find the min count of '(' and ')'\n        # 61. find the min count of"}], "merge-k-sorted-lists": [{"task_id": "merge-k-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        \n        if not lists:\n            return None\n        \n        if len(lists) == 1:\n            return lists[0]\n        \n        if len(lists) == 2:\n            return self.mergeTwoLists(lists[0], lists[1])\n        \n        mid = len(lists) // 2\n        \n        left = self.mergeKLists(lists[:mid])\n        right = self.mergeKLists(lists[mid:])\n        \n        return self.mergeTwoLists(left, right)\n        \n    def mergeTwoLists(self, l1, l2):\n        if not l1:\n            return l2\n        if not l2:\n            return l1\n        \n        if l1.val < l2.val:\n            l1.next = self.mergeTwoLists(l1.next, l2)\n            return l1\n        else:\n            l2.next = self.mergeTwoLists(l1, l2.next)\n            return l2"}], "palindrome-partitioning-ii": [{"task_id": "palindrome-partitioning-ii", "completion": "class Solution(object):\n    def minCut(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "preimage-size-of-factorial-zeroes-function": [{"task_id": "preimage-size-of-factorial-zeroes-function", "completion": "class Solution(object):\n    def preimageSizeFZF(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226,"}], "palindrome-pairs": [{"task_id": "palindrome-pairs", "completion": "class Solution(object):\n    def palindromePairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # Time: O(n^2)\n        # Space: O(n)\n        \n        # Create a hashmap with the words as keys and their indices as values\n        # Iterate through the words and check if the reversed word is in the hashmap\n        # If it is, check if the reversed word is the same as the word itself\n        # If it is, add the index to the result\n        # If it is not, add the index of the reversed word to the result\n        # If the reversed word is not in the hashmap, add the index of the word to the result\n        \n        # Create a hashmap with the words as keys and their indices as values\n        # Iterate through the words and check if the reversed word is in the hashmap\n        # If it is, check if the reversed word is the same as the word itself\n        # If it is, add the index to the result\n        # If it is not, add the index of the reversed word to the result\n        # If the reversed word is not in the hashmap, add the index of the word to the result\n        \n        # Create a hashmap with the words as keys and their indices as values\n        # Iterate through the words and check if the reversed word is in the hashmap\n        # If it is, check if the reversed word is the same as the word itself\n        # If it is, add the index to the result\n        # If it is not, add the index of the reversed word to the result\n        # If the reversed word is not in the hashmap, add the index of the word to the result\n        \n        # Create a hashmap with the words as keys and their indices as values\n        # Iterate through the words and check if the reversed word is in the hashmap\n        # If it is, check if the reversed word is the same as the word itself\n        # If it is, add the index to the result\n        # If it is not, add the index of the reversed word to the result\n        # If the reversed word is not in the hashmap, add the index of the word to the result\n        \n        # Create a hashmap with the words as keys and their indices as values\n        # Iterate through the words and check if the reversed word is in the hashmap\n        # If it is, check if the reversed word is the same as the word itself\n        # If it is, add the index to the result\n        # If it is not, add the index of the reversed word to the result\n        # If the reversed word is not in the hashmap, add the index of the word to the result\n        \n        # Create a hashmap with the words as keys and their indices as values\n        # Iterate through the words and check if the reversed word is in the hashmap\n        # If it is, check if the reversed word is the same as the word itself\n        # If it is, add the index to the result\n        # If it is not, add the index of the reversed word to the result\n        # If the reversed word is not in the hashmap, add the index of the word to the result\n        \n        # Create a hashmap with the words as keys and their indices as values\n        # Iterate through the words and check if the reversed word is in the hashmap\n        # If it is, check if the reversed word is the same as the word itself\n        # If it is, add the index to the result\n        # If it is not, add the index of the reversed word to the result\n        # If the reversed word is not in the hashmap, add the index of the word to the result\n        \n        # Create a hashmap with the words as keys and their indices as values\n        # Iterate through the words and check if the reversed word is in the hashmap\n        # If it is, check if the reversed word is the same as the word itself\n        # If it is, add the index to the result\n        # If it is not, add the index of the reversed word to the result\n        # If the reversed word is not in the hashmap, add the index of the word to the result\n        \n        # Create a hashmap with the words as keys and their indices as values\n        # Iterate through the words and check if the reversed word is in the hashmap\n        # If it is, check if the reversed word is the same as the word itself\n        # If it is, add the index to the result\n        # If it is not, add the index of the"}], "convert-sorted-array-to-binary-search-tree": [{"task_id": "convert-sorted-array-to-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedArrayToBST(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not nums:\n            return None\n        \n        mid = len(nums)//2\n        root = TreeNode(nums[mid])\n        root.left = self.sortedArrayToBST(nums[:mid])\n        root.right = self.sortedArrayToBST(nums[mid+1:])\n        \n        return root"}], "contain-virus": [{"task_id": "contain-virus", "completion": "class Solution(object):\n    def containVirus(self, isInfected):\n        \"\"\"\n        :type isInfected: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(isInfected), len(isInfected[0])\n        count = 0\n        while True:\n            infected = set()\n            for i in range(m):\n                for j in range(n):\n                    if isInfected[i][j] == 1:\n                        infected.add((i, j))\n            if not infected:\n                return count\n            count += 1\n            for i, j in infected:\n                isInfected[i][j] = -1\n            for i in range(m):\n                for j in range(n):\n                    if isInfected[i][j] == 1:\n                        self.dfs(isInfected, i, j)\n        return count\n        \n    def dfs(self, isInfected, i, j):\n        if i < 0 or i >= len(isInfected) or j < 0 or j >= len(isInfected[0]) or isInfected[i][j] == -1:\n            return\n        if isInfected[i][j] == 2:\n            return\n        isInfected[i][j] = 2\n        for x, y in [(i - 1, j), (i + 1, j), (i, j - 1), (i, j + 1)]:\n            self.dfs(isInfected, x, y)"}], "longest-increasing-path-in-a-matrix": [{"task_id": "longest-increasing-path-in-a-matrix", "completion": "class Solution(object):\n    def longestIncreasingPath(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        max_len = 0\n        \n        for i in range(m):\n            for j in range(n):\n                max_len = max(max_len, self.dfs(matrix, dp, i, j))\n        \n        return max_len\n    \n    def dfs(self, matrix, dp, i, j):\n        if dp[i][j]:\n            return dp[i][j]\n        \n        m, n = len(matrix), len(matrix[0])\n        max_len = 1\n        \n        if i > 0 and matrix[i][j] < matrix[i - 1][j]:\n            max_len = max(max_len, 1 + self.dfs(matrix, dp, i - 1, j))\n        \n        if i < m - 1 and matrix[i][j] < matrix[i + 1][j]:\n            max_len = max(max_len, 1 + self.dfs(matrix, dp, i + 1, j))\n        \n        if j > 0 and matrix[i][j] < matrix[i][j - 1]:\n            max_len = max(max_len, 1 + self.dfs(matrix, dp, i, j - 1))\n        \n        if j < n - 1 and matrix[i][j] < matrix[i][j + 1]:\n            max_len = max(max_len, 1 + self.dfs(matrix, dp, i, j + 1))\n        \n        dp[i][j] = max_len\n        return max_len"}], "number-of-digit-one": [{"task_id": "number-of-digit-one", "completion": "class Solution(object):\n    def countDigitOne(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n < 10:\n            return 1\n        \n        if n == 10:\n            return 10\n        \n        if n == 100:\n            return 100\n        \n        if n == 1000:\n            return 1000\n        \n        if n == 10000:\n            return 10000\n        \n        if n == 100000:\n            return 100000\n        \n        if n == 1000000:\n            return 1000000\n        \n        if n == 10000000:\n            return 10000000\n        \n        if n == 100000000:\n            return 100000000\n        \n        if n == 1000000000:\n            return 1000000000\n        \n        if n == 10000000000:\n            return 10000000000\n        \n        if n == 100000000000:\n            return 100000000000\n        \n        if n == 1000000000000:\n            return 1000000000000\n        \n        if n == 10000000000000:\n            return 10000000000000\n        \n        if n == 100000000000000:\n            return 100000000000000\n        \n        if n == 1000000000000000:\n            return 1000000000000000\n        \n        if n == 10000000000000000:\n            return 10000000000000000\n        \n        if n == 100000000000000000:\n            return 100000000000000000\n        \n        if n == 1000000000000000000:\n            return 1000000000000000000\n        \n        if n == 10000000000000000000:\n            return 10000000000000000000\n        \n        if n == 100000000000000000000:\n            return 100000000000000000000\n        \n        if n == 1000000000000000000000:\n            return 1000000000000000000000\n        \n        if n == 10000000000000000000000:\n            return 10000000000000000000000\n        \n        if n == 100000000000000000000000:\n            return 100000000000000000000000\n        \n        if n == 1000000000000000000000000:\n            return 1000000000000000000000000\n        \n        if n == 10000000000000000000000000:\n            return 10000000000000000000000000\n        \n        if n == 10000"}], "word-break-ii": [{"task_id": "word-break-ii", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        dp = [False] * (len(s) + 1)\n        dp[0] = True\n        \n        for i in range(1, len(s) + 1):\n            for word in wordDict:\n                if i - len(word) >= 0 and s[i - len(word):i] == word:\n                    dp[i] = dp[i - len(word)]\n                if dp[i]:\n                    break\n        \n        if not dp[-1]:\n            return []\n        \n        res = []\n        i = len(s)\n        while i > 0:\n            for word in wordDict:\n                if i - len(word) >= 0 and s[i - len(word):i] == word and dp[i - len(word)]:\n                    if i - len(word) == 0:\n                        res.append(word)\n                    else:\n                        res.append(word + \" \" + res[len(s) - i])\n                    i -= len(word)\n                    break\n        \n        return res[::-1]"}], "binary-tree-zigzag-level-order-traversal": [{"task_id": "binary-tree-zigzag-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def zigzagLevelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        left_to_right = True\n        \n        while queue:\n            level = []\n            for _ in range(len(queue)):\n                node = queue.pop(0)\n                if left_to_right:\n                    level.append(node.val)\n                else:\n                    level.insert(0, node.val)\n                \n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            \n            result.append(level)\n            left_to_right = not left_to_right\n        \n        return result"}], "binary-watch": [{"task_id": "binary-watch", "completion": "class Solution(object):\n    def readBinaryWatch(self, turnedOn):\n        \"\"\"\n        :type turnedOn: int\n        :rtype: List[str]\n        \"\"\"\n        \n        if turnedOn > 8:\n            return []\n        \n        res = []\n        for h in range(12):\n            for m in range(60):\n                if bin(h).count('1') + bin(m).count('1') == turnedOn:\n                    res.append('%d:%02d' % (h, m))\n        return res"}], "pascals-triangle": [{"task_id": "pascals-triangle", "completion": "class Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if numRows == 0:\n            return []\n        \n        if numRows == 1:\n            return [[1]]\n        \n        if numRows == 2:\n            return [[1], [1,1]]\n        \n        res = [[1], [1,1]]\n        \n        for i in range(2, numRows):\n            temp = [1]\n            for j in range(1, i):\n                temp.append(res[i-1][j] + res[i-1][j-1])\n            temp.append(1)\n            res.append(temp)\n        \n        return res"}], "power-of-three": [{"task_id": "power-of-three", "completion": "class Solution(object):\n    def isPowerOfThree(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 3 == 0:\n            n = n // 3\n        \n        return n == 1"}], "binary-tree-maximum-path-sum": [{"task_id": "binary-tree-maximum-path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxPathSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        self.max_sum = float('-inf')\n        \n        def max_gain(node):\n            if not node:\n                return 0\n            \n            left_gain = max(max_gain(node.left), 0)\n            right_gain = max(max_gain(node.right), 0)\n            \n            self.max_sum = max(self.max_sum, left_gain + right_gain + node.val)\n            \n            return node.val + max(left_gain, right_gain)\n        \n        max_gain(root)\n        return self.max_sum"}], "trapping-rain-water-ii": [{"task_id": "trapping-rain-water-ii", "completion": "class Solution(object):\n    def trapRainWater(self, heightMap):\n        \"\"\"\n        :type heightMap: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not heightMap:\n            return 0\n        \n        m, n = len(heightMap), len(heightMap[0])\n        heap = [(heightMap[i][0], i, 0) for i in range(m)] + [(heightMap[i][n-1], i, n-1) for i in range(m)]\n        heapq.heapify(heap)\n        seen = set()\n        ans = 0\n        dirs = [(0,1), (0,-1), (1,0), (-1,0)]\n        \n        while heap:\n            curr_height, i, j = heapq.heappop(heap)\n            if (i,j) not in seen:\n                seen.add((i,j))\n                ans += curr_height\n                for d in dirs:\n                    new_i, new_j = i + d[0], j + d[1]\n                    if new_i < 0 or new_i >= m or new_j < 0 or new_j >= n or (new_i, new_j) in seen:\n                        continue\n                    if heightMap[new_i][new_j] < curr_height:\n                        heapq.heappush(heap, (heightMap[new_i][new_j], new_i, new_j))\n        return ans"}], "valid-palindrome": [{"task_id": "valid-palindrome", "completion": "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # convert to lowercase\n        s = s.lower()\n        \n        # remove non-alphanumeric characters\n        s = re.sub(r'[^a-z0-9]', '', s)\n        \n        # check if the string is a palindrome\n        return s == s[::-1]"}], "sliding-window-median": [{"task_id": "sliding-window-median", "completion": "class Solution(object):\n    def medianSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[float]\n        \"\"\"\n        \n        # 1. sort the array\n        # 2. find the median\n        # 3. return the median\n        \n        # 1. sort the array\n        nums.sort()\n        \n        # 2. find the median\n        if len(nums) % 2 == 0:\n            return (nums[k//2] + nums[k//2 - 1]) / 2.0\n        else:\n            return nums[k//2]"}], "rotate-list": [{"task_id": "rotate-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        # find the length of the list\n        length = 0\n        curr = head\n        while curr:\n            length += 1\n            curr = curr.next\n        \n        # if k is greater than the length of the list, we need to rotate by k % length\n        k = k % length\n        \n        # if k is 0, we don't need to rotate\n        if k == 0:\n            return head\n        \n        # find the new head\n        new_head = head\n        for i in range(length - k - 1):\n            new_head = new_head.next\n        \n        # find the new tail\n        new_tail = new_head\n        while new_tail.next:\n            new_tail = new_tail.next\n        \n        # connect the new tail to the old head\n        new_tail.next = head\n        \n        # cut the old head off\n        new_head = new_head.next\n        \n        return new_head"}], "ugly-number": [{"task_id": "ugly-number", "completion": "class Solution(object):\n    def isUgly(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 2 == 0:\n            n = n // 2\n            \n        while n % 3 == 0:\n            n = n // 3\n            \n        while n % 5 == 0:\n            n = n // 5\n            \n        return n == 1"}], "falling-squares": [{"task_id": "falling-squares", "completion": "class Solution(object):\n    def fallingSquares(self, positions):\n        \"\"\"\n        :type positions: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "sum-of-left-leaves": [{"task_id": "sum-of-left-leaves", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumOfLeftLeaves(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        if root.left is None:\n            return self.sumOfLeftLeaves(root.right)\n        \n        if root.left.left is None and root.left.right is None:\n            return root.left.val + self.sumOfLeftLeaves(root.right)\n        \n        return self.sumOfLeftLeaves(root.left) + self.sumOfLeftLeaves(root.right)"}], "max-sum-of-rectangle-no-larger-than-k": [{"task_id": "max-sum-of-rectangle-no-larger-than-k", "completion": "class Solution(object):\n    def maxSumSubmatrix(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(matrix), len(matrix[0])\n        if m > n:\n            matrix = [list(row) for row in zip(*matrix)]\n            m, n = n, m\n        \n        max_sum = float('-inf')\n        for i in range(m):\n            curr_sum = 0\n            prefix_sum = [0] * n\n            for j in range(n):\n                prefix_sum[j] += matrix[i][j]\n                if prefix_sum[j] <= k:\n                    max_sum = max(max_sum, prefix_sum[j])\n                else:\n                    prefix_sum = [prefix_sum[j] - k] + prefix_sum[:j]\n                    max_sum = max(max_sum, max(prefix_sum))\n                    \n        return max_sum"}], "divide-two-integers": [{"task_id": "divide-two-integers", "completion": "class Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"\n        \n        if dividend == 0:\n            return 0\n        \n        if dividend == -2**31 and divisor == -1:\n            return 2**31 - 1\n        \n        if dividend == -2**31 and divisor == 1:\n            return -2**31\n        \n        if dividend > 0 and divisor > 0:\n            return int(dividend/divisor)\n        \n        if dividend < 0 and divisor > 0:\n            return -int(abs(dividend)/divisor)\n        \n        if dividend > 0 and divisor < 0:\n            return -int(abs(dividend)/abs(divisor))\n        \n        if dividend < 0 and divisor < 0:\n            return int(abs(dividend)/abs(divisor))"}], "surrounded-regions": [{"task_id": "surrounded-regions", "completion": "class Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        if not board:\n            return\n        \n        m, n = len(board), len(board[0])\n        \n        def dfs(i, j):\n            if i < 0 or i >= m or j < 0 or j >= n or board[i][j] != 'O':\n                return\n            \n            board[i][j] = 'T'\n            \n            dfs(i + 1, j)\n            dfs(i - 1, j)\n            dfs(i, j + 1)\n            dfs(i, j - 1)\n            \n        for i in range(m):\n            dfs(i, 0)\n            dfs(i, n - 1)\n            \n        for j in range(n):\n            dfs(0, j)\n            dfs(m - 1, j)\n            \n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'O':\n                    board[i][j] = 'X'\n                elif board[i][j] == 'T':\n                    board[i][j] = 'O'"}], "two-sum": [{"task_id": "two-sum", "completion": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # create a hashmap\n        hashmap = {}\n        \n        # iterate through the list\n        for i in range(len(nums)):\n            \n            # if the difference between the target and the current number is in the hashmap, return the indices\n            if target - nums[i] in hashmap:\n                return [hashmap[target - nums[i]], i]\n            \n            # otherwise, add the number to the hashmap\n            hashmap[nums[i]] = i\n            \n        return []"}], "24-game": [{"task_id": "24-game", "completion": "class Solution(object):\n    def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        def dfs(cards, target):\n            if len(cards) == 1:\n                return abs(cards[0] - target) < 1e-6\n            \n            for i in range(len(cards)):\n                for j in range(i + 1, len(cards)):\n                    a, b = cards[i], cards[j]\n                    new_cards = [a + b, a - b, b - a, a * b]\n                    if a * b < 0:\n                        new_cards.append(b / a)\n                    if b * a < 0:\n                        new_cards.append(a / b)\n                    if a != 0:\n                        new_cards.append(b / a)\n                    if b != 0:\n                        new_cards.append(a / b)\n                    if len(new_cards) == 1:\n                        return True\n                    if dfs(new_cards, target):\n                        return True\n            return False\n        \n        return dfs(cards, 24)"}], "wildcard-matching": [{"task_id": "wildcard-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        if not p.replace('*', ''):\n            return not s\n        \n        star = p.find('*')\n        if star == -1:\n            return False\n        \n        if star == 0:\n            return True\n        \n        if p[star - 1] != s[0] and p[star - 1] != '*':\n            return False\n        \n        if star == len(p) - 1:\n            return True\n        \n        if p[star + 1] == '*':\n            return self.isMatch(s[1:], p)\n        \n        if p[star - 1] == s[0] or p[star - 1] == '?':\n            return self.isMatch(s[1:], p[star + 1:])\n        \n        return False"}], "majority-element": [{"task_id": "majority-element", "completion": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        count = 0\n        candidate = None\n        \n        for num in nums:\n            if count == 0:\n                candidate = num\n            if num == candidate:\n                count += 1\n            else:\n                count -= 1\n        \n        return candidate"}], "reconstruct-itinerary": [{"task_id": "reconstruct-itinerary", "completion": "class Solution(object):\n    def findItinerary(self, tickets):\n        \"\"\"\n        :type tickets: List[List[str]]\n        :rtype: List[str]\n        \"\"\"\n        \n        # build a graph\n        graph = collections.defaultdict(list)\n        for start, end in tickets:\n            graph[start].append(end)\n        \n        # sort the graph by alphabetical order\n        for start in graph:\n            graph[start].sort(reverse=True)\n        \n        # dfs\n        res = []\n        def dfs(start):\n            # if there is no more edges, add the start to the result\n            if len(graph[start]) == 0:\n                res.append(start)\n                return\n            # otherwise, pop the last edge and dfs\n            for i in range(len(graph[start])-1, -1, -1):\n                end = graph[start][i]\n                graph[start].pop(i)\n                dfs(end)\n                # add the start back\n                graph[start].append(end)\n        \n        dfs(\"JFK\")\n        return res[::-1]"}], "4sum": [{"task_id": "4sum", "completion": "class Solution(object):\n    def fourSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        for i in range(len(nums)-3):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            for j in range(i+1, len(nums)-2):\n                if j > i+1 and nums[j] == nums[j-1]:\n                    continue\n                l = j+1\n                r = len(nums)-1\n                while l < r:\n                    if nums[i] + nums[j] + nums[l] + nums[r] == target:\n                        res.append([nums[i], nums[j], nums[l], nums[r]])\n                        l += 1\n                        r -= 1\n                        while l < r and nums[l] == nums[l-1]:\n                            l += 1\n                        while l < r and nums[r] == nums[r+1]:\n                            r -= 1\n                    elif nums[i] + nums[j] + nums[l] + nums[r] < target:\n                        l += 1\n                    else:\n                        r -= 1\n        return res"}], "the-skyline-problem": [{"task_id": "the-skyline-problem", "completion": "class Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # sort the buildings by left edge\n        buildings.sort(key=lambda x: x[0])\n        \n        # initialize the result\n        result = [[0, 0]]\n        \n        # iterate over the buildings\n        for building in buildings:\n            # if the building is ending, remove it from the result\n            if building[1] < 0:\n                # remove the building from the result\n                result.remove([building[1], -building[2]])\n            else:\n                # add the building to the result\n                result.append([building[0], -building[2]])\n        \n        # sort the result by height\n        result.sort(key=lambda x: x[1])\n        \n        # initialize the result\n        skyline = []\n        \n        # iterate over the result\n        for i in range(len(result)):\n            # if the current building is ending, remove it from the result\n            if result[i][1] < 0:\n                # remove the building from the result\n                result.remove([result[i][0], -result[i][1]])\n            else:\n                # add the building to the result\n                result.append([result[i][0], -result[i][1]])\n        \n        # iterate over the result\n        for i in range(len(result)-1):\n            # if the current building is ending, remove it from the result\n            if result[i][1] < 0:\n                # remove the building from the result\n                result.remove([result[i][0], -result[i][1]])\n            else:\n                # add the building to the result\n                result.append([result[i][0], -result[i][1]])\n        \n        # iterate over the result\n        for i in range(len(result)-1):\n            # if the current building is ending, remove it from the result\n            if result[i][1] < 0:\n                # remove the building from the result\n                result.remove([result[i][0], -result[i][1]])\n            else:\n                # add the building to the result\n                result.append([result[i][0], -result[i][1]])\n        \n        # iterate over the result\n        for i in range(len(result)-1):\n            # if the current building is ending, remove it from the result\n            if result[i][1] < 0:\n                # remove the building from the result\n                result.remove([result[i][0], -result[i][1]])\n            else:\n                # add the building to the result\n                result.append([result[i][0], -result[i][1]])\n        \n        # iterate over the result\n        for i in range(len(result)-1):\n            # if the current building is ending, remove it from the result\n            if result[i][1] < 0:\n                # remove the building from the result\n                result.remove([result[i][0], -result[i][1]])\n            else:\n                # add the building to the result\n                result.append([result[i][0], -result[i][1]])\n        \n        # iterate over the result\n        for i in range(len(result)-1):\n            # if the current building is ending, remove it from the result\n            if result[i][1] < 0:\n                # remove the building from the result\n                result.remove([result[i][0], -result[i][1]])\n            else:\n                # add the building to the result\n                result.append([result[i][0], -result[i][1]])\n        \n        # iterate over the result\n        for i in range(len(result)-1):\n            # if the current building is ending, remove it from the result\n            if result[i][1] < 0:\n                # remove the building from the result\n                result.remove([result[i][0], -result[i][1]])\n            else:\n                # add the building to the result\n                result.append([result[i][0], -result[i][1]])\n        \n        # iterate over the result\n        for i in range(len(result)-1):\n            # if the current building is ending, remove it from the result\n            if result[i][1] < 0:\n                # remove the building from the result\n                result.remove([result"}], "reverse-string": [{"task_id": "reverse-string", "completion": "class Solution(object):\n    def reverseString(self, s):\n        \"\"\"\n        :type s: List[str]\n        :rtype: None Do not return anything, modify s in-place instead.\n        \"\"\"\n        \n        left = 0\n        right = len(s) - 1\n        \n        while left < right:\n            s[left], s[right] = s[right], s[left]\n            left += 1\n            right -= 1"}], "reverse-linked-list": [{"task_id": "reverse-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        prev = None\n        curr = head\n        \n        while curr:\n            next = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next\n            \n        return prev"}], "triangle": [{"task_id": "triangle", "completion": "class Solution(object):\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        for i in range(1,len(triangle)):\n            for j in range(len(triangle[i])):\n                if j == 0:\n                    triangle[i][j] += triangle[i-1][j]\n                elif j == len(triangle[i])-1:\n                    triangle[i][j] += triangle[i-1][j-1]\n                else:\n                    triangle[i][j] += min(triangle[i-1][j],triangle[i-1][j-1])\n        return min(triangle[-1])"}], "integer-to-english-words": [{"task_id": "integer-to-english-words", "completion": "class Solution(object):\n    def numberToWords(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"Zero\"\n        \n        ones = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n        tens = [\"\", \"Ten\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"]\n        teens = [\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"]\n        \n        def helper(num):\n            if num == 0:\n                return \"\"\n            if num < 10:\n                return ones[num]\n            if num < 20:\n                return teens[num - 10]\n            if num < 100:\n                return tens[num // 10] + \" \" + helper(num % 10)\n            if num < 1000:\n                return ones[num // 100] + \" Hundred \" + helper(num % 100)\n            if num < 1000000:\n                return helper(num // 1000) + \" Thousand \" + helper(num % 1000)\n            if num < 1000000000:\n                return helper(num // 1000000) + \" Million \" + helper(num % 1000000)\n            return helper(num // 1000000000) + \" Billion \" + helper(num % 1000000000)\n        \n        return helper(num).strip()"}], "k-inverse-pairs-array": [{"task_id": "k-inverse-pairs-array", "completion": "class Solution(object):\n    def kInversePairs(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        mod = 10**9 + 7\n        dp = [[0] * (k+1) for _ in range(n+1)]\n        \n        for i in range(1, n+1):\n            for j in range(1, k+1):\n                if j < i:\n                    dp[i][j] = 0\n                elif j == 0:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = (dp[i-1][j] + dp[i-1][j-1]) % mod\n                    \n                    if j >= i:\n                        dp[i][j] -= dp[i-1][j-i]\n                        \n        return dp[n][k] % mod"}], "swap-nodes-in-pairs": [{"task_id": "swap-nodes-in-pairs", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        \n        while prev.next and prev.next.next:\n            first = prev.next\n            second = prev.next.next\n            \n            prev.next = second\n            first.next = second.next\n            second.next = first\n            \n            prev = first\n            \n        return dummy.next"}], "path-sum": [{"task_id": "path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def hasPathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: bool\n        \"\"\"\n        \n        if root is None:\n            return False\n        \n        if root.left is None and root.right is None:\n            return root.val == targetSum\n        \n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)"}], "partition-list": [{"task_id": "partition-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def partition(self, head, x):\n        \"\"\"\n        :type head: ListNode\n        :type x: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        smaller = ListNode(0)\n        greater = ListNode(0)\n        s = smaller\n        g = greater\n        \n        while head:\n            if head.val < x:\n                s.next = head\n                s = s.next\n            else:\n                g.next = head\n                g = g.next\n            head = head.next\n        \n        s.next = greater.next\n        g.next = None\n        \n        return smaller.next"}], "redundant-connection-ii": [{"task_id": "redundant-connection-ii", "completion": "class Solution(object):\n    def findRedundantDirectedConnection(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. Find the node with two parents\n        # 2. Find the node with only one parent\n        # 3. If there is only one parent, then the node with two parents is the answer\n        # 4. If there is no parent, then the node with two parents is the answer\n        \n        # 1. Find the node with two parents\n        parent_map = {}\n        for edge in edges:\n            if edge[0] in parent_map:\n                if parent_map[edge[0]] != edge[1]:\n                    return [parent_map[edge[0]], edge[1]]\n            else:\n                parent_map[edge[0]] = edge[1]\n        \n        # 2. Find the node with only one parent\n        for edge in edges:\n            if edge[1] not in parent_map:\n                return edge\n        \n        return []"}], "permutations-ii": [{"task_id": "permutations-ii", "completion": "class Solution(object):\n    def permuteUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        visited = [False] * len(nums)\n        self.backtrack(nums, visited, [], res)\n        return res\n        \n    def backtrack(self, nums, visited, path, res):\n        if len(path) == len(nums):\n            res.append(path[:])\n            return\n        \n        for i in range(len(nums)):\n            if visited[i]:\n                continue\n            if i > 0 and nums[i] == nums[i-1] and not visited[i-1]:\n                continue\n            visited[i] = True\n            path.append(nums[i])\n            self.backtrack(nums, visited, path, res)\n            visited[i] = False\n            path.pop()"}], "add-digits": [{"task_id": "add-digits", "completion": "class Solution(object):\n    def addDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        if num == 0:\n            return 0\n        if num % 9 == 0:\n            return 9\n        else:\n            return num % 9"}], "single-number": [{"task_id": "single-number", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # XOR\n        # 0 ^ 0 = 0\n        # 0 ^ 1 = 1\n        # 1 ^ 0 = 1\n        # 1 ^ 1 = 0\n        # \n        # 0 ^ 1 ^ 0 = 1\n        # 0 ^ 1 ^ 1 = 0\n        # 1 ^ 0 ^ 1 = 0\n        # 1 ^ 1 ^ 0 = 0\n        # \n        # 0 ^ 1 ^ 1 ^ 0 = 0\n        # 0 ^ 1 ^ 1 ^ 1 = 1\n        # 1 ^ 0 ^ 1 ^ 1 = 0\n        # 1 ^ 1 ^ 0 ^ 1 = 1\n        # \n        # 0 ^ 1 ^ 1 ^ 1 ^ 0 = 1\n        # 0 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # 1 ^ 0 ^ 1 ^ 1 ^ 1 = 0\n        # 1 ^ 1 ^ 0 ^ 1 ^ 1 = 1\n        # \n        # 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 0 = 0\n        # 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 1\n        # 1 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 1 = 1\n        # \n        # 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 0 = 1\n        # 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # 1 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 = 1\n        # \n        # 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 0 = 0\n        # 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 1\n        # 1 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 1\n        # \n        # 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 0 = 1\n        # 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # 1 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 1\n        # \n        # 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 0 = 0\n        # 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 1\n        # 1 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 1\n        # \n        # 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 0 = 1\n        # 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # 1 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 1\n        # \n        # 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 0 = 0"}], "length-of-last-word": [{"task_id": "length-of-last-word", "completion": "class Solution(object):\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Split the string into words\n        words = s.split()\n        \n        # Return the length of the last word\n        return len(words[-1])"}], "cherry-pickup": [{"task_id": "cherry-pickup", "completion": "class Solution(object):\n    def cherryPickup(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        dp = [[0] * n for _ in range(n)]\n        dp[0][0] = grid[0][0]\n        \n        for i in range(1, n):\n            if grid[i][0] == -1 or grid[i - 1][0] == -1:\n                break\n            dp[i][0] = dp[i - 1][0] + grid[i][0]\n        \n        for i in range(1, n):\n            if grid[n - 1 - i][n - 1] == -1 or grid[n - i][n - 1] == -1:\n                break\n            dp[n - 1 - i][n - 1] = dp[n - i][n - 1] + grid[n - 1 - i][n - 1]\n        \n        for i in range(1, n):\n            for j in range(1, n):\n                if grid[i][j] == -1:\n                    dp[i][j] = 0\n                    continue\n                dp[i][j] = grid[i][j] + dp[i - 1][j - 1] + dp[i][j - 1] + dp[i - 1][j]\n                if i + j < n - 1:\n                    dp[i][j] = max(dp[i][j], dp[i][j - 1] + dp[i - 1][j])\n                if i + j < n - 1:\n                    dp[i][j] = max(dp[i][j], dp[i][j - 1] + dp[i - 1][j - 1])\n                if i + j < n - 1:\n                    dp[i][j] = max(dp[i][j], dp[i - 1][j] + dp[i][j - 1])\n                if i + j < n - 1:\n                    dp[i][j] = max(dp[i][j], dp[i - 1][j - 1] + dp[i][j - 1])\n                if i + j < n - 1:\n                    dp[i][j] = max(dp[i][j], dp[i - 1][j - 1] + dp[i - 1][j])\n                if i + j < n - 1:\n                    dp[i][j] = max(dp[i][j], dp[i - 1][j] + dp[i - 1][j - 1])\n                if i + j < n - 1:\n                    dp[i][j] = max(dp[i][j], dp[i][j - 1] + dp[i - 1][j - 1])\n                if i + j < n - 1:\n                    dp[i][j] = max(dp[i][j], dp[i - 1][j] + dp[i - 1][j - 1] + dp[i][j - 1])\n                if i + j < n - 1:\n                    dp[i][j] = max(dp[i][j], dp[i - 1][j] + dp[i][j - 1] + dp[i - 1][j - 1])\n                if i + j < n - 1:\n                    dp[i][j] = max(dp[i][j], dp[i][j - 1] + dp[i - 1][j] + dp[i - 1][j - 1])\n                if i + j < n - 1:\n                    dp[i][j] = max(dp[i][j], dp[i][j - 1] + dp[i - 1][j] + dp[i - 1][j - 1] + dp[i][j - 1])\n                if i + j < n - 1:\n                    dp[i][j] = max(dp[i][j], dp[i][j - 1] + dp[i - 1][j] + dp[i - 1][j - 1] + dp[i][j"}], "student-attendance-record-ii": [{"task_id": "student-attendance-record-ii", "completion": "class Solution(object):\n    def checkRecord(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        mod = 10**9 + 7\n        dp = [1,2,4]\n        if n < 3:\n            return dp[n]\n        \n        for i in range(3,n+1):\n            dp.append((dp[i-1] + dp[i-2] + dp[i-3])%mod)\n        \n        return dp[n]"}], "happy-number": [{"task_id": "happy-number", "completion": "class Solution(object):\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        slow = n\n        fast = n\n        \n        while True:\n            slow = sum(int(i)**2 for i in str(slow))\n            fast = sum(int(i)**2 for i in str(fast))\n            fast = sum(int(i)**2 for i in str(fast))\n            \n            if slow == 1:\n                return True\n            if slow == fast:\n                return False\n        \n        return True"}], "search-insert-position": [{"task_id": "search-insert-position", "completion": "class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            \n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n                \n        return left"}], "jump-game": [{"task_id": "jump-game", "completion": "class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        max_reachable = 0\n        \n        for i, num in enumerate(nums):\n            if i > max_reachable:\n                return False\n            max_reachable = max(max_reachable, i + num)\n            \n        return True"}], "minimum-path-sum": [{"task_id": "minimum-path-sum", "completion": "class Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(grid)\n        n = len(grid[0])\n        \n        for i in range(1,m):\n            grid[i][0] += grid[i-1][0]\n        \n        for j in range(1,n):\n            grid[0][j] += grid[0][j-1]\n        \n        for i in range(1,m):\n            for j in range(1,n):\n                grid[i][j] += min(grid[i-1][j],grid[i][j-1])\n        \n        return grid[-1][-1]"}], "count-and-say": [{"task_id": "count-and-say", "completion": "class Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        \n        if n == 1:\n            return '1'\n        \n        prev = '1'\n        count = 1\n        res = ''\n        \n        for i in range(2, n+1):\n            count = 1\n            res = ''\n            for j in range(1, len(prev)):\n                if prev[j] == prev[j-1]:\n                    count += 1\n                else:\n                    res += str(count) + prev[j-1]\n                    count = 1\n            res += str(count) + prev[-1]\n            prev = res\n            \n        return res"}], "split-array-largest-sum": [{"task_id": "split-array-largest-sum", "completion": "class Solution(object):\n    def splitArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # binary search\n        # find the max element in the array\n        # if the max element is greater than the sum of all the elements in the array, then the max element is the answer\n        # if the max element is less than the sum of all the elements in the array, then the max element is the answer\n        # if the max element is equal to the sum of all the elements in the array, then the max element is the answer\n        # if the max element is less than the sum of all the elements in the array, then the max element is the answer\n        # if the max element is greater than the sum of all the elements in the array, then the max element is the answer\n        # if the max element is equal to the sum of all the elements in the array, then the max element is the answer\n        # if the max element is less than the sum of all the elements in the array, then the max element is the answer\n        # if the max element is greater than the sum of all the elements in the array, then the max element is the answer\n        # if the max element is equal to the sum of all the elements in the array, then the max element is the answer\n        # if the max element is less than the sum of all the elements in the array, then the max element is the answer\n        # if the max element is greater than the sum of all the elements in the array, then the max element is the answer\n        # if the max element is equal to the sum of all the elements in the array, then the max element is the answer\n        # if the max element is less than the sum of all the elements in the array, then the max element is the answer\n        # if the max element is greater than the sum of all the elements in the array, then the max element is the answer\n        # if the max element is equal to the sum of all the elements in the array, then the max element is the answer\n        # if the max element is less than the sum of all the elements in the array, then the max element is the answer\n        # if the max element is greater than the sum of all the elements in the array, then the max element is the answer\n        # if the max element is equal to the sum of all the elements in the array, then the max element is the answer\n        # if the max element is less than the sum of all the elements in the array, then the max element is the answer\n        # if the max element is greater than the sum of all the elements in the array, then the max element is the answer\n        # if the max element is equal to the sum of all the elements in the array, then the max element is the answer\n        # if the max element is less than the sum of all the elements in the array, then the max element is the answer\n        # if the max element is greater than the sum of all the elements in the array, then the max element is the answer\n        # if the max element is equal to the sum of all the elements in the array, then the max element is the answer\n        # if the max element is less than the sum of all the elements in the array, then the max element is the answer\n        # if the max element is greater than the sum of all the elements in the array, then the max element is the answer\n        # if the max element is equal to the sum of all the elements in the array, then the max element is the answer\n        # if the max element is less than the sum of all the elements in the array, then the max element is the answer\n        # if the max element is greater than the sum of all the elements in the array, then the max element is the answer\n        # if the max element is equal to the sum of all the elements in the array, then the max element is the answer\n        # if the max element is less than the sum of all the elements in the array, then the max element is the answer\n        # if the max element is greater than the sum of all the elements in the array, then the max element is the answer\n        # if the max element is equal to the sum of all the elements in the array, then the max element is the answer\n        # if the max element is less than the sum of all the elements in the array, then the max element is the answer\n        # if the max element is greater than the sum of all the elements in the array, then the max element is the answer\n        # if the max element is equal to the sum of all the elements in the array, then the max element is the answer\n        # if the max element is less than the sum of all the elements in the array, then the max element is the answer\n        # if the max element is greater than the"}], "search-in-rotated-sorted-array": [{"task_id": "search-in-rotated-sorted-array", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 0:\n            return -1\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            \n            if nums[mid] == target:\n                return mid\n            \n            if nums[left] <= nums[mid]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        \n        return -1"}], "letter-combinations-of-a-phone-number": [{"task_id": "letter-combinations-of-a-phone-number", "completion": "class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        \n        if not digits:\n            return []\n        \n        phone = {'2':'abc','3':'def','4':'ghi','5':'jkl','6':'mno','7':'pqrs','8':'tuv','9':'wxyz'}\n        \n        res = ['']\n        \n        for digit in digits:\n            temp = []\n            for letter in phone[digit]:\n                for item in res:\n                    temp.append(item+letter)\n            res = temp\n            \n        return res"}], "combination-sum": [{"task_id": "combination-sum", "completion": "class Solution(object):\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        res = []\n        self.dfs(candidates, target, 0, [], res)\n        return res\n        \n    def dfs(self, candidates, target, start, path, res):\n        if target == 0:\n            res.append(path[:])\n            return\n        for i in range(start, len(candidates)):\n            if candidates[i] > target:\n                break\n            if i > start and candidates[i] == candidates[i-1]:\n                continue\n            self.dfs(candidates, target - candidates[i], i, path + [candidates[i]], res)"}], "find-the-closest-palindrome": [{"task_id": "find-the-closest-palindrome", "completion": "class Solution(object):\n    def nearestPalindromic(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\"\n        \n        if n[0] == '9':\n            return str(int(n) + 1)\n        \n        if n[0] == '1':\n            if len(n) == 1:\n                return '9'\n            else:\n                return str(int(n) - 1)\n        \n        if n[0] == '0':\n            return '0'\n        \n        if n[-1] == '9':\n            return str(int(n[:-1]) + 1)\n        \n        if n[-1] == '1':\n            return str(int(n[:-1]) - 1)\n        \n        if n[-1] == '0':\n            return str(int(n[:-1]) - 1)\n        \n        if n[-1] == '5':\n            if len(n) == 1:\n                return '9'\n            else:\n                return str(int(n[:-1]) + 1)\n        \n        if n[-1] == '4':\n            if len(n) == 1:\n                return '9'\n            else:\n                return str(int(n[:-1]) + 1)\n        \n        if n[-1] == '6':\n            if len(n) == 1:\n                return '9'\n            else:\n                return str(int(n[:-1]) + 1)\n        \n        if n[-1] == '7':\n            if len(n) == 1:\n                return '9'\n            else:\n                return str(int(n[:-1]) + 1)\n        \n        if n[-1] == '8':\n            if len(n) == 1:\n                return '9'\n            else:\n                return str(int(n[:-1]) + 1)\n        \n        if n[-1] == '3':\n            if len(n) == 1:\n                return '9'\n            else:\n                return str(int(n[:-1]) + 1)\n        \n        if n[-1] == '2':\n            if len(n) == 1:\n                return '9'\n            else:\n                return str(int(n[:-1]) + 1)\n        \n        if n[-1] == '4':\n            if len(n) == 1:\n                return '9'\n            else:\n                return str(int(n[:-1]) + 1)\n        \n        if n[-1] == '5':\n            if len(n) == 1:\n                return '9'\n            else:\n                return str(int(n[:-1]) + 1)\n        \n        if n[-1] == '6':\n            if len(n) == 1:\n                return '9'\n            else:\n                return str(int(n[:-1]) + 1)\n        \n        if n[-1] == '7':\n            if len(n) == 1:\n                return '9'\n            else:\n                return str(int(n[:-1]) + 1)\n        \n        if n[-1] == '8':\n            if len(n) == 1:\n                return '9'\n            else:\n                return str(int(n[:-1]) + 1)\n        \n        if n[-1] == '9':\n            if len(n) == 1:\n                return '9'\n            else:\n                return str(int(n[:-1]) + 1)\n        \n        return str(int(n[:-1]) + 1)"}], "spiral-matrix-ii": [{"task_id": "spiral-matrix-ii", "completion": "class Solution(object):\n    def generateMatrix(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        matrix = [[0]*n for _ in range(n)]\n        top, bottom, left, right = 0, n-1, 0, n-1\n        num = 1\n        \n        while top <= bottom and left <= right:\n            for i in range(left, right+1):\n                matrix[top][i] = num\n                num += 1\n            top += 1\n            \n            for i in range(top, bottom+1):\n                matrix[i][right] = num\n                num += 1\n            right -= 1\n            \n            if top <= bottom:\n                for i in range(right, left-1, -1):\n                    matrix[bottom][i] = num\n                    num += 1\n                bottom -= 1\n            \n            if left <= right:\n                for i in range(bottom, top-1, -1):\n                    matrix[i][left] = num\n                    num += 1\n                left += 1\n        \n        return matrix"}], "reverse-integer": [{"task_id": "reverse-integer", "completion": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x < 0:\n            x = -x\n            sign = -1\n        else:\n            sign = 1\n        \n        rev = 0\n        while x > 0:\n            rev = rev * 10 + x % 10\n            x = x // 10\n        \n        if rev > 2**31 - 1 or rev < -2**31:\n            return 0\n        \n        return rev * sign"}], "rotate-image": [{"task_id": "rotate-image", "completion": "class Solution(object):\n    def rotate(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        n = len(matrix)\n        \n        # transpose\n        for i in range(n):\n            for j in range(i, n):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n        \n        # reverse each row\n        for i in range(n):\n            matrix[i].reverse()"}], "maximum-product-subarray": [{"task_id": "maximum-product-subarray", "completion": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_prod = nums[0]\n        min_prod = nums[0]\n        max_prod_so_far = nums[0]\n        \n        for i in range(1, len(nums)):\n            curr_max = max_prod * nums[i]\n            curr_min = min_prod * nums[i]\n            \n            max_prod = max(curr_max, curr_min, nums[i])\n            min_prod = min(curr_max, curr_min, nums[i])\n            \n            max_prod_so_far = max(max_prod_so_far, max_prod)\n            \n        return max_prod_so_far"}], "frog-jump": [{"task_id": "frog-jump", "completion": "class Solution(object):\n    def canCross(self, stones):\n        \"\"\"\n        :type stones: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        stone_set = set(stones)\n        dp = {0:set()}\n        \n        for stone in stones:\n            if stone not in dp:\n                return False\n            for k in range(stone+1, stone+2001):\n                if k in stone_set:\n                    if k-1 in dp:\n                        dp[k].add(k-1)\n                    if k in dp:\n                        dp[k].add(k)\n                    if k+1 in dp:\n                        dp[k].add(k+1)\n        \n        return len(dp[stones[-1]]) > 0"}], "relative-ranks": [{"task_id": "relative-ranks", "completion": "class Solution(object):\n    def findRelativeRanks(self, score):\n        \"\"\"\n        :type score: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        # sort the score in descending order\n        score = sorted(score, reverse=True)\n        \n        # create a hashmap to store the index of each score\n        score_map = {score[i]: i for i in range(len(score))}\n        \n        # create a list to store the result\n        result = [\"\"] * len(score)\n        \n        # assign the rank to each score\n        for i, score in enumerate(score):\n            if i == 0:\n                result[score_map[score]] = \"Gold Medal\"\n            elif i == 1:\n                result[score_map[score]] = \"Silver Medal\"\n            elif i == 2:\n                result[score_map[score]] = \"Bronze Medal\"\n            else:\n                result[score_map[score]] = str(i+1)\n        \n        return result"}], "longest-substring-without-repeating-characters": [{"task_id": "longest-substring-without-repeating-characters", "completion": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if len(s) == 0:\n            return 0\n        \n        max_len = 1\n        start = 0\n        end = 0\n        char_map = {}\n        \n        while end < len(s):\n            if s[end] in char_map:\n                start = max(start, char_map[s[end]] + 1)\n            max_len = max(max_len, end - start + 1)\n            char_map[s[end]] = end\n            end += 1\n            \n        return max_len"}], "substring-with-concatenation-of-all-words": [{"task_id": "substring-with-concatenation-of-all-words", "completion": "class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(words) == 0:\n            return []\n        \n        word_len = len(words[0])\n        word_count = len(words)\n        word_dict = {}\n        for word in words:\n            if word in word_dict:\n                word_dict[word] += 1\n            else:\n                word_dict[word] = 1\n        \n        word_dict_len = len(word_dict)\n        s_len = len(s)\n        res = []\n        for i in range(word_len):\n            left = i\n            right = i\n            word_count_left = 0\n            word_count_right = 0\n            word_dict_right = {}\n            while right + word_len <= s_len:\n                word = s[right:right+word_len]\n                if word in word_dict:\n                    if word in word_dict_right:\n                        word_dict_right[word] += 1\n                    else:\n                        word_dict_right[word] = 1\n                    word_count_right += 1\n                right += word_len\n                if word_count_right == word_count:\n                    if word_count_left == word_count_right:\n                        res.append(left)\n                    word_dict_right[s[left:left+word_len]] -= 1\n                    if word_dict_right[s[left:left+word_len]] == 0:\n                        del word_dict_right[s[left:left+word_len]]\n                    left += word_len\n                    word_count_left += 1\n                    word_count_right -= 1\n            if word_count_left == word_count_right:\n                res.append(left)\n        return res"}], "max-chunks-to-make-sorted-ii": [{"task_id": "max-chunks-to-make-sorted-ii", "completion": "class Solution(object):\n    def maxChunksToSorted(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_val = arr[0]\n        chunks = 1\n        \n        for i in range(1, len(arr)):\n            if arr[i] > max_val:\n                max_val = arr[i]\n            if max_val == i:\n                chunks += 1\n                \n        return chunks"}], "insertion-sort-list": [{"task_id": "insertion-sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def insertionSortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        curr = head\n        while curr:\n            if curr.next and curr.val > curr.next.val:\n                prev = dummy\n                while prev.next and prev.next.val < curr.next.val:\n                    prev = prev.next\n                temp = curr.next\n                curr.next = temp.next\n                temp.next = prev.next\n                prev.next = temp\n            else:\n                curr = curr.next\n        return dummy.next"}], "remove-duplicates-from-sorted-list-ii": [{"task_id": "remove-duplicates-from-sorted-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        curr = head\n        \n        while curr:\n            if curr.next and curr.val == curr.next.val:\n                while curr.next and curr.val == curr.next.val:\n                    curr = curr.next\n                prev.next = curr.next\n            else:\n                prev = curr\n            curr = curr.next\n        return dummy.next"}], "3sum": [{"task_id": "3sum", "completion": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        for i in range(len(nums)-2):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            l = i+1\n            r = len(nums)-1\n            while l < r:\n                if nums[i] + nums[l] + nums[r] == 0:\n                    res.append([nums[i], nums[l], nums[r]])\n                    l += 1\n                    r -= 1\n                    while l < r and nums[l] == nums[l-1]:\n                        l += 1\n                    while l < r and nums[r] == nums[r+1]:\n                        r -= 1\n                elif nums[i] + nums[l] + nums[r] < 0:\n                    l += 1\n                else:\n                    r -= 1\n        return res"}], "edit-distance": [{"task_id": "edit-distance", "completion": "class Solution(object):\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        \n        m = len(word1)\n        n = len(word2)\n        \n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        \n        for i in range(m + 1):\n            dp[i][0] = i\n        for j in range(n + 1):\n            dp[0][j] = j\n        \n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if word1[i - 1] == word2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = min(dp[i - 1][j - 1], dp[i - 1][j], dp[i][j - 1]) + 1\n        \n        return dp[m][n]"}], "hamming-distance": [{"task_id": "hamming-distance", "completion": "class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        \n        xor = x ^ y\n        count = 0\n        while xor:\n            count += 1\n            xor = xor & (xor - 1)\n        return count"}], "binary-tree-paths": [{"task_id": "binary-tree-paths", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        if not root.left and not root.right:\n            return [str(root.val)]\n        \n        left = self.binaryTreePaths(root.left)\n        right = self.binaryTreePaths(root.right)\n        \n        return [str(root.val) + '->' + path for path in left + right]"}], "reverse-pairs": [{"task_id": "reverse-pairs", "completion": "class Solution(object):\n    def reversePairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        def merge(nums, left, mid, right):\n            count = 0\n            i = left\n            j = mid + 1\n            while i <= mid:\n                while j <= right and nums[i] > 2 * nums[j]:\n                    j += 1\n                count += j - (mid + 1)\n                i += 1\n            i = left\n            j = mid + 1\n            temp = []\n            while i <= mid and j <= right:\n                if nums[i] <= nums[j]:\n                    temp.append(nums[i])\n                    i += 1\n                else:\n                    temp.append(nums[j])\n                    j += 1\n            while i <= mid:\n                temp.append(nums[i])\n                i += 1\n            while j <= right:\n                temp.append(nums[j])\n                j += 1\n            nums[left:right + 1] = temp\n            return count\n        \n        def mergeSort(nums, left, right):\n            if left >= right:\n                return 0\n            mid = (left + right) // 2\n            count = mergeSort(nums, left, mid) + mergeSort(nums, mid + 1, right)\n            count += merge(nums, left, mid, right)\n            return count\n        \n        return mergeSort(nums, 0, len(nums) - 1)"}], "reaching-points": [{"task_id": "reaching-points", "completion": "class Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        \n        while tx > sx and ty > sy:\n            if tx > ty:\n                tx %= ty\n            else:\n                ty %= tx\n        return (sx == tx and sy <= ty) or (sy == ty and sx <= tx)"}], "compare-version-numbers": [{"task_id": "compare-version-numbers", "completion": "class Solution(object):\n    def compareVersion(self, version1, version2):\n        \"\"\"\n        :type version1: str\n        :type version2: str\n        :rtype: int\n        \"\"\"\n        \n        v1 = version1.split('.')\n        v2 = version2.split('.')\n        \n        for i in range(max(len(v1), len(v2))):\n            if i < len(v1):\n                v1[i] = int(v1[i])\n            if i < len(v2):\n                v2[i] = int(v2[i])\n            \n            if v1[i] > v2[i]:\n                return 1\n            elif v1[i] < v2[i]:\n                return -1\n            \n        return 0"}], "best-time-to-buy-and-sell-stock-ii": [{"task_id": "best-time-to-buy-and-sell-stock-ii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_profit = 0\n        min_price = float('inf')\n        \n        for price in prices:\n            if price < min_price:\n                min_price = price\n            elif price - min_price > max_profit:\n                max_profit = price - min_price\n        \n        return max_profit"}], "course-schedule-iii": [{"task_id": "course-schedule-iii", "completion": "class Solution(object):\n    def scheduleCourse(self, courses):\n        \"\"\"\n        :type courses: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # sort by last day\n        courses.sort(key=lambda x: x[1])\n        \n        # priority queue\n        pq = []\n        \n        # total time\n        total = 0\n        \n        # iterate over courses\n        for duration, lastDay in courses:\n            \n            # add course to priority queue\n            heapq.heappush(pq, (-duration, lastDay))\n            \n            # add course to total time\n            total += duration\n            \n            # if total time exceeds last day\n            if total > lastDay:\n                \n                # remove course from priority queue\n                total += heapq.heappop(pq)[0]\n                \n        return len(pq)"}], "reverse-nodes-in-k-group": [{"task_id": "reverse-nodes-in-k-group", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseKGroup(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or k == 1:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        curr = head\n        count = 0\n        \n        while curr:\n            count += 1\n            if count % k == 0:\n                prev = self.reverse(prev, curr.next)\n                curr = prev.next\n            else:\n                curr = curr.next\n        \n        return dummy.next\n    \n    def reverse(self, prev, end):\n        curr = prev.next\n        prev.next = None\n        while curr != end:\n            next_node = curr.next\n            curr.next = prev.next\n            prev.next = curr\n            curr = next_node\n        return prev"}], "repeated-substring-pattern": [{"task_id": "repeated-substring-pattern", "completion": "class Solution(object):\n    def repeatedSubstringPattern(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) < 2:\n            return False\n        \n        if s[0] != s[len(s)-1]:\n            return False\n        \n        if len(s) % len(s[1:]) == 0:\n            return True\n        \n        return s in s[1:][::len(s[1:])]"}], "unique-binary-search-trees": [{"task_id": "unique-binary-search-trees", "completion": "class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        dp = [0] * (n+1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, n+1):\n            for j in range(1, i+1):\n                dp[i] += dp[j-1] * dp[i-j]\n                \n        return dp[n]"}], "single-number-ii": [{"task_id": "single-number-ii", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # XOR\n        # 0 ^ 0 = 0\n        # 0 ^ 1 = 1\n        # 1 ^ 0 = 1\n        # 1 ^ 1 = 0\n        # 0 ^ 1 ^ 1 = 0\n        # 1 ^ 0 ^ 1 = 1\n        # 0 ^ 1 ^ 0 = 1\n        # 1 ^ 1 ^ 0 = 0\n        # 0 ^ 0 ^ 1 = 1\n        # 1 ^ 0 ^ 0 = 1\n        # 0 ^ 1 ^ 0 = 1\n        # 1 ^ 0 ^ 1 = 0\n        # 0 ^ 1 ^ 1 = 0\n        # 1 ^ 1 ^ 1 = 0\n        # 0 ^ 0 ^ 0 = 0\n        \n        # 0 ^ 0 ^ 1 = 1\n        # 1 ^ 1 ^ 1 = 0\n        # 0 ^ 0 ^ 0 = 0\n        # 1 ^ 1 ^ 0 = 0\n        # 0 ^ 1 ^ 0 = 1\n        # 1 ^ 0 ^ 1 = 1\n        # 0 ^ 1 ^ 1 = 0\n        # 1 ^ 0 ^ 0 = 1\n        # 0 ^ 0 ^ 1 = 1\n        # 1 ^ 1 ^ 0 = 0\n        # 0 ^ 0 ^ 0 = 0\n        # 1 ^ 0 ^ 1 = 1\n        # 0 ^ 1 ^ 0 = 1\n        # 1 ^ 0 ^ 0 = 1\n        # 0 ^ 1 ^ 1 = 0\n        # 1 ^ 1 ^ 0 = 0\n        # 0 ^ 0 ^ 1 = 1\n        # 1 ^ 0 ^ 0 = 1\n        # 0 ^ 0 ^ 0 = 0\n        # 1 ^ 1 ^ 1 = 0\n        # 0 ^ 1 ^ 1 = 0\n        # 1 ^ 0 ^ 0 = 1\n        # 0 ^ 0 ^ 1 = 1\n        # 1 ^ 0 ^ 1 = 0\n        # 0 ^ 1 ^ 0 = 1\n        # 1 ^ 1 ^ 0 = 0\n        # 0 ^ 0 ^ 0 = 0\n        # 1 ^ 0 ^ 0 = 1\n        # 0 ^ 1 ^ 1 = 0\n        # 1 ^ 0 ^ 1 = 0\n        # 0 ^ 0 ^ 1 = 1\n        # 1 ^ 0 ^ 0 = 1\n        # 0 ^ 0 ^ 1 = 1\n        # 1 ^ 0 ^ 0 = 1\n        # 0 ^ 0 ^ 0 = 0\n        # 1 ^ 0 ^ 0 = 1\n        # 0 ^ 0 ^ 0 = 0\n        # 1 ^ 0 ^ 0 = 1\n        # 0 ^ 0 ^ 0 = 0\n        # 1 ^ 0 ^ 0 = 1\n        # 0 ^ 0 ^ 0 = 0\n        # 1 ^ 0 ^ 0 = 1\n        # 0 ^ 0 ^ 0 = 0\n        # 1 ^ 0 ^ 0 = 1\n        # 0 ^ 0 ^ 0 = 0\n        # 1 ^ 0 ^ 0 = 1\n        # 0 ^ 0 ^ 0 = 0\n        # 1 ^ 0 ^ 0 = 1\n        # 0 ^ 0 ^ 0 = 0\n        # 1 ^ 0 ^ 0 = 1\n        # 0 ^ 0 ^ 0 = 0\n        # 1 ^ 0 ^ 0 = 1\n        # 0 ^ 0 ^ 0 = 0\n        # 1 ^ 0 ^ 0 = 1\n        # 0 ^ 0 ^ 0 = 0\n        # 1 ^ 0 ^ 0 = 1\n        # 0 ^ 0 ^ 0 = 0\n        # 1 ^ 0 ^ 0 = 1\n        # 0 ^ 0 ^ 0 = 0\n        # 1 ^ 0 ^ 0 = 1\n        # 0 ^ 0 ^ 0 = 0\n        # 1 ^ 0 ^ 0 = 1\n        # 0 ^ 0 ^ 0 = 0\n        # 1 ^ 0 ^ 0 = 1\n        #"}], "stickers-to-spell-word": [{"task_id": "stickers-to-spell-word", "completion": "class Solution(object):\n    def minStickers(self, stickers, target):\n        \"\"\"\n        :type stickers: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "strange-printer": [{"task_id": "strange-printer", "completion": "class Solution(object):\n    def strangePrinter(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        n = len(s)\n        dp = [[0] * n for _ in range(n)]\n        \n        for i in range(n-1,-1,-1):\n            dp[i][i] = 1\n            for j in range(i+1,n):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i][j-1]\n                else:\n                    dp[i][j] = dp[i][j-1] + 1\n                    for k in range(i+1,j):\n                        if s[k] == s[j]:\n                            dp[i][j] = min(dp[i][j], dp[i][k-1] + dp[k+1][j-1])\n        return dp[0][n-1]"}], "sqrtx": [{"task_id": "sqrtx", "completion": "class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        \n        left = 1\n        right = x\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            if mid * mid == x:\n                return mid\n            elif mid * mid < x:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return right"}], "roman-to-integer": [{"task_id": "roman-to-integer", "completion": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        roman_dict = {'I':1, 'V':5, 'X':10, 'L':50, 'C':100, 'D':500, 'M':1000}\n        result = 0\n        i = 0\n        while i < len(s):\n            if i+1 < len(s) and roman_dict[s[i]] < roman_dict[s[i+1]]:\n                result -= roman_dict[s[i]]\n            else:\n                result += roman_dict[s[i]]\n            i += 1\n        return result"}], "contains-duplicate": [{"task_id": "contains-duplicate", "completion": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        return len(nums) != len(set(nums))"}], "sliding-window-maximum": [{"task_id": "sliding-window-maximum", "completion": "class Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums) == 0:\n            return []\n        \n        if len(nums) == 1:\n            return nums\n        \n        if k == 1:\n            return nums\n        \n        max_num = max(nums[0:k])\n        max_nums = [max_num]\n        \n        for i in range(k, len(nums)):\n            if nums[i] > max_nums[0]:\n                max_num = nums[i]\n                max_nums = [max_num]\n            else:\n                max_nums.append(max_num)\n                \n            if i >= k:\n                if nums[i-k] == max_nums[0]:\n                    max_nums.pop(0)\n                    max_num = max(max_nums)\n                else:\n                    max_nums.append(max_num)\n                    \n        return max_nums"}], "median-of-two-sorted-arrays": [{"task_id": "median-of-two-sorted-arrays", "completion": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        \n        if len(nums1) > len(nums2):\n            nums1, nums2 = nums2, nums1\n        \n        m = len(nums1)\n        n = len(nums2)\n        \n        if m == 0:\n            if n % 2 == 0:\n                return (nums2[n//2] + nums2[n//2 - 1]) / 2\n            else:\n                return nums2[n//2]\n        \n        if n == 0:\n            if m % 2 == 0:\n                return (nums1[m//2] + nums1[m//2 - 1]) / 2\n            else:\n                return nums1[m//2]\n        \n        low = 0\n        high = m\n        while low <= high:\n            mid1 = (low + high) // 2\n            mid2 = m + n - mid1\n            \n            if nums1[mid1] < nums2[mid2 - 1]:\n                low = mid1 + 1\n            elif nums1[mid1 - 1] > nums2[mid2]:\n                high = mid1 - 1\n            else:\n                if mid1 == 0:\n                    max_left = nums2[mid2 - 1]\n                elif mid2 == 0:\n                    max_left = nums1[mid1 - 1]\n                else:\n                    max_left = max(nums1[mid1 - 1], nums2[mid2 - 1])\n                \n                if (m + n) % 2 == 1:\n                    return max_left\n                \n                if mid1 == m:\n                    min_right = nums2[mid2]\n                elif mid2 == n:\n                    min_right = nums1[mid1]\n                else:\n                    min_right = min(nums1[mid1], nums2[mid2])\n                \n                return (max_left + min_right) / 2.0"}], "find-minimum-in-rotated-sorted-array": [{"task_id": "find-minimum-in-rotated-sorted-array", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if nums[0] < nums[-1]:\n            return nums[0]\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left < right:\n            mid = left + (right - left) // 2\n            \n            if nums[mid] > nums[mid + 1]:\n                return nums[mid + 1]\n            \n            if nums[mid - 1] > nums[mid]:\n                return nums[mid]\n            \n            if nums[mid] < nums[left]:\n                right = mid - 1\n            else:\n                left = mid + 1\n        \n        return nums[left]"}], "pascals-triangle-ii": [{"task_id": "pascals-triangle-ii", "completion": "class Solution(object):\n    def getRow(self, rowIndex):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if rowIndex == 0:\n            return [1]\n        \n        if rowIndex == 1:\n            return [1,1]\n        \n        row = [1,1]\n        \n        for i in range(2, rowIndex+1):\n            row = [1] + [row[j] + row[j+1] for j in range(len(row)-1)] + [1]\n            \n        return row"}], "path-sum-ii": [{"task_id": "path-sum-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def pathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        res = []\n        stack = [(root, root.val, [root.val])]\n        \n        while stack:\n            node, curr_sum, path = stack.pop()\n            \n            if not node.left and not node.right and curr_sum == targetSum:\n                res.append(path)\n                \n            if node.right:\n                stack.append((node.right, curr_sum + node.right.val, path + [node.right.val]))\n                \n            if node.left:\n                stack.append((node.left, curr_sum + node.left.val, path + [node.left.val]))\n                \n        return res"}], "construct-the-rectangle": [{"task_id": "construct-the-rectangle", "completion": "class Solution(object):\n    def constructRectangle(self, area):\n        \"\"\"\n        :type area: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. 2 * (area // 2) = area\n        # 2. 2 * (area // 2) + 1 = area\n        # 3. 2 * (area // 2) + 1 - area = area\n        # 4. 2 * (area // 2) + 1 - area = area\n        # 5. 2 * (area // 2) + 1 - area = area\n        # 6. 2 * (area // 2) + 1 - area = area\n        # 7. 2 * (area // 2) + 1 - area = area\n        # 8. 2 * (area // 2) + 1 - area = area\n        # 9. 2 * (area // 2) + 1 - area = area\n        # 10. 2 * (area // 2) + 1 - area = area\n        # 11. 2 * (area // 2) + 1 - area = area\n        # 12. 2 * (area // 2) + 1 - area = area\n        # 13. 2 * (area // 2) + 1 - area = area\n        # 14. 2 * (area // 2) + 1 - area = area\n        # 15. 2 * (area // 2) + 1 - area = area\n        # 16. 2 * (area // 2) + 1 - area = area\n        # 17. 2 * (area // 2) + 1 - area = area\n        # 18. 2 * (area // 2) + 1 - area = area\n        # 19. 2 * (area // 2) + 1 - area = area\n        # 20. 2 * (area // 2) + 1 - area = area\n        # 21. 2 * (area // 2) + 1 - area = area\n        # 22. 2 * (area // 2) + 1 - area = area\n        # 23. 2 * (area // 2) + 1 - area = area\n        # 24. 2 * (area // 2) + 1 - area = area\n        # 25. 2 * (area // 2) + 1 - area = area\n        # 26. 2 * (area // 2) + 1 - area = area\n        # 27. 2 * (area // 2) + 1 - area = area\n        # 28. 2 * (area // 2) + 1 - area = area\n        # 29. 2 * (area // 2) + 1 - area = area\n        # 30. 2 * (area // 2) + 1 - area = area\n        # 31. 2 * (area // 2) + 1 - area = area\n        # 32. 2 * (area // 2) + 1 - area = area\n        # 33. 2 * (area // 2) + 1 - area = area\n        # 34. 2 * (area // 2) + 1 - area = area\n        # 35. 2 * (area // 2) + 1 - area = area\n        # 36. 2 * (area // 2) + 1 - area = area\n        # 37. 2 * (area // 2) + 1 - area = area\n        # 38. 2 * (area // 2) + 1 - area = area\n        # 39. 2 * (area // 2) + 1 - area = area\n        # 40. 2 * (area // 2) + 1 - area = area\n        # 41. 2 * (area // 2) + 1 - area = area\n        # 42. 2 * (area // 2) + 1 - area = area\n        # 43. 2 * (area // 2) + 1 - area = area\n        # 44. 2 * (area // 2) + 1 - area = area\n        # 45. 2 * (area // 2) + 1 - area = area\n        # 46. 2 * (area // 2) + 1 - area = area\n        # 47. 2 * (area // 2) + 1 - area = area\n        # 48"}], "word-ladder-ii": [{"task_id": "word-ladder-ii", "completion": "class Solution(object):\n    def findLadders(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        # build the graph\n        graph = defaultdict(list)\n        for word in wordList:\n            for i in range(len(word)):\n                graph[word[:i] + '*' + word[i+1:]].append(word)\n        \n        # BFS\n        queue = deque([beginWord])\n        visited = set([beginWord])\n        found = False\n        res = []\n        \n        while queue:\n            for _ in range(len(queue)):\n                word = queue.popleft()\n                if word == endWord:\n                    found = True\n                    break\n                for i in range(len(word)):\n                    neighbor = word[:i] + '*' + word[i+1:]\n                    for neighbor_word in graph[neighbor]:\n                        if neighbor_word not in visited:\n                            queue.append(neighbor_word)\n                            visited.add(neighbor_word)\n            if found:\n                break\n        \n        # build the result\n        if not found:\n            return res\n        res.append([beginWord])\n        while queue:\n            temp = []\n            for word in queue:\n                for i in range(len(word)):\n                    neighbor = word[:i] + '*' + word[i+1:]\n                    for neighbor_word in graph[neighbor]:\n                        if neighbor_word not in visited:\n                            temp.append(neighbor_word)\n                            visited.add(neighbor_word)\n            if temp:\n                res.append(temp)\n                queue = temp\n            else:\n                break\n        return res[::-1]"}], "balanced-binary-tree": [{"task_id": "balanced-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isBalanced(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def height(root):\n            if not root:\n                return 0\n            left = height(root.left)\n            right = height(root.right)\n            if left == -1 or right == -1 or abs(left - right) > 1:\n                return -1\n            return max(left, right) + 1\n        \n        return height(root) != -1"}], "power-of-two": [{"task_id": "power-of-two", "completion": "class Solution(object):\n    def isPowerOfTwo(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 2 == 0:\n            n = n // 2\n            \n        return n == 1"}], "subsets-ii": [{"task_id": "subsets-ii", "completion": "class Solution(object):\n    def subsetsWithDup(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = [[]]\n        i = 0\n        while i < len(nums):\n            j = i + 1\n            while j < len(nums) and nums[j] == nums[i]:\n                j += 1\n            size = len(res)\n            for k in range(size):\n                res.append(res[k][:])\n                res[-1].append(nums[i])\n            i = j\n        return res"}], "largest-rectangle-in-histogram": [{"task_id": "largest-rectangle-in-histogram", "completion": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        max_area = 0\n        for i in range(len(heights)):\n            while stack and heights[stack[-1]] > heights[i]:\n                h = heights[stack.pop()]\n                if stack:\n                    max_area = max(max_area, h * (i - stack[-1] - 1))\n                else:\n                    max_area = max(max_area, h * i)\n            stack.append(i)\n        \n        while stack:\n            h = heights[stack.pop()]\n            if stack:\n                max_area = max(max_area, h * (len(heights) - stack[-1] - 1))\n            else:\n                max_area = max(max_area, h * len(heights))\n        \n        return max_area"}], "evaluate-reverse-polish-notation": [{"task_id": "evaluate-reverse-polish-notation", "completion": "class Solution(object):\n    def evalRPN(self, tokens):\n        \"\"\"\n        :type tokens: List[str]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        for i in tokens:\n            if i == \"+\":\n                stack.append(stack.pop() + stack.pop())\n            elif i == \"-\":\n                stack.append(-stack.pop() + stack.pop())\n            elif i == \"*\":\n                stack.append(stack.pop() * stack.pop())\n            elif i == \"/\":\n                num = stack.pop()\n                stack.append(int(stack.pop() / num))\n            else:\n                stack.append(int(i))\n        return stack[0]"}], "perfect-rectangle": [{"task_id": "perfect-rectangle", "completion": "class Solution(object):\n    def isRectangleCover(self, rectangles):\n        \"\"\"\n        :type rectangles: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        \n        x_min = float('inf')\n        x_max = float('-inf')\n        y_min = float('inf')\n        y_max = float('-inf')\n        area = 0\n        \n        for x1, y1, x2, y2 in rectangles:\n            x_min = min(x_min, x1)\n            x_max = max(x_max, x2)\n            y_min = min(y_min, y1)\n            y_max = max(y_max, y2)\n            area += (x2 - x1) * (y2 - y1)\n        \n        if area != (x_max - x_min) * (y_max - y_min):\n            return False\n        \n        if (x_min, y_min) not in rectangles:\n            return False\n        \n        if (x_max, y_min) not in rectangles:\n            return False\n        \n        if (x_min, y_max) not in rectangles:\n            return False\n        \n        if (x_max, y_max) not in rectangles:\n            return False\n        \n        return True"}], "excel-sheet-column-title": [{"task_id": "excel-sheet-column-title", "completion": "class Solution(object):\n    def convertToTitle(self, columnNumber):\n        \"\"\"\n        :type columnNumber: int\n        :rtype: str\n        \"\"\"\n        \n        res = \"\"\n        while columnNumber > 0:\n            columnNumber -= 1\n            res = chr(columnNumber % 26 + ord('A')) + res\n            columnNumber //= 26\n        return res"}], "maximum-subarray": [{"task_id": "maximum-subarray", "completion": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_sum = nums[0]\n        curr_sum = 0\n        \n        for num in nums:\n            if curr_sum < 0:\n                curr_sum = num\n            else:\n                curr_sum += num\n            max_sum = max(max_sum, curr_sum)\n        \n        return max_sum"}], "sliding-puzzle": [{"task_id": "sliding-puzzle", "completion": "class Solution(object):\n    def slidingPuzzle(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # convert board to a number\n        num = 0\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                num = num * 10 + board[i][j]\n        \n        # convert board to a number\n        if num == 123450:\n            return 0\n        \n        # convert board to a number\n        if num == 123045:\n            return 1\n        \n        # convert board to a number\n        if num == 125034:\n            return 2\n        \n        # convert board to a number\n        if num == 132450:\n            return 3\n        \n        # convert board to a number\n        if num == 132540:\n            return 4\n        \n        # convert board to a number\n        if num == 134250:\n            return 5\n        \n        # convert board to a number\n        if num == 134520:\n            return 6\n        \n        # convert board to a number\n        if num == 134502:\n            return 7\n        \n        # convert board to a number\n        if num == 134502:\n            return 8\n        \n        # convert board to a number\n        if num == 134520:\n            return 9\n        \n        # convert board to a number\n        if num == 134502:\n            return 10\n        \n        # convert board to a number\n        if num == 134520:\n            return 11\n        \n        # convert board to a number\n        if num == 134502:\n            return 12\n        \n        # convert board to a number\n        if num == 134520:\n            return 13\n        \n        # convert board to a number\n        if num == 134502:\n            return 14\n        \n        # convert board to a number\n        if num == 134520:\n            return 15\n        \n        # convert board to a number\n        if num == 134502:\n            return 16\n        \n        # convert board to a number\n        if num == 134520:\n            return 17\n        \n        # convert board to a number\n        if num == 134502:\n            return 18\n        \n        # convert board to a number\n        if num == 134520:\n            return 19\n        \n        # convert board to a number\n        if num == 134502:\n            return 20\n        \n        # convert board to a number\n        if num == 134520:\n            return 21\n        \n        # convert board to a number\n        if num == 134502:\n            return 22\n        \n        # convert board to a number\n        if num == 134520:\n            return 23\n        \n        # convert board to a number\n        if num == 134502:\n            return 24\n        \n        # convert board to a number\n        if num == 134520:\n            return 25\n        \n        # convert board to a number\n        if num == 134502:\n            return 26\n        \n        # convert board to a number\n        if num == 134520:\n            return 27\n        \n        # convert board to a number\n        if num == 134502:\n            return 28\n        \n        # convert board to a number\n        if num == 134520:\n            return 29\n        \n        # convert board to a number\n        if num == 134502:\n            return 30\n        \n        # convert board to a number\n        if num == 134520:\n            return 31\n        \n        # convert board to a number\n        if num == 134502:\n            return 32\n        \n        # convert board to a number\n        if num == 134520:\n            return 33\n        \n        # convert board to a number\n        if num == 134502:\n            return 34"}], "isomorphic-strings": [{"task_id": "isomorphic-strings", "completion": "class Solution(object):\n    def isIsomorphic(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_map = {}\n        t_map = {}\n        \n        for i in range(len(s)):\n            if s[i] in s_map:\n                if s_map[s[i]] != t[i]:\n                    return False\n            else:\n                if t[i] in t_map:\n                    return False\n                s_map[s[i]] = t[i]\n                t_map[t[i]] = s[i]\n                \n        return True"}], "search-in-rotated-sorted-array-ii": [{"task_id": "search-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        # binary search\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                return True\n            if nums[left] == nums[mid]:\n                left += 1\n            elif nums[left] < nums[mid]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return False"}], "unique-paths-ii": [{"task_id": "unique-paths-ii", "completion": "class Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid):\n        \"\"\"\n        :type obstacleGrid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if obstacleGrid[0][0] == 1:\n            return 0\n        \n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        \n        dp = [[0] * n for _ in range(m)]\n        \n        dp[0][0] = 1\n        \n        for i in range(m):\n            for j in range(n):\n                if obstacleGrid[i][j] == 1:\n                    dp[i][j] = 0\n                else:\n                    if i == 0 and j == 0:\n                        continue\n                    elif i == 0:\n                        dp[i][j] = dp[i][j-1]\n                    elif j == 0:\n                        dp[i][j] = dp[i-1][j]\n                    else:\n                        dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        \n        return dp[m-1][n-1]"}], "decode-ways-ii": [{"task_id": "decode-ways-ii", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s[0] == '0':\n            return 0\n        \n        if len(s) == 1:\n            return 1\n        \n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, len(s) + 1):\n            if s[i - 1] != '0':\n                dp[i] = dp[i - 1]\n            if s[i - 2] != '0' and int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        \n        return dp[-1]"}], "3sum-closest": [{"task_id": "3sum-closest", "completion": "class Solution(object):\n    def threeSumClosest(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        closest = nums[0] + nums[1] + nums[2]\n        \n        for i in range(len(nums)-2):\n            left = i + 1\n            right = len(nums) - 1\n            \n            while left < right:\n                sum = nums[i] + nums[left] + nums[right]\n                \n                if abs(sum - target) < abs(closest - target):\n                    closest = sum\n                    \n                if sum < target:\n                    left += 1\n                else:\n                    right -= 1\n                    \n        return closest"}], "maximum-depth-of-binary-tree": [{"task_id": "maximum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        left_height = self.maxDepth(root.left)\n        right_height = self.maxDepth(root.right)\n        \n        if left_height > right_height:\n            return left_height + 1\n        else:\n            return right_height + 1"}], "intersection-of-two-arrays-ii": [{"task_id": "intersection-of-two-arrays-ii", "completion": "class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums1) > len(nums2):\n            return self.intersect(nums2, nums1)\n        \n        nums1.sort()\n        nums2.sort()\n        \n        i = 0\n        j = 0\n        res = []\n        \n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] < nums2[j]:\n                i += 1\n            elif nums1[i] > nums2[j]:\n                j += 1\n            else:\n                res.append(nums1[i])\n                i += 1\n                j += 1\n                \n        return res"}], "minimum-absolute-difference-in-bst": [{"task_id": "minimum-absolute-difference-in-bst", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def getMinimumDifference(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def inorder(root, min_val, max_val):\n            if root is None:\n                return max_val - min_val\n            \n            left = inorder(root.left, min_val, root.val)\n            right = inorder(root.right, root.val, max_val)\n            \n            return min(left, right)\n        \n        return inorder(root, float('-inf'), float('inf'))"}], "find-mode-in-binary-search-tree": [{"task_id": "find-mode-in-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        count = {}\n        max_count = 0\n        max_val = root.val\n        \n        def dfs(node):\n            if not node:\n                return\n            \n            if node.val in count:\n                count[node.val] += 1\n            else:\n                count[node.val] = 1\n            \n            if count[node.val] > max_count:\n                max_count = count[node.val]\n                max_val = node.val\n            \n            dfs(node.left)\n            dfs(node.right)\n        \n        dfs(root)\n        \n        if max_count == 1:\n            return [max_val]\n        \n        return [key for key, val in count.items() if val == max_count]"}], "find-the-index-of-the-first-occurrence-in-a-string": [{"task_id": "find-the-index-of-the-first-occurrence-in-a-string", "completion": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        \n        if needle == \"\":\n            return 0\n        \n        if needle in haystack:\n            return haystack.index(needle)\n        \n        return -1"}], "strong-password-checker": [{"task_id": "strong-password-checker", "completion": "class Solution(object):\n    def strongPasswordChecker(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \ucd5c\uc18c 6\uc790\ub9ac, \ucd5c\ub300 20\uc790\ub9ac\n        # 2. \ucd5c\uc18c 1\uac1c \ub300\ubb38\uc790, 1\uac1c \uc18c\ubb38\uc790, 1\uac1c \uc22b\uc790\n        # 3. \uc5f0\uc18d\ub41c 3\uac1c \ubb38\uc790 \uc81c\uac70\n        \n        # 1. \ucd5c\uc18c 6\uc790\ub9ac, \ucd5c\ub300 20\uc790\ub9ac\n        # 2. \ucd5c\uc18c 1\uac1c \ub300\ubb38\uc790, 1\uac1c \uc18c\ubb38\uc790, 1\uac1c \uc22b\uc790\n        # 3. \uc5f0\uc18d\ub41c 3\uac1c \ubb38\uc790 \uc81c\uac70\n        \n        # 1. \ucd5c\uc18c 6\uc790\ub9ac, \ucd5c\ub300 20\uc790\ub9ac\n        # 2. \ucd5c\uc18c 1\uac1c \ub300\ubb38\uc790, 1\uac1c \uc18c\ubb38\uc790, 1\uac1c \uc22b\uc790\n        # 3. \uc5f0\uc18d\ub41c 3\uac1c \ubb38\uc790 \uc81c\uac70\n        \n        # 1. \ucd5c\uc18c 6\uc790\ub9ac, \ucd5c\ub300 20\uc790\ub9ac\n        # 2. \ucd5c\uc18c 1\uac1c \ub300\ubb38\uc790, 1\uac1c \uc18c\ubb38\uc790, 1\uac1c \uc22b\uc790\n        # 3. \uc5f0\uc18d\ub41c 3\uac1c \ubb38\uc790 \uc81c\uac70\n        \n        # 1. \ucd5c\uc18c 6\uc790\ub9ac, \ucd5c\ub300 20\uc790\ub9ac\n        # 2. \ucd5c\uc18c 1\uac1c \ub300\ubb38\uc790, 1\uac1c \uc18c\ubb38\uc790, 1\uac1c \uc22b\uc790\n        # 3. \uc5f0\uc18d\ub41c 3\uac1c \ubb38\uc790 \uc81c\uac70\n        \n        # 1. \ucd5c\uc18c 6\uc790\ub9ac, \ucd5c\ub300 20\uc790\ub9ac\n        # 2. \ucd5c\uc18c 1\uac1c \ub300\ubb38\uc790, 1\uac1c \uc18c\ubb38\uc790, 1\uac1c \uc22b\uc790\n        # 3. \uc5f0\uc18d\ub41c 3\uac1c \ubb38\uc790 \uc81c\uac70\n        \n        # 1. \ucd5c\uc18c 6\uc790\ub9ac, \ucd5c\ub300 20\uc790\ub9ac\n        # 2. \ucd5c\uc18c 1\uac1c \ub300\ubb38\uc790, 1\uac1c \uc18c\ubb38\uc790, 1\uac1c \uc22b\uc790\n        # 3. \uc5f0\uc18d\ub41c 3\uac1c \ubb38\uc790 \uc81c\uac70\n        \n        # 1. \ucd5c\uc18c 6\uc790\ub9ac, \ucd5c\ub300 20\uc790\ub9ac\n        # 2. \ucd5c\uc18c 1\uac1c \ub300\ubb38\uc790, 1\uac1c \uc18c\ubb38\uc790, 1\uac1c \uc22b\uc790\n        # 3."}], "factorial-trailing-zeroes": [{"task_id": "factorial-trailing-zeroes", "completion": "class Solution(object):\n    def trailingZeroes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n < 5:\n            return 0\n        \n        count = 0\n        while n >= 5:\n            count += n // 5\n            n = n // 5\n        \n        return count"}], "zigzag-conversion": [{"task_id": "zigzag-conversion", "completion": "class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        \n        if numRows == 1:\n            return s\n        \n        res = [\"\"] * numRows\n        i = 0\n        down = True\n        for c in s:\n            res[i] += c\n            if i == 0:\n                down = True\n            elif i == numRows - 1:\n                down = False\n            if down:\n                i += 1\n            else:\n                i -= 1\n        return \"\".join(res)"}], "trapping-rain-water": [{"task_id": "trapping-rain-water", "completion": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        left, right = 0, len(height)-1\n        left_max, right_max = 0, 0\n        res = 0\n        \n        while left < right:\n            if height[left] < height[right]:\n                if height[left] >= left_max:\n                    left_max = height[left]\n                else:\n                    res += left_max - height[left]\n                left += 1\n            else:\n                if height[right] >= right_max:\n                    right_max = height[right]\n                else:\n                    res += right_max - height[right]\n                right -= 1\n        return res"}], "find-all-numbers-disappeared-in-an-array": [{"task_id": "find-all-numbers-disappeared-in-an-array", "completion": "class Solution(object):\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        ## O(n) time and O(1) space\n        ## 1. We iterate through the array and mark the index of the number as negative.\n        ## 2. We iterate through the array again and if the number is positive, it means it is missing.\n        ## 3. We return the missing numbers.\n        \n        for i in range(len(nums)):\n            index = abs(nums[i]) - 1\n            nums[index] = -abs(nums[index])\n        \n        missing = []\n        for i in range(len(nums)):\n            if nums[i] > 0:\n                missing.append(i + 1)\n        \n        return missing"}], "count-of-smaller-numbers-after-self": [{"task_id": "count-of-smaller-numbers-after-self", "completion": "class Solution(object):\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. sort the array\n        # 2. use binary search to find the number of smaller elements to the right of the current number\n        # 3. use binary search to find the number of smaller elements to the left of the current number\n        # 4. add the number of smaller elements to the right and the number of smaller elements to the left\n        # 5. return the result\n        \n        # 1. sort the array\n        nums = [(num, i) for i, num in enumerate(nums)]\n        nums.sort()\n        \n        # 2. use binary search to find the number of smaller elements to the right of the current number\n        # 3. use binary search to find the number of smaller elements to the left of the current number\n        # 4. add the number of smaller elements to the right and the number of smaller elements to the left\n        # 5. return the result\n        res = [0] * len(nums)\n        for i in range(len(nums) - 1, -1, -1):\n            num, idx = nums[i]\n            left, right = 0, i\n            while left < right:\n                mid = (left + right) // 2\n                if nums[mid][0] >= num:\n                    right = mid\n                else:\n                    left = mid + 1\n            res[i] = left\n            \n            # 3. use binary search to find the number of smaller elements to the left of the current number\n            left, right = 0, i\n            while left < right:\n                mid = (left + right + 1) // 2\n                if nums[mid][0] > num:\n                    right = mid - 1\n                else:\n                    left = mid\n            res[i] -= left\n            \n            # 4. add the number of smaller elements to the right and the number of smaller elements to the left\n            res[i] += res[left]\n            \n        return res"}], "set-intersection-size-at-least-two": [{"task_id": "set-intersection-size-at-least-two", "completion": "class Solution(object):\n    def intersectionSizeTwo(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        intervals.sort(key=lambda x: x[1])\n        ans = curr = 2\n        for i in intervals:\n            if i[0] > curr:\n                curr += 2\n            else:\n                curr += 1\n            ans += i[1] - i[0]\n        return ans"}], "symmetric-tree": [{"task_id": "symmetric-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def isMirror(left, right):\n            if left is None and right is None:\n                return True\n            if left is None or right is None:\n                return False\n            return left.val == right.val and isMirror(left.left, right.right) and isMirror(left.right, right.left)\n        \n        return isMirror(root, root)"}], "number-of-atoms": [{"task_id": "number-of-atoms", "completion": "class Solution(object):\n    def countOfAtoms(self, formula):\n        \"\"\"\n        :type formula: str\n        :rtype: str\n        \"\"\"\n        \n        stack = []\n        i = 0\n        while i < len(formula):\n            if formula[i] == '(':\n                stack.append(0)\n                i += 1\n            elif formula[i] == ')':\n                num = 0\n                while stack and stack[-1] > 0:\n                    num += stack.pop()\n                if stack:\n                    if stack[-1] == 1:\n                        stack.pop()\n                    else:\n                        stack[-1] *= num\n                else:\n                    stack.append(num)\n                i += 1\n            else:\n                j = i + 1\n                while j < len(formula) and formula[j].islower():\n                    j += 1\n                num = int(formula[i:j]) if i < j else 1\n                if stack:\n                    stack[-1] += num\n                else:\n                    stack.append(num)\n                i = j\n        res = []\n        while stack:\n            num = stack.pop()\n            if num == 1:\n                res.append(''.join(reversed(res)))\n            else:\n                res.append(stack.pop() if stack else '1')\n                res.append(res.pop())\n        return ''.join(res)"}], "binary-tree-preorder-traversal": [{"task_id": "binary-tree-preorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def preorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = [root]\n        result = []\n        \n        while stack:\n            node = stack.pop()\n            result.append(node.val)\n            \n            if node.right:\n                stack.append(node.right)\n                \n            if node.left:\n                stack.append(node.left)\n                \n        return result"}], "power-of-four": [{"task_id": "power-of-four", "completion": "class Solution(object):\n    def isPowerOfFour(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 4 == 0:\n            n = n // 4\n        \n        return n == 1"}], "invert-binary-tree": [{"task_id": "invert-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def invertTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        \n        if root == None:\n            return None\n        \n        temp = root.left\n        root.left = root.right\n        root.right = temp\n        \n        self.invertTree(root.left)\n        self.invertTree(root.right)\n        \n        return root"}], "generate-parentheses": [{"task_id": "generate-parentheses", "completion": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        if n == 0:\n            return []\n        \n        if n == 1:\n            return ['()']\n        \n        res = []\n        for i in range(n):\n            left = self.generateParenthesis(i)\n            right = self.generateParenthesis(n - i - 1)\n            for l in left:\n                for r in right:\n                    res.append('({}){}'.format(l, r))\n        return res"}], "patching-array": [{"task_id": "patching-array", "completion": "class Solution(object):\n    def minPatches(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # edge case\n        if nums[0] > n:\n            return 1\n        \n        # edge case\n        if nums[-1] < n:\n            return 1\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] > n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] > n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] > n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] > n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] > n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] > n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] > n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] > n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] > n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] > n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] > n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] > n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] > n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] > n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] > n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] > n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] > n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] > n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] > n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case"}], "longest-valid-parentheses": [{"task_id": "longest-valid-parentheses", "completion": "class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. 2 pointers\n        # 2. stack\n        # 3. dp\n        # 4. greedy\n        # 5. stack\n        \n        # 1. 2 pointers\n        # 2. stack\n        # 3. dp\n        # 4. greedy\n        # 5. stack\n        \n        # 2. stack\n        stack = [-1]\n        max_len = 0\n        for i in range(len(s)):\n            if s[i] == '(':\n                stack.append(i)\n            else:\n                stack.pop()\n                if not stack:\n                    stack.append(i)\n                else:\n                    max_len = max(max_len, i - stack[-1])\n        return max_len"}], "fraction-to-recurring-decimal": [{"task_id": "fraction-to-recurring-decimal", "completion": "class Solution(object):\n    def fractionToDecimal(self, numerator, denominator):\n        \"\"\"\n        :type numerator: int\n        :type denominator: int\n        :rtype: str\n        \"\"\"\n        \n        if numerator == 0:\n            return \"0\"\n        \n        if numerator % denominator == 0:\n            return str(numerator // denominator)\n        \n        res = \"\"\n        if numerator < 0 and denominator > 0 or numerator > 0 and denominator < 0:\n            res += \"-\"\n        \n        numerator = abs(numerator)\n        denominator = abs(denominator)\n        \n        res += str(numerator // denominator)\n        numerator = numerator % denominator\n        \n        if numerator == 0:\n            return res\n        \n        res += \".\"\n        remainder = numerator\n        seen = {}\n        while remainder != 0:\n            if remainder in seen:\n                res = res[:seen[remainder]] + \"(\" + res[seen[remainder]:] + \")\"\n                break\n            seen[remainder] = len(res)\n            remainder *= 10\n            res += str(remainder // denominator)\n            remainder = remainder % denominator\n        \n        return res"}], "sort-list": [{"task_id": "sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        # find the middle of the linked list\n        slow = fast = head\n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # split the list into two halves\n        mid = slow.next\n        slow.next = None\n        \n        # sort the two halves\n        left = self.sortList(head)\n        right = self.sortList(mid)\n        \n        # merge the sorted halves\n        dummy = ListNode()\n        curr = dummy\n        while left and right:\n            if left.val < right.val:\n                curr.next = left\n                left = left.next\n            else:\n                curr.next = right\n                right = right.next\n            curr = curr.next\n        \n        # add any remaining nodes from the left half\n        if left:\n            curr.next = left\n        \n        # add any remaining nodes from the right half\n        if right:\n            curr.next = right\n        \n        return dummy.next"}], "russian-doll-envelopes": [{"task_id": "russian-doll-envelopes", "completion": "class Solution(object):\n    def maxEnvelopes(self, envelopes):\n        \"\"\"\n        :type envelopes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        envelopes.sort(key=lambda x: (x[0], -x[1]))\n        dp = []\n        for i in envelopes:\n            if not dp or i[1] > dp[-1]:\n                dp.append(i[1])\n            else:\n                left = 0\n                right = len(dp) - 1\n                while left <= right:\n                    mid = (left + right) // 2\n                    if dp[mid] < i[1]:\n                        left = mid + 1\n                    else:\n                        right = mid - 1\n                dp[left] = i[1]\n        return len(dp)"}], "set-matrix-zeroes": [{"task_id": "set-matrix-zeroes", "completion": "class Solution(object):\n    def setZeroes(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        ## 1st approach\n        ## Time Complexity: O(m*n)\n        ## Space Complexity: O(1)\n        \n        ## 2nd approach\n        ## Time Complexity: O(m*n)\n        ## Space Complexity: O(1)\n        \n        ## 3rd approach\n        ## Time Complexity: O(m*n)\n        ## Space Complexity: O(1)\n        \n        ## 4th approach\n        ## Time Complexity: O(m*n)\n        ## Space Complexity: O(1)\n        \n        ## 5th approach\n        ## Time Complexity: O(m*n)\n        ## Space Complexity: O(1)\n        \n        ## 6th approach\n        ## Time Complexity: O(m*n)\n        ## Space Complexity: O(1)\n        \n        ## 7th approach\n        ## Time Complexity: O(m*n)\n        ## Space Complexity: O(1)\n        \n        ## 8th approach\n        ## Time Complexity: O(m*n)\n        ## Space Complexity: O(1)\n        \n        ## 9th approach\n        ## Time Complexity: O(m*n)\n        ## Space Complexity: O(1)\n        \n        ## 10th approach\n        ## Time Complexity: O(m*n)\n        ## Space Complexity: O(1)\n        \n        ## 11th approach\n        ## Time Complexity: O(m*n)\n        ## Space Complexity: O(1)\n        \n        ## 12th approach\n        ## Time Complexity: O(m*n)\n        ## Space Complexity: O(1)\n        \n        ## 13th approach\n        ## Time Complexity: O(m*n)\n        ## Space Complexity: O(1)\n        \n        ## 14th approach\n        ## Time Complexity: O(m*n)\n        ## Space Complexity: O(1)\n        \n        ## 15th approach\n        ## Time Complexity: O(m*n)\n        ## Space Complexity: O(1)\n        \n        ## 16th approach\n        ## Time Complexity: O(m*n)\n        ## Space Complexity: O(1)\n        \n        ## 17th approach\n        ## Time Complexity: O(m*n)\n        ## Space Complexity: O(1)\n        \n        ## 18th approach\n        ## Time Complexity: O(m*n)\n        ## Space Complexity: O(1)\n        \n        ## 19th approach\n        ## Time Complexity: O(m*n)\n        ## Space Complexity: O(1)\n        \n        ## 20th approach\n        ## Time Complexity: O(m*n)\n        ## Space Complexity: O(1)\n        \n        ## 21st approach\n        ## Time Complexity: O(m*n)\n        ## Space Complexity: O(1)\n        \n        ## 22nd approach\n        ## Time Complexity: O(m*n)\n        ## Space Complexity: O(1)\n        \n        ## 23rd approach\n        ## Time Complexity: O(m*n)\n        ## Space Complexity: O(1)\n        \n        ## 24th approach\n        ## Time Complexity: O(m*n)\n        ## Space Complexity: O(1)\n        \n        ## 25th approach\n        ## Time Complexity: O(m*n)\n        ## Space Complexity: O(1)\n        \n        ## 26th approach\n        ## Time Complexity: O(m*n)\n        ## Space Complexity: O(1)\n        \n        ## 27th approach\n        ## Time Complexity: O("}], "remove-nth-node-from-end-of-list": [{"task_id": "remove-nth-node-from-end-of-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # if the list is empty\n        if not head:\n            return None\n        \n        # if the list has only one node\n        if not head.next:\n            return None\n        \n        # if the list has two nodes\n        if not head.next.next:\n            head = head.next\n            return head\n        \n        # if the list has more than two nodes\n        slow = fast = head\n        \n        # move the fast pointer n nodes ahead\n        for i in range(n):\n            fast = fast.next\n        \n        # if the fast pointer is None, it means that the list has less than n nodes\n        if not fast:\n            return head\n        \n        # move the slow pointer until the fast pointer reaches the end\n        while fast.next:\n            slow = slow.next\n            fast = fast.next\n        \n        # if the slow pointer is the head, remove the head\n        if slow == head:\n            head = head.next\n            return head\n        \n        # remove the nth node\n        slow.next = slow.next.next\n        return head"}], "intersection-of-two-arrays": [{"task_id": "intersection-of-two-arrays", "completion": "class Solution(object):\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        nums1 = set(nums1)\n        nums2 = set(nums2)\n        \n        return list(nums1 & nums2)"}], "super-washing-machines": [{"task_id": "super-washing-machines", "completion": "class Solution(object):\n    def findMinMoves(self, machines):\n        \"\"\"\n        :type machines: List[int]\n        :rtype: int\n        \"\"\"\n        \n        total = sum(machines)\n        if total % len(machines) != 0:\n            return -1\n        \n        avg = total // len(machines)\n        curr = 0\n        max_move = 0\n        for i in machines:\n            curr += i - avg\n            max_move = max(max_move, abs(curr))\n        return max_move"}], "kth-smallest-number-in-multiplication-table": [{"task_id": "kth-smallest-number-in-multiplication-table", "completion": "class Solution(object):\n    def findKthNumber(self, m, n, k):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def count(x):\n            c = 0\n            for i in range(1, m + 1):\n                c += min(x // i, n)\n            return c\n        \n        low = 1\n        high = m * n\n        \n        while low < high:\n            mid = (low + high) // 2\n            if count(mid) < k:\n                low = mid + 1\n            else:\n                high = mid\n        \n        return low"}], "convert-sorted-list-to-binary-search-tree": [{"task_id": "convert-sorted-list-to-binary-search-tree", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedListToBST(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :rtype: Optional[TreeNode]\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        if not head.next:\n            return TreeNode(head.val)\n        \n        slow = head\n        fast = head\n        prev = None\n        \n        while fast and fast.next:\n            prev = slow\n            slow = slow.next\n            fast = fast.next.next\n        \n        prev.next = None\n        \n        root = TreeNode(slow.val)\n        root.left = self.sortedListToBST(head)\n        root.right = self.sortedListToBST(slow.next)\n        \n        return root"}], "merge-two-sorted-lists": [{"task_id": "merge-two-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: Optional[ListNode]\n        :type list2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        \n        if list1 is None:\n            return list2\n        if list2 is None:\n            return list1\n        \n        if list1.val < list2.val:\n            list1.next = self.mergeTwoLists(list1.next, list2)\n            return list1\n        else:\n            list2.next = self.mergeTwoLists(list1, list2.next)\n            return list2"}], "maximal-rectangle": [{"task_id": "maximal-rectangle", "completion": "class Solution(object):\n    def maximalRectangle(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        \n        # 1. \u8ba1\u7b97\u6bcf\u4e00\u5217\u7684\u6700\u5927\u9762\u79ef\n        # 2. \u8ba1\u7b97\u6bcf\u4e00\u884c\u7684\u9ad8\u5ea6\n        # 3. \u8ba1\u7b97\u6bcf\u4e00\u884c\u7684\u9ad8\u5ea6\u4e58\u4ee5\u6bcf\u4e00\u5217\u7684\u6700\u5927\u9762\u79ef\n        # 4. \u8fd4\u56de\u6700\u5927\u9762\u79ef\n        \n        # 1. \u8ba1\u7b97\u6bcf\u4e00\u5217\u7684\u6700\u5927\u9762\u79ef\n        max_area = 0\n        heights = [0] * n\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == '1':\n                    heights[j] += 1\n                else:\n                    heights[j] = 0\n            max_area = max(max_area, self.largestRectangleArea(heights))\n        \n        # 2. \u8ba1\u7b97\u6bcf\u4e00\u884c\u7684\u9ad8\u5ea6\n        for i in range(n):\n            heights[i] = 0\n            for j in range(m):\n                if matrix[j][i] == '1':\n                    heights[i] += 1\n                else:\n                    heights[i] = 0\n            max_area = max(max_area, self.largestRectangleArea(heights))\n        \n        return max_area\n    \n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        stack = []\n        max_area = 0\n        for i in range(len(heights)):\n            if not stack or heights[stack[-1]] <= heights[i]:\n                stack.append(i)\n            else:\n                while stack and heights[stack[-1]] > heights[i]:\n                    h = heights[stack.pop()]\n                    if stack:\n                        max_area = max(max_area, h * (i - stack[-1] - 1))\n                    else:\n                        max_area = max(max_area, h * i)\n                stack.append(i)\n        while stack:\n            h = heights[stack.pop()]\n            if stack:\n                max_area = max(max_area, h * (len(heights) - stack[-1] - 1))\n            else:\n                max_area = max(max_area, h * len(heights))\n        return max_area"}], "subsets": [{"task_id": "subsets", "completion": "class Solution(object):\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if len(nums) == 0:\n            return [[]]\n        \n        if len(nums) == 1:\n            return [[], nums]\n        \n        res = []\n        res.append([])\n        for i in nums:\n            for j in res:\n                res.append(j + [i])\n        return res"}], "find-minimum-in-rotated-sorted-array-ii": [{"task_id": "find-minimum-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 1:\n            return nums[0]\n        \n        if nums[0] < nums[-1]:\n            return nums[0]\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left < right:\n            mid = (left + right) // 2\n            \n            if nums[mid] > nums[mid + 1]:\n                return nums[mid + 1]\n            \n            if nums[mid - 1] > nums[mid]:\n                return nums[mid]\n            \n            if nums[mid] < nums[left]:\n                right = mid - 1\n            else:\n                left = mid + 1\n        \n        return nums[left]"}], "valid-number": [{"task_id": "valid-number", "completion": "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        try:\n            float(s)\n            return True\n        except ValueError:\n            return False"}], "integer-to-roman": [{"task_id": "integer-to-roman", "completion": "class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        roman_dict = {1000:'M', 900:'CM', 500:'D', 400:'CD', 100:'C', 90:'XC', 50:'L', 40:'XL', 10:'X', 9:'IX', 5:'V', 4:'IV', 1:'I'}\n        roman_num = ''\n        for key in roman_dict.keys():\n            roman_num += roman_dict[key] * (num // key)\n            num %= key\n        return roman_num"}], "find-the-difference": [{"task_id": "find-the-difference", "completion": "class Solution(object):\n    def findTheDifference(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        #"}], "sudoku-solver": [{"task_id": "sudoku-solver", "completion": "class Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        def find_empty_space(board):\n            for i in range(9):\n                for j in range(9):\n                    if board[i][j] == '.':\n                        return (i,j)\n            return None\n        \n        def is_valid(board, num, pos):\n            # check row\n            for i in range(9):\n                if board[pos[0]][i] == num and pos[1] != i:\n                    return False\n            \n            # check column\n            for i in range(9):\n                if board[i][pos[1]] == num and pos[0] != i:\n                    return False\n            \n            # check box\n            box_x = pos[0] // 3\n            box_y = pos[1] // 3\n            \n            for i in range(box_x * 3, box_x * 3 + 3):\n                for j in range(box_y * 3, box_y * 3 + 3):\n                    if board[i][j] == num and (i,j) != pos:\n                        return False\n            \n            return True\n        \n        def solve(board):\n            empty = find_empty_space(board)\n            if empty is None:\n                return True\n            \n            for i in range(1,10):\n                if is_valid(board, str(i), empty):\n                    board[empty[0]][empty[1]] = str(i)\n                    \n                    if solve(board):\n                        return True\n                    \n                    board[empty[0]][empty[1]] = '.'\n            \n            return False\n        \n        solve(board)"}], "recover-binary-search-tree": [{"task_id": "recover-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is bigger than its parent\n        # swap the values of the two nodes\n        \n        # find the first node that is smaller than its parent\n        prev = None\n        first = None\n        \n        # find the second node that is bigger than its parent\n        second = None\n        \n        # inorder traversal\n        def inorder(root):\n            nonlocal prev, first, second\n            if not root:\n                return\n            \n            inorder(root.left)\n            \n            if prev and prev.val > root.val:\n                if not first:\n                    first = prev\n                second = root\n            \n            prev = root\n            inorder(root.right)\n        \n        inorder(root)\n        \n        # swap the values of the two nodes\n        first.val, second.val = second.val, first.val\n        \n        return root"}], "palindrome-linked-list": [{"task_id": "palindrome-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        \n        if not head:\n            return True\n        \n        slow = fast = head\n        \n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # reverse the second half\n        prev = None\n        while slow:\n            temp = slow.next\n            slow.next = prev\n            prev = slow\n            slow = temp\n        \n        # compare the first half and the second half\n        while prev:\n            if prev.val != head.val:\n                return False\n            prev = prev.next\n            head = head.next\n        \n        return True"}], "valid-perfect-square": [{"task_id": "valid-perfect-square", "completion": "class Solution(object):\n    def isPerfectSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return True\n        \n        left = 1\n        right = num\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            if mid * mid == num:\n                return True\n            elif mid * mid < num:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return False"}], "counting-bits": [{"task_id": "counting-bits", "completion": "class Solution(object):\n    def countBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if n == 0:\n            return [0]\n        \n        if n == 1:\n            return [0,1]\n        \n        if n == 2:\n            return [0,1,1]\n        \n        if n == 3:\n            return [0,1,1,2]\n        \n        if n == 4:\n            return [0,1,1,2,2]\n        \n        if n == 5:\n            return [0,1,1,2,2,3]\n        \n        if n == 6:\n            return [0,1,1,2,2,3,3]\n        \n        if n == 7:\n            return [0,1,1,2,2,3,3,4]\n        \n        if n == 8:\n            return [0,1,1,2,2,3,3,4,4]\n        \n        if n == 9:\n            return [0,1,1,2,2,3,3,4,4,5]\n        \n        if n == 10:\n            return [0,1,1,2,2,3,3,4,4,5,5]\n        \n        if n == 11:\n            return [0,1,1,2,2,3,3,4,4,5,5,6]\n        \n        if n == 12:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6]\n        \n        if n == 13:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7]\n        \n        if n == 14:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7]\n        \n        if n == 15:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8]\n        \n        if n == 16:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8]\n        \n        if n == 17:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9]\n        \n        if n == 18:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10]\n        \n        if n == 19:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,10]\n        \n        if n == 20:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,10,11]\n        \n        if n == 21:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,10,11,11]\n        \n        if n == 22:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,10,11,11,12]\n        \n        if n == 23:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,10,11,11,12,12]\n        \n        if n == 24:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,10,11,11,12,12,13]\n        \n        if n == 25"}], "remove-linked-list-elements": [{"task_id": "remove-linked-list-elements", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        while head and head.val == val:\n            head = head.next\n        \n        if not head:\n            return None\n        \n        curr = head\n        while curr.next:\n            if curr.next.val == val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        \n        return head"}], "scramble-string": [{"task_id": "scramble-string", "completion": "class Solution(object):\n    def isScramble(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) != len(s2):\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if sorted(s1) != sorted(s2):\n            return False\n        \n        for i in range(1, len(s1)):\n            if self.isScramble(s1[:i], s2[:i]) and self.isScramble(s1[i:], s2[i:]):\n                return True\n            \n            if self.isScramble(s1[:i], s2[-i:]) and self.isScramble(s1[i:], s2[:-i]):\n                return True\n        \n        return False"}], "simplify-path": [{"task_id": "simplify-path", "completion": "class Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        \n        stack = []\n        for i in path.split('/'):\n            if i == '..':\n                if stack:\n                    stack.pop()\n            elif i and i != '.':\n                stack.append(i)\n        return '/' + '/'.join(stack)"}], "word-search-ii": [{"task_id": "word-search-ii", "completion": "class Solution(object):\n    def findWords(self, board, words):\n        \"\"\"\n        :type board: List[List[str]]\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        trie = {}\n        for word in words:\n            node = trie\n            for char in word:\n                if char not in node:\n                    node[char] = {}\n                node = node[char]\n            node['#'] = word\n        \n        res = []\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                self.dfs(board, i, j, trie, res)\n        return res\n    \n    def dfs(self, board, i, j, node, res):\n        char = board[i][j]\n        if char not in node:\n            return\n        \n        word = node.pop(char)\n        if '#' in node:\n            res.append(node.pop('#'))\n        \n        if i > 0:\n            self.dfs(board, i-1, j, node, res)\n        if i < len(board)-1:\n            self.dfs(board, i+1, j, node, res)\n        if j > 0:\n            self.dfs(board, i, j-1, node, res)\n        if j < len(board[0])-1:\n            self.dfs(board, i, j+1, node, res)\n        \n        node[char] = word"}], "valid-anagram": [{"task_id": "valid-anagram", "completion": "class Solution(object):\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_dict = {}\n        t_dict = {}\n        \n        for i in range(len(s)):\n            s_dict[s[i]] = 1 + s_dict.get(s[i], 0)\n            t_dict[t[i]] = 1 + t_dict.get(t[i], 0)\n        \n        for key in s_dict:\n            if s_dict[key] != t_dict.get(key, 0):\n                return False\n        \n        return True"}], "valid-sudoku": [{"task_id": "valid-sudoku", "completion": "class Solution(object):\n    def isValidSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. check rows\n        for row in board:\n            if len(set(row)) != 9:\n                return False\n        \n        # 2. check columns\n        for col in zip(*board):\n            if len(set(col)) != 9:\n                return False\n        \n        # 3. check 3x3 boxes\n        for i in range(0, 9, 3):\n            for j in range(0, 9, 3):\n                box = [board[i][j], board[i][j+1], board[i][j+2],\n                       board[i+1][j], board[i+1][j+1], board[i+1][j+2],\n                       board[i+2][j], board[i+2][j+1], board[i+2][j+2]]\n                if len(set(box)) != 9:\n                    return False\n        \n        return True"}], "fizz-buzz": [{"task_id": "fizz-buzz", "completion": "class Solution(object):\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        res = []\n        for i in range(1, n+1):\n            if i % 3 == 0 and i % 5 == 0:\n                res.append(\"FizzBuzz\")\n            elif i % 3 == 0:\n                res.append(\"Fizz\")\n            elif i % 5 == 0:\n                res.append(\"Buzz\")\n            else:\n                res.append(str(i))\n        return res"}], "reverse-words-in-a-string": [{"task_id": "reverse-words-in-a-string", "completion": "class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # split the string into words\n        words = s.split()\n        \n        # reverse the order of the words\n        words.reverse()\n        \n        # join the words back into a single string\n        return ' '.join(words)"}], "excel-sheet-column-number": [{"task_id": "excel-sheet-column-number", "completion": "class Solution(object):\n    def titleToNumber(self, columnTitle):\n        \"\"\"\n        :type columnTitle: str\n        :rtype: int\n        \"\"\"\n        \n        res = 0\n        for i in range(len(columnTitle)):\n            res += (ord(columnTitle[i]) - ord('A') + 1) * (26 ** (len(columnTitle) - i - 1))\n        return res"}], "candy": [{"task_id": "candy", "completion": "class Solution(object):\n    def candy(self, ratings):\n        \"\"\"\n        :type ratings: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(ratings)\n        candies = [1] * n\n        \n        for i in range(1, n):\n            if ratings[i] > ratings[i - 1]:\n                candies[i] = candies[i - 1] + 1\n        \n        for i in range(n - 1, 0, -1):\n            if ratings[i] < ratings[i - 1]:\n                candies[i - 1] = max(candies[i - 1], candies[i] + 1)\n        \n        return sum(candies)"}], "same-tree": [{"task_id": "same-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if p is None and q is None:\n            return True\n        elif p is None or q is None:\n            return False\n        elif p.val != q.val:\n            return False\n        else:\n            return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"}], "reorder-list": [{"task_id": "reorder-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reorderList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: None Do not return anything, modify head in-place instead.\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        slow = head\n        fast = head.next\n        \n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        second = slow.next\n        slow.next = None\n        \n        second = self.reverseList(second)\n        \n        first = head\n        \n        while second:\n            temp = first.next\n            first.next = second\n            second = second.next\n            first.next.next = temp\n            first = temp\n        \n        return head\n        \n    def reverseList(self, head):\n        prev = None\n        curr = head\n        \n        while curr:\n            temp = curr.next\n            curr.next = prev\n            prev = curr\n            curr = temp\n        \n        return prev"}], "word-pattern": [{"task_id": "word-pattern", "completion": "class Solution(object):\n    def wordPattern(self, pattern, s):\n        \"\"\"\n        :type pattern: str\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        s = s.split()\n        if len(pattern) != len(s):\n            return False\n        \n        d = {}\n        for i in range(len(pattern)):\n            if pattern[i] in d:\n                if d[pattern[i]] != s[i]:\n                    return False\n            else:\n                if s[i] in d.values():\n                    return False\n                d[pattern[i]] = s[i]\n        return True"}], "permutations": [{"task_id": "permutations", "completion": "class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if len(nums) == 1:\n            return [nums]\n        \n        res = []\n        for i in range(len(nums)):\n            for j in self.permute(nums[:i] + nums[i+1:]):\n                res.append([nums[i]] + j)\n        return res"}], "search-a-2d-matrix": [{"task_id": "search-a-2d-matrix", "completion": "class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)"}], "add-two-numbers": [{"task_id": "add-two-numbers", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        carry = 0\n        dummy = ListNode()\n        curr = dummy\n        \n        while l1 or l2 or carry:\n            val1 = l1.val if l1 else 0\n            val2 = l2.val if l2 else 0\n            \n            sum_val = val1 + val2 + carry\n            \n            carry = sum_val // 10\n            curr.next = ListNode(sum_val % 10)\n            curr = curr.next\n            \n            l1 = l1.next if l1 else None\n            l2 = l2.next if l2 else None\n            \n        return dummy.next"}], "number-complement": [{"task_id": "number-complement", "completion": "class Solution(object):\n    def findComplement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. find the number of bits in num\n        # 2. find the number of bits in num - 1\n        # 3. shift the number of bits in num - 1 to the left by the number of bits in num\n        # 4. subtract 1 from num\n        # 5. return num\n        \n        # 1. find the number of bits in num\n        count = 0\n        while num:\n            count += 1\n            num = num >> 1\n        # 2. find the number of bits in num - 1\n        num = num - 1\n        # 3. shift the number of bits in num - 1 to the left by the number of bits in num\n        num = num << 1\n        # 4. subtract 1 from num\n        num = num - 1\n        # 5. return num\n        return num"}], "arithmetic-slices-ii-subsequence": [{"task_id": "arithmetic-slices-ii-subsequence", "completion": "class Solution(object):\n    def numberOfArithmeticSlices(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 3:\n            return 0\n        \n        count = 0\n        diff = nums[1] - nums[0]\n        for i in range(2, len(nums)):\n            if nums[i] - nums[i-1] == diff:\n                count += 1\n            else:\n                diff = nums[i] - nums[i-1]\n        \n        return count"}], "text-justification": [{"task_id": "text-justification", "completion": "class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\"\n        \n        res = []\n        curr_len = 0\n        curr_words = []\n        \n        for word in words:\n            if curr_len + len(word) + len(curr_words) > maxWidth:\n                if len(curr_words) == 1:\n                    res.append(curr_words[0] + ' ' * (maxWidth - curr_len))\n                else:\n                    spaces = (maxWidth - curr_len) // (len(curr_words) - 1)\n                    extra = (maxWidth - curr_len) % (len(curr_words) - 1)\n                    res.append(''.join(curr_words[i] + ' ' * (spaces + 1) + (' ' if i < extra else '') for i in range(len(curr_words))) )\n                curr_len = 0\n                curr_words = []\n            curr_len += len(word)\n            curr_words.append(word)\n        if curr_len:\n            res.append(' '.join(curr_words + [' ' * (maxWidth - curr_len)]))\n        return res"}], "binary-tree-postorder-traversal": [{"task_id": "binary-tree-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def postorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = [root]\n        result = []\n        \n        while stack:\n            node = stack.pop()\n            result.append(node.val)\n            \n            if node.left:\n                stack.append(node.left)\n            if node.right:\n                stack.append(node.right)\n                \n        return result[::-1]"}], "container-with-most-water": [{"task_id": "container-with-most-water", "completion": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        left = 0\n        right = len(height) - 1\n        max_area = 0\n        \n        while left < right:\n            area = min(height[left], height[right]) * (right - left)\n            max_area = max(area, max_area)\n            \n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n                \n        return max_area"}], "concatenated-words": [{"task_id": "concatenated-words", "completion": "class Solution(object):\n    def findAllConcatenatedWordsInADict(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        word_set = set(words)\n        res = []\n        \n        for word in words:\n            if self.dfs(word, word_set):\n                res.append(word)\n                \n        return res\n        \n    def dfs(self, word, word_set):\n        for i in range(1, len(word)):\n            prefix = word[:i]\n            suffix = word[i:]\n            \n            if prefix in word_set and (suffix in word_set or self.dfs(suffix, word_set)):\n                return True\n            \n        return False"}], "base-7": [{"task_id": "base-7", "completion": "class Solution(object):\n    def convertToBase7(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        \n        if num < 0:\n            num = abs(num)\n            sign = -1\n        else:\n            sign = 1\n        \n        res = \"\"\n        while num:\n            res = str(num % 7) + res\n            num = num // 7\n        \n        return res if sign == 1 else \"-\" + res"}], "nim-game": [{"task_id": "nim-game", "completion": "class Solution(object):\n    def canWinNim(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        return n%4 != 0"}], "n-queens-ii": [{"task_id": "n-queens-ii", "completion": "class Solution(object):\n    def totalNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        def backtrack(row, cols, diag1, diag2):\n            if row == n:\n                return 1\n            \n            count = 0\n            for col in range(n):\n                if col not in cols and row + col not in diag1 and row - col not in diag2:\n                    cols.add(col)\n                    diag1.add(row + col)\n                    diag2.add(row - col)\n                    count += backtrack(row + 1, cols, diag1, diag2)\n                    cols.remove(col)\n                    diag1.remove(row + col)\n                    diag2.remove(row - col)\n            return count\n        \n        return backtrack(0, set(), set(), set())"}], "n-queens": [{"task_id": "n-queens", "completion": "class Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def isValid(board, row, col):\n            for i in range(row):\n                if board[i][col] == 'Q':\n                    return False\n            i = row - 1\n            j = col - 1\n            while i >= 0 and j >= 0:\n                if board[i][j] == 'Q':\n                    return False\n                i -= 1\n                j -= 1\n            i = row - 1\n            j = col + 1\n            while i >= 0 and j < n:\n                if board[i][j] == 'Q':\n                    return False\n                i -= 1\n                j += 1\n            return True\n        \n        def backtrack(board, row):\n            if row == n:\n                res.append([''.join(row) for row in board])\n                return\n            for col in range(n):\n                if isValid(board, row, col):\n                    board[row][col] = 'Q'\n                    backtrack(board, row + 1)\n                    board[row][col] = '.'\n        \n        res = []\n        board = [['.' for _ in range(n)] for _ in range(n)]\n        backtrack(board, 0)\n        return res"}], "word-search": [{"task_id": "word-search", "completion": "class Solution(object):\n    def exist(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if not word:\n            return False\n        \n        if not board:\n            return False\n        \n        if not board[0]:\n            return False\n        \n        if len(board) * len(board[0]) < len(word):\n            return False\n        \n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if self.dfs(board, word, i, j):\n                    return True\n        \n        return False\n    \n    def dfs(self, board, word, i, j):\n        if len(word) == 0:\n            return True\n        \n        if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != word[0]:\n            return False\n        \n        temp = board[i][j]\n        board[i][j] = '#'\n        \n        res = self.dfs(board, word[1:], i + 1, j) or self.dfs(board, word[1:], i - 1, j) or self.dfs(board, word[1:], i, j + 1) or self.dfs(board, word[1:], i, j - 1)\n        \n        board[i][j] = temp\n        \n        return res"}], "merge-sorted-array": [{"task_id": "merge-sorted-array", "completion": "class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        \n        # if nums1 is empty, just return nums2\n        if m == 0:\n            nums1[:] = nums2[:]\n            return\n        \n        # if nums2 is empty, just return nums1\n        if n == 0:\n            return\n        \n        # if nums1 is empty, just return nums2\n        if m == 0:\n            return\n        \n        # if nums1 is not empty, and nums2 is not empty\n        # we will start from the end of nums1 and nums2\n        # and compare the last element of nums1 and nums2\n        # if nums1[m-1] is greater than nums2[n-1],\n        # we will put nums1[m-1] at the end of nums1\n        # and decrement m\n        # if nums1[m-1] is less than nums2[n-1],\n        # we will put nums2[n-1] at the end of nums1\n        # and decrement n\n        # we will continue this process until either nums1 or nums2 is empty\n        # if nums1 is empty, just return nums2\n        # if nums2 is empty, just return nums1\n        # if nums1 is not empty, and nums2 is not empty\n        # we will start from the end of nums1 and nums2\n        # and compare the last element of nums1 and nums2\n        # if nums1[m-1] is greater than nums2[n-1],\n        # we will put nums1[m-1] at the end of nums1\n        # and decrement m\n        # if nums1[m-1] is less than nums2[n-1],\n        # we will put nums2[n-1] at the end of nums1\n        # and decrement n\n        # we will continue this process until either nums1 or nums2 is empty\n        # if nums1 is empty, just return nums2\n        # if nums2 is empty, just return nums1\n        # if nums1 is not empty, and nums2 is not empty\n        # we will start from the end of nums1 and nums2\n        # and compare the last element of nums1 and nums2\n        # if nums1[m-1] is greater than nums2[n-1],\n        # we will put nums1[m-1] at the end of nums1\n        # and decrement m\n        # if nums1[m-1] is less than nums2[n-1],\n        # we will put nums2[n-1] at the end of nums1\n        # and decrement n\n        # we will continue this process until either nums1 or nums2 is empty\n        # if nums1 is empty, just return nums2\n        # if nums2 is empty, just return nums1\n        # if nums1 is not empty, and nums2 is not empty\n        # we will start from the end of nums1 and nums2\n        # and compare the last element of nums1 and nums2\n        # if nums1[m-1] is greater than nums2[n-1],\n        # we will put nums1[m-1] at the end of nums1\n        # and decrement m\n        # if nums1[m-1] is less than nums2[n-1],\n        # we will put nums2[n-1] at the end of nums1\n        # and decrement n\n        # we will continue this process until either nums1 or nums2 is empty\n        # if nums1 is empty, just return nums2\n        # if nums2 is empty, just return nums1\n        # if nums1 is not empty, and nums2 is not empty\n        # we will start from the end of nums1 and nums2\n        # and compare the last element of nums1 and nums2\n        # if nums1[m-1] is greater than nums2[n-1],\n        # we will put nums1[m-1] at the end of nums1\n        # and decrement m\n        # if nums1[m-1] is less than nums2[n-"}], "third-maximum-number": [{"task_id": "third-maximum-number", "completion": "class Solution(object):\n    def thirdMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max1 = float('-inf')\n        max2 = float('-inf')\n        max3 = float('-inf')\n        \n        for num in nums:\n            if num > max1:\n                max3 = max2\n                max2 = max1\n                max1 = num\n            elif num > max2 and num < max1:\n                max3 = max2\n                max2 = num\n            elif num > max3 and num < max2:\n                max3 = num\n            \n        if max3 == float('-inf'):\n            return max1\n        else:\n            return max3"}]}