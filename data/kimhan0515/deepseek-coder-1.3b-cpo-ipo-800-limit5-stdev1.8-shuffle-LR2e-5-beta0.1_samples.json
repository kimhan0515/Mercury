{"spiral-matrix": [{"task_id": "spiral-matrix", "completion": "class Solution(object):\n    def spiralOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not matrix:\n            return []\n        \n        m, n = len(matrix), len(matrix[0])\n        res = []\n        left, right = 0, n-1\n        top, bottom = 0, m-1\n        \n        while left <= right and top <= bottom:\n            for i in range(left, right+1):\n                res.append(matrix[top][i])\n            top += 1\n            \n            for i in range(top, bottom+1):\n                res.append(matrix[i][right])\n            right -= 1\n            \n            if top <= bottom:\n                for i in range(right, left-1, -1):\n                    res.append(matrix[bottom][i])\n                bottom -= 1\n            \n            if left <= right:\n                for i in range(bottom, top-1, -1):\n                    res.append(matrix[i][left])\n                left += 1\n        \n        return res"}], "summary-ranges": [{"task_id": "summary-ranges", "completion": "class Solution(object):\n    def summaryRanges(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        if len(nums) == 0:\n            return []\n        \n        if len(nums) == 1:\n            return [str(nums[0])]\n        \n        start = nums[0]\n        end = nums[0]\n        res = []\n        \n        for i in range(1, len(nums)):\n            if nums[i] == end + 1:\n                end = nums[i]\n            else:\n                if start == end:\n                    res.append(str(start))\n                else:\n                    res.append(str(start) + \"->\" + str(end))\n                start = nums[i]\n                end = nums[i]\n        \n        if start == end:\n            res.append(str(start))\n        else:\n            res.append(str(start) + \"->\" + str(end))\n        \n        return res"}], "distinct-subsequences": [{"task_id": "distinct-subsequences", "completion": "class Solution(object):\n    def numDistinct(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"\n        \n        if len(s) < len(t):\n            return 0\n        \n        dp = [0] * (len(t) + 1)\n        dp[0] = 1\n        \n        for i in range(1, len(s) + 1):\n            for j in range(min(i, len(t)), 0, -1):\n                if s[i - 1] == t[j - 1]:\n                    dp[j] += dp[j - 1]\n        \n        return dp[-1]"}], "first-missing-positive": [{"task_id": "first-missing-positive", "completion": "class Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. mark all negative numbers as 0\n        # 2. mark all numbers in the range [1, n] as 1\n        # 3. iterate through the array and mark the number at nums[i] as -1\n        # 4. iterate through the array again and return the first number that is not marked as -1\n        \n        n = len(nums)\n        \n        for i in range(n):\n            if nums[i] <= 0:\n                nums[i] = n + 1\n        \n        for i in range(n):\n            num = abs(nums[i])\n            if num <= n:\n                nums[num - 1] = -abs(nums[num - 1])\n        \n        for i in range(1, n + 1):\n            if nums[i - 1] > 0:\n                return i"}], "permutation-sequence": [{"task_id": "permutation-sequence", "completion": "class Solution(object):\n    def getPermutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. calculate the factorial of n\n        fact = 1\n        for i in range(1, n):\n            fact *= i\n        \n        # 2. calculate the kth permutation\n        k -= 1\n        res = \"\"\n        nums = [i for i in range(1, n+1)]\n        for i in range(n-1, -1, -1):\n            # 2.1 calculate the number of digits in the current permutation\n            digit = k // fact\n            # 2.2 calculate the digit in the current permutation\n            res += str(nums[digit])\n            # 2.3 remove the digit from the nums\n            nums.remove(nums[digit])\n            # 2.4 update k\n            k %= fact\n            # 2.5 update the factorial\n            fact //= i\n        \n        return res"}], "two-sum-ii-input-array-is-sorted": [{"task_id": "two-sum-ii-input-array-is-sorted", "completion": "class Solution(object):\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        left = 0\n        right = len(numbers) - 1\n        \n        while left < right:\n            if numbers[left] + numbers[right] == target:\n                return [left + 1, right + 1]\n            elif numbers[left] + numbers[right] > target:\n                right -= 1\n            else:\n                left += 1"}], "expression-add-operators": [{"task_id": "expression-add-operators", "completion": "class Solution(object):\n    def addOperators(self, num, target):\n        \"\"\"\n        :type num: str\n        :type target: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def backtrack(num, target, op, res, curr, prev):\n            if not num:\n                if curr == target:\n                    res.append(op)\n                return\n            for i in range(1, len(num)+1):\n                if i == 1 or (num[0] != '0' and i != 1):\n                    curr = curr * 10 + int(num[:i])\n                    backtrack(num[i:], target, op + '*' + num[:i], res, curr * prev, int(num[:i]))\n                    curr = curr - prev * (curr // prev)\n                elif i == 1 and num[0] == '0':\n                    break\n                else:\n                    break\n        \n        res = []\n        backtrack(num, target, '', res, int(num[0]), int(num[0]))\n        return res"}], "sum-root-to-leaf-numbers": [{"task_id": "sum-root-to-leaf-numbers", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def dfs(root, curr_sum):\n            if not root:\n                return 0\n            \n            if not root.left and not root.right:\n                return curr_sum * 10 + root.val\n            \n            return dfs(root.left, curr_sum * 10 + root.val) + dfs(root.right, curr_sum * 10 + root.val)\n        \n        return dfs(root, 0)"}], "license-key-formatting": [{"task_id": "license-key-formatting", "completion": "class Solution(object):\n    def licenseKeyFormatting(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        s = s.replace('-', '').upper()\n        n = len(s)\n        if n <= k:\n            return s\n        return '-'.join(s[i:i+k] for i in range(0, n, k))"}], "gas-station": [{"task_id": "gas-station", "completion": "class Solution(object):\n    def canCompleteCircuit(self, gas, cost):\n        \"\"\"\n        :type gas: List[int]\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if sum(gas) < sum(cost):\n            return -1\n        \n        tank, total, start = 0, 0, 0\n        \n        for i in range(len(gas)):\n            tank += gas[i] - cost[i]\n            if tank < 0:\n                start = i + 1\n                tank = 0\n                \n        return start"}], "burst-balloons": [{"task_id": "burst-balloons", "completion": "class Solution(object):\n    def maxCoins(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums = [1] + nums + [1]\n        n = len(nums)\n        dp = [[0] * n for _ in range(n)]\n        \n        for i in range(n-2, -1, -1):\n            for j in range(i+2, n):\n                dp[i][j] = max(nums[i] * nums[k] * nums[j] + dp[i][k] + dp[k][j] for k in range(i+1, j))\n        \n        return dp[0][n-1]"}], "plus-one": [{"task_id": "plus-one", "completion": "class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        for i in range(len(digits)-1,-1,-1):\n            if digits[i] < 9:\n                digits[i] += 1\n                return digits\n            digits[i] = 0\n        digits.insert(0,1)\n        return digits"}], "regular-expression-matching": [{"task_id": "regular-expression-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        if not p:\n            return not s\n        \n        if len(p) == 1:\n            return s and (s[0] == p[0] or p[0] == '.')\n        \n        if p[1] != '*':\n            return s and (s[0] == p[0] or p[0] == '.') and self.isMatch(s[1:], p[1:])\n        \n        return self.isMatch(s, p[2:]) or (s and (p[0] == s[0] or p[0] == '.') and self.isMatch(s[1:], p))"}], "create-maximum-number": [{"task_id": "create-maximum-number", "completion": "class Solution(object):\n    def maxNumber(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums1) < k:\n            return nums2[:k]\n        if len(nums2) < k:\n            return nums1[:k]\n        \n        if len(nums1) > len(nums2):\n            return self.maxNumber(nums2, nums1, k)\n        \n        if len(nums1) == len(nums2) == k:\n            return sorted(nums1 + nums2)\n        \n        if len(nums1) == 0:\n            return nums2[:k]\n        if len(nums2) == 0:\n            return nums1[:k]\n        \n        if nums1[0] > nums2[0]:\n            return nums1[:k]\n        if nums1[0] < nums2[0]:\n            return nums2[:k]\n        \n        if k == 1:\n            return [max(nums1[0], nums2[0])]\n        \n        if k == len(nums1):\n            return nums2\n        if k == len(nums2):\n            return nums1\n        \n        if nums1[k-1] > nums2[k-1]:\n            return nums1[:k]\n        if nums1[k-1] < nums2[k-1]:\n            return nums2[:k]\n        \n        if nums1[k-1] == nums2[k-1]:\n            return nums1[:k]\n        \n        if nums1[k-2] > nums2[k-2]:\n            return nums1[:k-1] + nums2[k-1:]\n        if nums1[k-2] < nums2[k-2]:\n            return nums2[:k-1] + nums1[k-1:]\n        \n        if nums1[k-2] == nums2[k-2]:\n            return nums1[:k-1] + nums2[k-1:]\n        \n        return nums1[:k]"}], "perfect-number": [{"task_id": "perfect-number", "completion": "class Solution(object):\n    def checkPerfectNumber(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return False\n        \n        sum = 1\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                if i**2 != num:\n                    sum += i + num//i\n                else:\n                    sum += i\n        \n        return sum == num"}], "fibonacci-number": [{"task_id": "fibonacci-number", "completion": "class Solution(object):\n    def fib(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        \n        a = 0\n        b = 1\n        for i in range(2, n+1):\n            c = a + b\n            a = b\n            b = c\n        return b"}], "dungeon-game": [{"task_id": "dungeon-game", "completion": "class Solution(object):\n    def calculateMinimumHP(self, dungeon):\n        \"\"\"\n        :type dungeon: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(dungeon), len(dungeon[0])\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        \n        for i in range(m - 1, -1, -1):\n            for j in range(n - 1, -1, -1):\n                if i == m - 1 and j == n - 1:\n                    dp[i][j] = max(1, 1 - dungeon[i][j])\n                else:\n                    dp[i][j] = max(1, min(dp[i + 1][j], dp[i][j + 1]) - dungeon[i][j])\n        \n        return dp[0][0]"}], "find-k-th-smallest-pair-distance": [{"task_id": "find-k-th-smallest-pair-distance", "completion": "class Solution(object):\n    def smallestDistancePair(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        left, right = 0, nums[-1] - nums[0]\n        \n        while left < right:\n            mid = (left + right) // 2\n            count = 0\n            j = 0\n            for i in range(len(nums)):\n                while nums[i] - nums[j] > mid:\n                    j += 1\n                count += i - j\n            if count >= k:\n                right = mid\n            else:\n                left = mid + 1\n        return left"}], "number-of-segments-in-a-string": [{"task_id": "number-of-segments-in-a-string", "completion": "class Solution(object):\n    def countSegments(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        return len(s.split())"}], "reverse-vowels-of-a-string": [{"task_id": "reverse-vowels-of-a-string", "completion": "class Solution(object):\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n        l, r = 0, len(s) - 1\n        s = list(s)\n        \n        while l < r:\n            if s[l] in vowels and s[r] in vowels:\n                s[l], s[r] = s[r], s[l]\n                l += 1\n                r -= 1\n            elif s[l] not in vowels:\n                l += 1\n            elif s[r] not in vowels:\n                r -= 1\n                \n        return ''.join(s)"}], "longest-consecutive-sequence": [{"task_id": "longest-consecutive-sequence", "completion": "class Solution(object):\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums_set = set(nums)\n        max_len = 0\n        \n        for num in nums:\n            if num - 1 not in nums_set:\n                curr_num = num\n                curr_len = 1\n                \n                while curr_num + 1 in nums_set:\n                    curr_num += 1\n                    curr_len += 1\n                    \n                max_len = max(max_len, curr_len)\n                \n        return max_len"}], "missing-number": [{"task_id": "missing-number", "completion": "class Solution(object):\n    def missingNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## O(n) time and O(1) space\n        ## XOR\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 = 0\n        ## 0 ^ 1 ^ 1 ^ 2 ^ 2 ^ 3 ^ 3 ^ 4 ^ 4 ^ 5 ^ 5 ^ 6 ^ 6 ^ 7 ^ 7 ^ 8 = 0\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 = 0\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 = 0\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10 = 0\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10 ^ 11 = 0\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10 ^ 11 ^ 12 = 0\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10 ^ 11 ^ 12 ^ 13 = 0\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10 ^ 11 ^ 12 ^ 13 ^ 14 = 0\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10 ^ 11 ^ 12 ^ 13 ^ 14 ^ 15 = 0\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10 ^ 11 ^ 12 ^ 13 ^ 14 ^ 15 ^ 16 = 0\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10 ^ 11 ^ 12 ^ 13 ^ 14 ^ 15 ^ 16 ^ 17 = 0\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10 ^ 11 ^ 12 ^ 13 ^ 14 ^ 15 ^ 16 ^ 17 ^ 18 = 0\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10 ^ 11 ^ 12 ^ 13 ^ 14 ^ 15 ^ 16 ^ 17 ^ 18 ^ 19 = 0\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10 ^ 11 ^ 12 ^ 13 ^ 14 ^ 15 ^ 16 ^ 17 ^ 18 ^ 19 ^ 20 = 0\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10 ^ 11 ^ 12 ^ 13 ^ 14 ^ 15 ^ 16 ^ 17 ^ 18 ^ 19 ^ 20 ^ 21 = 0\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10 ^ 11 ^ 12 ^ 13 ^ 14 ^ 15 ^ 16 ^ 17 ^ 18 ^ 19 ^ 20 ^ 21 ^ 22 = 0\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9"}], "word-ladder": [{"task_id": "word-ladder", "completion": "class Solution(object):\n    def ladderLength(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\"\n        \n        if endWord not in wordList:\n            return 0\n        \n        wordList = set(wordList)\n        queue = collections.deque([beginWord])\n        level = 1\n        \n        while queue:\n            level += 1\n            for _ in range(len(queue)):\n                word = queue.popleft()\n                for i in range(len(word)):\n                    for c in string.ascii_lowercase:\n                        new_word = word[:i] + c + word[i+1:]\n                        if new_word == endWord:\n                            return level\n                        if new_word in wordList:\n                            queue.append(new_word)\n                            wordList.remove(new_word)\n        return 0"}], "add-binary": [{"task_id": "add-binary", "completion": "class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        \n        if len(a) < len(b):\n            a, b = b, a\n        \n        carry = 0\n        i = len(a) - 1\n        j = len(b) - 1\n        res = ''\n        \n        while i >= 0:\n            if j >= 0:\n                carry += int(a[i]) + int(b[j])\n            else:\n                carry += int(a[i])\n            res = str(carry % 2) + res\n            carry //= 2\n            i -= 1\n            j -= 1\n        \n        if carry:\n            res = '1' + res\n        \n        return res"}], "find-first-and-last-position-of-element-in-sorted-array": [{"task_id": "find-first-and-last-position-of-element-in-sorted-array", "completion": "class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums) == 0:\n            return [-1, -1]\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left < right:\n            mid = (left + right) // 2\n            if nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid\n        \n        if nums[left] != target:\n            return [-1, -1]\n        \n        left = left + 1\n        right = len(nums) - 1\n        \n        while left < right:\n            mid = (left + right) // 2 + 1\n            if nums[mid] > target:\n                right = mid - 1\n            else:\n                left = mid\n        \n        return [left, right]"}], "remove-duplicates-from-sorted-array": [{"task_id": "remove-duplicates-from-sorted-array", "completion": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 0:\n            return 0\n        \n        i = 0\n        for j in range(1, len(nums)):\n            if nums[j] != nums[i]:\n                i += 1\n                nums[i] = nums[j]\n        \n        return i + 1"}], "jump-game-ii": [{"task_id": "jump-game-ii", "completion": "class Solution(object):\n    def jump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 1:\n            return 0\n        \n        max_reach = nums[0]\n        jumps = 1\n        cur_reach = 0\n        \n        for i in range(1, len(nums)):\n            if i > cur_reach:\n                jumps += 1\n                cur_reach = max_reach\n            max_reach = max(max_reach, i + nums[i])\n        \n        return jumps"}], "best-time-to-buy-and-sell-stock-iv": [{"task_id": "best-time-to-buy-and-sell-stock-iv", "completion": "class Solution(object):\n    def maxProfit(self, k, prices):\n        \"\"\"\n        :type k: int\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if k >= len(prices)//2:\n            return sum(max(0, prices[i]-prices[i-1]) for i in range(1, len(prices)))\n        \n        buy = [float('-inf')]*k\n        sell = [0]*k\n        \n        for price in prices:\n            for i in range(k):\n                buy[i] = max(buy[i], sell[i-1]-price)\n                sell[i] = max(sell[i], buy[i]+price)\n                \n        return sell[-1]"}], "convert-a-number-to-hexadecimal": [{"task_id": "convert-a-number-to-hexadecimal", "completion": "class Solution(object):\n    def toHex(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return '0'\n        \n        if num < 0:\n            num = 2**32 + num\n        \n        hex_dict = {10:'a', 11:'b', 12:'c', 13:'d', 14:'e', 15:'f'}\n        hex_str = ''\n        \n        while num > 0:\n            remainder = num % 16\n            if remainder < 10:\n                hex_str = str(remainder) + hex_str\n            else:\n                hex_str = hex_dict[remainder] + hex_str\n            num = num // 16\n        \n        return hex_str"}], "first-unique-character-in-a-string": [{"task_id": "first-unique-character-in-a-string", "completion": "class Solution(object):\n    def firstUniqChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # create a hashmap to store the frequency of each character\n        # create a list to store the indices of the first occurence of each character\n        # iterate through the string and update the hashmap and list\n        # if the character is not in the hashmap, add it to the hashmap with a frequency of 1\n        # if the character is in the hashmap, update its frequency to 2\n        # iterate through the list and return the first index of the first occurence of the character with a frequency of 1\n        # if all characters have a frequency of 1, return -1\n        \n        hashmap = {}\n        list = []\n        \n        for i in range(len(s)):\n            if s[i] not in hashmap:\n                hashmap[s[i]] = 1\n                list.append(i)\n            else:\n                hashmap[s[i]] += 1\n        \n        if len(hashmap) == len(s):\n            return -1\n        \n        return list[0]"}], "contains-duplicate-iii": [{"task_id": "contains-duplicate-iii", "completion": "class Solution(object):\n    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff):\n        \"\"\"\n        :type nums: List[int]\n        :type indexDiff: int\n        :type valueDiff: int\n        :rtype: bool\n        \"\"\"\n        \n        if len(nums) < 2:\n            return False\n        \n        if valueDiff < 0:\n            return False\n        \n        if indexDiff < 0:\n            indexDiff = len(nums) + indexDiff\n        \n        if indexDiff > len(nums) - 1:\n            indexDiff = len(nums) - 1\n        \n        if valueDiff > len(nums) * 2**31 - 1:\n            valueDiff = len(nums) * 2**31 - 1\n        \n        s = set()\n        \n        for i in range(len(nums)):\n            if nums[i] - valueDiff in s:\n                return True\n            \n            if nums[i] + valueDiff in s:\n                return True\n            \n            if nums[i] - valueDiff in s:\n                return True\n            \n            if nums[i] + valueDiff in s:\n                return True\n            \n            s.add(nums[i])\n            \n            if i >= indexDiff:\n                s.remove(nums[i - indexDiff])\n        \n        return False"}], "sort-colors": [{"task_id": "sort-colors", "completion": "class Solution(object):\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2"}], "max-consecutive-ones": [{"task_id": "max-consecutive-ones", "completion": "class Solution(object):\n    def findMaxConsecutiveOnes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_count = 0\n        curr_count = 0\n        \n        for num in nums:\n            if num == 1:\n                curr_count += 1\n            else:\n                max_count = max(max_count, curr_count)\n                curr_count = 0\n                \n        return max(max_count, curr_count)"}], "count-complete-tree-nodes": [{"task_id": "count-complete-tree-nodes", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def countNodes(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        left = self.countNodes(root.left)\n        right = self.countNodes(root.right)\n        \n        if left == 0 and right == 0:\n            return 1\n        \n        return 1 + left + right"}], "add-strings": [{"task_id": "add-strings", "completion": "class Solution(object):\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        if len(num1) < len(num2):\n            num1, num2 = num2, num1\n        \n        num1, num2 = num1[::-1], num2[::-1]\n        \n        carry = 0\n        res = []\n        \n        for i in range(len(num1)):\n            if i < len(num2):\n                val = int(num1[i]) + int(num2[i]) + carry\n            else:\n                val = int(num1[i]) + carry\n            \n            carry = val // 10\n            res.append(str(val % 10))\n        \n        if carry:\n            res.append(str(carry))\n        \n        return ''.join(res[::-1])"}], "basic-calculator": [{"task_id": "basic-calculator", "completion": "class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        num = 0\n        sign = 1\n        for i in range(len(s)):\n            if s[i] == ' ':\n                continue\n            elif s[i] == '+':\n                num += sign * stack.pop()\n                sign = 1\n            elif s[i] == '-':\n                num += sign * stack.pop()\n                sign = -1\n            elif s[i] == '(':\n                stack.append(num)\n                num = 0\n                sign = 1\n            elif s[i] == ')':\n                num += sign * stack.pop()\n            else:\n                num = num * 10 + int(s[i])\n        return num + sign * stack.pop()"}], "ipo": [{"task_id": "ipo", "completion": "class Solution(object):\n    def findMaximizedCapital(self, k, w, profits, capital):\n        \"\"\"\n        :type k: int\n        :type w: int\n        :type profits: List[int]\n        :type capital: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # sort capital and profits\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # sort capital and profits\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # sort capital and profits\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # sort capital and profits\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # sort capital and profits\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # sort capital and profits\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # sort capital and profits\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # sort capital and profits\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # sort capital and profits\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # sort capital and profits\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # sort capital and profits\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # sort capital and profits\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # sort capital and profits\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # sort capital and profits\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # sort capital and profits\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # sort capital and profits\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # sort capital and profits\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # sort capital and profits\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # sort capital and profits\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # sort capital and profits\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # sort capital and profits\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # sort capital and profits\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # sort capital and profits\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # sort capital and profits\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # sort capital and profits\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # sort capital and profits\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # sort capital and profits\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # sort capital and profits\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # sort capital and profits\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # sort capital and profits\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # sort capital and profits\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy"}], "valid-parentheses": [{"task_id": "valid-parentheses", "completion": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        stack = []\n        for i in s:\n            if i == '(':\n                stack.append(')')\n            elif i == '{':\n                stack.append('}')\n            elif i == '[':\n                stack.append(']')\n            elif stack and stack[-1] == i:\n                stack.pop()\n            else:\n                return False\n        return len(stack) == 0"}], "next-permutation": [{"task_id": "next-permutation", "completion": "class Solution(object):\n    def nextPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # find the first number that is smaller than the number to its right\n        # find the number that is bigger than the number to its right\n        # swap the two numbers\n        # reverse the numbers to the right of the number\n        \n        # find the first number that is smaller than the number to its right\n        i = len(nums) - 2\n        while i >= 0 and nums[i] >= nums[i+1]:\n            i -= 1\n        \n        # if the number is the last permutation, then reverse the whole array\n        if i == -1:\n            nums.reverse()\n            return\n        \n        # find the number that is bigger than the number to its right\n        j = len(nums) - 1\n        while nums[j] <= nums[i]:\n            j -= 1\n        \n        # swap the two numbers\n        nums[i], nums[j] = nums[j], nums[i]\n        \n        # reverse the numbers to the right of the number\n        nums[i+1:] = nums[i+1:][::-1]"}], "contains-duplicate-ii": [{"task_id": "contains-duplicate-ii", "completion": "class Solution(object):\n    def containsNearbyDuplicate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        \n        if len(nums) <= 1:\n            return False\n        \n        if k == 0:\n            return False\n        \n        if len(nums) == 2:\n            return nums[0] == nums[1]\n        \n        if len(nums) == 3:\n            return nums[0] == nums[1] or nums[1] == nums[2]\n        \n        if len(nums) == 4:\n            return nums[0] == nums[1] or nums[1] == nums[2] or nums[2] == nums[3]\n        \n        if len(nums) == 5:\n            return nums[0] == nums[1] or nums[1] == nums[2] or nums[2] == nums[3] or nums[3] == nums[4]\n        \n        if len(nums) == 6:\n            return nums[0] == nums[1] or nums[1] == nums[2] or nums[2] == nums[3] or nums[3] == nums[4] or nums[4] == nums[5]\n        \n        if len(nums) == 7:\n            return nums[0] == nums[1] or nums[1] == nums[2] or nums[2] == nums[3] or nums[3] == nums[4] or nums[4] == nums[5] or nums[5] == nums[6]\n        \n        if len(nums) == 8:\n            return nums[0] == nums[1] or nums[1] == nums[2] or nums[2] == nums[3] or nums[3] == nums[4] or nums[4] == nums[5] or nums[5] == nums[6] or nums[6] == nums[7]\n        \n        if len(nums) == 9:\n            return nums[0] == nums[1] or nums[1] == nums[2] or nums[2] == nums[3] or nums[3] == nums[4] or nums[4] == nums[5] or nums[5] == nums[6] or nums[6] == nums[7] or nums[7] == nums[8]\n        \n        if len(nums) == 10:\n            return nums[0] == nums[1] or nums[1] == nums[2] or nums[2] == nums[3] or nums[3] == nums[4] or nums[4] == nums[5] or nums[5] == nums[6] or nums[6] == nums[7] or nums[7] == nums[8] or nums[8] == nums[9]\n        \n        if len(nums) == 11:\n            return nums[0] == nums[1] or nums[1] == nums[2] or nums[2] == nums[3] or nums[3] == nums[4] or nums[4] == nums[5] or nums[5] == nums[6] or nums[6] == nums[7] or nums[7] == nums[8] or nums[8] == nums[9] or nums[9] == nums[10]\n        \n        if len(nums) == 12:\n            return nums[0] == nums[1] or nums[1] == nums[2] or nums[2] == nums[3] or nums[3] == nums[4] or nums[4] == nums[5] or nums[5] == nums[6] or nums[6] == nums[7] or nums[7] == nums[8] or nums[8] == nums[9] or nums[9] == nums[10] or nums[10] == nums[11]\n        \n        if len(nums) == 13:\n            return nums[0] == nums[1] or nums[1"}], "maximum-gap": [{"task_id": "maximum-gap", "completion": "class Solution(object):\n    def maximumGap(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 2:\n            return 0\n        \n        nums.sort()\n        max_diff = 0\n        for i in range(1, len(nums)):\n            max_diff = max(max_diff, nums[i] - nums[i-1])\n        \n        return max_diff"}], "binary-tree-level-order-traversal": [{"task_id": "binary-tree-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        q = [root]\n        res = []\n        \n        while q:\n            level = []\n            for i in range(len(q)):\n                node = q.pop(0)\n                level.append(node.val)\n                if node.left:\n                    q.append(node.left)\n                if node.right:\n                    q.append(node.right)\n            res.append(level)\n        return res"}], "couples-holding-hands": [{"task_id": "couples-holding-hands", "completion": "class Solution(object):\n    def minSwapsCouples(self, row):\n        \"\"\"\n        :type row: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(row)\n        if n == 2:\n            return 0\n        \n        couples = [i//2 for i in row]\n        couples.sort()\n        \n        res = 0\n        for i in range(1, n//2):\n            if couples[i] != couples[i-1]:\n                if couples[i] == couples[i-1] + 1:\n                    res += 1\n                else:\n                    res += 2\n        return res"}], "interleaving-string": [{"task_id": "interleaving-string", "completion": "class Solution(object):\n    def isInterleave(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) + len(s2) != len(s3):\n            return False\n        \n        if s1 == s3 or s2 == s3:\n            return True\n        \n        if s1 == s2:\n            return s1 == s3\n        \n        dp = [[False] * (len(s2) + 1) for _ in range(len(s1) + 1)]\n        dp[0][0] = True\n        \n        for i in range(1, len(s1) + 1):\n            dp[i][0] = dp[i - 1][0] and s1[i - 1] == s3[i - 1]\n        \n        for j in range(1, len(s2) + 1):\n            dp[0][j] = dp[0][j - 1] and s2[j - 1] == s3[j - 1]\n        \n        for i in range(1, len(s1) + 1):\n            for j in range(1, len(s2) + 1):\n                dp[i][j] = (dp[i - 1][j] and s1[i - 1] == s3[i + j - 1]) or (dp[i][j - 1] and s2[j - 1] == s3[i + j - 1])\n        \n        return dp[-1][-1]"}], "assign-cookies": [{"task_id": "assign-cookies", "completion": "class Solution(object):\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        \n        g.sort()\n        s.sort()\n        \n        i = 0\n        j = 0\n        \n        while i < len(g) and j < len(s):\n            if s[j] >= g[i]:\n                i += 1\n            j += 1\n        \n        return i"}], "keyboard-row": [{"task_id": "keyboard-row", "completion": "class Solution(object):\n    def findWords(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        row1 = set('qwertyuiop')\n        row2 = set('asdfghjkl')\n        row3 = set('zxcvbnm')\n        \n        res = []\n        \n        for word in words:\n            if word[0] in row1:\n                if set(word) <= row1:\n                    res.append(word)\n            elif word[0] in row2:\n                if set(word) <= row2:\n                    res.append(word)\n            else:\n                if set(word) <= row3:\n                    res.append(word)\n                    \n        return res"}], "reverse-linked-list-ii": [{"task_id": "reverse-linked-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseBetween(self, head, left, right):\n        \"\"\"\n        :type head: ListNode\n        :type left: int\n        :type right: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if left == right:\n            return head\n        \n        dummy = ListNode(0, head)\n        prev = dummy\n        curr = head\n        \n        for i in range(left - 1):\n            prev = curr\n            curr = curr.next\n            \n        prev.next = None\n        \n        tail = curr\n        \n        for i in range(right - left):\n            next = curr.next\n            curr.next = next.next\n            next.next = prev.next\n            prev.next = next\n            \n        return dummy.next"}], "shortest-palindrome": [{"task_id": "shortest-palindrome", "completion": "class Solution(object):\n    def shortestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # find the longest palindrome substring\n        # reverse the string and add it to the end of the original string\n        # if the original string ends with the reversed string, then the original string is a palindrome\n        # if the original string does not end with the reversed string, then the original string is not a palindrome\n        # if the original string ends with the reversed string, then the original string is a palindrome\n        # if the original string does not end with the reversed string, then the original string is not a palindrome\n        # if the original string ends with the reversed string, then the original string is a palindrome\n        # if the original string does not end with the reversed string, then the original string is not a palindrome\n        # if the original string ends with the reversed string, then the original string is a palindrome\n        # if the original string does not end with the reversed string, then the original string is not a palindrome\n        # if the original string ends with the reversed string, then the original string is a palindrome\n        # if the original string does not end with the reversed string, then the original string is not a palindrome\n        # if the original string ends with the reversed string, then the original string is a palindrome\n        # if the original string does not end with the reversed string, then the original string is not a palindrome\n        # if the original string ends with the reversed string, then the original string is a palindrome\n        # if the original string does not end with the reversed string, then the original string is not a palindrome\n        # if the original string ends with the reversed string, then the original string is a palindrome\n        # if the original string does not end with the reversed string, then the original string is not a palindrome\n        # if the original string ends with the reversed string, then the original string is a palindrome\n        # if the original string does not end with the reversed string, then the original string is not a palindrome\n        # if the original string ends with the reversed string, then the original string is a palindrome\n        # if the original string does not end with the reversed string, then the original string is not a palindrome\n        # if the original string ends with the reversed string, then the original string is a palindrome\n        # if the original string does not end with the reversed string, then the original string is not a palindrome\n        # if the original string ends with the reversed string, then the original string is a palindrome\n        # if the original string does not end with the reversed string, then the original string is not a palindrome\n        # if the original string ends with the reversed string, then the original string is a palindrome\n        # if the original string does not end with the reversed string, then the original string is not a palindrome\n        # if the original string ends with the reversed string, then the original string is a palindrome\n        # if the original string does not end with the reversed string, then the original string is not a palindrome\n        # if the original string ends with the reversed string, then the original string is a palindrome\n        # if the original string does not end with the reversed string, then the original string is not a palindrome\n        # if the original string ends with the reversed string, then the original string is a palindrome\n        # if the original string does not end with the reversed string, then the original string is not a palindrome\n        # if the original string ends with the reversed string, then the original string is a palindrome\n        # if the original string does not end with the reversed string, then the original string is not a palindrome\n        # if the original string ends with the reversed string, then the original string is a palindrome\n        # if the original string does not end with the reversed string, then the original string is not a palindrome\n        # if the original string ends with the reversed string, then the original string is a palindrome\n        # if the original string does not end with the reversed string, then the original string is not a palindrome\n        # if the original string ends with the reversed string, then the original string is a palindrome\n        # if the original string does not end with the reversed string, then the original string is not a palindrome\n        # if the original string ends with the reversed string, then the original string"}], "minimum-window-substring": [{"task_id": "minimum-window-substring", "completion": "class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        if len(s) < len(t):\n            return \"\"\n        \n        if len(s) == len(t):\n            return s if s == t else \"\"\n        \n        t_dict = {}\n        for c in t:\n            if c not in t_dict:\n                t_dict[c] = 1\n            else:\n                t_dict[c] += 1\n        \n        left = 0\n        right = 0\n        min_len = len(s) + 1\n        min_left = 0\n        min_right = 0\n        window_dict = {}\n        count = 0\n        \n        while right < len(s):\n            if s[right] in t_dict:\n                if s[right] not in window_dict:\n                    window_dict[s[right]] = 1\n                else:\n                    window_dict[s[right]] += 1\n                if window_dict[s[right]] == t_dict[s[right]]:\n                    count += 1\n            \n            while count == len(t_dict):\n                if right - left + 1 < min_len:\n                    min_len = right - left + 1\n                    min_left = left\n                    min_right = right\n                \n                if s[left] in window_dict:\n                    if window_dict[s[left]] == t_dict[s[left]]:\n                        count -= 1\n                    window_dict[s[left]] -= 1\n                left += 1\n            \n            right += 1\n        \n        return s[min_left:min_right + 1] if min_len != len(s) + 1 else \"\""}], "self-crossing": [{"task_id": "self-crossing", "completion": "class Solution(object):\n    def isSelfCrossing(self, distance):\n        \"\"\"\n        :type distance: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        if len(distance) < 4:\n            return False\n        \n        if distance[0] >= distance[3] and distance[1] <= distance[2]:\n            return True\n        \n        if distance[0] <= distance[3] and distance[1] >= distance[2]:\n            return True\n        \n        if distance[0] > distance[3] and distance[1] == distance[2]:\n            return True\n        \n        if distance[0] == distance[3] and distance[1] < distance[2] and distance[2] >= distance[5]:\n            return True\n        \n        if distance[0] < distance[3] and distance[1] == distance[2] and distance[2] <= distance[5]:\n            return True\n        \n        if distance[0] > distance[3] and distance[1] < distance[2] and distance[5] >= distance[4]:\n            return True\n        \n        return False"}], "remove-duplicates-from-sorted-list": [{"task_id": "remove-duplicates-from-sorted-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return head\n        \n        curr = head\n        while curr.next:\n            if curr.val == curr.next.val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        return head"}], "longest-palindrome": [{"task_id": "longest-palindrome", "completion": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # create a hashmap to store the frequency of each character\n        # iterate through the hashmap and add the max of odd and even values to the result\n        # if the hashmap has an odd value, add 1 to the result\n        # return the result\n        \n        hashmap = {}\n        result = 0\n        \n        for char in s:\n            if char not in hashmap:\n                hashmap[char] = 1\n            else:\n                hashmap[char] += 1\n        \n        for val in hashmap.values():\n            if val % 2 == 0:\n                result += val\n            else:\n                result += val - 1\n        \n        if result < len(s):\n            result += 1\n        \n        return result"}], "construct-binary-tree-from-inorder-and-postorder-traversal": [{"task_id": "construct-binary-tree-from-inorder-and-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not inorder:\n            return None\n        \n        root = TreeNode(postorder[-1])\n        idx = inorder.index(root.val)\n        root.right = self.buildTree(inorder[idx+1:], postorder[idx:-1])\n        root.left = self.buildTree(inorder[:idx], postorder[:idx])\n        \n        return root"}], "cut-off-trees-for-golf-event": [{"task_id": "cut-off-trees-for-golf-event", "completion": "class Solution(object):\n    def cutOffTree(self, forest):\n        \"\"\"\n        :type forest: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # get all the trees in the forest\n        trees = []\n        for row in forest:\n            for tree in row:\n                if tree > 1:\n                    trees.append(tree)\n        \n        # sort the trees in ascending order\n        trees.sort()\n        \n        # start from the top left corner\n        curr_row, curr_col = 0, 0\n        steps = 0\n        \n        # traverse the sorted list of trees\n        for tree in trees:\n            # if we can't reach the tree, return -1\n            if curr_row >= len(forest) or curr_col >= len(forest[0]):\n                return -1\n            \n            # move to the next tree\n            steps += self.bfs(forest, curr_row, curr_col, tree)\n            \n            # if we can't reach the tree, return -1\n            if steps == -1:\n                return -1\n            \n            # move to the next tree\n            curr_row, curr_col = self.getNextTree(forest, curr_row, curr_col, tree)\n            \n        return steps\n        \n    def bfs(self, forest, start_row, start_col, target):\n        # initialize a queue with the starting point\n        queue = collections.deque([(start_row, start_col)])\n        \n        # initialize a set to keep track of visited cells\n        visited = set()\n        \n        # initialize a distance of 0 to the starting point\n        distance = 0\n        \n        # while the queue is not empty\n        while queue:\n            # get the number of cells in the queue\n            size = len(queue)\n            \n            # for each cell in the queue\n            for _ in range(size):\n                # get the current cell\n                row, col = queue.popleft()\n                \n                # if the current cell is the target, return the distance\n                if forest[row][col] == target:\n                    return distance\n                \n                # add the current cell to the visited set\n                visited.add((row, col))\n                \n                # add the neighbors of the current cell to the queue\n                for dr, dc in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n                    nr, nc = row + dr, col + dc\n                    \n                    # if the neighbor is valid and not visited, add it to the queue\n                    if 0 <= nr < len(forest) and 0 <= nc < len(forest[0]) and (nr, nc) not in visited:\n                        queue.append((nr, nc))\n            \n            # increment the distance by 1\n            distance += 1\n        \n        # if we reach here, the target was not found\n        return -1\n    \n    def getNextTree(self, forest, row, col, target):\n        # initialize a queue with the starting point\n        queue = collections.deque([(row, col)])\n        \n        # initialize a set to keep track of visited cells\n        visited = set()\n        \n        # initialize a distance of 0 to the starting point\n        distance = 0\n        \n        # while the queue is not empty\n        while queue:\n            # get the number of cells in the queue\n            size = len(queue)\n            \n            # for each cell in the queue\n            for _ in range(size):\n                # get the current cell\n                row, col = queue.popleft()\n                \n                # if the current cell is the target, return the distance\n                if forest[row][col] == target:\n                    return row, col\n                \n                # add the current cell to the visited set\n                visited.add((row, col))\n                \n                # add the neighbors of the current cell to the queue\n                for dr, dc in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n                    nr, nc = row + dr, col + dc\n                    \n                    # if the neighbor is valid and not visited, add it to the queue\n                    if 0 <= nr < len(forest) and 0 <= nc < len(forest[0]) and (nr, nc) not in visited:\n                        queue.append((nr, nc))\n            \n            # increment the distance by"}], "minimum-depth-of-binary-tree": [{"task_id": "minimum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def minDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        if not root.left:\n            return 1 + self.minDepth(root.right)\n        \n        if not root.right:\n            return 1 + self.minDepth(root.left)\n        \n        return 1 + min(self.minDepth(root.left), self.minDepth(root.right))"}], "count-of-range-sum": [{"task_id": "count-of-range-sum", "completion": "class Solution(object):\n    def countRangeSum(self, nums, lower, upper):\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. calculate the prefix sum\n        # 2. use the prefix sum as the key to a hashmap\n        # 3. count the number of pairs that sum to the key\n        # 4. return the number of pairs\n        \n        # 1. calculate the prefix sum\n        n = len(nums)\n        if n == 0:\n            return 0\n        prefix_sum = [0] * (n + 1)\n        for i in range(n):\n            prefix_sum[i + 1] = prefix_sum[i] + nums[i]\n        \n        # 2. use the prefix sum as the key to a hashmap\n        # 3. count the number of pairs that sum to the key\n        # 4. return the number of pairs\n        prefix_sum_dict = {}\n        ans = 0\n        for i in range(n + 1):\n            ans += prefix_sum_dict.get(prefix_sum[i] - lower, 0)\n            ans += prefix_sum_dict.get(prefix_sum[i] - upper, 0)\n            prefix_sum_dict[prefix_sum[i]] = prefix_sum_dict.get(prefix_sum[i], 0) + 1\n        \n        return ans"}], "arranging-coins": [{"task_id": "arranging-coins", "completion": "class Solution(object):\n    def arrangeCoins(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        return int((2*n + 0.25)**0.5 - 0.5)"}], "longest-uncommon-subsequence-i": [{"task_id": "longest-uncommon-subsequence-i", "completion": "class Solution(object):\n    def findLUSlength(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: int\n        \"\"\"\n        \n        if a == b:\n            return -1\n        else:\n            return max(len(a), len(b))"}], "binary-tree-level-order-traversal-ii": [{"task_id": "binary-tree-level-order-traversal-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        q = [root]\n        res = []\n        \n        while q:\n            res.append([node.val for node in q])\n            q = [child for node in q for child in (node.left, node.right) if child]\n        \n        return res[::-1]"}], "palindrome-number": [{"task_id": "palindrome-number", "completion": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        \n        if x < 0:\n            return False\n        \n        if x < 10:\n            return True\n        \n        if x % 10 == 0:\n            return False\n        \n        rev = 0\n        while x > rev:\n            rev = rev * 10 + x % 10\n            x = x // 10\n        \n        return x == rev or x == rev // 10"}], "decode-ways": [{"task_id": "decode-ways", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if not s or s[0] == '0':\n            return 0\n        \n        if len(s) == 1:\n            return 1\n        \n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, len(s) + 1):\n            if s[i - 1] != '0':\n                dp[i] += dp[i - 1]\n            if s[i - 2] != '0' and int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        \n        return dp[-1]"}], "is-subsequence": [{"task_id": "is-subsequence", "completion": "class Solution(object):\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) == 0:\n            return True\n        \n        i = 0\n        for c in t:\n            if i == len(s):\n                return True\n            if c == s[i]:\n                i += 1\n        return i == len(s)"}], "gray-code": [{"task_id": "gray-code", "completion": "class Solution(object):\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if n == 0:\n            return [0]\n        \n        if n == 1:\n            return [0, 1]\n        \n        res = [0, 1]\n        for i in range(1, n):\n            res.append(res[-1] + (1 << i))\n        \n        return res"}], "climbing-stairs": [{"task_id": "climbing-stairs", "completion": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        \n        a = 1\n        b = 2\n        for i in range(3, n+1):\n            c = a + b\n            a = b\n            b = c\n        return c"}], "word-break": [{"task_id": "word-break", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        \n        dp = [False] * (len(s) + 1)\n        dp[0] = True\n        \n        for i in range(1, len(s) + 1):\n            for word in wordDict:\n                if i >= len(word) and s[i - len(word):i] == word:\n                    dp[i] = dp[i - len(word)]\n                if dp[i]:\n                    break\n        \n        return dp[-1]"}], "validate-binary-search-tree": [{"task_id": "validate-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def helper(node, lower, upper):\n            if not node:\n                return True\n            \n            if node.val <= lower or node.val >= upper:\n                return False\n            \n            return helper(node.left, lower, node.val) and helper(node.right, node.val, upper)\n        \n        return helper(root, float('-inf'), float('inf'))"}], "insert-interval": [{"task_id": "insert-interval", "completion": "class Solution(object):\n    def insert(self, intervals, newInterval):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type newInterval: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not intervals:\n            return [newInterval]\n        \n        if newInterval[0] > intervals[-1][1]:\n            return [newInterval] + intervals\n        \n        if newInterval[1] < intervals[0][0]:\n            return [newInterval] + intervals\n        \n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[-1][1]:\n            return intervals\n        \n        if newInterval[0] <= intervals[0][0]:\n            newInterval[0] = intervals[0][0]\n        \n        if newInterval[1] >= intervals[-1][1]:\n            newInterval[1] = intervals[-1][1]\n        \n        i = 0\n        while i < len(intervals):\n            if newInterval[0] <= intervals[i][1]:\n                newInterval[1] = max(newInterval[1], intervals[i][1])\n            else:\n                break\n            i += 1\n        \n        return [intervals[:i]] + [newInterval] + intervals[i:]"}], "palindrome-partitioning": [{"task_id": "palindrome-partitioning", "completion": "class Solution(object):\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def isPalindrome(s):\n            return s == s[::-1]\n        \n        if not s:\n            return [[]]\n        \n        res = []\n        for i in range(1, len(s) + 1):\n            if isPalindrome(s[:i]):\n                for sub in self.partition(s[i:]):\n                    res.append([s[:i]] + sub)\n        \n        return res"}], "smallest-range-covering-elements-from-k-lists": [{"task_id": "smallest-range-covering-elements-from-k-lists", "completion": "class Solution(object):\n    def smallestRange(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # find the min and max of all the numbers in the first list\n        min_num = nums[0][0]\n        max_num = nums[0][0]\n        for lst in nums:\n            for num in lst:\n                if num < min_num:\n                    min_num = num\n                if num > max_num:\n                    max_num = num\n        \n        # find the range of the list with the min and max\n        range_min = min_num\n        range_max = max_num\n        \n        # find the range of the list with the min and max\n        for i in range(1, len(nums)):\n            if nums[i][0] > range_max:\n                range_max = nums[i][0]\n            if nums[i][len(nums[i]) - 1] < range_min:\n                range_min = nums[i][len(nums[i]) - 1]\n        \n        # if the range is 1, then the range is the min and max\n        if range_max - range_min == 0:\n            return [range_min, range_max]\n        \n        # find the range of the list with the min and max\n        range_min = min_num\n        range_max = max_num\n        \n        # find the range of the list with the min and max\n        for i in range(1, len(nums)):\n            if nums[i][0] > range_max:\n                range_max = nums[i][0]\n            if nums[i][len(nums[i]) - 1] < range_min:\n                range_min = nums[i][len(nums[i]) - 1]\n        \n        # if the range is 1, then the range is the min and max\n        if range_max - range_min == 0:\n            return [range_min, range_max]\n        \n        return [range_min, range_max]"}], "poor-pigs": [{"task_id": "poor-pigs", "completion": "class Solution(object):\n    def poorPigs(self, buckets, minutesToDie, minutesToTest):\n        \"\"\"\n        :type buckets: int\n        :type minutesToDie: int\n        :type minutesToTest: int\n        :rtype: int\n        \"\"\"\n        \n        # 1000 buckets, 15 minutes to die, 15 minutes to test\n        # 1000 / 15 + 1 = 67\n        # 67 pigs\n        return ceil(log(buckets, minutesToTest / minutesToDie + 1))"}], "swim-in-rising-water": [{"task_id": "swim-in-rising-water", "completion": "class Solution(object):\n    def swimInWater(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        if n == 1:\n            return grid[0][0]\n        \n        heap = [(grid[0][0], 0, 0)]\n        visited = set()\n        visited.add((0, 0))\n        res = 0\n        \n        while heap:\n            curr_time, x, y = heapq.heappop(heap)\n            res = max(res, curr_time)\n            if x == n - 1 and y == n - 1:\n                return res\n            for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                nx, ny = x + dx, y + dy\n                if nx < 0 or nx >= n or ny < 0 or ny >= n or (nx, ny) in visited:\n                    continue\n                heapq.heappush(heap, (grid[nx][ny], nx, ny))\n                visited.add((nx, ny))"}], "unique-paths": [{"task_id": "unique-paths", "completion": "class Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # if m == 1 or n == 1:\n        #     return 1\n        \n        # dp = [[0] * n for _ in range(m)]\n        # dp[0][0] = 1\n        \n        # for i in range(m):\n        #     for j in range(n):\n        #         if i == 0 and j == 0:\n        #             continue\n                \n        #         if i == 0:\n        #             dp[i][j] = dp[i][j - 1]\n                \n        #         elif j == 0:\n        #             dp[i][j] = dp[i - 1][j]\n                \n        #         else:\n        #             dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n                \n        # return dp[m - 1][n - 1]\n        \n        # if m == 1 or n == 1:\n        #     return 1\n        \n        # dp = [1] * n\n        \n        # for i in range(1, m):\n        #     for j in range(1, n):\n        #         dp[j] += dp[j - 1]\n                \n        # return dp[n - 1]"}], "multiply-strings": [{"task_id": "multiply-strings", "completion": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        if num1 == '0' or num2 == '0':\n            return '0'\n        \n        num1 = num1[::-1]\n        num2 = num2[::-1]\n        \n        res = [0] * (len(num1) + len(num2))\n        \n        for i in range(len(num1)):\n            for j in range(len(num2)):\n                res[i+j] += int(num1[i]) * int(num2[j])\n                \n        for i in range(len(res)-1):\n            res[i+1] += res[i] // 10\n            res[i] %= 10\n            \n        res = res[::-1]\n        \n        i = 0\n        while i < len(res) and res[i] == 0:\n            i += 1\n            \n        return ''.join(map(str, res[i:]))"}], "best-time-to-buy-and-sell-stock-iii": [{"task_id": "best-time-to-buy-and-sell-stock-iii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## 1. 2 pointer approach\n        ## 2. 1 pass\n        ## 3. 2 pass\n        \n        ## 1. 2 pointer approach\n        ## 2. 1 pass\n        ## 3. 2 pass\n        \n        ## 1. 2 pointer approach\n        ## 2. 1 pass\n        ## 3. 2 pass\n        ## 4. 3 pass\n        \n        ## 1. 2 pointer approach\n        ## 2. 1 pass\n        ## 3. 2 pass\n        ## 4. 3 pass\n        ## 5. 4 pass\n        \n        ## 1. 2 pointer approach\n        ## 2. 1 pass\n        ## 3. 2 pass\n        ## 4. 3 pass\n        ## 5. 4 pass\n        ## 6. 5 pass\n        \n        ## 1. 2 pointer approach\n        ## 2. 1 pass\n        ## 3. 2 pass\n        ## 4. 3 pass\n        ## 5. 4 pass\n        ## 6. 5 pass\n        ## 7. 6 pass\n        \n        ## 1. 2 pointer approach\n        ## 2. 1 pass\n        ## 3. 2 pass\n        ## 4. 3 pass\n        ## 5. 4 pass\n        ## 6. 5 pass\n        ## 7. 6 pass\n        ## 8. 7 pass\n        \n        ## 1. 2 pointer approach\n        ## 2. 1 pass\n        ## 3. 2 pass\n        ## 4. 3 pass\n        ## 5. 4 pass\n        ## 6. 5 pass\n        ## 7. 6 pass\n        ## 8. 7 pass\n        ## 9. 8 pass\n        \n        ## 1. 2 pointer approach\n        ## 2. 1 pass\n        ## 3. 2 pass\n        ## 4. 3 pass\n        ## 5. 4 pass\n        ## 6. 5 pass\n        ## 7. 6 pass\n        ## 8. 7 pass\n        ## 9. 8 pass\n        ## 10. 9 pass\n        \n        ## 1. 2 pointer approach\n        ## 2. 1 pass\n        ## 3. 2 pass\n        ## 4. 3 pass\n        ## 5. 4 pass\n        ## 6. 5 pass\n        ## 7. 6 pass\n        ## 8. 7 pass\n        ## 9. 8 pass\n        ## 10. 9 pass\n        ## 11. 10 pass\n        \n        ## 1. 2 pointer approach\n        ## 2. 1 pass\n        ## 3. 2 pass\n        ## 4. 3 pass\n        ## 5. 4 pass\n        ## 6. 5 pass\n        ## 7. 6 pass\n        ## 8. 7 pass\n        ## 9. 8 pass\n        ## 10. 9 pass\n        ## 11. 10 pass\n        ## 12. 11 pass\n        \n        ## 1. 2 pointer approach\n        ## 2. 1 pass\n        ## 3. 2 pass\n        ## 4. 3 pass\n        ## 5. 4 pass\n        ## 6. 5 pass\n        ## 7. 6 pass\n        ## 8. 7 pass\n        ## 9. 8 pass\n        ## 10. 9 pass\n        ## 11. 10 pass\n        ## 12. 11 pass\n        ## 13. 12 pass\n        \n        ## 1. 2 pointer approach\n        ## 2. 1 pass\n        ## 3. 2 pass\n        ## 4. 3 pass\n        ## 5. 4 pass\n        ## 6. 5 pass"}], "combination-sum-ii": [{"task_id": "combination-sum-ii", "completion": "class Solution(object):\n    def combinationSum2(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        res = []\n        self.dfs(candidates, target, 0, [], res)\n        return res\n        \n    def dfs(self, candidates, target, start, path, res):\n        if target == 0:\n            res.append(path[:])\n            return\n        for i in range(start, len(candidates)):\n            if i > start and candidates[i] == candidates[i-1]:\n                continue\n            if candidates[i] > target:\n                break\n            self.dfs(candidates, target - candidates[i], i + 1, path + [candidates[i]], res)"}], "detect-capital": [{"task_id": "detect-capital", "completion": "class Solution(object):\n    def detectCapitalUse(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if word.isupper() or word.islower() or word[0].isupper():\n            return True\n        elif word[1:].isupper():\n            return False\n        else:\n            return True"}], "best-time-to-buy-and-sell-stock": [{"task_id": "best-time-to-buy-and-sell-stock", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        min_price = float('inf')\n        max_profit = 0\n        \n        for price in prices:\n            min_price = min(min_price, price)\n            max_profit = max(max_profit, price - min_price)\n            \n        return max_profit"}], "binary-tree-inorder-traversal": [{"task_id": "binary-tree-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = []\n        res = []\n        curr = root\n        \n        while curr is not None or len(stack) > 0:\n            if curr is not None:\n                stack.append(curr)\n                curr = curr.left\n            else:\n                curr = stack.pop()\n                res.append(curr.val)\n                curr = curr.right\n                \n        return res"}], "construct-binary-tree-from-preorder-and-inorder-traversal": [{"task_id": "construct-binary-tree-from-preorder-and-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not preorder:\n            return None\n        \n        root = TreeNode(preorder[0])\n        mid = inorder.index(preorder[0])\n        \n        root.left = self.buildTree(preorder[1:mid+1], inorder[:mid])\n        root.right = self.buildTree(preorder[mid+1:], inorder[mid+1:])\n        \n        return root"}], "remove-invalid-parentheses": [{"task_id": "remove-invalid-parentheses", "completion": "class Solution(object):\n    def removeInvalidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        \n        # find the first and last '(' and ')'\n        # if there is only one '(' or ')' in s, return it\n        # if there is no '(' or ')', return []\n        # if there is more than one '(' or ')', return [s]\n        \n        # find the first and last '(' and ')'\n        first_left = s.find('(')\n        last_left = s.rfind('(')\n        first_right = s.find(')')\n        last_right = s.rfind(')')\n        \n        if first_left == -1 and first_right == -1:\n            return [s]\n        if first_left == -1:\n            return [s[0:last_right+1]]\n        if first_right == -1:\n            return [s[0:first_left]]\n        if first_left > first_right:\n            return [s]\n        \n        # find the first and last '(' and ')'\n        # if there is only one '(' or ')' in s, return it\n        # if there is no '(' or ')', return []\n        # if there is more than one '(' or ')', return [s]\n        \n        # find the first and last '(' and ')'\n        first_left = s.find('(')\n        last_left = s.rfind('(')\n        first_right = s.find(')')\n        last_right = s.rfind(')')\n        \n        if first_left == -1 and first_right == -1:\n            return [s]\n        if first_left == -1:\n            return [s[0:last_right+1]]\n        if first_right == -1:\n            return [s[0:first_left]]\n        if first_left > first_right:\n            return [s]\n        \n        # find the first and last '(' and ')'\n        first_left = s.find('(')\n        last_left = s.rfind('(')\n        first_right = s.find(')')\n        last_right = s.rfind(')')\n        \n        if first_left == -1 and first_right == -1:\n            return [s]\n        if first_left == -1:\n            return [s[0:last_right+1]]\n        if first_right == -1:\n            return [s[0:first_left]]\n        if first_left > first_right:\n            return [s]\n        \n        # find the first and last '(' and ')'\n        first_left = s.find('(')\n        last_left = s.rfind('(')\n        first_right = s.find(')')\n        last_right = s.rfind(')')\n        \n        if first_left == -1 and first_right == -1:\n            return [s]\n        if first_left == -1:\n            return [s[0:last_right+1]]\n        if first_right == -1:\n            return [s[0:first_left]]\n        if first_left > first_right:\n            return [s]\n        \n        # find the first and last '(' and ')'\n        first_left = s.find('(')\n        last_left = s.rfind('(')\n        first_right = s.find(')')\n        last_right = s.rfind(')')\n        \n        if first_left == -1 and first_right == -1:\n            return [s]\n        if first_left == -1:\n            return [s[0:last_right+1]]\n        if first_right == -1:\n            return [s[0:first_left]]\n        if first_left > first_right:\n            return [s]\n        \n        # find the first and last '(' and ')'\n        first_left = s.find('(')\n        last_left = s.rfind('(')\n        first_right = s.find(')')\n        last_right = s.rfind(')')\n        \n        if first_left == -1 and first_right == -1:\n            return [s]\n        if first_left == -1:\n            return [s[0:last_right+1]]\n        if first_right == -1:\n            return ["}], "merge-k-sorted-lists": [{"task_id": "merge-k-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        \n        if not lists:\n            return None\n        \n        if len(lists) == 1:\n            return lists[0]\n        \n        mid = len(lists) // 2\n        \n        left = self.mergeKLists(lists[:mid])\n        right = self.mergeKLists(lists[mid:])\n        \n        return self.mergeTwoLists(left, right)\n        \n    def mergeTwoLists(self, l1, l2):\n        if not l1:\n            return l2\n        if not l2:\n            return l1\n        \n        if l1.val < l2.val:\n            l1.next = self.mergeTwoLists(l1.next, l2)\n            return l1\n        else:\n            l2.next = self.mergeTwoLists(l1, l2.next)\n            return l2"}], "palindrome-partitioning-ii": [{"task_id": "palindrome-partitioning-ii", "completion": "class Solution(object):\n    def minCut(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        n = len(s)\n        if n < 2:\n            return 0\n        \n        dp = [0] * (n + 1)\n        dp[0] = -1\n        \n        for i in range(1, n + 1):\n            dp[i] = i - 1\n            for j in range(i):\n                if s[j:i] == s[j:i][::-1]:\n                    dp[i] = min(dp[i], dp[j] + 1)\n        \n        return dp[n]"}], "preimage-size-of-factorial-zeroes-function": [{"task_id": "preimage-size-of-factorial-zeroes-function", "completion": "class Solution(object):\n    def preimageSizeFZF(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226,"}], "palindrome-pairs": [{"task_id": "palindrome-pairs", "completion": "class Solution(object):\n    def palindromePairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # create a hashmap to store the reverse of each word\n        # and the index of the word\n        word_map = {word[::-1]: i for i, word in enumerate(words)}\n        \n        # if the empty string is a palindrome\n        if \"\" in word_map:\n            return [[word_map[\"\"], i] for i in range(len(words)) if i != word_map[\"\"]]\n        \n        # iterate over the words\n        ans = []\n        for i, word in enumerate(words):\n            # if the reverse of the word is a palindrome\n            if word[::-1] in word_map:\n                # if the reverse of the word is the same as the word\n                if word == word[::-1]:\n                    # if the word is not the same as the empty string\n                    if i != word_map[\"\"]:\n                        ans.append([i, word_map[\"\"]])\n                else:\n                    ans.append([i, word_map[word[::-1]]])\n        \n        return ans"}], "convert-sorted-array-to-binary-search-tree": [{"task_id": "convert-sorted-array-to-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedArrayToBST(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not nums:\n            return None\n        \n        mid = len(nums) // 2\n        root = TreeNode(nums[mid])\n        root.left = self.sortedArrayToBST(nums[:mid])\n        root.right = self.sortedArrayToBST(nums[mid+1:])\n        \n        return root"}], "contain-virus": [{"task_id": "contain-virus", "completion": "class Solution(object):\n    def containVirus(self, isInfected):\n        \"\"\"\n        :type isInfected: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(isInfected), len(isInfected[0])\n        infected, walls = 0, 0\n        \n        for i in range(m):\n            for j in range(n):\n                if isInfected[i][j] == 1:\n                    infected += 1\n                    walls += self.survive(isInfected, i, j)\n        \n        return infected - walls\n        \n    def survive(self, isInfected, i, j):\n        if isInfected[i][j] == 1:\n            return 0\n        \n        isInfected[i][j] = 2\n        \n        dirs = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n        for d in dirs:\n            ni, nj = i + d[0], j + d[1]\n            if 0 <= ni < len(isInfected) and 0 <= nj < len(isInfected[0]) and isInfected[ni][nj] == 1:\n                self.survive(isInfected, ni, nj)\n        \n        return 1"}], "longest-increasing-path-in-a-matrix": [{"task_id": "longest-increasing-path-in-a-matrix", "completion": "class Solution(object):\n    def longestIncreasingPath(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        max_len = 0\n        \n        for i in range(m):\n            for j in range(n):\n                max_len = max(max_len, self.dfs(matrix, dp, i, j))\n        \n        return max_len\n    \n    def dfs(self, matrix, dp, i, j):\n        if dp[i][j]:\n            return dp[i][j]\n        \n        m, n = len(matrix), len(matrix[0])\n        dirs = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n        max_len = 1\n        \n        for d in dirs:\n            x, y = i + d[0], j + d[1]\n            if 0 <= x < m and 0 <= y < n and matrix[x][y] > matrix[i][j]:\n                max_len = max(max_len, 1 + self.dfs(matrix, dp, x, y))\n        \n        dp[i][j] = max_len\n        return max_len"}], "number-of-digit-one": [{"task_id": "number-of-digit-one", "completion": "class Solution(object):\n    def countDigitOne(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n < 1:\n            return 0\n        \n        if n < 10:\n            return 1\n        \n        if n < 100:\n            return 10\n        \n        if n < 1000:\n            return 100\n        \n        if n < 10000:\n            return 1000\n        \n        if n < 100000:\n            return 10000\n        \n        if n < 1000000:\n            return 100000\n        \n        if n < 10000000:\n            return 1000000\n        \n        if n < 100000000:\n            return 10000000\n        \n        if n < 1000000000:\n            return 100000000\n        \n        if n < 10000000000:\n            return 1000000000\n        \n        if n < 100000000000:\n            return 10000000000\n        \n        if n < 1000000000000:\n            return 100000000000\n        \n        if n < 10000000000000:\n            return 1000000000000\n        \n        if n < 100000000000000:\n            return 10000000000000\n        \n        if n < 1000000000000000:\n            return 100000000000000\n        \n        if n < 10000000000000000:\n            return 1000000000000000\n        \n        if n < 100000000000000000:\n            return 10000000000000000\n        \n        if n < 1000000000000000000:\n            return 100000000000000000\n        \n        if n < 10000000000000000000:\n            return 1000000000000000000\n        \n        if n < 100000000000000000000:\n            return 10000000000000000000\n        \n        if n < 1000000000000000000000:\n            return 100000000000000000000\n        \n        if n < 10000000000000000000000:\n            return 1000000000000000000000\n        \n        if n < 100000000000000000000000:\n            return 10000000000000000000000\n        \n        if n < 1000000000000000000000000:\n            return 100000000000000000000000\n        \n        if n < 10000000000000000000000000:\n            return 1000000000000000000000000\n        \n        if n < 100000000000000000000000000:\n            return"}], "word-break-ii": [{"task_id": "word-break-ii", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        dp = [False] * (len(s) + 1)\n        dp[0] = True\n        \n        for i in range(1, len(s) + 1):\n            for word in wordDict:\n                if i >= len(word) and s[i - len(word):i] == word:\n                    dp[i] = dp[i - len(word)]\n                if dp[i]:\n                    break\n        \n        if not dp[-1]:\n            return []\n        \n        res = []\n        i = len(s)\n        while i > 0:\n            if dp[i]:\n                if i == len(s):\n                    res.append(s)\n                else:\n                    res.append(s[:i - len(wordDict[-1])] + ' ' + res[-1])\n                i -= len(wordDict[-1])\n            else:\n                i -= 1\n        \n        return res[::-1]"}], "binary-tree-zigzag-level-order-traversal": [{"task_id": "binary-tree-zigzag-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def zigzagLevelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        leftToRight = True\n        \n        while queue:\n            level = []\n            for _ in range(len(queue)):\n                node = queue.pop(0)\n                if leftToRight:\n                    level.append(node.val)\n                else:\n                    level.insert(0, node.val)\n                \n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            \n            result.append(level)\n            leftToRight = not leftToRight\n        \n        return result"}], "binary-watch": [{"task_id": "binary-watch", "completion": "class Solution(object):\n    def readBinaryWatch(self, turnedOn):\n        \"\"\"\n        :type turnedOn: int\n        :rtype: List[str]\n        \"\"\"\n        \n        if turnedOn > 8:\n            return []\n        \n        res = []\n        for h in range(12):\n            if h*6 + (turnedOn - h) < 12:\n                res.append('%d:%02d' % (h, h*6 + (turnedOn - h)))\n        return res"}], "pascals-triangle": [{"task_id": "pascals-triangle", "completion": "class Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if numRows == 0:\n            return []\n        \n        if numRows == 1:\n            return [[1]]\n        \n        if numRows == 2:\n            return [[1], [1,1]]\n        \n        res = [[1], [1,1]]\n        \n        for i in range(2, numRows):\n            temp = [1]\n            for j in range(1, i):\n                temp.append(res[i-1][j-1] + res[i-1][j])\n            temp.append(1)\n            res.append(temp)\n        \n        return res"}], "power-of-three": [{"task_id": "power-of-three", "completion": "class Solution(object):\n    def isPowerOfThree(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 3 == 0:\n            n /= 3\n        \n        return n == 1"}], "binary-tree-maximum-path-sum": [{"task_id": "binary-tree-maximum-path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxPathSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        self.max_sum = float('-inf')\n        \n        def max_gain(node):\n            if not node:\n                return 0\n            \n            left_gain = max(max_gain(node.left), 0)\n            right_gain = max(max_gain(node.right), 0)\n            \n            self.max_sum = max(self.max_sum, left_gain + right_gain + node.val)\n            \n            return node.val + max(left_gain, right_gain)\n        \n        max_gain(root)\n        return self.max_sum"}], "trapping-rain-water-ii": [{"task_id": "trapping-rain-water-ii", "completion": "class Solution(object):\n    def trapRainWater(self, heightMap):\n        \"\"\"\n        :type heightMap: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not heightMap:\n            return 0\n        \n        m, n = len(heightMap), len(heightMap[0])\n        heap = [(heightMap[i][0], i, 0) for i in range(m)] + [(heightMap[i][n-1], i, n-1) for i in range(m)]\n        heapq.heapify(heap)\n        seen = set()\n        ans = 0\n        dirs = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n        \n        while heap:\n            h, i, j = heapq.heappop(heap)\n            if (i, j) not in seen:\n                ans += h\n                seen.add((i, j))\n                for di, dj in dirs:\n                    ni, nj = i + di, j + dj\n                    if 0 <= ni < m and 0 <= nj < n and (ni, nj) not in seen:\n                        heapq.heappush(heap, (max(h, heightMap[ni][nj]), ni, nj))\n        \n        return ans"}], "valid-palindrome": [{"task_id": "valid-palindrome", "completion": "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        s = s.lower()\n        s = re.sub(r'[^a-z0-9]', '', s)\n        \n        return s == s[::-1]"}], "sliding-window-median": [{"task_id": "sliding-window-median", "completion": "class Solution(object):\n    def medianSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[float]\n        \"\"\"\n        \n        # O(n) time, O(n) space\n        # Use a max heap to store the first half of the array\n        # Use a min heap to store the second half of the array\n        # If the size of the two heaps is uneven, the median is the max of the first half\n        # If the size of the two heaps is even, the median is the average of the two maxes\n        \n        if len(nums) == 0:\n            return []\n        \n        if k == 1:\n            return nums\n        \n        max_heap = []\n        min_heap = []\n        median = (nums[0] + nums[k - 1]) / 2.0\n        \n        for i in range(k):\n            heapq.heappush(max_heap, -nums[i])\n        \n        for i in range(k, len(nums)):\n            heapq.heappush(max_heap, -nums[i])\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n            if len(max_heap) > len(min_heap):\n                heapq.heappush(min_heap, -heapq.heappop(max_heap))\n            if len(max_heap) == len(min_heap):\n                median = (min_heap[0] + -max_heap[0]) / 2.0\n            else:\n                median = max_heap[0] / 1.0\n        \n        return [median] + [median + (nums[i - k + 1] - median) / 2.0 for i in range(k, len(nums))]"}], "rotate-list": [{"task_id": "rotate-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        length = 0\n        curr = head\n        while curr:\n            length += 1\n            curr = curr.next\n        \n        k = k % length\n        if k == 0:\n            return head\n        \n        curr = head\n        for i in range(length - k - 1):\n            curr = curr.next\n        \n        new_head = curr.next\n        curr.next = None\n        \n        curr = new_head\n        while curr.next:\n            curr = curr.next\n        \n        curr.next = head\n        \n        return new_head"}], "ugly-number": [{"task_id": "ugly-number", "completion": "class Solution(object):\n    def isUgly(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        if n == 1:\n            return True\n        \n        if n % 2 == 0:\n            return self.isUgly(n // 2)\n        \n        if n % 3 == 0:\n            return self.isUgly(n // 3)\n        \n        if n % 5 == 0:\n            return self.isUgly(n // 5)\n        \n        return False"}], "falling-squares": [{"task_id": "falling-squares", "completion": "class Solution(object):\n    def fallingSquares(self, positions):\n        \"\"\"\n        :type positions: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. sort the positions by left\n        # 2. use a stack to store the heights of the current tallest stack\n        # 3. use a set to store the heights of the current tallest stack\n        # 4. return the heights of the current tallest stack\n        \n        heights = [0]\n        heights_set = set()\n        heights_set.add(0)\n        \n        for left, side_length in positions:\n            heights.append(heights[-1] + side_length)\n            heights_set.add(heights[-1])\n            \n            # find the height of the tallest stack that can be formed by the current square\n            # if the current square is on the left side of the tallest stack, add the height of the current square to the tallest stack\n            # if the current square is on the right side of the tallest stack, add the height of the current square to the tallest stack\n            # if the current square is on the right side of the tallest stack, subtract the height of the tallest stack from the height of the current square\n            # if the current square is on the left side of the tallest stack, subtract the height of the tallest stack from the height of the current square\n            # if the current square is on the right side of the tallest stack, subtract the height of the tallest stack from the height of the current square\n            # if the current square is on the left side of the tallest stack, subtract the height of the tallest stack from the height of the current square\n            # if the current square is on the right side of the tallest stack, subtract the height of the tallest stack from the height of the current square\n            # if the current square is on the left side of the tallest stack, subtract the height of the tallest stack from the height of the current square\n            # if the current square is on the right side of the tallest stack, subtract the height of the tallest stack from the height of the current square\n            # if the current square is on the left side of the tallest stack, subtract the height of the tallest stack from the height of the current square\n            # if the current square is on the right side of the tallest stack, subtract the height of the tallest stack from the height of the current square\n            # if the current square is on the left side of the tallest stack, subtract the height of the tallest stack from the height of the current square\n            # if the current square is on the right side of the tallest stack, subtract the height of the tallest stack from the height of the current square\n            # if the current square is on the left side of the tallest stack, subtract the height of the tallest stack from the height of the current square\n            # if the current square is on the right side of the tallest stack, subtract the height of the tallest stack from the height of the current square\n            # if the current square is on the left side of the tallest stack, subtract the height of the tallest stack from the height of the current square\n            # if the current square is on the right side of the tallest stack, subtract the height of the tallest stack from the height of the current square\n            # if the current square is on the left side of the tallest stack, subtract the height of the tallest stack from the height of the current square\n            # if the current square is on the right side of the tallest stack, subtract the height of the tallest stack from the height of the current square\n            # if the current square is on the left side of the tallest stack, subtract the height of the tallest stack from the height of the current square\n            # if the current square is on the right side of the tallest stack, subtract the height of the tallest stack from the height of the current square\n            # if the current square is on the left side of the tallest stack, subtract the height of the tallest stack from the height of the current square\n            # if the current square is on the right side of the tallest stack, subtract the height of the tallest stack from the height of the current square\n            # if the current square is on the left side of the tallest stack, subtract the height of the tallest stack from the height of the current square\n            # if the current square is on the right side of the tallest stack, subtract the height of the tallest stack from the height of the current square\n            # if the current square is on the left side of the tallest stack, subtract the height of the tallest stack from the"}], "sum-of-left-leaves": [{"task_id": "sum-of-left-leaves", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumOfLeftLeaves(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        if root.left is None:\n            return self.sumOfLeftLeaves(root.right)\n        \n        if root.left.left is None and root.left.right is None:\n            return root.left.val + self.sumOfLeftLeaves(root.right)\n        \n        return self.sumOfLeftLeaves(root.left) + self.sumOfLeftLeaves(root.right)"}], "max-sum-of-rectangle-no-larger-than-k": [{"task_id": "max-sum-of-rectangle-no-larger-than-k", "completion": "class Solution(object):\n    def maxSumSubmatrix(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(matrix), len(matrix[0])\n        if m > n:\n            matrix = zip(*matrix)\n            m, n = n, m\n        \n        max_sum = float('-inf')\n        for i in range(n):\n            cur_sum = 0\n            cur_max = float('-inf')\n            sums = [0] + list(accumulate(matrix[i], initial=0))\n            for j in range(n):\n                cur_sum += sums[j+1]\n                if cur_sum <= k:\n                    cur_max = max(cur_max, cur_sum)\n                else:\n                    cur_sum -= sums[j+1-n]\n                    if cur_sum > k:\n                        cur_sum -= sums[j+1-n]\n                    else:\n                        cur_max = max(cur_max, cur_sum)\n                max_sum = max(max_sum, cur_max)\n        return max_sum"}], "divide-two-integers": [{"task_id": "divide-two-integers", "completion": "class Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"\n        \n        if dividend == 0:\n            return 0\n        \n        if dividend == -2**31 and divisor == -1:\n            return 2**31 - 1\n        \n        if dividend > 0 and divisor > 0:\n            return min(2**31 - 1, max(-2**31, dividend//divisor))\n        \n        if dividend > 0 and divisor < 0:\n            return max(-2**31, dividend//divisor)\n        \n        if dividend < 0 and divisor > 0:\n            return max(-2**31, dividend//divisor)\n        \n        if dividend < 0 and divisor < 0:\n            return min(2**31 - 1, dividend//divisor)"}], "surrounded-regions": [{"task_id": "surrounded-regions", "completion": "class Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        if not board:\n            return\n        \n        m, n = len(board), len(board[0])\n        \n        def dfs(i, j):\n            if i < 0 or i >= m or j < 0 or j >= n or board[i][j] != 'O':\n                return\n            \n            board[i][j] = 'T'\n            \n            dfs(i + 1, j)\n            dfs(i - 1, j)\n            dfs(i, j + 1)\n            dfs(i, j - 1)\n            \n        for i in range(m):\n            dfs(i, 0)\n            dfs(i, n - 1)\n            \n        for j in range(n):\n            dfs(0, j)\n            dfs(m - 1, j)\n            \n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'O':\n                    board[i][j] = 'X'\n                elif board[i][j] == 'T':\n                    board[i][j] = 'O'"}], "two-sum": [{"task_id": "two-sum", "completion": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # create a hashmap\n        hashmap = {}\n        \n        # iterate through the list\n        for i, num in enumerate(nums):\n            \n            # check if the difference between the target and the current number is in the hashmap\n            if target - num in hashmap:\n                return [hashmap[target - num], i]\n            \n            # add the number to the hashmap\n            hashmap[num] = i"}], "24-game": [{"task_id": "24-game", "completion": "class Solution(object):\n    def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        if len(cards) == 1:\n            return abs(cards[0] - 24) < 1e-6\n        \n        for i in range(len(cards)):\n            for j in range(i + 1, len(cards)):\n                n1, n2 = cards[i], cards[j]\n                for op in ['+', '-', '*', '/']:\n                    if op == '+':\n                        n = n1 + n2\n                    elif op == '-':\n                        n = n1 - n2\n                    elif op == '*':\n                        n = n1 * n2\n                    else:\n                        if n2 == 0:\n                            continue\n                        n = n1 / n2\n                    if n == 24:\n                        return True\n                    if op == '+' or op == '-':\n                        if n in cards[i + 1:j]:\n                            continue\n                    if op == '*' or op == '/':\n                        if n1 % n2 == 0:\n                            continue\n                    if op == '+' or op == '-':\n                        if n2 in cards[i + 1:j]:\n                            continue\n                    if op == '*' or op == '/':\n                        if n1 in cards[i + 1:j]:\n                            continue\n                    if op == '+' or op == '-':\n                        if n in cards[i + 1:j]:\n                            continue\n                    if op == '*' or op == '/':\n                        if n in cards[i + 1:j]:\n                            continue\n                    if op == '+' or op == '-':\n                        if n in cards[i + 1:j]:\n                            continue\n                    if op == '*' or op == '/':\n                        if n in cards[i + 1:j]:\n                            continue\n                    if op == '+' or op == '-':\n                        if n in cards[i + 1:j]:\n                            continue\n                    if op == '*' or op == '/':\n                        if n in cards[i + 1:j]:\n                            continue\n                    if op == '+' or op == '-':\n                        if n in cards[i + 1:j]:\n                            continue\n                    if op == '*' or op == '/':\n                        if n in cards[i + 1:j]:\n                            continue\n                    if op == '+' or op == '-':\n                        if n in cards[i + 1:j]:\n                            continue\n                    if op == '*' or op == '/':\n                        if n in cards[i + 1:j]:\n                            continue\n                    if op == '+' or op == '-':\n                        if n in cards[i + 1:j]:\n                            continue\n                    if op == '*' or op == '/':\n                        if n in cards[i + 1:j]:\n                            continue\n                    if op == '+' or op == '-':\n                        if n in cards[i + 1:j]:\n                            continue\n                    if op == '*' or op == '/':\n                        if n in cards[i + 1:j]:\n                            continue\n                    if op == '+' or op == '-':\n                        if n in cards[i + 1:j]:\n                            continue\n                    if op == '*' or op == '/':\n                        if n in cards[i + 1:j]:\n                            continue\n                    if op == '+' or op == '-':\n                        if n in cards[i + 1:j]:\n                            continue\n                    if op == '*' or op == '/':\n                        if n in cards[i + 1:j]:\n                            continue\n                    if op == '+' or op == '-':\n                        if n in cards[i + 1:j]:\n                            continue\n                    if op == '*' or op == '/':\n                        if n in cards[i + 1:j]:\n                            continue\n                    if op == '+' or op == '-':\n                        if n in cards[i + 1:j]:\n                            continue\n                    if op == '*' or op == '/':\n                        if n in cards[i + 1:j]:\n                            continue\n                    if op == '+' or op == '-':\n                        if n in cards[i + 1:j]:\n                            continue\n                    if op == '*' or op == '/':\n                        if n in cards[i + 1:j]:\n                            continue\n                    if op == '+' or op == '-':\n                        if n in cards[i + 1:j]:\n                            continue\n                    if"}], "wildcard-matching": [{"task_id": "wildcard-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        if not p.replace('*', ''):\n            return not s\n        \n        star = p.find('*')\n        if star == -1:\n            return False\n        \n        if star == 0:\n            return True\n        \n        if p[star - 1] != s[0] and p[star - 1] != '*':\n            return False\n        \n        return self.isMatch(s[star:], p[star:])"}], "majority-element": [{"task_id": "majority-element", "completion": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Boyer-Moore Voting Algorithm\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        count = 0\n        candidate = None\n        \n        for num in nums:\n            if count == 0:\n                candidate = num\n            if num == candidate:\n                count += 1\n            else:\n                count -= 1\n        \n        return candidate"}], "reconstruct-itinerary": [{"task_id": "reconstruct-itinerary", "completion": "class Solution(object):\n    def findItinerary(self, tickets):\n        \"\"\"\n        :type tickets: List[List[str]]\n        :rtype: List[str]\n        \"\"\"\n        \n        # build a graph\n        graph = collections.defaultdict(list)\n        for start, end in tickets:\n            graph[start].append(end)\n        \n        # sort the graph by alphabetical order\n        for start in graph:\n            graph[start].sort(reverse=True)\n        \n        # dfs\n        res = []\n        def dfs(start):\n            # if there is no more edges, add the start to the result\n            if len(graph[start]) == 0:\n                res.append(start)\n                return\n            # otherwise, pop the last edge and dfs\n            for i in range(len(graph[start])-1, -1, -1):\n                end = graph[start][i]\n                graph[start].pop(i)\n                dfs(end)\n                # add the start back\n                graph[start].append(end)\n        \n        dfs(\"JFK\")\n        return res[::-1]"}], "4sum": [{"task_id": "4sum", "completion": "class Solution(object):\n    def fourSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        for i in range(len(nums)-3):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            for j in range(i+1, len(nums)-2):\n                if j > i+1 and nums[j] == nums[j-1]:\n                    continue\n                l, r = j+1, len(nums)-1\n                while l < r:\n                    if nums[i] + nums[j] + nums[l] + nums[r] == target:\n                        res.append([nums[i], nums[j], nums[l], nums[r]])\n                        l += 1\n                        r -= 1\n                        while l < r and nums[l] == nums[l-1]:\n                            l += 1\n                        while l < r and nums[r] == nums[r+1]:\n                            r -= 1\n                    elif nums[i] + nums[j] + nums[l] + nums[r] < target:\n                        l += 1\n                    else:\n                        r -= 1\n        return res"}], "the-skyline-problem": [{"task_id": "the-skyline-problem", "completion": "class Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # sort buildings by left edge\n        buildings.sort(key=lambda x: x[0])\n        \n        # initialize result\n        result = [[0, 0]]\n        \n        # iterate over buildings\n        for b in buildings:\n            # if current building is taller than previous building\n            if b[2] > result[-1][1]:\n                # add new building to result\n                result.append([b[0], b[2]])\n            # if current building is shorter than previous building\n            else:\n                # update previous building's height\n                result[-1][1] = b[2]\n        \n        # sort result by height\n        result.sort(key=lambda x: x[1])\n        \n        # return result\n        return result[1:]"}], "reverse-string": [{"task_id": "reverse-string", "completion": "class Solution(object):\n    def reverseString(self, s):\n        \"\"\"\n        :type s: List[str]\n        :rtype: None Do not return anything, modify s in-place instead.\n        \"\"\"\n        \n        left = 0\n        right = len(s) - 1\n        \n        while left < right:\n            s[left], s[right] = s[right], s[left]\n            left += 1\n            right -= 1"}], "reverse-linked-list": [{"task_id": "reverse-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        prev = None\n        curr = head\n        \n        while curr:\n            next = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next\n            \n        return prev"}], "triangle": [{"task_id": "triangle", "completion": "class Solution(object):\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not triangle:\n            return 0\n        \n        dp = triangle[-1]\n        \n        for i in range(len(triangle)-2,-1,-1):\n            for j in range(len(triangle[i])):\n                dp[j] = min(dp[j],dp[j+1]) + triangle[i][j]\n        \n        return dp[0]"}], "integer-to-english-words": [{"task_id": "integer-to-english-words", "completion": "class Solution(object):\n    def numberToWords(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"Zero\"\n        \n        ones = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n        tens = [\"\", \"Ten\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"]\n        teens = [\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"]\n        \n        def helper(num):\n            if num == 0:\n                return \"\"\n            if num < 10:\n                return ones[num]\n            if num < 20:\n                return teens[num - 10]\n            if num < 100:\n                return tens[num // 10] + \" \" + helper(num % 10)\n            if num < 1000:\n                return ones[num // 100] + \" Hundred \" + helper(num % 100)\n            if num < 1000000:\n                return helper(num // 1000) + \" Thousand \" + helper(num % 1000)\n            if num < 1000000000:\n                return helper(num // 1000000) + \" Million \" + helper(num % 1000000)\n            return helper(num // 1000000000) + \" Billion \" + helper(num % 1000000000)\n        \n        return helper(num)"}], "k-inverse-pairs-array": [{"task_id": "k-inverse-pairs-array", "completion": "class Solution(object):\n    def kInversePairs(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2] + ... + dp[i-1][j-i]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-i]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-i] + dp[i-1][j-i]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-i] + dp[i-1][j-i]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-i] + dp[i-1][j-i]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-i] + dp[i-1][j-i]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-i] + dp[i-1][j-i]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-i] + dp[i-1][j-i]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-i] + dp[i-1][j-i]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-i] + dp[i-1][j-i]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-i] + dp[i-1][j-i]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-i] + dp[i-1][j-i]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-i] + dp[i-1][j-i]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-i] + dp[i-1][j-i]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-i] + dp[i-1][j-i]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-i] + dp[i-1][j-i]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-i] + dp[i-1][j-i]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-i] + dp[i-1][j-i]\n        # dp[i][j] = dp[i-1][j] + dp[i-1"}], "swap-nodes-in-pairs": [{"task_id": "swap-nodes-in-pairs", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        curr = dummy\n        \n        while curr.next and curr.next.next:\n            first = curr.next\n            second = curr.next.next\n            \n            curr.next = second\n            first.next = second.next\n            second.next = first\n            \n            curr = first\n            \n        return dummy.next"}], "path-sum": [{"task_id": "path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def hasPathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: bool\n        \"\"\"\n        \n        if not root:\n            return False\n        \n        if not root.left and not root.right:\n            return targetSum == root.val\n        \n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)"}], "partition-list": [{"task_id": "partition-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def partition(self, head, x):\n        \"\"\"\n        :type head: ListNode\n        :type x: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        small = ListNode(0)\n        large = ListNode(0)\n        small_tail = small\n        large_tail = large\n        \n        while head:\n            if head.val < x:\n                small_tail.next = head\n                small_tail = small_tail.next\n            else:\n                large_tail.next = head\n                large_tail = large_tail.next\n            head = head.next\n        \n        small_tail.next = large.next\n        large_tail.next = None\n        \n        return small.next"}], "redundant-connection-ii": [{"task_id": "redundant-connection-ii", "completion": "class Solution(object):\n    def findRedundantDirectedConnection(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # find the node with two parents\n        parent = {}\n        child = {}\n        for u, v in edges:\n            if u in parent:\n                if v in child:\n                    return [parent[u], v]\n                else:\n                    child[u] = v\n            else:\n                parent[u] = v\n        \n        # find the node with only one parent\n        if len(parent) == len(edges):\n            return [parent[edges[-1][0]], edges[-1][1]]\n        \n        # find the node with only one child\n        for u, v in edges:\n            if u in child:\n                return [child[u], u]\n        \n        return [0, 0]"}], "permutations-ii": [{"task_id": "permutations-ii", "completion": "class Solution(object):\n    def permuteUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        visited = [False] * len(nums)\n        self.dfs(nums, [], visited, res)\n        return res\n        \n    def dfs(self, nums, path, visited, res):\n        if len(path) == len(nums):\n            res.append(path[:])\n            return\n        \n        for i in range(len(nums)):\n            if visited[i]:\n                continue\n            if i > 0 and nums[i] == nums[i-1] and not visited[i-1]:\n                continue\n            visited[i] = True\n            path.append(nums[i])\n            self.dfs(nums, path, visited, res)\n            path.pop()\n            visited[i] = False"}], "add-digits": [{"task_id": "add-digits", "completion": "class Solution(object):\n    def addDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        if num == 0:\n            return 0\n        \n        if num % 9 == 0:\n            return 9\n        else:\n            return num % 9"}], "single-number": [{"task_id": "single-number", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        return 2*sum(set(nums))-sum(nums)"}], "length-of-last-word": [{"task_id": "length-of-last-word", "completion": "class Solution(object):\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Split the string into words and return the last word\n        return len(s.split()[-1])"}], "cherry-pickup": [{"task_id": "cherry-pickup", "completion": "class Solution(object):\n    def cherryPickup(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        dp = [[0] * n for _ in range(n)]\n        dp[0][0] = grid[0][0]\n        \n        for i in range(1, n):\n            dp[i][0] = dp[i - 1][0] + grid[i][0]\n            dp[0][i] = dp[0][i - 1] + grid[0][i]\n        \n        for i in range(1, n):\n            for j in range(1, n):\n                dp[i][j] = grid[i][j] + dp[i - 1][j - 1] + dp[i][j - 1] + dp[i - 1][j]\n                if i + j != n - 1:\n                    dp[i][j] = max(dp[i][j], dp[i][j - 1])\n                if i != j:\n                    dp[i][j] = max(dp[i][j], dp[i - 1][j])\n                if i + j != n - 1:\n                    dp[i][j] = max(dp[i][j], dp[i][j - 1])\n                if i != j:\n                    dp[i][j] = max(dp[i][j], dp[i - 1][j])\n        \n        return dp[n - 1][n - 1] if dp[n - 1][n - 1] > 0 else 0"}], "student-attendance-record-ii": [{"task_id": "student-attendance-record-ii", "completion": "class Solution(object):\n    def checkRecord(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n}], "happy-number": [{"task_id": "happy-number", "completion": "class Solution(object):\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        seen = set()\n        \n        while n not in seen:\n            seen.add(n)\n            n = sum(int(i)**2 for i in str(n))\n            \n        return n == 1"}], "search-insert-position": [{"task_id": "search-insert-position", "completion": "class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        if target in nums:\n            return nums.index(target)\n        else:\n            for i in range(len(nums)):\n                if nums[i] > target:\n                    return i\n            return len(nums)"}], "jump-game": [{"task_id": "jump-game", "completion": "class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        max_reach = 0\n        \n        for i, num in enumerate(nums):\n            if i > max_reach:\n                return False\n            max_reach = max(max_reach, i + num)\n            \n        return True"}], "minimum-path-sum": [{"task_id": "minimum-path-sum", "completion": "class Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(grid)\n        n = len(grid[0])\n        \n        for i in range(1,m):\n            grid[i][0] += grid[i-1][0]\n        \n        for j in range(1,n):\n            grid[0][j] += grid[0][j-1]\n        \n        for i in range(1,m):\n            for j in range(1,n):\n                grid[i][j] += min(grid[i-1][j],grid[i][j-1])\n        \n        return grid[-1][-1]"}], "count-and-say": [{"task_id": "count-and-say", "completion": "class Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        \n        if n == 1:\n            return '1'\n        \n        prev = '1'\n        curr = ''\n        count = 1\n        \n        for i in range(2, n+1):\n            count = 1\n            curr = ''\n            for j in range(1, len(prev)):\n                if prev[j] == prev[j-1]:\n                    count += 1\n                else:\n                    curr += str(count) + prev[j-1]\n                    count = 1\n            curr += str(count) + prev[-1]\n            prev = curr\n            \n        return curr"}], "split-array-largest-sum": [{"task_id": "split-array-largest-sum", "completion": "class Solution(object):\n    def splitArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # binary search\n        # find the max element in the array\n        # if the max element is greater than the sum of all elements in the array, return max element\n        # if the max element is less than the sum of all elements in the array, return the max element\n        # if the max element is equal to the sum of all elements in the array, return the max element - 1\n        \n        # binary search\n        # find the max element in the array\n        max_element = max(nums)\n        if max_element > sum(nums) // k:\n            return max_element\n        if max_element == sum(nums) // k:\n            return max_element - 1\n        \n        # binary search\n        # find the min element in the array\n        min_element = min(nums)\n        if min_element >= sum(nums) // k:\n            return min_element\n        \n        # binary search\n        # find the mid element in the array\n        left = max_element\n        right = sum(nums)\n        while left < right:\n            mid = (left + right) // 2\n            if self.canSplit(nums, mid, k):\n                right = mid\n            else:\n                left = mid + 1\n        return left"}], "search-in-rotated-sorted-array": [{"task_id": "search-in-rotated-sorted-array", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        # binary search\n        # if nums[0] <= nums[-1]:\n        #     return self.binary_search(nums, target)\n        # else:\n        #     return self.binary_search(nums[::-1], target)\n        \n        # binary search\n        l, r = 0, len(nums) - 1\n        while l <= r:\n            m = (l + r) // 2\n            if nums[m] == target:\n                return m\n            elif nums[m] < nums[r]:\n                if nums[m] < target <= nums[r]:\n                    l = m + 1\n                else:\n                    r = m - 1\n            else:\n                if nums[l] <= target < nums[m]:\n                    r = m - 1\n                else:\n                    l = m + 1\n        return -1"}], "letter-combinations-of-a-phone-number": [{"task_id": "letter-combinations-of-a-phone-number", "completion": "class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        \n        if len(digits) == 0:\n            return []\n        \n        mapping = {\n            '2': 'abc',\n            '3': 'def',\n            '4': 'ghi',\n            '5': 'jkl',\n            '6': 'mno',\n            '7': 'pqrs',\n            '8': 'tuv',\n            '9': 'wxyz'\n        }\n        \n        res = ['']\n        \n        for digit in digits:\n            res = [x + y for x in res for y in mapping[digit]]\n        \n        return res"}], "combination-sum": [{"task_id": "combination-sum", "completion": "class Solution(object):\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        res = []\n        self.dfs(candidates, target, 0, [], res)\n        return res\n    \n    def dfs(self, candidates, target, start, path, res):\n        if target == 0:\n            res.append(path[:])\n            return\n        for i in range(start, len(candidates)):\n            if candidates[i] > target:\n                break\n            if i > start and candidates[i] == candidates[i-1]:\n                continue\n            self.dfs(candidates, target - candidates[i], i, path + [candidates[i]], res)"}], "find-the-closest-palindrome": [{"task_id": "find-the-closest-palindrome", "completion": "class Solution(object):\n    def nearestPalindromic(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\"\n        \n        if n[0] == '9':\n            return str(int(n) + 1)\n        \n        if n[0] == '1':\n            if len(n) == 1:\n                return '9'\n            else:\n                return str(int(n) - 1)\n        \n        if n[0] == '0':\n            return '9'\n        \n        if n[0] == '5':\n            if len(n) == 1:\n                return '4'\n            else:\n                return str(int(n) - 1)\n        \n        if n[0] == '4':\n            if len(n) == 1:\n                return '9'\n            else:\n                return str(int(n) + 1)\n        \n        if n[0] == '6':\n            if len(n) == 1:\n                return '9'\n            else:\n                return str(int(n) + 1)\n        \n        if n[0] == '7':\n            if len(n) == 1:\n                return '9'\n            else:\n                return str(int(n) + 1)\n        \n        if n[0] == '8':\n            if len(n) == 1:\n                return '9'\n            else:\n                return str(int(n) + 1)\n        \n        if n[0] == '9':\n            if len(n) == 1:\n                return '8'\n            else:\n                return str(int(n) + 1)\n        \n        return str(int(n) + 1)"}], "spiral-matrix-ii": [{"task_id": "spiral-matrix-ii", "completion": "class Solution(object):\n    def generateMatrix(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        matrix = [[0] * n for _ in range(n)]\n        top, bottom, left, right = 0, n-1, 0, n-1\n        num = 1\n        \n        while top <= bottom and left <= right:\n            for i in range(left, right+1):\n                matrix[top][i] = num\n                num += 1\n            top += 1\n            \n            for i in range(top, bottom+1):\n                matrix[i][right] = num\n                num += 1\n            right -= 1\n            \n            if top <= bottom:\n                for i in range(right, left-1, -1):\n                    matrix[bottom][i] = num\n                    num += 1\n                bottom -= 1\n            \n            if left <= right:\n                for i in range(bottom, top-1, -1):\n                    matrix[i][left] = num\n                    num += 1\n                left += 1\n        \n        return matrix"}], "reverse-integer": [{"task_id": "reverse-integer", "completion": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x < 0:\n            sign = -1\n        else:\n            sign = 1\n        \n        x = abs(x)\n        \n        rev = 0\n        while x > 0:\n            rev = rev * 10 + x % 10\n            x = x // 10\n        \n        if rev > 2**31 - 1:\n            return 0\n        \n        return sign * rev"}], "rotate-image": [{"task_id": "rotate-image", "completion": "class Solution(object):\n    def rotate(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        n = len(matrix)\n        \n        # transpose\n        for i in range(n):\n            for j in range(i, n):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n        \n        # reverse each row\n        for i in range(n):\n            matrix[i].reverse()"}], "maximum-product-subarray": [{"task_id": "maximum-product-subarray", "completion": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_prod = nums[0]\n        min_prod = nums[0]\n        max_prod_so_far = nums[0]\n        \n        for i in range(1, len(nums)):\n            curr_max = max_prod * nums[i]\n            curr_min = min_prod * nums[i]\n            \n            max_prod = max(curr_max, curr_min, nums[i])\n            min_prod = min(curr_max, curr_min, nums[i])\n            \n            max_prod_so_far = max(max_prod_so_far, max_prod)\n            \n        return max_prod_so_far"}], "frog-jump": [{"task_id": "frog-jump", "completion": "class Solution(object):\n    def canCross(self, stones):\n        \"\"\"\n        :type stones: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        if stones[1] != 1:\n            return False\n        \n        dp = {stones[0]:set([1])}\n        \n        for stone in stones[1:]:\n            if stone not in dp:\n                return False\n            for k in dp[stone]:\n                if stone + k - 1 in dp:\n                    dp[stone + k - 1].add(k - 1)\n                if stone + k in dp:\n                    dp[stone + k].add(k)\n                if stone + k + 1 in dp:\n                    dp[stone + k + 1].add(k + 1)\n        \n        return len(dp[stones[-1]]) > 0"}], "relative-ranks": [{"task_id": "relative-ranks", "completion": "class Solution(object):\n    def findRelativeRanks(self, score):\n        \"\"\"\n        :type score: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        # sort the score in descending order\n        score = sorted(score, reverse=True)\n        \n        # create a hashmap to store the score and its index\n        score_map = {score[i]: i for i in range(len(score))}\n        \n        # create a list to store the result\n        result = [\"\"] * len(score)\n        \n        # assign the rank to the score\n        for i, s in encoma(score_map.items()):\n            if i == 1:\n                result[s] = \"Gold Medal\"\n            elif i == 2:\n                result[s] = \"Silver Medal\"\n            elif i == 3:\n                result[s] = \"Bronze Medal\"\n            else:\n                result[s] = str(i)\n        \n        return result"}], "longest-substring-without-repeating-characters": [{"task_id": "longest-substring-without-repeating-characters", "completion": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if len(s) == 0:\n            return 0\n        \n        max_len = 1\n        start = 0\n        end = 0\n        seen = {}\n        \n        while end < len(s):\n            if s[end] in seen:\n                start = max(start, seen[s[end]] + 1)\n            seen[s[end]] = end\n            max_len = max(max_len, end - start + 1)\n            end += 1\n        \n        return max_len"}], "substring-with-concatenation-of-all-words": [{"task_id": "substring-with-concatenation-of-all-words", "completion": "class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(words) == 0:\n            return []\n        \n        word_len = len(words[0])\n        word_count = len(words)\n        word_dict = {}\n        for word in words:\n            if word in word_dict:\n                word_dict[word] += 1\n            else:\n                word_dict[word] = 1\n        \n        word_dict_len = len(word_dict)\n        word_dict_len_count = len(word_dict) * word_len\n        word_dict_len_count_s = len(s) - word_dict_len_count\n        \n        if word_dict_len_count_s < 0:\n            return []\n        \n        word_dict_len_count_s_dict = {}\n        for i in range(word_dict_len_count_s):\n            if s[i:i+word_len] in word_dict:\n                if s[i:i+word_len] in word_dict_len_count_s_dict:\n                    word_dict_len_count_s_dict[s[i:i+word_len]] += 1\n                else:\n                    word_dict_len_count_s_dict[s[i:i+word_len]] = 1\n        \n        if word_dict_len_count_s_dict == word_dict:\n            return [0]\n        \n        result = []\n        for i in range(word_dict_len_count_s_dict[s[0:word_len]]):\n            if s[i:i+word_len] in word_dict:\n                result.append(i)\n        \n        for i in range(word_dict_len_count_s_dict[s[word_len:word_len*2]]):\n            if s[i+word_len:i+word_len*2] in word_dict:\n                result.append(i+word_len)\n        \n        for i in range(word_dict_len_count_s_dict[s[word_len*2:word_len*3]]):\n            if s[i+word_len*2:i+word_len*3] in word_dict:\n                result.append(i+word_len*2)\n        \n        return result"}], "max-chunks-to-make-sorted-ii": [{"task_id": "max-chunks-to-make-sorted-ii", "completion": "class Solution(object):\n    def maxChunksToSorted(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_val = arr[0]\n        res = 1\n        \n        for i in range(1, len(arr)):\n            if arr[i] > max_val:\n                max_val = arr[i]\n            if max_val == i:\n                res += 1\n                \n        return res"}], "insertion-sort-list": [{"task_id": "insertion-sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def insertionSortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        curr = head.next\n        \n        while curr:\n            if curr.val < dummy.next.val:\n                curr.next = dummy.next\n                dummy.next = curr\n            else:\n                prev = dummy\n                while prev.next and prev.next.val < curr.val:\n                    prev = prev.next\n                curr.next = prev.next\n                prev.next = curr\n            curr = curr.next\n        \n        return dummy.next"}], "remove-duplicates-from-sorted-list-ii": [{"task_id": "remove-duplicates-from-sorted-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        \n        curr = dummy\n        \n        while curr.next and curr.next.next:\n            if curr.next.val == curr.next.next.val:\n                val = curr.next.val\n                while curr.next and curr.next.val == val:\n                    curr.next = curr.next.next\n            else:\n                curr = curr.next\n        \n        return dummy.next"}], "3sum": [{"task_id": "3sum", "completion": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        \n        for i in range(len(nums)-2):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            l, r = i+1, len(nums)-1\n            while l < r:\n                if nums[i] + nums[l] + nums[r] == 0:\n                    res.append([nums[i], nums[l], nums[r]])\n                    l += 1\n                    r -= 1\n                    while l < r and nums[l] == nums[l-1]:\n                        l += 1\n                    while l < r and nums[r] == nums[r+1]:\n                        r -= 1\n                elif nums[i] + nums[l] + nums[r] < 0:\n                    l += 1\n                else:\n                    r -= 1\n        return res"}], "edit-distance": [{"task_id": "edit-distance", "completion": "class Solution(object):\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(word1), len(word2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        \n        for i in range(m + 1):\n            dp[i][0] = i\n        for j in range(n + 1):\n            dp[0][j] = j\n        \n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if word1[i - 1] == word2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = min(dp[i - 1][j - 1], dp[i - 1][j], dp[i][j - 1]) + 1\n        \n        return dp[m][n]"}], "hamming-distance": [{"task_id": "hamming-distance", "completion": "class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        \n        xor = x ^ y\n        count = 0\n        while xor:\n            count += 1\n            xor &= xor - 1\n        return count"}], "binary-tree-paths": [{"task_id": "binary-tree-paths", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        if not root.left and not root.right:\n            return [str(root.val)]\n        \n        left = self.binaryTreePaths(root.left)\n        right = self.binaryTreePaths(root.right)\n        \n        return [str(root.val) + '->' + path for path in left + right]"}], "reverse-pairs": [{"task_id": "reverse-pairs", "completion": "class Solution(object):\n    def reversePairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        def merge(nums, left, mid, right):\n            count = 0\n            i = left\n            j = mid + 1\n            while i <= mid:\n                while j <= right and nums[i] > 2 * nums[j]:\n                    j += 1\n                count += j - (mid + 1)\n                i += 1\n            nums[left:right + 1] = sorted(nums[left:right + 1])\n            return count\n        \n        if len(nums) < 2:\n            return 0\n        return merge(nums, 0, len(nums) // 2 - 1, len(nums) - 1)"}], "reaching-points": [{"task_id": "reaching-points", "completion": "class Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        \n        while tx > sx and ty > sy:\n            if tx > ty:\n                tx %= ty\n            else:\n                ty %= tx\n        return (sx == tx and sy <= ty) or (sy == ty and sx <= tx)"}], "compare-version-numbers": [{"task_id": "compare-version-numbers", "completion": "class Solution(object):\n    def compareVersion(self, version1, version2):\n        \"\"\"\n        :type version1: str\n        :type version2: str\n        :rtype: int\n        \"\"\"\n        \n        v1 = version1.split('.')\n        v2 = version2.split('.')\n        \n        for i in range(max(len(v1), len(v2))):\n            if i < len(v1):\n                v1[i] = int(v1[i])\n            else:\n                v1.append(0)\n            if i < len(v2):\n                v2[i] = int(v2[i])\n            else:\n                v2.append(0)\n            \n        for i in range(len(v1)):\n            if v1[i] > v2[i]:\n                return 1\n            elif v1[i] < v2[i]:\n                return -1\n        return 0"}], "best-time-to-buy-and-sell-stock-ii": [{"task_id": "best-time-to-buy-and-sell-stock-ii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## 1. \n        ## 2. \n        ## 3. \n        ## 4. \n        ## 5. \n        ## 6. \n        ## 7. \n        ## 8. \n        ## 9. \n        ## 10. \n        ## 11. \n        ## 12. \n        ## 13. \n        ## 14. \n        ## 15. \n        ## 16. \n        ## 17. \n        ## 18. \n        ## 19. \n        ## 20. \n        ## 21. \n        ## 22. \n        ## 23. \n        ## 24. \n        ## 25. \n        ## 26. \n        ## 27. \n        ## 28. \n        ## 29. \n        ## 30. \n        ## 31. \n        ## 32. \n        ## 33. \n        ## 34. \n        ## 35. \n        ## 36. \n        ## 37. \n        ## 38. \n        ## 39. \n        ## 40. \n        ## 41. \n        ## 42. \n        ## 43. \n        ## 44. \n        ## 45. \n        ## 46. \n        ## 47. \n        ## 48. \n        ## 49. \n        ## 50. \n        ## 51. \n        ## 52. \n        ## 53. \n        ## 54. \n        ## 55. \n        ## 56. \n        ## 57. \n        ## 58. \n        ## 59. \n        ## 60. \n        ## 61. \n        ## 62. \n        ## 63. \n        ## 64. \n        ## 65. \n        ## 66. \n        ## 67. \n        ## 68. \n        ## 69. \n        ## 70. \n        ## 71. \n        ## 72. \n        ## 73. \n        ## 74. \n        ## 75. \n        ## 76. \n        ## 77. \n        ## 78. \n        ## 79. \n        ## 80. \n        ## 81. \n        ## 82. \n        ## 83. \n        ## 84. \n        ## 85. \n        ## 86. \n        ## 87. \n        ## 88. \n        ## 89. \n        ## 90. \n        ## 91. \n        ## 92. \n        ## 93. \n        ## 94. \n        ## 95. \n        ## 96. \n        ## 97. \n        ## 98. \n        ## 99. \n        ## 100. \n        ## 101. \n        ## 102. \n        ## 103. \n        ## 104. \n        ## 105. \n        ## 106. \n        ## 107. \n        ## 108. \n        ## 109. \n        ## 110. \n        ## 111. \n        ## 112. \n        ## 113. \n        #"}], "course-schedule-iii": [{"task_id": "course-schedule-iii", "completion": "class Solution(object):\n    def scheduleCourse(self, courses):\n        \"\"\"\n        :type courses: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # sort by end time\n        courses.sort(key=lambda x: x[1])\n        \n        # greedy\n        # max heap\n        # if current course end time is less than max heap top, add to heap\n        # else, remove top and add current course\n        # return heap size\n        heap = []\n        time = 0\n        for duration, end in courses:\n            time += duration\n            heapq.heappush(heap, -duration)\n            if time > end:\n                time += heapq.heappop(heap)\n        return len(heap)"}], "reverse-nodes-in-k-group": [{"task_id": "reverse-nodes-in-k-group", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseKGroup(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or k == 1:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        curr = head\n        while curr:\n            count = 0\n            while curr and count < k:\n                curr = curr.next\n                count += 1\n            if count == k:\n                prev.next = self.reverse(head, curr)\n                prev = head\n                head = curr\n            else:\n                prev.next = head\n                break\n        return dummy.next\n    \n    def reverse(self, head, tail):\n        prev = None\n        curr = head\n        while curr != tail:\n            nxt = curr.next\n            curr.next = prev\n            prev = curr\n            curr = nxt\n        return curr"}], "repeated-substring-pattern": [{"task_id": "repeated-substring-pattern", "completion": "class Solution(object):\n    def repeatedSubstringPattern(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) < 2:\n            return False\n        \n        if s[0] == s[len(s)-1] and len(s) % (len(s)-1) == 0:\n            return True\n        \n        return s in (s * 2)[1:-1]"}], "unique-binary-search-trees": [{"task_id": "unique-binary-search-trees", "completion": "class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        dp = [0] * (n+1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, n+1):\n            for j in range(1, i+1):\n                dp[i] += dp[j-1] * dp[i-j]\n        \n        return dp[n]"}], "single-number-ii": [{"task_id": "single-number-ii", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # XOR\n        # a ^ a = 0\n        # a ^ 0 = a\n        # a ^ b ^ a = a ^ a ^ b = 0 ^ b = b\n        # a ^ b ^ c ^ a = (a ^ a) ^ b ^ c = b\n        # a ^ b ^ c ^ a ^ a = b ^ c\n        # a ^ b ^ c ^ a ^ b = c\n        # a ^ b ^ c ^ a ^ c = b\n        # a ^ b ^ c ^ b ^ c = a\n        # a ^ b ^ c ^ c ^ c = a\n        # a ^ b ^ c ^ c ^ a = b\n        # a ^ b ^ c ^ c ^ b = a\n        # a ^ b ^ c ^ c ^ c = a\n        # a ^ b ^ c ^ c ^ c = a\n        # a ^ b ^ c ^ c ^ c = a\n        # a ^ b ^ c ^ c ^ c = a\n        # a ^ b ^ c ^ c ^ c = a\n        # a ^ b ^ c ^ c ^ c = a\n        # a ^ b ^ c ^ c ^ c = a\n        # a ^ b ^ c ^ c ^ c = a\n        # a ^ b ^ c ^ c ^ c = a\n        # a ^ b ^ c ^ c ^ c = a\n        # a ^ b ^ c ^ c ^ c = a\n        # a ^ b ^ c ^ c ^ c = a\n        # a ^ b ^ c ^ c ^ c = a\n        # a ^ b ^ c ^ c ^ c = a\n        # a ^ b ^ c ^ c ^ c = a\n        # a ^ b ^ c ^ c ^ c = a\n        # a ^ b ^ c ^ c ^ c = a\n        # a ^ b ^ c ^ c ^ c = a\n        # a ^ b ^ c ^ c ^ c = a\n        # a ^ b ^ c ^ c ^ c = a\n        # a ^ b ^ c ^ c ^ c = a\n        # a ^ b ^ c ^ c ^ c = a\n        # a ^ b ^ c ^ c ^ c = a\n        # a ^ b ^ c ^ c ^ c = a\n        # a ^ b ^ c ^ c ^ c = a\n        # a ^ b ^ c ^ c ^ c = a\n        # a ^ b ^ c ^ c ^ c = a\n        # a ^ b ^ c ^ c ^ c = a\n        # a ^ b ^ c ^ c ^ c = a\n        # a ^ b ^ c ^ c ^ c = a\n        # a ^ b ^ c ^ c ^ c = a\n        # a ^ b ^ c ^ c ^ c = a\n        # a ^ b ^ c ^ c ^ c = a\n        # a ^ b ^ c ^ c ^ c = a\n        # a ^ b ^ c ^ c ^ c = a\n        # a ^ b ^ c ^ c ^ c = a\n        # a ^ b ^ c ^ c ^ c = a\n        # a ^ b ^ c ^ c ^ c = a\n        # a ^ b ^ c ^ c ^ c = a\n        # a ^ b ^ c ^ c ^ c = a\n        # a ^ b ^ c ^ c ^ c = a\n        # a ^ b ^ c ^ c ^ c = a\n        # a ^ b ^ c ^ c ^ c = a\n        # a ^ b ^ c ^ c ^ c = a\n        # a ^ b ^ c ^ c ^ c = a\n        # a ^ b ^ c ^ c ^ c = a\n        # a ^ b ^ c ^ c ^ c = a\n        # a ^ b ^ c ^ c ^ c = a\n        # a ^ b ^ c ^ c ^ c = a\n        # a ^ b ^ c ^ c ^ c = a\n        # a ^ b ^ c ^ c ^ c = a\n        # a ^ b ^ c ^ c ^ c = a\n        # a ^ b ^ c ^ c ^ c = a\n        # a ^ b ^ c ^ c ^ c = a\n        # a ^ b ^ c ^ c ^ c = a\n        # a ^ b ^ c ^ c ^ c = a\n        # a ^ b ^ c ^ c ^ c = a\n        # a ^ b ^ c ^ c ^ c = a\n        # a ^ b ^ c ^ c ^ c = a\n        # a ^ b ^ c ^ c ^ c = a\n        # a ^ b ^ c ^ c ^ c = a\n        # a ^ b ^"}], "stickers-to-spell-word": [{"task_id": "stickers-to-spell-word", "completion": "class Solution(object):\n    def minStickers(self, stickers, target):\n        \"\"\"\n        :type stickers: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. build a dict for each sticker\n        # 2. build a dict for each letter in target\n        # 3. for each letter in target, check if it can be made from stickers\n        # 4. if it can, add 1 to the count\n        # 5. if it can't, check if it can be made from stickers with one less sticker\n        # 6. if it can't, return -1\n        \n        sticker_dict = {}\n        for sticker in stickers:\n            sticker_dict[sticker] = sticker_dict.get(sticker, 0) + 1\n        \n        target_dict = {}\n        for letter in target:\n            target_dict[letter] = target_dict.get(letter, 0) + 1\n        \n        if target_dict.get(target[0], 0) == 0:\n            return -1\n        \n        queue = [(target_dict, 0)]\n        while queue:\n            curr_dict, count = queue.pop(0)\n            if curr_dict == target_dict:\n                return count\n            \n            for letter in curr_dict:\n                if curr_dict[letter] == 0:\n                    continue\n                new_dict = curr_dict.copy()\n                new_dict[letter] -= 1\n                for sticker in sticker_dict:\n                    if new_dict[sticker] >= sticker_dict[sticker]:\n                        continue\n                    new_dict[sticker] += sticker_dict[sticker] - new_dict[sticker]\n                queue.append((new_dict, count + 1))\n        \n        return -1"}], "strange-printer": [{"task_id": "strange-printer", "completion": "class Solution(object):\n    def strangePrinter(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        n = len(s)\n        dp = [[0] * n for _ in range(n)]\n        \n        for i in range(n - 1, -1, -1):\n            dp[i][i] = 1\n            for j in range(i + 1, n):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i][j - 1]\n                else:\n                    dp[i][j] = dp[i][j - 1] + 1\n                    for k in range(i, j):\n                        dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + 1][j])\n        \n        return dp[0][n - 1]"}], "sqrtx": [{"task_id": "sqrtx", "completion": "class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        \n        if x == 1:\n            return 1\n        \n        left = 1\n        right = x\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            if mid * mid == x:\n                return mid\n            elif mid * mid < x:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return right"}], "roman-to-integer": [{"task_id": "roman-to-integer", "completion": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        roman_dict = {'I':1, 'V':5, 'X':10, 'L':50, 'C':100, 'D':500, 'M':1000}\n        result = 0\n        for i in range(len(s)-1):\n            if roman_dict[s[i]] < roman_dict[s[i+1]]:\n                result -= roman_dict[s[i]]\n            else:\n                result += roman_dict[s[i]]\n        result += roman_dict[s[-1]]\n        return result"}], "contains-duplicate": [{"task_id": "contains-duplicate", "completion": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        return len(nums) != len(set(nums))"}], "sliding-window-maximum": [{"task_id": "sliding-window-maximum", "completion": "class Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums) == 0:\n            return []\n        \n        if k == 1:\n            return nums\n        \n        q = []\n        res = []\n        \n        for i in range(len(nums)):\n            if len(q) == 0:\n                q.append(i)\n            else:\n                if nums[q[0]] <= nums[i]:\n                    q.pop(0)\n                q.append(i)\n                \n            if i >= k - 1:\n                res.append(nums[q[0]])\n                \n        return res"}], "median-of-two-sorted-arrays": [{"task_id": "median-of-two-sorted-arrays", "completion": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        \n        if len(nums1) > len(nums2):\n            nums1, nums2 = nums2, nums1\n        \n        m, n = len(nums1), len(nums2)\n        if m == 0:\n            if n % 2 == 0:\n                return (nums2[n//2] + nums2[n//2 - 1]) / 2\n            else:\n                return nums2[n//2]\n        \n        if n == 0:\n            if m % 2 == 0:\n                return (nums1[m//2] + nums1[m//2 - 1]) / 2\n            else:\n                return nums1[m//2]\n        \n        if m == 1 and n == 1:\n            return (nums1[0] + nums2[0]) / 2\n        \n        if m == 1:\n            if n % 2 == 0:\n                return (nums1[0] + nums2[n//2 - 1]) / 2\n            else:\n                return nums2[n//2]\n        \n        if n == 1:\n            if m % 2 == 0:\n                return (nums1[m//2 - 1] + nums2[0]) / 2\n            else:\n                return nums1[m//2]\n        \n        if m == 2 and n == 2:\n            return (max(nums1[0], nums2[0]) + min(nums1[1], nums2[1])) / 2\n        \n        if m == 2:\n            if n % 2 == 0:\n                return (max(nums1[0], nums2[n//2 - 1]) + min(nums1[1], nums2[n//2])) / 2\n            else:\n                return min(nums1[0], nums2[n//2])\n        \n        if n == 2:\n            if m % 2 == 0:\n                return (max(nums1[m//2 - 1], nums2[0]) + min(nums1[m//2], nums2[1])) / 2\n            else:\n                return max(nums1[m//2], nums2[0])\n        \n        left, right = 0, m\n        while left < right:\n            mid1 = (left + right) // 2\n            mid2 = m - mid1\n            \n            if nums1[mid1] < nums2[mid2]:\n                left = mid1 + 1\n            else:\n                right = mid1\n        \n        mid1 = left\n        mid2 = m - mid1\n        \n        if (m + n) % 2 == 0:\n            if mid1 == 0:\n                return (nums2[mid2 - 1] + nums2[mid2]) / 2\n            elif mid2 == n:\n                return (nums1[mid1 - 1] + nums1[mid1]) / 2\n            else:\n                return (max(nums1[mid1 - 1], nums2[mid2 - 1]) + min(nums1[mid1], nums2[mid2])) / 2\n        else:\n            if mid1 == 0:\n                return nums2[mid2]\n            elif mid2 == n:\n                return nums1[mid1]\n            else:\n                return nums1[mid1]"}], "find-minimum-in-rotated-sorted-array": [{"task_id": "find-minimum-in-rotated-sorted-array", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        \n        # left, right = 0, len(nums) - 1\n        # while left < right:\n        #     mid = left + (right - left) // 2\n        #     if nums[mid] > nums[right]:\n        #         left = mid + 1\n        #     else:\n        #         right = mid\n        # return nums[left]"}], "pascals-triangle-ii": [{"task_id": "pascals-triangle-ii", "completion": "class Solution(object):\n    def getRow(self, rowIndex):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if rowIndex == 0:\n            return [1]\n        \n        if rowIndex == 1:\n            return [1,1]\n        \n        row = [1,1]\n        \n        for i in range(2, rowIndex+1):\n            row.append(row[i-1] * (rowIndex - i + 1) // i)\n        \n        return row"}], "path-sum-ii": [{"task_id": "path-sum-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def pathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        res = []\n        self.dfs(root, targetSum, [], res)\n        return res\n        \n    def dfs(self, root, targetSum, path, res):\n        if not root:\n            return\n        \n        if not root.left and not root.right and root.val == targetSum:\n            path.append(root.val)\n            res.append(path[:])\n            return\n        \n        if root.left:\n            self.dfs(root.left, targetSum - root.val, path + [root.val], res)\n        \n        if root.right:\n            self.dfs(root.right, targetSum - root.val, path + [root.val], res)"}], "construct-the-rectangle": [{"task_id": "construct-the-rectangle", "completion": "class Solution(object):\n    def constructRectangle(self, area):\n        \"\"\"\n        :type area: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. 2 * (area // 2) = area\n        # 2. 2 * (area // 2) + 1 = area\n        # 3. 2 * (area // 2) + 1 - area = area\n        # 4. 2 * (area // 2) + 1 - area = area\n        # 5. 2 * (area // 2) + 1 - area = area\n        # 6. 2 * (area // 2) + 1 - area = area\n        # 7. 2 * (area // 2) + 1 - area = area\n        # 8. 2 * (area // 2) + 1 - area = area\n        # 9. 2 * (area // 2) + 1 - area = area\n        # 10. 2 * (area // 2) + 1 - area = area\n        # 11. 2 * (area // 2) + 1 - area = area\n        # 12. 2 * (area // 2) + 1 - area = area\n        # 13. 2 * (area // 2) + 1 - area = area\n        # 14. 2 * (area // 2) + 1 - area = area\n        # 15. 2 * (area // 2) + 1 - area = area\n        # 16. 2 * (area // 2) + 1 - area = area\n        # 17. 2 * (area // 2) + 1 - area = area\n        # 18. 2 * (area // 2) + 1 - area = area\n        # 19. 2 * (area // 2) + 1 - area = area\n        # 20. 2 * (area // 2) + 1 - area = area\n        # 21. 2 * (area // 2) + 1 - area = area\n        # 22. 2 * (area // 2) + 1 - area = area\n        # 23. 2 * (area // 2) + 1 - area = area\n        # 24. 2 * (area // 2) + 1 - area = area\n        # 25. 2 * (area // 2) + 1 - area = area\n        # 26. 2 * (area // 2) + 1 - area = area\n        # 27. 2 * (area // 2) + 1 - area = area\n        # 28. 2 * (area // 2) + 1 - area = area\n        # 29. 2 * (area // 2) + 1 - area = area\n        # 30. 2 * (area // 2) + 1 - area = area\n        # 31. 2 * (area // 2) + 1 - area = area\n        # 32. 2 * (area // 2) + 1 - area = area\n        # 33. 2 * (area // 2) + 1 - area = area\n        # 34. 2 * (area // 2) + 1 - area = area\n        # 35. 2 * (area // 2) + 1 - area = area\n        # 36. 2 * (area // 2) + 1 - area = area\n        # 37. 2 * (area // 2) + 1 - area = area\n        # 38. 2 * (area // 2) + 1 - area = area\n        # 39. 2 * (area // 2) + 1 - area = area\n        # 40. 2 * (area // 2) + 1 - area = area\n        # 41. 2 * (area // 2) + 1 - area = area\n        # 42. 2 * (area // 2) + 1 - area = area\n        # 43. 2 * (area // 2) + 1 - area = area\n        # 44. 2 * (area // 2) + 1 - area = area\n        # 45. 2 * (area // 2) + 1 - area = area\n        # 46. 2 * (area // 2) + 1 - area = area\n        # 47. 2 * (area // 2) + 1 - area = area\n        # 48"}], "word-ladder-ii": [{"task_id": "word-ladder-ii", "completion": "class Solution(object):\n    def findLadders(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        # build graph\n        graph = collections.defaultdict(list)\n        for word in wordList:\n            for i in range(len(word)):\n                graph[word[:i] + '*' + word[i+1:]].append(word)\n        \n        # BFS\n        q = collections.deque([beginWord])\n        visited = {beginWord: 0}\n        while q:\n            word = q.popleft()\n            if word == endWord:\n                break\n            for i in range(len(word)):\n                for neighbor in graph[word[:i] + '*' + word[i+1:]]:\n                    if neighbor not in visited:\n                        visited[neighbor] = visited[word] + 1\n                        q.append(neighbor)\n        \n        # BFS\n        if endWord not in visited:\n            return []\n        res = []\n        while endWord in visited:\n            res.append([endWord])\n            endWord = visited[endWord]\n        return res[::-1]"}], "balanced-binary-tree": [{"task_id": "balanced-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isBalanced(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def height(root):\n            if not root:\n                return 0\n            left = height(root.left)\n            if left == -1:\n                return -1\n            right = height(root.right)\n            if right == -1:\n                return -1\n            if abs(left - right) > 1:\n                return -1\n            return max(left, right) + 1\n        \n        return height(root) != -1"}], "power-of-two": [{"task_id": "power-of-two", "completion": "class Solution(object):\n    def isPowerOfTwo(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        return n & (n - 1) == 0"}], "subsets-ii": [{"task_id": "subsets-ii", "completion": "class Solution(object):\n    def subsetsWithDup(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = [[]]\n        i = 0\n        while i < len(nums):\n            j = len(res) - 1\n            while j >= 0 and nums[i] == nums[i - 1]:\n                i += 1\n            k = len(res)\n            while j >= 0:\n                res.append(res[j] + [nums[i]])\n                j -= 1\n            while k < len(res):\n                res[k] += [nums[i]]\n                k += 1\n            i += 1\n        return res"}], "largest-rectangle-in-histogram": [{"task_id": "largest-rectangle-in-histogram", "completion": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \uc2a4\ud0dd\uc5d0 \uc778\ub371\uc2a4\ub97c \uc800\uc7a5\ud55c\ub2e4.\n        # 2. \uc2a4\ud0dd\uc5d0 \uc788\ub294 \uc778\ub371\uc2a4\ub97c \uae30\uc900\uc73c\ub85c \uc624\ub978\ucabd\uc5d0 \ub354 \ud070 \uc218\uac00 \uc788\ub294\uc9c0 \ud655\uc778\ud55c\ub2e4.\n        # 3. \uc624\ub978\ucabd\uc5d0 \ub354 \ud070 \uc218\uac00 \uc788\ub2e4\uba74 \uc624\ub978\ucabd \uc778\ub371\uc2a4\uc640 \uc624\ub978\ucabd \uc218\ub97c \uacf1\ud55c \uac12\uc744 \uc2a4\ud0dd\uc5d0 \uc800\uc7a5\ud55c\ub2e4.\n        # 4. \uc624\ub978\ucabd \uc218\uac00 \uc5c6\ub2e4\uba74 \uc624\ub978\ucabd \uc778\ub371\uc2a4\ub97c \uc2a4\ud0dd\uc5d0\uc11c \uaebc\ub0b8\ub2e4.\n        # 5. \uc2a4\ud0dd\uc5d0 \uc788\ub294 \uc778\ub371\uc2a4\ub97c \uae30\uc900\uc73c\ub85c \uc67c\ucabd\uc5d0 \ub354 \ud070 \uc218\uac00 \uc788\ub294\uc9c0 \ud655\uc778\ud55c\ub2e4.\n        # 6. \uc67c\ucabd\uc5d0 \ub354 \ud070 \uc218\uac00 \uc788\ub2e4\uba74 \uc67c\ucabd \uc778\ub371\uc2a4\uc640 \uc67c\ucabd \uc218\ub97c \uacf1\ud55c \uac12\uc744 \uc2a4\ud0dd\uc5d0 \uc800\uc7a5\ud55c\ub2e4.\n        # 7. \uc67c\ucabd \uc218\uac00 \uc5c6\ub2e4\uba74 \uc67c\ucabd \uc778\ub371\uc2a4\ub97c \uc2a4\ud0dd\uc5d0\uc11c \uaebc\ub0b8\ub2e4.\n        # 8. \uc2a4\ud0dd\uc5d0 \uc788\ub294 \uc778\ub371\uc2a4\ub97c \uae30\uc900\uc73c\ub85c \uc624\ub978\ucabd\uc5d0 \ub354 \ud070 \uc218\uac00 \uc788\ub294\uc9c0 \ud655\uc778\ud55c\ub2e4.\n        # 9. \uc624\ub978\ucabd\uc5d0 \ub354 \ud070 \uc218\uac00 \uc788\ub2e4\uba74 \uc624\ub978\ucabd \uc778\ub371\uc2a4\uc640 \uc624\ub978\ucabd \uc218\ub97c \uacf1\ud55c \uac12\uc744 \uc2a4\ud0dd\uc5d0 \uc800\uc7a5\ud55c\ub2e4.\n        # 10. \uc624\ub978\ucabd \uc218\uac00 \uc5c6\ub2e4\uba74 \uc624\ub978\ucabd \uc778\ub371\uc2a4\ub97c \uc2a4\ud0dd\uc5d0\uc11c \uaebc\ub0b8\ub2e4.\n        # 11. \uc2a4\ud0dd\uc5d0 \uc788\ub294 \uc778\ub371\uc2a4\ub97c \uae30\uc900\uc73c\ub85c \uc67c\ucabd\uc5d0 \ub354 \ud070 \uc218\uac00 \uc788\ub294\uc9c0 \ud655\uc778\ud55c\ub2e4.\n        # 12. \ufffd"}], "evaluate-reverse-polish-notation": [{"task_id": "evaluate-reverse-polish-notation", "completion": "class Solution(object):\n    def evalRPN(self, tokens):\n        \"\"\"\n        :type tokens: List[str]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        \n        for token in tokens:\n            if token not in \"+-*/\":\n                stack.append(int(token))\n            else:\n                second = stack.pop()\n                first = stack.pop()\n                if token == \"+\":\n                    stack.append(first + second)\n                elif token == \"-\":\n                    stack.append(first - second)\n                elif token == \"*\":\n                    stack.append(first * second)\n                else:\n                    stack.append(int(first / second))\n        \n        return stack[0]"}], "perfect-rectangle": [{"task_id": "perfect-rectangle", "completion": "class Solution(object):\n    def isRectangleCover(self, rectangles):\n        \"\"\"\n        :type rectangles: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        \n        x_min, y_min = float('inf'), float('inf')\n        x_max, y_max = float('-inf'), float('-inf')\n        area = 0\n        \n        for x1, y1, x2, y2 in rectangles:\n            x_min, y_min = min(x1, x_min), min(y1, y_min)\n            x_max, y_max = max(x2, x_max), max(y2, y_max)\n            area += (x2 - x1) * (y2 - y1)\n        \n        if area != (x_max - x_min) * (y_max - y_min):\n            return False\n        \n        if (x_min, y_min) not in rectangles or (x_max, y_min) not in rectangles or (x_min, y_max) not in rectangles or (x_max, y_max) not in rectangles:\n            return False\n        \n        return True"}], "excel-sheet-column-title": [{"task_id": "excel-sheet-column-title", "completion": "class Solution(object):\n    def convertToTitle(self, columnNumber):\n        \"\"\"\n        :type columnNumber: int\n        :rtype: str\n        \"\"\"\n        \n        res = \"\"\n        while columnNumber > 0:\n            columnNumber -= 1\n            res = chr(columnNumber % 26 + ord('A')) + res\n            columnNumber //= 26\n        return res"}], "maximum-subarray": [{"task_id": "maximum-subarray", "completion": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_sum = nums[0]\n        curr_sum = 0\n        \n        for num in nums:\n            if curr_sum < 0:\n                curr_sum = num\n            else:\n                curr_sum += num\n            max_sum = max(max_sum, curr_sum)\n        \n        return max_sum"}], "sliding-puzzle": [{"task_id": "sliding-puzzle", "completion": "class Solution(object):\n    def slidingPuzzle(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # convert board to a 1D array\n        board_str = \"\"\n        for row in board:\n            board_str += \"\".join(str(x) for x in row)\n        \n        # convert board_str to a}], "isomorphic-strings": [{"task_id": "isomorphic-strings", "completion": "class Solution(object):\n    def isIsomorphic(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_to_t = {}\n        t_to_s = {}\n        \n        for i in range(len(s)):\n            if s[i] in s_to_t:\n                if s_to_t[s[i]] != t[i]:\n                    return False\n            else:\n                if t[i] in t_to_s:\n                    return False\n                s_to_t[s[i]] = t[i]\n                t_to_s[t[i]] = s[i]\n                \n        return True"}], "search-in-rotated-sorted-array-ii": [{"task_id": "search-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        # find the pivot\n        l, r = 0, len(nums) - 1\n        while l < r:\n            m = (l + r) // 2\n            if nums[m] > nums[r]:\n                l = m + 1\n            else:\n                r = m\n        pivot = l\n        \n        # search in the left part\n        l, r = 0, pivot - 1\n        while l <= r:\n            m = (l + r) // 2\n            if nums[m] == target:\n                return True\n            elif nums[m] < target:\n                l = m + 1\n            else:\n                r = m - 1\n        \n        # search in the right part\n        l, r = pivot, len(nums) - 1\n        while l <= r:\n            m = (l + r) // 2\n            if nums[m] == target:\n                return True\n            elif nums[m] < target:\n                l = m + 1\n            else:\n                r = m - 1\n        \n        return False"}], "unique-paths-ii": [{"task_id": "unique-paths-ii", "completion": "class Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid):\n        \"\"\"\n        :type obstacleGrid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if obstacleGrid[0][0] == 1:\n            return 0\n        \n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        \n        dp = [0] * n\n        dp[0] = 1\n        \n        for i in range(m):\n            for j in range(n):\n                if obstacleGrid[i][j] == 1:\n                    dp[j] = 0\n                elif j > 0:\n                    dp[j] += dp[j-1]\n                    \n        return dp[-1]"}], "decode-ways-ii": [{"task_id": "decode-ways-ii", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s[0] == '0':\n            return 0\n        \n        if len(s) == 1:\n            return 1\n        \n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, len(s) + 1):\n            if s[i - 1] != '0':\n                dp[i] += dp[i - 1]\n            if s[i - 2] != '0' and int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        \n        return dp[-1]"}], "3sum-closest": [{"task_id": "3sum-closest", "completion": "class Solution(object):\n    def threeSumClosest(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        closest = nums[0] + nums[1] + nums[2]\n        \n        for i in range(len(nums)-2):\n            left = i + 1\n            right = len(nums) - 1\n            \n            while left < right:\n                sum = nums[i] + nums[left] + nums[right]\n                \n                if abs(sum - target) < abs(closest - target):\n                    closest = sum\n                    \n                if sum > target:\n                    right -= 1\n                else:\n                    left += 1\n                    \n        return closest"}], "maximum-depth-of-binary-tree": [{"task_id": "maximum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))"}], "intersection-of-two-arrays-ii": [{"task_id": "intersection-of-two-arrays-ii", "completion": "class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums1) > len(nums2):\n            return self.intersect(nums2, nums1)\n        \n        nums1.sort()\n        nums2.sort()\n        \n        i = 0\n        j = 0\n        res = []\n        \n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] == nums2[j]:\n                res.append(nums1[i])\n                i += 1\n                j += 1\n            elif nums1[i] < nums2[j]:\n                i += 1\n            else:\n                j += 1\n        \n        return res"}], "minimum-absolute-difference-in-bst": [{"task_id": "minimum-absolute-difference-in-bst", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def getMinimumDifference(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def inorder(root):\n            if root:\n                inorder(root.left)\n                self.min_diff = min(self.min_diff, root.val - self.prev)\n                self.prev = root.val\n                inorder(root.right)\n        \n        self.min_diff = float('inf')\n        self.prev = float('-inf')\n        inorder(root)\n        return self.min_diff"}], "find-mode-in-binary-search-tree": [{"task_id": "find-mode-in-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        max_count = 0\n        curr_count = 0\n        prev_val = root.val\n        max_val = root.val\n        res = []\n        \n        while root:\n            if root.left:\n                if root.left.val == prev_val:\n                    curr_count += 1\n                else:\n                    curr_count = 1\n                    prev_val = root.left.val\n            else:\n                curr_count = 1\n                prev_val = root.val\n            \n            if curr_count > max_count:\n                max_count = curr_count\n                res = [root.val]\n            elif curr_count == max_count:\n                res.append(root.val)\n            \n            if root.right:\n                if root.right.val == prev_val:\n                    curr_count += 1\n                else:\n                    curr_count = 1\n                    prev_val = root.right.val\n            else:\n                curr_count = 1\n                prev_val = root.val\n            \n            root = root.left if root.val > root.right.val else root.right\n        \n        return res"}], "find-the-index-of-the-first-occurrence-in-a-string": [{"task_id": "find-the-index-of-the-first-occurrence-in-a-string", "completion": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        \n        if needle == \"\":\n            return 0\n        \n        if needle in haystack:\n            return haystack.index(needle)\n        \n        return -1"}], "strong-password-checker": [{"task_id": "strong-password-checker", "completion": "class Solution(object):\n    def strongPasswordChecker(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. check if password is at least 6 characters long\n        if len(password) < 6:\n            return max(6 - len(password), 3)\n        \n        # 2. check if password is at most 20 characters long\n        if len(password) > 20:\n            return max(20 - len(password), 3)\n        \n        # 3. check if password contains at least one lowercase letter, at least one uppercase letter, and at least one digit\n        lower, upper, digit = False, False, False\n        for c in password:\n            if c.islower():\n                lower = True\n            elif c.isupper():\n                upper = True\n            elif c.isdigit():\n                digit = True\n        \n        if not (lower and upper and digit):\n            return max(3 - len(password), 0)\n        \n        # 4. check if password contains three repeating characters in a row\n        count = 0\n        prev = password[0]\n        for c in password[1:]:\n            if c == prev:\n                count += 1\n            else:\n                count = 0\n            if count >= 3:\n                count = 1\n            prev = c\n        \n        return max(3 - count, 0)"}], "factorial-trailing-zeroes": [{"task_id": "factorial-trailing-zeroes", "completion": "class Solution(object):\n    def trailingZeroes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n < 5:\n            return 0\n        \n        return n//5 + self.trailingZeroes(n//5)"}], "zigzag-conversion": [{"task_id": "zigzag-conversion", "completion": "class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        \n        if numRows == 1:\n            return s\n        \n        res = [\"\"] * numRows\n        currRow = 0\n        goingDown = False\n        \n        for c in s:\n            res[currRow] += c\n            if currRow == 0 or currRow == numRows - 1:\n                goingDown = not goingDown\n            currRow += 1 if goingDown else -1\n        \n        return \"\".join(res)"}], "trapping-rain-water": [{"task_id": "trapping-rain-water", "completion": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if not height:\n            return 0\n        \n        left, right = 0, len(height) - 1\n        left_max, right_max = height[left], height[right]\n        res = 0\n        \n        while left < right:\n            if left_max < right_max:\n                left += 1\n                left_max = max(left_max, height[left])\n                res += left_max - height[left]\n            else:\n                right -= 1\n                right_max = max(right_max, height[right])\n                res += right_max - height[right]\n                \n        return res"}], "find-all-numbers-disappeared-in-an-array": [{"task_id": "find-all-numbers-disappeared-in-an-array", "completion": "class Solution(object):\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        ## O(n) time and O(1) space\n        ## 1. Mark the number as negative if it is present in the array\n        ## 2. Iterate over the array and return the numbers that are not negative\n        \n        for i in range(len(nums)):\n            index = abs(nums[i]) - 1\n            if nums[index] > 0:\n                nums[index] *= -1\n        \n        return [i + 1 for i in range(len(nums)) if nums[i] > 0]"}], "count-of-smaller-numbers-after-self": [{"task_id": "count-of-smaller-numbers-after-self", "completion": "class Solution(object):\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. sort the array\n        # 2. use binary search to find the number of smaller elements to the right of each element\n        # 3. use a dict to store the number of smaller elements to the right of each element\n        # 4. return the number of smaller elements to the right of each element\n        \n        # 1. sort the array\n        nums = [(num, i) for i, num in enumerate(nums)]\n        nums.sort()\n        \n        # 2. use binary search to find the number of smaller elements to the right of each element\n        # 3. use a dict to store the number of smaller elements to the right of each element\n        # 4. return the number of smaller elements to the right of each element\n        res = [0] * len(nums)\n        d = {}\n        for num, i in nums:\n            res[i] = d.get(num, 0)\n            d[num] = d.get(num, 0) + 1 if num in d else 1\n        \n        return res"}], "set-intersection-size-at-least-two": [{"task_id": "set-intersection-size-at-least-two", "completion": "class Solution(object):\n    def intersectionSizeTwo(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        intervals.sort(key=lambda x: x[1])\n        ans = curr = 2\n        for i in intervals:\n            if i[0] > curr:\n                curr += 2\n            else:\n                curr += 1\n            ans += i[1] - i[0]\n        return ans"}], "symmetric-tree": [{"task_id": "symmetric-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if root is None:\n            return True\n        \n        return self.isMirror(root.left, root.right)\n        \n    def isMirror(self, left, right):\n        if left is None and right is None:\n            return True\n        if left is None or right is None:\n            return False\n        if left.val != right.val:\n            return False\n        return self.isMirror(left.left, right.right) and self.isMirror(left.right, right.left)"}], "number-of-atoms": [{"task_id": "number-of-atoms", "completion": "class Solution(object):\n    def countOfAtoms(self, formula):\n        \"\"\"\n        :type formula: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. split the formula into tokens\n        # 2. build a stack of tokens\n        # 3. iterate over the tokens\n        # 4. if token is a number, push it to the stack\n        # 5. if token is an atom, pop the stack and add it to the count\n        # 6. return the count\n        \n        stack = []\n        i = 0\n        while i < len(formula):\n            if formula[i].isdigit():\n                num = 0\n                while i < len(formula) and formula[i].isdigit():\n                    num = num * 10 + int(formula[i])\n                    i += 1\n                stack.append(num)\n            elif formula[i] == '(':\n                stack.append(self.countOfAtoms(formula[i+1:-1]))\n                i += 1\n            else:\n                j = i + 1\n                while j < len(formula) and formula[j].islower():\n                    j += 1\n                if j == i + 1:\n                    stack.append(1)\n                else:\n                    stack.append(int(formula[i+1:j]))\n                i = j\n        count = collections.Counter()\n        for num, atom in itertools.zip_longest(stack, formula, fillvalue=1):\n            if atom == '(':\n                count.update(count.pop().split(' '))\n            elif atom == ')':\n                break\n            else:\n                count[atom] += num\n        return ' '.join(str(v) + k for k, v in count.most_common())"}], "binary-tree-preorder-traversal": [{"task_id": "binary-tree-preorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def preorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = [root]\n        result = []\n        \n        while stack:\n            node = stack.pop()\n            result.append(node.val)\n            \n            if node.right:\n                stack.append(node.right)\n                \n            if node.left:\n                stack.append(node.left)\n                \n        return result"}], "power-of-four": [{"task_id": "power-of-four", "completion": "class Solution(object):\n    def isPowerOfFour(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 4 == 0:\n            n = n // 4\n        \n        return n == 1"}], "invert-binary-tree": [{"task_id": "invert-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def invertTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        \n        if root is None:\n            return None\n        \n        left = self.invertTree(root.left)\n        right = self.invertTree(root.right)\n        \n        root.left = right\n        root.right = left\n        \n        return root"}], "generate-parentheses": [{"task_id": "generate-parentheses", "completion": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        if n == 0:\n            return []\n        \n        if n == 1:\n            return ['()']\n        \n        res = []\n        for i in range(n):\n            left = self.generateParenthesis(i)\n            right = self.generateParenthesis(n - i - 1)\n            for l in left:\n                for r in right:\n                    res.append('({}){}'.format(l, r))\n        return res"}], "patching-array": [{"task_id": "patching-array", "completion": "class Solution(object):\n    def minPatches(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # edge case\n        if nums[0] > n:\n            return 1\n        \n        # initialize\n        patches = 0\n        i = 0\n        \n        # iterate through nums\n        while i < len(nums):\n            # if nums[i] is greater than n, add 1 patch\n            if nums[i] > n:\n                patches += 1\n                n += nums[i]\n            # if nums[i] is less than n, add nums[i] to n\n            else:\n                n += nums[i]\n                i += 1\n        \n        # if n is still greater than 1, add 1 patch\n        if n > 1:\n            patches += 1\n        \n        return patches"}], "longest-valid-parentheses": [{"task_id": "longest-valid-parentheses", "completion": "class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if len(s) < 2:\n            return 0\n        \n        max_len = 0\n        stack = [-1]\n        \n        for i in range(len(s)):\n            if s[i] == '(':\n                stack.append(i)\n            else:\n                stack.pop()\n                if not stack:\n                    stack.append(i)\n                else:\n                    max_len = max(max_len, i - stack[-1])\n        \n        return max_len"}], "fraction-to-recurring-decimal": [{"task_id": "fraction-to-recurring-decimal", "completion": "class Solution(object):\n    def fractionToDecimal(self, numerator, denominator):\n        \"\"\"\n        :type numerator: int\n        :type denominator: int\n        :rtype: str\n        \"\"\"\n        \n        if numerator == 0:\n            return '0'\n        \n        if numerator < 0 == denominator < 0:\n            sign = ''\n        elif numerator < 0:\n            sign = '-'\n        else:\n            sign = '+'\n        \n        numerator = abs(numerator)\n        denominator = abs(denominator)\n        \n        quotient, remainder = divmod(numerator, denominator)\n        \n        if remainder == 0:\n            return sign + str(quotient)\n        \n        remainder_dict = {}\n        remainder_dict[remainder] = len(remainder_dict)\n        \n        quotient_str = str(quotient)\n        remainder_str = ''\n        \n        while remainder != 0:\n            remainder *= 10\n            quotient, remainder = divmod(remainder, denominator)\n            \n            if remainder in remainder_dict:\n                remainder_str = '(' + remainder_str[:remainder_dict[remainder]] + ')'\n                break\n            \n            remainder_dict[remainder] = len(remainder_dict)\n            remainder_str += str(quotient)\n        \n        return sign + quotient_str + remainder_str"}], "sort-list": [{"task_id": "sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        # find the middle of the list\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # split the list into two halves\n        mid = slow.next\n        slow.next = None\n        \n        # sort the two halves\n        left = self.sortList(head)\n        right = self.sortList(mid)\n        \n        # merge the sorted halves\n        dummy = ListNode()\n        curr = dummy\n        while left and right:\n            if left.val < right.val:\n                curr.next = left\n                left = left.next\n            else:\n                curr.next = right\n                right = right.next\n            curr = curr.next\n        \n        # merge the remaining nodes\n        if left:\n            curr.next = left\n        else:\n            curr.next = right\n        \n        return dummy.next"}], "russian-doll-envelopes": [{"task_id": "russian-doll-envelopes", "completion": "class Solution(object):\n    def maxEnvelopes(self, envelopes):\n        \"\"\"\n        :type envelopes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not envelopes:\n            return 0\n        \n        envelopes.sort(key=lambda x: (x[0], -x[1]))\n        dp = [envelopes[0][1]]\n        \n        for i in range(1, len(envelopes)):\n            if envelopes[i][1] > dp[-1]:\n                dp.append(envelopes[i][1])\n            else:\n                left, right = 0, len(dp) - 1\n                while left < right:\n                    mid = (left + right) // 2\n                    if dp[mid] < envelopes[i][1]:\n                        left = mid + 1\n                    else:\n                        right = mid\n                dp[left] = envelopes[i][1]\n        \n        return len(dp)"}], "set-matrix-zeroes": [{"task_id": "set-matrix-zeroes", "completion": "class Solution(object):\n    def setZeroes(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        ## O(m+n) space\n        ## row and col are used to keep track of the rows and cols that have zeros\n        ## we iterate through the matrix and if we see a zero, we set the row and col to 0\n        ## we then iterate through the matrix again and if we see a non-zero value, we set the value to 0\n        ## in the first pass, we set the row and col to 0 if we see a zero\n        ## in the second pass, we set the value to 0 if we see a zero\n        \n        if not matrix:\n            return\n        \n        row = len(matrix)\n        col = len(matrix[0])\n        \n        for i in range(row):\n            for j in range(col):\n                if matrix[i][j] == 0:\n                    matrix[0][j] = 0\n                    matrix[i][0] = 0\n        \n        for i in range(1, row):\n            for j in range(1, col):\n                if matrix[i][0] == 0 or matrix[0][j] == 0:\n                    matrix[i][j] = 0\n        \n        if matrix[0][0] == 0:\n            for i in range(row):\n                matrix[i][0] = 0"}], "remove-nth-node-from-end-of-list": [{"task_id": "remove-nth-node-from-end-of-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # if the list is empty\n        if not head:\n            return None\n        \n        # if the list has only one node\n        if not head.next:\n            return None\n        \n        # if the list has two nodes\n        if not head.next.next:\n            head = head.next\n            return head\n        \n        # if the list has more than two nodes\n        # create a dummy node\n        dummy = ListNode(0)\n        dummy.next = head\n        \n        # create two pointers\n        slow = dummy\n        fast = dummy\n        \n        # move the fast pointer n nodes ahead\n        for i in range(n):\n            fast = fast.next\n        \n        # move the fast and slow pointers until fast reaches the end\n        while fast.next:\n            slow = slow.next\n            fast = fast.next\n        \n        # remove the node\n        slow.next = slow.next.next\n        \n        return dummy.next"}], "intersection-of-two-arrays": [{"task_id": "intersection-of-two-arrays", "completion": "class Solution(object):\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        return list(set(nums1) & set(nums2))"}], "super-washing-machines": [{"task_id": "super-washing-machines", "completion": "class Solution(object):\n    def findMinMoves(self, machines):\n        \"\"\"\n        :type machines: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if sum(machines) % len(machines) != 0:\n            return -1\n        \n        avg = sum(machines) // len(machines)\n        curr = 0\n        ans = 0\n        \n        for i in machines:\n            curr += i - avg\n            ans = max(ans, abs(curr))\n        \n        return ans"}], "kth-smallest-number-in-multiplication-table": [{"task_id": "kth-smallest-number-in-multiplication-table", "completion": "class Solution(object):\n    def findKthNumber(self, m, n, k):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def count(x):\n            return x//m + (x%m > 0)\n        \n        low, high = 1, m*n\n        \n        while low < high:\n            mid = (low + high)//2\n            if count(mid) < k:\n                low = mid + 1\n            else:\n                high = mid\n        \n        return low"}], "convert-sorted-list-to-binary-search-tree": [{"task_id": "convert-sorted-list-to-binary-search-tree", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedListToBST(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :rtype: Optional[TreeNode]\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        if not head.next:\n            return TreeNode(head.val)\n        \n        slow = head\n        fast = head\n        prev = None\n        \n        while fast and fast.next:\n            prev = slow\n            slow = slow.next\n            fast = fast.next.next\n        \n        prev.next = None\n        \n        root = TreeNode(slow.val)\n        root.left = self.sortedListToBST(head)\n        root.right = self.sortedListToBST(slow.next)\n        \n        return root"}], "merge-two-sorted-lists": [{"task_id": "merge-two-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: Optional[ListNode]\n        :type list2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        \n        if list1 is None:\n            return list2\n        if list2 is None:\n            return list1\n        \n        if list1.val < list2.val:\n            head = list1\n            list1 = list1.next\n        else:\n            head = list2\n            list2 = list2.next\n        \n        curr = head\n        \n        while list1 is not None and list2 is not None:\n            if list1.val < list2.val:\n                curr.next = list1\n                list1 = list1.next\n            else:\n                curr.next = list2\n                list2 = list2.next\n            curr = curr.next\n        \n        if list1 is None:\n            curr.next = list2\n        else:\n            curr.next = list1\n        \n        return head"}], "maximal-rectangle": [{"task_id": "maximal-rectangle", "completion": "class Solution(object):\n    def maximalRectangle(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m, n = len(matrix), len(matrix[0])\n        heights = [0] * n\n        max_area = 0\n        \n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == '1':\n                    heights[j] += 1\n                else:\n                    heights[j] = 0\n            max_area = max(max_area, self.largestRectangleArea(heights))\n        \n        return max_area\n    \n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        max_area = 0\n        \n        for i in range(len(heights)):\n            if not stack or heights[stack[-1]] <= heights[i]:\n                stack.append(i)\n            else:\n                while stack and heights[stack[-1]] > heights[i]:\n                    h = heights[stack.pop()]\n                    w = i if not stack else i - stack[-1] - 1\n                    max_area = max(max_area, h * w)\n                stack.append(i)\n        \n        while stack:\n            h = heights[stack.pop()]\n            w = len(heights) if not stack else len(heights) - stack[-1] - 1\n            max_area = max(max_area, h * w)\n        \n        return max_area"}], "subsets": [{"task_id": "subsets", "completion": "class Solution(object):\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if len(nums) == 0:\n            return [[]]\n        \n        if len(nums) == 1:\n            return [[], nums]\n        \n        res = []\n        res.append([])\n        \n        for i in nums:\n            for j in res:\n                res.append(j + [i])\n        \n        return res"}], "find-minimum-in-rotated-sorted-array-ii": [{"task_id": "find-minimum-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 1:\n            return nums[0]\n        \n        if nums[0] < nums[-1]:\n            return nums[0]\n        \n        left, right = 0, len(nums) - 1\n        \n        while left < right:\n            mid = (left + right) // 2\n            \n            if nums[mid] > nums[mid + 1]:\n                return nums[mid + 1]\n            \n            if nums[mid] < nums[mid - 1]:\n                return nums[mid]\n            \n            if nums[mid] > nums[left]:\n                left = mid + 1\n            else:\n                right = mid - 1"}], "valid-number": [{"task_id": "valid-number", "completion": "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        s = s.strip()\n        if not s:\n            return False\n        \n        if s[0] in ['+', '-']:\n            s = s[1:]\n        if not s:\n            return False\n        \n        if s[-1] in ['+', '-']:\n            s = s[:-1]\n        \n        if 'e' in s:\n            num, exp = s.split('e')\n            if not num.isdigit() or not exp.isdigit():\n                return False\n            if exp[0] == '+' or exp[0] == '-':\n                exp = exp[1:]\n            if not exp:\n                return False\n            if exp.isdigit():\n                return True\n            else:\n                return False\n        else:\n            if s.isdigit():\n                return True\n            else:\n                return False"}], "integer-to-roman": [{"task_id": "integer-to-roman", "completion": "class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        roman_dict = {1000: 'M', 900: 'CM', 500: 'D', 400: 'CD', 100: 'C', 90: 'XC', 50: 'L', 40: 'XL', 10: 'X', 9: 'IX', 5: 'V', 4: 'IV', 1: 'I'}\n        result = ''\n        for key in roman_dict.keys():\n            result += roman_dict[key] * (num // key)\n            num %= key\n        return result"}], "find-the-difference": [{"task_id": "find-the-difference", "completion": "class Solution(object):\n    def findTheDifference(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        # XOR\n        # 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10 ^ 11 ^ 12 ^ 13 ^ 14 ^ 15 ^ 16 ^ 17 ^ 18 ^ 19 ^ 20 ^ 21 ^ 22 ^ 23 ^ 24 ^ 25 ^ 26 ^ 27 ^ 28 ^ 29 ^ 30 ^ 31 ^ 32 ^ 33 ^ 34 ^ 35 ^ 36 ^ 37 ^ 38 ^ 39 ^ 40 ^ 41 ^ 42 ^ 43 ^ 44 ^ 45 ^ 46 ^ 47 ^ 48 ^ 49 ^ 50 ^ 51 ^ 52 ^ 53 ^ 54 ^ 55 ^ 56 ^ 57 ^ 58 ^ 59 ^ 60 ^ 61 ^ 62 ^ 63 ^ 64 ^ 65 ^ 66 ^ 67 ^ 68 ^ 69 ^ 70 ^ 71 ^ 72 ^ 73 ^ 74 ^ 75 ^ 76 ^ 77 ^ 78 ^ 79 ^ 80 ^ 81 ^ 82 ^ 83 ^ 84 ^ 85 ^ 86 ^ 87 ^ 88 ^ 89 ^ 90 ^ 91 ^ 92 ^ 93 ^ 94 ^ 95 ^ 96 ^ 97 ^ 98 ^ 99\n        \n        # 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10 ^ 11 ^ 12 ^ 13 ^ 14 ^ 15 ^ 16 ^ 17 ^ 18 ^ 19 ^ 20 ^ 21 ^ 22 ^ 23 ^ 24 ^ 25 ^ 26 ^ 27 ^ 28 ^ 29 ^ 30 ^ 31 ^ 32 ^ 33 ^ 34 ^ 35 ^ 36 ^ 37 ^ 38 ^ 39 ^ 40 ^ 41 ^ 42 ^ 43 ^ 44 ^ 45 ^ 46 ^ 47 ^ 48 ^ 49 ^ 50 ^ 51 ^ 52 ^ 53 ^ 54 ^ 55 ^ 56 ^ 57 ^ 58 ^ 59 ^ 60 ^ 61 ^ 62 ^ 63 ^ 64 ^ 65 ^ 66 ^ 67 ^ 68 ^ 69 ^ 70 ^ 71 ^ 72 ^ 73 ^ 74 ^ 75 ^ 76 ^ 77 ^ 78 ^ 79 ^ 80 ^ 81 ^ 82 ^ 83 ^ 84 ^ 85 ^ 86 ^ 87 ^ 88 ^ 89 ^ 90 ^ 91 ^ 92 ^ 93 ^ 94 ^ 95 ^ 96 ^ 97 ^ 98 ^ 99 ^ 100\n        \n        # 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10 ^ 11 ^ 12 ^ 13 ^ 14 ^ 15 ^ 16 ^ 17 ^ 18 ^ 19 ^ 20 ^ 21 ^ 22 ^ 23 ^ 24 ^ 25 ^ 26 ^ 27 ^ 28 ^ 29 ^ 30 ^ 31 ^ 32 ^ 33 ^ 34 ^ 35 ^ 36 ^ 37 ^ 38 ^ 39 ^ 40 ^ 41 ^ 42 ^ 43 ^ 44 ^ 45 ^ 46 ^ 47 ^ 48 ^ 49 ^ 50 ^ 51 ^ 52 ^ 53 ^ 54 ^ 55 ^ 56 ^ 57 ^ 5"}], "sudoku-solver": [{"task_id": "sudoku-solver", "completion": "class Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        def find_empty_space(board):\n            for i in range(9):\n                for j in range(9):\n                    if board[i][j] == '.':\n                        return (i,j)\n            return None\n        \n        def is_valid(board, num, pos):\n            # check row\n            for i in range(9):\n                if board[pos[0]][i] == num and pos[1] != i:\n                    return False\n            \n            # check column\n            for i in range(9):\n                if board[i][pos[1]] == num and pos[0] != i:\n                    return False\n            \n            # check box\n            box_x = pos[0] // 3\n            box_y = pos[1] // 3\n            \n            for i in range(box_x * 3, box_x * 3 + 3):\n                for j in range(box_y * 3, box_y * 3 + 3):\n                    if board[i][j] == num and (i,j) != pos:\n                        return False\n            \n            return True\n        \n        def solve(board):\n            empty = find_empty_space(board)\n            if empty is None:\n                return True\n            \n            for i in range(1,10):\n                if is_valid(board, str(i), empty):\n                    board[empty[0]][empty[1]] = str(i)\n                    \n                    if solve(board):\n                        return True\n                    \n                    board[empty[0]][empty[1]] = '.'\n            \n            return False\n        \n        solve(board)"}], "recover-binary-search-tree": [{"task_id": "recover-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        # find the first and second node\n        first = None\n        second = None\n        prev = None\n        \n        while root:\n            if root.left:\n                # find the inorder predecessor\n                pred = root.left\n                while pred.right and pred.right != root:\n                    pred = pred.right\n                \n                if pred.right == None:\n                    pred.right = root\n                    root = root.left\n                else:\n                    if first == None:\n                        first = pred.right\n                    second = root\n                    pred.right = None\n                    root = root.right\n            else:\n                if prev and prev.val > root.val:\n                    if first == None:\n                        first = prev\n                    second = root\n                prev = root\n                root = root.right\n        \n        first.val, second.val = second.val, first.val"}], "palindrome-linked-list": [{"task_id": "palindrome-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        \n        if not head or not head.next:\n            return True\n        \n        # find the middle of the list\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # reverse the second half of the list\n        prev = None\n        while slow:\n            nxt = slow.next\n            slow.next = prev\n            prev = slow\n            slow = nxt\n        \n        # compare the first half and the second half\n        while prev:\n            if prev.val != head.val:\n                return False\n            prev = prev.next\n            head = head.next\n        \n        return True"}], "valid-perfect-square": [{"task_id": "valid-perfect-square", "completion": "class Solution(object):\n    def isPerfectSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return True\n        \n        left = 1\n        right = num\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            if mid * mid == num:\n                return True\n            elif mid * mid > num:\n                right = mid - 1\n            else:\n                left = mid + 1\n        \n        return False"}], "counting-bits": [{"task_id": "counting-bits", "completion": "class Solution(object):\n    def countBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if n == 0:\n            return [0]\n        \n        if n == 1:\n            return [0, 1]\n        \n        if n == 2:\n            return [0, 1, 1]\n        \n        if n == 3:\n            return [0, 1, 1, 2]\n        \n        if n == 4:\n            return [0, 1, 1, 2, 2]\n        \n        if n == 5:\n            return [0, 1, 1, 2, 2, 3]\n        \n        if n == 6:\n            return [0, 1, 1, 2, 2, 3, 3]\n        \n        if n == 7:\n            return [0, 1, 1, 2, 2, 3, 3, 4]\n        \n        if n == 8:\n            return [0, 1, 1, 2, 2, 3, 3, 4, 4]\n        \n        if n == 9:\n            return [0, 1, 1, 2, 2, 3, 3, 4, 4, 5]\n        \n        if n == 10:\n            return [0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5]\n        \n        if n == 11:\n            return [0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6]\n        \n        if n == 12:\n            return [0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]\n        \n        if n == 13:\n            return [0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7]\n        \n        if n == 14:\n            return [0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7]\n        \n        if n == 15:\n            return [0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8]\n        \n        if n == 16:\n            return [0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8]\n        \n        if n == 17:\n            return [0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9]\n        \n        if n == 18:\n            return [0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]\n        \n        if n == 19:\n            return [0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10]\n        \n        if n == 20:\n            return [0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]\n        \n        if n == 21:\n            return [0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9,"}], "remove-linked-list-elements": [{"task_id": "remove-linked-list-elements", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        while head and head.val == val:\n            head = head.next\n        \n        if not head:\n            return None\n        \n        curr = head\n        while curr.next:\n            if curr.next.val == val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        \n        return head"}], "scramble-string": [{"task_id": "scramble-string", "completion": "class Solution(object):\n    def isScramble(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        \n        if s1 == s2:\n            return True\n        \n        if sorted(s1) != sorted(s2):\n            return False\n        \n        for i in range(1, len(s1)):\n            if self.isScramble(s1[:i], s2[:i]) and self.isScramble(s1[i:], s2[i:]):\n                return True\n            if self.isScramble(s1[:i], s2[-i:]) and self.isScramble(s1[i:], s2[:-i]):\n                return True\n        return False"}], "simplify-path": [{"task_id": "simplify-path", "completion": "class Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        \n        stack = []\n        for p in path.split('/'):\n            if p == '..' and stack:\n                stack.pop()\n            elif p and p != '.':\n                stack.append(p)\n        return '/' + '/'.join(stack)"}], "word-search-ii": [{"task_id": "word-search-ii", "completion": "class Solution(object):\n    def findWords(self, board, words):\n        \"\"\"\n        :type board: List[List[str]]\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        trie = {}\n        for word in words:\n            node = trie\n            for char in word:\n                if char not in node:\n                    node[char] = {}\n                node = node[char]\n            node['#'] = word\n        \n        res = []\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                self.dfs(board, i, j, trie, res)\n        return res\n    \n    def dfs(self, board, i, j, node, res):\n        char = board[i][j]\n        if char not in node:\n            return\n        \n        word = node.pop(char)\n        if '#' in node:\n            res.append(node.pop('#'))\n        \n        if i > 0:\n            self.dfs(board, i-1, j, node, res)\n        if i < len(board)-1:\n            self.dfs(board, i+1, j, node, res)\n        if j > 0:\n            self.dfs(board, i, j-1, node, res)\n        if j < len(board[0])-1:\n            self.dfs(board, i, j+1, node, res)\n        \n        node[char] = word"}], "valid-anagram": [{"task_id": "valid-anagram", "completion": "class Solution(object):\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_dict = {}\n        t_dict = {}\n        \n        for i in range(len(s)):\n            s_dict[s[i]] = 1 + s_dict.get(s[i], 0)\n            t_dict[t[i]] = 1 + t_dict.get(t[i], 0)\n        \n        for key in s_dict:\n            if s_dict[key] != t_dict.get(key, 0):\n                return False\n        \n        return True"}], "valid-sudoku": [{"task_id": "valid-sudoku", "completion": "class Solution(object):\n    def isValidSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        \n        # check rows\n        for row in board:\n            if len(set(row)) != len(row):\n                return False\n        \n        # check columns\n        for col in zip(*board):\n            if len(set(col)) != len(col):\n                return False\n        \n        # check 3x3 sub-boxes\n        for i in (0, 3, 6):\n            for j in (0, 3, 6):\n                sub = [board[x][y] for x in range(i, i+3) for y in range(j, j+3)]\n                if len(set(sub)) != len(sub):\n                    return False\n        \n        return True"}], "fizz-buzz": [{"task_id": "fizz-buzz", "completion": "class Solution(object):\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        res = []\n        for i in range(1, n+1):\n            if i % 3 == 0 and i % 5 == 0:\n                res.append(\"FizzBuzz\")\n            elif i % 3 == 0:\n                res.append(\"Fizz\")\n            elif i % 5 == 0:\n                res.append(\"Buzz\")\n            else:\n                res.append(str(i))\n        return res"}], "reverse-words-in-a-string": [{"task_id": "reverse-words-in-a-string", "completion": "class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # split the string into words\n        words = s.split()\n        \n        # reverse the order of the words\n        words.reverse()\n        \n        # join the words back into a single string\n        return ' '.join(words)"}], "excel-sheet-column-number": [{"task_id": "excel-sheet-column-number", "completion": "class Solution(object):\n    def titleToNumber(self, columnTitle):\n        \"\"\"\n        :type columnTitle: str\n        :rtype: int\n        \"\"\"\n        \n        res = 0\n        for i in range(len(columnTitle)):\n            res += (ord(columnTitle[i]) - ord('A') + 1) * (26 ** (len(columnTitle) - i - 1))\n        return res"}], "candy": [{"task_id": "candy", "completion": "class Solution(object):\n    def candy(self, ratings):\n        \"\"\"\n        :type ratings: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(ratings)\n        candies = [1] * n\n        \n        for i in range(1, n):\n            if ratings[i] > ratings[i-1]:\n                candies[i] = candies[i-1] + 1\n        \n        for i in range(n-2, -1, -1):\n            if ratings[i] > ratings[i+1]:\n                candies[i] = max(candies[i], candies[i+1] + 1)\n        \n        return sum(candies)"}], "same-tree": [{"task_id": "same-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val != q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"}], "reorder-list": [{"task_id": "reorder-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reorderList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: None Do not return anything, modify head in-place instead.\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        slow = head\n        fast = head.next\n        \n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        second = slow.next\n        slow.next = None\n        \n        second = self.reverse(second)\n        \n        first = head\n        \n        while second:\n            temp = first.next\n            first.next = second\n            second = second.next\n            first.next.next = temp\n            first = temp\n        \n        return head\n        \n    def reverse(self, head):\n        prev = None\n        curr = head\n        \n        while curr:\n            temp = curr.next\n            curr.next = prev\n            prev = curr\n            curr = temp\n        \n        return prev"}], "word-pattern": [{"task_id": "word-pattern", "completion": "class Solution(object):\n    def wordPattern(self, pattern, s):\n        \"\"\"\n        :type pattern: str\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        s = s.split()\n        if len(pattern) != len(s):\n            return False\n        \n        d = {}\n        for i, j in zip(pattern, s):\n            if i not in d:\n                if j in d.values():\n                    return False\n                d[i] = j\n            elif d[i] != j:\n                return False\n        return True"}], "permutations": [{"task_id": "permutations", "completion": "class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if len(nums) == 1:\n            return [nums]\n        \n        res = []\n        for i in range(len(nums)):\n            if i == 0 or nums[i] != nums[i-1]:\n                for j in self.permute(nums[:i] + nums[i+1:]):\n                    res.append([nums[i]] + j)\n        return res"}], "search-a-2d-matrix": [{"task_id": "search-a-2d-matrix", "completion": "class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        \n        low = 0\n        high = m*n - 1\n        \n        while low <= high:\n            mid = (low + high) // 2\n            if matrix[mid//n][mid%n] == target:\n                return True\n            elif matrix[mid//n][mid%n] < target:\n                low = mid + 1\n            else:\n                high = mid - 1\n        \n        return False"}], "add-two-numbers": [{"task_id": "add-two-numbers", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        carry = 0\n        head = ListNode(0)\n        curr = head\n        \n        while l1 or l2 or carry:\n            if l1:\n                carry += l1.val\n                l1 = l1.next\n            if l2:\n                carry += l2.val\n                l2 = l2.next\n            curr.next = ListNode(carry % 10)\n            carry //= 10\n            curr = curr.next\n            \n        return head.next"}], "number-complement": [{"task_id": "number-complement", "completion": "class Solution(object):\n    def findComplement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. convert to binary\n        # 2. flip bits\n        # 3. convert back to decimal\n        \n        # 1. convert to binary\n        binary = bin(num)[2:]\n        \n        # 2. flip bits\n        binary = binary.replace('1', '0')\n        binary = binary.replace('0', '1')\n        \n        # 3. convert back to decimal\n        return int(binary, 2)"}], "arithmetic-slices-ii-subsequence": [{"task_id": "arithmetic-slices-ii-subsequence", "completion": "class Solution(object):\n    def numberOfArithmeticSlices(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 3:\n            return 0\n        \n        diff = nums[1] - nums[0]\n        count = 0\n        res = 0\n        \n        for i in range(2, len(nums)):\n            if nums[i] - nums[i-1] == diff:\n                count += 1\n                res += count\n            else:\n                diff = nums[i] - nums[i-1]\n                count = 0\n        \n        return res"}], "text-justification": [{"task_id": "text-justification", "completion": "class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\"\n        \n        res = []\n        cur_len = 0\n        cur_words = []\n        \n        for word in words:\n            if cur_len + len(word) + len(cur_words) > maxWidth:\n                if len(cur_words) == 1:\n                    res.append(cur_words[0] + ' ' * (maxWidth - cur_len))\n                else:\n                    spaces = (maxWidth - cur_len) // (len(cur_words) - 1)\n                    extra = (maxWidth - cur_len) % (len(cur_words) - 1)\n                    res.append(''.join(cur_words[i] + ' ' * (spaces + 1) + (' ' if i < extra else '')) for i in range(len(cur_words)))\n                cur_len = 0\n                cur_words = []\n            cur_len += len(word)\n            cur_words.append(word)\n        if cur_words:\n            res.append(' '.join(cur_words) + ' ' * (maxWidth - cur_len - len(cur_words) + 1))\n        return res"}], "binary-tree-postorder-traversal": [{"task_id": "binary-tree-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def postorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = [root]\n        result = []\n        \n        while stack:\n            node = stack.pop()\n            result.append(node.val)\n            \n            if node.left:\n                stack.append(node.left)\n            if node.right:\n                stack.append(node.right)\n                \n        return result[::-1]"}], "container-with-most-water": [{"task_id": "container-with-most-water", "completion": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # two pointers\n        # left = 0\n        # right = len(height) - 1\n        # max_area = 0\n        # while left < right:\n        #     area = min(height[left], height[right]) * (right - left)\n        #     max_area = max(max_area, area)\n        #     if height[left] < height[right]:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return max_area\n        \n        # two pointers\n        left = 0\n        right = len(height) - 1\n        max_area = 0\n        while left < right:\n            area = min(height[left], height[right]) * (right - left)\n            max_area = max(max_area, area)\n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n        return max_area"}], "concatenated-words": [{"task_id": "concatenated-words", "completion": "class Solution(object):\n    def findAllConcatenatedWordsInADict(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        word_set = set(words)\n        res = []\n        \n        for word in words:\n            if self.dfs(word, word_set):\n                res.append(word)\n                \n        return res\n    \n    def dfs(self, word, word_set):\n        for i in range(1, len(word)):\n            prefix = word[:i]\n            suffix = word[i:]\n            if prefix in word_set and (suffix in word_set or self.dfs(suffix, word_set)):\n                return True\n        return False"}], "base-7": [{"task_id": "base-7", "completion": "class Solution(object):\n    def convertToBase7(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        \n        if num < 0:\n            num = -num\n            sign = -1\n        else:\n            sign = 1\n        \n        res = \"\"\n        while num > 0:\n            res = str(num % 7) + res\n            num = num // 7\n        \n        return res if sign == 1 else \"-\" + res"}], "nim-game": [{"task_id": "nim-game", "completion": "class Solution(object):\n    def canWinNim(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        return n%4 != 0"}], "n-queens-ii": [{"task_id": "n-queens-ii", "completion": "class Solution(object):\n    def totalNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        def backtrack(row, cols, diag1, diag2):\n            if row == n:\n                return 1\n            \n            count = 0\n            for col in range(n):\n                if col not in cols and row + col not in diag1 and row - col not in diag2:\n                    cols.add(col)\n                    diag1.add(row + col)\n                    diag2.add(row - col)\n                    count += backtrack(row + 1, cols, diag1, diag2)\n                    cols.remove(col)\n                    diag1.remove(row + col)\n                    diag2.remove(row - col)\n            return count\n        \n        return backtrack(0, set(), set(), set())"}], "n-queens": [{"task_id": "n-queens", "completion": "class Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def backtrack(row, cols, diag1, diag2):\n            if row == n:\n                return [['.'*col + 'Q' + '.'*(n-col-1) for col in cols]]\n            \n            ans = []\n            for col in range(n):\n                if cols & (1 << col) == 0 and diag1 & (1 << (row + col)) == 0 and diag2 & (1 << (row - col + n - 1)) == 0:\n                    cols |= (1 << col)\n                    diag1 |= (1 << (row + col))\n                    diag2 |= (1 << (row - col + n - 1))\n                    ans.extend(backtrack(row + 1, cols, diag1, diag2))\n                    cols ^= (1 << col)\n                    diag1 ^= (1 << (row + col))\n                    diag2 ^= (1 << (row - col + n - 1))\n            return ans\n        \n        return backtrack(0, 0, 0, 0)"}], "word-search": [{"task_id": "word-search", "completion": "class Solution(object):\n    def exist(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if not word:\n            return True\n        \n        if not board:\n            return False\n        \n        if len(board) == 1 and len(board[0]) == 1:\n            return board[0][0] == word\n        \n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if board[i][j] == word[0]:\n                    if self.dfs(board, word[1:], i, j):\n                        return True\n        return False\n    \n    def dfs(self, board, word, i, j):\n        if len(word) == 0:\n            return True\n        \n        if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != word[0]:\n            return False\n        \n        temp = board[i][j]\n        board[i][j] = '#'\n        \n        res = self.dfs(board, word[1:], i + 1, j) or self.dfs(board, word[1:], i - 1, j) or self.dfs(board, word[1:], i, j + 1) or self.dfs(board, word[1:], i, j - 1)\n        \n        board[i][j] = temp\n        \n        return res"}], "merge-sorted-array": [{"task_id": "merge-sorted-array", "completion": "class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        \n        # if nums1 is empty, just return nums2\n        if m == 0:\n            nums1[:] = nums2[:]\n            return\n        \n        # if nums2 is empty, just return nums1\n        if n == 0:\n            return\n        \n        # if nums1 is empty, just return nums2\n        if m == 0:\n            return\n        \n        # if nums2 is empty, just return nums1\n        if n == 0:\n            return\n        \n        # if nums1 is empty, just return nums2\n        if m == 0:\n            return\n        \n        # if nums2 is empty, just return nums1\n        if n == 0:\n            return\n        \n        # if nums1 is empty, just return nums2\n        if m == 0:\n            return\n        \n        # if nums2 is empty, just return nums1\n        if n == 0:\n            return\n        \n        # if nums1 is empty, just return nums2\n        if m == 0:\n            return\n        \n        # if nums2 is empty, just return nums1\n        if n == 0:\n            return\n        \n        # if nums1 is empty, just return nums2\n        if m == 0:\n            return\n        \n        # if nums2 is empty, just return nums1\n        if n == 0:\n            return\n        \n        # if nums1 is empty, just return nums2\n        if m == 0:\n            return\n        \n        # if nums2 is empty, just return nums1\n        if n == 0:\n            return\n        \n        # if nums1 is empty, just return nums2\n        if m == 0:\n            return\n        \n        # if nums2 is empty, just return nums1\n        if n == 0:\n            return\n        \n        # if nums1 is empty, just return nums2\n        if m == 0:\n            return\n        \n        # if nums2 is empty, just return nums1\n        if n == 0:\n            return\n        \n        # if nums1 is empty, just return nums2\n        if m == 0:\n            return\n        \n        # if nums2 is empty, just return nums1\n        if n == 0:\n            return\n        \n        # if nums1 is empty, just return nums2\n        if m == 0:\n            return\n        \n        # if nums2 is empty, just return nums1\n        if n == 0:\n            return\n        \n        # if nums1 is empty, just return nums2\n        if m == 0:\n            return\n        \n        # if nums2 is empty, just return nums1\n        if n == 0:\n            return\n        \n        # if nums1 is empty, just return nums2\n        if m == 0:\n            return\n        \n        # if nums2 is empty, just return nums1\n        if n == 0:\n            return\n        \n        # if nums1 is empty, just return nums2\n        if m == 0:\n            return\n        \n        # if nums2 is empty, just return nums1\n        if n == 0:\n            return\n        \n        # if nums1 is empty, just return nums2\n        if m == 0:\n            return\n        \n        # if nums2 is empty, just return nums1\n        if n == 0:\n            return\n        \n        # if nums1 is empty, just return nums2\n        if m == 0:\n            return\n        \n        # if nums2 is empty, just return nums1\n        if n == 0:\n            return\n        \n        # if nums1 is empty, just return nums2\n        if m == 0:\n            return\n        \n        # if nums2 is empty, just return nums1\n        if n == 0:\n            return\n        \n        # if nums1 is empty, just return nums2\n        if m == 0:\n            return\n        \n        # if nums2 is empty, just return nums1\n        if n == 0:\n            return\n        \n        # if nums1 is empty, just return nums2\n        if m == 0:\n            return\n        \n        # if nums2 is empty, just return num"}], "third-maximum-number": [{"task_id": "third-maximum-number", "completion": "class Solution(object):\n    def thirdMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max1 = max2 = max3 = float('-inf')\n        \n        for num in nums:\n            if num > max1:\n                max3 = max2\n                max2 = max1\n                max1 = num\n            elif num > max2:\n                max3 = max2\n                max2 = num\n            elif num > max3:\n                max3 = num\n                \n        return max3 if max3 != float('-inf') else max1"}]}