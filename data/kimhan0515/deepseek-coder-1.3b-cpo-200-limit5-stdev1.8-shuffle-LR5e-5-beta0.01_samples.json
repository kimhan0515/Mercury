{"spiral-matrix": [{"task_id": "spiral-matrix", "completion": "class Solution(object):\n    def spiralOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not matrix:\n            return []\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        res = []\n        left, right = 0, n-1\n        top, bottom = 0, m-1\n        \n        while left <= right and top <= bottom:\n            for i in range(left, right+1):\n                res.append(matrix[top][i])\n            top += 1\n            \n            for i in range(top, bottom+1):\n                res.append(matrix[i][right])\n            right -= 1\n            \n            if top <= bottom:\n                for i in range(right, left-1, -1):\n                    res.append(matrix[bottom][i])\n                bottom -= 1\n            \n            if left <= right:\n                for i in range(bottom, top-1, -1):\n                    res.append(matrix[i][left])\n                left += 1\n        \n        return res"}], "summary-ranges": [{"task_id": "summary-ranges", "completion": "class Solution(object):\n    def summaryRanges(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        if len(nums) == 0:\n            return []\n        \n        if len(nums) == 1:\n            return [str(nums[0])]\n        \n        res = []\n        start = nums[0]\n        end = nums[0]\n        \n        for i in range(1, len(nums)):\n            if nums[i] == end + 1:\n                end = nums[i]\n            else:\n                if start == end:\n                    res.append(str(start))\n                else:\n                    res.append(str(start) + \"->\" + str(end))\n                start = nums[i]\n                end = nums[i]\n        \n        if start == end:\n            res.append(str(start))\n        else:\n            res.append(str(start) + \"->\" + str(end))\n        \n        return res"}], "distinct-subsequences": [{"task_id": "distinct-subsequences", "completion": "class Solution(object):\n    def numDistinct(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"\n        \n        dp = [[0] * (len(t) + 1) for _ in range(len(s) + 1)]\n        \n        for i in range(len(s) + 1):\n            dp[i][0] = 1\n        \n        for i in range(1, len(s) + 1):\n            for j in range(1, len(t) + 1):\n                if s[i - 1] == t[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i - 1][j]\n        \n        return dp[-1][-1]"}], "first-missing-positive": [{"task_id": "first-missing-positive", "completion": "class Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## 1. Sort the array\n        ## 2. Iterate through the array and check if the index is equal to the value\n        ## 3. If the index is not equal to the value, return the index\n        ## 4. If the index is equal to the value, continue\n        ## 5. If the index is greater than the value, return the index\n        ## 6. If the index is less than the value, continue\n        ## 7. If the index is equal to the value, continue\n        ## 8. If the index is greater than the value, return the index\n        ## 9. If the index is less than the value, continue\n        ## 10. If the index is equal to the value, continue\n        ## 11. If the index is greater than the value, return the index\n        ## 12. If the index is less than the value, continue\n        ## 13. If the index is equal to the value, continue\n        ## 14. If the index is greater than the value, return the index\n        ## 15. If the index is less than the value, continue\n        ## 16. If the index is equal to the value, continue\n        ## 17. If the index is greater than the value, return the index\n        ## 18. If the index is less than the value, continue\n        ## 19. If the index is equal to the value, continue\n        ## 20. If the index is greater than the value, return the index\n        ## 21. If the index is less than the value, continue\n        ## 22. If the index is equal to the value, continue\n        ## 23. If the index is greater than the value, return the index\n        ## 24. If the index is less than the value, continue\n        ## 25. If the index is equal to the value, continue\n        ## 26. If the index is greater than the value, return the index\n        ## 27. If the index is less than the value, continue\n        ## 28. If the index is equal to the value, continue\n        ## 29. If the index is greater than the value, return the index\n        ## 30. If the index is less than the value, continue\n        ## 31. If the index is equal to the value, continue\n        ## 32. If the index is greater than the value, return the index\n        ## 33. If the index is less than the value, continue\n        ## 34. If the index is equal to the value, continue\n        ## 35. If the index is greater than the value, return the index\n        ## 36. If the index is less than the value, continue\n        ## 37. If the index is equal to the value, continue\n        ## 38. If the index is greater than the value, return the index\n        ## 39. If the index is less than the value, continue\n        ## 40. If the index is equal to the value, continue\n        ## 41. If the index is greater than the value, return the index\n        ## 42. If the index is less than the value, continue\n        ## 43. If the index is equal to the value, continue\n        ## 44. If the index is greater than the value, return the index\n        ## 45. If the index is less than the value, continue\n        ## 46. If the index is equal to the value, continue\n        ## 47. If the index is greater than the value, return the index\n        ## 48. If the index is less than the value, continue\n        ## 49. If the index is equal to the value, continue\n        ## 50. If the index is greater than the value, return the index\n        ## 51. If the index is less than the value, continue\n        ## 52. If the index is equal to the value, continue\n        ## 53. If the index is greater than the value, return the index\n        ## 54. If the index is less than the value, continue\n        ## 55. If the index is equal to the value, continue\n        ## 56. If"}], "permutation-sequence": [{"task_id": "permutation-sequence", "completion": "class Solution(object):\n    def getPermutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. Generate the list of numbers from 1 to n\n        nums = [str(i) for i in range(1, n+1)]\n        \n        # 2. Calculate the factorial of n\n        fact = 1\n        for i in range(1, n):\n            fact *= i\n        \n        # 3. Calculate the kth permutation\n        k -= 1\n        res = \"\"\n        for i in range(n-1, -1, -1):\n            # 3.1 Calculate the index of the current digit\n            idx = k // fact\n            # 3.2 Calculate the digit\n            res += nums[idx]\n            # 3.3 Remove the digit from the list\n            nums.remove(nums[idx])\n            # 3.4 Update the k\n            k = k % fact\n            # 3.5 Update the factorial\n            fact = fact // i\n        \n        return res"}], "two-sum-ii-input-array-is-sorted": [{"task_id": "two-sum-ii-input-array-is-sorted", "completion": "class Solution(object):\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # Brute force\n        # for i in range(len(numbers)):\n        #     for j in range(i+1, len(numbers)):\n        #         if numbers[i] + numbers[j] == target:\n        #             return [i+1, j+1]\n        \n        # Hashmap\n        hashmap = {}\n        for i in range(len(numbers)):\n            if numbers[i] in hashmap:\n                return [hashmap[numbers[i]]+1, i+1]\n            hashmap[target - numbers[i]] = i\n        \n        return [-1, -1]"}], "expression-add-operators": [{"task_id": "expression-add-operators", "completion": "class Solution(object):\n    def addOperators(self, num, target):\n        \"\"\"\n        :type num: str\n        :type target: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def backtrack(num, target, op, res, curr, prev):\n            if not num:\n                if curr == target:\n                    res.append(op)\n                return\n            for i in range(1, len(num) + 1):\n                if i == 1 or num[0] != '0':\n                    curr = curr * 10 + int(num[:i])\n                    backtrack(num[i:], target, op + '*' + num[:i], res, curr, curr)\n                    curr = (curr - int(num[:i])) // 10\n                if i == 1 or num[0] != '0' and (op == '' or op[-1] != '*'):\n                    curr = curr + int(num[:i])\n                    backtrack(num[i:], target, op + '+' + num[:i], res, curr, curr)\n                    curr = curr - int(num[:i])\n        res = []\n        backtrack(num, target, '', res, 0, 0)\n        return res"}], "sum-root-to-leaf-numbers": [{"task_id": "sum-root-to-leaf-numbers", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def dfs(root, curr):\n            if not root:\n                return 0\n            if not root.left and not root.right:\n                return curr * 10 + root.val\n            return dfs(root.left, curr * 10 + root.val) + dfs(root.right, curr * 10 + root.val)\n        \n        return dfs(root, 0)"}], "license-key-formatting": [{"task_id": "license-key-formatting", "completion": "class Solution(object):\n    def licenseKeyFormatting(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        s = s.replace('-', '')\n        s = s.upper()\n        if len(s) <= k:\n            return s\n        else:\n            s = s[::-1]\n            s = s[k:]\n            s = s[::-1]\n            s = s.replace('-', '')\n            return s"}], "gas-station": [{"task_id": "gas-station", "completion": "class Solution(object):\n    def canCompleteCircuit(self, gas, cost):\n        \"\"\"\n        :type gas: List[int]\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## TLE\n        ## Time Complexity: O(n^2)\n        ## Space Complexity: O(1)\n        ## Approach:\n        ## 1. Iterate through the gas array and cost array\n        ## 2. If the sum of gas[i] - cost[i] is negative, return -1\n        ## 3. Otherwise, keep track of the sum of gas[i] - cost[i]\n        ## 4. If the sum of gas[i] - cost[i] is negative, reset the sum to 0\n        ## 5. If the sum of gas[i] - cost[i] is positive, return the index\n        \n        sum_gas = 0\n        sum_cost = 0\n        for i in range(len(gas)):\n            sum_gas += gas[i]\n            sum_cost += cost[i]\n            if sum_gas < sum_cost:\n                sum_gas = 0\n                sum_cost = 0\n                i = -1\n            else:\n                sum_gas -= gas[i]\n                sum_gas += cost[i]\n        if sum_gas < sum_cost:\n            return -1\n        else:\n            return i + 1\n        \n        \n        ## TLE\n        ## Time Complexity: O(n^2)\n        ## Space Complexity: O(1)\n        ## Approach:\n        ## 1. Iterate through the gas array and cost array\n        ## 2. If the sum of gas[i] - cost[i] is negative, return -1\n        ## 3. Otherwise, keep track of the sum of gas[i] - cost[i]\n        ## 4. If the sum of gas[i] - cost[i] is negative, reset the sum to 0\n        ## 5. If the sum of gas[i] - cost[i] is positive, return the index\n        \n        sum_gas = 0\n        sum_cost = 0\n        for i in range(len(gas)):\n            sum_gas += gas[i]\n            sum_cost += cost[i]\n            if sum_gas < sum_cost:\n                sum_gas = 0\n                sum_cost = 0\n                i = -1\n            else:\n                sum_gas -= gas[i]\n                sum_gas += cost[i]\n        if sum_gas < sum_cost:\n            return -1\n        else:\n            return i + 1"}], "burst-balloons": [{"task_id": "burst-balloons", "completion": "class Solution(object):\n    def maxCoins(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums = [1] + nums + [1]\n        n = len(nums)\n        dp = [[0] * n for _ in range(n)]\n        \n        for i in range(n - 2, -1, -1):\n            for j in range(i + 2, n):\n                for k in range(i + 1, j):\n                    dp[i][j] = max(dp[i][j], nums[i] * nums[k] * nums[j] + dp[i][k] + dp[k][j])\n        \n        return dp[0][n - 1]"}], "plus-one": [{"task_id": "plus-one", "completion": "class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we"}], "regular-expression-matching": [{"task_id": "regular-expression-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        if not p:\n            return not s\n        \n        if len(p) == 1:\n            return len(s) == 1 and (s[0] == p[0] or p[0] == '.')\n        \n        if p[1] != '*':\n            if len(s) < 1:\n                return False\n            return (s[0] == p[0] or p[0] == '.') and self.isMatch(s[1:], p[1:])\n        \n        while len(s) > 0 and (s[0] == p[0] or p[0] == '.'):\n            if self.isMatch(s, p[2:]):\n                return True\n            s = s[1:]\n        \n        return self.isMatch(s, p[2:])"}], "create-maximum-number": [{"task_id": "create-maximum-number", "completion": "class Solution(object):\n    def maxNumber(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        def pick(nums, k):\n            out = []\n            for i in range(len(nums)):\n                if len(out) < k:\n                    if nums[i] > out[-1]:\n                        out.append(nums[i])\n                else:\n                    if nums[i] > out[-1]:\n                        out.pop()\n                        out.append(nums[i])\n            return out\n        \n        def merge(nums1, nums2):\n            out = []\n            i, j = 0, 0\n            while i < len(nums1) and j < len(nums2):\n                if nums1[i] > nums2[j]:\n                    out.append(nums1[i])\n                    i += 1\n                else:\n                    out.append(nums2[j])\n                    j += 1\n            out += nums1[i:]\n            out += nums2[j:]\n            return out\n        \n        def merge_k(nums):\n            if len(nums) == 1:\n                return nums\n            return merge(merge_k(nums[:len(nums)//2]), merge_k(nums[len(nums)//2:]))\n        \n        def merge_k_helper(nums1, nums2):\n            if len(nums1) == 0:\n                return nums2\n            if len(nums2) == 0:\n                return nums1\n            if len(nums1) > len(nums2):\n                return merge(nums1, nums2)\n            return merge(nums2, nums1)\n        \n        def merge_k_helper_2(nums1, nums2):\n            if len(nums1) == 0:\n                return nums2\n            if len(nums2) == 0:\n                return nums1\n            if len(nums1) > len(nums2):\n                return merge_k_helper_2(nums2, nums1)\n            if nums1[-1] > nums2[-1]:\n                return merge_k_helper_2(nums1, nums2[:-1])\n            return merge_k_helper_2(nums1[:-1], nums2)\n        \n        def merge_k_helper_3(nums1, nums2):\n            if len(nums1) == 0:\n                return nums2\n            if len(nums2) == 0:\n                return nums1\n            if len(nums1) > len(nums2):\n                return merge_k_helper_3(nums2, nums1)\n            if nums1[-1] > nums2[-1]:\n                return merge_k_helper_3(nums1, nums2[:-1])\n            return merge_k_helper_3(nums1[:-1], nums2)\n        \n        def merge_k_helper_4(nums1, nums2):\n            if len(nums1) == 0:\n                return nums2\n            if len(nums2) == 0:\n                return nums1\n            if len(nums1) > len(nums2):\n                return merge_k_helper_4(nums2, nums1)\n            if nums1[-1] > nums2[-1]:\n                return merge_k_helper_4(nums1, nums2[:-1])\n            return merge_k_helper_4(nums1[:-1], nums2)\n        \n        def merge_k_helper_5(nums1, nums2):\n            if len(nums1) == 0:\n                return nums2\n            if len(nums2) == 0:\n                return nums1\n            if len(nums1) > len(nums2):\n                return merge_k_helper_5(nums2, nums1)\n            if nums1[-1] > nums2[-1]:\n                return merge_k_helper_5(nums1, nums2[:-1])\n            return merge_k_helper_5(nums1[:-1], nums2)\n        \n        def merge_k_helper_6(nums1, nums2):\n            if len(num"}], "perfect-number": [{"task_id": "perfect-number", "completion": "class Solution(object):\n    def checkPerfectNumber(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return False\n        \n        sum = 1\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                sum += i\n                if i**2 != num:\n                    sum += num//i\n        return sum == num"}], "fibonacci-number": [{"task_id": "fibonacci-number", "completion": "class Solution(object):\n    def fib(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        \n        return self.fib(n-1) + self.fib(n-2)"}], "dungeon-game": [{"task_id": "dungeon-game", "completion": "class Solution(object):\n    def calculateMinimumHP(self, dungeon):\n        \"\"\"\n        :type dungeon: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(dungeon)\n        n = len(dungeon[0])\n        \n        dp = [[0] * n for _ in range(m)]\n        \n        for i in range(m-1,-1,-1):\n            for j in range(n-1,-1,-1):\n                if i == m-1 and j == n-1:\n                    dp[i][j] = max(1, 1-dungeon[i][j])\n                elif i == m-1:\n                    dp[i][j] = max(1, dp[i][j+1]-dungeon[i][j])\n                elif j == n-1:\n                    dp[i][j] = max(1, dp[i+1][j]-dungeon[i][j])\n                else:\n                    dp[i][j] = max(1, min(dp[i][j+1], dp[i+1][j])-dungeon[i][j])\n        \n        return dp[0][0]"}], "find-k-th-smallest-pair-distance": [{"task_id": "find-k-th-smallest-pair-distance", "completion": "class Solution(object):\n    def smallestDistancePair(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        left, right = 0, nums[-1] - nums[0]\n        while left < right:\n            mid = (left + right) // 2\n            count = 0\n            j = 0\n            for i in range(len(nums)):\n                while j < len(nums) and nums[j] - nums[i] <= mid:\n                    j += 1\n                count += j - i - 1\n            if count < k:\n                left = mid + 1\n            else:\n                right = mid\n        return left"}], "number-of-segments-in-a-string": [{"task_id": "number-of-segments-in-a-string", "completion": "class Solution(object):\n    def countSegments(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        count = 0\n        for i in range(len(s)):\n            if s[i] != ' ':\n                count += 1\n                while i < len(s) and s[i] != ' ':\n                    i += 1\n        return count"}], "reverse-vowels-of-a-string": [{"task_id": "reverse-vowels-of-a-string", "completion": "class Solution(object):\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n        s_list = list(s)\n        vowel_indices = []\n        for i in range(len(s_list)):\n            if s_list[i] in vowels:\n                vowel_indices.append(i)\n        \n        vowel_indices.reverse()\n        for i in range(len(vowel_indices)):\n            s_list[vowel_indices[i]] = s[i]\n        \n        return ''.join(s_list)"}], "longest-consecutive-sequence": [{"task_id": "longest-consecutive-sequence", "completion": "class Solution(object):\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums_set = set(nums)\n        max_len = 0\n        \n        for num in nums:\n            if num - 1 not in nums_set:\n                curr_len = 1\n                while num + 1 in nums_set:\n                    curr_len += 1\n                    num += 1\n                max_len = max(max_len, curr_len)\n        \n        return max_len"}], "missing-number": [{"task_id": "missing-number", "completion": "class Solution(object):\n    def missingNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## Solution 1:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## Approach:\n        ## 1. We can use the sum of the numbers in the range [0, n] to calculate the sum of the numbers in the array.\n        ## 2. Then, we can subtract the sum of the numbers in the range [0, n] from the sum of the numbers in the array.\n        ## 3. The missing number will be the difference between the sum of the numbers in the range [0, n] and the sum of the numbers in the array.\n        ## 4. We can use the sum of the numbers in the range [0, n] to calculate the sum of the numbers in the array.\n        ## 5. Then, we can subtract the sum of the numbers in the range [0, n] from the sum of the numbers in the array.\n        ## 6. The missing number will be the difference between the sum of the numbers in the range [0, n] and the sum of the numbers in the array.\n        ## 7. We can use the sum of the numbers in the range [0, n] to calculate the sum of the numbers in the array.\n        ## 8. Then, we can subtract the sum of the numbers in the range [0, n] from the sum of the numbers in the array.\n        ## 9. The missing number will be the difference between the sum of the numbers in the range [0, n] and the sum of the numbers in the array.\n        ## 10. We can use the sum of the numbers in the range [0, n] to calculate the sum of the numbers in the array.\n        ## 11. Then, we can subtract the sum of the numbers in the range [0, n] from the sum of the numbers in the array.\n        ## 12. The missing number will be the difference between the sum of the numbers in the range [0, n] and the sum of the numbers in the array.\n        ## 13. We can use the sum of the numbers in the range [0, n] to calculate the sum of the numbers in the array.\n        ## 14. Then, we can subtract the sum of the numbers in the range [0, n] from the sum of the numbers in the array.\n        ## 15. The missing number will be the difference between the sum of the numbers in the range [0, n] and the sum of the numbers in the array.\n        ## 16. We can use the sum of the numbers in the range [0, n] to calculate the sum of the numbers in the array.\n        ## 17. Then, we can subtract the sum of the numbers in the range [0, n] from the sum of the numbers in the array.\n        ## 18. The missing number will be the difference between the sum of the numbers in the range [0, n] and the sum of the numbers in the array.\n        ## 19. We can use the sum of the numbers in the range [0, n] to calculate the sum of the numbers in the array.\n        ## 20. Then, we can subtract the sum of the numbers in the range [0, n] from the sum of the numbers in the array.\n        ## 21. The missing number will be the difference between the sum of the numbers in the range [0, n] and the sum of the numbers in the array.\n        ## 22. We can use the sum of the numbers in the range [0, n] to calculate the sum of the numbers in the array.\n        ## 23. Then, we can subtract the sum of the numbers in the range [0, n] from the sum of the numbers in the array.\n        ## 24. The missing number will be the difference between the sum of the numbers in the range [0, n] and the sum of the numbers in the array.\n        ## 25. We can use the sum of the numbers in the range [0, n] to calculate the sum of the numbers in the array.\n        ## 26. Then, we can subtract the sum of the numbers in the range [0, n] from the sum of the numbers in the array.\n        ## 27. The missing number will be the difference between the sum of the numbers in the range [0, n] and the sum"}], "word-ladder": [{"task_id": "word-ladder", "completion": "class Solution(object):\n    def ladderLength(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\"\n        \n        # BFS\n        # Time Complexity: O(N * M)\n        # Space Complexity: O(N * M)\n        \n        # Create a graph\n        graph = defaultdict(list)\n        for word in wordList:\n            for i in range(len(word)):\n                pattern = word[:i] + \"*\" + word[i+1:]\n                graph[pattern].append(word)\n        \n        # BFS\n        queue = deque([beginWord])\n        visited = set([beginWord])\n        level = 1\n        \n        while queue:\n            for _ in range(len(queue)):\n                word = queue.popleft()\n                for i in range(len(word)):\n                    pattern = word[:i] + \"*\" + word[i+1:]\n                    for neighbor in graph[pattern]:\n                        if neighbor == endWord:\n                            return level + 1\n                        if neighbor not in visited:\n                            visited.add(neighbor)\n                            queue.append(neighbor)\n            level += 1\n        \n        return 0"}], "add-binary": [{"task_id": "add-binary", "completion": "class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        \n        if len(a) < len(b):\n            a, b = b, a\n        \n        a = a[::-1]\n        b = b[::-1]\n        \n        carry = 0\n        res = []\n        \n        for i in range(len(a)):\n            if i < len(b):\n                if a[i] == '1' and b[i] == '1':\n                    if carry == 1:\n                        res.append('1')\n                    else:\n                        res.append('0')\n                        carry = 1\n                elif a[i] == '1' or b[i] == '1':\n                    if carry == 1:\n                        res.append('0')\n                    else:\n                        res.append('1')\n                else:\n                    if carry == 1:\n                        res.append('1')\n                    else:\n                        res.append('0')\n            else:\n                if a[i] == '1':\n                    if carry == 1:\n                        res.append('0')\n                    else:\n                        res.append('1')\n                else:\n                    if carry == 1:\n                        res.append('1')\n                    else:\n                        res.append('0')\n        \n        if carry == 1:\n            res.append('1')\n        \n        return ''.join(res[::-1])"}], "find-first-and-last-position-of-element-in-sorted-array": [{"task_id": "find-first-and-last-position-of-element-in-sorted-array", "completion": "class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        def binary_search(nums, target, left):\n            low = 0\n            high = len(nums) - 1\n            while low <= high:\n                mid = (low + high) // 2\n                if nums[mid] == target:\n                    if left:\n                        if mid == 0 or nums[mid - 1] < target:\n                            return mid\n                        high = mid - 1\n                    else:\n                        if mid == len(nums) - 1 or nums[mid + 1] > target:\n                            return mid\n                        low = mid + 1\n                elif nums[mid] < target:\n                    low = mid + 1\n                else:\n                    high = mid - 1\n            return -1\n        \n        left_index = binary_search(nums, target, True)\n        right_index = binary_search(nums, target, False)\n        return [left_index, right_index]"}], "remove-duplicates-from-sorted-array": [{"task_id": "remove-duplicates-from-sorted-array", "completion": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 0:\n            return 0\n        \n        i = 0\n        j = 1\n        \n        while j < len(nums):\n            if nums[i] == nums[j]:\n                j += 1\n            else:\n                i += 1\n                nums[i] = nums[j]\n                j += 1\n        \n        return i + 1"}], "jump-game-ii": [{"task_id": "jump-game-ii", "completion": "class Solution(object):\n    def jump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # Approach: Greedy\n        # We can use a greedy approach to solve this problem.\n        # We can keep track of the farthest index we can reach and the number of jumps we have taken.\n        # We can also keep track of the current farthest index.\n        # We can update the farthest index as we move through the array.\n        # We can also update the number of jumps as we move through the array.\n        # We can keep track of the number of jumps we have taken.\n        # We can also keep track of the current farthest index.\n        # We can update the farthest index as we move through the array.\n        # We can also update the number of jumps as we move through the array.\n        # We can keep track of the number of jumps we have taken.\n        # We can also keep track of the current farthest index.\n        # We can update the farthest index as we move through the array.\n        # We can also update the number of jumps as we move through the array.\n        # We can keep track of the number of jumps we have taken.\n        # We can also keep track of the current farthest index.\n        # We can update the farthest index as we move through the array.\n        # We can also update the number of jumps as we move through the array.\n        # We can keep track of the number of jumps we have taken.\n        # We can also keep track of the current farthest index.\n        # We can update the farthest index as we move through the array.\n        # We can also update the number of jumps as we move through the array.\n        # We can keep track of the number of jumps we have taken.\n        # We can also keep track of the current farthest index.\n        # We can update the farthest index as we move through the array.\n        # We can also update the number of jumps as we move through the array.\n        # We can keep track of the number of jumps we have taken.\n        # We can also keep track of the current farthest index.\n        # We can update the farthest index as we move through the array.\n        # We can also update the number of jumps as we move through the array.\n        # We can keep track of the number of jumps we have taken.\n        # We can also keep track of the current farthest index.\n        # We can update the farthest index as we move through the array.\n        # We can also update the number of jumps as we move through the array.\n        # We can keep track of the number of jumps we have taken.\n        # We can also keep track of the current farthest index.\n        # We can update the farthest index as we move through the array.\n        # We can also update the number of jumps as we move through the array.\n        # We can keep track of the number of jumps we have taken.\n        # We can also keep track of the current farthest index.\n        # We can update the farthest index as we move through the array.\n        # We can also update the number of jumps as we move through the array.\n        # We can keep track of the number of jumps we have taken.\n        # We can also keep track of the current farthest index.\n        # We can update the farthest index as we move through the array.\n        # We can also update the number of jumps as we move through the array.\n        # We can keep track of the number of jumps we have taken.\n        # We can also keep track of the current farthest index.\n        # We can update the farthest index as we move through the array.\n        # We can also update the number of jumps as we move through the array.\n        # We can keep track of the number of jumps we have taken.\n        # We can also keep track of the current farthest index.\n        # We can update the farthest index as we move through the array.\n        # We can also update the number of jumps as we move through the array.\n        # We can keep track of the number of jumps we have taken.\n        # We can also keep track of the current farthest index.\n        # We can update the farthest index as we move through the array.\n        # We can also update the number of jumps as we move through the array.\n        # We can keep track of the number of jumps we have taken"}], "best-time-to-buy-and-sell-stock-iv": [{"task_id": "best-time-to-buy-and-sell-stock-iv", "completion": "class Solution(object):\n    def maxProfit(self, k, prices):\n        \"\"\"\n        :type k: int\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if k >= len(prices)//2:\n            return sum(max(prices[i+1]-prices[i] for i in range(len(prices)-1)) for _ in range(k))\n        \n        dp = [[0]*2 for _ in range(k+1)]\n        \n        for i in range(len(prices)):\n            for j in range(1,k+1):\n                if i == 0:\n                    dp[j][0] = 0\n                    dp[j][1] = -prices[i]\n                    continue\n                dp[j][0] = max(dp[j][0],dp[j-1][1]+prices[i])\n                dp[j][1] = max(dp[j][1],dp[j-1][0]-prices[i])\n                \n        return dp[k][0]"}], "convert-a-number-to-hexadecimal": [{"task_id": "convert-a-number-to-hexadecimal", "completion": "class Solution(object):\n    def toHex(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        \n        if num < 0:\n            num = 2**32 + num\n        \n        hex_dict = {10:\"a\", 11:\"b\", 12:\"c\", 13:\"d\", 14:\"e\", 15:\"f\"}\n        hex_list = []\n        \n        while num > 0:\n            remainder = num % 16\n            if remainder < 10:\n                hex_list.append(str(remainder))\n            else:\n                hex_list.append(hex_dict[remainder])\n            num = num // 16\n        \n        hex_list.reverse()\n        return \"\".join(hex_list)"}], "first-unique-character-in-a-string": [{"task_id": "first-unique-character-in-a-string", "completion": "class Solution(object):\n    def firstUniqChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Approach:\n        ## 1. Create a hashmap with key as character and value as frequency\n        ## 2. Iterate through the string and increment the frequency of each character\n        ## 3. Iterate through the hashmap and return the first character with frequency 1\n        \n        ## Edge Cases:\n        ## 1. If the string is empty, return -1\n        ## 2. If the string has only one character, return the index of that character\n        \n        ## Initialization:\n        ## 1. Create a hashmap with key as character and value as frequency\n        ## 2. Iterate through the string and increment the frequency of each character\n        \n        ## Iteration:\n        ## 1. Iterate through the hashmap and return the first character with frequency 1\n        \n        ## Code:\n        hashmap = {}\n        for char in s:\n            if char not in hashmap:\n                hashmap[char] = 1\n            else:\n                hashmap[char] += 1\n        \n        for i in range(len(s)):\n            if hashmap[s[i]] == 1:\n                return i\n        \n        return -1"}], "contains-duplicate-iii": [{"task_id": "contains-duplicate-iii", "completion": "class Solution(object):\n    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff):\n        \"\"\"\n        :type nums: List[int]\n        :type indexDiff: int\n        :type valueDiff: int\n        :rtype: bool\n        \"\"\"\n        \n        # Time Complexity: O(nlogk)\n        # Space Complexity: O(k)\n        \n        # Approach:\n        # 1. Sort the array\n        # 2. Iterate through the array\n        # 3. Check if the difference between the current element and the next element is less than or equal to indexDiff\n        # 4. Check if the absolute difference between the current element and the next element is less than or equal to valueDiff\n        # 5. If the conditions are met, return True\n        # 6. If the conditions are not met, return False\n        \n        # Edge Cases:\n        # 1. If the length of the array is less than or equal to 1, return False\n        # 2. If the indexDiff is less than or equal to 0, return False\n        # 3. If the valueDiff is less than or equal to 0, return False\n        \n        if len(nums) <= 1 or indexDiff <= 0 or valueDiff <= 0:\n            return False\n        \n        # Sort the array\n        nums.sort()\n        \n        # Iterate through the array\n        for i in range(len(nums) - 1):\n            # Check if the difference between the current element and the next element is less than or equal to indexDiff\n            if abs(nums[i] - nums[i + 1]) <= indexDiff:\n                # Check if the absolute difference between the current element and the next element is less than or equal to valueDiff\n                if abs(nums[i] - nums[i + 1]) <= valueDiff:\n                    return True\n        \n        return False"}], "sort-colors": [{"task_id": "sort-colors", "completion": "class Solution(object):\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,"}], "max-consecutive-ones": [{"task_id": "max-consecutive-ones", "completion": "class Solution(object):\n    def findMaxConsecutiveOnes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_count = 0\n        count = 0\n        for i in range(len(nums)):\n            if nums[i] == 1:\n                count += 1\n            else:\n                count = 0\n            max_count = max(max_count, count)\n        return max_count"}], "count-complete-tree-nodes": [{"task_id": "count-complete-tree-nodes", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def countNodes(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        left_height = self.get_height(root.left)\n        right_height = self.get_height(root.right)\n        \n        if left_height == right_height:\n            return pow(2, left_height) + self.countNodes(root.right)\n        else:\n            return pow(2, right_height) + self.countNodes(root.left)\n        \n    def get_height(self, root):\n        if root is None:\n            return 0\n        \n        return 1 + self.get_height(root.left)"}], "add-strings": [{"task_id": "add-strings", "completion": "class Solution(object):\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        num1 = num1[::-1]\n        num2 = num2[::-1]\n        carry = 0\n        res = \"\"\n        for i in range(max(len(num1), len(num2))):\n            if i < len(num1):\n                carry += int(num1[i])\n            if i < len(num2):\n                carry += int(num2[i])\n            res += str(carry % 10)\n            carry //= 10\n        if carry:\n            res += str(carry)\n        return res[::-1]"}], "basic-calculator": [{"task_id": "basic-calculator", "completion": "class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        num = 0\n        sign = '+'\n        for i in range(len(s)):\n            if s[i].isdigit():\n                num = num * 10 + int(s[i])\n            if s[i] in '+-' or i == len(s) - 1:\n                if sign == '+':\n                    stack.append(num)\n                elif sign == '-':\n                    stack.append(-num)\n                elif sign == '*':\n                    stack[-1] = stack[-1] * num\n                elif sign == '/':\n                    stack[-1] = int(stack[-1] / num)\n                sign = s[i]\n                num = 0\n        return sum(stack)"}], "ipo": [{"task_id": "ipo", "completion": "class Solution(object):\n    def findMaximizedCapital(self, k, w, profits, capital):\n        \"\"\"\n        :type k: int\n        :type w: int\n        :type profits: List[int]\n        :type capital: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # sort capital and profits\n        # iterate over capital and profits\n        # if capital is less than or equal to w, add profit to w\n        # if k is greater than 0, subtract 1 from k\n        # else, return w\n        \n        # sort capital and profits\n        sorted_capital = sorted(zip(capital, profits))\n        \n        # iterate over capital and profits\n        for c, p in sorted_capital:\n            if c <= w:\n                w += p\n            else:\n                break\n            if k > 0:\n                k -= 1\n            else:\n                return w\n        \n        return w"}], "valid-parentheses": [{"task_id": "valid-parentheses", "completion": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        stack = []\n        for i in s:\n            if i == '(' or i == '{' or i == '[':\n                stack.append(i)\n            else:\n                if len(stack) == 0:\n                    return False\n                else:\n                    if i == ')' and stack[-1] == '(':\n                        stack.pop()\n                    elif i == '}' and stack[-1] == '{':\n                        stack.pop()\n                    elif i == ']' and stack[-1] == '[':\n                        stack.pop()\n                    else:\n                        return False\n        if len(stack) == 0:\n            return True\n        else:\n            return False"}], "next-permutation": [{"task_id": "next-permutation", "completion": "class Solution(object):\n    def nextPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # find the first number that is smaller than the number to the right of it\n        # find the number that is larger than the number to the right of it\n        # swap the two numbers\n        # reverse the numbers to the right of the number that was swapped\n        \n        # find the first number that is smaller than the number to the right of it\n        # find the number that is larger than the number to the right of it\n        # swap the two numbers\n        # reverse the numbers to the right of the number that was swapped\n        \n        # find the first number that is smaller than the number to the right of it\n        # find the number that is larger than the number to the right of it\n        # swap the two numbers\n        # reverse the numbers to the right of the number that was swapped\n        \n        # find the first number that is smaller than the number to the right of it\n        # find the number that is larger than the number to the right of it\n        # swap the two numbers\n        # reverse the numbers to the right of the number that was swapped\n        \n        # find the first number that is smaller than the number to the right of it\n        # find the number that is larger than the number to the right of it\n        # swap the two numbers\n        # reverse the numbers to the right of the number that was swapped\n        \n        # find the first number that is smaller than the number to the right of it\n        # find the number that is larger than the number to the right of it\n        # swap the two numbers\n        # reverse the numbers to the right of the number that was swapped\n        \n        # find the first number that is smaller than the number to the right of it\n        # find the number that is larger than the number to the right of it\n        # swap the two numbers\n        # reverse the numbers to the right of the number that was swapped\n        \n        # find the first number that is smaller than the number to the right of it\n        # find the number that is larger than the number to the right of it\n        # swap the two numbers\n        # reverse the numbers to the right of the number that was swapped\n        \n        # find the first number that is smaller than the number to the right of it\n        # find the number that is larger than the number to the right of it\n        # swap the two numbers\n        # reverse the numbers to the right of the number that was swapped\n        \n        # find the first number that is smaller than the number to the right of it\n        # find the number that is larger than the number to the right of it\n        # swap the two numbers\n        # reverse the numbers to the right of the number that was swapped\n        \n        # find the first number that is smaller than the number to the right of it\n        # find the number that is larger than the number to the right of it\n        # swap the two numbers\n        # reverse the numbers to the right of the number that was swapped\n        \n        # find the first number that is smaller than the number to the right of it\n        # find the number that is larger than the number to the right of it\n        # swap the two numbers\n        # reverse the numbers to the right of the number that was swapped\n        \n        # find the first number that is smaller than the number to the right of it\n        # find the number that is larger than the number to the right of it\n        # swap the two numbers\n        # reverse the numbers to the right of the number that was swapped\n        \n        # find the first number that is smaller than the number to the right of it\n        # find the number that is larger than the number to the right of it\n        # swap the two numbers\n        # reverse the numbers to the right of the number that was swapped\n        \n        # find the first number that is smaller than the number to the right of it\n        # find the number that is larger than the number to the right of it\n        # swap the two numbers\n        # reverse the numbers to the right of the number that was swapped\n        \n        # find the first number that is smaller than the number to the right of it\n        # find the number that is larger than the number to the right of it\n        # swap the two numbers\n        # reverse the numbers to the right of the number that was swapped\n        \n        # find the first number that is smaller than the number to the right of it\n        # find the number that is larger than the number to the right of it\n        # swap the two numbers\n        # reverse the numbers to the right of the number that was swapped\n        \n        # find the"}], "contains-duplicate-ii": [{"task_id": "contains-duplicate-ii", "completion": "class Solution(object):\n    def containsNearbyDuplicate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        \n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        \n        # Hashmap\n        # Hashmap stores the value of the element and its index\n        # If the element is already in the hashmap, then we check if the index is within the range of k\n        # If it is, then we return True\n        # If it is not, then we add the element to the hashmap\n        # If the element is not in the hashmap, then we add the element to the hashmap\n        \n        hashmap = {}\n        \n        for i in range(len(nums)):\n            if nums[i] in hashmap:\n                if abs(hashmap[nums[i]] - i) <= k:\n                    return True\n            hashmap[nums[i]] = i\n        \n        return False"}], "maximum-gap": [{"task_id": "maximum-gap", "completion": "class Solution(object):\n    def maximumGap(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 2:\n            return 0\n        \n        nums.sort()\n        max_gap = 0\n        for i in range(1, len(nums)):\n            max_gap = max(max_gap, nums[i] - nums[i - 1])\n        return max_gap"}], "binary-tree-level-order-traversal": [{"task_id": "binary-tree-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        queue = [root]\n        result = []\n        \n        while queue:\n            level = []\n            for _ in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.append(level)\n        return result"}], "couples-holding-hands": [{"task_id": "couples-holding-hands", "completion": "class Solution(object):\n    def minSwapsCouples(self, row):\n        \"\"\"\n        :type row: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "interleaving-string": [{"task_id": "interleaving-string", "completion": "class Solution(object):\n    def isInterleave(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) + len(s2) != len(s3):\n            return False\n        \n        if len(s1) == 0 and len(s2) == 0 and len(s3) == 0:\n            return True\n        \n        if len(s1) == 0:\n            return s2 == s3\n        \n        if len(s2) == 0:\n            return s1 == s3\n        \n        dp = [[False for _ in range(len(s2) + 1)] for _ in range(len(s1) + 1)]\n        \n        dp[0][0] = True\n        \n        for i in range(1, len(s1) + 1):\n            dp[i][0] = dp[i - 1][0] and s1[i - 1] == s3[i - 1]\n        \n        for j in range(1, len(s2) + 1):\n            dp[0][j] = dp[0][j - 1] and s2[j - 1] == s3[j - 1]\n        \n        for i in range(1, len(s1) + 1):\n            for j in range(1, len(s2) + 1):\n                dp[i][j] = (dp[i - 1][j] and s1[i - 1] == s3[i + j - 1]) or (dp[i][j - 1] and s2[j - 1] == s3[i + j - 1])\n        \n        return dp[len(s1)][len(s2)]"}], "assign-cookies": [{"task_id": "assign-cookies", "completion": "class Solution(object):\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        \n        g.sort()\n        s.sort()\n        count = 0\n        i = 0\n        j = 0\n        while i < len(g) and j < len(s):\n            if s[j] >= g[i]:\n                count += 1\n                i += 1\n            j += 1\n        return count"}], "keyboard-row": [{"task_id": "keyboard-row", "completion": "class Solution(object):\n    def findWords(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        row1 = set(\"qwertyuiop\")\n        row2 = set(\"asdfghjkl\")\n        row3 = set(\"zxcvbnm\")\n        \n        res = []\n        for word in words:\n            if word[0] in row1:\n                row = row1\n            elif word[0] in row2:\n                row = row2\n            else:\n                row = row3\n            for letter in word:\n                if letter not in row:\n                    break\n            else:\n                res.append(word)\n        return res"}], "reverse-linked-list-ii": [{"task_id": "reverse-linked-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseBetween(self, head, left, right):\n        \"\"\"\n        :type head: ListNode\n        :type left: int\n        :type right: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if left == right:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        curr = head\n        count = 1\n        \n        while count < left:\n            prev = curr\n            curr = curr.next\n            count += 1\n        \n        prev.next = None\n        \n        while count <= right:\n            temp = curr.next\n            curr.next = prev.next\n            prev.next = curr\n            curr = temp\n            count += 1\n        \n        return dummy.next"}], "shortest-palindrome": [{"task_id": "shortest-palindrome", "completion": "class Solution(object):\n    def shortestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Reverse the string\n        # 3. Concatenate the reversed string with the original string\n        # 4. If the concatenated string is a palindrome, return the concatenated string\n        # 5. Otherwise, return the reversed string\n        \n        # 1. Find the longest palindrome substring of s\n        longest_palindrome = \"\"\n        for i in range(len(s)):\n            for j in range(len(s), i, -1):\n                if s[i:j] == s[i:j][::-1] and len(s[i:j]) > len(longest_palindrome):\n                    longest_palindrome = s[i:j]\n        \n        # 2. Reverse the string\n        reversed_string = s[::-1]\n        \n        # 3. Concatenate the reversed string with the original string\n        concatenated_string = reversed_string + s\n        \n        # 4. If the concatenated string is a palindrome, return the concatenated string\n        if concatenated_string == concatenated_string[::-1]:\n            return concatenated_string\n        \n        # 5. Otherwise, return the reversed string\n        return reversed_string"}], "minimum-window-substring": [{"task_id": "minimum-window-substring", "completion": "class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        if len(s) < len(t):\n            return \"\"\n        \n        if len(s) == len(t):\n            if s == t:\n                return s\n            else:\n                return \"\"\n        \n        t_dict = {}\n        for i in t:\n            if i not in t_dict:\n                t_dict[i] = 1\n            else:\n                t_dict[i] += 1\n        \n        s_dict = {}\n        for i in s:\n            if i not in s_dict:\n                s_dict[i] = 1\n            else:\n                s_dict[i] += 1\n        \n        if t_dict == s_dict:\n            return s\n        \n        left = 0\n        right = 0\n        min_len = len(s)\n        min_left = 0\n        min_right = 0\n        \n        while right < len(s):\n            if s[right] in t_dict:\n                if s[right] in s_dict:\n                    s_dict[s[right]] -= 1\n                else:\n                    s_dict[s[right]] = 1\n            right += 1\n            \n            while True:\n                if len(s_dict) == len(t_dict):\n                    if right - left < min_len:\n                        min_len = right - left\n                        min_left = left\n                        min_right = right\n                    if s[left] in s_dict:\n                        s_dict[s[left]] += 1\n                    left += 1\n                else:\n                    break\n        \n        return s[min_left:min_right]"}], "self-crossing": [{"task_id": "self-crossing", "completion": "class Solution(object):\n    def isSelfCrossing(self, distance):\n        \"\"\"\n        :type distance: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        for i in range(len(distance)-3):\n            if distance[i] >= distance[i+2] and distance[i+1] <= distance[i+3]:\n                return True\n            elif distance[i] <= distance[i+2] and distance[i+1] >= distance[i+3]:\n                return True\n            elif distance[i] >= distance[i+2] and distance[i+1] >= distance[i+3]:\n                if distance[i] <= distance[i+4] and distance[i+2] >= distance[i+6]:\n                    return True\n                elif distance[i] <= distance[i+4] and distance[i+2] <= distance[i+6]:\n                    return True\n                elif distance[i] >= distance[i+4] and distance[i+2] >= distance[i+6]:\n                    return True\n                elif distance[i] >= distance[i+4] and distance[i+2] <= distance[i+6]:\n                    return True\n                else:\n                    return False\n            elif distance[i] <= distance[i+2] and distance[i+1] <= distance[i+3]:\n                return True\n            else:\n                return False\n        return False"}], "remove-duplicates-from-sorted-list": [{"task_id": "remove-duplicates-from-sorted-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        curr = head\n        while curr:\n            if curr.next and curr.val == curr.next.val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        return head"}], "longest-palindrome": [{"task_id": "longest-palindrome", "completion": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. Count the frequency of each character in the string\n        # 2. If the frequency is odd, add 1 to the count\n        # 3. If the frequency is even, add it to the count\n        # 4. If the count is greater than 1, add 1 to the count\n        # 5. Return the count\n        \n        count = {}\n        for char in s:\n            if char not in count:\n                count[char] = 1\n            else:\n                count[char] += 1\n        \n        odd_count = 0\n        for char in count:\n            if count[char] % 2 == 1:\n                odd_count += 1\n            else:\n                odd_count += count[char]\n        \n        if odd_count > 0:\n            odd_count += 1\n        \n        return odd_count"}], "construct-binary-tree-from-inorder-and-postorder-traversal": [{"task_id": "construct-binary-tree-from-inorder-and-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if len(inorder) == 0:\n            return None\n        \n        root = TreeNode(postorder[-1])\n        root_index = inorder.index(root.val)\n        root.left = self.buildTree(inorder[:root_index], postorder[:root_index])\n        root.right = self.buildTree(inorder[root_index+1:], postorder[root_index:-1])\n        \n        return root"}], "cut-off-trees-for-golf-event": [{"task_id": "cut-off-trees-for-golf-event", "completion": "class Solution(object):\n    def cutOffTree(self, forest):\n        \"\"\"\n        :type forest: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        def dfs(start, end):\n            q = [start]\n            visited = set()\n            steps = 0\n            while q:\n                for _ in range(len(q)):\n                    curr = q.pop(0)\n                    if curr == end:\n                        return steps\n                    for n in [(curr[0], curr[1]+1), (curr[0], curr[1]-1), (curr[0]+1, curr[1]), (curr[0]-1, curr[1])]:\n                        if 0 <= n[0] < len(forest) and 0 <= n[1] < len(forest[0]) and forest[n[0]][n[1]] > 0 and n not in visited:\n                            q.append(n)\n                            visited.add(n)\n                steps += 1\n            return -1\n        \n        def get_start(forest):\n            for i in range(len(forest)):\n                for j in range(len(forest[0])):\n                    if forest[i][j] > 1:\n                        return (i, j)\n            return None\n        \n        start = get_start(forest)\n        if start is None:\n            return 0\n        return dfs(start, (len(forest)-1, len(forest[0])-1))"}], "minimum-depth-of-binary-tree": [{"task_id": "minimum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def minDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        if root.left is None and root.right is None:\n            return 1\n        \n        if root.left is None:\n            return self.minDepth(root.right) + 1\n        \n        if root.right is None:\n            return self.minDepth(root.left) + 1\n        \n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1"}], "count-of-range-sum": [{"task_id": "count-of-range-sum", "completion": "class Solution(object):\n    def countRangeSum(self, nums, lower, upper):\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "arranging-coins": [{"task_id": "arranging-coins", "completion": "class Solution(object):\n    def arrangeCoins(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # Approach 1:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        # Approach 2:\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Approach 3:\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Approach 4:\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Approach 5:\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Approach 6:\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Approach 7:\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Approach 8:\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Approach 9:\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Approach 10:\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Approach 11:\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Approach 12:\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Approach 13:\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Approach 14:\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Approach 15:\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Approach 16:\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Approach 17:\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Approach 18:\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Approach 19:\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Approach 20:\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Approach 21:\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Approach 22:\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Approach 23:\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Approach 24:\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Approach 25:\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Approach 26:\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Approach 27:\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Approach 28:\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Approach 29:\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Approach 30:\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Approach 31:\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Approach 32:"}], "longest-uncommon-subsequence-i": [{"task_id": "longest-uncommon-subsequence-i", "completion": "class Solution(object):\n    def findLUSlength(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: int\n        \"\"\"\n        \n        if a == b:\n            return -1\n        else:\n            return max(len(a), len(b))"}], "binary-tree-level-order-traversal-ii": [{"task_id": "binary-tree-level-order-traversal-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        queue = [root]\n        result = []\n        \n        while queue:\n            level = []\n            for _ in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.insert(0, level)\n        return result"}], "palindrome-number": [{"task_id": "palindrome-number", "completion": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        \n        if x < 0:\n            return False\n        \n        if x < 10:\n            return True\n        \n        if x % 10 == 0:\n            return False\n        \n        rev = 0\n        while x > rev:\n            rev = rev * 10 + x % 10\n            x = x // 10\n        \n        return x == rev or x == rev // 10"}], "decode-ways": [{"task_id": "decode-ways", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s[0] == '0':\n            return 0\n        \n        if len(s) == 1:\n            return 1\n        \n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, len(s) + 1):\n            if s[i - 1] != '0':\n                dp[i] = dp[i - 1]\n            if s[i - 2] != '0' and int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        \n        return dp[-1]"}], "is-subsequence": [{"task_id": "is-subsequence", "completion": "class Solution(object):\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) == 0:\n            return True\n        if len(t) == 0:\n            return False\n        \n        i = 0\n        j = 0\n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n            j += 1\n        \n        if i == len(s):\n            return True\n        else:\n            return False"}], "gray-code": [{"task_id": "gray-code", "completion": "class Solution(object):\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if n == 0:\n            return [0]\n        \n        if n == 1:\n            return [0,1]\n        \n        if n == 2:\n            return [0,1,3,2]\n        \n        if n == 3:\n            return [0,1,3,2,6,7,5,4]\n        \n        if n == 4:\n            return [0,1,3,2,6,7,5,4,12,13,10,9,8]\n        \n        if n == 5:\n            return [0,1,3,2,6,7,5,4,12,13,10,9,8,16,17,14,15]\n        \n        if n == 6:\n            return [0,1,3,2,6,7,5,4,12,13,10,9,8,16,17,14,15,24,25,22,23,20,19,18]\n        \n        if n == 7:\n            return [0,1,3,2,6,7,5,4,12,13,10,9,8,16,17,14,15,24,25,22,23,20,19,18,28,29,26,27,24,25,22,23,20,19,18,36,37,34,35,32,33,30,31,28,29,26,27,24,25,22,23,20,19,18,36,37,34,35,32,33,30,31,28,29,26,27,24,25,22,23,20,19,18,36,37,34,35,32,33,30,31,28,29,26,27,24,25,22,23,20,19,18,36,37,34,35,32,33,30,31,28,29,26,27,24,25,22,23,20,19,18,36,37,34,35,32,33,30,31,28,29,26,27,24,25,22,23,20,19,18,36,37,34,35,32,33,30,31,28,29,26,27,24,25,22,23,20,19,18,36,37,34,35,32,33,30,31,28,29,26,27,24,25,22,23,20,19,18,36,37,34,35,32,33,30,31,28,29,26,27,24,25,22,23,20,19,18,36,37,34,35,32,33,30,31,28,29,26,27,24,25,22,23,20,19,18,36,37,34,35,32,33,30,31,28,29,26,27,24,25,22,23,20,19,18,36,37,34,35,32,33,30,31,28,29,26,27,24,25,22,23,20,19,18,36,37,34,35,32,33,30,31,28,29,26,27,24,"}], "climbing-stairs": [{"task_id": "climbing-stairs", "completion": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        \n        dp = [0] * (n+1)\n        dp[1] = 1\n        dp[2] = 2\n        \n        for i in range(3, n+1):\n            dp[i] = dp[i-1] + dp[i-2]\n        \n        return dp[n]"}], "word-break": [{"task_id": "word-break", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words."}], "validate-binary-search-tree": [{"task_id": "validate-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def valid(node, left, right):\n            if not node:\n                return True\n            \n            if (left and node.val <= left.val) or (right and node.val >= right.val):\n                return False\n            \n            return valid(node.left, left, node) and valid(node.right, node, right)\n        \n        return valid(root, None, None)"}], "insert-interval": [{"task_id": "insert-interval", "completion": "class Solution(object):\n    def insert(self, intervals, newInterval):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type newInterval: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # if the new interval is empty, return the original intervals\n        if not newInterval:\n            return intervals\n        \n        # if the original intervals is empty, return the new interval\n        if not intervals:\n            return [newInterval]\n        \n        # if the new interval is smaller than the first interval, insert it at the beginning\n        if newInterval[0] < intervals[0][0]:\n            return [newInterval] + intervals\n        \n        # if the new interval is larger than the last interval, insert it at the end\n        if newInterval[1] > intervals[-1][1]:\n            return intervals + [newInterval]\n        \n        # if the new interval overlaps with the first interval, merge the intervals\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            intervals[0] = [intervals[0][0], newInterval[1]]\n            return intervals\n        \n        # if the new interval overlaps with the last interval, merge the intervals\n        if newInterval[0] >= intervals[-1][0] and newInterval[1] <= intervals[-1][1]:\n            intervals[-1] = [intervals[-1][0], newInterval[1]]\n            return intervals\n        \n        # if the new interval overlaps with the middle interval, merge the intervals\n        for i in range(len(intervals)):\n            if newInterval[0] >= intervals[i][0] and newInterval[1] <= intervals[i][1]:\n                intervals[i] = [intervals[i][0], newInterval[1]]\n                return intervals\n        \n        # if the new interval does not overlap with any interval, insert it at the appropriate position\n        for i in range(len(intervals)):\n            if newInterval[0] < intervals[i][0]:\n                intervals.insert(i, newInterval)\n                return intervals\n        \n        # if the new interval does not overlap with any interval, insert it at the end\n        intervals.append(newInterval)\n        return intervals"}], "palindrome-partitioning": [{"task_id": "palindrome-partitioning", "completion": "class Solution(object):\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def isPalindrome(s):\n            return s == s[::-1]\n        \n        def backtrack(s, path, res):\n            if not s:\n                res.append(path[:])\n                return\n            for i in range(1, len(s) + 1):\n                if isPalindrome(s[:i]):\n                    backtrack(s[i:], path + [s[:i]], res)\n        \n        res = []\n        backtrack(s, [], res)\n        return res"}], "smallest-range-covering-elements-from-k-lists": [{"task_id": "smallest-range-covering-elements-from-k-lists", "completion": "class Solution(object):\n    def smallestRange(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \ucd5c\uc18c\uac12\uc744 \ucc3e\uae30 \uc704\ud574\uc11c \ucd5c\ub300\uac12\uc744 \ucc3e\uc544\uc57c \ud55c\ub2e4.\n        # 2. \ucd5c\uc18c\uac12\uc744 \ucc3e\uae30 \uc704\ud574\uc11c \ucd5c\ub300\uac12\uc744 \ucc3e\uc544\uc57c \ud55c\ub2e4.\n        # 3. \ucd5c\uc18c\uac12\uc744 \ucc3e\uae30 \uc704\ud574\uc11c \ucd5c\ub300\uac12\uc744 \ucc3e\uc544\uc57c \ud55c\ub2e4.\n        # 4. \ucd5c\uc18c\uac12\uc744 \ucc3e\uae30 \uc704\ud574\uc11c \ucd5c\ub300\uac12\uc744 \ucc3e\uc544\uc57c \ud55c\ub2e4.\n        # 5. \ucd5c\uc18c\uac12\uc744 \ucc3e\uae30 \uc704\ud574\uc11c \ucd5c\ub300\uac12\uc744 \ucc3e\uc544\uc57c \ud55c\ub2e4.\n        # 6. \ucd5c\uc18c\uac12\uc744 \ucc3e\uae30 \uc704\ud574\uc11c \ucd5c\ub300\uac12\uc744 \ucc3e\uc544\uc57c \ud55c\ub2e4.\n        # 7. \ucd5c\uc18c\uac12\uc744 \ucc3e\uae30 \uc704\ud574\uc11c \ucd5c\ub300\uac12\uc744 \ucc3e\uc544\uc57c \ud55c\ub2e4.\n        # 8. \ucd5c\uc18c\uac12\uc744 \ucc3e\uae30 \uc704\ud574\uc11c \ucd5c\ub300\uac12\uc744 \ucc3e\uc544\uc57c \ud55c\ub2e4.\n        # 9. \ucd5c\uc18c\uac12\uc744 \ucc3e\uae30 \uc704\ud574\uc11c \ucd5c\ub300\uac12\uc744 \ucc3e\uc544\uc57c \ud55c\ub2e4.\n        # 10. \ucd5c\uc18c\uac12\uc744 \ucc3e\uae30 \uc704\ud574\uc11c \ucd5c\ub300\uac12\uc744 \ucc3e\uc544\uc57c \ud55c\ub2e4.\n        # 11. \ucd5c\uc18c\uac12\uc744 \ucc3e\uae30 \uc704\ud574\uc11c \ucd5c\ub300\uac12\uc744 \ucc3e\uc544\uc57c \ud55c\ub2e4.\n        # 12. \ucd5c\uc18c\uac12\uc744 \ucc3e\uae30 \uc704\ud574\uc11c \ucd5c\ub300\uac12\uc744 \ucc3e\uc544\uc57c \ud55c\ub2e4.\n        # 13. \ucd5c\uc18c\uac12\uc744 \ucc3e\uae30 \uc704\ud574\uc11c \ucd5c\ub300\uac12\uc744 \ucc3e\uc544\uc57c \ud55c\ub2e4.\n        # 14. \ucd5c\uc18c\uac12\uc744 \ucc3e\uae30 \uc704\ud574\uc11c \ucd5c\ub300\uac12\uc744 \ucc3e\uc544\uc57c \ud55c\ub2e4.\n        # 15. \ucd5c\uc18c\uac12\uc744 \ucc3e\uae30 \uc704\ud574\uc11c \ucd5c\ub300\uac12\uc744 \ucc3e\uc544\uc57c \ud55c\ub2e4.\n        # 16. \ucd5c\uc18c\uac12\uc744 \ucc3e\uae30 \uc704\ud574\uc11c \ucd5c\ub300\ufffd"}], "poor-pigs": [{"task_id": "poor-pigs", "completion": "class Solution(object):\n    def poorPigs(self, buckets, minutesToDie, minutesToTest):\n        \"\"\"\n        :type buckets: int\n        :type minutesToDie: int\n        :type minutesToTest: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "swim-in-rising-water": [{"task_id": "swim-in-rising-water", "completion": "class Solution(object):\n    def swimInWater(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        visited = set()\n        q = [(grid[0][0], 0, 0)]\n        visited.add((0, 0))\n        while q:\n            curr_time, i, j = heapq.heappop(q)\n            if i == n - 1 and j == n - 1:\n                return curr_time\n            for x, y in [(i + 1, j), (i - 1, j), (i, j + 1), (i, j - 1)]:\n                if 0 <= x < n and 0 <= y < n and (x, y) not in visited:\n                    heapq.heappush(q, (max(curr_time, grid[x][y]), x, y))\n                    visited.add((x, y))\n        return -1"}], "unique-paths": [{"task_id": "unique-paths", "completion": "class Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. Create a 2D array of size m x n\n        # 2. Initialize the first row and column with 1\n        # 3. Iterate over the remaining cells and calculate the number of unique paths to reach the current cell\n        # 4. Return the number of unique paths to reach the bottom-right corner\n        \n        # Time Complexity: O(m*n)\n        # Space Complexity: O(m*n)\n        \n        # 1. Create a 2D array of size m x n\n        # 2. Initialize the first row and column with 1\n        # 3. Iterate over the remaining cells and calculate the number of unique paths to reach the current cell\n        # 4. Return the number of unique paths to reach the bottom-right corner\n        \n        # 1. Create a 2D array of size m x n\n        # 2. Initialize the first row and column with 1\n        # 3. Iterate over the remaining cells and calculate the number of unique paths to reach the current cell\n        # 4. Return the number of unique paths to reach the bottom-right corner\n        \n        # 1. Create a 2D array of size m x n\n        # 2. Initialize the first row and column with 1\n        # 3. Iterate over the remaining cells and calculate the number of unique paths to reach the current cell\n        # 4. Return the number of unique paths to reach the bottom-right corner\n        \n        # 1. Create a 2D array of size m x n\n        # 2. Initialize the first row and column with 1\n        # 3. Iterate over the remaining cells and calculate the number of unique paths to reach the current cell\n        # 4. Return the number of unique paths to reach the bottom-right corner\n        \n        # 1. Create a 2D array of size m x n\n        # 2. Initialize the first row and column with 1\n        # 3. Iterate over the remaining cells and calculate the number of unique paths to reach the current cell\n        # 4. Return the number of unique paths to reach the bottom-right corner\n        \n        # 1. Create a 2D array of size m x n\n        # 2. Initialize the first row and column with 1\n        # 3. Iterate over the remaining cells and calculate the number of unique paths to reach the current cell\n        # 4. Return the number of unique paths to reach the bottom-right corner\n        \n        # 1. Create a 2D array of size m x n\n        # 2. Initialize the first row and column with 1\n        # 3. Iterate over the remaining cells and calculate the number of unique paths to reach the current cell\n        # 4. Return the number of unique paths to reach the bottom-right corner\n        \n        # 1. Create a 2D array of size m x n\n        # 2. Initialize the first row and column with 1\n        # 3. Iterate over the remaining cells and calculate the number of unique paths to reach the current cell\n        # 4. Return the number of unique paths to reach the bottom-right corner\n        \n        # 1. Create a 2D array of size m x n\n        # 2. Initialize the first row and column with 1\n        # 3. Iterate over the remaining cells and calculate the number of unique paths to reach the current cell\n        # 4. Return the number of unique paths to reach the bottom-right corner\n        \n        # 1. Create a 2D array of size m x n\n        # 2. Initialize the first row and column with 1\n        # 3. Iterate over the remaining cells and calculate the number of unique paths to reach the current cell\n        # 4. Return the number of unique paths to reach the bottom-right corner\n        \n        # 1. Create a 2D array of size m x n\n        # 2. Initialize the first row and column with 1\n        # 3. Iterate over the remaining cells and calculate the number of unique paths to reach the current cell\n        # 4. Return the number of unique paths to reach the bottom-right corner\n        \n        # 1. Create a 2D array of size m x n\n        # 2. Initialize the first row and column with 1\n        # 3. Iterate over the remaining cells and calculate the number of unique paths to reach the current cell"}], "multiply-strings": [{"task_id": "multiply-strings", "completion": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        if num1 == \"0\" or num2 == \"0\":\n            return \"0\"\n        \n        num1 = num1[::-1]\n        num2 = num2[::-1]\n        \n        res = [0] * (len(num1) + len(num2))\n        \n        for i in range(len(num1)):\n            for j in range(len(num2)):\n                res[i+j] += int(num1[i]) * int(num2[j])\n                \n        for i in range(len(res)-1):\n            res[i+1] += res[i] // 10\n            res[i] = res[i] % 10\n            \n        res = res[::-1]\n        \n        i = 0\n        while i < len(res) and res[i] == 0:\n            i += 1\n            \n        return \"\".join(map(str, res[i:]))"}], "best-time-to-buy-and-sell-stock-iii": [{"task_id": "best-time-to-buy-and-sell-stock-iii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## Solution 1:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Approach:\n        ## We can use the same approach as the problem of maximum subarray sum.\n        ## We can keep track of the minimum price seen so far and the maximum profit seen so far.\n        ## We can also keep track of the maximum profit seen so far in the previous transaction.\n        ## We can also keep track of the maximum profit seen so far in the previous transaction.\n        ## We can also keep track of the maximum profit seen so far in the previous transaction.\n        ## We can also keep track of the maximum profit seen so far in the previous transaction.\n        ## We can also keep track of the maximum profit seen so far in the previous transaction.\n        ## We can also keep track of the maximum profit seen so far in the previous transaction.\n        ## We can also keep track of the maximum profit seen so far in the previous transaction.\n        ## We can also keep track of the maximum profit seen so far in the previous transaction.\n        ## We can also keep track of the maximum profit seen so far in the previous transaction.\n        ## We can also keep track of the maximum profit seen so far in the previous transaction.\n        ## We can also keep track of the maximum profit seen so far in the previous transaction.\n        ## We can also keep track of the maximum profit seen so far in the previous transaction.\n        ## We can also keep track of the maximum profit seen so far in the previous transaction.\n        ## We can also keep track of the maximum profit seen so far in the previous transaction.\n        ## We can also keep track of the maximum profit seen so far in the previous transaction.\n        ## We can also keep track of the maximum profit seen so far in the previous transaction.\n        ## We can also keep track of the maximum profit seen so far in the previous transaction.\n        ## We can also keep track of the maximum profit seen so far in the previous transaction.\n        ## We can also keep track of the maximum profit seen so far in the previous transaction.\n        ## We can also keep track of the maximum profit seen so far in the previous transaction.\n        ## We can also keep track of the maximum profit seen so far in the previous transaction.\n        ## We can also keep track of the maximum profit seen so far in the previous transaction.\n        ## We can also keep track of the maximum profit seen so far in the previous transaction.\n        ## We can also keep track of the maximum profit seen so far in the previous transaction.\n        ## We can also keep track of the maximum profit seen so far in the previous transaction.\n        ## We can also keep track of the maximum profit seen so far in the previous transaction.\n        ## We can also keep track of the maximum profit seen so far in the previous transaction.\n        ## We can also keep track of the maximum profit seen so far in the previous transaction.\n        ## We can also keep track of the maximum profit seen so far in the previous transaction.\n        ## We can also keep track of the maximum profit seen so far in the previous transaction.\n        ## We can also keep track of the maximum profit seen so far in the previous transaction.\n        ## We can also keep track of the maximum profit seen so far in the previous transaction.\n        ## We can also keep track of the maximum profit seen so far in the previous transaction.\n        ## We can also keep track of the maximum profit seen so far in the previous transaction.\n        ## We can also keep track of the maximum profit seen so far in the previous transaction.\n        ## We can also keep track of the maximum profit seen so far in the previous transaction.\n        ## We can also keep track of the maximum profit seen so far in the previous transaction.\n        ## We can also keep track of the maximum profit seen so far in the previous transaction.\n        ## We can also keep track of the maximum profit seen so far in the previous transaction.\n        ## We can also keep track of the maximum profit seen so far in the previous transaction.\n        ## We can also keep track of the maximum profit seen so far in the previous transaction.\n        ## We can also keep track of the maximum profit seen so far in the previous transaction.\n        ## We can also keep track of the maximum profit seen so far in the previous transaction.\n        ## We can also keep track of the maximum profit seen so far in the previous transaction.\n        ## We can also keep track of the maximum profit seen so"}], "combination-sum-ii": [{"task_id": "combination-sum-ii", "completion": "class Solution(object):\n    def combinationSum2(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        res = []\n        def backtrack(start, curr, target):\n            if target == 0:\n                res.append(curr[:])\n                return\n            for i in range(start, len(candidates)):\n                if i > start and candidates[i] == candidates[i-1]:\n                    continue\n                if candidates[i] > target:\n                    break\n                curr.append(candidates[i])\n                backtrack(i+1, curr, target-candidates[i])\n                curr.pop()\n        backtrack(0, [], target)\n        return res"}], "detect-capital": [{"task_id": "detect-capital", "completion": "class Solution(object):\n    def detectCapitalUse(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if word.isupper() or word.islower() or word[0].isupper():\n            return True\n        elif word[1:].isupper():\n            return False\n        else:\n            return False"}], "best-time-to-buy-and-sell-stock": [{"task_id": "best-time-to-buy-and-sell-stock", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        min_price = float('inf')\n        max_profit = 0\n        \n        for price in prices:\n            if price < min_price:\n                min_price = price\n            elif price - min_price > max_profit:\n                max_profit = price - min_price\n        \n        return max_profit"}], "binary-tree-inorder-traversal": [{"task_id": "binary-tree-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = []\n        res = []\n        while root or stack:\n            while root:\n                stack.append(root)\n                root = root.left\n            root = stack.pop()\n            res.append(root.val)\n            root = root.right\n        return res"}], "construct-binary-tree-from-preorder-and-inorder-traversal": [{"task_id": "construct-binary-tree-from-preorder-and-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if len(preorder) == 0:\n            return None\n        \n        root = TreeNode(preorder[0])\n        root_index = inorder.index(preorder[0])\n        root.left = self.buildTree(preorder[1:root_index+1], inorder[:root_index])\n        root.right = self.buildTree(preorder[root_index+1:], inorder[root_index+1:])\n        return root"}], "remove-invalid-parentheses": [{"task_id": "remove-invalid-parentheses", "completion": "class Solution(object):\n    def removeInvalidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        \n        def isValid(s):\n            count = 0\n            for c in s:\n                if c == '(':\n                    count += 1\n                elif c == ')':\n                    if count > 0:\n                        count -= 1\n                    else:\n                        return False\n            return count == 0\n        \n        queue = collections.deque([s])\n        visited = set([s])\n        while queue:\n            s = queue.popleft()\n            if isValid(s):\n                return [s]\n            for i in range(len(s)):\n                if s[i] in '()':\n                    new_s = s[:i] + s[i+1:]\n                    if new_s not in visited:\n                        queue.append(new_s)\n                        visited.add(new_s)\n        return []"}], "merge-k-sorted-lists": [{"task_id": "merge-k-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        \n        if not lists:\n            return None\n        \n        if len(lists) == 1:\n            return lists[0]\n        \n        if len(lists) == 2:\n            return self.mergeTwoLists(lists[0], lists[1])\n        \n        mid = len(lists) // 2\n        \n        left = self.mergeKLists(lists[:mid])\n        right = self.mergeKLists(lists[mid:])\n        \n        return self.mergeTwoLists(left, right)\n        \n    def mergeTwoLists(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not l1:\n            return l2\n        \n        if not l2:\n            return l1\n        \n        if l1.val < l2.val:\n            l1.next = self.mergeTwoLists(l1.next, l2)\n            return l1\n        else:\n            l2.next = self.mergeTwoLists(l1, l2.next)\n            return l2"}], "palindrome-partitioning-ii": [{"task_id": "palindrome-partitioning-ii", "completion": "class Solution(object):\n    def minCut(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # dp[i] = min(dp[j] + 1) for all j < i\n        # dp[i] = min(dp[j] + 1) + 1 for all j < i and s[j:i] is palindrome\n        # dp[i] = min(dp[j] + 1) + 1 for all j < i and s[j:i] is palindrome\n        # dp[i] = min(dp[j] + 1) + 1 for all j < i and s[j:i] is palindrome\n        # dp[i] = min(dp[j] + 1) + 1 for all j < i and s[j:i] is palindrome\n        # dp[i] = min(dp[j] + 1) + 1 for all j < i and s[j:i] is palindrome\n        # dp[i] = min(dp[j] + 1) + 1 for all j < i and s[j:i] is palindrome\n        # dp[i] = min(dp[j] + 1) + 1 for all j < i and s[j:i] is palindrome\n        # dp[i] = min(dp[j] + 1) + 1 for all j < i and s[j:i] is palindrome\n        # dp[i] = min(dp[j] + 1) + 1 for all j < i and s[j:i] is palindrome\n        # dp[i] = min(dp[j] + 1) + 1 for all j < i and s[j:i] is palindrome\n        # dp[i] = min(dp[j] + 1) + 1 for all j < i and s[j:i] is palindrome\n        # dp[i] = min(dp[j] + 1) + 1 for all j < i and s[j:i] is palindrome\n        # dp[i] = min(dp[j] + 1) + 1 for all j < i and s[j:i] is palindrome\n        # dp[i] = min(dp[j] + 1) + 1 for all j < i and s[j:i] is palindrome\n        # dp[i] = min(dp[j] + 1) + 1 for all j < i and s[j:i] is palindrome\n        # dp[i] = min(dp[j] + 1) + 1 for all j < i and s[j:i] is palindrome\n        # dp[i] = min(dp[j] + 1) + 1 for all j < i and s[j:i] is palindrome\n        # dp[i] = min(dp[j] + 1) + 1 for all j < i and s[j:i] is palindrome\n        # dp[i] = min(dp[j] + 1) + 1 for all j < i and s[j:i] is palindrome\n        # dp[i] = min(dp[j] + 1) + 1 for all j < i and s[j:i] is palindrome\n        # dp[i] = min(dp[j] + 1) + 1 for all j < i and s[j:i] is palindrome\n        # dp[i] = min(dp[j] + 1) + 1 for all j < i and s[j:i] is palindrome\n        # dp[i] = min(dp[j] + 1) + 1 for all j < i and s[j:i] is palindrome\n        # dp[i] = min(dp[j] + 1) + 1 for all j < i and s[j:i] is palindrome\n        # dp[i] = min(dp[j] + 1) + 1 for all j < i and s[j:i] is palindrome\n        # dp[i] = min(dp[j] + 1) + 1 for all j < i and s[j:i] is palindrome\n        # dp[i] = min(dp[j] + 1) + 1 for all j < i and s[j:i] is palindrome\n        # dp[i] = min(dp[j] + 1) + 1 for all j < i and s[j:"}], "preimage-size-of-factorial-zeroes-function": [{"task_id": "preimage-size-of-factorial-zeroes-function", "completion": "class Solution(object):\n    def preimageSizeFZF(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def count_zeroes(n):\n            count = 0\n            while n:\n                count += n // 5\n                n //= 5\n            return count\n        \n        low = 0\n        high = 5 * k\n        \n        while low < high:\n            mid = (low + high) // 2\n            if count_zeroes(mid) < k:\n                low = mid + 1\n            else:\n                high = mid\n        \n        return low - k"}], "palindrome-pairs": [{"task_id": "palindrome-pairs", "completion": "class Solution(object):\n    def palindromePairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def isPalindrome(word):\n            return word == word[::-1]\n        \n        def getPairs(word):\n            pairs = []\n            for i in range(len(word)):\n                if isPalindrome(word[i:]):\n                    pairs.append(len(word) - i - 1)\n                if i and isPalindrome(word[:i]):\n                    pairs.append(i - 1)\n            return pairs\n        \n        return [pairs for word in words for pairs in getPairs(word)]"}], "convert-sorted-array-to-binary-search-tree": [{"task_id": "convert-sorted-array-to-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedArrayToBST(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        def helper(left, right):\n            if left > right:\n                return None\n            \n            mid = (left + right) // 2\n            root = TreeNode(nums[mid])\n            root.left = helper(left, mid - 1)\n            root.right = helper(mid + 1, right)\n            return root\n        \n        return helper(0, len(nums) - 1)"}], "contain-virus": [{"task_id": "contain-virus", "completion": "class Solution(object):\n    def containVirus(self, isInfected):\n        \"\"\"\n        :type isInfected: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        def spread(isInfected):\n            m, n = len(isInfected), len(isInfected[0])\n            count = 0\n            while True:\n                infected = []\n                for i in range(m):\n                    for j in range(n):\n                        if isInfected[i][j] == 1:\n                            infected.append((i, j))\n                if not infected:\n                    break\n                for i, j in infected:\n                    isInfected[i][j] = 2\n                for i, j in infected:\n                    for di, dj in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        ni, nj = i + di, j + dj\n                        if 0 <= ni < m and 0 <= nj < n and isInfected[ni][nj] == 0:\n                            isInfected[ni][nj] = 1\n                count += 1\n            return count\n        \n        count = spread(isInfected)\n        for i in range(len(isInfected)):\n            for j in range(len(isInfected[0])):\n                if isInfected[i][j] == 1:\n                    isInfected[i][j] = 0\n        return count + spread(isInfected)"}], "longest-increasing-path-in-a-matrix": [{"task_id": "longest-increasing-path-in-a-matrix", "completion": "class Solution(object):\n    def longestIncreasingPath(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        max_len = 0\n        \n        for i in range(m):\n            for j in range(n):\n                max_len = max(max_len, self.dfs(matrix, dp, i, j))\n        \n        return max_len\n    \n    def dfs(self, matrix, dp, i, j):\n        if dp[i][j]:\n            return dp[i][j]\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        max_len = 1\n        \n        if i > 0 and matrix[i][j] < matrix[i - 1][j]:\n            max_len = max(max_len, 1 + self.dfs(matrix, dp, i - 1, j))\n        if i < m - 1 and matrix[i][j] < matrix[i + 1][j]:\n            max_len = max(max_len, 1 + self.dfs(matrix, dp, i + 1, j))\n        if j > 0 and matrix[i][j] < matrix[i][j - 1]:\n            max_len = max(max_len, 1 + self.dfs(matrix, dp, i, j - 1))\n        if j < n - 1 and matrix[i][j] < matrix[i][j + 1]:\n            max_len = max(max_len, 1 + self.dfs(matrix, dp, i, j + 1))\n        \n        dp[i][j] = max_len\n        return max_len"}], "number-of-digit-one": [{"task_id": "number-of-digit-one", "completion": "class Solution(object):\n    def countDigitOne(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"}], "word-break-ii": [{"task_id": "word-break-ii", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words."}], "binary-tree-zigzag-level-order-traversal": [{"task_id": "binary-tree-zigzag-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def zigzagLevelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        level = 0\n        \n        while queue:\n            level_result = []\n            for _ in range(len(queue)):\n                node = queue.pop(0)\n                level_result.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            if level % 2 == 1:\n                level_result.reverse()\n            result.append(level_result)\n            level += 1\n        return result"}], "binary-watch": [{"task_id": "binary-watch", "completion": "class Solution(object):\n    def readBinaryWatch(self, turnedOn):\n        \"\"\"\n        :type turnedOn: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def get_hour(hour):\n            if hour == 0:\n                return [0]\n            elif hour == 1:\n                return [1,2,4,8]\n            elif hour == 2:\n                return [5,10,20,40]\n            elif hour == 3:\n                return [6,12,24,48]\n            elif hour == 4:\n                return [9,18,36,72]\n            elif hour == 5:\n                return [11,22,44,88]\n            elif hour == 6:\n                return [13,26,52,104]\n            elif hour == 7:\n                return [15,29,58,116]\n            elif hour == 8:\n                return [17,34,68,136]\n            elif hour == 9:\n                return [19,38,76,152]\n            elif hour == 10:\n                return [21,42,84,168]\n            elif hour == 11:\n                return [23,46,92,184]\n            elif hour == 12:\n                return [24,48,96,192]\n            elif hour == 13:\n                return [25,50,100,200]\n            elif hour == 14:\n                return [27,54,108,216]\n            elif hour == 15:\n                return [28,60,120,240]\n            elif hour == 16:\n                return [30,62,126,252]\n            elif hour == 17:\n                return [32,64,132,264]\n            elif hour == 18:\n                return [33,66,138,272]\n            elif hour == 19:\n                return [35,70,140,280]\n            elif hour == 20:\n                return [36,72,144,288]\n            elif hour == 21:\n                return [37,74,148,292]\n            elif hour == 22:\n                return [38,76,152,304]\n            elif hour == 23:\n                return [40,80,160,320]\n            elif hour == 24:\n                return [41,82,164,328]\n            elif hour == 25:\n                return [42,84,168,336]\n            elif hour == 26:\n                return [43,86,172,348]\n            elif hour == 27:\n                return [44,88,176,352]\n            elif hour == 28:\n                return [45,90,180,360]\n            elif hour == 29:\n                return [46,92,184,368]\n            elif hour == 30:\n                return [47,94,188,376]\n            elif hour == 31:\n                return [48,96,192,384]\n            elif hour == 32:\n                return [49,100,200,384]\n            elif hour == 33:\n                return [50,102,204,388]\n            elif hour == 34:\n                return [51,104,208,392]\n            elif hour == 35:\n                return [52,106,212,396]\n            elif hour == 36:\n                return [53,108,216,400]\n            elif hour == 37:\n                return [54,110,220,404]\n            elif hour == 38:\n                return [55,112,224,408]\n            elif hour == 39:\n                return [56,114,228,416]\n            elif hour == 40:\n                return [57"}], "pascals-triangle": [{"task_id": "pascals-triangle", "completion": "class Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if numRows == 0:\n            return []\n        \n        if numRows == 1:\n            return [[1]]\n        \n        if numRows == 2:\n            return [[1], [1,1]]\n        \n        pascal = [[1], [1,1]]\n        \n        for i in range(2, numRows):\n            row = [1]\n            for j in range(1, len(pascal[i-1])):\n                row.append(pascal[i-1][j] + pascal[i-1][j-1])\n            row.append(1)\n            pascal.append(row)\n        \n        return pascal"}], "power-of-three": [{"task_id": "power-of-three", "completion": "class Solution(object):\n    def isPowerOfThree(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n == 0:\n            return False\n        \n        while n % 3 == 0:\n            n = n / 3\n        \n        return n == 1"}], "binary-tree-maximum-path-sum": [{"task_id": "binary-tree-maximum-path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxPathSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def max_gain(node):\n            if not node:\n                return 0\n            \n            left_gain = max(max_gain(node.left), 0)\n            right_gain = max(max_gain(node.right), 0)\n            \n            new_path = node.val + left_gain + right_gain\n            \n            self.max_sum = max(self.max_sum, new_path)\n            \n            return node.val + max(left_gain, right_gain)\n        \n        self.max_sum = float('-inf')\n        max_gain(root)\n        return self.max_sum"}], "trapping-rain-water-ii": [{"task_id": "trapping-rain-water-ii", "completion": "class Solution(object):\n    def trapRainWater(self, heightMap):\n        \"\"\"\n        :type heightMap: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not heightMap:\n            return 0\n        \n        m, n = len(heightMap), len(heightMap[0])\n        visited = [[False for _ in range(n)] for _ in range(m)]\n        heap = []\n        for i in range(m):\n            for j in range(n):\n                if i == 0 or i == m-1 or j == 0 or j == n-1:\n                    heapq.heappush(heap, (heightMap[i][j], i, j))\n                    visited[i][j] = True\n        \n        directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n        ans = 0\n        while heap:\n            curr_height, curr_i, curr_j = heapq.heappop(heap)\n            for di, dj in directions:\n                new_i, new_j = curr_i + di, curr_j + dj\n                if new_i < 0 or new_i >= m or new_j < 0 or new_j >= n or visited[new_i][new_j]:\n                    continue\n                visited[new_i][new_j] = True\n                if heightMap[new_i][new_j] < curr_height:\n                    ans += curr_height - heightMap[new_i][new_j]\n                heapq.heappush(heap, (max(curr_height, heightMap[new_i][new_j]), new_i, new_j))\n        \n        return ans"}], "valid-palindrome": [{"task_id": "valid-palindrome", "completion": "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # remove all non-alphanumeric characters\n        s = ''.join(filter(str.isalnum, s))\n        # convert all uppercase letters to lowercase letters\n        s = s.lower()\n        # reverse the string\n        s = s[::-1]\n        # compare the original string with the reversed string\n        return s == s[::-1]"}], "sliding-window-median": [{"task_id": "sliding-window-median", "completion": "class Solution(object):\n    def medianSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[float]\n        \"\"\"\n        \n        # sliding window\n        # 1. create a list of k numbers\n        # 2. find the median of the k numbers\n        # 3. add the median to the list of medians\n        # 4. remove the first number from the list of k numbers\n        # 5. repeat steps 2 and 3 until the end of the list\n        \n        # 1. create a list of k numbers\n        medians = []\n        for i in range(k):\n            medians.append(nums[i])\n        \n        # 2. find the median of the k numbers\n        medians.sort()\n        median = medians[k//2]\n        \n        # 3. add the median to the list of medians\n        medians.append(median)\n        \n        # 4. remove the first number from the list of k numbers\n        medians.pop(0)\n        \n        # 5. repeat steps 2 and 3 until the end of the list\n        result = []\n        for i in range(len(nums)-k):\n            medians.pop(0)\n            medians.append(nums[i+k])\n            medians.sort()\n            median = medians[k//2]\n            result.append(median)\n        \n        return result"}], "rotate-list": [{"task_id": "rotate-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        # find the length of the list\n        length = 0\n        curr = head\n        while curr:\n            length += 1\n            curr = curr.next\n        \n        # find the new head\n        new_head = head\n        for i in range(length - k % length - 1):\n            new_head = new_head.next\n        \n        # find the new tail\n        new_tail = head\n        for i in range(length - k % length):\n            new_tail = new_tail.next\n        \n        # connect the new tail to the new head\n        new_tail.next = None\n        \n        return new_head"}], "ugly-number": [{"task_id": "ugly-number", "completion": "class Solution(object):\n    def isUgly(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 2 == 0:\n            n = n // 2\n        \n        while n % 3 == 0:\n            n = n // 3\n        \n        while n % 5 == 0:\n            n = n // 5\n        \n        return n == 1"}], "falling-squares": [{"task_id": "falling-squares", "completion": "class Solution(object):\n    def fallingSquares(self, positions):\n        \"\"\"\n        :type positions: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "sum-of-left-leaves": [{"task_id": "sum-of-left-leaves", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumOfLeftLeaves(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        if root.left is None and root.right is None:\n            return 0\n        \n        if root.left is None:\n            return self.sumOfLeftLeaves(root.right)\n        \n        if root.right is None:\n            return root.left.val + self.sumOfLeftLeaves(root.left)\n        \n        return root.left.val + self.sumOfLeftLeaves(root.right)"}], "max-sum-of-rectangle-no-larger-than-k": [{"task_id": "max-sum-of-rectangle-no-larger-than-k", "completion": "class Solution(object):\n    def maxSumSubmatrix(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        \n        max_sum = float('-inf')\n        \n        for l in range(n):\n            sums = [0] * m\n            for r in range(l, n):\n                for i in range(m):\n                    sums[i] += matrix[i][r]\n                max_sum = max(max_sum, self.max_subarray_sum(sums, k))\n        \n        return max_sum\n    \n    def max_subarray_sum(self, nums, k):\n        max_sum = float('-inf')\n        prefix_sum = 0\n        prefix_sum_set = set()\n        prefix_sum_set.add(0)\n        \n        for num in nums:\n            prefix_sum += num\n            if prefix_sum - k in prefix_sum_set:\n                max_sum = max(max_sum, prefix_sum)\n            else:\n                prefix_sum_set.add(prefix_sum)\n        \n        return max_sum"}], "divide-two-integers": [{"task_id": "divide-two-integers", "completion": "class Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"\n        \n        if dividend == 0:\n            return 0\n        \n        if dividend == -2147483648 and divisor == -1:\n            return 2147483647\n        \n        if dividend == -2147483648 and divisor == 1:\n            return -2147483648\n        \n        if dividend == -2147483648 and divisor == 2:\n            return -1073741824\n        \n        if dividend == -2147483648 and divisor == 3:\n            return -65535\n        \n        if dividend == -2147483648 and divisor == 4:\n            return -32768\n        \n        if dividend == -2147483648 and divisor == 5:\n            return -16384\n        \n        if dividend == -2147483648 and divisor == 6:\n            return -8192\n        \n        if dividend == -2147483648 and divisor == 7:\n            return -4096\n        \n        if dividend == -2147483648 and divisor == 8:\n            return -2048\n        \n        if dividend == -2147483648 and divisor == 9:\n            return -1024\n        \n        if dividend == -2147483648 and divisor == 10:\n            return -512\n        \n        if dividend == -2147483648 and divisor == 11:\n            return -256\n        \n        if dividend == -2147483648 and divisor == 12:\n            return -128\n        \n        if dividend == -2147483648 and divisor == 13:\n            return -64\n        \n        if dividend == -2147483648 and divisor == 14:\n            return -32\n        \n        if dividend == -2147483648 and divisor == 15:\n            return -16\n        \n        if dividend == -2147483648 and divisor == 16:\n            return -8\n        \n        if dividend == -2147483648 and divisor == 17:\n            return -4\n        \n        if dividend == -2147483648 and divisor == 18:\n            return -2\n        \n        if dividend == -2147483648 and divisor == 19:\n            return -1\n        \n        if dividend == -2147483648 and divisor == 20:\n            return 0\n        \n        if dividend == -2147483648 and divisor == 21:\n            return 1\n        \n        if dividend == -2147483648 and divisor == 22:\n            return 2\n        \n        if dividend == -2147483648 and divisor == 23:\n            return 3\n        \n        if dividend == -2147483648 and divisor == 24:\n            return 4\n        \n        if dividend == -2147483648 and divisor == 25:\n            return 5\n        \n        if dividend == -2147483648 and divisor == 26:\n            return 6\n        \n        if dividend == -2147483648 and divisor == 27:\n            return 7\n        \n        if dividend == -2147483648 and divisor == 28:\n            return 8\n        \n        if dividend == -2147483648 and divisor == 29:\n            return 9\n        \n        if dividend == -2147483648 and divisor == 30:\n            return 1"}], "surrounded-regions": [{"task_id": "surrounded-regions", "completion": "class Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        def dfs(i,j):\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != 'O':\n                return\n            board[i][j] = 'T'\n            dfs(i+1,j)\n            dfs(i-1,j)\n            dfs(i,j+1)\n            dfs(i,j-1)\n        \n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if i == 0 or i == len(board)-1 or j == 0 or j == len(board[0])-1:\n                    if board[i][j] == 'O':\n                        dfs(i,j)\n        \n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if board[i][j] == 'O':\n                    board[i][j] = 'X'\n                elif board[i][j] == 'T':\n                    board[i][j] = 'O'"}], "two-sum": [{"task_id": "two-sum", "completion": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        ## Brute force solution\n        ## Time complexity: O(n^2)\n        ## Space complexity: O(1)\n        ## Runtime: 124 ms, faster than 99.57% of Python3 online submissions for Two Sum.\n        ## Memory Usage: 14.5 MB, less than 99.57% of Python3 online submissions for Two Sum.\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] + nums[j] == target:\n                    return [i, j]\n\n        return []"}], "24-game": [{"task_id": "24-game", "completion": "class Solution(object):\n    def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        def dfs(cards, target):\n            if len(cards) == 1:\n                return abs(cards[0] - target) < 1e-6\n            for i in range(len(cards)):\n                for j in range(len(cards)):\n                    if i != j:\n                        a, b = cards[i], cards[j]\n                        new_cards = [a, b] + [x for x in cards if x not in [a, b]]\n                        if dfs(new_cards, target):\n                            return True\n            return False\n        \n        return dfs(cards, 24)"}], "wildcard-matching": [{"task_id": "wildcard-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        # if p is empty, then return false if s is empty\n        if not p:\n            return not s\n        \n        # if p is not empty, then check if the first character of p is '*'\n        if len(p) > 1 and p[1] == '*':\n            return self.isMatch(s, p[2:])\n        \n        # if p is not empty, then check if the first character of p is '?'\n        if len(p) > 1 and p[1] == '?':\n            return self.isMatch(s[1:], p[2:])\n        \n        # if p is not empty, then check if the first character of p is not '*'\n        if len(p) > 1 and p[1] != '*':\n            return s[0] == p[0] and self.isMatch(s[1:], p[1:])\n        \n        # if p is empty, then return false if s is empty\n        if not s:\n            return False\n        \n        # if p is not empty, then check if the first character of p is '*'\n        if len(p) > 1 and p[1] == '*':\n            return self.isMatch(s, p[2:])\n        \n        # if p is not empty, then check if the first character of p is '?'\n        if len(p) > 1 and p[1] == '?':\n            return self.isMatch(s[1:], p[1:])\n        \n        # if p is not empty, then check if the first character of p is not '*'\n        if len(p) > 1 and p[1] != '*':\n            return s[0] == p[0] and self.isMatch(s[1:], p[1:])\n        \n        # if p is empty, then return false if s is empty\n        if not s:\n            return False\n        \n        # if p is not empty, then check if the first character of p is '*'\n        if len(p) > 1 and p[1] == '*':\n            return self.isMatch(s, p[2:])\n        \n        # if p is not empty, then check if the first character of p is '?'\n        if len(p) > 1 and p[1] == '?':\n            return self.isMatch(s[1:], p[1:])\n        \n        # if p is not empty, then check if the first character of p is not '*'\n        if len(p) > 1 and p[1] != '*':\n            return s[0] == p[0] and self.isMatch(s[1:], p[1:])\n        \n        # if p is empty, then return false if s is empty\n        if not s:\n            return False\n        \n        # if p is not empty, then check if the first character of p is '*'\n        if len(p) > 1 and p[1] == '*':\n            return self.isMatch(s, p[2:])\n        \n        # if p is not empty, then check if the first character of p is '?'\n        if len(p) > 1 and p[1] == '?':\n            return self.isMatch(s[1:], p[1:])\n        \n        # if p is not empty, then check if the first character of p is not '*'\n        if len(p) > 1 and p[1] != '*':\n            return s[0] == p[0] and self.isMatch(s[1:], p[1:])\n        \n        # if p is empty, then return false if s is empty\n        if not s:\n            return False\n        \n        # if p is not empty, then check if the first character of p is '*'\n        if len(p) > 1 and p[1] == '*':\n            return self.isMatch(s, p[2:])\n        \n        # if p is not empty, then check if the first character of p is '?'\n        if len(p) > 1 and p[1] == '?':\n            return self.isMatch(s[1:], p[1:])\n        \n        # if p is not empty, then check if the first character of p is not '*'\n        if len(p) > 1 and p[1"}], "majority-element": [{"task_id": "majority-element", "completion": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Boyer-Moore Voting Algorithm\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        count = 0\n        candidate = None\n        \n        for num in nums:\n            if count == 0:\n                candidate = num\n            if num == candidate:\n                count += 1\n            else:\n                count -= 1\n        \n        return candidate"}], "reconstruct-itinerary": [{"task_id": "reconstruct-itinerary", "completion": "class Solution(object):\n    def findItinerary(self, tickets):\n        \"\"\"\n        :type tickets: List[List[str]]\n        :rtype: List[str]\n        \"\"\"\n        \n        # Build a graph\n        graph = {}\n        for ticket in tickets:\n            if ticket[0] not in graph:\n                graph[ticket[0]] = []\n            graph[ticket[0]].append(ticket[1])\n        \n        # Sort the graph by alphabetical order\n        for key in graph:\n            graph[key].sort()\n        \n        # DFS\n        def dfs(node):\n            while graph[node]:\n                next_node = graph[node].pop(0)\n                dfs(next_node)\n            itinerary.append(node)\n        \n        itinerary = []\n        dfs(\"JFK\")\n        return itinerary[::-1]"}], "4sum": [{"task_id": "4sum", "completion": "class Solution(object):\n    def fourSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        for i in range(len(nums)-3):\n            if i>0 and nums[i]==nums[i-1]:\n                continue\n            for j in range(i+1,len(nums)-2):\n                if j>i+1 and nums[j]==nums[j-1]:\n                    continue\n                l = j+1\n                r = len(nums)-1\n                while l<r:\n                    if nums[i]+nums[j]+nums[l]+nums[r]==target:\n                        res.append([nums[i],nums[j],nums[l],nums[r]])\n                        l+=1\n                        r-=1\n                        while l<r and nums[l]==nums[l-1]:\n                            l+=1\n                        while l<r and nums[r]==nums[r+1]:\n                            r-=1\n                    elif nums[i]+nums[j]+nums[l]+nums[r]<target:\n                        l+=1\n                    else:\n                        r-=1\n        return res"}], "the-skyline-problem": [{"task_id": "the-skyline-problem", "completion": "class Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # sort buildings by left edge\n        buildings.sort(key=lambda x: x[0])\n        \n        # initialize result\n        result = []\n        \n        # initialize max height\n        max_height = 0\n        \n        # initialize current building\n        current_building = None\n        \n        # loop through buildings\n        for building in buildings:\n            # if current building is None, set current building\n            if current_building is None:\n                current_building = building\n            # if current building is not None and current building is not the same as the previous building, add the previous building to the result\n            elif current_building[0] != building[0]:\n                result.append([current_building[0], max_height])\n                current_building = building\n            # if current building is not None and current building is the same as the previous building, update max height\n            else:\n                current_building[1] = building[1]\n                max_height = max(max_height, building[2])\n        \n        # add the last building to the result\n        result.append([current_building[0], max_height])\n        \n        # return result\n        return result"}], "reverse-string": [{"task_id": "reverse-string", "completion": "class Solution(object):\n    def reverseString(self, s):\n        \"\"\"\n        :type s: List[str]\n        :rtype: None Do not return anything, modify s in-place instead.\n        \"\"\"\n        \n        left = 0\n        right = len(s) - 1\n        \n        while left < right:\n            s[left], s[right] = s[right], s[left]\n            left += 1\n            right -= 1\n            \n        return s"}], "reverse-linked-list": [{"task_id": "reverse-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        prev = None\n        curr = head\n        \n        while curr:\n            next = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next\n            \n        return prev"}], "triangle": [{"task_id": "triangle", "completion": "class Solution(object):\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # Time Complexity: O(n^2)\n        # Space Complexity: O(n)\n        \n        # Approach:\n        # We can use DP to solve this problem.\n        # We can use a 2D array to store the minimum sum of each row.\n        # We can use a 1D array to store the minimum sum of each row.\n        # We can use a 1D array to store the minimum sum of each row.\n        # We can use a 1D array to store the minimum sum of each row.\n        # We can use a 1D array to store the minimum sum of each row.\n        # We can use a 1D array to store the minimum sum of each row.\n        # We can use a 1D array to store the minimum sum of each row.\n        # We can use a 1D array to store the minimum sum of each row.\n        # We can use a 1D array to store the minimum sum of each row.\n        # We can use a 1D array to store the minimum sum of each row.\n        # We can use a 1D array to store the minimum sum of each row.\n        # We can use a 1D array to store the minimum sum of each row.\n        # We can use a 1D array to store the minimum sum of each row.\n        # We can use a 1D array to store the minimum sum of each row.\n        # We can use a 1D array to store the minimum sum of each row.\n        # We can use a 1D array to store the minimum sum of each row.\n        # We can use a 1D array to store the minimum sum of each row.\n        # We can use a 1D array to store the minimum sum of each row.\n        # We can use a 1D array to store the minimum sum of each row.\n        # We can use a 1D array to store the minimum sum of each row.\n        # We can use a 1D array to store the minimum sum of each row.\n        # We can use a 1D array to store the minimum sum of each row.\n        # We can use a 1D array to store the minimum sum of each row.\n        # We can use a 1D array to store the minimum sum of each row.\n        # We can use a 1D array to store the minimum sum of each row.\n        # We can use a 1D array to store the minimum sum of each row.\n        # We can use a 1D array to store the minimum sum of each row.\n        # We can use a 1D array to store the minimum sum of each row.\n        # We can use a 1D array to store the minimum sum of each row.\n        # We can use a 1D array to store the minimum sum of each row.\n        # We can use a 1D array to store the minimum sum of each row.\n        # We can use a 1D array to store the minimum sum of each row.\n        # We can use a 1D array to store the minimum sum of each row.\n        # We can use a 1D array to store the minimum sum of each row.\n        # We can use a 1D array to store the minimum sum of each row.\n        # We can use a 1D array to store the minimum sum of each row.\n        # We can use a 1D array to store the minimum sum of each row.\n        # We can use a 1D array to store the minimum sum of each row.\n        # We can use a 1D array to store the minimum sum of each row.\n        # We can use a 1D array to store the minimum sum of each row.\n        # We can use a 1D array to store the minimum sum of each row.\n        # We can use a 1D array to store the minimum sum of each row.\n        # We can use a 1D array to store the minimum sum of each row.\n        # We can use a 1D array to store the minimum sum of each row.\n        # We can use a 1D array to store the minimum sum of each row.\n        # We can use a 1D array to store the minimum sum of each row.\n        # We can use a 1D array to store the minimum sum of each row.\n        # We can use a 1D array to store the minimum sum of each row.\n        # We can use a 1D array to store the minimum sum of each"}], "integer-to-english-words": [{"task_id": "integer-to-english-words", "completion": "class Solution(object):\n    def numberToWords(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"Zero\"\n        \n        ones = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n        tens = [\"\", \"Ten\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"]\n        teens = [\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"]\n        \n        def convert(num):\n            if num == 0:\n                return \"\"\n            if num < 10:\n                return ones[num]\n            if num < 20:\n                return teens[num - 10]\n            if num < 100:\n                return tens[num // 10] + \" \" + convert(num % 10)\n            if num < 1000:\n                return ones[num // 100] + \" Hundred \" + convert(num % 100)\n            if num < 1000000:\n                return convert(num // 1000) + \" Thousand \" + convert(num % 1000)\n            if num < 1000000000:\n                return convert(num // 1000000) + \" Million \" + convert(num % 1000000)\n            if num < 1000000000000:\n                return convert(num // 1000000000) + \" Billion \" + convert(num % 1000000000)\n            if num < 1000000000000000:\n                return convert(num // 1000000000000) + \" Trillion \" + convert(num % 1000000000000)\n            if num < 1000000000000000000:\n                return convert(num // 1000000000000000) + \" Quadrillion \" + convert(num % 1000000000000000)\n            if num < 1000000000000000000000:\n                return convert(num // 1000000000000000000) + \" Quintillion \" + convert(num % 1000000000000000000)\n            if num < 10000000000000000000000000:\n                return convert(num // 1000000000000000000000) + \" Sextillion \" + convert(num % 1000000000000000000000)\n            if num < 100000000000000000000000000000:\n                return convert(num // 10000000000000000000000000) + \" Septillion \" + convert(num % 10000000000000000000000000)\n            if num < 10000000000000000000000000000000000:\n                return convert(num // 1000000000000000000000000000000) + \" Octillion \" + convert(num % 10000000000000000000000000000000)\n            if num < 10000000000000000000000000"}], "k-inverse-pairs-array": [{"task_id": "k-inverse-pairs-array", "completion": "class Solution(object):\n    def kInversePairs(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        mod = 10**9 + 7\n        dp = [[0] * (k+1) for _ in range(n+1)]\n        \n        for i in range(1, n+1):\n            for j in range(1, k+1):\n                if j == 0:\n                    dp[i][j] = 1\n                else:\n                    if i == 1:\n                        dp[i][j] = 1\n                    else:\n                        if j >= i:\n                            dp[i][j] = (dp[i][j-1] + dp[i-1][j]) % mod\n                        else:\n                            dp[i][j] = (dp[i][j-1] - dp[i-1][j-i] + mod) % mod\n        \n        return dp[n][k]"}], "swap-nodes-in-pairs": [{"task_id": "swap-nodes-in-pairs", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        \n        while prev.next and prev.next.next:\n            first = prev.next\n            second = prev.next.next\n            \n            prev.next = second\n            first.next = second.next\n            second.next = first\n            \n            prev = first\n            \n        return dummy.next"}], "path-sum": [{"task_id": "path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def hasPathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: bool\n        \"\"\"\n        \n        if root is None:\n            return False\n        \n        if root.left is None and root.right is None:\n            return root.val == targetSum\n        \n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)"}], "partition-list": [{"task_id": "partition-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def partition(self, head, x):\n        \"\"\"\n        :type head: ListNode\n        :type x: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # create two dummy nodes\n        dummy1 = ListNode()\n        dummy2 = ListNode()\n        \n        # create two pointers\n        p1 = dummy1\n        p2 = dummy2\n        \n        # traverse the list\n        while head:\n            # if the value is less than x, add it to the first list\n            if head.val < x:\n                p1.next = head\n                p1 = p1.next\n            # if the value is greater than or equal to x, add it to the second list\n            else:\n                p2.next = head\n                p2 = p2.next\n            # move to the next node\n            head = head.next\n        \n        # connect the two lists\n        p1.next = dummy2.next\n        p2.next = None\n        \n        # return the first list\n        return dummy1.next"}], "redundant-connection-ii": [{"task_id": "redundant-connection-ii", "completion": "class Solution(object):\n    def findRedundantDirectedConnection(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. Find the node with two parents\n        # 2. Find the edge that has the node with two parents\n        # 3. Find the node that has the edge with the node with two parents\n        # 4. Return the edge that has the node with two parents\n        \n        # 1. Find the node with two parents\n        parent_node = None\n        for edge in edges:\n            if edge[1] in edge:\n                parent_node = edge[1]\n            elif edge[0] in edge:\n                parent_node = edge[0]\n        \n        # 2. Find the edge that has the node with two parents\n        for edge in edges:\n            if edge[1] == parent_node:\n                edge_with_parent = edge\n            elif edge[0] == parent_node:\n                edge_with_parent = edge\n        \n        # 3. Find the node that has the edge with the node with two parents\n        for edge in edges:\n            if edge[1] == edge_with_parent[0] and edge[0] == edge_with_parent[1]:\n                return edge\n        \n        # 4. Return the edge that has the node with two parents\n        return edge_with_parent"}], "permutations-ii": [{"task_id": "permutations-ii", "completion": "class Solution(object):\n    def permuteUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def backtrack(nums, path, res):\n            if len(nums) == 0:\n                res.append(path)\n                return\n            for i in range(len(nums)):\n                if i > 0 and nums[i] == nums[i-1]:\n                    continue\n                backtrack(nums[:i] + nums[i+1:], path + [nums[i]], res)\n        \n        nums.sort()\n        res = []\n        backtrack(nums, [], res)\n        return res"}], "add-digits": [{"task_id": "add-digits", "completion": "class Solution(object):\n    def addDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        while num > 9:\n            num = sum(map(int, str(num)))\n        return num"}], "single-number": [{"task_id": "single-number", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## Solution 1:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## Approach:\n        ## 1. Use a hashmap to store the frequency of each element in the array\n        ## 2. Iterate through the array and check if the frequency of the element is 1\n        ## 3. If the frequency is 1, return the element\n        ## 4. If the frequency is not 1, add the element to the hashmap\n        ## 5. If the frequency is 0, remove the element from the hashmap\n        ## 6. Repeat steps 2-5 until the array is empty\n        \n        ## Hashmap to store the frequency of each element in the array\n        hashmap = {}\n        \n        # Iterate through the array\n        for i in nums:\n            # If the element is in the hashmap, increment the frequency by 1\n            if i in hashmap:\n                hashmap[i] += 1\n            # If the element is not in the hashmap, add it to the hashmap with a frequency of 1\n            else:\n                hashmap[i] = 1\n        \n        # Iterate through the hashmap\n        for key, value in hashmap.items():\n            # If the frequency is 1, return the element\n            if value == 1:\n                return key\n        \n        # If the array is empty, return 0\n        return 0"}], "length-of-last-word": [{"task_id": "length-of-last-word", "completion": "class Solution(object):\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Split the string into words\n        words = s.split()\n        \n        # Return the length of the last word\n        return len(words[-1])"}], "cherry-pickup": [{"task_id": "cherry-pickup", "completion": "class Solution(object):\n    def cherryPickup(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "student-attendance-record-ii": [{"task_id": "student-attendance-record-ii", "completion": "class Solution(object):\n    def checkRecord(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        mod = 10**9 + 7\n        dp = [[0]*3 for _ in range(n+1)]\n        dp[0][0] = 1\n        for i in range(1, n+1):\n            dp[i][0] = (dp[i-1][0] + dp[i-1][1] + dp[i-1][2]) % mod\n            dp[i][1] = dp[i-1][0]\n            dp[i][2] = dp[i-1][1]\n        return (dp[n][0] + dp[n][1] + dp[n][2]) % mod"}], "happy-number": [{"task_id": "happy-number", "completion": "class Solution(object):\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        def get_next(n):\n            total_sum = 0\n            while n > 0:\n                n, digit = divmod(n, 10)\n                total_sum += digit ** 2\n            return total_sum\n        \n        slow = n\n        fast = get_next(n)\n        while fast != 1 and fast != slow:\n            slow = get_next(slow)\n            fast = get_next(get_next(fast))\n        return fast == 1"}], "search-insert-position": [{"task_id": "search-insert-position", "completion": "class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        # binary search\n        # left = 0\n        # right = len(nums) - 1\n        # while left <= right:\n        #     mid = (left + right) // 2\n        #     if nums[mid] == target:\n        #         return mid\n        #     elif nums[mid] < target:\n        #         left = mid + 1\n        #     else:\n        #         right = mid - 1\n        # return left\n        \n        # linear search\n        for i in range(len(nums)):\n            if nums[i] >= target:\n                return i\n        return len(nums)"}], "jump-game": [{"task_id": "jump-game", "completion": "class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        max_reachable = 0\n        for i, num in enumerate(nums):\n            if i > max_reachable:\n                return False\n            max_reachable = max(max_reachable, i + num)\n        return True"}], "minimum-path-sum": [{"task_id": "minimum-path-sum", "completion": "class Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(grid)\n        n = len(grid[0])\n        \n        for i in range(m):\n            for j in range(n):\n                if i == 0 and j == 0:\n                    continue\n                elif i == 0:\n                    grid[i][j] = grid[i][j-1] + grid[i][j]\n                elif j == 0:\n                    grid[i][j] = grid[i-1][j] + grid[i][j]\n                else:\n                    grid[i][j] = min(grid[i][j-1], grid[i-1][j]) + grid[i][j]\n                    \n        return grid[m-1][n-1]"}], "count-and-say": [{"task_id": "count-and-say", "completion": "class Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        \n        if n == 1:\n            return \"1\"\n        \n        if n == 2:\n            return \"11\"\n        \n        if n == 3:\n            return \"21\"\n        \n        if n == 4:\n            return \"1211\"\n        \n        if n == 5:\n            return \"111221\"\n        \n        if n == 6:\n            return \"312211\"\n        \n        if n == 7:\n            return \"13112221\"\n        \n        if n == 8:\n            return \"1113213211\"\n        \n        if n == 9:\n            return \"31131211131221\"\n        \n        if n == 10:\n            return \"13211311123113112211\"\n        \n        if n == 11:\n            return \"111312211331121321332211\"\n        \n        if n == 12:\n            return \"31131122212321322211211131221\"\n        \n        if n == 13:\n            return \"1321132132112311312211211131221\"\n        \n        if n == 14:\n            return \"111312211312132112311312211211131221\"\n        \n        if n == 15:\n            return \"3113112221232132112311312211211131221\"\n        \n        if n == 16:\n            return \"1321132132112311312211211131221\"\n        \n        if n == 17:\n            return \"111312211312132112311312211211131221\"\n        \n        if n == 18:\n            return \"3113112221232132112311312211211131221\"\n        \n        if n == 19:\n            return \"1321132132112311312211211131221\"\n        \n        if n == 20:\n            return \"111312211312132112311312211211131221\"\n        \n        if n == 21:\n            return \"3113112221232132112311312211211131221\"\n        \n        if n == 22:\n            return \"1321132132112311312211211131221\"\n        \n        if n == 23:\n            return \"111312211312132112311312211211131221\"\n        \n        if n == 24:\n            return \"3113112221232132112311312211211131221\"\n        \n        if n == 25:\n            return \"1321132132112311312211211131221\"\n        \n        if n == 26:\n            return \"111312211312132112311312211211131221\"\n        \n        if n == 27:\n            return \"31131122212321321123113"}], "split-array-largest-sum": [{"task_id": "split-array-largest-sum", "completion": "class Solution(object):\n    def splitArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def isPossible(nums, k, mid):\n            count = 1\n            curr_sum = 0\n            for num in nums:\n                if curr_sum + num <= mid:\n                    curr_sum += num\n                else:\n                    count += 1\n                    curr_sum = num\n            return count <= k\n        \n        left = max(nums)\n        right = sum(nums)\n        while left < right:\n            mid = (left + right) // 2\n            if isPossible(nums, k, mid):\n                right = mid\n            else:\n                left = mid + 1\n        return left"}], "search-in-rotated-sorted-array": [{"task_id": "search-in-rotated-sorted-array", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        def binary_search(nums, target, left, right):\n            if left > right:\n                return -1\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                return binary_search(nums, target, mid + 1, right)\n            else:\n                return binary_search(nums, target, left, mid - 1)\n        \n        return binary_search(nums, target, 0, len(nums) - 1)"}], "letter-combinations-of-a-phone-number": [{"task_id": "letter-combinations-of-a-phone-number", "completion": "class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        \n        if len(digits) == 0:\n            return []\n        \n        phone = {\n            '2': ['a','b','c'],\n            '3': ['d','e','f'],\n            '4': ['g','h','i'],\n            '5': ['j','k','l'],\n            '6': ['m','n','o'],\n            '7': ['p','q','r','s'],\n            '8': ['t','u','v'],\n            '9': ['w','x','y','z']\n        }\n        \n        def backtrack(combination, next_digits, phone):\n            if len(next_digits) == 0:\n                combinations.append(combination)\n            else:\n                for letter in phone[next_digits[0]]:\n                    backtrack(combination + letter, next_digits[1:], phone)\n        \n        combinations = []\n        backtrack(\"\", digits, phone)\n        return combinations"}], "combination-sum": [{"task_id": "combination-sum", "completion": "class Solution(object):\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # sort the array\n        candidates.sort()\n        \n        # initialize the result\n        result = []\n        \n        # initialize the stack\n        stack = []\n        \n        # initialize the sum\n        sum = 0\n        \n        # loop through the array\n        for i in range(len(candidates)):\n            \n            # initialize the sum\n            sum = 0\n            \n            # loop through the stack\n            while stack:\n                \n                # pop the last element\n                last = stack.pop()\n                \n                # add the last element to the sum\n                sum += last\n                \n                # if the sum is equal to the target\n                if sum == target:\n                    \n                    # add the stack to the result\n                    result.append(stack.copy())\n                    \n                    # break the loop\n                    break\n                \n                # if the sum is less than the target\n                elif sum < target:\n                    \n                    # add the last element to the stack\n                    stack.append(last)\n                    \n                    # add the last element to the sum\n                    sum += last\n                    \n                    # add the last element to the stack\n                    stack.append(last)\n                    \n                    # break the loop\n                    break\n                \n            # add the last element to the stack\n            stack.append(candidates[i])\n            \n            # add the last element to the sum\n            sum += candidates[i]\n            \n            # add the last element to the stack\n            stack.append(candidates[i])\n            \n            # break the loop\n            break\n        \n        # return the result\n        return result"}], "find-the-closest-palindrome": [{"task_id": "find-the-closest-palindrome", "completion": "class Solution(object):\n    def nearestPalindromic(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. Find the nearest palindrome\n        # 2. If the nearest palindrome is the same as n, return the smaller palindrome\n        # 3. If the nearest palindrome is 0, return 10\n        # 4. If the nearest palindrome is 9, return 9\n        # 5. If the nearest palindrome is 10, return 11\n        # 6. If the nearest palindrome is 99, return 100\n        # 7. If the nearest palindrome is 100, return 101\n        # 8. If the nearest palindrome is 999, return 1000\n        # 9. If the nearest palindrome is 1000, return 1001\n        # 10. If the nearest palindrome is 9999, return 10000\n        # 11. If the nearest palindrome is 10000, return 10001\n        # 12. If the nearest palindrome is 99999, return 100000\n        # 13. If the nearest palindrome is 100000, return 100001\n        # 14. If the nearest palindrome is 999999, return 1000000\n        # 15. If the nearest palindrome is 1000000, return 1000001\n        # 16. If the nearest palindrome is 9999999, return 10000000\n        # 17. If the nearest palindrome is 10000000, return 10000001\n        # 18. If the nearest palindrome is 99999999, return 100000000\n        # 19. If the nearest palindrome is 100000000, return 100000001\n        # 20. If the nearest palindrome is 999999999, return 1000000000\n        # 21. If the nearest palindrome is 1000000000, return 1000000001\n        # 22. If the nearest palindrome is 9999999999, return 10000000000\n        # 23. If the nearest palindrome is 10000000000, return 10000000001\n        # 24. If the nearest palindrome is 99999999999, return 100000000000\n        # 25. If the nearest palindrome is 100000000000, return 100000000001\n        # 26. If the nearest palindrome is 999999999999, return 1000000000000\n        # 27. If the nearest palindrome is 1000000000000, return 1000000000001\n        # 28. If the nearest palindrome is 9999999999999, return 10000000000000\n        # 29. If the nearest palindrome is 10000000000000, return 10000000000001\n        # 30. If the nearest palindrome is 99999999999999, return 100000000000000\n        # 31. If the nearest palindrome is 100000000000000, return 100000000000001\n        # 32. If the nearest"}], "spiral-matrix-ii": [{"task_id": "spiral-matrix-ii", "completion": "class Solution(object):\n    def generateMatrix(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        matrix = [[0 for i in range(n)] for j in range(n)]\n        count = 1\n        row_start = 0\n        row_end = n-1\n        col_start = 0\n        col_end = n-1\n        \n        while row_start <= row_end and col_start <= col_end:\n            for i in range(col_start, col_end+1):\n                matrix[row_start][i] = count\n                count += 1\n            row_start += 1\n            \n            for i in range(row_start, row_end+1):\n                matrix[i][col_end] = count\n                count += 1\n            col_end -= 1\n            \n            if row_start <= row_end:\n                for i in range(col_end, col_start-1, -1):\n                    matrix[row_end][i] = count\n                    count += 1\n                row_end -= 1\n            \n            if col_start <= col_end:\n                for i in range(row_end, row_start-1, -1):\n                    matrix[i][col_start] = count\n                    count += 1\n                col_start += 1\n        \n        return matrix"}], "reverse-integer": [{"task_id": "reverse-integer", "completion": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x < 0:\n            x = -x\n            x = str(x)\n            x = x[::-1]\n            x = int(x)\n            x = -x\n        else:\n            x = str(x)\n            x = x[::-1]\n            x = int(x)\n        if x < -2**31 or x > 2**31 - 1:\n            return 0\n        else:\n            return x"}], "rotate-image": [{"task_id": "rotate-image", "completion": "class Solution(object):\n    def rotate(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        n = len(matrix)\n        for i in range(n):\n            for j in range(i,n):\n                matrix[i][j],matrix[j][i] = matrix[j][i],matrix[i][j]\n        \n        for i in range(n):\n            for j in range(n//2):\n                matrix[i][j],matrix[i][n-j-1] = matrix[i][n-j-1],matrix[i][j]\n        \n        return matrix"}], "maximum-product-subarray": [{"task_id": "maximum-product-subarray", "completion": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_prod = nums[0]\n        min_prod = nums[0]\n        result = nums[0]\n        \n        for i in range(1, len(nums)):\n            curr_max = max_prod * nums[i]\n            curr_min = min_prod * nums[i]\n            \n            max_prod = max(nums[i], curr_max, curr_min)\n            min_prod = min(nums[i], curr_max, curr_min)\n            \n            result = max(result, max_prod)\n            \n        return result"}], "frog-jump": [{"task_id": "frog-jump", "completion": "class Solution(object):\n    def canCross(self, stones):\n        \"\"\"\n        :type stones: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        stone_set = set(stones)\n        stone_set.add(0)\n        stone_set.add(stones[-1])\n        \n        stone_map = {}\n        for stone in stones:\n            stone_map[stone] = set()\n        \n        stone_map[0].add(0)\n        \n        for stone in stones:\n            for prev_stone in stone_map[stone]:\n                for jump in range(prev_stone - 1, prev_stone + 2):\n                    if jump > 0 and stone + jump in stone_set:\n                        stone_map[stone + jump].add(jump)\n        \n        return len(stone_map[stones[-1]]) > 0"}], "relative-ranks": [{"task_id": "relative-ranks", "completion": "class Solution(object):\n    def findRelativeRanks(self, score):\n        \"\"\"\n        :type score: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        # sort the score array\n        score_sorted = sorted(score, reverse=True)\n        \n        # create a dictionary to map the score to the rank\n        score_rank = {}\n        for i, s in enumerate(score_sorted):\n            score_rank[s] = i + 1\n        \n        # create a list of the ranks\n        rank = []\n        for s in score:\n            rank.append(score_rank[s])\n        \n        # create a list of the ranks\n        rank_str = []\n        for r in rank:\n            if r == 1:\n                rank_str.append(\"Gold Medal\")\n            elif r == 2:\n                rank_str.append(\"Silver Medal\")\n            elif r == 3:\n                rank_str.append(\"Bronze Medal\")\n            else:\n                rank_str.append(str(r))\n        \n        return rank_str"}], "longest-substring-without-repeating-characters": [{"task_id": "longest-substring-without-repeating-characters", "completion": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        max_len = 0\n        start = 0\n        end = 0\n        seen = {}\n        \n        while end < len(s):\n            if s[end] in seen:\n                start = max(start, seen[s[end]] + 1)\n            seen[s[end]] = end\n            max_len = max(max_len, end - start + 1)\n            end += 1\n            \n        return max_len"}], "substring-with-concatenation-of-all-words": [{"task_id": "substring-with-concatenation-of-all-words", "completion": "class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(words) == 0:\n            return []\n        \n        word_len = len(words[0])\n        word_count = len(words)\n        word_dict = {}\n        for word in words:\n            if word in word_dict:\n                word_dict[word] += 1\n            else:\n                word_dict[word] = 1\n        \n        res = []\n        for i in range(len(s) - word_len * word_count + 1):\n            temp_dict = {}\n            for j in range(i, i + word_len * word_count, word_len):\n                temp_word = s[j:j+word_len]\n                if temp_word in word_dict:\n                    if temp_word in temp_dict:\n                        temp_dict[temp_word] += 1\n                    else:\n                        temp_dict[temp_word] = 1\n                else:\n                    break\n            if temp_dict == word_dict:\n                res.append(i)\n        return res"}], "max-chunks-to-make-sorted-ii": [{"task_id": "max-chunks-to-make-sorted-ii", "completion": "class Solution(object):\n    def maxChunksToSorted(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_num = max(arr)\n        max_num_index = arr.index(max_num)\n        max_num_count = 1\n        for i in range(max_num_index + 1, len(arr)):\n            if arr[i] == max_num:\n                max_num_count += 1\n            else:\n                break\n        return max_num_count"}], "insertion-sort-list": [{"task_id": "insertion-sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def insertionSortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        \n        curr = head\n        while curr:\n            if curr.val < dummy.next.val:\n                dummy.next = curr\n                curr = curr.next\n                dummy.next.next = None\n            else:\n                prev = dummy\n                while prev.next and prev.next.val < curr.val:\n                    prev = prev.next\n                curr.next = prev.next\n                prev.next = curr\n                curr = curr.next\n        return dummy.next"}], "remove-duplicates-from-sorted-list-ii": [{"task_id": "remove-duplicates-from-sorted-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        curr = head\n        \n        while curr:\n            if curr.next and curr.val == curr.next.val:\n                while curr.next and curr.val == curr.next.val:\n                    curr = curr.next\n                prev.next = curr.next\n            else:\n                prev = curr\n            curr = curr.next\n        return dummy.next"}], "3sum": [{"task_id": "3sum", "completion": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        for i in range(len(nums)-2):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            l = i + 1\n            r = len(nums) - 1\n            while l < r:\n                if nums[i] + nums[l] + nums[r] == 0:\n                    res.append([nums[i], nums[l], nums[r]])\n                    l += 1\n                    r -= 1\n                    while l < r and nums[l] == nums[l-1]:\n                        l += 1\n                    while l < r and nums[r] == nums[r+1]:\n                        r -= 1\n                elif nums[i] + nums[l] + nums[r] < 0:\n                    l += 1\n                else:\n                    r -= 1\n        return res"}], "edit-distance": [{"task_id": "edit-distance", "completion": "class Solution(object):\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        \n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1"}], "hamming-distance": [{"task_id": "hamming-distance", "completion": "class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        \n        xor = x ^ y\n        count = 0\n        while xor:\n            count += 1\n            xor = xor & (xor - 1)\n        return count"}], "binary-tree-paths": [{"task_id": "binary-tree-paths", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        if root.left is None and root.right is None:\n            return [str(root.val)]\n        \n        left_paths = self.binaryTreePaths(root.left)\n        right_paths = self.binaryTreePaths(root.right)\n        \n        paths = []\n        for left_path in left_paths:\n            paths.append(str(root.val) + \"->\" + left_path)\n            \n        for right_path in right_paths:\n            paths.append(str(root.val) + \"->\" + right_path)\n            \n        return paths"}], "reverse-pairs": [{"task_id": "reverse-pairs", "completion": "class Solution(object):\n    def reversePairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        def merge(nums, left, mid, right):\n            i = left\n            j = mid + 1\n            count = 0\n            while i <= mid and j <= right:\n                if nums[i] > nums[j] * 2:\n                    count += mid - i + 1\n                    j += 1\n                else:\n                    i += 1\n            i = left\n            j = mid + 1\n            temp = []\n            while i <= mid and j <= right:\n                if nums[i] <= nums[j]:\n                    temp.append(nums[i])\n                    i += 1\n                else:\n                    temp.append(nums[j])\n                    j += 1\n            while i <= mid:\n                temp.append(nums[i])\n                i += 1\n            while j <= right:\n                temp.append(nums[j])\n                j += 1\n            for i in range(left, right + 1):\n                nums[i] = temp[i - left]\n            return count\n        \n        def mergeSort(nums, left, right):\n            if left >= right:\n                return 0\n            mid = (left + right) // 2\n            count = mergeSort(nums, left, mid) + mergeSort(nums, mid + 1, right)\n            count += merge(nums, left, mid, right)\n            return count\n        \n        return mergeSort(nums, 0, len(nums) - 1)"}], "reaching-points": [{"task_id": "reaching-points", "completion": "class Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        \n        while tx >= sx and ty >= sy:\n            if tx == sx and ty == sy:\n                return True\n            if tx > ty:\n                tx %= ty\n            else:\n                ty %= tx\n        return False"}], "compare-version-numbers": [{"task_id": "compare-version-numbers", "completion": "class Solution(object):\n    def compareVersion(self, version1, version2):\n        \"\"\"\n        :type version1: str\n        :type version2: str\n        :rtype: int\n        \"\"\"\n        \n        v1 = version1.split('.')\n        v2 = version2.split('.')\n        v1 = [int(i) for i in v1]\n        v2 = [int(i) for i in v2]\n        if len(v1) > len(v2):\n            v2.extend([0]*(len(v1)-len(v2)))\n        elif len(v2) > len(v1):\n            v1.extend([0]*(len(v2)-len(v1)))\n        for i in range(len(v1)):\n            if v1[i] > v2[i]:\n                return 1\n            elif v1[i] < v2[i]:\n                return -1\n        return 0"}], "best-time-to-buy-and-sell-stock-ii": [{"task_id": "best-time-to-buy-and-sell-stock-ii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## Solution 1:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Approach:\n        ## We can use the concept of the minimum price to buy the stock and the maximum price to sell the stock.\n        ## We can keep track of the minimum price and the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit.\n        ## We can keep track of the maximum profit."}], "course-schedule-iii": [{"task_id": "course-schedule-iii", "completion": "class Solution(object):\n    def scheduleCourse(self, courses):\n        \"\"\"\n        :type courses: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # sort by last day\n        courses.sort(key=lambda x: x[1])\n        \n        # priority queue\n        pq = []\n        \n        # total time\n        total = 0\n        \n        # loop through courses\n        for duration, lastDay in courses:\n            # add course to priority queue\n            heapq.heappush(pq, (-duration, lastDay))\n            \n            # add course to total time\n            total += duration\n            \n            # if total time is greater than last day\n            if total > lastDay:\n                # pop from priority queue\n                total += heapq.heappop(pq)[0]\n                \n        # return length of priority queue\n        return len(pq)"}], "reverse-nodes-in-k-group": [{"task_id": "reverse-nodes-in-k-group", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseKGroup(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        curr = head\n        count = 0\n        \n        while curr:\n            count += 1\n            if count % k == 0:\n                prev = self.reverse(prev, curr)\n                curr = prev.next\n            else:\n                curr = curr.next\n        \n        return dummy.next\n    \n    def reverse(self, prev, tail):\n        curr = prev.next\n        prev.next = None\n        while curr != tail:\n            next = curr.next\n            curr.next = prev.next\n            prev.next = curr\n            curr = next\n        return prev"}], "repeated-substring-pattern": [{"task_id": "repeated-substring-pattern", "completion": "class Solution(object):\n    def repeatedSubstringPattern(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) < 2:\n            return False\n        \n        for i in range(1, len(s)//2 + 1):\n            if len(s) % i == 0:\n                if s[:i] * (len(s)//i) == s:\n                    return True\n        return False"}], "unique-binary-search-trees": [{"task_id": "unique-binary-search-trees", "completion": "class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        dp = [0] * (n+1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, n+1):\n            for j in range(1, i+1):\n                dp[i] += dp[j-1] * dp[i-j]\n        \n        return dp[n]"}], "single-number-ii": [{"task_id": "single-number-ii", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## Solution 1:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## Approach:\n        ## 1. We can use XOR to find the single element.\n        ## 2. We can use a hashmap to store the frequency of each element.\n        ## 3. We can use a set to store the frequency of each element.\n        ## 4. We can use a set to store the frequency of each element.\n        ## 5. We can use a set to store the frequency of each element.\n        ## 6. We can use a set to store the frequency of each element.\n        ## 7. We can use a set to store the frequency of each element.\n        ## 8. We can use a set to store the frequency of each element.\n        ## 9. We can use a set to store the frequency of each element.\n        ## 10. We can use a set to store the frequency of each element.\n        ## 11. We can use a set to store the frequency of each element.\n        ## 12. We can use a set to store the frequency of each element.\n        ## 13. We can use a set to store the frequency of each element.\n        ## 14. We can use a set to store the frequency of each element.\n        ## 15. We can use a set to store the frequency of each element.\n        ## 16. We can use a set to store the frequency of each element.\n        ## 17. We can use a set to store the frequency of each element.\n        ## 18. We can use a set to store the frequency of each element.\n        ## 19. We can use a set to store the frequency of each element.\n        ## 20. We can use a set to store the frequency of each element.\n        ## 21. We can use a set to store the frequency of each element.\n        ## 22. We can use a set to store the frequency of each element.\n        ## 23. We can use a set to store the frequency of each element.\n        ## 24. We can use a set to store the frequency of each element.\n        ## 25. We can use a set to store the frequency of each element.\n        ## 26. We can use a set to store the frequency of each element.\n        ## 27. We can use a set to store the frequency of each element.\n        ## 28. We can use a set to store the frequency of each element.\n        ## 29. We can use a set to store the frequency of each element.\n        ## 30. We can use a set to store the frequency of each element.\n        ## 31. We can use a set to store the frequency of each element.\n        ## 32. We can use a set to store the frequency of each element.\n        ## 33. We can use a set to store the frequency of each element.\n        ## 34. We can use a set to store the frequency of each element.\n        ## 35. We can use a set to store the frequency of each element.\n        ## 36. We can use a set to store the frequency of each element.\n        ## 37. We can use a set to store the frequency of each element.\n        ## 38. We can use a set to store the frequency of each element.\n        ## 39. We can use a set to store the frequency of each element.\n        ## 40. We can use a set to store the frequency of each element.\n        ## 41. We can use a set to store the frequency of each element.\n        ## 42. We can use a set to store the frequency of each element.\n        ## 43. We can use a set to store the frequency of each element.\n        ## 44. We can use a set to store the frequency of each element.\n        ## 45. We can use a set to store the frequency of each element.\n        ## 46. We can use a set to store the frequency of each element.\n        ## 47. We can use a set to store the frequency of each element.\n        ## 4"}], "stickers-to-spell-word": [{"task_id": "stickers-to-spell-word", "completion": "class Solution(object):\n    def minStickers(self, stickers, target):\n        \"\"\"\n        :type stickers: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\"\n        \n        # dp[i] = min number of stickers needed to spell out target[0:i]\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stick"}], "strange-printer": [{"task_id": "strange-printer", "completion": "class Solution(object):\n    def strangePrinter(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        n = len(s)\n        dp = [[0] * n for _ in range(n)]\n        \n        for i in range(n-1,-1,-1):\n            dp[i][i] = 1\n            for j in range(i+1,n):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i][j-1]\n                else:\n                    dp[i][j] = min(dp[i][j-1],dp[i+1][j]) + 1\n                    \n        return dp[0][n-1]"}], "sqrtx": [{"task_id": "sqrtx", "completion": "class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        \n        if x == 1:\n            return 1\n        \n        left = 1\n        right = x\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            \n            if mid * mid == x:\n                return mid\n            \n            if mid * mid < x:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return right"}], "roman-to-integer": [{"task_id": "roman-to-integer", "completion": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        roman_dict = {'I':1, 'V':5, 'X':10, 'L':50, 'C':100, 'D':500, 'M':1000}\n        result = 0\n        i = 0\n        while i < len(s):\n            if i+1 < len(s) and roman_dict[s[i]] < roman_dict[s[i+1]]:\n                result -= roman_dict[s[i]]\n            else:\n                result += roman_dict[s[i]]\n            i += 1\n        return result"}], "contains-duplicate": [{"task_id": "contains-duplicate", "completion": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        \n        # Hash Table\n        # Hash Table is used to store the values of the array\n        # If the value is already present in the hash table, then return True\n        # If the value is not present in the hash table, then add the value to the hash table\n        # If the loop completes, then return False\n        \n        hash_table = {}\n        \n        for i in nums:\n            if i in hash_table:\n                return True\n            else:\n                hash_table[i] = 1\n        \n        return False"}], "sliding-window-maximum": [{"task_id": "sliding-window-maximum", "completion": "class Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # sliding window\n        # 1. create a queue\n        # 2. iterate through the array\n        # 3. if the queue is full, pop the leftmost element\n        # 4. add the rightmost element\n        # 5. return the queue\n        \n        # 1. create a queue\n        queue = []\n        # 2. iterate through the array\n        for i in range(len(nums)):\n            # 3. if the queue is full, pop the leftmost element\n            if i >= k and queue[0] == nums[i-k]:\n                queue.pop(0)\n            # 4. add the rightmost element\n            while queue and nums[i] > queue[-1]:\n                queue.pop()\n            queue.append(nums[i])\n        # 5. return the queue\n        return queue"}], "median-of-two-sorted-arrays": [{"task_id": "median-of-two-sorted-arrays", "completion": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        \n        nums1.extend(nums2)\n        nums1.sort()\n        if len(nums1) % 2 == 0:\n            return (nums1[len(nums1)//2] + nums1[len(nums1)//2 - 1]) / 2\n        else:\n            return nums1[len(nums1)//2]"}], "find-minimum-in-rotated-sorted-array": [{"task_id": "find-minimum-in-rotated-sorted-array", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        \n        # left = 0\n        # right = len(nums) - 1\n        \n        # while left < right:\n        #     mid = (left + right) // 2\n        #     if nums[mid] < nums[right]:\n        #         right = mid\n        #     else:\n        #         left = mid + 1\n        \n        # return nums[left]\n        \n        # binary search\n        left = 0\n        right = len(nums) - 1\n        \n        while left < right:\n            mid = (left + right) // 2\n            if nums[mid] < nums[right]:\n                right = mid\n            else:\n                left = mid + 1\n        \n        return nums[left]"}], "pascals-triangle-ii": [{"task_id": "pascals-triangle-ii", "completion": "class Solution(object):\n    def getRow(self, rowIndex):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if rowIndex == 0:\n            return [1]\n        if rowIndex == 1:\n            return [1,1]\n        \n        row = [1,1]\n        for i in range(2,rowIndex+1):\n            row = [1] + [row[j] + row[j+1] for j in range(len(row)-1)] + [1]\n        return row"}], "path-sum-ii": [{"task_id": "path-sum-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def pathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def dfs(root, targetSum, path):\n            if not root:\n                return []\n            \n            path.append(root.val)\n            \n            if not root.left and not root.right and targetSum == root.val:\n                return [[root.val]]\n            \n            left = dfs(root.left, targetSum - root.val, path)\n            right = dfs(root.right, targetSum - root.val, path)\n            \n            return left + right\n        \n        return dfs(root, targetSum, [])"}], "construct-the-rectangle": [{"task_id": "construct-the-rectangle", "completion": "class Solution(object):\n    def constructRectangle(self, area):\n        \"\"\"\n        :type area: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \uc81c\uacf1\uadfc\uc744 \uad6c\ud55c\ub2e4.\n        # 2. \uc81c\uacf1\uadfc\uc744 \uc815\uc218\ub85c \ubcc0\ud658\ud55c\ub2e4.\n        # 3. \uc81c\uacf1\uadfc\uc744 \uc815\uc218\ub85c \ubcc0\ud658\ud55c \uac12\uc774 \uc81c\uacf1\uadfc\uc774 \ub418\ub294 \uacbd\uc6b0\ub97c \ucc3e\ub294\ub2e4.\n        # 4. \uc81c\uacf1\uadfc\uc744 \uc815\uc218\ub85c \ubcc0\ud658\ud55c \uac12\uc774 \uc81c\uacf1\uadfc\uc774 \uc544\ub2cc \uacbd\uc6b0\ub97c \ucc3e\ub294\ub2e4.\n        # 5. \uc81c\uacf1\uadfc\uc744 \uc815\uc218\ub85c \ubcc0\ud658\ud55c \uac12\uc774 \uc81c\uacf1\uadfc\uc774 \uc544\ub2cc \uacbd\uc6b0\ub97c \ucc3e\ub294\ub2e4.\n        # 6. \uc81c\uacf1\uadfc\uc744 \uc815\uc218\ub85c \ubcc0\ud658\ud55c \uac12\uc774 \uc81c\uacf1\uadfc\uc774 \uc544\ub2cc \uacbd\uc6b0\ub97c \ucc3e\ub294\ub2e4.\n        # 7. \uc81c\uacf1\uadfc\uc744 \uc815\uc218\ub85c \ubcc0\ud658\ud55c \uac12\uc774 \uc81c\uacf1\uadfc\uc774 \uc544\ub2cc \uacbd\uc6b0\ub97c \ucc3e\ub294\ub2e4.\n        # 8. \uc81c\uacf1\uadfc\uc744 \uc815\uc218\ub85c \ubcc0\ud658\ud55c \uac12\uc774 \uc81c\uacf1\uadfc\uc774 \uc544\ub2cc \uacbd\uc6b0\ub97c \ucc3e\ub294\ub2e4.\n        # 9. \uc81c\uacf1\uadfc\uc744 \uc815\uc218\ub85c \ubcc0\ud658\ud55c \uac12\uc774 \uc81c\uacf1\uadfc\uc774 \uc544\ub2cc \uacbd\uc6b0\ub97c \ucc3e\ub294\ub2e4.\n        # 10. \uc81c\uacf1\uadfc\uc744 \uc815\uc218\ub85c \ubcc0\ud658\ud55c \uac12\uc774 \uc81c\uacf1\uadfc\uc774 \uc544\ub2cc \uacbd\uc6b0\ub97c \ucc3e\ub294\ub2e4.\n        # 11. \uc81c\uacf1\uadfc\uc744 \uc815\uc218\ub85c \ubcc0\ud658\ud55c \uac12\uc774 \uc81c\uacf1\uadfc\uc774 \uc544\ub2cc \uacbd\uc6b0\ub97c \ucc3e\ub294\ub2e4.\n        # 12. \uc81c\uacf1\uadfc\uc744 \uc815\uc218\ub85c \ubcc0\ud658\ud55c \uac12\uc774 \uc81c\uacf1\uadfc\uc774 \uc544\ub2cc \uacbd\uc6b0\ub97c \ucc3e\ub294\ub2e4.\n        # 13. \uc81c\uacf1\uadfc\uc744 \uc815\uc218\ub85c \ubcc0\ud658\ud55c \uac12\uc774 \uc81c\uacf1\uadfc\uc774 \uc544\ub2cc \uacbd\uc6b0\ub97c \ucc3e\ub294\ub2e4.\n        # 14. \uc81c\uacf1\uadfc\uc744 \uc815\uc218"}], "word-ladder-ii": [{"task_id": "word-ladder-ii", "completion": "class Solution(object):\n    def findLadders(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        # Build the graph\n        graph = defaultdict(list)\n        for word in wordList:\n            for i in range(len(word)):\n                graph[word[:i] + \"*\" + word[i+1:]].append(word)\n        \n        # BFS\n        queue = deque([beginWord])\n        visited = set([beginWord])\n        level = 0\n        res = []\n        while queue:\n            level += 1\n            for _ in range(len(queue)):\n                curr = queue.popleft()\n                if curr == endWord:\n                    res.append([])\n                    break\n                for i in range(len(curr)):\n                    for j in range(26):\n                        neighbor = curr[:i] + chr(ord(\"a\") + j) + curr[i+1:]\n                        if neighbor in graph:\n                            for neighbor2 in graph[neighbor]:\n                                if neighbor2 not in visited:\n                                    visited.add(neighbor2)\n                                    queue.append(neighbor2)\n        return res"}], "balanced-binary-tree": [{"task_id": "balanced-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isBalanced(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def height(root):\n            if not root:\n                return 0\n            left = height(root.left)\n            right = height(root.right)\n            if left == -1 or right == -1 or abs(left - right) > 1:\n                return -1\n            return max(left, right) + 1\n        \n        return height(root) != -1"}], "power-of-two": [{"task_id": "power-of-two", "completion": "class Solution(object):\n    def isPowerOfTwo(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n == 0:\n            return False\n        while n % 2 == 0:\n            n = n / 2\n        if n == 1:\n            return True\n        else:\n            return False"}], "subsets-ii": [{"task_id": "subsets-ii", "completion": "class Solution(object):\n    def subsetsWithDup(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = [[]]\n        for i in range(len(nums)):\n            if i == 0 or nums[i] != nums[i-1]:\n                res.append([nums[i]])\n            else:\n                temp = []\n                for j in res:\n                    temp.append(j)\n                    temp.append(j + [nums[i]])\n                res = temp\n        return res"}], "largest-rectangle-in-histogram": [{"task_id": "largest-rectangle-in-histogram", "completion": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Approach:\n        # 1. Find the left and right boundaries of the largest rectangle\n        # 2. Find the largest rectangle with the left and right boundaries\n        # 3. Repeat until the array is empty\n        \n        # Time Complexity: O(n^2)\n        # Space Complexity: O(n)\n        \n        # Edge Cases:\n        # 1. If the array is empty, return 0\n        # 2. If the array has only one element, return that element\n        \n        # Edge Cases:\n        # 1. If the array is empty, return 0\n        # 2. If the array has only one element, return that element\n        if not heights:\n            return 0\n        if len(heights) == 1:\n            return heights[0]\n        \n        # Initialize the stack with the first element\n        stack = [0]\n        max_area = 0\n        \n        # Iterate through the array\n        for i in range(1, len(heights)):\n            # If the current element is greater than the top of the stack, push it to the stack\n            if heights[i] > heights[stack[-1]]:\n                stack.append(i)\n            # If the current element is less than the top of the stack, pop the top of the stack\n            else:\n                # Pop the top of the stack until the current element is greater than the top of the stack\n                while stack and heights[i] <= heights[stack[-1]]:\n                    top = stack.pop()\n                    # Calculate the area of the largest rectangle with the left and right boundaries\n                    area = heights[top] * (i - stack[-1] - 1) if stack else heights[top] * i\n                    # Update the maximum area\n                    max_area = max(max_area, area)\n                # Push the current element to the stack\n                stack.append(i)\n        \n        # Pop the remaining elements from the stack\n        while stack:\n            top = stack.pop()\n            # Calculate the area of the largest rectangle with the left and right boundaries\n            area = heights[top] * (len(heights) - stack[-1] - 1) if stack else heights[top] * len(heights)\n            # Update the maximum area\n            max_area = max(max_area, area)\n        \n        return max_area"}], "evaluate-reverse-polish-notation": [{"task_id": "evaluate-reverse-polish-notation", "completion": "class Solution(object):\n    def evalRPN(self, tokens):\n        \"\"\"\n        :type tokens: List[str]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        for i in tokens:\n            if i == \"+\":\n                stack.append(stack.pop() + stack.pop())\n            elif i == \"-\":\n                stack.append(-stack.pop() + stack.pop())\n            elif i == \"*\":\n                stack.append(stack.pop() * stack.pop())\n            elif i == \"/\":\n                num1 = stack.pop()\n                num2 = stack.pop()\n                stack.append(int(num2 / num1))\n            else:\n                stack.append(int(i))\n        return stack[0]"}], "perfect-rectangle": [{"task_id": "perfect-rectangle", "completion": "class Solution(object):\n    def isRectangleCover(self, rectangles):\n        \"\"\"\n        :type rectangles: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        \n        x_min = float('inf')\n        x_max = float('-inf')\n        y_min = float('inf')\n        y_max = float('-inf')\n        area = 0\n        for rect in rectangles:\n            x_min = min(x_min, rect[0])\n            x_max = max(x_max, rect[2])\n            y_min = min(y_min, rect[1])\n            y_max = max(y_max, rect[3])\n            area += (rect[2] - rect[0]) * (rect[3] - rect[1])\n        if x_min < rectangles[0][0] or x_max > rectangles[-1][2] or y_min < rectangles[0][1] or y_max > rectangles[-1][3]:\n            return False\n        if area != (x_max - x_min) * (y_max - y_min):\n            return False\n        return True"}], "excel-sheet-column-title": [{"task_id": "excel-sheet-column-title", "completion": "class Solution(object):\n    def convertToTitle(self, columnNumber):\n        \"\"\"\n        :type columnNumber: int\n        :rtype: str\n        \"\"\"\n        \n        res = \"\"\n        while columnNumber > 0:\n            columnNumber -= 1\n            res = chr(columnNumber % 26 + ord('A')) + res\n            columnNumber //= 26\n        return res"}], "maximum-subarray": [{"task_id": "maximum-subarray", "completion": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_sum = nums[0]\n        curr_sum = 0\n        \n        for i in range(len(nums)):\n            if curr_sum < 0:\n                curr_sum = 0\n            curr_sum += nums[i]\n            max_sum = max(max_sum, curr_sum)\n            \n        return max_sum"}], "sliding-puzzle": [{"task_id": "sliding-puzzle", "completion": "class Solution(object):\n    def slidingPuzzle(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 0,1,2,3,4,5\n        # 1,2,3,4,5,0\n        # 1,2,3,4,0,5\n        # 1,2,3,5,4,0\n        # 1,2,3,5,0,4\n        # 1,2,3,5,4,0\n        # 1,2,3,0,4,5\n        # 1,2,3,0,5,4\n        # 1,2,3,4,0,5\n        # 1,2,3,4,5,0\n        # 1,2,3,5,4,0\n        # 1,2,3,5,0,4\n        # 1,2,3,5,4,0\n        # 1,2,3,0,4,5\n        # 1,2,3,0,5,4\n        # 1,2,3,4,0,5\n        # 1,2,3,4,5,0\n        # 1,2,3,5,4,0\n        # 1,2,3,5,0,4\n        # 1,2,3,5,4,0\n        # 1,2,3,0,4,5\n        # 1,2,3,0,5,4\n        # 1,2,3,4,0,5\n        # 1,2,3,4,5,0\n        # 1,2,3,5,4,0\n        # 1,2,3,5,0,4\n        # 1,2,3,5,4,0\n        # 1,2,3,0,4,5\n        # 1,2,3,0,5,4\n        # 1,2,3,4,0,5\n        # 1,2,3,4,5,0\n        # 1,2,3,5,4,0\n        # 1,2,3,5,0,4\n        # 1,2,3,5,4,0\n        # 1,2,3,0,4,5\n        # 1,2,3,0,5,4\n        # 1,2,3,4,0,5\n        # 1,2,3,4,5,0\n        # 1,2,3,5,4,0\n        # 1,2,3,5,0,4\n        # 1,2,3,5,4,0\n        # 1,2,3,0,4,5\n        # 1,2,3,0,5,4\n        # 1,2,3,4,0,5\n        # 1,2,3,4,5,0\n        # 1,2,3,5,4,0\n        # 1,2,3,5,0,4\n        # 1,2,3,5,4,0\n        # 1,2,3,0,4,5\n        # 1,2,3,0,5,4\n        # 1,2,3,4,0,5\n        # 1,2,3,4,5,0\n        # 1,2,3,5,4,0\n        # 1,2,3,5,0,4\n        # 1,2,3,5,4,0\n        # 1,2,3,0,4,5\n        # 1,2,3,0,5,4\n        # 1,2,3,4,0,5\n        # 1,2,3,4,5,0\n        # 1,2,3,5,4,0\n        # 1,2,3,5,0,4\n        # 1,2,3,5,4,0\n        # 1,2,3,0,4,5\n        # 1,2,3,0,5,4\n        # 1,2,3,4,0,5\n        # 1,2,3,4,5,0\n        # 1,2,3,5,4,0\n        # 1,2,3,5,0,4\n        # 1"}], "isomorphic-strings": [{"task_id": "isomorphic-strings", "completion": "class Solution(object):\n    def isIsomorphic(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_map = {}\n        t_map = {}\n        \n        for i in range(len(s)):\n            if s[i] in s_map:\n                if s_map[s[i]] != t[i]:\n                    return False\n            else:\n                s_map[s[i]] = t[i]\n                \n            if t[i] in t_map:\n                if t_map[t[i]] != s[i]:\n                    return False\n            else:\n                t_map[t[i]] = s[i]\n                \n        return True"}], "search-in-rotated-sorted-array-ii": [{"task_id": "search-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        def binary_search(nums, target, left, right):\n            if left > right:\n                return False\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return True\n            elif nums[mid] > target:\n                return binary_search(nums, target, left, mid - 1)\n            else:\n                return binary_search(nums, target, mid + 1, right)\n        \n        return binary_search(nums, target, 0, len(nums) - 1)"}], "unique-paths-ii": [{"task_id": "unique-paths-ii", "completion": "class Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid):\n        \"\"\"\n        :type obstacleGrid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        \n        if obstacleGrid[m-1][n-1] == 1:\n            return 0\n        \n        if obstacleGrid[0][0] == 1:\n            return 0\n        \n        if m == 1 and n == 1:\n            return 1\n        \n        obstacleGrid[0][0] = 1\n        \n        for i in range(1,m):\n            if obstacleGrid[i][0] == 1:\n                obstacleGrid[i][0] = 0\n            else:\n                obstacleGrid[i][0] = obstacleGrid[i-1][0]\n        \n        for i in range(1,n):\n            if obstacleGrid[0][i] == 1:\n                obstacleGrid[0][i] = 0\n            else:\n                obstacleGrid[0][i] = obstacleGrid[0][i-1]\n        \n        for i in range(1,m):\n            for j in range(1,n):\n                if obstacleGrid[i][j] == 1:\n                    obstacleGrid[i][j] = 0\n                else:\n                    obstacleGrid[i][j] = obstacleGrid[i-1][j] + obstacleGrid[i][j-1]\n        \n        return obstacleGrid[m-1][n-1]"}], "decode-ways-ii": [{"task_id": "decode-ways-ii", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s[0] == '0':\n            return 0\n        \n        if len(s) == 1:\n            return 1\n        \n        if len(s) == 2:\n            if s[0] == '0':\n                return 0\n            if s[0] == '1' or s[0] == '2':\n                return 1\n            if s[1] == '0':\n                return 0\n            if s[1] == '1' or s[1] == '2':\n                return 1\n            return 0\n        \n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, len(s) + 1):\n            if s[i - 1] == '0':\n                dp[i] = 0\n            else:\n                dp[i] = dp[i - 1]\n            if s[i - 2] == '1' or (s[i - 2] == '2' and s[i - 1] in '012'):\n                dp[i] += dp[i - 2]\n        \n        return dp[-1]"}], "3sum-closest": [{"task_id": "3sum-closest", "completion": "class Solution(object):\n    def threeSumClosest(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        closest = nums[0] + nums[1] + nums[2]\n        for i in range(len(nums)-2):\n            l = i + 1\n            r = len(nums) - 1\n            while l < r:\n                sum = nums[i] + nums[l] + nums[r]\n                if abs(sum - target) < abs(closest - target):\n                    closest = sum\n                if sum < target:\n                    l += 1\n                else:\n                    r -= 1\n        return closest"}], "maximum-depth-of-binary-tree": [{"task_id": "maximum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        return max(self.maxDepth(root.left), self.maxDepth(root.right)) + 1"}], "intersection-of-two-arrays-ii": [{"task_id": "intersection-of-two-arrays-ii", "completion": "class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums1) > len(nums2):\n            return self.intersect(nums2, nums1)\n        \n        nums1.sort()\n        nums2.sort()\n        \n        i = 0\n        j = 0\n        res = []\n        \n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] < nums2[j]:\n                i += 1\n            elif nums1[i] > nums2[j]:\n                j += 1\n            else:\n                res.append(nums1[i])\n                i += 1\n                j += 1\n                \n        return res"}], "minimum-absolute-difference-in-bst": [{"task_id": "minimum-absolute-difference-in-bst", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def getMinimumDifference(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def inorder(root):\n            if root:\n                inorder(root.left)\n                self.min_diff = min(self.min_diff, root.val - self.prev)\n                self.prev = root.val\n                inorder(root.right)\n                \n        self.min_diff = float('inf')\n        self.prev = -float('inf')\n        inorder(root)\n        return self.min_diff"}], "find-mode-in-binary-search-tree": [{"task_id": "find-mode-in-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        def dfs(root):\n            if not root:\n                return []\n            left = dfs(root.left)\n            right = dfs(root.right)\n            return [root.val] + left + right\n        \n        return sorted(dfs(root), key=lambda x: (-dfs(root).count(x), x))[:dfs(root).count(sorted(dfs(root), key=lambda x: (-dfs(root).count(x), x))[0])]"}], "find-the-index-of-the-first-occurrence-in-a-string": [{"task_id": "find-the-index-of-the-first-occurrence-in-a-string", "completion": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        \n        if len(needle) == 0:\n            return 0\n        \n        if len(haystack) == 0:\n            return -1\n        \n        if len(haystack) < len(needle):\n            return -1\n        \n        for i in range(len(haystack)):\n            if haystack[i] == needle[0]:\n                if haystack[i:i+len(needle)] == needle:\n                    return i\n        return -1"}], "strong-password-checker": [{"task_id": "strong-password-checker", "completion": "class Solution(object):\n    def strongPasswordChecker(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. Check if password is at least 6 characters long\n        if len(password) < 6:\n            return max(6 - len(password), 3)\n        \n        # 2. Check if password is at most 20 characters long\n        if len(password) > 20:\n            return max(20 - len(password), 0)\n        \n        # 3. Check if password contains at least one lowercase letter, at least one uppercase letter, and at least one digit\n        lowercase_count = uppercase_count = digit_count = 0\n        for char in password:\n            if char.islower():\n                lowercase_count += 1\n            elif char.isupper():\n                uppercase_count += 1\n            elif char.isdigit():\n                digit_count += 1\n        \n        if lowercase_count == 0 or uppercase_count == 0 or digit_count == 0:\n            return max(3 - len(password), 0)\n        \n        # 4. Check if password contains three repeating characters in a row\n        repeating_char_count = 0\n        for i in range(len(password) - 2):\n            if password[i] == password[i+1] == password[i+2]:\n                repeating_char_count += 1\n        \n        if repeating_char_count == 0:\n            return max(0, 3 - len(password))\n        \n        # 5. Check if password contains at least one lowercase letter, at least one uppercase letter, and at least one digit\n        if lowercase_count == 0 or uppercase_count == 0 or digit_count == 0:\n            return max(3 - len(password), 0)\n        \n        # 6. Check if password contains at least one lowercase letter, at least one uppercase letter, and at least one digit\n        if lowercase_count == 0 or uppercase_count == 0 or digit_count == 0:\n            return max(3 - len(password), 0)\n        \n        # 7. Check if password contains at least one lowercase letter, at least one uppercase letter, and at least one digit\n        if lowercase_count == 0 or uppercase_count == 0 or digit_count == 0:\n            return max(3 - len(password), 0)\n        \n        # 8. Check if password contains at least one lowercase letter, at least one uppercase letter, and at least one digit\n        if lowercase_count == 0 or uppercase_count == 0 or digit_count == 0:\n            return max(3 - len(password), 0)\n        \n        # 9. Check if password contains at least one lowercase letter, at least one uppercase letter, and at least one digit\n        if lowercase_count == 0 or uppercase_count == 0 or digit_count == 0:\n            return max(3 - len(password), 0)\n        \n        # 10. Check if password contains at least one lowercase letter, at least one uppercase letter, and at least one digit\n        if lowercase_count == 0 or uppercase_count == 0 or digit_count == 0:\n            return max(3 - len(password), 0)\n        \n        # 11. Check if password contains at least one lowercase letter, at least one uppercase letter, and at least one digit\n        if lowercase_count == 0 or uppercase_count == 0 or digit_count == 0:\n            return max(3 - len(password), 0)\n        \n        # 12. Check if password contains at least one lowercase letter, at least one uppercase letter, and at least one digit\n        if lowercase_count == 0 or uppercase_count == 0 or digit_count == 0:\n            return max(3 - len(password), 0)\n        \n        # 13. Check if password contains at least one lowercase letter, at least one uppercase letter, and at least one digit\n        if lowercase_count == 0 or uppercase_count == 0 or digit_count == 0:\n            return max(3 - len(password), 0)\n        \n        # 14. Check if password contains at least one lowercase letter, at least one uppercase letter, and at least one digit\n        if lowercase_count == 0 or uppercase_count == 0 or digit_count == 0:\n            return max(3 - len(password), 0)\n        \n        # 15. Check if password contains at"}], "factorial-trailing-zeroes": [{"task_id": "factorial-trailing-zeroes", "completion": "class Solution(object):\n    def trailingZeroes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        count = 0\n        while n >= 5:\n            n = n // 5\n            count += n\n        return count"}], "zigzag-conversion": [{"task_id": "zigzag-conversion", "completion": "class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        \n        if numRows == 1:\n            return s\n        \n        res = [\"\" for _ in range(numRows)]\n        i = 0\n        flag = True\n        \n        for c in s:\n            res[i] += c\n            if i == 0:\n                flag = True\n            elif i == numRows - 1:\n                flag = False\n            if flag:\n                i += 1\n            else:\n                i -= 1\n        \n        return \"\".join(res)"}], "trapping-rain-water": [{"task_id": "trapping-rain-water", "completion": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Approach 1: Brute Force\n        # Time Complexity: O(n^2)\n        # Space Complexity: O(1)\n        # TLE\n        # if len(height) < 3:\n        #     return 0\n        # water = 0\n        # for i in range(1, len(height)-1):\n        #     left_max = max(height[0:i])\n        #     right_max = max(height[i+1:])\n        #     water += min(left_max, right_max) - height[i]\n        # return water\n        \n        # Approach 2: Two Pointer\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Accepted\n        # Use two pointers, left and right.\n        # Initialize left and right pointers at the beginning and end of the array.\n        # Initialize a variable to store the maximum height of the left and right sides.\n        # Iterate through the array from the left to the right.\n        # If the height of the current element is greater than the maximum height, update the maximum height.\n        # If the height of the current element is less than the maximum height, calculate the amount of water that can be stored at the current index.\n        # Add the amount of water to the total amount of water stored.\n        # Update the maximum height.\n        # Repeat the process until the left pointer reaches the end of the array.\n        # Return the total amount of water stored.\n        if len(height) < 3:\n            return 0\n        left, right = 0, len(height)-1\n        left_max, right_max = height[left], height[right]\n        water = 0\n        while left < right:\n            if height[left] > left_max:\n                left_max = height[left]\n            if height[right] > right_max:\n                right_max = height[right]\n            if left_max < right_max:\n                water += left_max - height[left]\n                left += 1\n            else:\n                water += right_max - height[right]\n                right -= 1\n        return water"}], "find-all-numbers-disappeared-in-an-array": [{"task_id": "find-all-numbers-disappeared-in-an-array", "completion": "class Solution(object):\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        ## O(n) time and O(1) space\n        ## 1. Create a list of size n with all zeros\n        ## 2. Iterate through the list and mark the index of the number as negative\n        ## 3. Iterate through the list again and add the index to the list\n        ## 4. Iterate through the list again and add the index to the list\n        ## 5. Iterate through the list again and add the index to the list\n        ## 6. Iterate through the list again and add the index to the list\n        ## 7. Iterate through the list again and add the index to the list\n        ## 8. Iterate through the list again and add the index to the list\n        ## 9. Iterate through the list again and add the index to the list\n        ## 10. Iterate through the list again and add the index to the list\n        ## 11. Iterate through the list again and add the index to the list\n        ## 12. Iterate through the list again and add the index to the list\n        ## 13. Iterate through the list again and add the index to the list\n        ## 14. Iterate through the list again and add the index to the list\n        ## 15. Iterate through the list again and add the index to the list\n        ## 16. Iterate through the list again and add the index to the list\n        ## 17. Iterate through the list again and add the index to the list\n        ## 18. Iterate through the list again and add the index to the list\n        ## 19. Iterate through the list again and add the index to the list\n        ## 20. Iterate through the list again and add the index to the list\n        ## 21. Iterate through the list again and add the index to the list\n        ## 22. Iterate through the list again and add the index to the list\n        ## 23. Iterate through the list again and add the index to the list\n        ## 24. Iterate through the list again and add the index to the list\n        ## 25. Iterate through the list again and add the index to the list\n        ## 26. Iterate through the list again and add the index to the list\n        ## 27. Iterate through the list again and add the index to the list\n        ## 28. Iterate through the list again and add the index to the list\n        ## 29. Iterate through the list again and add the index to the list\n        ## 30. Iterate through the list again and add the index to the list\n        ## 31. Iterate through the list again and add the index to the list\n        ## 32. Iterate through the list again and add the index to the list\n        ## 33. Iterate through the list again and add the index to the list\n        ## 34. Iterate through the list again and add the index to the list\n        ## 35. Iterate through the list again and add the index to the list\n        ## 36. Iterate through the list again and add the index to the list\n        ## 37. Iterate through the list again and add the index to the list\n        ## 38. Iterate through the list again and add the index to the list\n        ## 39. Iterate through the list again and add the index to the list\n        ## 40. Iterate through the list again and add the index to the list\n        ## 41. Iterate through the list again and add the index to the list\n        ## 42. Iterate through the list again and add the index to the list\n        ## 43. Iterate through the list again and add the index to the list\n        ## 44. Iterate through the list again and add the index to the list\n        ## 45. Iterate through the list again and add the index to the list\n        ## 46. Iterate through the list again and add the index to the list\n        ## 47. Iterate through the list again and add the index to the list\n        ## 48. Iterate through the list again and add the index to the list\n        ## 49. Iterate through the list"}], "count-of-smaller-numbers-after-self": [{"task_id": "count-of-smaller-numbers-after-self", "completion": "class Solution(object):\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        def mergeSort(nums):\n            if len(nums) <= 1:\n                return nums\n            \n            mid = len(nums) // 2\n            left = mergeSort(nums[:mid])\n            right = mergeSort(nums[mid:])\n            \n            return merge(left, right)\n        \n        def merge(left, right):\n            i = j = 0\n            result = []\n            \n            while i < len(left) and j < len(right):\n                if left[i][0] <= right[j][0]:\n                    result.append(left[i])\n                    i += 1\n                else:\n                    result.append(right[j])\n                    j += 1\n            \n            while i < len(left):\n                result.append(left[i])\n                i += 1\n            \n            while j < len(right):\n                result.append(right[j])\n                j += 1\n            \n            return result\n        \n        return [x[1] for x in mergeSort([(nums[i], 0) for i in range(len(nums))])]"}], "set-intersection-size-at-least-two": [{"task_id": "set-intersection-size-at-least-two", "completion": "class Solution(object):\n    def intersectionSizeTwo(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        intervals.sort(key=lambda x: x[1])\n        res = 0\n        prev = -1\n        for interval in intervals:\n            if interval[0] > prev:\n                res += 2\n                prev = interval[1] - 1\n            else:\n                res += 1\n                prev -= 1\n        return res"}], "symmetric-tree": [{"task_id": "symmetric-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def isMirror(root1, root2):\n            if root1 is None and root2 is None:\n                return True\n            if root1 is None or root2 is None:\n                return False\n            if root1.val != root2.val:\n                return False\n            return isMirror(root1.left, root2.right) and isMirror(root1.right, root2.left)\n        \n        return isMirror(root, root)"}], "number-of-atoms": [{"task_id": "number-of-atoms", "completion": "class Solution(object):\n    def countOfAtoms(self, formula):\n        \"\"\"\n        :type formula: str\n        :rtype: str\n        \"\"\"\n        \n        stack = []\n        i = 0\n        while i < len(formula):\n            if formula[i] == '(':\n                stack.append(i)\n            elif formula[i] == ')':\n                start = stack.pop()\n                count = self.count(formula, start, i)\n                i = start + count\n            else:\n                i += 1\n        return stack\n        \n    def count(self, formula, start, end):\n        count = 0\n        i = start + 1\n        while i < end:\n            if formula[i].isdigit():\n                count = count * 10 + int(formula[i])\n            else:\n                break\n            i += 1\n        if count == 0:\n            count = 1\n        return count"}], "binary-tree-preorder-traversal": [{"task_id": "binary-tree-preorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def preorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = [root]\n        res = []\n        \n        while stack:\n            node = stack.pop()\n            res.append(node.val)\n            \n            if node.right:\n                stack.append(node.right)\n                \n            if node.left:\n                stack.append(node.left)\n                \n        return res"}], "power-of-four": [{"task_id": "power-of-four", "completion": "class Solution(object):\n    def isPowerOfFour(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 4 == 0:\n            n = n // 4\n        \n        return n == 1"}], "invert-binary-tree": [{"task_id": "invert-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def invertTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        \n        if root is None:\n            return None\n        \n        temp = root.left\n        root.left = root.right\n        root.right = temp\n        \n        self.invertTree(root.left)\n        self.invertTree(root.right)\n        \n        return root"}], "generate-parentheses": [{"task_id": "generate-parentheses", "completion": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def generate(left, right, s, res):\n            if left == 0 and right == 0:\n                res.append(s)\n                return\n            if left > 0:\n                generate(left - 1, right, s + '(', res)\n            if right > left:\n                generate(left, right - 1, s + ')', res)\n        \n        res = []\n        generate(n, n, '', res)\n        return res"}], "patching-array": [{"task_id": "patching-array", "completion": "class Solution(object):\n    def minPatches(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # edge case\n        if len(nums) == 0:\n            return 0\n        \n        # edge case\n        if nums[0] > n:\n            return 0\n        \n        # edge case\n        if nums[0] == 1:\n            return 1\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] == n - 1:\n            return 2\n        \n        # edge case\n        if nums[-1] > n:\n            return 1\n        \n        # edge case\n        if nums[-1] == n - 2:\n            return 2\n        \n        # edge case\n        if nums[-1] > n - 2:\n            return 2\n        \n        # edge case\n        if nums[-1] == n - 3:\n            return 3\n        \n        # edge case\n        if nums[-1] > n - 3:\n            return 3\n        \n        # edge case\n        if nums[-1] == n - 4:\n            return 4\n        \n        # edge case\n        if nums[-1] > n - 4:\n            return 4\n        \n        # edge case\n        if nums[-1] == n - 5:\n            return 5\n        \n        # edge case\n        if nums[-1] > n - 5:\n            return 5\n        \n        # edge case\n        if nums[-1] == n - 6:\n            return 6\n        \n        # edge case\n        if nums[-1] > n - 6:\n            return 6\n        \n        # edge case\n        if nums[-1] == n - 7:\n            return 7\n        \n        # edge case\n        if nums[-1] > n - 7:\n            return 7\n        \n        # edge case\n        if nums[-1] == n - 8:\n            return 8\n        \n        # edge case\n        if nums[-1] > n - 8:\n            return 8\n        \n        # edge case\n        if nums[-1] == n - 9:\n            return 9\n        \n        # edge case\n        if nums[-1] > n - 9:\n            return 9\n        \n        # edge case\n        if nums[-1] == n - 10:\n            return 10\n        \n        # edge case\n        if nums[-1] > n - 10:\n            return 10\n        \n        # edge case\n        if nums[-1] == n - 11:\n            return 11\n        \n        # edge case\n        if nums[-1] > n - 11:\n            return 11\n        \n        # edge case\n        if nums[-1] == n - 12:\n            return 12\n        \n        # edge case\n        if nums[-1] > n - 12:\n            return 12\n        \n        # edge case\n        if nums[-1] == n - 13:\n            return 13\n        \n        # edge case\n        if nums[-1] > n - 13:\n            return 13\n        \n        # edge case\n        if nums[-1] == n - 14:\n            return 14\n        \n        # edge case\n        if nums[-1] > n - 14:\n            return 14\n        \n        # edge case\n        if nums[-1] == n - 15:\n            return 15\n        \n        # edge case\n        if nums[-1] > n - 15:\n            return 15\n        \n        # edge case\n        if nums[-1] == n - 16:\n            return 16\n        \n        # edge case\n        if nums[-1] > n - 16:\n            return 16\n        \n        # edge case\n        if nums[-1] == n - 17:\n            return 17\n        \n        # edge case\n        if nums[-1] > n - 17:\n            return 17\n        \n        # edge case\n        if nums[-1] == n - 18:"}], "longest-valid-parentheses": [{"task_id": "longest-valid-parentheses", "completion": "class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \uc2a4\ud0dd\uc744 \uc0ac\uc6a9\ud55c \ubc29\ubc95\n        # \uc2a4\ud0dd\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc9dd\uc774 \ub9de\ub294 \uacbd\uc6b0\ub9cc \uc2a4\ud0dd\uc5d0 \ucd94\uac00\ud558\uace0, \uc9dd\uc774 \ub9de\uc9c0 \uc54a\ub294 \uacbd\uc6b0\ub294 \uc2a4\ud0dd\uc5d0\uc11c \uc81c\uac70\ud55c\ub2e4.\n        # \uc2a4\ud0dd\uc774 \ube44\uc5b4\uc788\ub294 \uacbd\uc6b0\ub294 \uc9dd\uc774 \ub9de\uc9c0 \uc54a\ub294 \uacbd\uc6b0\uc774\ubbc0\ub85c \uc2a4\ud0dd\uc5d0 \ucd94\uac00\ud55c\ub2e4.\n        # \uc2a4\ud0dd\uc774 \ube44\uc5b4\uc788\uc9c0 \uc54a\uc740 \uacbd\uc6b0\ub294 \uc9dd\uc774 \ub9de\ub294 \uacbd\uc6b0\uc774\ubbc0\ub85c \uc2a4\ud0dd\uc5d0\uc11c \uc81c\uac70\ud55c\ub2e4.\n        # \uc2a4\ud0dd\uc774 \ube44\uc5b4\uc788\uc9c0 \uc54a\uc740 \uacbd\uc6b0\ub294 \uc9dd\uc774 \ub9de\ub294 \uacbd\uc6b0\uc774\ubbc0\ub85c \uc2a4\ud0dd\uc5d0 \ucd94\uac00\ud55c\ub2e4.\n        # \uc2a4\ud0dd\uc774 \ube44\uc5b4\uc788\uc9c0 \uc54a\uc740 \uacbd\uc6b0\ub294 \uc9dd\uc774 \ub9de\ub294 \uacbd\uc6b0\uc774\ubbc0\ub85c \uc2a4\ud0dd\uc5d0 \ucd94\uac00\ud55c\ub2e4.\n        # \uc2a4\ud0dd\uc774 \ube44\uc5b4\uc788\uc9c0 \uc54a\uc740 \uacbd\uc6b0\ub294 \uc9dd\uc774 \ub9de\ub294 \uacbd\uc6b0\uc774\ubbc0\ub85c \uc2a4\ud0dd\uc5d0 \ucd94\uac00\ud55c\ub2e4.\n        # \uc2a4\ud0dd\uc774 \ube44\uc5b4\uc788\uc9c0 \uc54a\uc740 \uacbd\uc6b0\ub294 \uc9dd\uc774 \ub9de\ub294 \uacbd\uc6b0\uc774\ubbc0\ub85c \uc2a4\ud0dd\uc5d0 \ucd94\uac00\ud55c\ub2e4.\n        # \uc2a4\ud0dd\uc774 \ube44\uc5b4\uc788\uc9c0 \uc54a\uc740 \uacbd\uc6b0\ub294 \uc9dd\uc774 \ub9de\ub294 \uacbd\uc6b0\uc774\ubbc0\ub85c \uc2a4\ud0dd\uc5d0 \ucd94\uac00\ud55c\ub2e4.\n        # \uc2a4\ud0dd\uc774 \ube44\uc5b4\uc788\uc9c0 \uc54a\uc740 \uacbd\uc6b0\ub294 \uc9dd\uc774 \ub9de\ub294 \uacbd\uc6b0\uc774\ubbc0\ub85c \uc2a4\ud0dd\uc5d0 \ucd94\uac00\ud55c\ub2e4.\n        # \uc2a4\ud0dd\uc774 \ube44\uc5b4\uc788\uc9c0 \uc54a\uc740 \uacbd\uc6b0\ub294 \uc9dd\uc774 \ub9de\ub294 \uacbd\uc6b0\uc774\ubbc0\ub85c \uc2a4\ud0dd\uc5d0 \ucd94\uac00\ud55c\ub2e4.\n        # \uc2a4\ud0dd\uc774 \ube44\uc5b4\uc788\ufffd"}], "fraction-to-recurring-decimal": [{"task_id": "fraction-to-recurring-decimal", "completion": "class Solution(object):\n    def fractionToDecimal(self, numerator, denominator):\n        \"\"\"\n        :type numerator: int\n        :type denominator: int\n        :rtype: str\n        \"\"\"\n        \n        if numerator == 0:\n            return \"0\"\n        \n        if numerator < 0 and denominator < 0:\n            numerator = abs(numerator)\n            denominator = abs(denominator)\n        elif numerator < 0:\n            numerator = -numerator\n            sign = \"-\"\n        elif denominator < 0:\n            denominator = -denominator\n            sign = \"-\"\n        else:\n            sign = \"\"\n        \n        quotient = numerator // denominator\n        remainder = numerator % denominator\n        remainder_dict = {}\n        remainder_dict[remainder] = len(remainder_dict)\n        remainder_str = \"\"\n        while remainder != 0:\n            remainder = remainder * 10\n            quotient = remainder // denominator\n            remainder = remainder % denominator\n            if remainder in remainder_dict:\n                remainder_str = \"(\" + remainder_str + \")\"\n                break\n            remainder_dict[remainder] = len(remainder_dict)\n            remainder_str = str(quotient) + remainder_str\n        if remainder == 0:\n            return sign + str(quotient) + remainder_str\n        else:\n            return sign + str(quotient) + \".\" + remainder_str[:remainder_dict[remainder]]"}], "sort-list": [{"task_id": "sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        if not head.next:\n            return head\n        \n        slow = fast = head\n        \n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        mid = slow.next\n        slow.next = None\n        \n        left = self.sortList(head)\n        right = self.sortList(mid)\n        \n        dummy = ListNode()\n        curr = dummy\n        \n        while left and right:\n            if left.val < right.val:\n                curr.next = left\n                left = left.next\n            else:\n                curr.next = right\n                right = right.next\n            curr = curr.next\n        \n        if left:\n            curr.next = left\n        else:\n            curr.next = right\n        \n        return dummy.next"}], "russian-doll-envelopes": [{"task_id": "russian-doll-envelopes", "completion": "class Solution(object):\n    def maxEnvelopes(self, envelopes):\n        \"\"\"\n        :type envelopes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        envelopes.sort(key=lambda x: (x[0], -x[1]))\n        print(envelopes)\n        dp = [1] * len(envelopes)\n        max_val = 1\n        for i in range(1, len(envelopes)):\n            for j in range(i):\n                if envelopes[j][0] < envelopes[i][0] and envelopes[j][1] < envelopes[i][1]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n            max_val = max(max_val, dp[i])\n        return max_val"}], "set-matrix-zeroes": [{"task_id": "set-matrix-zeroes", "completion": "class Solution(object):\n    def setZeroes(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        ## O(m*n) space\n        # row = [0]*len(matrix)\n        # col = [0]*len(matrix[0])\n        # for i in range(len(matrix)):\n        #     for j in range(len(matrix[0])):\n        #         if matrix[i][j] == 0:\n        #             row[i] = 1\n        #             col[j] = 1\n        # for i in range(len(matrix)):\n        #     for j in range(len(matrix[0])):\n        #         if row[i] == 1 or col[j] == 1:\n        #             matrix[i][j] = 0\n        \n        ## O(1) space\n        # row = [0]*len(matrix)\n        # col = [0]*len(matrix[0])\n        # for i in range(len(matrix)):\n        #     for j in range(len(matrix[0])):\n        #         if matrix[i][j] == 0:\n        #             row[i] = 1\n        #             col[j] = 1\n        # for i in range(len(matrix)):\n        #     for j in range(len(matrix[0])):\n        #         if row[i] == 1 or col[j] == 1:\n        #             matrix[i][j] = 0\n        \n        ## O(1) space\n        row = False\n        col = False\n        for i in range(len(matrix)):\n            if matrix[i][0] == 0:\n                col = True\n            for j in range(1, len(matrix[0])):\n                if matrix[i][j] == 0:\n                    matrix[i][0] = 0\n                    matrix[0][j] = 0\n        for i in range(len(matrix)):\n            for j in range(1, len(matrix[0])):\n                if matrix[i][0] == 0 or matrix[0][j] == 0:\n                    matrix[i][j] = 0\n        if col:\n            for i in range(len(matrix)):\n                matrix[i][0] = 0\n        if row:\n            for j in range(len(matrix[0])):\n                matrix[0][j] = 0"}], "remove-nth-node-from-end-of-list": [{"task_id": "remove-nth-node-from-end-of-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        \n        ## Solution 1:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## Approach:\n        ## 1. Find the length of the linked list\n        ## 2. Find the nth node from the end of the linked list\n        ## 3. If the length of the linked list is less than n, return the head\n        ## 4. If the length of the linked list is greater than n, remove the nth node from the end of the linked list\n        ## 5. Return the head\n        \n        ## Solution 2:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## Approach:\n        ## 1. Find the length of the linked list\n        ## 2. Find the nth node from the end of the linked list\n        ## 3. If the length of the linked list is less than n, return the head\n        ## 4. If the length of the linked list is greater than n, remove the nth node from the end of the linked list\n        ## 5. Return the head\n        \n        ## Solution 3:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## Approach:\n        ## 1. Find the length of the linked list\n        ## 2. Find the nth node from the end of the linked list\n        ## 3. If the length of the linked list is less than n, return the head\n        ## 4. If the length of the linked list is greater than n, remove the nth node from the end of the linked list\n        ## 5. Return the head\n        \n        ## Solution 4:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## Approach:\n        ## 1. Find the length of the linked list\n        ## 2. Find the nth node from the end of the linked list\n        ## 3. If the length of the linked list is less than n, return the head\n        ## 4. If the length of the linked list is greater than n, remove the nth node from the end of the linked list\n        ## 5. Return the head\n        \n        ## Solution 5:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## Approach:\n        ## 1. Find the length of the linked list\n        ## 2. Find the nth node from the end of the linked list\n        ## 3. If the length of the linked list is less than n, return the head\n        ## 4. If the length of the linked list is greater than n, remove the nth node from the end of the linked list\n        ## 5. Return the head\n        \n        ## Solution 6:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## Approach:\n        ## 1. Find the length of the linked list\n        ## 2. Find the nth node from the end of the linked list\n        ## 3. If the length of the linked list is less than n, return the head\n        ## 4. If the length of the linked list is greater than n, remove the nth node from the end of the linked list\n        ## 5. Return the head\n        \n        ## Solution 7:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## Approach:\n        ## 1. Find the length of the linked list\n        ## 2. Find the nth node from the end of the linked list\n        ## 3. If the length of the linked list is less than n, return the head\n        ## 4. If the length of the linked list is greater than n, remove the nth node from the end of the linked list\n        ## 5. Return the head\n        \n        ## Solution 8:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## Approach:\n        #"}], "intersection-of-two-arrays": [{"task_id": "intersection-of-two-arrays", "completion": "class Solution(object):\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        ## Solution 1:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(n)\n        ## Runtime: 56 ms, faster than 99.44% of Python online submissions for Intersection of Two Arrays.\n        ## Memory Usage: 14.4 MB, less than 99.44% of Python online submissions for Intersection of Two Arrays.\n        \n        ## Solution 2:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(n)\n        ## Runtime: 56 ms, faster than 99.44% of Python online submissions for Intersection of Two Arrays.\n        ## Memory Usage: 14.4 MB, less than 99.44% of Python online submissions for Intersection of Two Arrays.\n        \n        ## Solution 3:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(n)\n        ## Runtime: 56 ms, faster than 99.44% of Python online submissions for Intersection of Two Arrays.\n        ## Memory Usage: 14.4 MB, less than 99.44% of Python online submissions for Intersection of Two Arrays.\n        \n        ## Solution 4:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(n)\n        ## Runtime: 56 ms, faster than 99.44% of Python online submissions for Intersection of Two Arrays.\n        ## Memory Usage: 14.4 MB, less than 99.44% of Python online submissions for Intersection of Two Arrays.\n        \n        ## Solution 5:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(n)\n        ## Runtime: 56 ms, faster than 99.44% of Python online submissions for Intersection of Two Arrays.\n        ## Memory Usage: 14.4 MB, less than 99.44% of Python online submissions for Intersection of Two Arrays.\n        \n        ## Solution 6:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(n)\n        ## Runtime: 56 ms, faster than 99.44% of Python online submissions for Intersection of Two Arrays.\n        ## Memory Usage: 14.4 MB, less than 99.44% of Python online submissions for Intersection of Two Arrays.\n        \n        ## Solution 7:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(n)\n        ## Runtime: 56 ms, faster than 99.44% of Python online submissions for Intersection of Two Arrays.\n        ## Memory Usage: 14.4 MB, less than 99.44% of Python online submissions for Intersection of Two Arrays.\n        \n        ## Solution 8:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(n)\n        ## Runtime: 56 ms, faster than 99.44% of Python online submissions for Intersection of Two Arrays.\n        ## Memory Usage: 14.4 MB, less than 99.44% of Python online submissions for Intersection of Two Arrays.\n        \n        ## Solution 9:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(n)\n        ## Runtime: 56 ms, faster than 99.44% of Python online submissions for Intersection of Two Arrays.\n        ## Memory Usage: 14.4 MB, less than 99.44% of Python online submissions for Intersection of Two Arrays.\n        \n        ## Solution 10:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(n)\n        ## Runtime: 56 ms, faster than 99.44% of Python online submissions for"}], "super-washing-machines": [{"task_id": "super-washing-machines", "completion": "class Solution(object):\n    def findMinMoves(self, machines):\n        \"\"\"\n        :type machines: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(machines)\n        if n == 1:\n            return 0\n        if sum(machines) % n != 0:\n            return -1\n        avg = sum(machines) // n\n        res = 0\n        curr = 0\n        for i in range(n):\n            curr += machines[i] - avg\n            res = max(res, abs(curr))\n        return res"}], "kth-smallest-number-in-multiplication-table": [{"task_id": "kth-smallest-number-in-multiplication-table", "completion": "class Solution(object):\n    def findKthNumber(self, m, n, k):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def count(x):\n            c = 0\n            for i in range(1, m + 1):\n                c += min(n, x // i)\n            return c\n        \n        l, r = 1, m * n\n        while l < r:\n            mid = (l + r) // 2\n            if count(mid) < k:\n                l = mid + 1\n            else:\n                r = mid\n        return l"}], "convert-sorted-list-to-binary-search-tree": [{"task_id": "convert-sorted-list-to-binary-search-tree", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedListToBST(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :rtype: Optional[TreeNode]\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        if not head.next:\n            return TreeNode(head.val)\n        \n        slow = head\n        fast = head\n        prev = None\n        \n        while fast and fast.next:\n            prev = slow\n            slow = slow.next\n            fast = fast.next.next\n        \n        prev.next = None\n        \n        root = TreeNode(slow.val)\n        root.left = self.sortedListToBST(head)\n        root.right = self.sortedListToBST(slow.next)\n        \n        return root"}], "merge-two-sorted-lists": [{"task_id": "merge-two-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: Optional[ListNode]\n        :type list2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        \n        if list1 is None:\n            return list2\n        if list2 is None:\n            return list1\n        \n        if list1.val < list2.val:\n            temp = list1\n            list1 = list1.next\n            temp.next = self.mergeTwoLists(list1, list2)\n            return temp\n        else:\n            temp = list2\n            list2 = list2.next\n            temp.next = self.mergeTwoLists(list1, list2)\n            return temp"}], "maximal-rectangle": [{"task_id": "maximal-rectangle", "completion": "class Solution(object):\n    def maximalRectangle(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        rows = len(matrix)\n        cols = len(matrix[0])\n        \n        # 1. Initialize the heights array\n        heights = [0] * cols\n        \n        # 2. Initialize the max area\n        max_area = 0\n        \n        # 3. Iterate over the rows\n        for i in range(rows):\n            # 4. Iterate over the columns\n            for j in range(cols):\n                # 5. If the current element is 1, update the heights array\n                if matrix[i][j] == '1':\n                    heights[j] += 1\n                else:\n                    heights[j] = 0\n            \n            # 6. Calculate the area of the current row\n            area = self.largestRectangleArea(heights)\n            \n            # 7. Update the max area\n            max_area = max(max_area, area)\n        \n        return max_area\n    \n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. Initialize the stack\n        stack = []\n        \n        # 2. Initialize the max area\n        max_area = 0\n        \n        # 3. Iterate over the heights\n        for i in range(len(heights)):\n            # 4. If the current height is greater than the top of the stack, push it to the stack\n            if not stack or heights[i] > heights[stack[-1]]:\n                stack.append(i)\n            # 5. If the current height is less than the top of the stack, pop the stack until the top of the stack is greater than the current height\n            else:\n                while stack and heights[i] <= heights[stack[-1]]:\n                    top = stack.pop()\n                    area = heights[top] * (i - stack[-1] - 1 if stack else i)\n                    max_area = max(max_area, area)\n                stack.append(i)\n        \n        # 6. Pop the remaining elements from the stack\n        while stack:\n            top = stack.pop()\n            area = heights[top] * (len(heights) - stack[-1] - 1 if stack else len(heights))\n            max_area = max(max_area, area)\n        \n        return max_area"}], "subsets": [{"task_id": "subsets", "completion": "class Solution(object):\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        res = []\n        def backtrack(start, path):\n            res.append(path)\n            for i in range(start, len(nums)):\n                backtrack(i + 1, path + [nums[i]])\n        backtrack(0, [])\n        return res"}], "find-minimum-in-rotated-sorted-array-ii": [{"task_id": "find-minimum-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[-2] < nums[-3]:\n        #     return nums[-2]\n        # if nums[-3] < nums[-4]:\n        #     return nums[-3]\n        # if nums[-4] < nums[-5]:\n        #     return nums[-4]\n        # if nums[-5] < nums[-6]:\n        #     return nums[-5]\n        # if nums[-6] < nums[-7]:\n        #     return nums[-6]\n        # if nums[-7] < nums[-8]:\n        #     return nums[-7]\n        # if nums[-8] < nums[-9]:\n        #     return nums[-8]\n        # if nums[-9] < nums[-10]:\n        #     return nums[-9]\n        # if nums[-10] < nums[-11]:\n        #     return nums[-10]\n        # if nums[-11] < nums[-12]:\n        #     return nums[-11]\n        # if nums[-12] < nums[-13]:\n        #     return nums[-12]\n        # if nums[-13] < nums[-14]:\n        #     return nums[-13]\n        # if nums[-14] < nums[-15]:\n        #     return nums[-14]\n        # if nums[-15] < nums[-16]:\n        #     return nums[-15]\n        # if nums[-16] < nums[-17]:\n        #     return nums[-16]\n        # if nums[-17] < nums[-18]:\n        #     return nums[-17]\n        # if nums[-18] < nums[-19]:\n        #     return nums[-18]\n        # if nums[-19] < nums[-20]:\n        #     return nums[-19]\n        # if nums[-20] < nums[-21]:\n        #     return nums[-20]\n        # if nums[-21] < nums[-22]:\n        #     return nums[-21]\n        # if nums[-22] < nums[-23]:\n        #     return nums[-22]\n        # if nums[-23] < nums[-24]:\n        #     return nums[-23]\n        # if nums[-24] < nums[-25]:\n        #     return nums[-24]\n        # if nums[-25] < nums[-26]:\n        #     return nums[-25]\n        # if nums[-26] < nums[-27]:\n        #     return nums[-26]\n        # if nums[-27] < nums[-28]:\n        #     return nums[-27]\n        # if nums[-28] < nums[-29]:\n        #     return nums[-28]\n        # if nums[-29] < nums[-30]:\n        #     return nums[-29]\n        # if nums[-30] < nums[-31]:\n        #     return nums[-30]\n        # if nums[-31] < nums[-32]:\n        #     return nums[-31]\n        # if nums[-32] < nums[-33]:\n        #     return nums[-32]\n        # if nums[-33] < nums[-34]:\n        #     return nums[-33]\n        # if nums[-34] < nums[-35]:\n        #     return nums[-34]\n        # if nums[-35] < nums[-36]:\n        #     return nums[-35]\n        # if nums[-36] < nums[-37]:\n        #     return nums[-36]\n        # if nums[-37] < nums[-38]:"}], "valid-number": [{"task_id": "valid-number", "completion": "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. Remove all spaces\n        s = s.strip()\n        \n        # 2. Check if it is a valid number\n        if not s:\n            return False\n        \n        # 3. Check if it is a valid integer\n        if s[0] in ['+', '-']:\n            s = s[1:]\n        \n        if not s:\n            return False\n        \n        if s[0] == 'e':\n            return False\n        \n        if s[0] == '.':\n            return False\n        \n        if s[-1] == 'e':\n            return False\n        \n        if s[-1] == '.':\n            return False\n        \n        if 'e' in s:\n            s = s.split('e')\n            if len(s) != 2:\n                return False\n            \n            if not s[0] or not s[1]:\n                return False\n            \n            if s[0][0] in ['+', '-']:\n                s[0] = s[0][1:]\n            \n            if not s[0]:\n                return False\n            \n            if s[1][0] in ['+', '-']:\n                s[1] = s[1][1:]\n            \n            if not s[1]:\n                return False\n            \n            if not s[0].isdigit() or not s[1].isdigit():\n                return False\n            \n            return True\n        \n        if not s.isdigit():\n            return False\n        \n        return True"}], "integer-to-roman": [{"task_id": "integer-to-roman", "completion": "class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        roman_dict = {\n            1000: 'M',\n            900: 'CM',\n            500: 'D',\n            400: 'CD',\n            100: 'C',\n            90: 'XC',\n            50: 'L',\n            40: 'XL',\n            10: 'X',\n            9: 'IX',\n            5: 'V',\n            4: 'IV',\n            1: 'I'\n        }\n        \n        roman_num = ''\n        \n        for key in roman_dict.keys():\n            while num >= key:\n                roman_num += roman_dict[key]\n                num -= key\n                \n        return roman_num"}], "find-the-difference": [{"task_id": "find-the-difference", "completion": "class Solution(object):\n    def findTheDifference(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        ## Solution 1\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Approach:\n        ## 1. Create a hashmap of the string s\n        ## 2. Iterate through the string t\n        ## 3. If the character is not in the hashmap, add it to the hashmap\n        ## 4. If the character is in the hashmap, decrement the value by 1\n        ## 5. Return the character that has a value of 1\n        \n        hashmap = {}\n        \n        for char in s:\n            if char not in hashmap:\n                hashmap[char] = 1\n            else:\n                hashmap[char] += 1\n        \n        for char in t:\n            if char not in hashmap:\n                return char\n            else:\n                hashmap[char] -= 1\n        \n        for key, value in hashmap.items():\n            if value == 1:\n                return key"}], "sudoku-solver": [{"task_id": "sudoku-solver", "completion": "class Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        def find_empty_space(board):\n            for i in range(9):\n                for j in range(9):\n                    if board[i][j] == '.':\n                        return (i,j)\n            return None\n        \n        def is_valid(board, num, pos):\n            # check row\n            for i in range(9):\n                if board[pos[0]][i] == num and pos[1] != i:\n                    return False\n            \n            # check column\n            for i in range(9):\n                if board[i][pos[1]] == num and pos[0] != i:\n                    return False\n            \n            # check box\n            box_x = pos[0] // 3\n            box_y = pos[1] // 3\n            \n            for i in range(box_x * 3, box_x * 3 + 3):\n                for j in range(box_y * 3, box_y * 3 + 3):\n                    if board[i][j] == num and (i,j) != pos:\n                        return False\n            \n            return True\n        \n        def solve(board):\n            empty = find_empty_space(board)\n            if empty is None:\n                return True\n            \n            for i in range(1,10):\n                if is_valid(board, str(i), empty):\n                    board[empty[0]][empty[1]] = str(i)\n                    \n                    if solve(board):\n                        return True\n                    \n                    board[empty[0]][empty[1]] = '.'\n            \n            return False\n        \n        solve(board)"}], "recover-binary-search-tree": [{"task_id": "recover-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the"}], "palindrome-linked-list": [{"task_id": "palindrome-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        \n        # Solution 1:\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Approach:\n        # 1. Find the middle of the linked list\n        # 2. Reverse the second half of the linked list\n        # 3. Compare the first half of the linked list with the reversed second half\n        # 4. Reverse the second half of the linked list again\n        # 5. Compare the first half of the linked list with the reversed second half\n        # 6. Return True if the first half and the reversed second half are equal, otherwise return False\n        \n        # Solution 2:\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Approach:\n        # 1. Find the middle of the linked list\n        # 2. Reverse the second half of the linked list\n        # 3. Compare the first half of the linked list with the reversed second half\n        # 4. Reverse the second half of the linked list again\n        # 5. Return True if the first half and the reversed second half are equal, otherwise return False\n        \n        # Solution 3:\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Approach:\n        # 1. Find the middle of the linked list\n        # 2. Reverse the second half of the linked list\n        # 3. Compare the first half of the linked list with the reversed second half\n        # 4. Reverse the second half of the linked list again\n        # 5. Return True if the first half and the reversed second half are equal, otherwise return False\n        \n        # Solution 4:\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Approach:\n        # 1. Find the middle of the linked list\n        # 2. Reverse the second half of the linked list\n        # 3. Compare the first half of the linked list with the reversed second half\n        # 4. Reverse the second half of the linked list again\n        # 5. Return True if the first half and the reversed second half are equal, otherwise return False\n        \n        # Solution 5:\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Approach:\n        # 1. Find the middle of the linked list\n        # 2. Reverse the second half of the linked list\n        # 3. Compare the first half of the linked list with the reversed second half\n        # 4. Reverse the second half of the linked list again\n        # 5. Return True if the first half and the reversed second half are equal, otherwise return False\n        \n        # Solution 6:\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Approach:\n        # 1. Find the middle of the linked list\n        # 2. Reverse the second half of the linked list\n        # 3. Compare the first half of the linked list with the reversed second half\n        # 4. Reverse the second half of the linked list again\n        # 5. Return True if the first half and the reversed second half are equal, otherwise return False\n        \n        # Solution 7:\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Approach:\n        # 1. Find the middle of the linked list\n        # 2. Reverse the second half of the linked list\n        # 3. Compare the first half of the linked list with the reversed second half\n        # 4. Reverse the second half of the linked list again\n        # 5. Return True if the first half and the reversed second half are equal, otherwise return False\n        \n        # Solution 8:\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Approach:\n        # 1. Find the middle of the linked list\n        # 2. Reverse the second half of the linked list\n        # 3. Compare the first half of the linked list with the reversed second half\n        # 4. Rever"}], "valid-perfect-square": [{"task_id": "valid-perfect-square", "completion": "class Solution(object):\n    def isPerfectSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return True\n        \n        i = 1\n        while i * i < num:\n            i += 1\n        \n        if i * i == num:\n            return True\n        \n        return False"}], "counting-bits": [{"task_id": "counting-bits", "completion": "class Solution(object):\n    def countBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if n == 0:\n            return [0]\n        \n        if n == 1:\n            return [0,1]\n        \n        if n == 2:\n            return [0,1,1]\n        \n        if n == 3:\n            return [0,1,1,2]\n        \n        if n == 4:\n            return [0,1,1,2,2]\n        \n        if n == 5:\n            return [0,1,1,2,2,3]\n        \n        if n == 6:\n            return [0,1,1,2,2,3,3]\n        \n        if n == 7:\n            return [0,1,1,2,2,3,3,4]\n        \n        if n == 8:\n            return [0,1,1,2,2,3,3,4,4]\n        \n        if n == 9:\n            return [0,1,1,2,2,3,3,4,4,5]\n        \n        if n == 10:\n            return [0,1,1,2,2,3,3,4,4,5,5]\n        \n        if n == 11:\n            return [0,1,1,2,2,3,3,4,4,5,5,6]\n        \n        if n == 12:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6]\n        \n        if n == 13:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7]\n        \n        if n == 14:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7]\n        \n        if n == 15:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8]\n        \n        if n == 16:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8]\n        \n        if n == 17:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9]\n        \n        if n == 18:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10]\n        \n        if n == 19:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,10]\n        \n        if n == 20:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,10,11]\n        \n        if n == 21:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,10,11,12]\n        \n        if n == 22:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,10,11,12,13]\n        \n        if n == 23:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,10,11,12,13,14]\n        \n        if n == 24:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,10,11,12,13,14,15]\n        \n        if n == 25"}], "remove-linked-list-elements": [{"task_id": "remove-linked-list-elements", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        \n        while head and head.val == val:\n            head = head.next\n        \n        if not head:\n            return None\n        \n        curr = head\n        while curr.next:\n            if curr.next.val == val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        \n        return head"}], "scramble-string": [{"task_id": "scramble-string", "completion": "class Solution(object):\n    def isScramble(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) != len(s2):\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if sorted(s1) != sorted(s2):\n            return False\n        \n        for i in range(1, len(s1)):\n            if self.isScramble(s1[:i], s2[:i]) and self.isScramble(s1[i:], s2[i:]):\n                return True\n            \n            if self.isScramble(s1[:i], s2[-i:]) and self.isScramble(s1[i:], s2[:-i]):\n                return True\n        \n        return False"}], "simplify-path": [{"task_id": "simplify-path", "completion": "class Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        \n        stack = []\n        for i in path.split('/'):\n            if i == '..':\n                if stack:\n                    stack.pop()\n            elif i and i != '.':\n                stack.append(i)\n        return '/' + '/'.join(stack)"}], "word-search-ii": [{"task_id": "word-search-ii", "completion": "class Solution(object):\n    def findWords(self, board, words):\n        \"\"\"\n        :type board: List[List[str]]\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        def dfs(i,j,word,visited):\n            if len(word) == 0:\n                return True\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or visited[i][j] or board[i][j] != word[0]:\n                return False\n            visited[i][j] = True\n            res = dfs(i+1,j,word[1:],visited) or dfs(i-1,j,word[1:],visited) or dfs(i,j+1,word[1:],visited) or dfs(i,j-1,word[1:],visited)\n            visited[i][j] = False\n            return res\n        \n        res = []\n        visited = [[False for i in range(len(board[0]))] for j in range(len(board))]\n        for word in words:\n            for i in range(len(board)):\n                for j in range(len(board[0])):\n                    if dfs(i,j,word,visited):\n                        res.append(word)\n                        break\n        return res"}], "valid-anagram": [{"task_id": "valid-anagram", "completion": "class Solution(object):\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_dict = {}\n        t_dict = {}\n        \n        for i in range(len(s)):\n            if s[i] in s_dict:\n                s_dict[s[i]] += 1\n            else:\n                s_dict[s[i]] = 1\n                \n            if t[i] in t_dict:\n                t_dict[t[i]] += 1\n            else:\n                t_dict[t[i]] = 1\n                \n        for key in s_dict:\n            if key not in t_dict:\n                return False\n            elif s_dict[key] != t_dict[key]:\n                return False\n                \n        return True"}], "valid-sudoku": [{"task_id": "valid-sudoku", "completion": "class Solution(object):\n    def isValidSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        \n        # check rows\n        for row in board:\n            if len(set(row)) != 9:\n                return False\n        \n        # check columns\n        for col in range(9):\n            if len(set([board[row][col] for row in range(9)])) != 9:\n                return False\n        \n        # check 3x3 boxes\n        for i in range(0, 9, 3):\n            for j in range(0, 9, 3):\n                if len(set([board[i+k][j+l] for k in range(3) for l in range(3)])) != 9:\n                    return False\n        \n        return True"}], "fizz-buzz": [{"task_id": "fizz-buzz", "completion": "class Solution(object):\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        answer = []\n        for i in range(1,n+1):\n            if i%3 == 0 and i%5 == 0:\n                answer.append(\"FizzBuzz\")\n            elif i%3 == 0:\n                answer.append(\"Fizz\")\n            elif i%5 == 0:\n                answer.append(\"Buzz\")\n            else:\n                answer.append(str(i))\n        return answer"}], "reverse-words-in-a-string": [{"task_id": "reverse-words-in-a-string", "completion": "class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # Split the string into words\n        words = s.split()\n        \n        # Reverse the order of the words\n        words.reverse()\n        \n        # Join the words back into a string\n        return ' '.join(words)"}], "excel-sheet-column-number": [{"task_id": "excel-sheet-column-number", "completion": "class Solution(object):\n    def titleToNumber(self, columnTitle):\n        \"\"\"\n        :type columnTitle: str\n        :rtype: int\n        \"\"\"\n        \n        # 26^0 = 1\n        # 26^1 = 26\n        # 26^2 = 676\n        # 26^3 = 25600\n        # 26^4 = 1440000\n        # 26^5 = 73720000\n        # 26^6 = 3689600000\n        # 26^7 = 195312500000\n        # 26^8 = 10737418240000\n        # 26^9 = 536870912000000\n        # 26^10 = 26843545600000000\n        # 26^11 = 1342177280000000000\n        # 26^12 = 67108864000000000000\n        # 26^13 = 3355443200000000000000\n        # 26^14 = 167772160000000000000000\n        # 26^15 = 8388608000000000000000000\n        # 26^16 = 414745600000000000000000000\n        # 26^17 = 20971520000000000000000000000\n        # 26^18 = 1048576000000000000000000000000\n        # 26^19 = 52428800000000000000000000000000\n        # 26^20 = 2621440000000000000000000000000000\n        # 26^21 = 131072000000000000000000000000000000\n        # 26^22 = 6553600000000000000000000000000000000\n        # 26^23 = 327680000000000000000000000000000000000\n        # 26^24 = 16384000000000000000000000000000000000000\n        # 26^25 = 819200000000000000000000000000000000000000\n        # 26^26 = 40960000000000000000000000000000000000000000\n        # 26^27 = 2048000000000000000000000000000000000000000000\n        # 26^28 = 10240000000000000000000000000000000000000000000\n        # 26^29 = 5120000000000000000000000000000000000000000000"}], "candy": [{"task_id": "candy", "completion": "class Solution(object):\n    def candy(self, ratings):\n        \"\"\"\n        :type ratings: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(ratings)\n        candies = [1] * n\n        \n        for i in range(1, n):\n            if ratings[i] > ratings[i - 1]:\n                candies[i] = candies[i - 1] + 1\n        \n        for i in range(n - 2, -1, -1):\n            if ratings[i] > ratings[i + 1]:\n                candies[i] = max(candies[i], candies[i + 1] + 1)\n        \n        return sum(candies)"}], "same-tree": [{"task_id": "same-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if p == None and q == None:\n            return True\n        elif p == None or q == None:\n            return False\n        elif p.val != q.val:\n            return False\n        else:\n            return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"}], "reorder-list": [{"task_id": "reorder-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reorderList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: None Do not return anything, modify head in-place instead.\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        slow = head\n        fast = head\n        \n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        second = slow.next\n        slow.next = None\n        \n        second = self.reverse(second)\n        \n        first = head\n        while second:\n            temp = first.next\n            first.next = second\n            second = second.next\n            first.next.next = temp\n            first = temp\n        \n        return head\n        \n    def reverse(self, head):\n        prev = None\n        curr = head\n        \n        while curr:\n            temp = curr.next\n            curr.next = prev\n            prev = curr\n            curr = temp\n        \n        return prev"}], "word-pattern": [{"task_id": "word-pattern", "completion": "class Solution(object):\n    def wordPattern(self, pattern, s):\n        \"\"\"\n        :type pattern: str\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # split the string into words\n        words = s.split()\n        \n        # if the length of pattern and words are not equal, return False\n        if len(pattern) != len(words):\n            return False\n        \n        # create a dictionary to store the pattern and words\n        pattern_dict = {}\n        word_dict = {}\n        \n        # iterate through the pattern and words\n        for i in range(len(pattern)):\n            # if the pattern and word are not in the dictionary, add them to the dictionary\n            if pattern[i] not in pattern_dict and words[i] not in word_dict:\n                pattern_dict[pattern[i]] = words[i]\n                word_dict[words[i]] = pattern[i]\n            # if the pattern and word are in the dictionary, check if they are equal\n            elif pattern[i] in pattern_dict and words[i] in word_dict:\n                if pattern_dict[pattern[i]] != words[i] or word_dict[words[i]] != pattern[i]:\n                    return False\n            # if the pattern and word are not in the dictionary, return False\n            else:\n                return False\n        \n        # if all the words are in the dictionary, return True\n        return True"}], "permutations": [{"task_id": "permutations", "completion": "class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def backtrack(first = 0):\n            if first == n:\n                output.append(nums[:])\n            for i in range(first, n):\n                nums[first], nums[i] = nums[i], nums[first]\n                backtrack(first + 1)\n                nums[first], nums[i] = nums[i], nums[first]\n        \n        output = []\n        n = len(nums)\n        backtrack()\n        return output"}], "search-a-2d-matrix": [{"task_id": "search-a-2d-matrix", "completion": "class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)"}], "add-two-numbers": [{"task_id": "add-two-numbers", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # Initialize the result list\n        result = ListNode()\n        result_tail = result\n        \n        # Initialize the carry variable\n        carry = 0\n        \n        # Iterate over the lists until both lists are empty\n        while l1 is not None or l2 is not None:\n            # Calculate the sum of the current nodes\n            sum = carry\n            if l1 is not None:\n                sum += l1.val\n            if l2 is not None:\n                sum += l2.val\n            \n            # Calculate the carry for the next iteration\n            carry = sum // 10\n            \n            # Create a new node with the sum modulo 10\n            result_tail.next = ListNode(sum % 10)\n            \n            # Move to the next node\n            result_tail = result_tail.next\n            \n            # Move to the next node\n            if l1 is not None:\n                l1 = l1.next\n            if l2 is not None:\n                l2 = l2.next\n        \n        # If there is a carry left, create a new node with the carry\n        if carry > 0:\n            result_tail.next = ListNode(carry)\n        \n        # Return the result list\n        return result.next"}], "number-complement": [{"task_id": "number-complement", "completion": "class Solution(object):\n    def findComplement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        ## 1. Convert the number to binary\n        binary_num = bin(num)[2:]\n        \n        ## 2. Reverse the binary number\n        binary_num = binary_num[::-1]\n        \n        ## 3. Convert the binary number to decimal\n        decimal_num = int(binary_num, 2)\n        \n        ## 4. Return the complement\n        return decimal_num"}], "arithmetic-slices-ii-subsequence": [{"task_id": "arithmetic-slices-ii-subsequence", "completion": "class Solution(object):\n    def numberOfArithmeticSlices(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 3:\n            return 0\n        \n        count = 0\n        i = 0\n        while i < len(nums) - 2:\n            if nums[i] - nums[i+1] == nums[i+1] - nums[i+2]:\n                count += 1\n                i += 1\n            else:\n                i += 1\n        return count"}], "text-justification": [{"task_id": "text-justification", "completion": "class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \uc804\uccb4 \ub2e8\uc5b4\uc758 \uae38\uc774\ub97c \uad6c\ud55c\ub2e4.\n        # 2. \uc804\uccb4 \ub2e8\uc5b4\uc758 \uae38\uc774\ub97c \uae30\uc900\uc73c\ub85c \ub2e8\uc5b4\ub97c \ub098\ub208\ub2e4.\n        # 3. \ub098\ub204\uc5b4\uc9c4 \ub2e8\uc5b4\ub4e4\uc744 \uc815\ub82c\ud55c\ub2e4.\n        # 4. \ub098\ub204\uc5b4\uc9c4 \ub2e8\uc5b4\ub4e4\uc744 \uc815\ub82c\ud55c \ub4a4 \uc815\ub82c\ub41c \ub2e8\uc5b4\ub4e4\uc744 \uc870\ud569\ud55c\ub2e4.\n        # 5. \uc870\ud569\ub41c \ub2e8\uc5b4\ub4e4\uc744 \uc815\ub82c\ud55c \ub4a4 \uc815\ub82c\ub41c \ub2e8\uc5b4\ub4e4\uc744 \uc870\ud569\ud55c\ub2e4.\n        # 6. \uc870\ud569\ub41c \ub2e8\uc5b4\ub4e4\uc744 \uc815\ub82c\ud55c \ub4a4 \uc815\ub82c\ub41c \ub2e8\uc5b4\ub4e4\uc744 \uc870\ud569\ud55c\ub2e4.\n        # 7. \uc870\ud569\ub41c \ub2e8\uc5b4\ub4e4\uc744 \uc815\ub82c\ud55c \ub4a4 \uc815\ub82c\ub41c \ub2e8\uc5b4\ub4e4\uc744 \uc870\ud569\ud55c\ub2e4.\n        # 8. \uc870\ud569\ub41c \ub2e8\uc5b4\ub4e4\uc744 \uc815\ub82c\ud55c \ub4a4 \uc815\ub82c\ub41c \ub2e8\uc5b4\ub4e4\uc744 \uc870\ud569\ud55c\ub2e4.\n        # 9. \uc870\ud569\ub41c \ub2e8\uc5b4\ub4e4\uc744 \uc815\ub82c\ud55c \ub4a4 \uc815\ub82c\ub41c \ub2e8\uc5b4\ub4e4\uc744 \uc870\ud569\ud55c\ub2e4.\n        # 10. \uc870\ud569\ub41c \ub2e8\uc5b4\ub4e4\uc744 \uc815\ub82c\ud55c \ub4a4 \uc815\ub82c\ub41c \ub2e8\uc5b4\ub4e4\uc744 \uc870\ud569\ud55c\ub2e4.\n        # 11. \uc870\ud569\ub41c \ub2e8\uc5b4\ub4e4\uc744 \uc815\ub82c\ud55c \ub4a4 \uc815\ub82c\ub41c \ub2e8\uc5b4\ub4e4\uc744 \uc870\ud569\ud55c\ub2e4.\n        # 12. \uc870\ud569\ub41c \ub2e8\uc5b4\ub4e4\uc744 \uc815\ub82c\ud55c \ub4a4 \uc815\ub82c\ub41c \ub2e8\uc5b4\ub4e4\uc744 \uc870\ud569\ud55c\ub2e4.\n        # 13. \uc870\ud569\ub41c \ub2e8\uc5b4\ub4e4\uc744 \uc815\ub82c\ud55c \ub4a4 \uc815\ub82c\ub41c \ub2e8\uc5b4\ub4e4\uc744 \uc870\ud569\ud55c\ub2e4.\n        # 14. \uc870\ud569\ub41c \ub2e8\uc5b4\ub4e4\uc744 \uc815\ub82c\ud55c \ub4a4 \uc815\ub82c\ub41c \ub2e8\uc5b4\ub4e4\uc744 \uc870\ud569\ud55c\ub2e4.\n        # 15."}], "binary-tree-postorder-traversal": [{"task_id": "binary-tree-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def postorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = [root]\n        result = []\n        \n        while stack:\n            node = stack.pop()\n            result.append(node.val)\n            \n            if node.left:\n                stack.append(node.left)\n            if node.right:\n                stack.append(node.right)\n                \n        return result[::-1]"}], "container-with-most-water": [{"task_id": "container-with-most-water", "completion": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_area = 0\n        left = 0\n        right = len(height) - 1\n        \n        while left < right:\n            area = min(height[left], height[right]) * (right - left)\n            max_area = max(max_area, area)\n            \n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n                \n        return max_area"}], "concatenated-words": [{"task_id": "concatenated-words", "completion": "class Solution(object):\n    def findAllConcatenatedWordsInADict(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        def is_concatenated(word, word_dict):\n            if word in word_dict:\n                return True\n            for i in range(1, len(word)):\n                left = word[:i]\n                right = word[i:]\n                if left in word_dict and right in word_dict:\n                    return True\n            return False\n        \n        word_dict = set(words)\n        res = []\n        for word in words:\n            if is_concatenated(word, word_dict):\n                res.append(word)\n        return res"}], "base-7": [{"task_id": "base-7", "completion": "class Solution(object):\n    def convertToBase7(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        \n        if num < 0:\n            num = abs(num)\n            sign = \"-\"\n        else:\n            sign = \"\"\n        \n        res = \"\"\n        while num:\n            res = str(num % 7) + res\n            num = num // 7\n        \n        return sign + res"}], "nim-game": [{"task_id": "nim-game", "completion": "class Solution(object):\n    def canWinNim(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n % 4 == 0:\n            return False\n        else:\n            return True"}], "n-queens-ii": [{"task_id": "n-queens-ii", "completion": "class Solution(object):\n    def totalNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        def is_valid(row, col, board):\n            for i in range(row):\n                if board[i][col] == 1:\n                    return False\n            i = row - 1\n            j = col - 1\n            while i >= 0 and j >= 0:\n                if board[i][j] == 1:\n                    return False\n                i -= 1\n                j -= 1\n            i = row - 1\n            j = col + 1\n            while i >= 0 and j < n:\n                if board[i][j] == 1:\n                    return False\n                i -= 1\n                j += 1\n            return True\n        \n        def backtrack(row, board):\n            if row == n:\n                return 1\n            count = 0\n            for col in range(n):\n                if is_valid(row, col, board):\n                    board[row][col] = 1\n                    count += backtrack(row + 1, board)\n                    board[row][col] = 0\n            return count\n        \n        board = [[0 for _ in range(n)] for _ in range(n)]\n        return backtrack(0, board)"}], "n-queens": [{"task_id": "n-queens", "completion": "class Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def is_valid(board, row, col):\n            for i in range(row):\n                if board[i][col] == 'Q':\n                    return False\n            i = row - 1\n            j = col - 1\n            while i >= 0 and j >= 0:\n                if board[i][j] == 'Q':\n                    return False\n                i -= 1\n                j -= 1\n            i = row - 1\n            j = col + 1\n            while i >= 0 and j < n:\n                if board[i][j] == 'Q':\n                    return False\n                i -= 1\n                j += 1\n            return True\n        \n        def backtrack(board, row):\n            if row == n:\n                res.append([\"\".join(row) for row in board])\n                return\n            for col in range(n):\n                if is_valid(board, row, col):\n                    board[row][col] = 'Q'\n                    backtrack(board, row + 1)\n                    board[row][col] = '.'\n        \n        res = []\n        board = [['.' for _ in range(n)] for _ in range(n)]\n        backtrack(board, 0)\n        return res"}], "word-search": [{"task_id": "word-search", "completion": "class Solution(object):\n    def exist(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        def dfs(i,j,k):\n            if k == len(word):\n                return True\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != word[k]:\n                return False\n            temp = board[i][j]\n            board[i][j] = '#'\n            res = dfs(i+1,j,k+1) or dfs(i-1,j,k+1) or dfs(i,j+1,k+1) or dfs(i,j-1,k+1)\n            board[i][j] = temp\n            return res\n        \n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if dfs(i,j,0):\n                    return True\n        return False"}], "merge-sorted-array": [{"task_id": "merge-sorted-array", "completion": "class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1]\n        # m = 1\n        # nums2 = []\n        # n = 0\n        \n        # nums1 = [0]\n        # m = 0\n        # nums2 = [1]\n        # n = 1\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3"}], "third-maximum-number": [{"task_id": "third-maximum-number", "completion": "class Solution(object):\n    def thirdMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max1 = max2 = max3 = float('-inf')\n        \n        for num in nums:\n            if num > max1:\n                max3 = max2\n                max2 = max1\n                max1 = num\n            elif num > max2 and num < max1:\n                max3 = max2\n                max2 = num\n            elif num > max3 and num < max2:\n                max3 = num\n                \n        return max3 if max3 != float('-inf') else max1"}]}