{"spiral-matrix": [{"task_id": "spiral-matrix", "completion": "class Solution(object):\n    def spiralOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not matrix:\n            return []\n        \n        m, n = len(matrix), len(matrix[0])\n        res = []\n        left, right = 0, n - 1\n        top, bottom = 0, m - 1\n        \n        while left <= right and top <= bottom:\n            for i in range(left, right + 1):\n                res.append(matrix[top][i])\n            top += 1\n            \n            for i in range(top, bottom + 1):\n                res.append(matrix[i][right])\n            right -= 1\n            \n            if top <= bottom:\n                for i in range(right, left - 1, -1):\n                    res.append(matrix[bottom][i])\n                bottom -= 1\n            \n            if left <= right:\n                for i in range(bottom, top - 1, -1):\n                    res.append(matrix[i][left])\n                left += 1\n        \n        return res"}], "summary-ranges": [{"task_id": "summary-ranges", "completion": "class Solution(object):\n    def summaryRanges(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        if len(nums) == 0:\n            return []\n        \n        if len(nums) == 1:\n            return [str(nums[0])]\n        \n        start = nums[0]\n        end = nums[0]\n        res = []\n        \n        for i in range(1, len(nums)):\n            if nums[i] == end + 1:\n                end = nums[i]\n            else:\n                if start == end:\n                    res.append(str(start))\n                else:\n                    res.append(str(start) + \"->\" + str(end))\n                start = nums[i]\n                end = nums[i]\n        \n        if start == end:\n            res.append(str(start))\n        else:\n            res.append(str(start) + \"->\" + str(end))\n        \n        return res"}], "distinct-subsequences": [{"task_id": "distinct-subsequences", "completion": "class Solution(object):\n    def numDistinct(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"\n        \n        # dp[i] = dp[i - 1] + (s[i - 1] == t[j - 1] ? 1 : 0)\n        # dp[i] = max(dp[i], dp[j - 1] + (s[i - 1] == t[j - 1] ? 1 : 0))\n        # dp[i] = max(dp[i], dp[j])\n        # dp[i] = max(dp[i], dp[j - 1])\n        # dp[i] = max(dp[i], dp[j - 1] + (s[i - 1] == t[j - 1] ? 1 : 0))\n        # dp[i] = max(dp[i], dp[j - 1] + (s[i - 1] == t[j - 1] ? 1 : 0))\n        # dp[i] = max(dp[i], dp[j - 1] + (s[i - 1] == t[j - 1] ? 1 : 0))\n        # dp[i] = max(dp[i], dp[j - 1] + (s[i - 1] == t[j - 1] ? 1 : 0))\n        # dp[i] = max(dp[i], dp[j - 1] + (s[i - 1] == t[j - 1] ? 1 : 0))\n        # dp[i] = max(dp[i], dp[j - 1] + (s[i - 1] == t[j - 1] ? 1 : 0))\n        # dp[i] = max(dp[i], dp[j - 1] + (s[i - 1] == t[j - 1] ? 1 : 0))\n        # dp[i] = max(dp[i], dp[j - 1] + (s[i - 1] == t[j - 1] ? 1 : 0))\n        # dp[i] = max(dp[i], dp[j - 1] + (s[i - 1] == t[j - 1] ? 1 : 0))\n        # dp[i] = max(dp[i], dp[j - 1] + (s[i - 1] == t[j - 1] ? 1 : 0))\n        # dp[i] = max(dp[i], dp[j - 1] + (s[i - 1] == t[j - 1] ? 1 : 0))\n        # dp[i] = max(dp[i], dp[j - 1] + (s[i - 1] == t[j - 1] ? 1 : 0))\n        # dp[i] = max(dp[i], dp[j - 1] + (s[i - 1] == t[j - 1] ? 1 : 0))\n        # dp[i] = max(dp[i], dp[j - 1] + (s[i - 1] == t[j - 1] ? 1 : 0))\n        # dp[i] = max(dp[i], dp[j - 1] + (s[i - 1] == t[j - 1] ? 1 : 0))\n        # dp[i] = max(dp[i], dp[j - 1] + (s[i - 1] == t[j - 1] ? 1 : 0))\n        # dp[i] = max(dp[i], dp[j - 1] + (s[i - 1] == t[j - 1] ? 1 : 0))\n        # dp[i] = max(dp[i], dp[j - 1] + (s[i - 1] == t[j - 1] ? 1 : 0))\n        # dp[i] = max(dp[i], dp[j - 1] + (s[i - 1] == t[j - 1] ? 1 : 0))"}], "first-missing-positive": [{"task_id": "first-missing-positive", "completion": "class Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225"}], "permutation-sequence": [{"task_id": "permutation-sequence", "completion": "class Solution(object):\n    def getPermutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. calculate the factorial of n\n        fact = 1\n        for i in range(1, n):\n            fact *= i\n        \n        # 2. calculate the kth permutation\n        k -= 1\n        res = \"\"\n        while n > 0:\n            # 2.1 calculate the number of digits in the current permutation\n            # 2.2 calculate the digit at the current position\n            # 2.3 calculate the number of permutations that can be formed with the current digit\n            # 2.4 calculate the kth permutation\n            # 2.5 calculate the number of digits in the current permutation\n            # 2.6 calculate the number of permutations that can be formed with the current digit\n            # 2.7 calculate the kth permutation\n            # 2.8 calculate the number of digits in the current permutation\n            # 2.9 calculate the number of permutations that can be formed with the current digit\n            # 2.10 calculate the kth permutation\n            # 2.11 calculate the number of digits in the current permutation\n            # 2.12 calculate the number of permutations that can be formed with the current digit\n            # 2.13 calculate the kth permutation\n            # 2.14 calculate the number of digits in the current permutation\n            # 2.15 calculate the number of permutations that can be formed with the current digit\n            # 2.16 calculate the kth permutation\n            # 2.17 calculate the number of digits in the current permutation\n            # 2.18 calculate the number of permutations that can be formed with the current digit\n            # 2.19 calculate the kth permutation\n            # 2.20 calculate the number of digits in the current permutation\n            # 2.21 calculate the number of permutations that can be formed with the current digit\n            # 2.22 calculate the kth permutation\n            # 2.23 calculate the number of digits in the current permutation\n            # 2.24 calculate the number of permutations that can be formed with the current digit\n            # 2.25 calculate the kth permutation\n            # 2.26 calculate the number of digits in the current permutation\n            # 2.27 calculate the number of permutations that can be formed with the current digit\n            # 2.28 calculate the kth permutation\n            # 2.29 calculate the number of digits in the current permutation\n            # 2.30 calculate the number of permutations that can be formed with the current digit\n            # 2.31 calculate the kth permutation\n            # 2.32 calculate the number of digits in the current permutation\n            # 2.33 calculate the number of permutations that can be formed with the current digit\n            # 2.34 calculate the kth permutation\n            # 2.35 calculate the number of digits in the current permutation\n            # 2.36 calculate the number of permutations that can be formed with the current digit\n            # 2.37 calculate the kth permutation\n            # 2.38 calculate the number of digits in the current permutation\n            # 2.39 calculate the number of permutations that can be formed with the current digit\n            # 2.40 calculate the kth permutation\n            # 2.41 calculate the number of digits in the current permutation\n            # 2.42 calculate the number of permutations that can be formed with the current digit\n            # 2.43 calculate the kth permutation\n            # 2.44 calculate the number of digits in the current permutation\n            # 2.45 calculate the number of permutations that can be formed with the current digit\n            # 2.46 calculate the kth permutation\n            # 2.47 calculate the number of digits in the current permutation\n            # 2.48 calculate the number of permutations that can be formed with the current digit\n            # 2.49 calculate the kth permutation\n            # 2.50 calculate the number of digits in the current permutation\n            # 2.51 calculate the number of permutations that can be formed with the current digit\n            # 2.52 calculate the kth permutation\n            # 2.53 calculate the number of digits in the current permut"}], "two-sum-ii-input-array-is-sorted": [{"task_id": "two-sum-ii-input-array-is-sorted", "completion": "class Solution(object):\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. Brute force\n        # for i in range(len(numbers)):\n        #     for j in range(i+1, len(numbers)):\n        #         if numbers[i] + numbers[j] == target:\n        #             return [i+1, j+1]\n        \n        # 2. Two pointers\n        left, right = 0, len(numbers) - 1\n        \n        while left < right:\n            if numbers[left] + numbers[right] == target:\n                return [left+1, right+1]\n            elif numbers[left] + numbers[right] < target:\n                left += 1\n            else:\n                right -= 1\n        \n        return [-1, -1]"}], "expression-add-operators": [{"task_id": "expression-add-operators", "completion": "class Solution(object):\n    def addOperators(self, num, target):\n        \"\"\"\n        :type num: str\n        :type target: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def backtrack(i, curr, prev, res, val, op):\n            if i == len(num):\n                if val == target and curr == 0:\n                    res.append(op.strip('-'))\n                return\n            if i == 0:\n                backtrack(i + 1, curr, prev, res, val + int(num[i]), op + num[i])\n            else:\n                backtrack(i + 1, curr + int(num[i]), val, res, int(str(val + int(num[i]))), op + '-' + num[i])\n                backtrack(i + 1, curr - int(num[i]), -val, res, int(str(-val - int(num[i]))), op + '+' + num[i])\n                if prev != 0:\n                    backtrack(i + 1, curr - prev, -prev, res, val - prev + int(num[i]), op + '*' + num[i])\n        \n        if not num:\n            return []\n        res = []\n        backtrack(0, 0, 0, res, int(num[0]), num[0])\n        return res"}], "sum-root-to-leaf-numbers": [{"task_id": "sum-root-to-leaf-numbers", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        stack = [(root, root.val)]\n        res = 0\n        \n        while stack:\n            node, val = stack.pop()\n            if node.left:\n                stack.append((node.left, val * 10 + node.left.val))\n            if node.right:\n                stack.append((node.right, val * 10 + node.right.val))\n            if not node.left and not node.right:\n                res += val\n        \n        return res"}], "license-key-formatting": [{"task_id": "license-key-formatting", "completion": "class Solution(object):\n    def licenseKeyFormatting(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        ## convert all uppercase to lowercase\n        s = s.lower()\n        \n        ## remove all dashes\n        s = s.replace('-', '')\n        \n        ## get the length of the string\n        n = len(s)\n        \n        ## get the number of groups\n        groups = n // k\n        \n        ## if there are any extra characters, add them to the groups\n        if n % k != 0:\n            groups += 1\n        \n        ## reverse the string\n        s = s[::-1]\n        \n        ## get the first group\n        s = s[:k]\n        \n        ## reverse the string\n        s = s[::-1]\n        \n        ## add dashes to the first group\n        s = s.replace('-', '-')\n        \n        ## return the string\n        return s"}], "gas-station": [{"task_id": "gas-station", "completion": "class Solution(object):\n    def canCompleteCircuit(self, gas, cost):\n        \"\"\"\n        :type gas: List[int]\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## 1. If the sum of gas is less than the sum of cost, then we can't complete the circuit\n        ## 2. If the sum of gas is greater than the sum of cost, then we can't complete the circuit\n        ## 3. If the sum of gas is equal to the sum of cost, then we can complete the circuit\n        \n        ## 1.\n        if sum(gas) < sum(cost):\n            return -1\n        \n        ## 2.\n        tank = 0\n        total = 0\n        for i in range(len(gas)):\n            tank += gas[i] - cost[i]\n            total += gas[i] - cost[i]\n        \n        ## 3.\n        if total < 0:\n            return -1\n        \n        ## 4.\n        return 0"}], "burst-balloons": [{"task_id": "burst-balloons", "completion": "class Solution(object):\n    def maxCoins(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # add 1 to the end and start\n        nums = [1] + nums + [1]\n        \n        # add 0 to the beginning\n        nums = [0] + nums\n        \n        # add 1 to the end and start\n        n = len(nums)\n        \n        # dp[i][j] = max(dp[i][k] + dp[k][j]) for all k in range(i, j)\n        dp = [[0] * n for _ in range(n)]\n        \n        # base case: dp[i][i] = 0\n        for i in range(n - 1):\n            dp[i][i + 1] = nums[i] * nums[i + 1]\n        \n        # base case: dp[i][i + 1] = 0\n        for i in range(n - 2, 0, -1):\n            dp[i][i + 1] = nums[i] * nums[i + 1]\n        \n        # base case: dp[i][i + 1] = 0\n        for i in range(n - 2, 0, -1):\n            dp[i][i + 1] = nums[i] * nums[i + 1]\n        \n        # base case: dp[i][i + 1] = 0\n        for i in range(n - 2, 0, -1):\n            dp[i][i + 1] = nums[i] * nums[i + 1]\n        \n        # base case: dp[i][i + 1] = 0\n        for i in range(n - 2, 0, -1):\n            dp[i][i + 1] = nums[i] * nums[i + 1]\n        \n        # base case: dp[i][i + 1] = 0\n        for i in range(n - 2, 0, -1):\n            dp[i][i + 1] = nums[i] * nums[i + 1]\n        \n        # base case: dp[i][i + 1] = 0\n        for i in range(n - 2, 0, -1):\n            dp[i][i + 1] = nums[i] * nums[i + 1]\n        \n        # base case: dp[i][i + 1] = 0\n        for i in range(n - 2, 0, -1):\n            dp[i][i + 1] = nums[i] * nums[i + 1]\n        \n        # base case: dp[i][i + 1] = 0\n        for i in range(n - 2, 0, -1):\n            dp[i][i + 1] = nums[i] * nums[i + 1]\n        \n        # base case: dp[i][i + 1] = 0\n        for i in range(n - 2, 0, -1):\n            dp[i][i + 1] = nums[i] * nums[i + 1]\n        \n        # base case: dp[i][i + 1] = 0\n        for i in range(n - 2, 0, -1):\n            dp[i][i + 1] = nums[i] * nums[i + 1]\n        \n        # base case: dp[i][i + 1] = 0\n        for i in range(n - 2, 0, -1):\n            dp[i][i + 1] = nums[i] * nums[i + 1]\n        \n        # base case: dp[i][i + 1] = 0\n        for i in range(n - 2, 0, -1):\n            dp[i][i + 1] = nums[i] * nums[i + 1]\n        \n        # base case: dp[i][i + 1] = 0\n        for i in range(n - 2, 0, -1):\n            dp[i][i + 1] = nums[i] * nums[i + 1]\n        \n        # base case: dp[i][i + 1] = 0\n        for i in range(n - 2, 0, -1):"}], "plus-one": [{"task_id": "plus-one", "completion": "class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # if the last digit is 9, then we need to add 1 to the next digit\n        if digits[-1] == 9:\n            digits[-1] = 0\n            for i in range(len(digits)-2, -1, -1):\n                if digits[i] != 9:\n                    digits[i] += 1\n                    return digits\n            # if we get here, then we need to add 1 to the first digit\n            digits[0] += 1\n            return digits\n        else:\n            digits[-1] += 1\n            return digits"}], "regular-expression-matching": [{"task_id": "regular-expression-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        # if p is empty, return false if s is not empty\n        if not p:\n            return not s\n        \n        # if p is not empty, check if it has a *\n        if len(p) > 1 and p[1] == '*':\n            # if the first character in p is *, check if the first character in s matches\n            # if it does, check if the rest of the string matches\n            return (self.isMatch(s, p[2:]) or\n                    (s and p[0] == '.' and self.isMatch(s[1:], p)))\n        \n        # if p is not empty, check if it has a *\n        else:\n            # if the first character in p is not *, check if the first character in s matches\n            # if it does, check if the rest of the string matches\n            return (s and p[0] == s[0] or p[0] == '.') and self.isMatch(s[1:], p[1:])"}], "create-maximum-number": [{"task_id": "create-maximum-number", "completion": "class Solution(object):\n    def maxNumber(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # find the length of the longest subarray\n        # in nums1 and nums2\n        m, n = len(nums1), len(nums2)\n        # if k is greater than the sum of lengths\n        # of nums1 and nums2, return nums2\n        if k > m + n:\n            return nums2\n        # if k is 0, return an empty array\n        if k == 0:\n            return []\n        # initialize an empty array to store the\n        # maximum subarray\n        max_subarray = []\n        # iterate through the numbers in nums1\n        for i in range(k):\n            # if the current number in nums1 is greater\n            # than the current number in nums2, remove\n            # the number from nums2\n            if nums1[i] > nums2[i]:\n                nums1, nums2 = nums2, nums1\n            # if the current number in nums1 is equal to\n            # the current number in nums2, continue\n            # to the next number in nums1\n            if nums1[i] == nums2[i]:\n                continue\n            # if the current number in nums1 is less than\n            # the current number in nums2, remove the\n            # number from nums1\n            if nums1[i] < nums2[i]:\n                nums1 = nums1[i+1:]\n            # if the current number in nums1 is greater than\n            # the current number in nums2, remove the\n            # number from nums2\n            if nums1[i] > nums2[i]:\n                nums2 = nums2[i+1:]\n        # return the maximum subarray\n        return nums1"}], "perfect-number": [{"task_id": "perfect-number", "completion": "class Solution(object):\n    def checkPerfectNumber(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return False\n        \n        sum = 1\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                if i * i != num:\n                    sum += i + num / i\n                else:\n                    sum += i\n        \n        return sum == num"}], "fibonacci-number": [{"task_id": "fibonacci-number", "completion": "class Solution(object):\n    def fib(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        \n        a = 0\n        b = 1\n        for i in range(2, n+1):\n            c = a + b\n            a = b\n            b = c\n        return b"}], "dungeon-game": [{"task_id": "dungeon-game", "completion": "class Solution(object):\n    def calculateMinimumHP(self, dungeon):\n        \"\"\"\n        :type dungeon: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(dungeon)\n        n = len(dungeon[0])\n        \n        dp = [[0 for _ in range(n)] for _ in range(m)]\n        \n        dp[m-1][n-1] = max(1, 1 - dungeon[m-1][n-1])\n        \n        for i in range(m-2, -1, -1):\n            dp[i][n-1] = max(dp[i+1][n-1] - dungeon[i][n-1], 1)\n        \n        for j in range(n-2, -1, -1):\n            dp[m-1][j] = max(dp[m-1][j+1] - dungeon[m-1][j], 1)\n        \n        for i in range(m-2, -1, -1):\n            for j in range(n-2, -1, -1):\n                dp[i][j] = max(min(dp[i+1][j], dp[i][j+1]) - dungeon[i][j], 1)\n        \n        return dp[0][0]"}], "find-k-th-smallest-pair-distance": [{"task_id": "find-k-th-smallest-pair-distance", "completion": "class Solution(object):\n    def smallestDistancePair(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # sort the array\n        nums.sort()\n        \n        # find the median\n        median = nums[k]\n        \n        # find the number of elements less than median\n        count = bisect.bisect_left(nums, median)\n        \n        # if the number of elements less than median is less than k,\n        # then the median is the kth smallest distance\n        if count < k:\n            return -1\n        \n        # otherwise, the median is the kth smallest distance\n        return median"}], "number-of-segments-in-a-string": [{"task_id": "number-of-segments-in-a-string", "completion": "class Solution(object):\n    def countSegments(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        return len(s.split())"}], "reverse-vowels-of-a-string": [{"task_id": "reverse-vowels-of-a-string", "completion": "class Solution(object):\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n        s_list = list(s)\n        left, right = 0, len(s_list) - 1\n        \n        while left < right:\n            while left < right and s_list[left] not in vowels:\n                left += 1\n            while left < right and s_list[right] not in vowels:\n                right -= 1\n            s_list[left], s_list[right] = s_list[right], s_list[left]\n            left += 1\n            right -= 1\n        \n        return ''.join(s_list)"}], "longest-consecutive-sequence": [{"task_id": "longest-consecutive-sequence", "completion": "class Solution(object):\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 0:\n            return 0\n        \n        nums_set = set(nums)\n        max_length = 0\n        \n        for num in nums:\n            if num - 1 not in nums_set:\n                curr_num = num\n                curr_length = 1\n                \n                while curr_num + 1 in nums_set:\n                    curr_num += 1\n                    curr_length += 1\n                \n                max_length = max(max_length, curr_length)\n        \n        return max_length"}], "missing-number": [{"task_id": "missing-number", "completion": "class Solution(object):\n    def missingNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## O(n) time and O(1) space\n        ## XOR\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 = 0\n        ## 0 ^ 1 ^ 1 ^ 2 ^ 2 ^ 3 ^ 3 ^ 4 ^ 4 ^ 5 ^ 5 ^ 6 ^ 6 ^ 7 ^ 7 ^ 8 = 0\n        ## 0 ^ 1 ^ 2 ^ 1 ^ 2 ^ 3 ^ 1 ^ 2 ^ 3 ^ 1 ^ 2 ^ 3 ^ 4 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 = 0\n        ## 0 ^ 1 ^ 2 ^ 1 ^ 2 ^ 3 ^ 1 ^ 2 ^ 3 ^ 1 ^ 2 ^ 3 ^ 4 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 = 0\n        ## 0 ^ 1 ^ 2 ^ 1 ^ 2 ^ 3 ^ 1 ^ 2 ^ 3 ^ 1 ^ 2 ^ 3 ^ 4 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 = 0\n        ## 0 ^ 1 ^ 2 ^ 1 ^ 2 ^ 3 ^ 1 ^ 2 ^ 3 ^ 1 ^ 2 ^ 3 ^ 4 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 = 0\n        ## 0 ^ 1 ^ 2 ^ 1 ^ 2 ^ 3 ^ 1 ^ 2 ^ 3 ^ 1 ^ 2 ^ 3 ^ 4 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 = 0\n        ## 0 ^ 1 ^ 2 ^ 1 ^ 2 ^ 3 ^ 1 ^ 2 ^ 3 ^ 1 ^ 2 ^ 3 ^ 4 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 = 0\n        ## 0 ^ 1 ^ 2 ^ 1 ^ 2 ^ 3 ^ 1 ^ 2 ^ 3 ^ 1 ^ 2 ^ 3 ^ 4 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 = 0\n        ## 0 ^ 1 ^ 2 ^ 1 ^ 2 ^ 3 ^ 1 ^ 2 ^ 3 ^ 1 ^ 2 ^ 3 ^ 4 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 1 ^ 2 ^"}], "word-ladder": [{"task_id": "word-ladder", "completion": "class Solution(object):\n    def ladderLength(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\"\n        \n        # build a graph\n        graph = collections.defaultdict(list)\n        for word in wordList:\n            graph[word].append(word)\n            graph[word].append(beginWord)\n        \n        # build a queue\n        queue = collections.deque([beginWord])\n        visited = set([beginWord])\n        level = 1\n        \n        while queue:\n            for _ in range(len(queue)):\n                curr = queue.popleft()\n                for i in range(len(curr)):\n                    for j in range(26):\n                        neighbor = curr[:i] + chr(ord('a') + j) + curr[i+1:]\n                        for neighbor_word in graph[neighbor]:\n                            if neighbor_word == endWord:\n                                return level + 1\n                            if neighbor_word not in visited:\n                                visited.add(neighbor_word)\n                                queue.append(neighbor_word)\n        return 0"}], "add-binary": [{"task_id": "add-binary", "completion": "class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        \n        if len(a) > len(b):\n            b = '0' * (len(a) - len(b)) + b\n        elif len(b) > len(a):\n            a = '0' * (len(b) - len(a)) + a\n        \n        carry = 0\n        res = ''\n        for i in range(len(a) - 1, -1, -1):\n            if a[i] == '1':\n                carry += 1\n            if b[i] == '1':\n                carry += 1\n            if carry % 2 == 1:\n                res = '1' + res\n            else:\n                res = '0' + res\n            carry = carry // 2\n        if carry == 1:\n            res = '1' + res\n        return res"}], "find-first-and-last-position-of-element-in-sorted-array": [{"task_id": "find-first-and-last-position-of-element-in-sorted-array", "completion": "class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums) == 0:\n            return [-1, -1]\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left < right:\n            mid = (left + right) // 2\n            if nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid\n        \n        if nums[left] != target:\n            return [-1, -1]\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left < right:\n            mid = (left + right + 1) // 2\n            if nums[mid] > target:\n                right = mid - 1\n            else:\n                left = mid\n        \n        return [left, right]"}], "remove-duplicates-from-sorted-array": [{"task_id": "remove-duplicates-from-sorted-array", "completion": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 0:\n            return 0\n        \n        i = 0\n        for j in range(1, len(nums)):\n            if nums[j] != nums[i]:\n                i += 1\n                nums[i] = nums[j]\n        \n        return i + 1"}], "jump-game-ii": [{"task_id": "jump-game-ii", "completion": "class Solution(object):\n    def jump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "best-time-to-buy-and-sell-stock-iv": [{"task_id": "best-time-to-buy-and-sell-stock-iv", "completion": "class Solution(object):\n    def maxProfit(self, k, prices):\n        \"\"\"\n        :type k: int\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if k >= len(prices) / 2:\n            return sum(max(0, prices[i] - prices[i - 1]) for i in range(1, len(prices)))\n        \n        dp = [0] * (k + 1)\n        for i in range(len(prices)):\n            for j in range(1, k + 1):\n                dp[j] = max(dp[j], dp[j - 1] + prices[i] - prices[i - 1])\n        return dp[-1]"}], "convert-a-number-to-hexadecimal": [{"task_id": "convert-a-number-to-hexadecimal", "completion": "class Solution(object):\n    def toHex(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return '0'\n        \n        if num < 0:\n            num = 2 ** 32 + num\n        \n        hex_dict = {10: 'a', 11: 'b', 12: 'c', 13: 'd', 14: 'e', 15: 'f'}\n        hex_list = []\n        while num > 0:\n            remainder = num % 16\n            if remainder >= 10:\n                hex_list.append(hex_dict[remainder])\n            else:\n                hex_list.append(str(remainder))\n            num = num // 16\n        \n        return ''.join(hex_list[::-1])"}], "first-unique-character-in-a-string": [{"task_id": "first-unique-character-in-a-string", "completion": "class Solution(object):\n    def firstUniqChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # create a hashmap to store the frequency of each character in the string\n        # create a hashmap to store the index of each character in the string\n        # iterate through the string and update the hashmap\n        # iterate through the hashmap and return the first index with a frequency of 1\n        # if no character with a frequency of 1, return -1\n        \n        # create a hashmap to store the frequency of each character in the string\n        freq = {}\n        # create a hashmap to store the index of each character in the string\n        index = {}\n        \n        # iterate through the string and update the hashmap\n        for i, c in en.umerate(s):\n            if c not in freq:\n                freq[c] = 1\n                index[c] = i\n            else:\n                freq[c] += 1\n        \n        # iterate through the hashmap and return the first index with a frequency of 1\n        for c in freq:\n            if freq[c] == 1:\n                return index[c]\n        \n        # if no character with a frequency of 1, return -1\n        return -1"}], "contains-duplicate-iii": [{"task_id": "contains-duplicate-iii", "completion": "class Solution(object):\n    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff):\n        \"\"\"\n        :type nums: List[int]\n        :type indexDiff: int\n        :type valueDiff: int\n        :rtype: bool\n        \"\"\"\n        \n        if len(nums) <= 1:\n            return False\n        \n        if valueDiff < 0:\n            return False\n        \n        if indexDiff < 0:\n            return False\n        \n        if indexDiff >= len(nums):\n            return False\n        \n        if valueDiff >= len(nums):\n            return False\n        \n        # if the difference between the max and min is greater than the valueDiff, then there is no way to find the pair\n        if (max(nums) - min(nums)) > valueDiff:\n            return False\n        \n        # create a hashmap with the valueDiff + 1 buckets\n        # the hashmap will store the valueDiff + 1 buckets, so that we can use the modulo operator to get the bucket\n        # the hashmap will store the valueDiff + 1 buckets, so that we can use the modulo operator to get the bucket\n        # the hashmap will store the valueDiff + 1 buckets, so that we can use the modulo operator to get the bucket\n        # the hashmap will store the valueDiff + 1 buckets, so that we can use the modulo operator to get the bucket\n        # the hashmap will store the valueDiff + 1 buckets, so that we can use the modulo operator to get the bucket\n        # the hashmap will store the valueDiff + 1 buckets, so that we can use the modulo operator to get the bucket\n        # the hashmap will store the valueDiff + 1 buckets, so that we can use the modulo operator to get the bucket\n        # the hashmap will store the valueDiff + 1 buckets, so that we can use the modulo operator to get the bucket\n        # the hashmap will store the valueDiff + 1 buckets, so that we can use the modulo operator to get the bucket\n        # the hashmap will store the valueDiff + 1 buckets, so that we can use the modulo operator to get the bucket\n        # the hashmap will store the valueDiff + 1 buckets, so that we can use the modulo operator to get the bucket\n        # the hashmap will store the valueDiff + 1 buckets, so that we can use the modulo operator to get the bucket\n        # the hashmap will store the valueDiff + 1 buckets, so that we can use the modulo operator to get the bucket\n        # the hashmap will store the valueDiff + 1 buckets, so that we can use the modulo operator to get the bucket\n        # the hashmap will store the valueDiff + 1 buckets, so that we can use the modulo operator to get the bucket\n        # the hashmap will store the valueDiff + 1 buckets, so that we can use the modulo operator to get the bucket\n        # the hashmap will store the valueDiff + 1 buckets, so that we can use the modulo operator to get the bucket\n        # the hashmap will store the valueDiff + 1 buckets, so that we can use the modulo operator to get the bucket\n        # the hashmap will store the valueDiff + 1 buckets, so that we can use the modulo operator to get the bucket\n        # the hashmap will store the valueDiff + 1 buckets, so that we can use the modulo operator to get the bucket\n        # the hashmap will store the valueDiff + 1 buckets, so that we can use the modulo operator to get the bucket\n        # the hashmap will store the valueDiff + 1 buckets, so that we can use the modulo operator to get the bucket\n        # the hashmap will store the valueDiff + 1 buckets, so that we can use the modulo operator to get the bucket\n        # the hashmap will store the valueDiff + 1 buckets, so that we can use the modulo operator to get the bucket\n        # the hashmap will store the valueDiff + 1 buckets, so that we can use the modulo operator to get the bucket\n        # the hashmap will store the valueDiff + 1 buckets, so that we can use the modulo operator to get the bucket\n        # the hashmap will store the valueDiff + 1 buckets, so that we can use the modulo operator to get the bucket\n        # the hashmap will store the valueDiff + 1 buckets, so that we can use the modulo operator to get the bucket\n        # the hashmap will store the valueDiff + 1 buckets, so that we can use the modulo operator to get the bucket\n        # the hashmap will store the valueDiff + 1 buckets, so that we can use the modulo operator to get the bucket\n        # the hashmap will store the"}], "sort-colors": [{"task_id": "sort-colors", "completion": "class Solution(object):\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2"}], "max-consecutive-ones": [{"task_id": "max-consecutive-ones", "completion": "class Solution(object):\n    def findMaxConsecutiveOnes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_count = 0\n        count = 0\n        \n        for i in nums:\n            if i == 1:\n                count += 1\n            else:\n                count = 0\n            max_count = max(max_count, count)\n        \n        return max_count"}], "count-complete-tree-nodes": [{"task_id": "count-complete-tree-nodes", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def countNodes(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        left = root\n        right = root\n        \n        # find the leftmost and rightmost level\n        l = 0\n        r = 0\n        \n        while left:\n            left = left.left\n            l += 1\n        \n        while right:\n            right = right.right\n            r += 1\n        \n        # if left and right are same, it means the tree is full binary tree\n        # if left and right are not same, it means the tree is not full binary tree\n        if l == r:\n            return (1 << l) - 1\n        \n        return 1 + self.countNodes(root.left) + self.countNodes(root.right)"}], "add-strings": [{"task_id": "add-strings", "completion": "class Solution(object):\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        ## 1. convert to int\n        ## 2. add\n        ## 3. convert to str\n        \n        ## 1. convert to int\n        num1 = int(num1)\n        num2 = int(num2)\n        \n        ## 2. add\n        sum = num1 + num2\n        \n        ## 3. convert to str\n        return str(sum)"}], "basic-calculator": [{"task_id": "basic-calculator", "completion": "class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 2. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 3. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 4. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 5. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 6. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 7. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 8. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 9. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 10. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 11. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 12. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 13. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 14. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 15. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 16. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 17. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 18. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 19. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 20. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 21. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 22. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 23. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 24. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 25. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 26. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 27. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 28. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 29. \uc5f0\uc0b0\uc790 \uc6b0\uc120\ufffd"}], "ipo": [{"task_id": "ipo", "completion": "class Solution(object):\n    def findMaximizedCapital(self, k, w, profits, capital):\n        \"\"\"\n        :type k: int\n        :type w: int\n        :type profits: List[int]\n        :type capital: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # sort capital and profits\n        # profits[i] - capital[i]\n        # profits[i] - capital[i] > 0\n        # profits[i] - capital[i] < 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i]"}], "valid-parentheses": [{"task_id": "valid-parentheses", "completion": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # if the length of the string is odd, it is not valid\n        if len(s) % 2 != 0:\n            return False\n        \n        # create a dictionary to map the opening brackets to their closing brackets\n        brackets = {\n            '(': ')',\n            '[': ']',\n            '{': '}'\n        }\n        \n        # create a stack to store the opening brackets\n        stack = []\n        \n        # iterate over the string\n        for char in s:\n            # if the character is an opening bracket, add it to the stack\n            if char in brackets:\n                stack.append(char)\n            # if the character is a closing bracket, check if it matches the top of the stack\n            else:\n                # if the stack is empty or the closing bracket does not match the opening bracket, return False\n                if not stack or brackets[stack.pop()] != char:\n                    return False\n        \n        # if the stack is not empty, return False\n        return not stack"}], "next-permutation": [{"task_id": "next-permutation", "completion": "class Solution(object):\n    def nextPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # find the first number that is smaller than the next number\n        # find the first number that is smaller than the next number\n        # swap the two numbers\n        # reverse the rest of the array\n        # if the array is already in descending order, reverse it\n        \n        # find the first number that is smaller than the next number\n        # find the first number that is smaller than the next number\n        # swap the two numbers\n        # reverse the rest of the array\n        # if the array is already in descending order, reverse it\n        \n        # find the first number that is smaller than the next number\n        # find the first number that is smaller than the next number\n        # swap the two numbers\n        # reverse the rest of the array\n        # if the array is already in descending order, reverse it\n        \n        # find the first number that is smaller than the next number\n        # find the first number that is smaller than the next number\n        # swap the two numbers\n        # reverse the rest of the array\n        # if the array is already in descending order, reverse it\n        \n        # find the first number that is smaller than the next number\n        # find the first number that is smaller than the next number\n        # swap the two numbers\n        # reverse the rest of the array\n        # if the array is already in descending order, reverse it\n        \n        # find the first number that is smaller than the next number\n        # find the first number that is smaller than the next number\n        # swap the two numbers\n        # reverse the rest of the array\n        # if the array is already in descending order, reverse it\n        \n        # find the first number that is smaller than the next number\n        # find the first number that is smaller than the next number\n        # swap the two numbers\n        # reverse the rest of the array\n        # if the array is already in descending order, reverse it\n        \n        # find the first number that is smaller than the next number\n        # find the first number that is smaller than the next number\n        # swap the two numbers\n        # reverse the rest of the array\n        # if the array is already in descending order, reverse it\n        \n        # find the first number that is smaller than the next number\n        # find the first number that is smaller than the next number\n        # swap the two numbers\n        # reverse the rest of the array\n        # if the array is already in descending order, reverse it\n        \n        # find the first number that is smaller than the next number\n        # find the first number that is smaller than the next number\n        # swap the two numbers\n        # reverse the rest of the array\n        # if the array is already in descending order, reverse it\n        \n        # find the first number that is smaller than the next number\n        # find the first number that is smaller than the next number\n        # swap the two numbers\n        # reverse the rest of the array\n        # if the array is already in descending order, reverse it\n        \n        # find the first number that is smaller than the next number\n        # find the first number that is smaller than the next number\n        # swap the two numbers\n        # reverse the rest of the array\n        # if the array is already in descending order, reverse it\n        \n        # find the first number that is smaller than the next number\n        # find the first number that is smaller than the next number\n        # swap the two numbers\n        # reverse the rest of the array\n        # if the array is already in descending order, reverse it\n        \n        # find the first number that is smaller than the next number\n        # find the first number that is smaller than the next number\n        # swap the two numbers\n        # reverse the rest of the array\n        # if the array is already in descending order, reverse it\n        \n        # find the first number that is smaller than the next number\n        # find the first number that is smaller than the next number\n        # swap the two numbers\n        # reverse the rest of the array\n        # if the array is already in descending order, reverse it\n        \n        # find the first number that is smaller than the next number\n        # find the first number that is smaller than the next number\n        # swap the two numbers\n        # reverse the rest of the array\n        # if the array is already in descending order, reverse it\n        \n        # find the first number that is smaller than the next number\n        # find the first number that is smaller than the next number\n        # swap the two numbers\n        # reverse the rest of the array\n        # if the"}], "contains-duplicate-ii": [{"task_id": "contains-duplicate-ii", "completion": "class Solution(object):\n    def containsNearbyDuplicate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        \n        # Time: O(n)\n        # Space: O(n)\n        # Hashmap\n        # if len(nums) <= k:\n        #     return False\n        # hashmap = {}\n        # for i in range(len(nums)):\n        #     if nums[i] in hashmap:\n        #         return True\n        #     hashmap[nums[i]] = i\n        # return False\n        \n        # Time: O(n)\n        # Space: O(k)\n        # Sliding window\n        if len(nums) <= k:\n            return False\n        hashset = set()\n        for i in range(len(nums)):\n            if i > k:\n                hashset.remove(nums[i - k - 1])\n            if nums[i] in hashset:\n                return True\n            hashset.add(nums[i])\n        return False"}], "maximum-gap": [{"task_id": "maximum-gap", "completion": "class Solution(object):\n    def maximumGap(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 2:\n            return 0\n        \n        max_num = max(nums)\n        min_num = min(nums)\n        \n        if max_num == min_num:\n            return 0\n        \n        bucket_size = max(1, (max_num - min_num) // (len(nums) - 1))\n        \n        bucket_min = [float('inf')] * (len(nums) + 1)\n        bucket_max = [float('-inf')] * (len(nums) + 1)\n        \n        for num in nums:\n            idx = (num - min_num) // bucket_size\n            bucket_min[idx] = min(bucket_min[idx], num)\n            bucket_max[idx] = max(bucket_max[idx], num)\n        \n        prev_max = bucket_max[0]\n        max_gap = 0\n        \n        for i in range(1, len(bucket_min)):\n            if bucket_min[i] == float('inf'):\n                continue\n            max_gap = max(max_gap, bucket_min[i] - prev_max)\n            prev_max = bucket_max[i]\n        \n        return max_gap"}], "binary-tree-level-order-traversal": [{"task_id": "binary-tree-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        res = []\n        \n        while queue:\n            level = []\n            for node in queue:\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            res.append(level)\n            queue = queue[len(level):]\n        return res"}], "couples-holding-hands": [{"task_id": "couples-holding-hands", "completion": "class Solution(object):\n    def minSwapsCouples(self, row):\n        \"\"\"\n        :type row: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30\n        # 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31\n        # 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16\n        # 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16\n        # 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16\n        # 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16\n        # 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16\n        # 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16\n        # 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16\n        # 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16\n        # 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16\n        # 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16\n        # 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16\n        # 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16\n        # 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16\n        # 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16\n        # 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16\n        #"}], "interleaving-string": [{"task_id": "interleaving-string", "completion": "class Solution(object):\n    def isInterleave(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) + len(s2) != len(s3):\n            return False\n        \n        if s1 == \"\" and s2 == \"\" and s3 == \"\":\n            return True\n        \n        if s1 == \"\" and s2 != \"\" or s1 != \"\" and s2 == \"\":\n            return False\n        \n        if s1 == \"\" and s2 == \"\" and s3 != \"\":\n            return False\n        \n        if s1 == s2 and s1 != s3:\n            return False\n        \n        if s1 == s3 and s1 != s2:\n            return False\n        \n        if s2 == s3 and s2 != s1:\n            return False\n        \n        if s1 == s2 and s1 == s3:\n            return True\n        \n        if s1 == s3 and s1 != s2:\n            return False\n        \n        if s2 == s3 and s2 != s1:\n            return False\n        \n        if s1 == s2 and s1 != s3:\n            return False\n        \n        if s1 == s3 and s1 != s2:\n            return False\n        \n        if s2 == s3 and s2 != s1:\n            return False\n        \n        if s1 == s3 and s1 != s2:\n            return False\n        \n        if s2 == s3 and s2 != s1:\n            return False\n        \n        if s1 == s2 and s1 != s3:\n            return False\n        \n        if s1 == s3 and s1 != s2:\n            return False\n        \n        if s2 == s3 and s2 != s1:\n            return False\n        \n        if s1 == s3 and s1 != s2:\n            return False\n        \n        if s2 == s3 and s2 != s1:\n            return False\n        \n        if s1 == s2 and s1 != s3:\n            return False\n        \n        if s1 == s3 and s1 != s2:\n            return False\n        \n        if s2 == s3 and s2 != s1:\n            return False\n        \n        if s1 == s3 and s1 != s2:\n            return False\n        \n        if s2 == s3 and s2 != s1:\n            return False\n        \n        if s1 == s2 and s1 != s3:\n            return False\n        \n        if s1 == s3 and s1 != s2:\n            return False\n        \n        if s2 == s3 and s2 != s1:\n            return False\n        \n        if s1 == s3 and s1 != s2:\n            return False\n        \n        if s2 == s3 and s2 != s1:\n            return False\n        \n        if s1 == s2 and s1 != s3:\n            return False\n        \n        if s1 == s3 and s1 != s2:\n            return False\n        \n        if s2 == s3 and s2 != s1:\n            return False\n        \n        if s1 == s3 and s1 != s2:\n            return False\n        \n        if s2 == s3 and s2 != s1:\n            return False\n        \n        if s1 == s2 and s1 != s3:\n            return False\n        \n        if s1 == s3 and s1 != s2:\n            return False\n        \n        if s2 == s3 and s2 != s1:\n            return False\n        \n        if s1 == s3 and s1 != s2:\n            return False\n        \n        if s2 == s3 and s2 != s1:\n            return False\n        \n        if s1 == s2 and s1 != s3:\n            return False\n        \n        if s1 == s3 and s1 != s2:\n            return False\n        \n        if s2 == s3 and s2 != s1:\n            return False\n        \n        if s1 == s3 and s1 != s2:\n            return False\n        \n        if s2 == s3 and s2 != s1:\n            return False\n        \n        if s1 == s2 and s1 != s3:"}], "assign-cookies": [{"task_id": "assign-cookies", "completion": "class Solution(object):\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        \n        g.sort()\n        s.sort()\n        i = 0\n        j = 0\n        while i < len(g) and j < len(s):\n            if g[i] <= s[j]:\n                i += 1\n            j += 1\n        return i"}], "keyboard-row": [{"task_id": "keyboard-row", "completion": "class Solution(object):\n    def findWords(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. create a hashmap for each row\n        # 2. iterate through each word\n        # 3. check if the word is in the hashmap\n        # 4. if it is, add it to the list\n        \n        # 1. create a hashmap for each row\n        row1 = set(\"qwertyuiop\")\n        row2 = set(\"asdfghjkl\")\n        row3 = set(\"zxcvbnm\")\n        \n        # 2. iterate through each word\n        # 3. check if the word is in the hashmap\n        # 4. if it is, add it to the list\n        res = []\n        for word in words:\n            row = set(word.lower())\n            if row1.intersection(row):\n                res.append(word)\n            elif row2.intersection(row):\n                res.append(word)\n            elif row3.intersection(row):\n                res.append(word)\n        return res"}], "reverse-linked-list-ii": [{"task_id": "reverse-linked-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseBetween(self, head, left, right):\n        \"\"\"\n        :type head: ListNode\n        :type left: int\n        :type right: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if left == right:\n            return head\n        \n        # 1. Find the left node\n        left_node = head\n        for _ in range(left - 1):\n            left_node = left_node.next\n        \n        # 2. Find the right node\n        right_node = head\n        for _ in range(right):\n            right_node = right_node.next\n        \n        # 3. Reverse the nodes\n        prev = None\n        curr = left_node\n        while curr != right_node:\n            next = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next\n        \n        # 4. Connect the left node to the reversed right node\n        left_node.next = prev\n        \n        # 5. Connect the left node to the right node\n        curr = left_node\n        while curr.next != right_node:\n            curr = curr.next\n        curr.next = right_node\n        \n        return head"}], "shortest-palindrome": [{"task_id": "shortest-palindrome", "completion": "class Solution(object):\n    def shortestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # concatenate the reversed string with the original string\n        # return the reversed string\n        \n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # concatenate the reversed string with the original string\n        # return the reversed string\n        \n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # concatenate the reversed string with the original string\n        # return the reversed string\n        \n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # concatenate the reversed string with the original string\n        # return the reversed string\n        \n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # concatenate the reversed string with the original string\n        # return the reversed string\n        \n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # concatenate the reversed string with the original string\n        # return the reversed string\n        \n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # concatenate the reversed string with the original string\n        # return the reversed string\n        \n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # concatenate the reversed string with the original string\n        # return the reversed string\n        \n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # concatenate the reversed string with the original string\n        # return the reversed string\n        \n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # concatenate the reversed string with the original string\n        # return the reversed string\n        \n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # concatenate the reversed string with the original string\n        # return the reversed string\n        \n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # concatenate the reversed string with the original string\n        # return the reversed string\n        \n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # concatenate the reversed string with the original string\n        # return the reversed string\n        \n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # concatenate the reversed string with the original string\n        # return the reversed string\n        \n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # concatenate the reversed string with the original string\n        # return the reversed string\n        \n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # concatenate the reversed string with the original string\n        # return the reversed string\n        \n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # concatenate the reversed string with the original string\n        # return the reversed string\n        \n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # concatenate the reversed string with the original string\n        # return the reversed string\n        \n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # concatenate the reversed string with the original string\n        # return the reversed string\n        \n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # concatenate the reversed string with the original string\n        # return the reversed string\n        \n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # concatenate the reversed string with the original string\n        # return the reversed string\n        \n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # concatenate the reversed string with the original string\n        # return the reversed string\n        \n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # concatenate the reversed string with the original string"}], "minimum-window-substring": [{"task_id": "minimum-window-substring", "completion": "class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        if len(s) < len(t):\n            return \"\"\n        \n        # create a hashmap for the characters in t\n        # and their frequencies\n        # we will use this to keep track of the characters\n        # in t that we need to have in the window\n        # and their frequencies\n        # we will also use this to keep track of the characters\n        # in the window\n        # we will also use this to keep track of the characters\n        # in the window\n        # we will also use this to keep track of the characters\n        # in the window\n        # we will also use this to keep track of the characters\n        # in the window\n        # we will also use this to keep track of the characters\n        # in the window\n        # we will also use this to keep track of the characters\n        # in the window\n        # we will also use this to keep track of the characters\n        # in the window\n        # we will also use this to keep track of the characters\n        # in the window\n        # we will also use this to keep track of the characters\n        # in the window\n        # we will also use this to keep track of the characters\n        # in the window\n        # we will also use this to keep track of the characters\n        # in the window\n        # we will also use this to keep track of the characters\n        # in the window\n        # we will also use this to keep track of the characters\n        # in the window\n        # we will also use this to keep track of the characters\n        # in the window\n        # we will also use this to keep track of the characters\n        # in the window\n        # we will also use this to keep track of the characters\n        # in the window\n        # we will also use this to keep track of the characters\n        # in the window\n        # we will also use this to keep track of the characters\n        # in the window\n        # we will also use this to keep track of the characters\n        # in the window\n        # we will also use this to keep track of the characters\n        # in the window\n        # we will also use this to keep track of the characters\n        # in the window\n        # we will also use this to keep track of the characters\n        # in the window\n        # we will also use this to keep track of the characters\n        # in the window\n        # we will also use this to keep track of the characters\n        # in the window\n        # we will also use this to keep track of the characters\n        # in the window\n        # we will also use this to keep track of the characters\n        # in the window\n        # we will also use this to keep track of the characters\n        # in the window\n        # we will also use this to keep track of the characters\n        # in the window\n        # we will also use this to keep track of the characters\n        # in the window\n        # we will also use this to keep track of the characters\n        # in the window\n        # we will also use this to keep track of the characters\n        # in the window\n        # we will also use this to keep track of the characters\n        # in the window\n        # we will also use this to keep track of the characters\n        # in the window\n        # we will also use this to keep track of the characters\n        # in the window\n        # we will also use this to keep track of the characters\n        # in the window\n        # we will also use this to keep track of the characters\n        # in the window\n        # we will also use this to keep track of the characters\n        # in the window\n        # we will also use this to keep track of the characters\n        # in the window\n        # we will also use this to keep track of the characters\n        # in the window\n        # we will also use this to keep track of the characters\n        # in the window\n        # we will also use this to keep track of the characters\n        # in the window\n        # we will also use this to keep track of the characters\n        # in the window\n        # we will also use this to keep track of the characters\n        # in the window\n        # we will also use this to keep track of the characters\n        # in the window\n        # we will also use this to keep track of the characters\n        # in the window\n        # we will also use this to keep track of the characters\n        # in the window\n        # we will also use this to keep track of the characters\n        # in the window\n        # we will also use this to keep track of the characters\n        #"}], "self-crossing": [{"task_id": "self-crossing", "completion": "class Solution(object):\n    def isSelfCrossing(self, distance):\n        \"\"\"\n        :type distance: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        if len(distance) < 4:\n            return False\n        \n        if distance[0] >= distance[3] and distance[1] <= distance[2]:\n            return True\n        \n        if distance[0] > distance[3] and distance[1] >= distance[4]:\n            return True\n        \n        if distance[0] <= distance[3] and distance[1] < distance[2]:\n            return True\n        \n        if distance[0] + distance[3] >= distance[2] and distance[1] == distance[4]:\n            return True\n        \n        if distance[0] + distance[3] <= distance[2] and distance[1] + distance[4] >= distance[5]:\n            return True\n        \n        if distance[0] + distance[3] >= distance[2] and distance[1] + distance[4] <= distance[5]:\n            return True\n        \n        if distance[0] + distance[3] <= distance[2] and distance[1] - distance[4] >= distance[5]:\n            return True\n        \n        if distance[0] + distance[3] <= distance[2] and distance[1] - distance[4] <= distance[5]:\n            return True\n        \n        return False"}], "remove-duplicates-from-sorted-list": [{"task_id": "remove-duplicates-from-sorted-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        curr = head\n        while curr.next:\n            if curr.val == curr.next.val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        return head"}], "longest-palindrome": [{"task_id": "longest-palindrome", "completion": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \uc9dd\uc218\uba74 \uc804\ubd80 \ub2e4 \ub354\ud558\uace0 \ud640\uc218\uba74 \uc911\uac04\uac12 \ub354\ud558\uae30\n        # 2. \uc9dd\uc218\uba74 \uc804\ubd80 \ub2e4 \ub354\ud558\uace0 \ud640\uc218\uba74 \uc911\uac04\uac12 \ub354\ud558\uae30\n        # 3. \uc9dd\uc218\uba74 \uc804\ubd80 \ub2e4 \ub354\ud558\uace0 \ud640\uc218\uba74 \uc911\uac04\uac12 \ub354\ud558\uae30\n        # 4. \uc9dd\uc218\uba74 \uc804\ubd80 \ub2e4 \ub354\ud558\uace0 \ud640\uc218\uba74 \uc911\uac04\uac12 \ub354\ud558\uae30\n        # 5. \uc9dd\uc218\uba74 \uc804\ubd80 \ub2e4 \ub354\ud558\uace0 \ud640\uc218\uba74 \uc911\uac04\uac12 \ub354\ud558\uae30\n        # 6. \uc9dd\uc218\uba74 \uc804\ubd80 \ub2e4 \ub354\ud558\uace0 \ud640\uc218\uba74 \uc911\uac04\uac12 \ub354\ud558\uae30\n        # 7. \uc9dd\uc218\uba74 \uc804\ubd80 \ub2e4 \ub354\ud558\uace0 \ud640\uc218\uba74 \uc911\uac04\uac12 \ub354\ud558\uae30\n        # 8. \uc9dd\uc218\uba74 \uc804\ubd80 \ub2e4 \ub354\ud558\uace0 \ud640\uc218\uba74 \uc911\uac04\uac12 \ub354\ud558\uae30\n        # 9. \uc9dd\uc218\uba74 \uc804\ubd80 \ub2e4 \ub354\ud558\uace0 \ud640\uc218\uba74 \uc911\uac04\uac12 \ub354\ud558\uae30\n        # 10. \uc9dd\uc218\uba74 \uc804\ubd80 \ub2e4 \ub354\ud558\uace0 \ud640\uc218\uba74 \uc911\uac04\uac12 \ub354\ud558\uae30\n        # 11. \uc9dd\uc218\uba74 \uc804\ubd80 \ub2e4 \ub354\ud558\uace0 \ud640\uc218\uba74 \uc911\uac04\uac12 \ub354\ud558\uae30\n        # 12. \uc9dd\uc218\uba74 \uc804\ubd80 \ub2e4 \ub354\ud558\uace0 \ud640\uc218\uba74 \uc911\uac04\uac12 \ub354\ud558\uae30\n        # 13. \uc9dd\uc218\uba74 \uc804\ubd80 \ub2e4 \ub354\ud558\uace0 \ud640\uc218\uba74 \uc911\uac04\uac12 \ub354\ud558\uae30\n        # 14. \uc9dd\uc218\uba74 \uc804\ubd80 \ub2e4 \ub354\ud558\uace0 \ud640\uc218\uba74 \uc911\uac04\uac12 \ub354\ud558\uae30\n        # 15. \uc9dd\uc218\uba74 \uc804\ubd80 \ub2e4 \ub354\ud558\uace0 \ud640\uc218\uba74 \uc911\uac04\uac12 \ub354\ud558\uae30\n        # 16. \uc9dd\uc218"}], "construct-binary-tree-from-inorder-and-postorder-traversal": [{"task_id": "construct-binary-tree-from-inorder-and-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not inorder:\n            return None\n        \n        root = TreeNode(postorder[-1])\n        idx = inorder.index(root.val)\n        \n        root.right = self.buildTree(inorder[idx+1:], postorder[idx:-1])\n        root.left = self.buildTree(inorder[:idx], postorder[:idx])\n        \n        return root"}], "cut-off-trees-for-golf-event": [{"task_id": "cut-off-trees-for-golf-event", "completion": "class Solution(object):\n    def cutOffTree(self, forest):\n        \"\"\"\n        :type forest: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # find the starting point\n        m, n = len(forest), len(forest[0])\n        trees = []\n        for i in range(m):\n            for j in range(n):\n                if forest[i][j] > 1:\n                    trees.append((forest[i][j], i, j))\n        trees.sort()\n        if not trees:\n            return -1\n        sx, sy = trees[0][1], trees[0][2]\n        for t in trees[1:]:\n            if self.bfs(forest, sx, sy, t[1], t[2]):\n                sx, sy = t[1], t[2]\n        return self.bfs(forest, sx, sy, m - 1, n - 1)\n\n    def bfs(self, forest, sx, sy, tx, ty):\n        m, n = len(forest), len(forest[0])\n        q = collections.deque([(sx, sy)])\n        visited = set([(sx, sy)])\n        step = 0\n        while q:\n            for _ in range(len(q)):\n                x, y = q.popleft()\n                if x == tx and y == ty:\n                    return step\n                for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n                    nx, ny = x + dx, y + dy\n                    if 0 <= nx < m and 0 <= ny < n and forest[nx][ny] > 0 and (nx, ny) not in visited:\n                        q.append((nx, ny))\n                        visited.add((nx, ny))\n            step += 1\n        return -1"}], "minimum-depth-of-binary-tree": [{"task_id": "minimum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def minDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        if not root.left:\n            return self.minDepth(root.right) + 1\n        if not root.right:\n            return self.minDepth(root.left) + 1\n        \n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1"}], "count-of-range-sum": [{"task_id": "count-of-range-sum", "completion": "class Solution(object):\n    def countRangeSum(self, nums, lower, upper):\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "arranging-coins": [{"task_id": "arranging-coins", "completion": "class Solution(object):\n    def arrangeCoins(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # return int((-1 + sqrt(1 + 8 * n)) / 2)\n        # return int((-1 + sqrt(1 + 8 * n)) / 2)\n        # return int((-1 + sqrt(1 + 8 * n)) / 2)\n        # return int((-1 + sqrt(1 + 8 * n)) / 2)\n        # return int((-1 + sqrt(1 + 8 * n)) / 2)\n        # return int((-1 + sqrt(1 + 8 * n)) / 2)\n        # return int((-1 + sqrt(1 + 8 * n)) / 2)\n        # return int((-1 + sqrt(1 + 8 * n)) / 2)\n        # return int((-1 + sqrt(1 + 8 * n)) / 2)\n        # return int((-1 + sqrt(1 + 8 * n)) / 2)\n        # return int((-1 + sqrt(1 + 8 * n)) / 2)\n        # return int((-1 + sqrt(1 + 8 * n)) / 2)\n        # return int((-1 + sqrt(1 + 8 * n)) / 2)\n        # return int((-1 + sqrt(1 + 8 * n)) / 2)\n        # return int((-1 + sqrt(1 + 8 * n)) / 2)\n        # return int((-1 + sqrt(1 + 8 * n)) / 2)\n        # return int((-1 + sqrt(1 + 8 * n)) / 2)\n        # return int((-1 + sqrt(1 + 8 * n)) / 2)\n        # return int((-1 + sqrt(1 + 8 * n)) / 2)\n        # return int((-1 + sqrt(1 + 8 * n)) / 2)\n        # return int((-1 + sqrt(1 + 8 * n)) / 2)\n        # return int((-1 + sqrt(1 + 8 * n)) / 2)\n        # return int((-1 + sqrt(1 + 8 * n)) / 2)\n        # return int((-1 + sqrt(1 + 8 * n)) / 2)\n        # return int((-1 + sqrt(1 + 8 * n)) / 2)\n        # return int((-1 + sqrt(1 + 8 * n)) / 2)\n        # return int((-1 + sqrt(1 + 8 * n)) / 2)\n        # return int((-1 + sqrt(1 + 8 * n)) / 2)\n        # return int((-1 + sqrt(1 + 8 * n)) / 2)\n        # return int((-1 + sqrt(1 + 8 * n)) / 2)\n        # return int((-1 + sqrt(1 + 8 * n)) / 2)\n        # return int((-1 + sqrt(1 + 8 * n)) / 2)\n        # return int((-1 + sqrt(1 + 8 * n)) / 2)\n        # return int((-1 + sqrt(1 + 8 * n)) / 2)\n        # return int((-1 + sqrt(1 + 8 * n)) / 2)\n        # return int((-1 + sqrt(1 + 8 * n)) / 2)\n        # return int((-1 + sqrt(1 + 8 * n)) / 2)\n        # return int((-1 + sqrt(1 + 8 * n)) / 2)\n        # return int((-1 + sqrt(1 + 8 * n)) / 2)\n        # return int((-1 + sqrt(1 + 8 * n)) / 2)\n        # return int((-1 + sqrt(1 + 8 * n)) / 2)\n        # return int((-1 + sqrt(1 + 8 * n)) / 2)\n        # return int((-1 + sqrt(1 + 8 * n)) / 2)\n        # return int((-1 + sqrt(1 + 8 * n)) / 2)\n        # return int((-1 + sqrt(1 + 8 * n)) / 2)\n        # return int((-1 + sqrt(1 + 8 * n)) / 2)\n        # return int((-1 + sqrt(1"}], "longest-uncommon-subsequence-i": [{"task_id": "longest-uncommon-subsequence-i", "completion": "class Solution(object):\n    def findLUSlength(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: int\n        \"\"\"\n        \n        if a == b:\n            return -1\n        else:\n            return max(len(a), len(b))"}], "binary-tree-level-order-traversal-ii": [{"task_id": "binary-tree-level-order-traversal-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        q = [root]\n        res = []\n        \n        while q:\n            res.append([node.val for node in q])\n            q = [child for node in q for child in (node.left, node.right) if child]\n        \n        return res[::-1]"}], "palindrome-number": [{"task_id": "palindrome-number", "completion": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        \n        if x < 0:\n            return False\n        \n        if x < 10:\n            return True\n        \n        if x % 10 == 0:\n            return False\n        \n        rev = 0\n        while x > rev:\n            rev = rev * 10 + x % 10\n            x = x // 10\n        \n        return x == rev or x == rev // 10"}], "decode-ways": [{"task_id": "decode-ways", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if not s or s[0] == '0':\n            return 0\n        \n        if len(s) == 1:\n            return 1\n        \n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 1 if s[0] != '0' else 0\n        \n        for i in range(2, len(s) + 1):\n            if s[i - 1] != '0':\n                dp[i] = dp[i - 1]\n            if s[i - 2] != '0' and int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        \n        return dp[-1]"}], "is-subsequence": [{"task_id": "is-subsequence", "completion": "class Solution(object):\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) == 0:\n            return True\n        if len(t) == 0:\n            return False\n        \n        i = 0\n        j = 0\n        \n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n            j += 1\n        \n        return i == len(s)"}], "gray-code": [{"task_id": "gray-code", "completion": "class Solution(object):\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. 2^n - 1\n}], "climbing-stairs": [{"task_id": "climbing-stairs", "completion": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        \n        a = 1\n        b = 2\n        for i in range(3, n+1):\n            c = a + b\n            a = b\n            b = c\n        return c"}], "word-break": [{"task_id": "word-break", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "validate-binary-search-tree": [{"task_id": "validate-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        # if root is None:\n        #     return True\n        \n        # if root.left is not None and root.left.val >= root.val:\n        #     return False\n        \n        # if root.right is not None and root.right.val <= root.val:\n        #     return False\n        \n        # return self.isValidBST(root.left) and self.isValidBST(root.right)\n        \n        # if root is None:\n        #     return True\n        \n        # return self.isValidBST(root.left, min_val=float('-inf'), max_val=float('inf')) and self.isValidBST(root.right, min_val=root.val, max_val=float('inf'))\n        \n        # return self.isValidBST(root, float('-inf'), float('inf'))\n        \n        # if root is None:\n        #     return True\n        \n        # return self.isValidBST(root.left, min_val=float('-inf'), max_val=root.val) and self.isValidBST(root.right, min_val=root.val, max_val=float('inf'))\n        \n        # if root is None:\n        #     return True\n        \n        # return self.isValidBST(root.left, min_val=float('-inf'), max_val=root.val) and self.isValidBST(root.right, min_val=root.val, max_val=float('inf'))\n        \n        # if root is None:\n        #     return True\n        \n        # return self.isValidBST(root.left, min_val=float('-inf'), max_val=root.val) and self.isValidBST(root.right, min_val=root.val, max_val=float('inf'))\n        \n        # if root is None:\n        #     return True\n        \n        # return self.isValidBST(root.left, min_val=float('-inf'), max_val=root.val) and self.isValidBST(root.right, min_val=root.val, max_val=float('inf'))\n        \n        # if root is None:\n        #     return True\n        \n        # return self.isValidBST(root.left, min_val=float('-inf'), max_val=root.val) and self.isValidBST(root.right, min_val=root.val, max_val=float('inf'))\n        \n        # if root is None:\n        #     return True\n        \n        # return self.isValidBST(root.left, min_val=float('-inf'), max_val=root.val) and self.isValidBST(root.right, min_val=root.val, max_val=float('inf'))\n        \n        # if root is None:\n        #     return True\n        \n        # return self.isValidBST(root.left, min_val=float('-inf'), max_val=root.val) and self.isValidBST(root.right, min_val=root.val, max_val=float('inf'))\n        \n        # if root is None:\n        #     return True\n        \n        # return self.isValidBST(root.left, min_val=float('-inf'), max_val=root.val) and self.isValidBST(root.right, min_val=root.val, max_val=float('inf'))\n        \n        # if root is None:\n        #     return True\n        \n        # return self.isValidBST(root.left, min_val=float('-inf'), max_val=root.val) and self.isValidBST(root.right, min_val=root.val, max_val=float('inf'))\n        \n        # if root is None:\n        #     return True\n        \n        # return self.isValidBST(root.left, min_val=float('-inf'), max_val=root.val) and self.isValidBST(root.right, min_val=root.val, max_val=float('inf'))\n        \n        # if root is None:\n        #     return True\n        \n        # return self.isValidBST(root.left, min_val=float('-inf'),"}], "insert-interval": [{"task_id": "insert-interval", "completion": "class Solution(object):\n    def insert(self, intervals, newInterval):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type newInterval: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # if the list is empty, return the new interval\n        if not intervals:\n            return [newInterval]\n        \n        # if the new interval is empty, return the original list\n        if not newInterval:\n            return intervals\n        \n        # if the new interval is larger than the last interval in the list, return the new interval\n        if newInterval[0] > intervals[-1][1]:\n            return [*intervals, newInterval]\n        \n        # if the new interval is smaller than the first interval in the list, return the new interval\n        if newInterval[1] < intervals[0][0]:\n            return [newInterval]\n        \n        # if the new interval overlaps with the first interval in the list, update the first interval\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            intervals[0] = newInterval\n            return intervals\n        \n        # if the new interval overlaps with the last interval in the list, update the last interval\n        if newInterval[0] >= intervals[-1][0] and newInterval[1] <= intervals[-1][1]:\n            intervals[-1] = newInterval\n            return intervals\n        \n        # if the new interval overlaps with the middle interval in the list, merge the intervals\n        for i in range(len(intervals)):\n            if newInterval[0] <= intervals[i][0] and newInterval[1] >= intervals[i][1]:\n                intervals[i] = newInterval\n                return intervals\n            \n            # if the new interval overlaps with the interval in the list, merge the intervals\n            if newInterval[0] <= intervals[i][1] and newInterval[1] >= intervals[i][0]:\n                intervals[i] = [min(newInterval[0], intervals[i][0]), max(newInterval[1], intervals[i][1])]\n                return intervals\n        \n        # if the new interval does not overlap with any interval in the list, insert the new interval\n        intervals.append(newInterval)\n        return intervals"}], "palindrome-partitioning": [{"task_id": "palindrome-partitioning", "completion": "class Solution(object):\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        if len(s) == 0:\n            return []\n        \n        if len(s) == 1:\n            return [[s]]\n        \n        res = []\n        for i in range(1, len(s) + 1):\n            if self.isPalindrome(s, 0, i - 1):\n                left = self.partition(s[i:])\n                for l in left:\n                    res.append([s[0:i]] + l)\n        return res\n    \n    def isPalindrome(self, s, l, r):\n        while l < r:\n            if s[l] != s[r]:\n                return False\n            l += 1\n            r -= 1\n        return True"}], "smallest-range-covering-elements-from-k-lists": [{"task_id": "smallest-range-covering-elements-from-k-lists", "completion": "class Solution(object):\n    def smallestRange(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. find the min and max of all the numbers in the first list\n        # 2. use a min heap to keep track of the min number in the heap\n        # 3. iterate through the rest of the lists\n        # 4. if the current number is greater than the min number in the heap, remove the min number from the heap\n        # 5. if the current number is greater than the max number in the heap, update the max number in the heap\n        # 6. if the max number in the heap is greater than the min number in the heap, update the range\n        \n        # 1. find the min and max of all the numbers in the first list\n        min_num = float('inf')\n        max_num = float('-inf')\n        for nums_list in nums:\n            for num in nums_list:\n                min_num = min(min_num, num)\n                max_num = max(max_num, num)\n        \n        # 2. use a min heap to keep track of the min number in the heap\n        heap = [(num, i) for i, nums_list in enumerate(nums) for num in nums_list]\n        heapq.heapify(heap)\n        \n        # 3. iterate through the rest of the lists\n        # 4. if the current number is greater than the min number in the heap, remove the min number from the heap\n        # 5. if the current number is greater than the max number in the heap, update the max number in the heap\n        # 6. if the max number in the heap is greater than the min number in the heap, update the range\n        range_min = min_num\n        range_max = max_num\n        while heap:\n            num, i = heapq.heappop(heap)\n            if num - min_num > max_num - num:\n                max_num = num\n            if num - min_num < range_max - range_min:\n                range_min = min_num\n                range_max = max_num\n        \n        return [range_min, range_max]"}], "poor-pigs": [{"task_id": "poor-pigs", "completion": "class Solution(object):\n    def poorPigs(self, buckets, minutesToDie, minutesToTest):\n        \"\"\"\n        :type buckets: int\n        :type minutesToDie: int\n        :type minutesToTest: int\n        :rtype: int\n        \"\"\"\n        \n        # 1000 buckets, 15 minutes, 30 minutes\n        # 1000 / 15 = 62.5\n        # 62.5 buckets, 15 minutes, 30 minutes\n        # 62.5 buckets, 15 minutes, 30 minutes\n        # 62.5 buckets, 15 minutes, 30 minutes\n        # 62.5 buckets, 15 minutes, 30 minutes\n        # 62.5 buckets, 15 minutes, 30 minutes\n        # 62.5 buckets, 15 minutes, 30 minutes\n        # 62.5 buckets, 15 minutes, 30 minutes\n        # 62.5 buckets, 15 minutes, 30 minutes\n        # 62.5 buckets, 15 minutes, 30 minutes\n        # 62.5 buckets, 15 minutes, 30 minutes\n        # 62.5 buckets, 15 minutes, 30 minutes\n        # 62.5 buckets, 15 minutes, 30 minutes\n        # 62.5 buckets, 15 minutes, 30 minutes\n        # 62.5 buckets, 15 minutes, 30 minutes\n        # 62.5 buckets, 15 minutes, 30 minutes\n        # 62.5 buckets, 15 minutes, 30 minutes\n        # 62.5 buckets, 15 minutes, 30 minutes\n        # 62.5 buckets, 15 minutes, 30 minutes\n        # 62.5 buckets, 15 minutes, 30 minutes\n        # 62.5 buckets, 15 minutes, 30 minutes\n        # 62.5 buckets, 15 minutes, 30 minutes\n        # 62.5 buckets, 15 minutes, 30 minutes\n        # 62.5 buckets, 15 minutes, 30 minutes\n        # 62.5 buckets, 15 minutes, 30 minutes\n        # 62.5 buckets, 15 minutes, 30 minutes\n        # 62.5 buckets, 15 minutes, 30 minutes\n        # 62.5 buckets, 15 minutes, 30 minutes\n        # 62.5 buckets, 15 minutes, 30 minutes\n        # 62.5 buckets, 15 minutes, 30 minutes\n        # 62.5 buckets, 15 minutes, 30 minutes\n        # 62.5 buckets, 15 minutes, 30 minutes\n        # 62.5 buckets, 15 minutes, 30 minutes\n        # 62.5 buckets, 15 minutes, 30 minutes\n        # 62.5 buckets, 15 minutes, 30 minutes\n        # 62.5 buckets, 15 minutes, 30 minutes\n        # 62.5 buckets, 15 minutes, 30 minutes\n        # 62.5 buckets, 15 minutes, 30 minutes\n        # 62.5 buckets, 15 minutes, 30 minutes\n        # 62.5 buckets, 15 minutes, 30 minutes\n        # 62.5 buckets, 15 minutes, 30 minutes\n        # 62.5 buckets, 15 minutes, 30 minutes\n        # 62.5 buckets, 15 minutes, 30 minutes\n        # 62.5 buckets, 15 minutes, 30 minutes\n        # 62.5 buckets, 15 minutes, 30 minutes\n        # 62.5 buckets, 15 minutes, 30 minutes\n        # 62.5 buckets, 15 minutes, 30 minutes\n        # 62.5 buckets, 15 minutes, 30 minutes\n        # 62.5 buckets, 15 minutes, 30 minutes\n        # 62.5 buckets, 15 minutes, 30 minutes\n        # 62.5"}], "swim-in-rising-water": [{"task_id": "swim-in-rising-water", "completion": "class Solution(object):\n    def swimInWater(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        if n == 1:\n            return grid[0][0]\n        \n        # build a min heap\n        heap = [(grid[0][0], 0, 0)]\n        visited = set()\n        visited.add((0, 0))\n        ans = 0\n        \n        while heap:\n            # get the min element\n            curr_time, x, y = heapq.heappop(heap)\n            ans = max(ans, curr_time)\n            \n            if x == n - 1 and y == n - 1:\n                return ans\n            \n            for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                nx, ny = x + dx, y + dy\n                if nx < 0 or nx >= n or ny < 0 or ny >= n or (nx, ny) in visited:\n                    continue\n                heapq.heappush(heap, (grid[nx][ny], nx, ny))\n                visited.add((nx, ny))\n                \n        return ans"}], "unique-paths": [{"task_id": "unique-paths", "completion": "class Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # if m == 1 or n == 1:\n        #     return 1\n        # if m == 2 and n == 2:\n        #     return 2\n        # if m == 3 and n == 3:\n        #     return 3\n        # if m == 4 and n == 4:\n        #     return 10\n        # if m == 5 and n == 5:\n        #     return 42\n        # if m == 6 and n == 6:\n        #     return 132\n        # if m == 7 and n == 7:\n        #     return 429\n        # if m == 8 and n == 8:\n        #     return 1430\n        # if m == 9 and n == 9:\n        #     return 4862\n        # if m == 10 and n == 10:\n        #     return 16796\n        # if m == 11 and n == 11:\n        #     return 48620\n        # if m == 12 and n == 12:\n        #     return 176726\n        # if m == 13 and n == 13:\n        #     return 585905\n        # if m == 14 and n == 14:\n        #     return 2080161\n        # if m == 15 and n == 15:\n        #     return 7444670\n        # if m == 16 and n == 16:\n        #     return 26527320\n        # if m == 17 and n == 17:\n        #     return 96948455\n        # if m == 18 and n == 18:\n        #     return 387420486\n        # if m == 19 and n == 19:\n        #     return 1258291220\n        # if m == 20 and n == 20:\n        #     return 4861901084\n        # if m == 21 and n == 21:\n        #     return 18578062040\n        # if m == 22 and n == 22:\n        #     return 66290608000\n        # if m == 23 and n == 23:\n        #     return 267914296000\n        # if m == 24 and n == 24:\n        #     return 1033018560000\n        # if m == 25 and n == 25:\n        #     return 3874204860000\n        # if m == 26 and n == 26:\n        #     return 12582912200000\n        # if m == 27 and n == 27:\n        #     return 48619010840000\n        # if m == 28 and n == 28:\n        #     return 185780620400000\n        # if m == 29 and n == 29:\n        #     return 66290608000000\n        # if m == 30 and n == 30:\n        #     return 267914296000000\n        # if m == 31 and n == 31:\n        #     return 1033018560000000\n        # if m == 32 and n == 32:\n        #     return 3874204860000000\n        # if m == 33 and n == 33:\n        #     return 12582912200000000\n        # if m == 34 and n == 34:\n        #     return 48619010840000000\n        # if m == 35 and n == 35:\n        #     return 185780620400000000\n        # if m == 36 and n == 36:\n        #     return 66290"}], "multiply-strings": [{"task_id": "multiply-strings", "completion": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        if num1 == \"0\" or num2 == \"0\":\n            return \"0\"\n        \n        num1 = num1[::-1]\n        num2 = num2[::-1]\n        \n        res = [0] * (len(num1) + len(num2))\n        \n        for i in range(len(num1)):\n            for j in range(len(num2)):\n                res[i+j] += int(num1[i]) * int(num2[j])\n        \n        for i in range(len(res)-1):\n            res[i+1] += res[i] // 10\n            res[i] = res[i] % 10\n        \n        res = res[::-1]\n        \n        i = 0\n        while i < len(res) and res[i] == 0:\n            i += 1\n        \n        return str(res[i:])"}], "best-time-to-buy-and-sell-stock-iii": [{"task_id": "best-time-to-buy-and-sell-stock-iii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## 1. \n        ## 2. \n        ## 3. \n        ## 4. \n        ## 5. \n        ## 6. \n        ## 7. \n        ## 8. \n        ## 9. \n        ## 10. \n        ## 11. \n        ## 12. \n        ## 13. \n        ## 14. \n        ## 15. \n        ## 16. \n        ## 17. \n        ## 18. \n        ## 19. \n        ## 20. \n        ## 21. \n        ## 22. \n        ## 23. \n        ## 24. \n        ## 25. \n        ## 26. \n        ## 27. \n        ## 28. \n        ## 29. \n        ## 30. \n        ## 31. \n        ## 32. \n        ## 33. \n        ## 34. \n        ## 35. \n        ## 36. \n        ## 37. \n        ## 38. \n        ## 39. \n        ## 40. \n        ## 41. \n        ## 42. \n        ## 43. \n        ## 44. \n        ## 45. \n        ## 46. \n        ## 47. \n        ## 48. \n        ## 49. \n        ## 50. \n        ## 51. \n        ## 52. \n        ## 53. \n        ## 54. \n        ## 55. \n        ## 56. \n        ## 57. \n        ## 58. \n        ## 59. \n        ## 60. \n        ## 61. \n        ## 62. \n        ## 63. \n        ## 64. \n        ## 65. \n        ## 66. \n        ## 67. \n        ## 68. \n        ## 69. \n        ## 70. \n        ## 71. \n        ## 72. \n        ## 73. \n        ## 74. \n        ## 75. \n        ## 76. \n        ## 77. \n        ## 78. \n        ## 79. \n        ## 80. \n        ## 81. \n        ## 82. \n        ## 83. \n        ## 84. \n        ## 85. \n        ## 86. \n        ## 87. \n        ## 88. \n        ## 89. \n        ## 90. \n        ## 91. \n        ## 92. \n        ## 93. \n        ## 94. \n        ## 95. \n        ## 96. \n        ## 97. \n        ## 98. \n        ## 99. \n        ## 100. \n        ## 101. \n        ## 102. \n        ## 103. \n        ## 104. \n        ## 105. \n        ## 106. \n        ## 107. \n        ## 108. \n        ## 109. \n        ## 110. \n        ## 111. \n        ## 112. \n        ## 113. \n        #"}], "combination-sum-ii": [{"task_id": "combination-sum-ii", "completion": "class Solution(object):\n    def combinationSum2(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # sort the array\n        candidates.sort()\n        \n        # initialize the result\n        result = []\n        \n        # initialize the current combination\n        current = []\n        \n        # initialize the current sum\n        current_sum = 0\n        \n        # initialize the current index\n        current_index = 0\n        \n        # iterate over the candidates\n        for i in range(len(candidates)):\n            \n            # if the current sum is greater than the target, break\n            if current_sum > target:\n                break\n            \n            # if the current sum is equal to the target, add the current combination to the result\n            if current_sum == target:\n                result.append(current[:])\n                break\n            \n            # if the current index is greater than the current sum, break\n            if i > current_index and candidates[i] == candidates[i - 1]:\n                continue\n            \n            # add the current candidate to the current combination\n            current.append(candidates[i])\n            \n            # update the current sum\n            current_sum += candidates[i]\n            \n            # update the current index\n            current_index = i\n            \n            # recursively call the function with the next index\n            self.combinationSum2(candidates, target, current, i + 1, current_sum, result)\n            \n            # remove the last element from the current combination\n            current.pop()\n            \n            # update the current sum\n            current_sum -= candidates[i]\n            \n        return result\n    \n    def combinationSum2(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # sort the array\n        candidates.sort()\n        \n        # initialize the result\n        result = []\n        \n        # initialize the current combination\n        current = []\n        \n        # initialize the current sum\n        current_sum = 0\n        \n        # initialize the current index\n        current_index = 0\n        \n        # iterate over the candidates\n        for i in range(len(candidates)):\n            \n            # if the current sum is greater than the target, break\n            if current_sum > target:\n                break\n            \n            # if the current sum is equal to the target, add the current combination to the result\n            if current_sum == target:\n                result.append(current[:])\n                break\n            \n            # if the current index is greater than the current sum, break\n            if i > current_index and candidates[i] == candidates[i - 1]:\n                continue\n            \n            # add the current candidate to the current combination\n            current.append(candidates[i])\n            \n            # update the current sum\n            current_sum += candidates[i]\n            \n            # update the current index\n            current_index = i\n            \n            # recursively call the function with the next index\n            self.combinationSum2(candidates, target, current, i + 1, current_sum, result)\n            \n            # remove the last element from the current combination\n            current.pop()\n            \n            # update the current sum\n            current_sum -= candidates[i]\n            \n        return result"}], "detect-capital": [{"task_id": "detect-capital", "completion": "class Solution(object):\n    def detectCapitalUse(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(word) == 1:\n            return True\n        \n        if word[0].isupper() and word[1].islower():\n            return True\n        \n        if word[0].islower() and word[1].isupper():\n            return False\n        \n        if word[0].isupper() and word[1].isupper():\n            for i in range(2, len(word)):\n                if word[i].islower():\n                    return False\n            return True\n        \n        return False"}], "best-time-to-buy-and-sell-stock": [{"task_id": "best-time-to-buy-and-sell-stock", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## 1. \n        ## 2. \n        ## 3. \n        ## 4. \n        ## 5. \n        ## 6. \n        ## 7. \n        ## 8. \n        ## 9. \n        ## 10. \n        ## 11. \n        ## 12. \n        ## 13. \n        ## 14. \n        ## 15. \n        ## 16. \n        ## 17. \n        ## 18. \n        ## 19. \n        ## 20. \n        ## 21. \n        ## 22. \n        ## 23. \n        ## 24. \n        ## 25. \n        ## 26. \n        ## 27. \n        ## 28. \n        ## 29. \n        ## 30. \n        ## 31. \n        ## 32. \n        ## 33. \n        ## 34. \n        ## 35. \n        ## 36. \n        ## 37. \n        ## 38. \n        ## 39. \n        ## 40. \n        ## 41. \n        ## 42. \n        ## 43. \n        ## 44. \n        ## 45. \n        ## 46. \n        ## 47. \n        ## 48. \n        ## 49. \n        ## 50. \n        ## 51. \n        ## 52. \n        ## 53. \n        ## 54. \n        ## 55. \n        ## 56. \n        ## 57. \n        ## 58. \n        ## 59. \n        ## 60. \n        ## 61. \n        ## 62. \n        ## 63. \n        ## 64. \n        ## 65. \n        ## 66. \n        ## 67. \n        ## 68. \n        ## 69. \n        ## 70. \n        ## 71. \n        ## 72. \n        ## 73. \n        ## 74. \n        ## 75. \n        ## 76. \n        ## 77. \n        ## 78. \n        ## 79. \n        ## 80. \n        ## 81. \n        ## 82. \n        ## 83. \n        ## 84. \n        ## 85. \n        ## 86. \n        ## 87. \n        ## 88. \n        ## 89. \n        ## 90. \n        ## 91. \n        ## 92. \n        ## 93. \n        ## 94. \n        ## 95. \n        ## 96. \n        ## 97. \n        ## 98. \n        ## 99. \n        ## 100. \n        ## 101. \n        ## 102. \n        ## 103. \n        ## 104. \n        ## 105. \n        ## 106. \n        ## 107. \n        ## 108. \n        ## 109. \n        ## 110. \n        ## 111. \n        ## 112. \n        ## 113. \n        #"}], "binary-tree-inorder-traversal": [{"task_id": "binary-tree-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        # Iterative solution\n        # if root is None:\n        #     return []\n        # stack = []\n        # res = []\n        # while root or stack:\n        #     while root:\n        #         stack.append(root)\n        #         root = root.left\n        #     root = stack.pop()\n        #     res.append(root.val)\n        #     root = root.right\n        # return res\n        \n        # Recursive solution\n        if root is None:\n            return []\n        return self.inorderTraversal(root.left) + [root.val] + self.inorderTraversal(root.right)"}], "construct-binary-tree-from-preorder-and-inorder-traversal": [{"task_id": "construct-binary-tree-from-preorder-and-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not preorder:\n            return None\n        \n        root = TreeNode(preorder[0])\n        root_index = inorder.index(preorder[0])\n        \n        left_preorder = preorder[1:root_index+1]\n        right_preorder = preorder[root_index+1:]\n        \n        left_inorder = inorder[0:root_index]\n        right_inorder = inorder[root_index+1:]\n        \n        root.left = self.buildTree(left_preorder, left_inorder)\n        root.right = self.buildTree(right_preorder, right_inorder)\n        \n        return root"}], "remove-invalid-parentheses": [{"task_id": "remove-invalid-parentheses", "completion": "class Solution(object):\n    def removeInvalidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. find the left and right parentheses\n        # 2. find the number of left and right parentheses\n        # 3. find the number of left and right parentheses\n        # 4. find the number of left and right parentheses\n        # 5. find the number of left and right parentheses\n        # 6. find the number of left and right parentheses\n        # 7. find the number of left and right parentheses\n        # 8. find the number of left and right parentheses\n        # 9. find the number of left and right parentheses\n        # 10. find the number of left and right parentheses\n        # 11. find the number of left and right parentheses\n        # 12. find the number of left and right parentheses\n        # 13. find the number of left and right parentheses\n        # 14. find the number of left and right parentheses\n        # 15. find the number of left and right parentheses\n        # 16. find the number of left and right parentheses\n        # 17. find the number of left and right parentheses\n        # 18. find the number of left and right parentheses\n        # 19. find the number of left and right parentheses\n        # 20. find the number of left and right parentheses\n        # 21. find the number of left and right parentheses\n        # 22. find the number of left and right parentheses\n        # 23. find the number of left and right parentheses\n        # 24. find the number of left and right parentheses\n        # 25. find the number of left and right parentheses\n        # 26. find the number of left and right parentheses\n        # 27. find the number of left and right parentheses\n        # 28. find the number of left and right parentheses\n        # 29. find the number of left and right parentheses\n        # 30. find the number of left and right parentheses\n        # 31. find the number of left and right parentheses\n        # 32. find the number of left and right parentheses\n        # 33. find the number of left and right parentheses\n        # 34. find the number of left and right parentheses\n        # 35. find the number of left and right parentheses\n        # 36. find the number of left and right parentheses\n        # 37. find the number of left and right parentheses\n        # 38. find the number of left and right parentheses\n        # 39. find the number of left and right parentheses\n        # 40. find the number of left and right parentheses\n        # 41. find the number of left and right parentheses\n        # 42. find the number of left and right parentheses\n        # 43. find the number of left and right parentheses\n        # 44. find the number of left and right parentheses\n        # 45. find the number of left and right parentheses\n        # 46. find the number of left and right parentheses\n        # 47. find the number of left and right parentheses\n        # 48. find the number of left and right parentheses\n        # 49. find the number of left and right parentheses\n        # 50. find the number of left and right parentheses\n        # 51. find the number of left and right parentheses\n        # 52. find the number of left and right parentheses\n        # 53. find the number of left and right parentheses\n        # 54. find the number of left and right parentheses\n        # 55. find the number of left and right parentheses\n        # 56. find the number of left and right parentheses\n        # 57. find the number of left and right parentheses\n        # 58. find the number of left and right parentheses\n        # 59. find the number of left and right parentheses\n        # 60. find the number of left and right parentheses\n        # 61. find the number of left and right parenthes"}], "merge-k-sorted-lists": [{"task_id": "merge-k-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        \n        if not lists:\n            return None\n        \n        # find the smallest node\n        smallest = min(lists, key=lambda x: x.val if x else float('inf'))\n        \n        # if smallest is None, return None\n        if not smallest:\n            return None\n        \n        # remove the smallest node from the list\n        lists.remove(smallest)\n        \n        # recursively merge the remaining lists\n        smallest.next = self.mergeKLists(lists)\n        \n        return smallest"}], "palindrome-partitioning-ii": [{"task_id": "palindrome-partitioning-ii", "completion": "class Solution(object):\n    def minCut(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "preimage-size-of-factorial-zeroes-function": [{"task_id": "preimage-size-of-factorial-zeroes-function", "completion": "class Solution(object):\n    def preimageSizeFZF(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. find the first 5\n        # 2. find the first 5^2\n        # 3. find the first 5^3\n        # 4. find the first 5^4\n        # 5. find the first 5^5\n        # 6. find the first 5^6\n        # 7. find the first 5^7\n        # 8. find the first 5^8\n        # 9. find the first 5^9\n        # 10. find the first 5^10\n        # 11. find the first 5^11\n        # 12. find the first 5^12\n        # 13. find the first 5^13\n        # 14. find the first 5^14\n        # 15. find the first 5^15\n        # 16. find the first 5^16\n        # 17. find the first 5^17\n        # 18. find the first 5^18\n        # 19. find the first 5^19\n        # 20. find the first 5^20\n        # 21. find the first 5^21\n        # 22. find the first 5^22\n        # 23. find the first 5^23\n        # 24. find the first 5^24\n        # 25. find the first 5^25\n        # 26. find the first 5^26\n        # 27. find the first 5^27\n        # 28. find the first 5^28\n        # 29. find the first 5^29\n        # 30. find the first 5^30\n        # 31. find the first 5^31\n        # 32. find the first 5^32\n        # 33. find the first 5^33\n        # 34. find the first 5^34\n        # 35. find the first 5^35\n        # 36. find the first 5^36\n        # 37. find the first 5^37\n        # 38. find the first 5^38\n        # 39. find the first 5^39\n        # 40. find the first 5^40\n        # 41. find the first 5^41\n        # 42. find the first 5^42\n        # 43. find the first 5^43\n        # 44. find the first 5^44\n        # 45. find the first 5^45\n        # 46. find the first 5^46\n        # 47. find the first 5^47\n        # 48. find the first 5^48\n        # 49. find the first 5^49\n        # 50. find the first 5^50\n        # 51. find the first 5^51\n        # 52. find the first 5^52\n        # 53. find the first 5^53\n        # 54. find the first 5^54\n        # 55. find the first 5^55\n        # 56. find the first 5^56\n        # 57. find the first 5^57\n        # 58. find the first 5^58\n        # 59. find the first 5^59\n        # 60. find the first 5^60\n        # 61. find the first 5^61\n        # 62. find the first 5^62\n        # 63. find the first 5^63\n        # 64. find the first 5^64\n        # 65. find the first 5^65\n        # 66. find the first 5^66\n        # 67. find the first 5^67\n        # 68. find the first 5^68\n        # 69. find the first 5^69\n        # 70. find the first"}], "palindrome-pairs": [{"task_id": "palindrome-pairs", "completion": "class Solution(object):\n    def palindromePairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # create a hashmap to store the words\n        word_map = {word: i for i, word in enumerate(words)}\n        \n        # create a result list\n        result = []\n        \n        # iterate over the words\n        for word, index in word_map.items():\n            # reverse the word\n            reverse_word = word[::-1]\n            \n            # check if the reverse word is in the hashmap\n            if reverse_word in word_map and index != word_map[reverse_word]:\n                # add the index of the reverse word to the result\n                result.append([index, word_map[reverse_word]])\n            \n            # check if the word is a palindrome\n            if word in word_map and index == 0:\n                # add the index of the word to the result\n                result.append([index, word_map[word]])\n            \n            # check if the reverse word is a palindrome\n            if word in word_map and index != 0:\n                # add the index of the word to the result\n                result.append([word_map[word], index])\n        \n        return result"}], "convert-sorted-array-to-binary-search-tree": [{"task_id": "convert-sorted-array-to-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedArrayToBST(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not nums:\n            return None\n        \n        if len(nums) == 1:\n            return TreeNode(nums[0])\n        \n        mid = len(nums) // 2\n        root = TreeNode(nums[mid])\n        root.left = self.sortedArrayToBST(nums[:mid])\n        root.right = self.sortedArrayToBST(nums[mid+1:])\n        \n        return root"}], "contain-virus": [{"task_id": "contain-virus", "completion": "class Solution(object):\n    def containVirus(self, isInfected):\n        \"\"\"\n        :type isInfected: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u8ba1\u7b97\u611f\u67d3\u533a\u57df\u7684\u4e2a\u6570\n        # 2. \u8ba1\u7b97\u611f\u67d3\u533a\u57df\u7684\u8fb9\u754c\n        # 3. \u611f\u67d3\u533a\u57df\u7684\u8fb9\u754c\u4e0a\uff0c\u5982\u679c\u6709\u5899\uff0c\u5219\u5899\u7684\u4e2a\u6570+1\n        # 4. \u611f\u67d3\u533a\u57df\u7684\u8fb9\u754c\u4e0a\uff0c\u5982\u679c\u6ca1\u6709\u5899\uff0c\u5219\u5899\u7684\u4e2a\u6570+2\n        # 5. \u611f\u67d3\u533a\u57df\u7684\u8fb9\u754c\u4e0a\uff0c\u5982\u679c\u5899\u7684\u4e2a\u6570>\u611f\u67d3\u533a\u57df\u7684\u4e2a\u6570\uff0c\u5219\u5899\u7684\u4e2a\u6570-1\n        # 6. \u611f\u67d3\u533a\u57df\u7684\u8fb9\u754c\u4e0a\uff0c\u5982\u679c\u5899\u7684\u4e2a\u6570<=\u611f\u67d3\u533a\u57df\u7684\u4e2a\u6570\uff0c\u5219\u5899\u7684\u4e2a\u6570-2\n        # 7. \u611f\u67d3\u533a\u57df\u7684\u8fb9\u754c\u4e0a\uff0c\u5982\u679c\u5899\u7684\u4e2a\u6570=\u611f\u67d3\u533a\u57df\u7684\u4e2a\u6570\uff0c\u5219\u5899\u7684\u4e2a\u6570-3\n        # 8. \u611f\u67d3\u533a\u57df\u7684\u8fb9\u754c\u4e0a\uff0c\u5982\u679c\u5899\u7684\u4e2a\u6570=\u611f\u67d3\u533a\u57df\u7684\u4e2a\u6570-1\uff0c\u5219\u5899\u7684\u4e2a\u6570-2\n        # 9. \u611f\u67d3\u533a\u57df\u7684\u8fb9\u754c\u4e0a\uff0c\u5982\u679c\u5899\u7684\u4e2a\u6570=\u611f\u67d3\u533a\u57df\u7684\u4e2a\u6570-2\uff0c\u5219\u5899\u7684\u4e2a\u6570-1\n        # 10. \u611f\u67d3\u533a\u57df\u7684\u8fb9\u754c\u4e0a\uff0c\u5982\u679c\u5899\u7684\u4e2a\u6570=\u611f\u67d3\u533a\u57df\u7684\u4e2a\u6570-3\uff0c\u5219\u5899\u7684\u4e2a\u6570-1\n        # 11. \u611f\u67d3\u533a\u57df\u7684\u8fb9\u754c\u4e0a\uff0c\u5982\u679c\u5899\u7684\u4e2a\u6570=\u611f\u67d3\u533a\u57df\u7684\u4e2a\u6570-4\uff0c\u5219\u5899\u7684\u4e2a\u6570-1\n        # 12. \u611f\u67d3\u533a\u57df\u7684\u8fb9\u754c\u4e0a\uff0c\u5982\u679c\u5899\u7684\u4e2a\u6570=\u611f\u67d3\u533a\u57df\u7684\u4e2a\u6570-5\uff0c\u5219\u5899\u7684\u4e2a\u6570-1\n        # 13. \u611f\u67d3\u533a\u57df\u7684\u8fb9\u754c\u4e0a\uff0c\u5982\u679c\u5899\u7684\u4e2a\u6570=\u611f\u67d3\u533a\u57df\u7684\u4e2a\u6570-6\uff0c\u5219\u5899\u7684\u4e2a\u6570-1\n        # 14. \u611f\u67d3\u533a\u57df\u7684\u8fb9\u754c\u4e0a\uff0c\u5982\u679c\u5899\u7684\u4e2a\u6570=\u611f\u67d3\u533a\u57df\u7684\u4e2a\u6570-7\uff0c\u5219\u5899\u7684\u4e2a\u6570-1\n        # 15. \u611f\u67d3\u533a\u57df\u7684\u8fb9\u754c\u4e0a\uff0c\u5982\u679c\u5899\u7684\u4e2a\u6570=\u611f\u67d3\u533a\u57df\u7684\u4e2a\u6570-8\uff0c\u5219\u5899\u7684\u4e2a\u6570-1\n        # 16. \u611f\u67d3\u533a\u57df\u7684\u8fb9\u754c\u4e0a\uff0c\u5982\u679c\u5899\u7684\u4e2a\u6570=\u611f\u67d3\u533a\u57df\u7684\u4e2a\u6570-9\uff0c\u5219\u5899\u7684\u4e2a\u6570-1\n        # 17. \u611f\u67d3\u533a\u57df\u7684\u8fb9\u754c\u4e0a\uff0c\u5982\u679c\u5899\u7684\u4e2a\u6570=\u611f\u67d3\u533a\u57df\u7684\u4e2a\u6570-10\uff0c\u5219\u5899\u7684\u4e2a\u6570-1\n        # 18. \u611f\u67d3\u533a\u57df\u7684\u8fb9\u754c\u4e0a\uff0c\u5982\u679c\u5899\u7684\u4e2a\u6570=\u611f\u67d3\u533a\u57df\u7684\u4e2a\u6570-11\uff0c\u5219\u5899\u7684\u4e2a\u6570-1\n        # 19. \u611f\u67d3\u533a\u57df\u7684\u8fb9\u754c\u4e0a\uff0c\u5982\u679c\u5899\u7684\u4e2a\u6570=\u611f\u67d3\u533a\u57df\u7684\u4e2a\u6570-12\uff0c\u5219\u5899\u7684\u4e2a\u6570-1\n        # 20. \u611f\u67d3\u533a\u57df\u7684\u8fb9\u754c\u4e0a\uff0c\u5982\u679c\u5899\u7684\u4e2a\u6570=\u611f\u67d3\u533a\u57df\u7684\u4e2a\u6570-13\uff0c\u5219\u5899\u7684\u4e2a\u6570-1\n        # 21. \u611f\u67d3\u533a\u57df\u7684\u8fb9\u754c\u4e0a\uff0c\u5982\u679c\u5899\u7684\u4e2a\u6570=\u611f\u67d3\u533a\u57df\u7684\u4e2a\u6570-14\uff0c\u5219\u5899\u7684\u4e2a\u6570-1\n        # 22. \u611f\u67d3\u533a\u57df\u7684\u8fb9\u754c\u4e0a\uff0c\u5982\u679c\u5899\u7684\u4e2a\u6570=\u611f\u67d3\u533a\u57df\u7684\u4e2a\u6570-15\uff0c\u5219\u5899\u7684\u4e2a\u6570-1\n        # 23. \u611f\u67d3\u533a\u57df\u7684\u8fb9\u754c\u4e0a\uff0c\u5982\u679c\u5899\u7684\u4e2a\u6570=\u611f\u67d3\u533a\u57df\u7684\u4e2a\u6570-16\uff0c\u5219\u5899\u7684\u4e2a\u6570-1\n        # 24. \u611f\u67d3\u533a\u57df\u7684\u8fb9\u754c\u4e0a\uff0c\u5982\u679c\u5899\u7684\u4e2a\u6570=\u611f\u67d3\u533a\u57df\u7684\u4e2a\u6570-17\uff0c\u5219\u5899\u7684\u4e2a\u6570-1\n        # 25. \u611f\u67d3\u533a\u57df\u7684\u8fb9\u754c\u4e0a\uff0c\u5982\u679c\u5899\u7684\u4e2a\u6570=\u611f\u67d3\u533a\u57df\u7684\u4e2a\u6570-18\uff0c\u5219\u5899\u7684\u4e2a\u6570-1\n        # 26. \u611f\u67d3\u533a\u57df\u7684\u8fb9\u754c\u4e0a\uff0c\u5982\u679c\u5899\u7684\u4e2a\u6570=\u611f\u67d3\u533a\u57df\u7684\u4e2a\u6570-19\uff0c\u5219\u5899\u7684\u4e2a\u6570-1\n        # 27. \u611f\u67d3\u533a\u57df\u7684\u8fb9\u754c\u4e0a\uff0c\u5982\u679c\u5899\u7684\u4e2a\u6570=\u611f\u67d3\u533a\u57df\u7684\u4e2a\u6570-20\uff0c\u5219\u5899\u7684\u4e2a\u6570-1\n        # 28. \u611f\u67d3\u533a\u57df\u7684\u8fb9\u754c\u4e0a\uff0c\u5982\u679c\u5899\u7684\u4e2a\u6570=\u611f\u67d3\u533a\u57df\u7684\u4e2a\u6570-21\uff0c\u5219\u5899\u7684\u4e2a\u6570-1\n        # 29. \u611f\u67d3\u533a\u57df\u7684\u8fb9\u754c\u4e0a\uff0c\u5982\u679c\u5899\u7684\u4e2a\u6570=\u611f\u67d3\u533a\u57df\u7684\u4e2a\u6570-22\uff0c\u5219\u5899\u7684\u4e2a\u6570-1\n        # 30. \u611f\u67d3\u533a\u57df\u7684\u8fb9\u754c\u4e0a\uff0c\u5982\u679c\u5899\u7684\u4e2a\u6570=\u611f\u67d3\u533a\u57df\u7684\u4e2a\u6570-23\uff0c\u5219\u5899\u7684\u4e2a\u6570-1\n        # 31. \u611f\u67d3"}], "longest-increasing-path-in-a-matrix": [{"task_id": "longest-increasing-path-in-a-matrix", "completion": "class Solution(object):\n    def longestIncreasingPath(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        max_len = 0\n        \n        for i in range(m):\n            for j in range(n):\n                max_len = max(max_len, self.dfs(matrix, dp, i, j))\n        \n        return max_len\n    \n    def dfs(self, matrix, dp, i, j):\n        if dp[i][j] != 0:\n            return dp[i][j]\n        \n        m, n = len(matrix), len(matrix[0])\n        dirs = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n        max_len = 1\n        \n        for d in dirs:\n            x, y = i + d[0], j + d[1]\n            if 0 <= x < m and 0 <= y < n and matrix[x][y] > matrix[i][j]:\n                max_len = max(max_len, 1 + self.dfs(matrix, dp, x, y))\n        \n        dp[i][j] = max_len\n        return max_len"}], "number-of-digit-one": [{"task_id": "number-of-digit-one", "completion": "class Solution(object):\n    def countDigitOne(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n < 1:\n            return 0\n        \n        if n < 10:\n            return 1\n        \n        if n < 100:\n            return 10\n        \n        if n < 1000:\n            return 100\n        \n        if n < 10000:\n            return 1000\n        \n        if n < 100000:\n            return 10000\n        \n        if n < 1000000:\n            return 100000\n        \n        if n < 10000000:\n            return 1000000\n        \n        if n < 100000000:\n            return 10000000\n        \n        if n < 1000000000:\n            return 100000000\n        \n        if n < 10000000000:\n            return 1000000000\n        \n        if n < 100000000000:\n            return 10000000000\n        \n        if n < 1000000000000:\n            return 100000000000\n        \n        if n < 10000000000000:\n            return 1000000000000\n        \n        if n < 100000000000000:\n            return 10000000000000\n        \n        if n < 1000000000000000:\n            return 100000000000000\n        \n        if n < 10000000000000000:\n            return 1000000000000000\n        \n        if n < 100000000000000000:\n            return 10000000000000000\n        \n        if n < 1000000000000000000:\n            return 100000000000000000\n        \n        if n < 10000000000000000000:\n            return 1000000000000000000\n        \n        if n < 100000000000000000000:\n            return 10000000000000000000\n        \n        if n < 1000000000000000000000:\n            return 100000000000000000000\n        \n        if n < 10000000000000000000000:\n            return 1000000000000000000000\n        \n        if n < 100000000000000000000000:\n            return 10000000000000000000000\n        \n        if n < 1000000000000000000000000:\n            return 100000000000000000000000\n        \n        if n < 10000000000000000000000000:\n            return 1000000000000000000000000\n        \n        if n < 100000000000000000000000000:\n            return"}], "word-break-ii": [{"task_id": "word-break-ii", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "binary-tree-zigzag-level-order-traversal": [{"task_id": "binary-tree-zigzag-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def zigzagLevelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        leftToRight = True\n        \n        while queue:\n            level = []\n            for _ in range(len(queue)):\n                node = queue.pop(0)\n                if leftToRight:\n                    level.append(node.val)\n                else:\n                    level.insert(0, node.val)\n                \n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            \n            result.append(level)\n            leftToRight = not leftToRight\n        \n        return result"}], "binary-watch": [{"task_id": "binary-watch", "completion": "class Solution(object):\n    def readBinaryWatch(self, turnedOn):\n        \"\"\"\n        :type turnedOn: int\n        :rtype: List[str]\n        \"\"\"\n        \n        if turnedOn > 8:\n            return []\n        \n        if turnedOn == 0:\n            return [\"0:00\"]\n        \n        if turnedOn == 1:\n            return [\"1:00\", \"2:00\", \"4:00\", \"8:00\", \"0:32\", \"0:48\", \"0:56\", \"0:64\", \"0:80\", \"0:96\", \"0:112\", \"0:128\", \"0:144\", \"0:160\", \"0:176\", \"0:192\", \"0:208\", \"0:224\", \"0:240\", \"0:256\", \"0:272\", \"0:288\", \"0:304\", \"0:320\", \"0:336\", \"0:352\", \"0:368\", \"0:384\", \"0:400\", \"0:416\", \"0:432\", \"0:448\", \"0:464\", \"0:480\", \"0:496\", \"0:512\", \"0:528\", \"0:544\", \"0:560\", \"0:576\", \"0:592\", \"0:608\", \"0:624\", \"0:640\", \"0:656\", \"0:672\", \"0:688\", \"0:704\", \"0:720\", \"0:736\", \"0:752\", \"0:768\", \"0:784\", \"0:800\", \"0:816\", \"0:832\", \"0:848\", \"0:864\", \"0:880\", \"0:896\", \"0:912\", \"0:928\", \"0:944\", \"0:960\", \"0:976\", \"0:992\"]\n        \n        if turnedOn == 2:\n            return [\"0:032\", \"0:064\", \"0:096\", \"0:128\", \"0:160\", \"0:192\", \"0:224\", \"0:256\", \"0:288\", \"0:320\", \"0:352\", \"0:384\", \"0:416\", \"0:448\", \"0:480\", \"0:512\", \"0:544\", \"0:576\", \"0:608\", \"0:640\", \"0:672\", \"0:704\", \"0:736\", \"0:768\", \"0:800\", \"0:832\", \"0:864\", \"0:896\", \"0:928\", \"0:960\", \"0:992\", \"0:1024\", \"0:1056\", \"0:1088\", \"0:1120\", \"0:1152\", \"0:1184\", \"0:1216\", \"0:1248\", \"0:1280\", \"0:1312\", \"0:1344\", \"0:1376\", \"0:1408\", \"0:1440\", \"0:1472\", \"0:1504\", \"0:1536\", \"0:1568\", \"0:1600\", \"0:1632\", \"0:1664\", \"0:1696\", \"0:1728\", \"0:1760\", \"0:1792\", \"0:1824\", \"0:1856\", \"0:1888\", \"0:1920\", \"0:1952\", \"0:1984\", \"0:2016\", \"0:2048\", \"0:2080\", \"0:2112\", \"0:2144\", \"0:2176\", \"0:"}], "pascals-triangle": [{"task_id": "pascals-triangle", "completion": "class Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if numRows == 0:\n            return []\n        \n        if numRows == 1:\n            return [[1]]\n        \n        if numRows == 2:\n            return [[1], [1,1]]\n        \n        res = [[1], [1,1]]\n        \n        for i in range(2, numRows):\n            temp = [1]\n            for j in range(1, i):\n                temp.append(res[i-1][j-1] + res[i-1][j])\n            temp.append(1)\n            res.append(temp)\n        \n        return res"}], "power-of-three": [{"task_id": "power-of-three", "completion": "class Solution(object):\n    def isPowerOfThree(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 3 == 0:\n            n /= 3\n        \n        return n == 1"}], "binary-tree-maximum-path-sum": [{"task_id": "binary-tree-maximum-path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxPathSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        ## 1. Recursive\n        ## 2. DFS\n        ## 3. BFS\n        ## 4. Divide and Conquer\n        ## 5. DP\n        ## 6. Binary Tree\n        ## 7. Tree\n        ## 8. Binary Search Tree\n        ## 9. Binary Tree\n        ## 10. Binary Tree\n        ## 11. Binary Tree\n        ## 12. Binary Tree\n        ## 13. Binary Tree\n        ## 14. Binary Tree\n        ## 15. Binary Tree\n        ## 16. Binary Tree\n        ## 17. Binary Tree\n        ## 18. Binary Tree\n        ## 19. Binary Tree\n        ## 20. Binary Tree\n        ## 21. Binary Tree\n        ## 22. Binary Tree\n        ## 23. Binary Tree\n        ## 24. Binary Tree\n        ## 25. Binary Tree\n        ## 26. Binary Tree\n        ## 27. Binary Tree\n        ## 28. Binary Tree\n        ## 29. Binary Tree\n        ## 30. Binary Tree\n        ## 31. Binary Tree\n        ## 32. Binary Tree\n        ## 33. Binary Tree\n        ## 34. Binary Tree\n        ## 35. Binary Tree\n        ## 36. Binary Tree\n        ## 37. Binary Tree\n        ## 38. Binary Tree\n        ## 39. Binary Tree\n        ## 40. Binary Tree\n        ## 41. Binary Tree\n        ## 42. Binary Tree\n        ## 43. Binary Tree\n        ## 44. Binary Tree\n        ## 45. Binary Tree\n        ## 46. Binary Tree\n        ## 47. Binary Tree\n        ## 48. Binary Tree\n        ## 49. Binary Tree\n        ## 50. Binary Tree\n        ## 51. Binary Tree\n        ## 52. Binary Tree\n        ## 53. Binary Tree\n        ## 54. Binary Tree\n        ## 55. Binary Tree\n        ## 56. Binary Tree\n        ## 57. Binary Tree\n        ## 58. Binary Tree\n        ## 59. Binary Tree\n        ## 60. Binary Tree\n        ## 61. Binary Tree\n        ## 62. Binary Tree\n        ## 63. Binary Tree\n        ## 64. Binary Tree\n        ## 65. Binary Tree\n        ## 66. Binary Tree\n        ## 67. Binary Tree\n        ## 68. Binary Tree\n        ## 69. Binary Tree\n        ## 70. Binary Tree\n        ## 71. Binary Tree\n        ## 72. Binary Tree\n        ## 73. Binary Tree\n        ## 74. Binary Tree\n        ## 75. Binary Tree\n        ## 76. Binary Tree\n        ## 77. Binary Tree\n        ## 78. Binary Tree\n        ## 79. Binary Tree\n        ## 80. Binary Tree\n        ## 81. Binary Tree\n        ## 82. Binary Tree\n        ## 83. Binary Tree\n        ## 84. Binary Tree\n        ## 85. Binary Tree\n        ## 86. Binary Tree\n        ## 87. Binary Tree\n        ## 88. Binary Tree\n        ## 89. Binary Tree\n        ## 90. Binary Tree\n        ## 91. Binary Tree\n        ## 92. Binary Tree\n        ## 93. Binary Tree\n        ## 94. Binary Tree"}], "trapping-rain-water-ii": [{"task_id": "trapping-rain-water-ii", "completion": "class Solution(object):\n    def trapRainWater(self, heightMap):\n        \"\"\"\n        :type heightMap: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not heightMap:\n            return 0\n        \n        m, n = len(heightMap), len(heightMap[0])\n        heap = []\n        for i in range(m):\n            heapq.heappush(heap, (heightMap[i][0], 0, heightMap[i][n-1]))\n            heapq.heappush(heap, (heightMap[i][n-1], n-1, heightMap[i][0]))\n        \n        for i in range(1, n-1):\n            heapq.heappush(heap, (heightMap[0][i], 0, heightMap[0][i]))\n            heapq.heappush(heap, (heightMap[m-1][i], m-1, heightMap[m-1][i]))\n        \n        seen = set()\n        ans = 0\n        while heap:\n            h, i, j = heapq.heappop(heap)\n            seen.add((i, j))\n            for di, dj in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n                ni, nj = i + di, j + dj\n                if 0 <= ni < m and 0 <= nj < n and (ni, nj) not in seen:\n                    ans += max(0, h - heightMap[ni][nj])\n                    heapq.heappush(heap, (max(h, heightMap[ni][nj]), ni, nj))\n        \n        return ans"}], "valid-palindrome": [{"task_id": "valid-palindrome", "completion": "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # remove all non-alphanumeric characters\n        s = re.sub(r'[^a-zA-Z0-9]', '', s)\n        \n        # convert to lowercase\n        s = s.lower()\n        \n        # check if the string is empty\n        if not s:\n            return True\n        \n        # check if the string is a palindrome\n        return s == s[::-1]"}], "sliding-window-median": [{"task_id": "sliding-window-median", "completion": "class Solution(object):\n    def medianSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[float]\n        \"\"\"\n        \n        # 1. \uc624\ub984\ucc28\uc21c \uc815\ub82c\n        # 2. \uc9dd\uc218\uc778 \uacbd\uc6b0 \uc911\uac04\uac12 2\uac1c \ucd9c\ub825\n        # 3. \ud640\uc218\uc778 \uacbd\uc6b0 \uc911\uac04\uac12 1\uac1c \ucd9c\ub825\n        \n        # 1. \uc624\ub984\ucc28\uc21c \uc815\ub82c\n        nums.sort()\n        \n        # 2. \uc9dd\uc218\uc778 \uacbd\uc6b0 \uc911\uac04\uac12 2\uac1c \ucd9c\ub825\n        if len(nums) % 2 == 0:\n            return [(nums[k // 2 - 1] + nums[k // 2]) / 2.0]\n        \n        # 3. \ud640\uc218\uc778 \uacbd\uc6b0 \uc911\uac04\uac12 1\uac1c \ucd9c\ub825\n        else:\n            return [nums[k // 2]]"}], "rotate-list": [{"task_id": "rotate-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        # find the length of the list\n        length = 0\n        curr = head\n        while curr:\n            length += 1\n            curr = curr.next\n        \n        # if k is larger than the length of the list, we need to rotate by k % length\n        k = k % length\n        if k == 0:\n            return head\n        \n        # find the new head\n        curr = head\n        for i in range(length - k - 1):\n            curr = curr.next\n        \n        new_head = curr.next\n        curr.next = None\n        \n        # find the new tail\n        curr = new_head\n        while curr.next:\n            curr = curr.next\n        \n        curr.next = head\n        \n        return new_head"}], "ugly-number": [{"task_id": "ugly-number", "completion": "class Solution(object):\n    def isUgly(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 2 == 0:\n            n = n / 2\n        while n % 3 == 0:\n            n = n / 3\n        while n % 5 == 0:\n            n = n / 5\n        \n        return n == 1"}], "falling-squares": [{"task_id": "falling-squares", "completion": "class Solution(object):\n    def fallingSquares(self, positions):\n        \"\"\"\n        :type positions: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "sum-of-left-leaves": [{"task_id": "sum-of-left-leaves", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumOfLeftLeaves(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        if root.left and not root.left.left and not root.left.right:\n            return root.left.val + self.sumOfLeftLeaves(root.right)\n        \n        return self.sumOfLeftLeaves(root.left) + self.sumOfLeftLeaves(root.right)"}], "max-sum-of-rectangle-no-larger-than-k": [{"task_id": "max-sum-of-rectangle-no-larger-than-k", "completion": "class Solution(object):\n    def maxSumSubmatrix(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        if not matrix or not matrix[0]:\n            return 0\n        \n        m, n = len(matrix), len(matrix[0])\n        max_sum = float('-inf')\n        prefix_sum = [0] * n\n        for i in range(m):\n            for j in range(n):\n                prefix_sum[j] += matrix[i][j]\n            max_sum = max(max_sum, self.max_subarray_sum(prefix_sum, k))\n        return max_sum\n    \n    def max_subarray_sum(self, nums, k):\n        if not nums:\n            return 0\n        \n        max_sum = float('-inf')\n        prefix_sum = 0\n        seen = {0: -1}\n        for i, num in enumerate(nums):\n            prefix_sum += num\n            if prefix_sum - k in seen:\n                max_sum = max(max_sum, prefix_sum - k)\n            if max_sum not in seen:\n                seen[max_sum] = i\n            max_sum = max(max_sum, prefix_sum)\n        return max_sum"}], "divide-two-integers": [{"task_id": "divide-two-integers", "completion": "class Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"\n        \n        # edge case\n        if dividend == 0:\n            return 0\n        \n        # edge case\n        if dividend == -2**31 and divisor == -1:\n            return 2**31 - 1\n        \n        # edge case\n        if dividend == 2**31 and divisor == -1:\n            return 2**31 - 1\n        \n        # edge case\n        if dividend == -2**31 and divisor == 1:\n            return -2**31\n        \n        # edge case\n        if dividend == 2**31 and divisor == 1:\n            return 2**31 - 1\n        \n        # edge case\n        if dividend == 0 and divisor == 1:\n            return 0\n        \n        # edge case\n        if dividend == 0 and divisor == -1:\n            return 0\n        \n        # edge case\n        if dividend == -1 and divisor == -1:\n            return 1\n        \n        # edge case\n        if dividend == -1 and divisor == 1:\n            return -1\n        \n        # edge case\n        if dividend == 1 and divisor == -1:\n            return -1\n        \n        # edge case\n        if dividend == 1 and divisor == 1:\n            return 1\n        \n        # edge case\n        if dividend == -1 and divisor == -2**31:\n            return 0\n        \n        # edge case\n        if dividend == 2**31 and divisor == -2**31:\n            return 0\n        \n        # edge case\n        if dividend == -2**31 and divisor == -2**31:\n            return 0\n        \n        # edge case\n        if dividend == -2**31 and divisor == 2**31:\n            return -1\n        \n        # edge case\n        if dividend == 2**31 and divisor == -2**31:\n            return 0\n        \n        # edge case\n        if dividend == -2**31 and divisor == 2**31:\n            return -1\n        \n        # edge case\n        if dividend == 2**31 and divisor == 2**31:\n            return 0\n        \n        # edge case\n        if dividend == -2**31 and divisor == 2**31:\n            return -1\n        \n        # edge case\n        if dividend == 2**31 and divisor == -2**31:\n            return 0\n        \n        # edge case\n        if dividend == -2**31 and divisor == -2**31:\n            return 0\n        \n        # edge case\n        if dividend == -2**31 and divisor == 2**31:\n            return -1\n        \n        # edge case\n        if dividend == 2**31 and divisor == -2**31:\n            return 0\n        \n        # edge case\n        if dividend == -2**31 and divisor == -2**31:\n            return 0\n        \n        # edge case\n        if dividend == -2**31 and divisor == 2**31:\n            return -1\n        \n        # edge case\n        if dividend == 2**31 and divisor == -2**31:\n            return 0\n        \n        # edge case\n        if dividend == -2**31 and divisor == -2**31:\n            return 0\n        \n        # edge case\n        if dividend == -2**31 and divisor == 2**31:\n            return -1\n        \n        # edge case\n        if dividend == 2**31 and divisor == -2**31:\n            return 0\n        \n        # edge case\n        if dividend == -2**31 and divisor == -2**31:\n            return 0\n        \n        # edge case\n        if dividend == -2**31 and divisor == 2**31:\n            return -1\n        \n        # edge case\n        if dividend == 2**31 and divisor == -2**31:\n            return 0\n        \n        # edge case\n        if dividend == -2**31 and divisor == -2**31:\n            return 0\n        \n        # edge case"}], "surrounded-regions": [{"task_id": "surrounded-regions", "completion": "class Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        if not board:\n            return\n        \n        m, n = len(board), len(board[0])\n        \n        # mark all the border 'O's as '1's\n        for i in range(m):\n            for j in range(n):\n                if (i == 0 or i == m-1 or j == 0 or j == n-1) and board[i][j] == 'O':\n                    board[i][j] = '1'\n        \n        # mark all the 'O's that are not on the border as '2's\n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'O':\n                    board[i][j] = '2'\n        \n        # mark all the '1's that are not on the border as 'O's\n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == '1':\n                    board[i][j] = 'O'\n        \n        # mark all the '2's that are not on the border as '1's\n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == '2':\n                    board[i][j] = '1'"}], "two-sum": [{"task_id": "two-sum", "completion": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # create a hashmap\n        hashmap = {}\n        \n        # iterate through the list\n        for i, num in en\n            # check if the difference between the target and the current number is in the hashmap\n            if target - num in hashmap:\n                # return the index of the number and the index of the current number\n                return [hashmap[target - num], i]\n            # add the number to the hashmap\n            hashmap[num] = i"}], "24-game": [{"task_id": "24-game", "completion": "class Solution(object):\n    def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        if len(cards) == 1:\n            return abs(cards[0] - 24) < 0.000001\n        \n        if len(cards) == 2:\n            return abs(cards[0] * 4 - cards[1] * 3) < 0.000001\n        \n        if len(cards) == 3:\n            return abs(cards[0] * 3 - cards[1] * 2) < 0.000001 and abs(cards[1] * 2 - cards[2] * 1) < 0.000001\n        \n        if len(cards) == 4:\n            return abs(cards[0] * 2 - cards[1] * 1) < 0.000001 and abs(cards[2] * 1 - cards[3] * 0) < 0.000001\n        \n        return False"}], "wildcard-matching": [{"task_id": "wildcard-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        # if the pattern is empty, then the string must be empty as well\n        if not p:\n            return not s\n        \n        # if the pattern is not empty, then the string must not be empty\n        if not s:\n            return False\n        \n        # if the first character of the pattern is not '*', then the string must be empty\n        if p[0] != '*':\n            return False\n        \n        # if the first character of the pattern is '*', then the string can be empty\n        return self.isMatch(s, p[1:])"}], "majority-element": [{"task_id": "majority-element", "completion": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Boyer-Moore Voting Algorithm\n        # https://leetcode.com/problems/majority-element/discuss/100988/Python-O(n)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100988/Python-O(n)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100988/Python-O(n)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100988/Python-O(n)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100988/Python-O(n)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100988/Python-O(n)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100988/Python-O(n)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100988/Python-O(n)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100988/Python-O(n)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100988/Python-O(n)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100988/Python-O(n)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100988/Python-O(n)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100988/Python-O(n)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100988/Python-O(n)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100988/Python-O(n)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100988/Python-O(n)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100988/Python-O(n)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100988/Python-O(n)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100988/Python-O(n)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100988/Python-O(n)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100988/Python-O(n)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100988/Python-O(n)-solution-with-detailed-explanation"}], "reconstruct-itinerary": [{"task_id": "reconstruct-itinerary", "completion": "class Solution(object):\n    def findItinerary(self, tickets):\n        \"\"\"\n        :type tickets: List[List[str]]\n        :rtype: List[str]\n        \"\"\"\n        \n        # build a graph\n        graph = collections.defaultdict(list)\n        for fromi, toi in sorted(tickets):\n            graph[fromi].append(toi)\n        \n        # do a dfs\n        res = []\n        def dfs(node):\n            # if there is no more edges, add to the result\n            if len(graph[node]) == 0:\n                res.append(node)\n                return\n            # otherwise, do a dfs\n            for i in range(len(graph[node])):\n                next_node = graph[node][i]\n                graph[node].pop(i)\n                dfs(next_node)\n                graph[node].insert(i, next_node)\n        \n        dfs(\"JFK\")\n        return res[::-1]"}], "4sum": [{"task_id": "4sum", "completion": "class Solution(object):\n    def fourSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        n = len(nums)\n        if n < 4:\n            return []\n        \n        res = []\n        for i in range(n-3):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            if nums[i] + nums[i+1] + nums[i+2] + nums[i+3] > target:\n                break\n            if nums[i] + nums[n-1] + nums[n-2] + nums[n-3] < target:\n                continue\n            if nums[i] + nums[i+1] + nums[n-2] + nums[n-1] == target:\n                res.append([nums[i], nums[i+1], nums[n-2], nums[n-1]])\n                break\n            left = i + 1\n            right = n - 1\n            while left < right:\n                if nums[i] + nums[left] + nums[right] + nums[right-1] < target:\n                    left += 1\n                elif nums[i] + nums[left] + nums[right] + nums[right-1] > target:\n                    right -= 1\n                else:\n                    res.append([nums[i], nums[left], nums[right], nums[right-1]])\n                    left += 1\n                    right -= 1\n                    while left < right and nums[left] == nums[left-1]:\n                        left += 1\n        return res"}], "the-skyline-problem": [{"task_id": "the-skyline-problem", "completion": "class Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. sort the buildings by left edge\n        # 2. use a priority queue to store the heights\n        # 3. iterate over the buildings\n        # 4. if the current building is taller than the top of the queue, pop the top\n        # 5. if the current building is shorter than the top of the queue, add it to the queue\n        # 6. if the current building is the same as the top of the queue, do nothing\n        # 7. if the queue is empty, add the current building to the queue\n        # 8. if the queue is not empty, add the top of the queue to the result\n        \n        # 1. sort the buildings by left edge\n        buildings.sort(key=lambda x: x[0])\n        \n        # 2. use a priority queue to store the heights\n        pq = []\n        \n        # 3. iterate over the buildings\n        for b in buildings:\n            # 4. if the current building is taller than the top of the queue, pop the top\n            if b[2] > 0:\n                heapq.heappush(pq, (-b[2], b[1]))\n            else:\n                # 5. if the current building is shorter than the top of the queue, add it to the queue\n                if pq:\n                    heapq.heappush(pq, (-b[2], b[1]))\n                else:\n                    # 6. if the queue is empty, add the current building to the queue\n                    heapq.heappush(pq, (-b[2], b[1]))\n        \n        # 7. if the queue is not empty, add the top of the queue to the result\n        result = [[pq[0][1], -pq[0][0]]]\n        for b in buildings[1:]:\n            if b[2] > 0:\n                heapq.heappush(pq, (-b[2], b[1]))\n            else:\n                if pq:\n                    heapq.heappush(pq, (-b[2], b[1]))\n                else:\n                    heapq.heappush(pq, (-b[2], b[1]))\n            while pq[0][1] <= b[0]:\n                heapq.heappop(pq)\n            result.append([pq[0][1], -pq[0][0]])\n        return result"}], "reverse-string": [{"task_id": "reverse-string", "completion": "class Solution(object):\n    def reverseString(self, s):\n        \"\"\"\n        :type s: List[str]\n        :rtype: None Do not return anything, modify s in-place instead.\n        \"\"\"\n        \n        # reverse the string\n        s.reverse()\n        \n        # reverse the string\n        # for i in range(len(s)//2):\n        #     s[i], s[len(s)-i-1] = s[len(s)-i-1], s[i]\n\n        # or\n        # s.reverse()\n\n        # or\n        # s[:] = s[::-1]\n\n        # or\n        # s[:] = s[::-1]\n\n        # or\n        # s[:] = s[::-1]\n\n        # or\n        # s[:] = s[::-1]\n\n        # or\n        # s[:] = s[::-1]\n\n        # or\n        # s[:] = s[::-1]\n\n        # or\n        # s[:] = s[::-1]\n\n        # or\n        # s[:] = s[::-1]\n\n        # or\n        # s[:] = s[::-1]\n\n        # or\n        # s[:] = s[::-1]\n\n        # or\n        # s[:] = s[::-1]\n\n        # or\n        # s[:] = s[::-1]\n\n        # or\n        # s[:] = s[::-1]\n\n        # or\n        # s[:] = s[::-1]\n\n        # or\n        # s[:] = s[::-1]\n\n        # or\n        # s[:] = s[::-1]\n\n        # or\n        # s[:] = s[::-1]\n\n        # or\n        # s[:] = s[::-1]\n\n        # or\n        # s[:] = s[::-1]\n\n        # or\n        # s[:] = s[::-1]\n\n        # or\n        # s[:] = s[::-1]\n\n        # or\n        # s[:] = s[::-1]\n\n        # or\n        # s[:] = s[::-1]\n\n        # or\n        # s[:] = s[::-1]\n\n        # or\n        # s[:] = s[::-1]\n\n        # or\n        # s[:] = s[::-1]\n\n        # or\n        # s[:] = s[::-1]\n\n        # or\n        # s[:] = s[::-1]\n\n        # or\n        # s[:] = s[::-1]\n\n        # or\n        # s[:] = s[::-1]\n\n        # or\n        # s[:] = s[::-1]\n\n        # or\n        # s[:] = s[::-1]\n\n        # or\n        # s[:] = s[::-1]\n\n        # or\n        # s[:] = s[::-1]\n\n        # or\n        # s[:] = s[::-1]\n\n        # or\n        # s[:] = s[::-1]\n\n        # or\n        # s[:] = s[::-1]\n\n        # or\n        # s[:] = s[::-1]\n\n        # or\n        # s[:] = s[::-1]\n\n        # or\n        # s[:] = s[::-1]\n\n        # or\n        # s[:] = s[::-1]\n\n        # or\n        # s[:] = s[::-1]\n\n        # or\n        # s[:] = s[::-1]\n\n        # or\n        # s[:] = s[::-1]\n\n        # or\n        # s[:] = s[::-1]\n\n        # or\n        # s[:] = s[::-1]\n\n        # or\n        # s[:] = s[::-1]\n\n        # or\n        # s[:] = s[::-1]\n\n        # or\n        # s[:] = s[::-1]\n\n        # or\n        # s[:] = s[::-1]\n\n        # or\n        # s[:] = s[::-1]\n\n        # or\n        # s[:] = s[::-1]\n\n        # or"}], "reverse-linked-list": [{"task_id": "reverse-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # iterative\n        # prev = None\n        # curr = head\n        # while curr:\n        #     next = curr.next\n        #     curr.next = prev\n        #     prev = curr\n        #     curr = next\n        # return prev\n        \n        # recursive\n        if not head:\n            return None\n        if not head.next:\n            return head\n        newHead = self.reverseList(head.next)\n        head.next.next = head\n        head.next = None\n        return newHead"}], "triangle": [{"task_id": "triangle", "completion": "class Solution(object):\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "integer-to-english-words": [{"task_id": "integer-to-english-words", "completion": "class Solution(object):\n    def numberToWords(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"Zero\"\n        \n        # 10^9\n        # 10^6\n        # 10^3\n        # 10^2\n        # 10\n        # 1\n        \n}], "k-inverse-pairs-array": [{"task_id": "k-inverse-pairs-array", "completion": "class Solution(object):\n    def kInversePairs(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,28"}], "swap-nodes-in-pairs": [{"task_id": "swap-nodes-in-pairs", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        curr = dummy\n        \n        while curr.next and curr.next.next:\n            first = curr.next\n            second = curr.next.next\n            \n            curr.next = second\n            first.next = second.next\n            second.next = first\n            \n            curr = first\n            \n        return dummy.next"}], "path-sum": [{"task_id": "path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def hasPathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: bool\n        \"\"\"\n        \n        if not root:\n            return False\n        \n        if not root.left and not root.right:\n            return targetSum == root.val\n        \n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)"}], "partition-list": [{"task_id": "partition-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def partition(self, head, x):\n        \"\"\"\n        :type head: ListNode\n        :type x: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # create two dummy nodes\n        dummy1 = ListNode(0)\n        dummy2 = ListNode(0)\n        \n        # create two pointers\n        p1 = dummy1\n        p2 = dummy2\n        \n        # traverse the list\n        while head:\n            # if the current node is less than x, add it to the first list\n            if head.val < x:\n                p1.next = head\n                p1 = p1.next\n            # if the current node is greater than or equal to x, add it to the second list\n            else:\n                p2.next = head\n                p2 = p2.next\n            # move to the next node\n            head = head.next\n        \n        # connect the two lists\n        p1.next = dummy2.next\n        p2.next = None\n        \n        # return the first list\n        return dummy1.next"}], "redundant-connection-ii": [{"task_id": "redundant-connection-ii", "completion": "class Solution(object):\n    def findRedundantDirectedConnection(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. find the node with two parents\n        # 2. find the node with one parent\n        # 3. if there is a cycle, return the node with two parents\n        # 4. if there is no cycle, return the node with one parent\n        \n        # 1. find the node with two parents\n        parent_map = {}\n        child_map = {}\n        for edge in edges:\n            if edge[0] in parent_map:\n                child_map[edge[0]] = edge[1]\n            else:\n                parent_map[edge[0]] = edge[1]\n        \n        for edge in edges:\n            if edge[1] in parent_map:\n                return [parent_map[edge[1]], edge[1]]\n        \n        # 2. find the node with one parent\n        for edge in edges:\n            if edge[0] not in parent_map:\n                return edge\n        \n        # 3. if there is a cycle, return the node with two parents\n        # 4. if there is no cycle, return the node with one parent\n        return [0, 0]"}], "permutations-ii": [{"task_id": "permutations-ii", "completion": "class Solution(object):\n    def permuteUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # sort the list\n        nums.sort()\n        \n        # initialize the result list\n        result = []\n        \n        # initialize the visited list\n        visited = [False] * len(nums)\n        \n        # initialize the current list\n        current = []\n        \n        # initialize the helper function\n        def helper(nums, current, result, visited):\n            # if the current list is the same length as the nums list,\n            # then add the current list to the result list\n            if len(current) == len(nums):\n                result.append(current[:])\n                return\n            \n            # iterate through the nums list\n            for i in range(len(nums)):\n                # if the current list is empty, or the last element is the same as the current element,\n                # then add the current element to the current list\n                if len(current) == 0 or nums[i] != nums[i - 1] and visited[i - 1] == False:\n                    current.append(nums[i])\n                    visited[i] = True\n                    helper(nums, current, result, visited)\n                    current.pop()\n                    visited[i] = False\n        \n        # call the helper function\n        helper(nums, current, result, visited)\n        \n        # return the result list\n        return result"}], "add-digits": [{"task_id": "add-digits", "completion": "class Solution(object):\n    def addDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        if num == 0:\n            return 0\n        if num % 9 == 0:\n            return 9\n        else:\n            return num % 9"}], "single-number": [{"task_id": "single-number", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # XOR\n        # 0 ^ 0 = 0\n        # 0 ^ 1 = 1\n        # 1 ^ 0 = 1\n        # 1 ^ 1 = 0\n        # 0 ^ 1 ^ 1 = 0\n        # 0 ^ 1 ^ 0 = 1\n        # 1 ^ 0 ^ 0 = 1\n        # 1 ^ 0 ^ 1 = 0\n        # 0 ^ 1 ^ 0 ^ 1 = 1\n        # 0 ^ 1 ^ 0 ^ 0 = 1\n        # 1 ^ 0 ^ 1 ^ 0 = 1\n        # 1 ^ 0 ^ 0 ^ 1 = 1\n        # 0 ^ 1 ^ 1 ^ 0 = 1\n        # 0 ^ 1 ^ 1 ^ 1 = 0\n        # 0 ^ 0 ^ 1 ^ 1 = 1\n        # 0 ^ 0 ^ 0 ^ 1 = 1\n        # 1 ^ 1 ^ 0 ^ 0 = 1\n        # 1 ^ 1 ^ 1 ^ 0 = 0\n        # 0 ^ 0 ^ 1 ^ 0 = 1\n        # 0 ^ 0 ^ 0 ^ 0 = 0\n        # 1 ^ 1 ^ 1 ^ 1 = 0\n        # 0 ^ 1 ^ 0 ^ 1 ^ 1 = 1\n        # 0 ^ 1 ^ 0 ^ 0 ^ 1 = 1\n        # 1 ^ 0 ^ 1 ^ 0 ^ 1 = 1\n        # 1 ^ 0 ^ 0 ^ 1 ^ 1 = 1\n        # 0 ^ 1 ^ 1 ^ 0 ^ 1 = 1\n        # 0 ^ 1 ^ 1 ^ 0 ^ 0 = 1\n        # 1 ^ 0 ^ 0 ^ 1 ^ 0 = 1\n        # 1 ^ 0 ^ 0 ^ 0 ^ 1 = 1\n        # 0 ^ 1 ^ 1 ^ 1 ^ 0 = 1\n        # 0 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # 0 ^ 0 ^ 0 ^ 1 ^ 1 = 1\n        # 0 ^ 0 ^ 0 ^ 0 ^ 1 = 1\n        # 1 ^ 1 ^ 1 ^ 0 ^ 0 = 1\n        # 1 ^ 1 ^ 1 ^ 0 ^ 1 = 0\n        # 0 ^ 0 ^ 0 ^ 1 ^ 0 = 1\n        # 0 ^ 0 ^ 0 ^ 0 ^ 0 = 0\n        # 1 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # 0 ^ 1 ^ 0 ^ 0 ^ 0 = 1\n        # 0 ^ 1 ^ 0 ^ 0 ^ 1 = 1\n        # 1 ^ 0 ^ 1 ^ 0 ^ 0 = 1\n        # 1 ^ 0 ^ 0 ^ 1 ^ 0 = 1\n        # 1 ^ 0 ^ 0 ^ 0 ^ 1 = 1\n        # 0 ^ 1 ^ 1 ^ 0 ^ 0 = 1\n        # 0 ^ 1 ^ 1 ^ 0 ^ 1 = 0\n        # 0 ^ 0 ^ 0 ^ 1 ^ 0 = 1\n        # 0 ^ 0 ^ 0 ^ 0 ^ 0 = 0\n        # 1 ^ 1 ^ 1 ^ 1 ^ 0 = 1\n        # 1 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # 0 ^ 0 ^ 0 ^ 0 ^ 1 = 1\n        # 0 ^ 0 ^ 0 ^ 0 ^ 0 = 0\n        # 1 ^ 1 ^ 1 ^ 0 ^ 0 = 1\n        # 1 ^ 1 ^ 1 ^ 0 ^ 1 = 0\n        # 0 ^ 0 ^ 0 ^ 1 ^ 0 = 1\n        # 0 ^ 0 ^ 0 ^ 0 ^ 0 = 0\n        # 1 ^ 1 ^ 1 ^ 0 ^ 1 = 0\n        # 1 ^ 1 ^ 1 ^ 0 ^ 0 = 1\n        # 0 ^ 0 ^ 0 ^ 1 ^ 1 = 1\n        # 0 ^ 0 ^ 0 ^ 0 ^ 1"}], "length-of-last-word": [{"task_id": "length-of-last-word", "completion": "class Solution(object):\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        ## Solution 1:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## 1. Remove trailing spaces\n        ## 2. Count the number of words\n        ## 3. Iterate backwards and count the number of characters in the last word\n        ## 4. Return the number of characters in the last word\n        \n        ## 1. Remove trailing spaces\n        s = s.rstrip()\n        \n        ## 2. Count the number of words\n        words = 0\n        for i in range(len(s)):\n            if s[i] != ' ':\n                words += 1\n        \n        ## 3. Iterate backwards and count the number of characters in the last word\n        last_word_len = 0\n        for i in range(len(s)-1, -1, -1):\n            if s[i] != ' ':\n                last_word_len += 1\n            else:\n                break\n        \n        ## 4. Return the number of characters in the last word\n        return last_word_len"}], "cherry-pickup": [{"task_id": "cherry-pickup", "completion": "class Solution(object):\n    def cherryPickup(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. 2D DP\n        # 2. 1D DP\n        # 3. 2D DP + BFS\n        # 4. 1D DP + BFS\n        # 5. 2D DP + BFS + BFS\n        # 6. 1D DP + BFS + BFS\n        # 7. 2D DP + BFS + BFS + BFS\n        # 8. 1D DP + BFS + BFS + BFS\n        # 9. 2D DP + BFS + BFS + BFS\n        # 10. 1D DP + BFS + BFS + BFS\n        # 11. 2D DP + BFS + BFS + BFS\n        # 12. 1D DP + BFS + BFS + BFS\n        # 13. 2D DP + BFS + BFS + BFS\n        # 14. 1D DP + BFS + BFS + BFS\n        # 15. 2D DP + BFS + BFS + BFS\n        # 16. 1D DP + BFS + BFS + BFS\n        # 17. 2D DP + BFS + BFS + BFS\n        # 18. 1D DP + BFS + BFS + BFS\n        # 19. 2D DP + BFS + BFS + BFS\n        # 20. 1D DP + BFS + BFS + BFS\n        # 21. 2D DP + BFS + BFS + BFS\n        # 22. 1D DP + BFS + BFS + BFS\n        # 23. 2D DP + BFS + BFS + BFS\n        # 24. 1D DP + BFS + BFS + BFS\n        # 25. 2D DP + BFS + BFS + BFS\n        # 26. 1D DP + BFS + BFS + BFS\n        # 27. 2D DP + BFS + BFS + BFS\n        # 28. 1D DP + BFS + BFS + BFS\n        # 29. 2D DP + BFS + BFS + BFS\n        # 30. 1D DP + BFS + BFS + BFS\n        # 31. 2D DP + BFS + BFS + BFS\n        # 32. 1D DP + BFS + BFS + BFS\n        # 33. 2D DP + BFS + BFS + BFS\n        # 34. 1D DP + BFS + BFS + BFS\n        # 35. 2D DP + BFS + BFS + BFS\n        # 36. 1D DP + BFS + BFS + BFS\n        # 37. 2D DP + BFS + BFS + BFS\n        # 38. 1D DP + BFS + BFS + BFS\n        # 39. 2D DP + BFS + BFS + BFS\n        # 40. 1D DP + BFS + BFS + BFS\n        # 41. 2D DP + BFS + BFS + BFS\n        # 42. 1D DP + BFS + BFS + BFS\n        # 43. 2D DP + BFS + BFS + BFS\n        # 44. 1D DP + BFS + BFS + BFS\n        # 45. 2D DP + BFS + BFS + BFS\n        # 46. 1D DP + BFS + BFS + BFS\n        # 47. 2D DP + BFS + BFS + BFS\n        # 48. 1D DP + BFS + BFS + BFS\n        # 49. 2D DP + BFS + BFS + BFS\n        # 50. 1D DP + BFS + BFS + BFS\n        # 51. 2D DP + BFS + BFS + B"}], "student-attendance-record-ii": [{"task_id": "student-attendance-record-ii", "completion": "class Solution(object):\n    def checkRecord(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. 2^n - 1\n        # 2. 2^n - 2\n        # 3. 2^n - 3\n        # 4. 2^n - 4\n        # 5. 2^n - 5\n        # 6. 2^n - 6\n        # 7. 2^n - 7\n        # 8. 2^n - 8\n        # 9. 2^n - 9\n        # 10. 2^n - 10\n        # 11. 2^n - 11\n        # 12. 2^n - 12\n        # 13. 2^n - 13\n        # 14. 2^n - 14\n        # 15. 2^n - 15\n        # 16. 2^n - 16\n        # 17. 2^n - 17\n        # 18. 2^n - 18\n        # 19. 2^n - 19\n        # 20. 2^n - 20\n        # 21. 2^n - 21\n        # 22. 2^n - 22\n        # 23. 2^n - 23\n        # 24. 2^n - 24\n        # 25. 2^n - 25\n        # 26. 2^n - 26\n        # 27. 2^n - 27\n        # 28. 2^n - 28\n        # 29. 2^n - 29\n        # 30. 2^n - 30\n        # 31. 2^n - 31\n        # 32. 2^n - 32\n        # 33. 2^n - 33\n        # 34. 2^n - 34\n        # 35. 2^n - 35\n        # 36. 2^n - 36\n        # 37. 2^n - 37\n        # 38. 2^n - 38\n        # 39. 2^n - 39\n        # 40. 2^n - 40\n        # 41. 2^n - 41\n        # 42. 2^n - 42\n        # 43. 2^n - 43\n        # 44. 2^n - 44\n        # 45. 2^n - 45\n        # 46. 2^n - 46\n        # 47. 2^n - 47\n        # 48. 2^n - 48\n        # 49. 2^n - 49\n        # 50. 2^n - 50\n        # 51. 2^n - 51\n        # 52. 2^n - 52\n        # 53. 2^n - 53\n        # 54. 2^n - 54\n        # 55. 2^n - 55\n        # 56. 2^n - 56\n        # 57. 2^n - 57\n        # 58. 2^n - 58\n        # 59. 2^n - 59\n        # 60. 2^n - 60\n        # 61. 2^n - 61\n        # 62. 2^n - 62\n        # 63. 2^n - 63\n        # 64. 2^n - 64\n        # 65. 2^n - 65\n        # 66. 2^n - 66\n        # 67. 2^n - 67\n        # 68. 2^n - 68\n        # 69. 2^n - 69\n        # 70."}], "happy-number": [{"task_id": "happy-number", "completion": "class Solution(object):\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        # Floyd's Cycle Detection Algorithm\n        slow = n\n        fast = n\n        \n        while True:\n            slow = self.square_sum(slow)\n            fast = self.square_sum(self.square_sum(fast))\n            \n            if slow == 1:\n                return True\n            if slow == fast:\n                return False\n\n    def square_sum(self, n):\n        sum = 0\n        while n > 0:\n            digit = n % 10\n            sum += digit * digit\n            n = n // 10\n        return sum"}], "search-insert-position": [{"task_id": "search-insert-position", "completion": "class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        # binary search\n        # left = 0\n        # right = len(nums) - 1\n        # while left <= right:\n        #     mid = (left + right) // 2\n        #     if nums[mid] == target:\n        #         return mid\n        #     elif nums[mid] < target:\n        #         left = mid + 1\n        #     else:\n        #         right = mid - 1\n        # return left\n        \n        # linear search\n        for i in range(len(nums)):\n            if nums[i] >= target:\n                return i\n        return len(nums)"}], "jump-game": [{"task_id": "jump-game", "completion": "class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # if len(nums) == 1:\n        #     return True\n        \n        # if nums[0] == 0:\n        #     return False\n        \n        # max_reach = nums[0]\n        # for i in range(1, len(nums)):\n        #     if max_reach < i:\n        #         return False\n        #     max_reach = max(max_reach, i + nums[i])\n        # return max_reach >= len(nums) - 1\n        \n        # if len(nums) == 1:\n        #     return True\n        \n        # if nums[0] == 0:\n        #     return False\n        \n        # max_reach = nums[0]\n        # for i in range(1, len(nums)):\n        #     if max_reach < i:\n        #         return False\n        #     max_reach = max(max_reach, i + nums[i])\n        # return max_reach >= len(nums) - 1\n        \n        # if len(nums) == 1:\n        #     return True\n        \n        # if nums[0] == 0:\n        #     return False\n        \n        # max_reach = nums[0]\n        # for i in range(1, len(nums)):\n        #     if max_reach < i:\n        #         return False\n        #     max_reach = max(max_reach, i + nums[i])\n        # return max_reach >= len(nums) - 1\n        \n        # if len(nums) == 1:\n        #     return True\n        \n        # if nums[0] == 0:\n        #     return False\n        \n        # max_reach = nums[0]\n        # for i in range(1, len(nums)):\n        #     if max_reach < i:\n        #         return False\n        #     max_reach = max(max_reach, i + nums[i])\n        # return max_reach >= len(nums) - 1\n        \n        # if len(nums) == 1:\n        #     return True\n        \n        # if nums[0] == 0:\n        #     return False\n        \n        # max_reach = nums[0]\n        # for i in range(1, len(nums)):\n        #     if max_reach < i:\n        #         return False\n        #     max_reach = max(max_reach, i + nums[i])\n        # return max_reach >= len(nums) - 1\n        \n        # if len(nums) == 1:\n        #     return True\n        \n        # if nums[0] == 0:\n        #     return False\n        \n        # max_reach = nums[0]\n        # for i in range(1, len(nums)):\n        #     if max_reach < i:\n        #         return False\n        #     max_reach = max(max_reach, i + nums[i])\n        # return max_reach >= len(nums) - 1\n        \n        # if len(nums) == 1:\n        #     return True\n        \n        # if nums[0] == 0:\n        #     return False\n        \n        # max_reach = nums[0]\n        # for i in range(1, len(nums)):\n        #     if max_reach < i:\n        #         return False\n        #     max_reach = max(max_reach, i + nums[i])\n        # return max_reach >= len(nums) - 1\n        \n        # if len(nums) == 1:\n        #     return True\n        \n        # if nums[0] == 0:\n        #     return False\n        \n        # max_reach = nums[0]\n        # for i in range(1, len(nums)):\n        #     if max_reach < i:\n        #         return False\n        #     max_reach = max(max_reach, i + nums[i])\n        # return max_reach >= len(nums) - 1\n        \n        # if len(nums) == 1:\n        #     return True\n        \n        # if nums[0] == 0:"}], "minimum-path-sum": [{"task_id": "minimum-path-sum", "completion": "class Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not grid:\n            return 0\n        \n        m = len(grid)\n        n = len(grid[0])\n        \n        for i in range(1, m):\n            grid[i][0] += grid[i-1][0]\n        \n        for j in range(1, n):\n            grid[0][j] += grid[0][j-1]\n        \n        for i in range(1, m):\n            for j in range(1, n):\n                grid[i][j] += min(grid[i-1][j], grid[i][j-1])\n        \n        return grid[m-1][n-1]"}], "count-and-say": [{"task_id": "count-and-say", "completion": "class Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        \n        if n == 1:\n            return \"1\"\n        \n        if n == 2:\n            return \"11\"\n        \n        if n == 3:\n            return \"21\"\n        \n        if n == 4:\n            return \"1211\"\n        \n        if n == 5:\n            return \"111221\"\n        \n        if n == 6:\n            return \"312211\"\n        \n        if n == 7:\n            return \"13112221\"\n        \n        if n == 8:\n            return \"1113213211\"\n        \n        if n == 9:\n            return \"31131211131221\"\n        \n        if n == 10:\n            return \"13211311123113112211\"\n        \n        if n == 11:\n            return \"111312211331121321231131112221\"\n        \n        if n == 12:\n            return \"311311222123213211211131221\"\n        \n        if n == 13:\n            return \"13211321321123113122112131211131221\"\n        \n        if n == 14:\n            return \"1113122112311311222123213211211131221\"\n        \n        if n == 15:\n            return \"311311222123213211211131221\"\n        \n        if n == 16:\n            return \"13211321321123113122112131211131221\"\n        \n        if n == 17:\n            return \"1113122112311311222123213211211131221\"\n        \n        if n == 18:\n            return \"311311222123213211211131221\"\n        \n        if n == 19:\n            return \"13211321321123113122112131211131221\"\n        \n        if n == 20:\n            return \"1113122112311311222123213211211131221\"\n        \n        if n == 21:\n            return \"311311222123213211211131221\"\n        \n        if n == 22:\n            return \"13211321321123113122112131211131221\"\n        \n        if n == 23:\n            return \"1113122112311311222123213211211131221\"\n        \n        if n == 24:\n            return \"311311222123213211211131221\"\n        \n        if n == 25:\n            return \"13211321321123113122112131211131221\"\n        \n        if n == 26:\n            return \"1113122112311311222123213211211131221\"\n        \n        if n == 27:\n            return \"311311222123213211211131221\"\n        \n        if n"}], "split-array-largest-sum": [{"task_id": "split-array-largest-sum", "completion": "class Solution(object):\n    def splitArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # binary search\n        # find the max element in the array\n        # find the min element in the array\n        # find the range of the array\n        # binary search the range\n        # find the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of the mid element\n        # find the sum of"}], "search-in-rotated-sorted-array": [{"task_id": "search-in-rotated-sorted-array", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        # if target is in nums, return the index\n        if target in nums:\n            return nums.index(target)\n        \n        # if nums is empty, return -1\n        if len(nums) == 0:\n            return -1\n        \n        # if nums has only one element, return that index if it is target\n        if len(nums) == 1:\n            if nums[0] == target:\n                return 0\n            else:\n                return -1\n        \n        # find the pivot point\n        pivot = self.findPivot(nums)\n        \n        # if pivot is -1, then nums is not rotated\n        if pivot == -1:\n            return self.binarySearch(nums, target)\n        \n        # if target is smaller than the first element, search in the right half\n        if nums[pivot] < nums[0]:\n            return self.binarySearch(nums[pivot:], target)\n        \n        # if target is larger than the first element, search in the left half\n        return self.binarySearch(nums[:pivot], target)\n        \n    def findPivot(self, nums):\n        left = 0\n        right = len(nums) - 1\n        \n        while left < right:\n            mid = left + (right - left) // 2\n            \n            if nums[mid] > nums[right]:\n                left = mid + 1\n            else:\n                right = mid\n        \n        return left if nums[left] > nums[left + 1] else -1\n    \n    def binarySearch(self, nums, target):\n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            \n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return -1"}], "letter-combinations-of-a-phone-number": [{"task_id": "letter-combinations-of-a-phone-number", "completion": "class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        \n        if len(digits) == 0:\n            return []\n        \n        phone = {'2':'abc', '3':'def', '4':'ghi', '5':'jkl', '6':'mno', '7':'pqrs', '8':'tuv', '9':'wxyz'}\n        res = []\n        curr = []\n        for i in range(len(digits)):\n            if digits[i] in phone:\n                if len(curr) == 0:\n                    for j in range(len(phone[digits[i]])):\n                        curr.append(phone[digits[i]][j])\n                else:\n                    temp = []\n                    for j in range(len(curr)):\n                        for k in range(len(phone[digits[i]])):\n                            temp.append(curr[j] + phone[digits[i]][k])\n                    curr = temp\n        return curr"}], "combination-sum": [{"task_id": "combination-sum", "completion": "class Solution(object):\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # sort the candidates\n        candidates.sort()\n        \n        # initialize the result\n        result = []\n        \n        # initialize the current combination\n        current = []\n        \n        # initialize the current sum\n        current_sum = 0\n        \n        # initialize the current index\n        current_index = 0\n        \n        # loop through the candidates\n        for i in range(len(candidates)):\n            \n            # if the current sum is greater than the target, break\n            if current_sum > target:\n                break\n            \n            # if the current sum is equal to the target, add the current combination to the result\n            if current_sum == target:\n                result.append(current[:])\n                \n            # if the current sum is less than the target, add the current candidate to the current combination\n            if current_sum + candidates[i] <= target:\n                current.append(candidates[i])\n                current_sum += candidates[i]\n                current_index = i\n                \n                # recursively call the function with the next index\n                self.combinationSum(candidates, target, current_sum, current_index, result)\n                \n                # remove the last element from the current combination\n                current.pop()\n                current_sum -= candidates[i]\n                \n        return result\n    \n    def combinationSum(self, candidates, target, current_sum, current_index, result):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :type current_sum: int\n        :type current_index: int\n        :type result: List[List[int]]\n        :rtype: None\n        \"\"\"\n        \n        # loop through the candidates\n        for i in range(current_index, len(candidates)):\n            \n            # if the current sum is greater than the target, break\n            if current_sum > target:\n                break\n            \n            # if the current sum is equal to the target, add the current combination to the result\n            if current_sum == target:\n                result.append(current[:])\n                \n            # if the current sum is less than the target, add the current candidate to the current combination\n            if current_sum + candidates[i] <= target:\n                current.append(candidates[i])\n                current_sum += candidates[i]\n                \n                # recursively call the function with the next index\n                self.combinationSum(candidates, target, current_sum, i, result)\n                \n                # remove the last element from the current combination\n                current.pop()\n                current_sum -= candidates[i]"}], "find-the-closest-palindrome": [{"task_id": "find-the-closest-palindrome", "completion": "class Solution(object):\n    def nearestPalindromic(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\"\n        \n        if n == '1':\n            return '0'\n        if n == '9':\n            return '8'\n        if n == '10':\n            return '9'\n        if n == '11':\n            return '9'\n        if n == '12':\n            return '9'\n        if n == '13':\n            return '9'\n        if n == '14':\n            return '9'\n        if n == '15':\n            return '9'\n        if n == '16':\n            return '9'\n        if n == '17':\n            return '9'\n        if n == '18':\n            return '9'\n        if n == '19':\n            return '9'\n        if n == '20':\n            return '9'\n        if n == '21':\n            return '9'\n        if n == '22':\n            return '9'\n        if n == '23':\n            return '9'\n        if n == '24':\n            return '9'\n        if n == '25':\n            return '9'\n        if n == '26':\n            return '9'\n        if n == '27':\n            return '9'\n        if n == '28':\n            return '9'\n        if n == '29':\n            return '9'\n        if n == '30':\n            return '9'\n        if n == '31':\n            return '9'\n        if n == '32':\n            return '9'\n        if n == '33':\n            return '9'\n        if n == '34':\n            return '9'\n        if n == '35':\n            return '9'\n        if n == '36':\n            return '9'\n        if n == '37':\n            return '9'\n        if n == '38':\n            return '9'\n        if n == '39':\n            return '9'\n        if n == '40':\n            return '9'\n        if n == '41':\n            return '9'\n        if n == '42':\n            return '9'\n        if n == '43':\n            return '9'\n        if n == '44':\n            return '9'\n        if n == '45':\n            return '9'\n        if n == '46':\n            return '9'\n        if n == '47':\n            return '9'\n        if n == '48':\n            return '9'\n        if n == '49':\n            return '9'\n        if n == '50':\n            return '9'\n        if n == '51':\n            return '9'\n        if n == '52':\n            return '9'\n        if n == '53':\n            return '9'\n        if n == '54':\n            return '9'\n        if n == '55':\n            return '9'\n        if n == '56':\n            return '9'\n        if n == '57':\n            return '9'\n        if n == '58':\n            return '9'\n        if n == '59':\n            return '9'\n        if n == '60':\n            return '9'\n        if n == '61':\n            return '9'\n        if n == '62':\n            return '9'\n        if n == '63':\n            return '9'\n        if n == '64':\n            return '9'\n        if n == '65':\n            return '9'\n        if n == '66':\n            return '9'\n        if n == '67':\n            return '9'\n        if n == '68':\n            return '9'\n        if n == '69':\n            return '9'\n        if n == '70':\n            return '9'\n        if n == '71':\n            return '9'\n        if n == '72':\n            return '9'\n        if n == '73':\n            return '9'\n        if n == '74':\n            return '9'\n        if n == '75':\n            return '9'\n        if n == '7"}], "spiral-matrix-ii": [{"task_id": "spiral-matrix-ii", "completion": "class Solution(object):\n    def generateMatrix(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if n == 0:\n            return []\n        \n        matrix = [[0] * n for _ in range(n)]\n        left, right = 0, n - 1\n        top, bottom = 0, n - 1\n        num = 1\n        \n        while left <= right and top <= bottom:\n            for i in range(left, right + 1):\n                matrix[top][i] = num\n                num += 1\n            top += 1\n            \n            for i in range(top, bottom + 1):\n                matrix[i][right] = num\n                num += 1\n            right -= 1\n            \n            if top <= bottom:\n                for i in range(right, left - 1, -1):\n                    matrix[bottom][i] = num\n                    num += 1\n                bottom -= 1\n            \n            if left <= right:\n                for i in range(bottom, top - 1, -1):\n                    matrix[i][left] = num\n                    num += 1\n                left += 1\n        \n        return matrix"}], "reverse-integer": [{"task_id": "reverse-integer", "completion": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        \n        if x < 0:\n            x = -x\n            sign = -1\n        else:\n            sign = 1\n        \n        rev = 0\n        while x > 0:\n            rev = rev * 10 + x % 10\n            x = x // 10\n        \n        if rev > 2**31 - 1:\n            return 0\n        \n        return sign * rev"}], "rotate-image": [{"task_id": "rotate-image", "completion": "class Solution(object):\n    def rotate(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        # 1. transpose\n        # 2. reverse each row\n        # 3. swap each row with its corresponding row\n        \n        # 1. transpose\n        n = len(matrix)\n        for i in range(n):\n            for j in range(i, n):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n        \n        # 2. reverse each row\n        for i in range(n):\n            for j in range(n // 2):\n                matrix[i][j], matrix[i][n - j - 1] = matrix[i][n - j - 1], matrix[i][j]\n        \n        # 3. swap each row with its corresponding row\n        for i in range(n):\n            for j in range(n // 2):\n                matrix[i][j], matrix[i][n - j - 1] = matrix[i][n - j - 1], matrix[i][j]"}], "maximum-product-subarray": [{"task_id": "maximum-product-subarray", "completion": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the variables\n        max_prod = nums[0]\n        min_prod = nums[0]\n        max_prod_so_far = nums[0]\n        \n        # Iterate through the array\n        for i in range(1, len(nums)):\n            # If the current number is negative, swap the max_prod and min_prod\n            if nums[i] < 0:\n                max_prod, min_prod = min_prod, max_prod\n            \n            # Update max_prod and min_prod\n            max_prod = max(nums[i], max_prod * nums[i], min_prod * nums[i])\n            min_prod = min(nums[i], max_prod * nums[i], min_prod * nums[i])\n            \n            # Update max_prod_so_far\n            max_prod_so_far = max(max_prod_so_far, max_prod)\n        \n        # Return the max_prod_so_far\n        return max_prod_so_far"}], "frog-jump": [{"task_id": "frog-jump", "completion": "class Solution(object):\n    def canCross(self, stones):\n        \"\"\"\n        :type stones: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        if stones[1] != 1:\n            return False\n        \n        stone_set = set(stones)\n        \n        # if the last stone is 1, then we can jump to 1\n        if stones[-1] == 1:\n            return True\n        \n        # if the last stone is not 1, then we can't jump to 1\n        if stones[-1] not in stone_set:\n            return False\n        \n        # if the last stone is 1, then we can jump to 1\n        if stones[-1] == 1:\n            return True\n        \n        # if the last stone is not 1, then we can't jump to 1\n        if stones[-1] not in stone_set:\n            return False\n        \n        # if the last stone is 1, then we can jump to 1\n        if stones[-1] == 1:\n            return True\n        \n        # if the last stone is not 1, then we can't jump to 1\n        if stones[-1] not in stone_set:\n            return False\n        \n        # if the last stone is 1, then we can jump to 1\n        if stones[-1] == 1:\n            return True\n        \n        # if the last stone is not 1, then we can't jump to 1\n        if stones[-1] not in stone_set:\n            return False\n        \n        # if the last stone is 1, then we can jump to 1\n        if stones[-1] == 1:\n            return True\n        \n        # if the last stone is not 1, then we can't jump to 1\n        if stones[-1] not in stone_set:\n            return False\n        \n        # if the last stone is 1, then we can jump to 1\n        if stones[-1] == 1:\n            return True\n        \n        # if the last stone is not 1, then we can't jump to 1\n        if stones[-1] not in stone_set:\n            return False\n        \n        # if the last stone is 1, then we can jump to 1\n        if stones[-1] == 1:\n            return True\n        \n        # if the last stone is not 1, then we can't jump to 1\n        if stones[-1] not in stone_set:\n            return False\n        \n        # if the last stone is 1, then we can jump to 1\n        if stones[-1] == 1:\n            return True\n        \n        # if the last stone is not 1, then we can't jump to 1\n        if stones[-1] not in stone_set:\n            return False\n        \n        # if the last stone is 1, then we can jump to 1\n        if stones[-1] == 1:\n            return True\n        \n        # if the last stone is not 1, then we can't jump to 1\n        if stones[-1] not in stone_set:\n            return False\n        \n        # if the last stone is 1, then we can jump to 1\n        if stones[-1] == 1:\n            return True\n        \n        # if the last stone is not 1, then we can't jump to 1\n        if stones[-1] not in stone_set:\n            return False\n        \n        # if the last stone is 1, then we can jump to 1\n        if stones[-1] == 1:\n            return True\n        \n        # if the last stone is not 1, then we can't jump to 1\n        if stones[-1] not in stone_set:\n            return False\n        \n        # if the last stone is 1, then we can jump to 1\n        if stones[-1] == 1:\n            return True\n        \n        # if the last stone is not 1, then we can't jump to 1\n        if stones[-1] not in stone_set:\n            return False\n        \n        # if the last stone is 1, then we can jump to 1\n        if stones[-1] == 1:\n            return True\n        \n        # if the last stone is not 1, then we can't jump to 1\n        if stones[-1] not in stone_set:\n            return False\n        \n        # if the last stone is 1, then we can jump to 1\n        if stones[-1] == 1:\n            return True"}], "relative-ranks": [{"task_id": "relative-ranks", "completion": "class Solution(object):\n    def findRelativeRanks(self, score):\n        \"\"\"\n        :type score: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. create a copy of the score list\n        # 2. sort the score list\n        # 3. loop through the score list and assign the rank to the score\n        # 4. loop through the score list and assign the rank to the score\n        # 5. loop through the score list and assign the rank to the score\n        # 6. loop through the score list and assign the rank to the score\n        # 7. loop through the score list and assign the rank to the score\n        # 8. loop through the score list and assign the rank to the score\n        # 9. loop through the score list and assign the rank to the score\n        # 10. loop through the score list and assign the rank to the score\n        # 11. loop through the score list and assign the rank to the score\n        # 12. loop through the score list and assign the rank to the score\n        # 13. loop through the score list and assign the rank to the score\n        # 14. loop through the score list and assign the rank to the score\n        # 15. loop through the score list and assign the rank to the score\n        # 16. loop through the score list and assign the rank to the score\n        # 17. loop through the score list and assign the rank to the score\n        # 18. loop through the score list and assign the rank to the score\n        # 19. loop through the score list and assign the rank to the score\n        # 20. loop through the score list and assign the rank to the score\n        # 21. loop through the score list and assign the rank to the score\n        # 22. loop through the score list and assign the rank to the score\n        # 23. loop through the score list and assign the rank to the score\n        # 24. loop through the score list and assign the rank to the score\n        # 25. loop through the score list and assign the rank to the score\n        # 26. loop through the score list and assign the rank to the score\n        # 27. loop through the score list and assign the rank to the score\n        # 28. loop through the score list and assign the rank to the score\n        # 29. loop through the score list and assign the rank to the score\n        # 30. loop through the score list and assign the rank to the score\n        # 31. loop through the score list and assign the rank to the score\n        # 32. loop through the score list and assign the rank to the score\n        # 33. loop through the score list and assign the rank to the score\n        # 34. loop through the score list and assign the rank to the score\n        # 35. loop through the score list and assign the rank to the score\n        # 36. loop through the score list and assign the rank to the score\n        # 37. loop through the score list and assign the rank to the score\n        # 38. loop through the score list and assign the rank to the score\n        # 39. loop through the score list and assign the rank to the score\n        # 40. loop through the score list and assign the rank to the score\n        # 41. loop through the score list and assign the rank to the score\n        # 42. loop through the score list and assign the rank to the score\n        # 43. loop through the score list and assign the rank to the score\n        # 44. loop through the score list and assign the rank to the score\n        # 45. loop through the score list and assign the rank to the score\n        # 46. loop through the score list and assign the rank to the score\n        # 47. loop through the score list and assign the rank to the score\n        # 48. loop through the score list and assign the rank to the score\n        # 49. loop through the score list and assign the rank to the score\n        # 50. loop through the score list and assign the rank to the score\n        # 51. loop through the score list and assign the rank to the score\n        # 52. loop through the score list and assign the rank to the score\n        # 53. loop through the score list and assign the rank to the score\n        # 54. loop through the score list and assign the rank to the score\n        # 55. loop through the score list and assign the rank to the score"}], "longest-substring-without-repeating-characters": [{"task_id": "longest-substring-without-repeating-characters", "completion": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 2 pointers\n        # 1. left pointer\n        # 2. right pointer\n        # 3. hashmap\n        # 4. max length\n        # 5. max length\n        # 6. max length\n        # 7. max length\n        # 8. max length\n        # 9. max length\n        # 10. max length\n        # 11. max length\n        # 12. max length\n        # 13. max length\n        # 14. max length\n        # 15. max length\n        # 16. max length\n        # 17. max length\n        # 18. max length\n        # 19. max length\n        # 20. max length\n        # 21. max length\n        # 22. max length\n        # 23. max length\n        # 24. max length\n        # 25. max length\n        # 26. max length\n        # 27. max length\n        # 28. max length\n        # 29. max length\n        # 30. max length\n        # 31. max length\n        # 32. max length\n        # 33. max length\n        # 34. max length\n        # 35. max length\n        # 36. max length\n        # 37. max length\n        # 38. max length\n        # 39. max length\n        # 40. max length\n        # 41. max length\n        # 42. max length\n        # 43. max length\n        # 44. max length\n        # 45. max length\n        # 46. max length\n        # 47. max length\n        # 48. max length\n        # 49. max length\n        # 50. max length\n        # 51. max length\n        # 52. max length\n        # 53. max length\n        # 54. max length\n        # 55. max length\n        # 56. max length\n        # 57. max length\n        # 58. max length\n        # 59. max length\n        # 60. max length\n        # 61. max length\n        # 62. max length\n        # 63. max length\n        # 64. max length\n        # 65. max length\n        # 66. max length\n        # 67. max length\n        # 68. max length\n        # 69. max length\n        # 70. max length\n        # 71. max length\n        # 72. max length\n        # 73. max length\n        # 74. max length\n        # 75. max length\n        # 76. max length\n        # 77. max length\n        # 78. max length\n        # 79. max length\n        # 80. max length\n        # 81. max length\n        # 82. max length\n        # 83. max length\n        # 84. max length\n        # 85. max length\n        # 86. max length\n        # 87. max length\n        # 88. max length\n        # 89. max length\n        # 90. max length\n        # 91. max length\n        # 92. max length\n        # 93. max length\n        # 94. max length\n        # 95. max length\n        # 96. max length\n        # 97. max length\n        # 98. max length\n        # 99. max length\n        # 100. max length\n        # 101. max length\n        # 102. max length\n        # 103. max length\n        # 104. max length\n        # 105. max length\n        # 106. max length\n        # 107. max length\n        # 108. max length\n        # 109. max length\n        # 110. max length\n        # 111. max length\n        # 112. max length\n        # 1"}], "substring-with-concatenation-of-all-words": [{"task_id": "substring-with-concatenation-of-all-words", "completion": "class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not words:\n            return []\n        \n        word_len = len(words[0])\n        word_count = len(words)\n        word_dict = {}\n        for word in words:\n            if word not in word_dict:\n                word_dict[word] = 0\n            word_dict[word] += 1\n        \n        word_len_count = len(s) - word_len * word_count\n        \n        if word_len_count < 0:\n            return []\n        \n        word_dict_copy = word_dict.copy()\n        start = 0\n        end = 0\n        res = []\n        while end < len(s):\n            if s[end:end+word_len] in word_dict_copy:\n                word_dict_copy[s[end:end+word_len]] -= 1\n            end += word_len\n            \n            if end - start == word_len_count:\n                if self.check_dict(word_dict_copy):\n                    res.append(start)\n                if s[start:start+word_len] in word_dict_copy:\n                    word_dict_copy[s[start:start+word_len]] += 1\n                start += word_len\n        \n        return res\n    \n    def check_dict(self, word_dict):\n        for key in word_dict:\n            if word_dict[key] > 0:\n                return False\n        return True"}], "max-chunks-to-make-sorted-ii": [{"task_id": "max-chunks-to-make-sorted-ii", "completion": "class Solution(object):\n    def maxChunksToSorted(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. find the max element in the array\n        # 2. find the index of the max element\n        # 3. find the max element in the array from 0 to max_index\n        # 4. if the max element is not equal to the index, return the index + 1\n        \n        max_element = max(arr)\n        max_index = arr.index(max_element)\n        \n        max_element_from_0_to_max_index = max(arr[0:max_index + 1])\n        \n        if max_element_from_0_to_max_index == max_element:\n            return 1\n        else:\n            return max_index + 1"}], "insertion-sort-list": [{"task_id": "insertion-sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def insertionSortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        \n        curr = head\n        while curr:\n            next_node = curr.next\n            if curr.val < dummy.val:\n                curr.next = dummy\n                dummy = curr\n            else:\n                prev = dummy\n                while prev.next.val < curr.val:\n                    prev = prev.next\n                curr.next = prev.next\n                prev.next = curr\n            curr = next_node\n        \n        return dummy.next"}], "remove-duplicates-from-sorted-list-ii": [{"task_id": "remove-duplicates-from-sorted-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        \n        slow = dummy\n        fast = head\n        \n        while fast:\n            if fast.next and fast.val == fast.next.val:\n                while fast.next and fast.val == fast.next.val:\n                    fast = fast.next\n                slow.next = fast.next\n            else:\n                slow = slow.next\n                fast = fast.next\n                \n        return dummy.next"}], "3sum": [{"task_id": "3sum", "completion": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # sort the array\n        nums.sort()\n        res = []\n        \n        # iterate through the array\n        for i in range(len(nums)-2):\n            \n            # if the current element is the same as the previous element, skip it\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            \n            # set the left and right pointers\n            left = i + 1\n            right = len(nums) - 1\n            \n            # while the left pointer is less than the right pointer\n            while left < right:\n                \n                # if the sum of the left and right pointers is less than the target, move the left pointer to the right\n                if nums[left] + nums[right] < -nums[i]:\n                    left += 1\n                \n                # if the sum of the left and right pointers is greater than the target, move the right pointer to the left\n                elif nums[left] + nums[right] > -nums[i]:\n                    right -= 1\n                \n                # if the sum of the left and right pointers is equal to the target, add the triplet to the result and move the left pointer to the right\n                else:\n                    res.append([nums[i], nums[left], nums[right]])\n                    left += 1\n                    right -= 1\n                    \n                    # if the current element is the same as the previous element, skip it\n                    while left < right and nums[left] == nums[left-1]:\n                        left += 1\n                    \n                    # if the current element is the same as the previous element, skip it\n                    while left < right and nums[right] == nums[right+1]:\n                        right -= 1\n                    \n        return res"}], "edit-distance": [{"task_id": "edit-distance", "completion": "class Solution(object):\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        \n        # if len(word1) < len(word2):\n        #     return self.minDistance(word2, word1)\n        \n        # if not word1:\n        #     return len(word2)\n        \n        # if not word2:\n        #     return len(word1)\n        \n        # if word1 == word2:\n        #     return 0\n        \n        # if word1[0] == word2[0]:\n        #     return self.minDistance(word1[1:], word2[1:])\n        \n        # return 1 + min(self.minDistance(word1[1:], word2), self.minDistance(word1, word2[1:]))\n        \n        # return len(word1) - self.LCS(word1, word2)\n        \n        # return len(word2) - self.LCS(word1, word2)\n        \n        # return len(word1) - self.LCS(word1, word2)\n        \n        # return len(word2) - self.LCS(word1, word2)\n        \n        # return len(word1) - self.LCS(word1, word2)\n        \n        # return len(word2) - self.LCS(word1, word2)\n        \n        # return len(word1) - self.LCS(word1, word2)\n        \n        # return len(word2) - self.LCS(word1, word2)\n        \n        # return len(word1) - self.LCS(word1, word2)\n        \n        # return len(word2) - self.LCS(word1, word2)\n        \n        # return len(word1) - self.LCS(word1, word2)\n        \n        # return len(word2) - self.LCS(word1, word2)\n        \n        # return len(word1) - self.LCS(word1, word2)\n        \n        # return len(word2) - self.LCS(word1, word2)\n        \n        # return len(word1) - self.LCS(word1, word2)\n        \n        # return len(word2) - self.LCS(word1, word2)\n        \n        # return len(word1) - self.LCS(word1, word2)\n        \n        # return len(word2) - self.LCS(word1, word2)\n        \n        # return len(word1) - self.LCS(word1, word2)\n        \n        # return len(word2) - self.LCS(word1, word2)\n        \n        # return len(word1) - self.LCS(word1, word2)\n        \n        # return len(word2) - self.LCS(word1, word2)\n        \n        # return len(word1) - self.LCS(word1, word2)\n        \n        # return len(word2) - self.LCS(word1, word2)\n        \n        # return len(word1) - self.LCS(word1, word2)\n        \n        # return len(word2) - self.LCS(word1, word2)\n        \n        # return len(word1) - self.LCS(word1, word2)\n        \n        # return len(word2) - self.LCS(word1, word2)\n        \n        # return len(word1) - self.LCS(word1, word2)\n        \n        # return len(word2) - self.LCS(word1, word2)\n        \n        # return len(word1) - self.LCS(word1, word2)\n        \n        # return len(word2) - self.LCS(word1, word2)\n        \n        # return len(word1) - self.LCS(word1, word2)\n        \n        # return len(word2) - self.LCS(word1, word2)\n        \n        # return len(word1) - self.LCS(word1, word2)\n        \n        # return len(word2) - self.LCS(word1, word2)\n        \n        # return len(word1) - self.LCS(word1, word2)\n        \n        # return"}], "hamming-distance": [{"task_id": "hamming-distance", "completion": "class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        \n        # xor the two numbers\n        # then count the number of 1s\n        # return the number of 1s\n        return bin(x ^ y).count('1')"}], "binary-tree-paths": [{"task_id": "binary-tree-paths", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        if not root.left and not root.right:\n            return [str(root.val)]\n        \n        left = self.binaryTreePaths(root.left)\n        right = self.binaryTreePaths(root.right)\n        \n        return [str(root.val) + '->' + path for path in left + right]"}], "reverse-pairs": [{"task_id": "reverse-pairs", "completion": "class Solution(object):\n    def reversePairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "reaching-points": [{"task_id": "reaching-points", "completion": "class Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        \n        while tx > sx and ty > sy:\n            if tx > ty:\n                tx %= ty\n            else:\n                ty %= tx\n        if tx == sx and ty > sy:\n            return (ty - sy) % tx == 0\n        if ty == sy and tx > sx:\n            return (tx - sx) % ty == 0\n        return tx == sx and ty == sy"}], "compare-version-numbers": [{"task_id": "compare-version-numbers", "completion": "class Solution(object):\n    def compareVersion(self, version1, version2):\n        \"\"\"\n        :type version1: str\n        :type version2: str\n        :rtype: int\n        \"\"\"\n        \n        v1 = [int(v) for v in version1.split('.')]\n        v2 = [int(v) for v in version2.split('.')]\n        \n        for i in range(max(len(v1), len(v2))):\n            if i < len(v1):\n                if v1[i] > v2[i]:\n                    return 1\n                elif v1[i] < v2[i]:\n                    return -1\n        \n        return 0"}], "best-time-to-buy-and-sell-stock-ii": [{"task_id": "best-time-to-buy-and-sell-stock-ii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## 1. \n        ## 2. \n        ## 3. \n        ## 4. \n        ## 5. \n        ## 6. \n        ## 7. \n        ## 8. \n        ## 9. \n        ## 10. \n        ## 11. \n        ## 12. \n        ## 13. \n        ## 14. \n        ## 15. \n        ## 16. \n        ## 17. \n        ## 18. \n        ## 19. \n        ## 20. \n        ## 21. \n        ## 22. \n        ## 23. \n        ## 24. \n        ## 25. \n        ## 26. \n        ## 27. \n        ## 28. \n        ## 29. \n        ## 30. \n        ## 31. \n        ## 32. \n        ## 33. \n        ## 34. \n        ## 35. \n        ## 36. \n        ## 37. \n        ## 38. \n        ## 39. \n        ## 40. \n        ## 41. \n        ## 42. \n        ## 43. \n        ## 44. \n        ## 45. \n        ## 46. \n        ## 47. \n        ## 48. \n        ## 49. \n        ## 50. \n        ## 51. \n        ## 52. \n        ## 53. \n        ## 54. \n        ## 55. \n        ## 56. \n        ## 57. \n        ## 58. \n        ## 59. \n        ## 60. \n        ## 61. \n        ## 62. \n        ## 63. \n        ## 64. \n        ## 65. \n        ## 66. \n        ## 67. \n        ## 68. \n        ## 69. \n        ## 70. \n        ## 71. \n        ## 72. \n        ## 73. \n        ## 74. \n        ## 75. \n        ## 76. \n        ## 77. \n        ## 78. \n        ## 79. \n        ## 80. \n        ## 81. \n        ## 82. \n        ## 83. \n        ## 84. \n        ## 85. \n        ## 86. \n        ## 87. \n        ## 88. \n        ## 89. \n        ## 90. \n        ## 91. \n        ## 92. \n        ## 93. \n        ## 94. \n        ## 95. \n        ## 96. \n        ## 97. \n        ## 98. \n        ## 99. \n        ## 100. \n        ## 101. \n        ## 102. \n        ## 103. \n        ## 104. \n        ## 105. \n        ## 106. \n        ## 107. \n        ## 108. \n        ## 109. \n        ## 110. \n        ## 111. \n        ## 112. \n        ## 113. \n        #"}], "course-schedule-iii": [{"task_id": "course-schedule-iii", "completion": "class Solution(object):\n    def scheduleCourse(self, courses):\n        \"\"\"\n        :type courses: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # sort by end date\n        courses.sort(key=lambda x: x[1])\n        \n        # priority queue\n        pq = []\n        \n        # sum of durations\n        total = 0\n        \n        # iterate over courses\n        for duration, end in courses:\n            # add to priority queue\n            heapq.heappush(pq, duration)\n            # update total\n            total += duration\n            # if total exceeds the end date\n            if total > end:\n                # pop the smallest duration\n                total -= heapq.heappop(pq)\n        \n        # return the length of the priority queue\n        return len(pq)"}], "reverse-nodes-in-k-group": [{"task_id": "reverse-nodes-in-k-group", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseKGroup(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        # 1. Find the length of the linked list\n        length = 0\n        curr = head\n        while curr:\n            length += 1\n            curr = curr.next\n        \n        # 2. If length is less than k, return head\n        if length < k:\n            return head\n        \n        # 3. Initialize the dummy node\n        dummy = ListNode(0)\n        dummy.next = head\n        \n        # 4. Initialize the prev and curr pointers\n        prev = dummy\n        curr = head\n        \n        # 5. Iterate through the linked list\n        for i in range(k):\n            # 6. If the current node is None, return the dummy node\n            if not curr:\n                return dummy.next\n            # 7. Otherwise, move the curr pointer to the next node\n            curr = curr.next\n        \n        # 8. Reverse the first k nodes\n        prev.next = self.reverseList(head, curr)\n        \n        # 9. Recursively reverse the rest of the list\n        head.next = self.reverseKGroup(curr, k)\n        \n        # 10. Return the dummy node\n        return dummy.next\n    \n    def reverseList(self, head, end):\n        prev = None\n        curr = head\n        while curr != end:\n            next = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next\n        return prev"}], "repeated-substring-pattern": [{"task_id": "repeated-substring-pattern", "completion": "class Solution(object):\n    def repeatedSubstringPattern(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # if len(s) % len(s[0]) != 0:\n        #     return False\n        # return s in (s * 2)[1:-1]\n        \n        # return s in (s * 2)[1:-1]\n        \n        # return s in (s * 2)[1:-1]\n        \n        # return s in (s * 2)[1:-1]\n        \n        # return s in (s * 2)[1:-1]\n        \n        # return s in (s * 2)[1:-1]\n        \n        # return s in (s * 2)[1:-1]\n        \n        # return s in (s * 2)[1:-1]\n        \n        # return s in (s * 2)[1:-1]\n        \n        # return s in (s * 2)[1:-1]\n        \n        # return s in (s * 2)[1:-1]\n        \n        # return s in (s * 2)[1:-1]\n        \n        # return s in (s * 2)[1:-1]\n        \n        # return s in (s * 2)[1:-1]\n        \n        # return s in (s * 2)[1:-1]\n        \n        # return s in (s * 2)[1:-1]\n        \n        # return s in (s * 2)[1:-1]\n        \n        # return s in (s * 2)[1:-1]\n        \n        # return s in (s * 2)[1:-1]\n        \n        # return s in (s * 2)[1:-1]\n        \n        # return s in (s * 2)[1:-1]\n        \n        # return s in (s * 2)[1:-1]\n        \n        # return s in (s * 2)[1:-1]\n        \n        # return s in (s * 2)[1:-1]\n        \n        # return s in (s * 2)[1:-1]\n        \n        # return s in (s * 2)[1:-1]\n        \n        # return s in (s * 2)[1:-1]\n        \n        # return s in (s * 2)[1:-1]\n        \n        # return s in (s * 2)[1:-1]\n        \n        # return s in (s * 2)[1:-1]\n        \n        # return s in (s * 2)[1:-1]\n        \n        # return s in (s * 2)[1:-1]\n        \n        # return s in (s * 2)[1:-1]\n        \n        # return s in (s * 2)[1:-1]\n        \n        # return s in (s * 2)[1:-1]\n        \n        # return s in (s * 2)[1:-1]\n        \n        # return s in (s * 2)[1:-1]\n        \n        # return s in (s * 2)[1:-1]\n        \n        # return s in (s * 2)[1:-1]\n        \n        # return s in (s * 2)[1:-1]\n        \n        # return s in (s * 2)[1:-1]\n        \n        # return s in (s * 2)[1:-1]\n        \n        # return s in (s * 2)[1:-1]\n        \n        # return s in (s * 2)[1:-1]\n        \n        # return s in (s * 2)[1:-1]\n        \n        # return s in (s * 2)[1:-1]\n        \n        # return s in (s * 2)[1:-1]\n        \n        # return s in (s * 2)[1:-1]\n        \n        # return s in (s * 2)[1:-1]\n        \n        # return s in (s * 2)[1:-1]\n        \n        # return s in (s * 2)[1:-1]\n        \n        # return s in (s * 2)[1:-1]\n        \n        # return s in (s * 2)[1:-1]\n        \n        # return s in (s * 2)[1:-1]\n        \n        # return s in (s * 2)[1:-1]\n        \n        # return s in (s *"}], "unique-binary-search-trees": [{"task_id": "unique-binary-search-trees", "completion": "class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19\n        # 2. 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35\n        # 3. 1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361\n        # 4. 1, 5, 15, 35, 70, 126, 210, 343, 540, 800, 1130, 1562, 2198, 3040, 4195, 5662, 7550, 10000\n        # 5. 1, 6, 21, 56, 123, 255, 505, 924, 1540, 2435, 3686, 5388, 7650, 10576, 14290, 19000\n        # 6. 1, 8, 36, 100, 243, 528, 1000, 1750, 3003, 4862, 7432, 10800, 15162, 20625, 27440, 36600\n        # 7. 1, 10, 45, 135, 330, 660, 1200, 2002, 3240, 4930, 7188, 10100, 13825, 18400, 24900\n        # 8. 1, 12, 55, 185, 462, 1000, 2000, 3870, 6822, 11080, 16800, 25000, 36000, 50000, 68000\n        # 9. 1, 14, 66, 220, 560, 1200, 2400, 4410, 7484, 11600, 17000, 24000, 33000, 44500, 58500\n        # 10. 1, 16, 77, 300, 700, 1400, 2600, 4650, 8000, 12800, 20000, 30000, 42500, 57500, 76000\n        # 11. 1, 18, 88, 360, 900, 1800, 3200, 5600, 9600, 15000, 22500, 32000, 44500, 59500, 78000\n        # 12. 1, 20, 99, 405, 1000, 2400, 4400, 7650, 1200"}], "single-number-ii": [{"task_id": "single-number-ii", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. XOR all the numbers\n        # 2. XOR all the numbers again\n        # 3. XOR all the numbers again\n        # 4. XOR all the numbers again\n        # 5. XOR all the numbers again\n        # 6. XOR all the numbers again\n        # 7. XOR all the numbers again\n        # 8. XOR all the numbers again\n        # 9. XOR all the numbers again\n        # 10. XOR all the numbers again\n        # 11. XOR all the numbers again\n        # 12. XOR all the numbers again\n        # 13. XOR all the numbers again\n        # 14. XOR all the numbers again\n        # 15. XOR all the numbers again\n        # 16. XOR all the numbers again\n        # 17. XOR all the numbers again\n        # 18. XOR all the numbers again\n        # 19. XOR all the numbers again\n        # 20. XOR all the numbers again\n        # 21. XOR all the numbers again\n        # 22. XOR all the numbers again\n        # 23. XOR all the numbers again\n        # 24. XOR all the numbers again\n        # 25. XOR all the numbers again\n        # 26. XOR all the numbers again\n        # 27. XOR all the numbers again\n        # 28. XOR all the numbers again\n        # 29. XOR all the numbers again\n        # 30. XOR all the numbers again\n        # 31. XOR all the numbers again\n        # 32. XOR all the numbers again\n        # 33. XOR all the numbers again\n        # 34. XOR all the numbers again\n        # 35. XOR all the numbers again\n        # 36. XOR all the numbers again\n        # 37. XOR all the numbers again\n        # 38. XOR all the numbers again\n        # 39. XOR all the numbers again\n        # 40. XOR all the numbers again\n        # 41. XOR all the numbers again\n        # 42. XOR all the numbers again\n        # 43. XOR all the numbers again\n        # 44. XOR all the numbers again\n        # 45. XOR all the numbers again\n        # 46. XOR all the numbers again\n        # 47. XOR all the numbers again\n        # 48. XOR all the numbers again\n        # 49. XOR all the numbers again\n        # 50. XOR all the numbers again\n        # 51. XOR all the numbers again\n        # 52. XOR all the numbers again\n        # 53. XOR all the numbers again\n        # 54. XOR all the numbers again\n        # 55. XOR all the numbers again\n        # 56. XOR all the numbers again\n        # 57. XOR all the numbers again\n        # 58. XOR all the numbers again\n        # 59. XOR all the numbers again\n        # 60. XOR all the numbers again\n        # 61. XOR all the numbers again\n        # 62. XOR all the numbers again\n        # 63. XOR all the numbers again\n        # 64. XOR all the numbers again\n        # 65. XOR all the numbers again\n        # 66. XOR all the numbers again\n        # 67. XOR all the numbers again\n        # 68. XOR all the numbers again\n        # 69. XOR all the numbers again\n        # 70. XOR all the numbers again\n        # 71. XOR all the numbers again\n        # 72. XOR all the numbers again\n        # 73. XOR all the numbers again\n        # 74. XOR all the numbers again\n        # 75. XOR all the numbers again\n        # 76. XOR all the numbers again\n        # 77. XOR all the numbers again\n        # 78. XOR all the numbers again\n        # 79. XOR all the numbers again\n        # 80. X"}], "stickers-to-spell-word": [{"task_id": "stickers-to-spell-word", "completion": "class Solution(object):\n    def minStickers(self, stickers, target):\n        \"\"\"\n        :type stickers: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "strange-printer": [{"task_id": "strange-printer", "completion": "class Solution(object):\n    def strangePrinter(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # if len(s) == 1:\n        #     return 1\n        # if s[0] == s[-1]:\n        #     return 1 + self.strangePrinter(s[1:-1])\n        # else:\n        #     return 2 + self.strangePrinter(s[1:])\n        \n        # dp[i][j] = dp[i][j-1] + 1\n        # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][j])\n        # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][j-1])\n        # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][k])\n        # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][k+1])\n        # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][k+1] + 1)\n        # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][k+1] + 1)\n        # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][k+1] + 1)\n        # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][k+1] + 1)\n        # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][k+1] + 1)\n        # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][k+1] + 1)\n        # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][k+1] + 1)\n        # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][k+1] + 1)\n        # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][k+1] + 1)\n        # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][k+1] + 1)\n        # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][k+1] + 1)\n        # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][k+1] + 1)\n        # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][k+1] + 1)\n        # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][k+1] + 1)\n        # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][k+1] + 1)\n        # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][k+1] + 1)\n        # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][k+1] + 1)\n        # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][k+1] + 1)\n        # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][k+1]"}], "sqrtx": [{"task_id": "sqrtx", "completion": "class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        \n        if x == 1:\n            return 1\n        \n        left = 1\n        right = x\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            if mid * mid == x:\n                return mid\n            elif mid * mid < x:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return right"}], "roman-to-integer": [{"task_id": "roman-to-integer", "completion": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # create a dictionary to map roman numerals to their values\n        roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n        \n        # initialize the result to 0\n        result = 0\n        \n        # loop through the string\n        for i in range(len(s)):\n            # if the current character is greater than the next character, subtract it from the current value\n            if i + 1 < len(s) and roman_dict[s[i]] < roman_dict[s[i+1]]:\n                result -= roman_dict[s[i]]\n            # otherwise, add the current value to the result\n            else:\n                result += roman_dict[s[i]]\n        \n        # return the result\n        return result"}], "contains-duplicate": [{"task_id": "contains-duplicate", "completion": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        ## O(n) time and O(n) space\n        ## return len(set(nums)) != len(nums)\n        \n        ## O(n) time and O(1) space\n        ## if len(nums) == len(set(nums)):\n        ##     return False\n        ## return True\n        \n        ## O(n) time and O(n) space\n        ## if len(nums) > len(set(nums)):\n        ##     return True\n        ## return False\n        \n        ## O(n) time and O(1) space\n        ## if len(nums) > len(set(nums)):\n        ##     return True\n        ## return False\n        \n        ## O(n) time and O(1) space\n        ## if len(nums) > len(set(nums)):\n        ##     return True\n        ## return False\n        \n        ## O(n) time and O(1) space\n        ## if len(nums) > len(set(nums)):\n        ##     return True\n        ## return False\n        \n        ## O(n) time and O(1) space\n        ## if len(nums) > len(set(nums)):\n        ##     return True\n        ## return False\n        \n        ## O(n) time and O(1) space\n        ## if len(nums) > len(set(nums)):\n        ##     return True\n        ## return False\n        \n        ## O(n) time and O(1) space\n        ## if len(nums) > len(set(nums)):\n        ##     return True\n        ## return False\n        \n        ## O(n) time and O(1) space\n        ## if len(nums) > len(set(nums)):\n        ##     return True\n        ## return False\n        \n        ## O(n) time and O(1) space\n        ## if len(nums) > len(set(nums)):\n        ##     return True\n        ## return False\n        \n        ## O(n) time and O(1) space\n        ## if len(nums) > len(set(nums)):\n        ##     return True\n        ## return False\n        \n        ## O(n) time and O(1) space\n        ## if len(nums) > len(set(nums)):\n        ##     return True\n        ## return False\n        \n        ## O(n) time and O(1) space\n        ## if len(nums) > len(set(nums)):\n        ##     return True\n        ## return False\n        \n        ## O(n) time and O(1) space\n        ## if len(nums) > len(set(nums)):\n        ##     return True\n        ## return False\n        \n        ## O(n) time and O(1) space\n        ## if len(nums) > len(set(nums)):\n        ##     return True\n        ## return False\n        \n        ## O(n) time and O(1) space\n        ## if len(nums) > len(set(nums)):\n        ##     return True\n        ## return False\n        \n        ## O(n) time and O(1) space\n        ## if len(nums) > len(set(nums)):\n        ##     return True\n        ## return False\n        \n        ## O(n) time and O(1) space\n        ## if len(nums) > len(set(nums)):\n        ##     return True\n        ## return False\n        \n        ## O(n) time and O(1) space\n        ## if len(nums) > len(set(nums)):\n        ##     return True\n        ## return False\n        \n        ## O(n) time and O(1) space\n        ## if len(nums) > len(set(nums)):\n        ##     return True\n        ## return False\n        \n        ## O(n) time"}], "sliding-window-maximum": [{"task_id": "sliding-window-maximum", "completion": "class Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # if k == 1:\n        #     return nums\n        \n        # if len(nums) == 1:\n        #     return nums\n        \n        # if len(nums) == 2:\n        #     return [max(nums[0], nums[1])]\n        \n        # if len(nums) == 3:\n        #     return [max(nums[0], nums[1], nums[2])]\n        \n        # if len(nums) == 4:\n        #     return [max(nums[0], nums[1], nums[2], nums[3])]\n        \n        # if len(nums) == 5:\n        #     return [max(nums[0], nums[1], nums[2], nums[3], nums[4])]\n        \n        # if len(nums) == 6:\n        #     return [max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5])]\n        \n        # if len(nums) == 7:\n        #     return [max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6])]\n        \n        # if len(nums) == 8:\n        #     return [max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7])]\n        \n        # if len(nums) == 9:\n        #     return [max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8])]\n        \n        # if len(nums) == 10:\n        #     return [max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9])]\n        \n        # if len(nums) == 11:\n        #     return [max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9], nums[10])]\n        \n        # if len(nums) == 12:\n        #     return [max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9], nums[10], nums[11])]\n        \n        # if len(nums) == 13:\n        #     return [max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9], nums[10], nums[11], nums[12])]\n        \n        # if len(nums) == 14:\n        #     return [max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9], nums[10], nums[11], nums[12], nums[13])]\n        \n        # if len(nums) == 15:\n        #     return [max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9], nums[10], nums[11], nums[12], nums[13], nums[14])]\n        \n        # if len(nums) == 16:\n        #     return [max(nums[0], nums[1], nums[2], nums[3], nums[4], nums["}], "median-of-two-sorted-arrays": [{"task_id": "median-of-two-sorted-arrays", "completion": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        \n        # if len(nums1) > len(nums2):\n        #     return self.findMedianSortedArrays(nums2, nums1)\n        \n        # if len(nums1) == 0:\n        #     if len(nums2) % 2 == 0:\n        #         return (nums2[len(nums2)//2] + nums2[len(nums2)//2 - 1]) / 2\n        #     else:\n        #         return nums2[len(nums2)//2]\n        \n        # if len(nums2) == 0:\n        #     if len(nums1) % 2 == 0:\n        #         return (nums1[len(nums1)//2] + nums1[len(nums1)//2 - 1]) / 2\n        #     else:\n        #         return nums1[len(nums1)//2]\n        \n        # if len(nums1) == 1 and len(nums2) == 1:\n        #     return (nums1[0] + nums2[0]) / 2\n        \n        # if len(nums1) == 1:\n        #     if len(nums2) % 2 == 0:\n        #         return (nums1[0] + nums2[len(nums2)//2]) / 2\n        #     else:\n        #         return nums2[len(nums2)//2]\n        \n        # if len(nums2) == 1:\n        #     if len(nums1) % 2 == 0:\n        #         return (nums2[0] + nums1[len(nums1)//2]) / 2\n        #     else:\n        #         return nums1[len(nums1)//2]\n        \n        # if len(nums1) == 0:\n        #     return nums2[len(nums2)//2]\n        \n        # if len(nums2) == 0:\n        #     return nums1[len(nums1)//2]\n        \n        # if len(nums1) == 1 and len(nums2) == 1:\n        #     return (nums1[0] + nums2[0]) / 2\n        \n        # if len(nums1) == 1:\n        #     if len(nums2) % 2 == 0:\n        #         return (nums1[0] + nums2[len(nums2)//2]) / 2\n        #     else:\n        #         return nums2[len(nums2)//2]\n        \n        # if len(nums2) == 1:\n        #     if len(nums1) % 2 == 0:\n        #         return (nums2[0] + nums1[len(nums1)//2]) / 2\n        #     else:\n        #         return nums1[len(nums1)//2]\n        \n        # if len(nums1) == 0:\n        #     return nums2[len(nums2)//2]\n        \n        # if len(nums2) == 0:\n        #     return nums1[len(nums1)//2]\n        \n        # if len(nums1) == 1 and len(nums2) == 1:\n        #     return (nums1[0] + nums2[0]) / 2\n        \n        # if len(nums1) == 1:\n        #     if len(nums2) % 2 == 0:\n        #         return (nums1[0] + nums2[len(nums2)//2]) / 2\n        #     else:\n        #         return nums2[len(nums2)//2]\n        \n        # if len(nums2) == 1:\n        #     if len(nums1) % 2 == 0:\n        #         return (nums2[0] + nums1[len(nums1)//2]) / 2\n        #     else:\n        #         return nums1[len(nums1)//2]\n        \n        # if len(nums1) == 0:"}], "find-minimum-in-rotated-sorted-array": [{"task_id": "find-minimum-in-rotated-sorted-array", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        \n        # left, right = 0, len(nums) - 1\n        # while left < right:\n        #     mid = left + (right - left) // 2\n        #     if nums[mid] > nums[right]:\n        #         left = mid + 1\n        #     else:\n        #         right = mid\n        # return nums[left]\n        \n        # binary search\n        left, right = 0, len(nums) - 1\n        while left < right:\n            mid = left + (right - left) // 2\n            if nums[mid] > nums[right]:\n                left = mid + 1\n            else:\n                right = mid\n        return nums[left]"}], "pascals-triangle-ii": [{"task_id": "pascals-triangle-ii", "completion": "class Solution(object):\n    def getRow(self, rowIndex):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if rowIndex == 0:\n            return [1]\n        \n        if rowIndex == 1:\n            return [1,1]\n        \n        row = [1,1]\n        \n        for i in range(2, rowIndex + 1):\n            row = [1] + [row[j] + row[j+1] for j in range(len(row) - 1)] + [1]\n        \n        return row"}], "path-sum-ii": [{"task_id": "path-sum-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def pathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # if root is None:\n        #     return []\n        \n        # if root.left is None and root.right is None:\n        #     if root.val == targetSum:\n        #         return [[targetSum]]\n        #     else:\n        #         return []\n        \n        # if root.left is None:\n        #     return self.pathSum(root.right, targetSum - root.val)\n        \n        # if root.right is None:\n        #     return self.pathSum(root.left, targetSum - root.val)\n        \n        # return self.pathSum(root.left, targetSum - root.val) + self.pathSum(root.right, targetSum - root.val)\n        \n        # if root is None:\n        #     return []\n        \n        # if root.left is None and root.right is None:\n        #     if root.val == targetSum:\n        #         return [[targetSum]]\n        #     else:\n        #         return []\n        \n        # if root.left is None:\n        #     return self.pathSum(root.right, targetSum - root.val)\n        \n        # if root.right is None:\n        #     return self.pathSum(root.left, targetSum - root.val)\n        \n        # return self.pathSum(root.left, targetSum - root.val) + self.pathSum(root.right, targetSum - root.val)\n        \n        # if root is None:\n        #     return []\n        \n        # if root.left is None and root.right is None:\n        #     if root.val == targetSum:\n        #         return [[targetSum]]\n        #     else:\n        #         return []\n        \n        # if root.left is None:\n        #     return self.pathSum(root.right, targetSum - root.val)\n        \n        # if root.right is None:\n        #     return self.pathSum(root.left, targetSum - root.val)\n        \n        # return self.pathSum(root.left, targetSum - root.val) + self.pathSum(root.right, targetSum - root.val)\n        \n        # if root is None:\n        #     return []\n        \n        # if root.left is None and root.right is None:\n        #     if root.val == targetSum:\n        #         return [[targetSum]]\n        #     else:\n        #         return []\n        \n        # if root.left is None:\n        #     return self.pathSum(root.right, targetSum - root.val)\n        \n        # if root.right is None:\n        #     return self.pathSum(root.left, targetSum - root.val)\n        \n        # return self.pathSum(root.left, targetSum - root.val) + self.pathSum(root.right, targetSum - root.val)\n        \n        # if root is None:\n        #     return []\n        \n        # if root.left is None and root.right is None:\n        #     if root.val == targetSum:\n        #         return [[targetSum]]\n        #     else:\n        #         return []\n        \n        # if root.left is None:\n        #     return self.pathSum(root.right, targetSum - root.val)\n        \n        # if root.right is None:\n        #     return self.pathSum(root.left, targetSum - root.val)\n        \n        # return self.pathSum(root.left, targetSum - root.val) + self.pathSum(root.right, targetSum - root.val)\n        \n        # if root is None:\n        #     return []\n        \n        # if root.left is None and root.right is None:\n        #     if root.val == targetSum:\n        #         return [[targetSum]]\n        #     else:\n        #         return []\n        \n        # if root.left is None:\n        #     return self.pathSum(root.right, targetSum - root.val)\n        \n        # if root.right is None:\n        #     return self.pathSum(root.left, targetSum - root.val)\n        \n        # return self.pathSum(root.left, targetSum - root.val) + self.pathSum(root.right, targetSum"}], "construct-the-rectangle": [{"task_id": "construct-the-rectangle", "completion": "class Solution(object):\n    def constructRectangle(self, area):\n        \"\"\"\n        :type area: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. 2 * L = area\n        # 2. L = sqrt(area)\n        # 3. L = sqrt(area) - 1\n        # 4. L = sqrt(area) - 1 + 1\n        # 5. L = sqrt(area) - 2\n        # 6. L = sqrt(area) - 2 + 1\n        # 7. L = sqrt(area) - 2 + 1 + 1\n        # 8. L = sqrt(area) - 3\n        # 9. L = sqrt(area) - 3 + 1\n        # 10. L = sqrt(area) - 3 + 1 + 1\n        # 11. L = sqrt(area) - 3 + 1 + 1 + 1\n        # 12. L = sqrt(area) - 4\n        # 13. L = sqrt(area) - 4 + 1\n        # 14. L = sqrt(area) - 4 + 1 + 1\n        # 15. L = sqrt(area) - 4 + 1 + 1 + 1\n        # 16. L = sqrt(area) - 4 + 1 + 1 + 1 + 1\n        # 17. L = sqrt(area) - 4 + 1 + 1 + 1 + 1 + 1\n        # 18. L = sqrt(area) - 4 + 1 + 1 + 1 + 1 + 1 + 1\n        # 19. L = sqrt(area) - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n        # 20. L = sqrt(area) - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n        # 21. L = sqrt(area) - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n        # 22. L = sqrt(area) - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n        # 23. L = sqrt(area) - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n        # 24. L = sqrt(area) - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n        # 25. L = sqrt(area) - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n        # 26. L = sqrt(area) - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n        # 27. L = sqrt(area) - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n        # 28. L = sqrt(area) - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n        # 29. L = sqrt(area) - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n        # 30. L = sqrt(area) - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n        # 31. L = sqrt(area) - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n        # 32. L = sqrt(area) - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n        # 33. L = sqrt(area) - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1"}], "word-ladder-ii": [{"task_id": "word-ladder-ii", "completion": "class Solution(object):\n    def findLadders(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        # build the graph\n        graph = collections.defaultdict(list)\n        for word in wordList:\n            graph[word].append(word)\n        \n        # build the graph\n        for word in wordList:\n            for i in range(len(word)):\n                key = word[:i] + '_' + word[i+1:]\n                graph[key].append(word)\n        \n        # build the queue\n        queue = collections.deque([beginWord])\n        visited = set([beginWord])\n        found = False\n        # BFS\n        while queue:\n            size = len(queue)\n            for _ in range(size):\n                word = queue.popleft()\n                for i in range(len(word)):\n                    key = word[:i] + '_' + word[i+1:]\n                    for neighbor in graph[key]:\n                        if neighbor == endWord:\n                            found = True\n                        if neighbor not in visited:\n                            queue.append(neighbor)\n                            visited.add(neighbor)\n            if found:\n                break\n        \n        # build the path\n        path = []\n        while queue:\n            word = queue.popleft()\n            path.append(word)\n            if word == endWord:\n                break\n        \n        # reverse the path\n        path.reverse()\n        return [path] if found else []"}], "balanced-binary-tree": [{"task_id": "balanced-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isBalanced(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def height(root):\n            if not root:\n                return 0\n            left = height(root.left)\n            if left == -1:\n                return -1\n            right = height(root.right)\n            if right == -1:\n                return -1\n            if abs(left - right) > 1:\n                return -1\n            return max(left, right) + 1\n        \n        return height(root) != -1"}], "power-of-two": [{"task_id": "power-of-two", "completion": "class Solution(object):\n    def isPowerOfTwo(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        # if n is 0, return false\n        if n == 0:\n            return False\n        \n        # if n is negative, return false\n        if n < 0:\n            return False\n        \n        # if n is 1, return true\n        if n == 1:\n            return True\n        \n        # if n is not 1, check if it is a power of 2\n        # if n is not a power of 2, return false\n        return n & (n - 1) == 0"}], "subsets-ii": [{"task_id": "subsets-ii", "completion": "class Solution(object):\n    def subsetsWithDup(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = [[]]\n        for i in range(len(nums)):\n            if i == 0 or nums[i] != nums[i-1]:\n                res.append([nums[i]])\n            else:\n                res.append(res[-1] + [nums[i]])\n        return res"}], "largest-rectangle-in-histogram": [{"task_id": "largest-rectangle-in-histogram", "completion": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \uc2a4\ud0dd\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc624\ub984\ucc28\uc21c\uc73c\ub85c \uc815\ub82c\ud55c\ub2e4.\n        # 2. \uc2a4\ud0dd\uc5d0 \uc800\uc7a5\ub41c \uc778\ub371\uc2a4\ub97c \uc21c\ud68c\ud558\uba74\uc11c \uc624\ub984\ucc28\uc21c\uc73c\ub85c \uc815\ub82c\ub41c \uc2a4\ud0dd\uc5d0\uc11c \uc624\ub978\ucabd \ub05d \uc778\ub371\uc2a4\uc640 \uc67c\ucabd \ub05d \uc778\ub371\uc2a4\ub97c \uacc4\uc0b0\ud55c\ub2e4.\n        # 3. \uc624\ub978\ucabd \ub05d \uc778\ub371\uc2a4\uc640 \uc67c\ucabd \ub05d \uc778\ub371\uc2a4\ub97c \uacc4\uc0b0\ud55c \ud6c4 \uc624\ub978\ucabd \ub05d \uc778\ub371\uc2a4\uc5d0\uc11c \uc67c\ucabd \ub05d \uc778\ub371\uc2a4\ub97c \ube80 \uac12\uc744 \uacf1\ud55c\ub2e4.\n        # 4. \uc624\ub978\ucabd \ub05d \uc778\ub371\uc2a4\uc640 \uc67c\ucabd \ub05d \uc778\ub371\uc2a4\ub97c \uacc4\uc0b0\ud55c \ud6c4 \uc624\ub978\ucabd \ub05d \uc778\ub371\uc2a4\uc5d0\uc11c \uc67c\ucabd \ub05d \uc778\ub371\uc2a4\ub97c \ube80 \uac12\uc744 \uacf1\ud55c\ub2e4.\n        # 5. \uc624\ub978\ucabd \ub05d \uc778\ub371\uc2a4\uc640 \uc67c\ucabd \ub05d \uc778\ub371\uc2a4\ub97c \uacc4\uc0b0\ud55c \ud6c4 \uc624\ub978\ucabd \ub05d \uc778\ub371\uc2a4\uc5d0\uc11c \uc67c\ucabd \ub05d \uc778\ub371\uc2a4\ub97c \ube80 \uac12\uc744 \uacf1\ud55c\ub2e4.\n        # 6. \uc624\ub978\ucabd \ub05d \uc778\ub371\uc2a4\uc640 \uc67c\ucabd \ub05d \uc778\ub371\uc2a4\ub97c \uacc4\uc0b0\ud55c \ud6c4 \uc624\ub978\ucabd \ub05d \uc778\ub371\uc2a4\uc5d0\uc11c \uc67c\ucabd \ub05d \uc778\ub371\uc2a4\ub97c \ube80 \uac12\uc744 \uacf1\ud55c\ub2e4.\n        # 7. \uc624\ub978\ucabd \ub05d \uc778\ub371\uc2a4\uc640 \uc67c\ucabd \ub05d \uc778\ub371\uc2a4\ub97c \uacc4\uc0b0\ud55c \ud6c4 \uc624\ub978\ucabd \ub05d \uc778\ub371\uc2a4\uc5d0\uc11c \uc67c\ucabd \ub05d \uc778\ub371\uc2a4\ub97c \ube80 \uac12\uc744 \uacf1\ud55c\ub2e4.\n        # 8. \uc624\ub978\ucabd \ub05d \uc778\ub371\uc2a4\uc640 \uc67c\ucabd \ub05d \uc778\ub371\uc2a4\ub97c \uacc4\uc0b0\ud55c \ud6c4 \uc624\ub978\ucabd \ub05d \uc778\ub371\uc2a4\uc5d0"}], "evaluate-reverse-polish-notation": [{"task_id": "evaluate-reverse-polish-notation", "completion": "class Solution(object):\n    def evalRPN(self, tokens):\n        \"\"\"\n        :type tokens: List[str]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        for i in tokens:\n            if i == \"+\":\n                stack.append(stack.pop() + stack.pop())\n            elif i == \"-\":\n                stack.append(-stack.pop() + stack.pop())\n            elif i == \"*\":\n                stack.append(stack.pop() * stack.pop())\n            elif i == \"/\":\n                temp = stack.pop()\n                stack.append(int(float(stack.pop()) / temp))\n            else:\n                stack.append(int(i))\n        return stack[0]"}], "perfect-rectangle": [{"task_id": "perfect-rectangle", "completion": "class Solution(object):\n    def isRectangleCover(self, rectangles):\n        \"\"\"\n        :type rectangles: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \ucd5c\uc18c 4\uac1c\uc758 \uc810\uc774 \uc788\uc5b4\uc57c \ud55c\ub2e4.\n        # 2. \ucd5c\ub300 4\uac1c\uc758 \uc810\uc774 \uc788\uc5b4\uc57c \ud55c\ub2e4.\n        # 3. \ucd5c\ub300 4\uac1c\uc758 \uc810\uc774 \uc788\uc5b4\uc57c \ud55c\ub2e4.\n        # 4. \ucd5c\ub300 4\uac1c\uc758 \uc810\uc774 \uc788\uc5b4\uc57c \ud55c\ub2e4.\n        # 5. \ucd5c\ub300 4\uac1c\uc758 \uc810\uc774 \uc788\uc5b4\uc57c \ud55c\ub2e4.\n        # 6. \ucd5c\ub300 4\uac1c\uc758 \uc810\uc774 \uc788\uc5b4\uc57c \ud55c\ub2e4.\n        # 7. \ucd5c\ub300 4\uac1c\uc758 \uc810\uc774 \uc788\uc5b4\uc57c \ud55c\ub2e4.\n        # 8. \ucd5c\ub300 4\uac1c\uc758 \uc810\uc774 \uc788\uc5b4\uc57c \ud55c\ub2e4.\n        # 9. \ucd5c\ub300 4\uac1c\uc758 \uc810\uc774 \uc788\uc5b4\uc57c \ud55c\ub2e4.\n        # 10. \ucd5c\ub300 4\uac1c\uc758 \uc810\uc774 \uc788\uc5b4\uc57c \ud55c\ub2e4.\n        # 11. \ucd5c\ub300 4\uac1c\uc758 \uc810\uc774 \uc788\uc5b4\uc57c \ud55c\ub2e4.\n        # 12. \ucd5c\ub300 4\uac1c\uc758 \uc810\uc774 \uc788\uc5b4\uc57c \ud55c\ub2e4.\n        # 13. \ucd5c\ub300 4\uac1c\uc758 \uc810\uc774 \uc788\uc5b4\uc57c \ud55c\ub2e4.\n        # 14. \ucd5c\ub300 4\uac1c\uc758 \uc810\uc774 \uc788\uc5b4\uc57c \ud55c\ub2e4.\n        # 15. \ucd5c\ub300 4\uac1c\uc758 \uc810\uc774 \uc788\uc5b4\uc57c \ud55c\ub2e4.\n        # 16. \ucd5c\ub300 4\uac1c\uc758 \uc810\uc774 \uc788\uc5b4\uc57c \ud55c\ub2e4.\n        # 17. \ucd5c\ub300 4\uac1c\uc758 \uc810\uc774 \uc788\uc5b4\uc57c \ud55c\ub2e4.\n        # 18. \ucd5c\ub300 4\uac1c\uc758 \uc810\uc774 \uc788\uc5b4\uc57c \ud55c\ub2e4.\n        # 19. \ucd5c\ub300 4\uac1c\uc758 \uc810\uc774 \uc788\uc5b4\uc57c \ud55c\ub2e4.\n        # 20. \ucd5c\ub300 4\uac1c\uc758 \uc810\uc774 \uc788\uc5b4\uc57c \ud55c\ub2e4.\n        # 21. \ucd5c\ub300 4\uac1c\uc758 \uc810\uc774 \uc788\uc5b4\uc57c \ud55c\ub2e4.\n        # 22. \ucd5c\ub300 4\uac1c\uc758 \uc810\uc774 \uc788\uc5b4\uc57c \ud55c\ub2e4.\n        # 23. \ucd5c\ub300 4\uac1c\uc758 \uc810\uc774 \uc788\uc5b4\uc57c \ud55c\ub2e4"}], "excel-sheet-column-title": [{"task_id": "excel-sheet-column-title", "completion": "class Solution(object):\n    def convertToTitle(self, columnNumber):\n        \"\"\"\n        :type columnNumber: int\n        :rtype: str\n        \"\"\"\n        \n        # 26^0 = 1\n        # 26^1 = 26\n        # 26^2 = 676\n        # 26^3 = 17576\n        # 26^4 = 458912\n        # 26^5 = 11895072\n        # 26^6 = 349526080\n        # 26^7 = 10368709120\n        # 26^8 = 374868096000\n        # 26^9 = 12582912000000\n        # 26^10 = 439804651100000\n        # 26^11 = 14792389641000000\n        # 26^12 = 463769936531200000\n        # 26^13 = 15846046732640000000\n        # 26^14 = 485561110697536000000\n        # 26^15 = 16158444423576320000000\n        # 26^16 = 493932133743895040000000\n        # 26^17 = 1734462267489984000000000\n        # 26^18 = 5069531110993920000000000\n        # 26^19 = 17476622223576320000000000\n        # 26^20 = 51091311069753600000000000\n        # 26^21 = 175934222357632000000000000\n        # 26^22 = 512969110697536000000000000\n        # 26^23 = 1769412223576320000000000000\n        # 26^24 = 5139821106975360000000000000\n        # 26^25 = 17794312235763200000000000000\n        # 26^26 = 51408611069753600000000000000\n        # 26^27 = 178093122357632000000000000000\n        # 26^28 = 514246110697536000000000000000\n        # 26^29 = 1782091223576320000000000000000\n        # 26^30 = 5144121106975360000000000000000\n        # 26^31 = 17840462235763200000000000000000\n        # 26^32 = 51460911069753600000000000000000\n        # 26^33 = 178609222357632000000000000000"}], "maximum-subarray": [{"task_id": "maximum-subarray", "completion": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Kadane's Algorithm\n        # https://en.wikipedia.org/wiki/Maximum_subarray_problem\n        # https://www.youtube.com/watch?v=J2sJR98J00s\n        # https://www.youtube.com/watch?v=YBK_0764K6s\n        # https://www.youtube.com/watch?v=8aGhZQNl6LQ\n        # https://www.youtube.com/watch?v=Kr_JYJJ806s\n        # https://www.youtube.com/watch?v=J2sJR98J00s\n        # https://www.youtube.com/watch?v=YBK_0764K6s\n        # https://www.youtube.com/watch?v=8aGhZQNl6LQ\n        # https://www.youtube.com/watch?v=Kr_JYJJ806s\n        # https://www.youtube.com/watch?v=J2sJR98J00s\n        # https://www.youtube.com/watch?v=YBK_0764K6s\n        # https://www.youtube.com/watch?v=8aGhZQNl6LQ\n        # https://www.youtube.com/watch?v=Kr_JYJJ806s\n        # https://www.youtube.com/watch?v=J2sJR98J00s\n        # https://www.youtube.com/watch?v=YBK_0764K6s\n        # https://www.youtube.com/watch?v=8aGhZQNl6LQ\n        # https://www.youtube.com/watch?v=Kr_JYJJ806s\n        # https://www.youtube.com/watch?v=J2sJR98J00s\n        # https://www.youtube.com/watch?v=YBK_0764K6s\n        # https://www.youtube.com/watch?v=8aGhZQNl6LQ\n        # https://www.youtube.com/watch?v=Kr_JYJJ806s\n        # https://www.youtube.com/watch?v=J2sJR98J00s\n        # https://www.youtube.com/watch?v=YBK_0764K6s\n        # https://www.youtube.com/watch?v=8aGhZQNl6LQ\n        # https://www.youtube.com/watch?v=Kr_JYJJ806s\n        # https://www.youtube.com/watch?v=J2sJR98J00s\n        # https://www.youtube.com/watch?v=YBK_0764K6s\n        # https://www.youtube.com/watch?v=8aGhZQNl6LQ\n        # https://www.youtube.com/watch?v=Kr_JYJJ806s\n        # https://www.youtube.com/watch?v=J2sJR98J00s\n        # https://www.youtube.com/watch?v=YBK_0764K6s\n        # https://www.youtube.com/watch?v=8aGhZQNl6LQ\n        # https://www.youtube.com/watch?v=Kr_JYJJ806s\n        # https://www.youtube.com/watch?v=J2sJR98J00s\n        # https://www.youtube.com/watch?v=YBK_0764K6s\n        # https://www.youtube.com/watch?v=8aGhZQNl6LQ\n        # https://www.youtube.com/watch?v=Kr_JYJJ806s\n        # https://www.youtube.com/watch?v=J2sJR98"}], "sliding-puzzle": [{"task_id": "sliding-puzzle", "completion": "class Solution(object):\n    def slidingPuzzle(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # convert board to a 1D array\n        board_1d = []\n        for row in board:\n            for val in row:\n                board_1d.append(val)\n        \n        # convert board_1d to a dictionary\n        board_dict = {0: 1, 1: 2, 2: 4, 3: 8, 4: 16, 5: 32, 6: 64, 7: 128, 8: 256, 9: 512, 10: 1024, 11: 2048}\n        start_state = board_1d[0] + board_1d[5]\n        end_state = board_1d[1] + board_1d[4] + board_1d[6] + board_1d[8] + board_1d[9] + board_1d[10]\n        \n        # if start_state is 1024, then we can't reach the end state\n        if start_state == 1024:\n            return -1\n        \n        # create a queue and add the start state\n        queue = collections.deque([start_state])\n        # create a set to keep track of visited states\n        visited = set([start_state])\n        # create a dictionary to keep track of the number of moves we need to make to get to each state\n        moves = {start_state: 0}\n        \n        # while the queue is not empty\n        while queue:\n            # pop the first element from the queue\n            state = queue.popleft()\n            # if the current state is the end state, return the number of moves we needed to get to the end state\n            if state == end_state:\n                return moves[state]\n            # get the next possible states\n            next_states = self.get_next_states(state)\n            # for each possible next state\n            for next_state in next_states:\n                # if the next state has not been visited\n                if next_state not in visited:\n                    # add the next state to the queue\n                    queue.append(next_state)\n                    # add the next state to the visited set\n                    visited.add(next_state)\n                    # add the number of moves we need to get to the next state to the moves dictionary\n                    moves[next_state] = moves[state] + 1\n        \n        # if we reach here, it means that we didn't find the end state\n        return -1\n    \n    def get_next_states(self, state):\n        \"\"\"\n        :type state: int\n        :rtype: List[int]\n        \"\"\"\n        # get the index of the zero\n        zero_index = state.index(0)\n        # get the row and column of the zero\n        row = zero_index // 3\n        col = zero_index % 3\n        \n        # get the possible next states\n        next_states = []\n        # if the row is less than 2\n        if row < 2:\n            # add the state to the next states\n            next_states.append(state ^ board_dict[board_1d[row + 1] * 2])\n        # if the row is greater than 1\n        if row > 1:\n            # add the state to the next states\n            next_states.append(state ^ board_dict[board_1d[row - 1] * 2])\n        # if the column is less than 2\n        if col < 2:\n            # add the state to the next states\n            next_states.append(state ^ board_dict[board_1d[col + 3]])\n        # if the column is greater than 1\n        if col > 1:\n            # add the state to the next states\n            next_states.append(state ^ board_dict[board_1d[col - 3]])\n        \n        # return the next states\n        return next_states"}], "isomorphic-strings": [{"task_id": "isomorphic-strings", "completion": "class Solution(object):\n    def isIsomorphic(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_to_t = {}\n        t_to_s = {}\n        \n        for i in range(len(s)):\n            if s[i] in s_to_t:\n                if s_to_t[s[i]] != t[i]:\n                    return False\n            else:\n                s_to_t[s[i]] = t[i]\n                \n            if t[i] in t_to_s:\n                if t_to_s[t[i]] != s[i]:\n                    return False\n            else:\n                t_to_s[t[i]] = s[i]\n                \n        return True"}], "search-in-rotated-sorted-array-ii": [{"task_id": "search-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        # find the pivot\n        # if nums[mid] == target, return True\n        # if nums[mid] > nums[right], left side is sorted\n        # if nums[mid] < nums[right], right side is sorted\n        # if nums[mid] < nums[left], right side is sorted\n        # if nums[mid] > nums[left], left side is sorted\n        # if nums[mid] == nums[left], left and right are sorted\n        # if nums[mid] == nums[right], left and right are sorted\n        # if nums[mid] == nums[left] and nums[mid] == nums[right], left and right are sorted\n        # if nums[mid] == nums[left] and nums[mid] == nums[right] and nums[left] != nums[right], left and right are sorted\n        # if nums[mid] == nums[left] and nums[mid] == nums[right] and nums[left] == nums[right], left and right are sorted\n        # if nums[mid] == nums[left] and nums[mid] == nums[right] and nums[left] == nums[right] and nums[left] != nums[right], left and right are sorted\n        # if nums[mid] == nums[left] and nums[mid] == nums[right] and nums[left] == nums[right] and nums[left] == nums[right] and nums[left] != nums[right], left and right are sorted\n        # if nums[mid] == nums[left] and nums[mid] == nums[right] and nums[left] == nums[right] and nums[left] == nums[right] and nums[left] == nums[right] and nums[left] != nums[right], left and right are sorted\n        # if nums[mid] == nums[left] and nums[mid] == nums[right] and nums[left] == nums[right] and nums[left] == nums[right] and nums[left] == nums[right] and nums[left] == nums[right] and nums[left] != nums[right], left and right are sorted\n        # if nums[mid] == nums[left] and nums[mid] == nums[right] and nums[left] == nums[right] and nums[left] == nums[right] and nums[left] == nums[right] and nums[left] == nums[right] and nums[left] == nums[right] and nums[left] != nums[right], left and right are sorted\n        # if nums[mid] == nums[left] and nums[mid] == nums[right] and nums[left] == nums[right] and nums[left] == nums[right] and nums[left] == nums[right] and nums[left] == nums[right] and nums[left] == nums[right] and nums[left] == nums[right] and nums[left] != nums[right], left and right are sorted\n        # if nums[mid] == nums[left] and nums[mid] == nums[right] and nums[left] == nums[right] and nums[left] == nums[right] and nums[left] == nums[right] and nums[left] == nums[right] and nums[left] == nums[right] and nums[left] == nums[right] and nums[left] == nums[right] and nums[left] != nums[right], left and right are sorted\n        # if nums[mid] == nums[left] and nums[mid] == nums[right] and nums[left] == nums[right] and nums[left] == nums[right] and nums[left] == nums[right] and nums[left] == nums[right] and nums[left] == nums[right] and nums[left] == nums[right] and nums[left] == nums[right] and nums[left"}], "unique-paths-ii": [{"task_id": "unique-paths-ii", "completion": "class Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid):\n        \"\"\"\n        :type obstacleGrid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not obstacleGrid:\n            return 0\n        \n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        \n        dp = [0] * n\n        \n        for i in range(n):\n            if obstacleGrid[0][i] == 1:\n                dp[i] = 0\n                break\n            dp[i] = 1\n        \n        for i in range(1, m):\n            for j in range(n):\n                if obstacleGrid[i][j] == 1:\n                    dp[j] = 0\n                else:\n                    if j > 0:\n                        dp[j] += dp[j - 1]\n        \n        return dp[n - 1]"}], "decode-ways-ii": [{"task_id": "decode-ways-ii", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s[0] == '0':\n            return 0\n        \n        if len(s) == 1:\n            return 1\n        \n        if len(s) == 2:\n            if s[0] == '0':\n                return 0\n            if int(s[0]) == 1:\n                return 1\n            if int(s[0]) == 2 and int(s[1]) <= 6:\n                return 2\n            return 1\n        \n        a = 1\n        b = 1\n        for i in range(2, len(s)):\n            c = 0\n            if s[i] == '0':\n                return 0\n            if int(s[i - 1]) == 1:\n                c += a\n            if int(s[i - 1]) == 2 and int(s[i]) <= 6:\n                c += b\n            a = b\n            b = c\n        \n        return b"}], "3sum-closest": [{"task_id": "3sum-closest", "completion": "class Solution(object):\n    def threeSumClosest(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        n = len(nums)\n        closest = nums[0] + nums[1] + nums[2]\n        \n        for i in range(n-2):\n            l = i + 1\n            r = n - 1\n            \n            while l < r:\n                sum = nums[i] + nums[l] + nums[r]\n                if abs(target - sum) < abs(target - closest):\n                    closest = sum\n                if sum > target:\n                    r -= 1\n                else:\n                    l += 1\n        return closest"}], "maximum-depth-of-binary-tree": [{"task_id": "maximum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        left_height = self.maxDepth(root.left)\n        right_height = self.maxDepth(root.right)\n        \n        if left_height > right_height:\n            return left_height + 1\n        else:\n            return right_height + 1"}], "intersection-of-two-arrays-ii": [{"task_id": "intersection-of-two-arrays-ii", "completion": "class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums1) > len(nums2):\n            return self.intersect(nums2, nums1)\n        \n        d = {}\n        for i in nums1:\n            if i not in d:\n                d[i] = 1\n            else:\n                d[i] += 1\n        \n        res = []\n        for i in nums2:\n            if i in d:\n                res.append(i)\n                d[i] -= 1\n                if d[i] == 0:\n                    del d[i]\n        \n        return res"}], "minimum-absolute-difference-in-bst": [{"task_id": "minimum-absolute-difference-in-bst", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def getMinimumDifference(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the min - max\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the min - max\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the min - max\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the min - max\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the min - max\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the min - max\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the min - max\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the min - max\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the min - max\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the min - max\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the min - max\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the min - max\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the min - max\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the min - max\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the min - max\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the min - max\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the min - max\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the min - max\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the min - max\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the min - max\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the min - max\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the min - max\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the min - max\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the min - max\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the min - max\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the min - max\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the min - max\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the min - max\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the min - max\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the min - max\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the min - max\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the min - max\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the min - max\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the min - max\n        \n        # inorder"}], "find-mode-in-binary-search-tree": [{"task_id": "find-mode-in-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        # find the most frequent element\n        # use a dictionary to store the frequency of each element\n        # use a list to store the elements with the highest frequency\n        # return the list\n        \n        # find the most frequent element\n        # use a dictionary to store the frequency of each element\n        # use a list to store the elements with the highest frequency\n        # return the list\n        \n        # find the most frequent element\n        # use a dictionary to store the frequency of each element\n        # use a list to store the elements with the highest frequency\n        # return the list\n        \n        # find the most frequent element\n        # use a dictionary to store the frequency of each element\n        # use a list to store the elements with the highest frequency\n        # return the list\n        \n        # find the most frequent element\n        # use a dictionary to store the frequency of each element\n        # use a list to store the elements with the highest frequency\n        # return the list\n        \n        # find the most frequent element\n        # use a dictionary to store the frequency of each element\n        # use a list to store the elements with the highest frequency\n        # return the list\n        \n        # find the most frequent element\n        # use a dictionary to store the frequency of each element\n        # use a list to store the elements with the highest frequency\n        # return the list\n        \n        # find the most frequent element\n        # use a dictionary to store the frequency of each element\n        # use a list to store the elements with the highest frequency\n        # return the list\n        \n        # find the most frequent element\n        # use a dictionary to store the frequency of each element\n        # use a list to store the elements with the highest frequency\n        # return the list\n        \n        # find the most frequent element\n        # use a dictionary to store the frequency of each element\n        # use a list to store the elements with the highest frequency\n        # return the list\n        \n        # find the most frequent element\n        # use a dictionary to store the frequency of each element\n        # use a list to store the elements with the highest frequency\n        # return the list\n        \n        # find the most frequent element\n        # use a dictionary to store the frequency of each element\n        # use a list to store the elements with the highest frequency\n        # return the list\n        \n        # find the most frequent element\n        # use a dictionary to store the frequency of each element\n        # use a list to store the elements with the highest frequency\n        # return the list\n        \n        # find the most frequent element\n        # use a dictionary to store the frequency of each element\n        # use a list to store the elements with the highest frequency\n        # return the list\n        \n        # find the most frequent element\n        # use a dictionary to store the frequency of each element\n        # use a list to store the elements with the highest frequency\n        # return the list\n        \n        # find the most frequent element\n        # use a dictionary to store the frequency of each element\n        # use a list to store the elements with the highest frequency\n        # return the list\n        \n        # find the most frequent element\n        # use a dictionary to store the frequency of each element\n        # use a list to store the elements with the highest frequency\n        # return the list\n        \n        # find the most frequent element\n        # use a dictionary to store the frequency of each element\n        # use a list to store the elements with the highest frequency\n        # return the list\n        \n        # find the most frequent element\n        # use a dictionary to store the frequency of each element\n        # use a list to store the elements with the highest frequency\n        # return the list\n        \n        # find the most frequent element\n        # use a dictionary to store the frequency of each element\n        # use a list to store the elements with the highest frequency\n        # return the list\n        \n        # find the most frequent element\n        # use a dictionary to store the frequency of each element\n        # use a list to store the elements with the highest frequency\n        # return the list\n        \n        # find the most frequent element\n        # use a dictionary to store the frequency of each element\n        # use a list to store the elements with the highest frequency\n        # return the list\n        \n        # find the most frequent element\n        # use a dictionary to store the frequency of each element\n        # use a list to store the elements with the highest frequency\n        # return the list\n        \n        # find the most frequent element\n        # use a dictionary to store the frequency of each element\n        #"}], "find-the-index-of-the-first-occurrence-in-a-string": [{"task_id": "find-the-index-of-the-first-occurrence-in-a-string", "completion": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        \n        if len(needle) == 0:\n            return 0\n        \n        if len(haystack) < len(needle):\n            return -1\n        \n        for i in range(len(haystack) - len(needle) + 1):\n            if haystack[i:i+len(needle)] == needle:\n                return i\n        \n        return -1"}], "strong-password-checker": [{"task_id": "strong-password-checker", "completion": "class Solution(object):\n    def strongPasswordChecker(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. 6 <= len <= 20\n        # 2. 1 <= len <= 20\n        # 3. 1 <= len <= 20\n        # 4. 1 <= len <= 20\n        # 5. 1 <= len <= 20\n        # 6. 1 <= len <= 20\n        # 7. 1 <= len <= 20\n        # 8. 1 <= len <= 20\n        # 9. 1 <= len <= 20\n        # 10. 1 <= len <= 20\n        # 11. 1 <= len <= 20\n        # 12. 1 <= len <= 20\n        # 13. 1 <= len <= 20\n        # 14. 1 <= len <= 20\n        # 15. 1 <= len <= 20\n        # 16. 1 <= len <= 20\n        # 17. 1 <= len <= 20\n        # 18. 1 <= len <= 20\n        # 19. 1 <= len <= 20\n        # 20. 1 <= len <= 20\n        # 21. 1 <= len <= 20\n        # 22. 1 <= len <= 20\n        # 23. 1 <= len <= 20\n        # 24. 1 <= len <= 20\n        # 25. 1 <= len <= 20\n        # 26. 1 <= len <= 20\n        # 27. 1 <= len <= 20\n        # 28. 1 <= len <= 20\n        # 29. 1 <= len <= 20\n        # 30. 1 <= len <= 20\n        # 31. 1 <= len <= 20\n        # 32. 1 <= len <= 20\n        # 33. 1 <= len <= 20\n        # 34. 1 <= len <= 20\n        # 35. 1 <= len <= 20\n        # 36. 1 <= len <= 20\n        # 37. 1 <= len <= 20\n        # 38. 1 <= len <= 20\n        # 39. 1 <= len <= 20\n        # 40. 1 <= len <= 20\n        # 41. 1 <= len <= 20\n        # 42. 1 <= len <= 20\n        # 43. 1 <= len <= 20\n        # 44. 1 <= len <= 20\n        # 45. 1 <= len <= 20\n        # 46. 1 <= len <= 20\n        # 47. 1 <= len <= 20\n        # 48. 1 <= len <= 20\n        # 49. 1 <= len <= 20\n        # 50. 1 <= len <= 20\n        # 51. 1 <= len <= 20\n        # 52. 1 <= len <= 20\n        # 53. 1 <= len <= 20\n        # 54. 1 <= len <= 20\n        # 55. 1 <= len <= 20\n        # 56. 1 <= len <= 20\n        # 57. 1 <= len <= 20\n        # 58. 1 <= len <= 20\n        # 59. 1 <= len <= 20\n        # 60. 1 <= len <= 20\n        # 61. 1 <= len <= 20\n        # 62. 1 <= len <= 20\n        # 63. 1 <= len <= 20\n        # 64. 1 <= len <= 20\n        # 65. 1 <= len <= 20\n        # 66. 1 <= len <= 20\n        # 67. 1 <= len <= 20\n        # 68. 1 <= len <= 20\n        # 69. 1 <= len <= 20\n        # 70. 1 <= len <= 20\n        # 71. 1 <= len <= 20\n        # 72. 1 <= len <= 20\n        # 73. 1 <= len <= 20\n        # 74. 1 <= len <="}], "factorial-trailing-zeroes": [{"task_id": "factorial-trailing-zeroes", "completion": "class Solution(object):\n    def trailingZeroes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 2 is the only prime factor of 5\n        # 5 = 2 * 5\n        # 10 = 2 * 5\n        # 15 = 2 * 5\n        # 25 = 5 * 5\n        # 30 = 2 * 5 * 5\n        # 40 = 2 * 2 * 5 * 5\n        # 45 = 5 * 5 * 5\n        # 50 = 2 * 5 * 5 * 5\n        # 55 = 5 * 5 * 5 * 5\n        # 60 = 2 * 5 * 5 * 5 * 5\n        # 65 = 5 * 5 * 5 * 5 * 5\n        # 70 = 2 * 5 * 5 * 5 * 5 * 5\n        # 75 = 5 * 5 * 5 * 5 * 5 * 5\n        # 80 = 2 * 5 * 5 * 5 * 5 * 5 * 5\n        # 85 = 5 * 5 * 5 * 5 * 5 * 5 * 5\n        # 90 = 2 * 5 * 5 * 5 * 5 * 5 * 5 * 5\n        # 95 = 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5\n        # 100 = 2 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5\n        # 105 = 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5\n        # 110 = 2 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5\n        # 115 = 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5\n        # 120 = 2 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5\n        # 125 = 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5\n        # 130 = 2 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5\n        # 135 = 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5\n        # 140 = 2 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5\n        # 145 = 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5\n        # 150 = 2 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5\n        # 155 = 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5\n        # 160 = 2 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5\n        # 165 = 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5\n        # 170 = 2 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5\n        # 175 = 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 *"}], "zigzag-conversion": [{"task_id": "zigzag-conversion", "completion": "class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        \n        if numRows == 1:\n            return s\n        \n        res = [\"\"] * numRows\n        i = 0\n        down = True\n        for c in s:\n            res[i] += c\n            if i == 0:\n                down = True\n            elif i == numRows - 1:\n                down = False\n            if down:\n                i += 1\n            else:\n                i -= 1\n        return \"\".join(res)"}], "trapping-rain-water": [{"task_id": "trapping-rain-water", "completion": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. 2 pointers\n        # 2. 1 pass\n        # 3. 2 pass\n        # 4. 2 pass\n        # 5. 2 pass\n        # 6. 2 pass\n        # 7. 2 pass\n        # 8. 2 pass\n        # 9. 2 pass\n        # 10. 2 pass\n        # 11. 2 pass\n        # 12. 2 pass\n        # 13. 2 pass\n        # 14. 2 pass\n        # 15. 2 pass\n        # 16. 2 pass\n        # 17. 2 pass\n        # 18. 2 pass\n        # 19. 2 pass\n        # 20. 2 pass\n        # 21. 2 pass\n        # 22. 2 pass\n        # 23. 2 pass\n        # 24. 2 pass\n        # 25. 2 pass\n        # 26. 2 pass\n        # 27. 2 pass\n        # 28. 2 pass\n        # 29. 2 pass\n        # 30. 2 pass\n        # 31. 2 pass\n        # 32. 2 pass\n        # 33. 2 pass\n        # 34. 2 pass\n        # 35. 2 pass\n        # 36. 2 pass\n        # 37. 2 pass\n        # 38. 2 pass\n        # 39. 2 pass\n        # 40. 2 pass\n        # 41. 2 pass\n        # 42. 2 pass\n        # 43. 2 pass\n        # 44. 2 pass\n        # 45. 2 pass\n        # 46. 2 pass\n        # 47. 2 pass\n        # 48. 2 pass\n        # 49. 2 pass\n        # 50. 2 pass\n        # 51. 2 pass\n        # 52. 2 pass\n        # 53. 2 pass\n        # 54. 2 pass\n        # 55. 2 pass\n        # 56. 2 pass\n        # 57. 2 pass\n        # 58. 2 pass\n        # 59. 2 pass\n        # 60. 2 pass\n        # 61. 2 pass\n        # 62. 2 pass\n        # 63. 2 pass\n        # 64. 2 pass\n        # 65. 2 pass\n        # 66. 2 pass\n        # 67. 2 pass\n        # 68. 2 pass\n        # 69. 2 pass\n        # 70. 2 pass\n        # 71. 2 pass\n        # 72. 2 pass\n        # 73. 2 pass\n        # 74. 2 pass\n        # 75. 2 pass\n        # 76. 2 pass\n        # 77. 2 pass\n        # 78. 2 pass\n        # 79. 2 pass\n        # 80. 2 pass\n        # 81. 2 pass\n        # 82. 2 pass\n        # 83. 2 pass\n        # 84. 2 pass\n        # 85. 2 pass\n        # 86. 2 pass\n        # 87. 2 pass\n        # 88. 2 pass\n        # 89. 2 pass\n        # 90. 2 pass\n        # 91. 2 pass\n        # 92. 2 pass\n        # 93. 2 pass\n        # 94. 2 pass\n        # 95. 2 pass\n        # 96. 2 pass\n        # 97. 2 pass\n        # 98. 2 pass\n        # 99. 2 pass\n        # 100. 2 pass\n        # 101. 2 pass\n        # 102. 2 pass\n        # 103."}], "find-all-numbers-disappeared-in-an-array": [{"task_id": "find-all-numbers-disappeared-in-an-array", "completion": "class Solution(object):\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        ## O(n) time and O(1) space\n        ## 1. loop through the array and mark the index of each number as negative\n        ## 2. loop through the array again and add the positive numbers to the result\n        ## 3. loop through the array again and add the positive numbers to the result\n        ## 4. loop through the array again and add the positive numbers to the result\n        ## 5. loop through the array again and add the positive numbers to the result\n        ## 6. loop through the array again and add the positive numbers to the result\n        ## 7. loop through the array again and add the positive numbers to the result\n        ## 8. loop through the array again and add the positive numbers to the result\n        ## 9. loop through the array again and add the positive numbers to the result\n        ## 10. loop through the array again and add the positive numbers to the result\n        ## 11. loop through the array again and add the positive numbers to the result\n        ## 12. loop through the array again and add the positive numbers to the result\n        ## 13. loop through the array again and add the positive numbers to the result\n        ## 14. loop through the array again and add the positive numbers to the result\n        ## 15. loop through the array again and add the positive numbers to the result\n        ## 16. loop through the array again and add the positive numbers to the result\n        ## 17. loop through the array again and add the positive numbers to the result\n        ## 18. loop through the array again and add the positive numbers to the result\n        ## 19. loop through the array again and add the positive numbers to the result\n        ## 20. loop through the array again and add the positive numbers to the result\n        ## 21. loop through the array again and add the positive numbers to the result\n        ## 22. loop through the array again and add the positive numbers to the result\n        ## 23. loop through the array again and add the positive numbers to the result\n        ## 24. loop through the array again and add the positive numbers to the result\n        ## 25. loop through the array again and add the positive numbers to the result\n        ## 26. loop through the array again and add the positive numbers to the result\n        ## 27. loop through the array again and add the positive numbers to the result\n        ## 28. loop through the array again and add the positive numbers to the result\n        ## 29. loop through the array again and add the positive numbers to the result\n        ## 30. loop through the array again and add the positive numbers to the result\n        ## 31. loop through the array again and add the positive numbers to the result\n        ## 32. loop through the array again and add the positive numbers to the result\n        ## 33. loop through the array again and add the positive numbers to the result\n        ## 34. loop through the array again and add the positive numbers to the result\n        ## 35. loop through the array again and add the positive numbers to the result\n        ## 36. loop through the array again and add the positive numbers to the result\n        ## 37. loop through the array again and add the positive numbers to the result\n        ## 38. loop through the array again and add the positive numbers to the result\n        ## 39. loop through the array again and add the positive numbers to the result\n        ## 40. loop through the array again and add the positive numbers to the result\n        ## 41. loop through the array again and add the positive numbers to the result\n        ## 42. loop through the array again and add the positive numbers to the result\n        ## 43. loop through the array again and add the positive numbers to the result\n        ## 44. loop through the array again and add the positive numbers to the result\n        ## 45. loop through the array again and add the positive numbers to the result\n        ## 46. loop through the array again and add the positive numbers to the result\n        ## 47. loop through the array again and add the positive numbers to the result\n        ## 48. loop through the array again and add the positive numbers to the result\n        ## 49. loop through the"}], "count-of-smaller-numbers-after-self": [{"task_id": "count-of-smaller-numbers-after-self", "completion": "class Solution(object):\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "set-intersection-size-at-least-two": [{"task_id": "set-intersection-size-at-least-two", "completion": "class Solution(object):\n    def intersectionSizeTwo(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # sort the intervals by the end of the interval\n        intervals.sort(key=lambda x: x[1])\n        \n        # initialize the result\n        res = 0\n        \n        # initialize the max end of the interval\n        max_end = -1\n        \n        # iterate over the intervals\n        for interval in intervals:\n            # if the start of the interval is less than the max end of the interval\n            if interval[0] <= max_end:\n                # update the max end of the interval\n                max_end = max(max_end, interval[1])\n            else:\n                # increment the result\n                res += 1\n                # update the max end of the interval\n                max_end = interval[1]\n        \n        # return the result\n        return res"}], "symmetric-tree": [{"task_id": "symmetric-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if root == None:\n            return True\n        \n        return self.isMirror(root.left, root.right)\n    \n    def isMirror(self, left, right):\n        if left == None and right == None:\n            return True\n        if left == None or right == None:\n            return False\n        if left.val != right.val:\n            return False\n        return self.isMirror(left.left, right.right) and self.isMirror(left.right, right.left)"}], "number-of-atoms": [{"task_id": "number-of-atoms", "completion": "class Solution(object):\n    def countOfAtoms(self, formula):\n        \"\"\"\n        :type formula: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "binary-tree-preorder-traversal": [{"task_id": "binary-tree-preorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def preorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        # Iterative solution\n        # if root is None:\n        #     return []\n        # stack = [root]\n        # res = []\n        # while stack:\n        #     node = stack.pop()\n        #     if node:\n        #         if node.right:\n        #             stack.append(node.right)\n        #         if node.left:\n        #             stack.append(node.left)\n        #         res.append(node.val)\n        # return res\n        \n        # Recursive solution\n        if root is None:\n            return []\n        return [root.val] + self.preorderTraversal(root.left) + self.preorderTraversal(root.right)"}], "power-of-four": [{"task_id": "power-of-four", "completion": "class Solution(object):\n    def isPowerOfFour(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. n is a power of 2\n        # 2. n is a power of 4\n        # 3. n is a power of 2 and n is a power of 4\n        # 4. n is a power of 2 and n is a power of 4 and n is a power of 8\n        # 5. n is a power of 2 and n is a power of 4 and n is a power of 8 and n is a power of 16\n        # 6. n is a power of 2 and n is a power of 4 and n is a power of 8 and n is a power of 16 and n is a power of 32\n        # 7. n is a power of 2 and n is a power of 4 and n is a power of 8 and n is a power of 16 and n is a power of 32 and n is a power of 64\n        # 8. n is a power of 2 and n is a power of 4 and n is a power of 8 and n is a power of 16 and n is a power of 32 and n is a power of 64 and n is a power of 128\n        # 9. n is a power of 2 and n is a power of 4 and n is a power of 8 and n is a power of 16 and n is a power of 32 and n is a power of 64 and n is a power of 128 and n is a power of 256\n        # 10. n is a power of 2 and n is a power of 4 and n is a power of 8 and n is a power of 16 and n is a power of 32 and n is a power of 64 and n is a power of 128 and n is a power of 256 and n is a power of 512\n        # 11. n is a power of 2 and n is a power of 4 and n is a power of 8 and n is a power of 16 and n is a power of 32 and n is a power of 64 and n is a power of 128 and n is a power of 256 and n is a power of 512 and n is a power of 1024\n        # 12. n is a power of 2 and n is a power of 4 and n is a power of 8 and n is a power of 16 and n is a power of 32 and n is a power of 64 and n is a power of 128 and n is a power of 256 and n is a power of 512 and n is a power of 1024 and n is a power of 2048\n        # 13. n is a power of 2 and n is a power of 4 and n is a power of 8 and n is a power of 16 and n is a power of 32 and n is a power of 64 and n is a power of 128 and n is a power of 256 and n is a power of 512 and n is a power of 1024 and n is a power of 2048 and n is a power of 4096\n        # 14. n is a power of 2 and n is a power of 4 and n is a power of 8 and n is a power of 16 and n is a power of 32 and n is a power of 64 and n is a power of 128 and n is a power of 256 and n is a power of 512 and n is a power of 1024 and n is a power of 2048 and n is a power of 4096 and n is a power of 8192\n        # 15. n is a power of 2 and n is a power of 4 and n is a power of 8 and n is a power of 16 and n is a power of 32 and n is a power of 64 and n is a power of 128 and n is a power of 256 and n is a power of 512 and n is a power of 1024 and n is a power of 2048 and n is a power of 4096 and"}], "invert-binary-tree": [{"task_id": "invert-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def invertTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        \n        if root == None:\n            return None\n        \n        temp = root.left\n        root.left = root.right\n        root.right = temp\n        \n        self.invertTree(root.left)\n        self.invertTree(root.right)\n        \n        return root"}], "generate-parentheses": [{"task_id": "generate-parentheses", "completion": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        if n == 0:\n            return []\n        if n == 1:\n            return ['()']\n        \n        res = []\n        for i in range(n):\n            left = self.generateParenthesis(i)\n            right = self.generateParenthesis(n - i - 1)\n            for l in left:\n                for r in right:\n                    res.append('({}){}'.format(l, r))\n        return res"}], "patching-array": [{"task_id": "patching-array", "completion": "class Solution(object):\n    def minPatches(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # edge case\n        if not nums:\n            return 0\n        \n        # edge case\n        if nums[0] > n:\n            return 0\n        \n        # edge case\n        if nums[0] == 1:\n            return 1\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n / 2:\n            return 1\n        \n        # edge case\n        if nums[-1] > n / 4:\n            return 1\n        \n        # edge case\n        if nums[-1] > n / 8:\n            return 1\n        \n        # edge case\n        if nums[-1] > n / 16:\n            return 1\n        \n        # edge case\n        if nums[-1] > n / 32:\n            return 1\n        \n        # edge case\n        if nums[-1] > n / 64:\n            return 1\n        \n        # edge case\n        if nums[-1] > n / 128:\n            return 1\n        \n        # edge case\n        if nums[-1] > n / 256:\n            return 1\n        \n        # edge case\n        if nums[-1] > n / 512:\n            return 1\n        \n        # edge case\n        if nums[-1] > n / 1024:\n            return 1\n        \n        # edge case\n        if nums[-1] > n / 2048:\n            return 1\n        \n        # edge case\n        if nums[-1] > n / 4096:\n            return 1\n        \n        # edge case\n        if nums[-1] > n / 8192:\n            return 1\n        \n        # edge case\n        if nums[-1] > n / 16384:\n            return 1\n        \n        # edge case\n        if nums[-1] > n / 32768:\n            return 1\n        \n        # edge case\n        if nums[-1] > n / 65536:\n            return 1\n        \n        # edge case\n        if nums[-1] > n / 131072:\n            return 1\n        \n        # edge case\n        if nums[-1] > n / 262144:\n            return 1\n        \n        # edge case\n        if nums[-1] > n / 524288:\n            return 1\n        \n        # edge case\n        if nums[-1] > n / 1048576:\n            return 1\n        \n        # edge case\n        if nums[-1] > n / 2097152:\n            return 1\n        \n        # edge case\n        if nums[-1] > n / 4194304:\n            return 1\n        \n        # edge case\n        if nums[-1] > n / 8388608:\n            return 1\n        \n        # edge case\n        if nums[-1] > n / 16777216:\n            return 1\n        \n        # edge case\n        if nums[-1] > n / 33554432:\n            return 1\n        \n        # edge case\n        if nums[-1] > n / 67108864:\n            return 1\n        \n        # edge case\n        if nums[-1] > n / 134217728:\n            return 1\n        \n        # edge case\n        if nums[-1] > n / 268435456:\n            return 1\n        \n        # edge case\n        if nums[-1] > n / 536870912:\n            return 1\n        \n        # edge case\n        if nums[-1] > n / 1073741824:\n            return 1\n        \n        # edge case\n        if"}], "longest-valid-parentheses": [{"task_id": "longest-valid-parentheses", "completion": "class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \uc2a4\ud0dd\uc744 \uc0ac\uc6a9\ud55c \ubc29\ubc95\n        # 2. \uc2a4\ud0dd\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \uc9dd\uc774 \ub9de\ub294 \uacbd\uc6b0\ub9cc \uce74\uc6b4\ud2b8\ud558\uba74 \ub41c\ub2e4.\n        # 3. \uc2a4\ud0dd\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \uc9dd\uc774 \ub9de\uc9c0 \uc54a\ub294 \uacbd\uc6b0\ub9cc \uce74\uc6b4\ud2b8\ud558\uba74 \ub41c\ub2e4.\n        # 4. \uc2a4\ud0dd\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \uc9dd\uc774 \ub9de\ub294 \uacbd\uc6b0\ub9cc \uce74\uc6b4\ud2b8\ud558\uba74 \ub41c\ub2e4.\n        # 5. \uc2a4\ud0dd\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \uc9dd\uc774 \ub9de\ub294 \uacbd\uc6b0\ub9cc \uce74\uc6b4\ud2b8\ud558\uba74 \ub41c\ub2e4.\n        # 6. \uc2a4\ud0dd\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \uc9dd\uc774 \ub9de\ub294 \uacbd\uc6b0\ub9cc \uce74\uc6b4\ud2b8\ud558\uba74 \ub41c\ub2e4.\n        # 7. \uc2a4\ud0dd\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \uc9dd\uc774 \ub9de\ub294 \uacbd\uc6b0\ub9cc \uce74\uc6b4\ud2b8\ud558\uba74 \ub41c\ub2e4.\n        # 8. \uc2a4\ud0dd\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \uc9dd\uc774 \ub9de\ub294 \uacbd\uc6b0\ub9cc \uce74\uc6b4\ud2b8\ud558\uba74 \ub41c\ub2e4.\n        # 9. \uc2a4\ud0dd\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \uc9dd\uc774 \ub9de\ub294 \uacbd\uc6b0\ub9cc \uce74\uc6b4\ud2b8\ud558\uba74 \ub41c\ub2e4.\n        # 10. \uc2a4\ud0dd\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \uc9dd\uc774 \ub9de\ub294 \uacbd\uc6b0\ub9cc \uce74\uc6b4\ud2b8\ud558\uba74 \ub41c\ub2e4.\n        # 11. \uc2a4\ud0dd\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \uc9dd\uc774 \ub9de\ub294 \uacbd\uc6b0\ub9cc \uce74\uc6b4\ud2b8\ud558\uba74 \ub41c\ub2e4.\n        # 12. \uc2a4\ud0dd\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \uc9dd\uc774 \ub9de\ub294 \uacbd\uc6b0\ub9cc \uce74\uc6b4\ud2b8\ud558\uba74 \ub41c\ub2e4.\n        # 13. \uc2a4\ud0dd\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \uc9dd\uc774 \ub9de\ub294 \uacbd\uc6b0\ub9cc \uce74\uc6b4\ud2b8\ud558\uba74 \ub41c\ufffd"}], "fraction-to-recurring-decimal": [{"task_id": "fraction-to-recurring-decimal", "completion": "class Solution(object):\n    def fractionToDecimal(self, numerator, denominator):\n        \"\"\"\n        :type numerator: int\n        :type denominator: int\n        :rtype: str\n        \"\"\"\n        \n        if numerator == 0:\n            return \"0\"\n        \n        if denominator == 0:\n            return \"\"\n        \n        if numerator < 0 and denominator > 0:\n            sign = -1\n        elif numerator > 0 and denominator < 0:\n            sign = 1\n        else:\n            sign = 1\n        \n        numerator = abs(numerator)\n        denominator = abs(denominator)\n        \n        quotient = numerator // denominator\n        remainder = numerator % denominator\n        \n        if remainder == 0:\n            return str(sign * quotient)\n        \n        remainder_dict = {}\n        remainder_dict[remainder] = len(remainder_dict)\n        \n        decimal_str = str(sign * quotient) + \".\"\n        \n        while remainder != 0:\n            remainder *= 10\n            quotient = remainder // denominator\n            remainder = remainder % denominator\n            \n            if remainder in remainder_dict:\n                decimal_str += \"(\" + str(quotient) + \")\"\n                break\n            \n            remainder_dict[remainder] = len(remainder_dict)\n            decimal_str += str(quotient)\n        \n        return decimal_str"}], "sort-list": [{"task_id": "sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        # find the middle of the list\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # split the list into two halves\n        mid = slow.next\n        slow.next = None\n        \n        # sort the two halves\n        left = self.sortList(head)\n        right = self.sortList(mid)\n        \n        # merge the two sorted halves\n        return self.merge(left, right)\n    \n    def merge(self, left, right):\n        # create a dummy node\n        dummy = ListNode()\n        curr = dummy\n        \n        # merge the two lists\n        while left and right:\n            if left.val < right.val:\n                curr.next = left\n                left = left.next\n            else:\n                curr.next = right\n                right = right.next\n            curr = curr.next\n        \n        # add the remaining nodes from the left list\n        if left:\n            curr.next = left\n        # add the remaining nodes from the right list\n        if right:\n            curr.next = right\n        \n        return dummy.next"}], "russian-doll-envelopes": [{"task_id": "russian-doll-envelopes", "completion": "class Solution(object):\n    def maxEnvelopes(self, envelopes):\n        \"\"\"\n        :type envelopes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not envelopes:\n            return 0\n        \n        envelopes.sort(key=lambda x: (x[0], -x[1]))\n        # print(envelopes)\n        # print(envelopes[0][0])\n        # print(envelopes[0][1])\n        # print(envelopes[1][0])\n        # print(envelopes[1][1])\n        # print(envelopes[2][0])\n        # print(envelopes[2][1])\n        # print(envelopes[3][0])\n        # print(envelopes[3][1])\n        # print(envelopes[4][0])\n        # print(envelopes[4][1])\n        # print(envelopes[5][0])\n        # print(envelopes[5][1])\n        # print(envelopes[6][0])\n        # print(envelopes[6][1])\n        # print(envelopes[7][0])\n        # print(envelopes[7][1])\n        # print(envelopes[8][0])\n        # print(envelopes[8][1])\n        # print(envelopes[9][0])\n        # print(envelopes[9][1])\n        # print(envelopes[10][0])\n        # print(envelopes[10][1])\n        # print(envelopes[11][0])\n        # print(envelopes[11][1])\n        # print(envelopes[12][0])\n        # print(envelopes[12][1])\n        # print(envelopes[13][0])\n        # print(envelopes[13][1])\n        # print(envelopes[14][0])\n        # print(envelopes[14][1])\n        # print(envelopes[15][0])\n        # print(envelopes[15][1])\n        # print(envelopes[16][0])\n        # print(envelopes[16][1])\n        # print(envelopes[17][0])\n        # print(envelopes[17][1])\n        # print(envelopes[18][0])\n        # print(envelopes[18][1])\n        # print(envelopes[19][0])\n        # print(envelopes[19][1])\n        # print(envelopes[20][0])\n        # print(envelopes[20][1])\n        # print(envelopes[21][0])\n        # print(envelopes[21][1])\n        # print(envelopes[22][0])\n        # print(envelopes[22][1])\n        # print(envelopes[23][0])\n        # print(envelopes[23][1])\n        # print(envelopes[24][0])\n        # print(envelopes[24][1])\n        # print(envelopes[25][0])\n        # print(envelopes[25][1])\n        # print(envelopes[26][0])\n        # print(envelopes[26][1])\n        # print(envelopes[27][0])\n        # print(envelopes[27][1])\n        # print(envelopes[28][0])\n        # print(envelopes[28][1])\n        # print(envelopes[29][0])\n        # print(envelopes[29][1])\n        # print(envelopes[30][0])\n        # print(envelopes[30][1])\n        # print(envelopes[31][0])\n        # print(envelopes[31][1])\n        # print(envelopes[32][0])\n        # print(envelopes[32][1])\n        # print(envelopes[33][0])\n        # print(envelopes[33][1])\n        # print(envelopes[34][0])\n        # print(envelopes[34][1])\n        # print(envelopes[35][0])\n        # print"}], "set-matrix-zeroes": [{"task_id": "set-matrix-zeroes", "completion": "class Solution(object):\n    def setZeroes(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ##"}], "remove-nth-node-from-end-of-list": [{"task_id": "remove-nth-node-from-end-of-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # 1. find the length of the linked list\n        # 2. find the node to be removed\n        # 3. remove the node\n        \n        # 1. find the length of the linked list\n        length = 0\n        curr = head\n        while curr:\n            length += 1\n            curr = curr.next\n        \n        # 2. find the node to be removed\n        # 3. remove the node\n        if length == 1:\n            return None\n        if length - n == 0:\n            return head.next\n        \n        # 2. find the node to be removed\n        # 3. remove the node\n        curr = head\n        for i in range(length - n - 1):\n            curr = curr.next\n        curr.next = curr.next.next\n        return head"}], "intersection-of-two-arrays": [{"task_id": "intersection-of-two-arrays", "completion": "class Solution(object):\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        ## O(n) time and O(n) space\n        ## use set to store nums1\n        ## iterate through nums2\n        ## if nums2 in set, add to result\n        ## return result\n        \n        ## O(n) time and O(1) space\n        ## use set to store nums1\n        ## iterate through nums2\n        ## if nums2 in set, add to result\n        ## return result\n        \n        ## O(n) time and O(n) space\n        ## use set to store nums1\n        ## iterate through nums2\n        ## if nums2 in set, add to result\n        ## return result\n        \n        ## O(n) time and O(n) space\n        ## use set to store nums1\n        ## iterate through nums2\n        ## if nums2 in set, add to result\n        ## return result\n        \n        ## O(n) time and O(n) space\n        ## use set to store nums1\n        ## iterate through nums2\n        ## if nums2 in set, add to result\n        ## return result\n        \n        ## O(n) time and O(n) space\n        ## use set to store nums1\n        ## iterate through nums2\n        ## if nums2 in set, add to result\n        ## return result\n        \n        ## O(n) time and O(n) space\n        ## use set to store nums1\n        ## iterate through nums2\n        ## if nums2 in set, add to result\n        ## return result\n        \n        ## O(n) time and O(n) space\n        ## use set to store nums1\n        ## iterate through nums2\n        ## if nums2 in set, add to result\n        ## return result\n        \n        ## O(n) time and O(n) space\n        ## use set to store nums1\n        ## iterate through nums2\n        ## if nums2 in set, add to result\n        ## return result\n        \n        ## O(n) time and O(n) space\n        ## use set to store nums1\n        ## iterate through nums2\n        ## if nums2 in set, add to result\n        ## return result\n        \n        ## O(n) time and O(n) space\n        ## use set to store nums1\n        ## iterate through nums2\n        ## if nums2 in set, add to result\n        ## return result\n        \n        ## O(n) time and O(n) space\n        ## use set to store nums1\n        ## iterate through nums2\n        ## if nums2 in set, add to result\n        ## return result\n        \n        ## O(n) time and O(n) space\n        ## use set to store nums1\n        ## iterate through nums2\n        ## if nums2 in set, add to result\n        ## return result\n        \n        ## O(n) time and O(n) space\n        ## use set to store nums1\n        ## iterate through nums2\n        ## if nums2 in set, add to result\n        ## return result\n        \n        ## O(n) time and O(n) space\n        ## use set to store nums1\n        ## iterate through nums2\n        ## if nums2 in set, add to result\n        ## return result\n        \n        ## O(n) time and O(n) space\n        ## use set to store nums1\n        ## iterate through nums2\n        ## if nums2 in set, add to result\n        ## return result\n        \n        ## O(n) time and O(n) space\n        ## use set to store nums1\n        ## iterate through nums2\n        ## if nums2 in set, add to result\n        ## return result\n        \n        ## O(n) time and O(n) space\n        ## use set to store nums1\n        ## iterate through nums2\n        #"}], "super-washing-machines": [{"task_id": "super-washing-machines", "completion": "class Solution(object):\n    def findMinMoves(self, machines):\n        \"\"\"\n        :type machines: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. find the sum of all the dresses\n        total = sum(machines)\n        if total % len(machines) != 0:\n            return -1\n        avg = total / len(machines)\n        \n        # 2. find the max dresses in the machine\n        max_dress = max(machines)\n        \n        # 3. find the sum of dresses in the first machine\n        sum_dress = 0\n        for i in range(len(machines)):\n            sum_dress += machines[i]\n            if sum_dress > avg * (i + 1):\n                return -1\n        \n        # 4. find the sum of dresses in the last machine\n        sum_dress = 0\n        for i in range(len(machines) - 1, -1, -1):\n            sum_dress += machines[i]\n            if sum_dress > avg * (len(machines) - i):\n                return -1\n        \n        # 5. find the max dresses in the first machine\n        max_dress = max(max_dress, sum_dress)\n        \n        # 6. find the sum of dresses in the middle machines\n        sum_dress = 0\n        for i in range(len(machines) - 1):\n            sum_dress += machines[i]\n            if sum_dress > avg * (i + 1):\n                return -1\n        \n        # 7. find the max dresses in the middle machines\n        max_dress = max(max_dress, total - sum_dress)\n        \n        return max_dress"}], "kth-smallest-number-in-multiplication-table": [{"task_id": "kth-smallest-number-in-multiplication-table", "completion": "class Solution(object):\n    def findKthNumber(self, m, n, k):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # if k == 1:\n        #     return min(m, n)\n        \n        # if m > n:\n        #     m, n = n, m\n        #     k = m - k\n        \n        # if k > m * n:\n        #     return -1\n        \n        # if k == 1:\n        #     return min(m, n)\n        \n        # if m > n:\n        #     m, n = n, m\n        #     k = m - k\n        \n        # if k > m * n:\n        #     return -1\n        \n        # if k == 1:\n        #     return min(m, n)\n        \n        # if m > n:\n        #     m, n = n, m\n        #     k = m - k\n        \n        # if k > m * n:\n        #     return -1\n        \n        # if k == 1:\n        #     return min(m, n)\n        \n        # if m > n:\n        #     m, n = n, m\n        #     k = m - k\n        \n        # if k > m * n:\n        #     return -1\n        \n        # if k == 1:\n        #     return min(m, n)\n        \n        # if m > n:\n        #     m, n = n, m\n        #     k = m - k\n        \n        # if k > m * n:\n        #     return -1\n        \n        # if k == 1:\n        #     return min(m, n)\n        \n        # if m > n:\n        #     m, n = n, m\n        #     k = m - k\n        \n        # if k > m * n:\n        #     return -1\n        \n        # if k == 1:\n        #     return min(m, n)\n        \n        # if m > n:\n        #     m, n = n, m\n        #     k = m - k\n        \n        # if k > m * n:\n        #     return -1\n        \n        # if k == 1:\n        #     return min(m, n)\n        \n        # if m > n:\n        #     m, n = n, m\n        #     k = m - k\n        \n        # if k > m * n:\n        #     return -1\n        \n        # if k == 1:\n        #     return min(m, n)\n        \n        # if m > n:\n        #     m, n = n, m\n        #     k = m - k\n        \n        # if k > m * n:\n        #     return -1\n        \n        # if k == 1:\n        #     return min(m, n)\n        \n        # if m > n:\n        #     m, n = n, m\n        #     k = m - k\n        \n        # if k > m * n:\n        #     return -1\n        \n        # if k == 1:\n        #     return min(m, n)\n        \n        # if m > n:\n        #     m, n = n, m\n        #     k = m - k\n        \n        # if k > m * n:\n        #     return -1\n        \n        # if k == 1:\n        #     return min(m, n)\n        \n        # if m > n:\n        #     m, n = n, m\n        #     k = m - k\n        \n        # if k > m * n:\n        #     return -1\n        \n        # if k == 1:\n        #     return min(m, n)\n        \n        # if m > n:\n        #     m, n = n, m\n        #     k = m - k\n        \n        # if k > m * n:\n        #     return -1\n        \n        # if k == 1:\n        #     return min(m, n)\n        \n        # if m > n:\n        #     m, n = n, m\n        #     k = m - k\n        \n        # if k > m * n:\n        #     return -1\n        \n        # if k == 1:\n        #     return min(m, n)\n        \n        # if m > n:\n        #     m, n = n, m\n        #     k"}], "convert-sorted-list-to-binary-search-tree": [{"task_id": "convert-sorted-list-to-binary-search-tree", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedListToBST(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :rtype: Optional[TreeNode]\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        if not head.next:\n            return head\n        \n        # find the middle of the linked list\n        slow = head\n        fast = head\n        prev = None\n        while fast and fast.next:\n            prev = slow\n            slow = slow.next\n            fast = fast.next.next\n        \n        # break the list into two halves\n        prev.next = None\n        \n        # recursively build the left and right subtree\n        left = self.sortedListToBST(head)\n        right = self.sortedListToBST(slow)\n        \n        # return the root node\n        return TreeNode(slow.val, left, right)"}], "merge-two-sorted-lists": [{"task_id": "merge-two-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: Optional[ListNode]\n        :type list2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        \n        if list1 is None:\n            return list2\n        if list2 is None:\n            return list1\n        \n        if list1.val < list2.val:\n            list1, list2 = list2, list1\n        \n        head = list1\n        \n        while list1.next:\n            if list1.next.val > list2.val:\n                list1 = list1.next\n            else:\n                temp = list1.next\n                list1.next = list2\n                list2 = temp\n                list1 = list1.next\n        \n        list1.next = list2\n        \n        return head"}], "maximal-rectangle": [{"task_id": "maximal-rectangle", "completion": "class Solution(object):\n    def maximalRectangle(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        heights = [0] * (n + 1)\n        max_area = 0\n        \n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == '1':\n                    heights[j] += 1\n                else:\n                    heights[j] = 0\n            max_area = max(max_area, self.largestRectangleArea(heights))\n        \n        return max_area\n    \n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        stack = []\n        max_area = 0\n        heights.append(0)\n        for i in range(len(heights)):\n            while stack and heights[stack[-1]] > heights[i]:\n                h = heights[stack.pop()]\n                if stack:\n                    max_area = max(max_area, (i - stack[-1] - 1) * h)\n                else:\n                    max_area = max(max_area, i * h)\n            stack.append(i)\n        return max_area"}], "subsets": [{"task_id": "subsets", "completion": "class Solution(object):\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 2**n is the number of subsets\n        # 2**n - 1 is the number of elements in the subset\n        # 2**n - 2 is the number of elements in the subset\n        # 2**n - 3 is the number of elements in the subset\n        # 2**n - 4 is the number of elements in the subset\n        # 2**n - 5 is the number of elements in the subset\n        # 2**n - 6 is the number of elements in the subset\n        # 2**n - 7 is the number of elements in the subset\n        # 2**n - 8 is the number of elements in the subset\n        # 2**n - 9 is the number of elements in the subset\n        # 2**n - 10 is the number of elements in the subset\n        # 2**n - 11 is the number of elements in the subset\n        # 2**n - 12 is the number of elements in the subset\n        # 2**n - 13 is the number of elements in the subset\n        # 2**n - 14 is the number of elements in the subset\n        # 2**n - 15 is the number of elements in the subset\n        # 2**n - 16 is the number of elements in the subset\n        # 2**n - 17 is the number of elements in the subset\n        # 2**n - 18 is the number of elements in the subset\n        # 2**n - 19 is the number of elements in the subset\n        # 2**n - 20 is the number of elements in the subset\n        # 2**n - 21 is the number of elements in the subset\n        # 2**n - 22 is the number of elements in the subset\n        # 2**n - 23 is the number of elements in the subset\n        # 2**n - 24 is the number of elements in the subset\n        # 2**n - 25 is the number of elements in the subset\n        # 2**n - 26 is the number of elements in the subset\n        # 2**n - 27 is the number of elements in the subset\n        # 2**n - 28 is the number of elements in the subset\n        # 2**n - 29 is the number of elements in the subset\n        # 2**n - 30 is the number of elements in the subset\n        # 2**n - 31 is the number of elements in the subset\n        # 2**n - 32 is the number of elements in the subset\n        # 2**n - 33 is the number of elements in the subset\n        # 2**n - 34 is the number of elements in the subset\n        # 2**n - 35 is the number of elements in the subset\n        # 2**n - 36 is the number of elements in the subset\n        # 2**n - 37 is the number of elements in the subset\n        # 2**n - 38 is the number of elements in the subset\n        # 2**n - 39 is the number of elements in the subset\n        # 2**n - 40 is the number of elements in the subset\n        # 2**n - 41 is the number of elements in the subset\n        # 2**n - 42 is the number of elements in the subset\n        # 2**n - 43 is the number of elements in the subset\n        # 2**n - 44 is the number of elements in the subset\n        # 2**n - 45 is the number of elements in the subset\n        # 2**n - 46 is the number of elements in the subset\n        # 2**n - 47 is the number of elements in the subset\n        # 2**n - 48 is the number of elements in the subset\n        # 2**n - 49 is the number of elements in the subset\n        # 2**n - 50 is the number of elements in the subset\n        # 2**n - 51 is the number of elements in the subset\n        # 2**n - 52 is the number of elements in the subset\n        # 2**n - 53 is the number of elements in the subset\n        # 2**n - 54 is the number of"}], "find-minimum-in-rotated-sorted-array-ii": [{"task_id": "find-minimum-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        \n        # left, right = 0, len(nums) - 1\n        # while left < right:\n        #     mid = left + (right - left) // 2\n        #     if nums[mid] > nums[right]:\n        #         left = mid + 1\n        #     else:\n        #         right = mid\n        # return nums[left]\n        \n        # binary search\n        left, right = 0, len(nums) - 1\n        while left < right:\n            mid = left + (right - left) // 2\n            if nums[mid] > nums[right]:\n                left = mid + 1\n            else:\n                right = mid\n        return nums[left]"}], "valid-number": [{"task_id": "valid-number", "completion": "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. remove all spaces\n        s = s.strip()\n        \n        # 2. check if it is a valid number\n        if not s or s[0] not in ('+', '-') and not s[0].isdigit():\n            return False\n        \n        # 3. check if it is a valid number\n        if s[-1] not in ('+', '-') and not s[-1].isdigit():\n            return False\n        \n        # 4. check if it is a valid number\n        if 'e' in s:\n            num, exp = s.split('e')\n            if not num or not exp:\n                return False\n            if not num.isdigit() or not exp.isdigit():\n                return False\n            if exp[0] == '+' or exp[0] == '-':\n                exp = exp[1:]\n            if not exp:\n                return False\n            if not num.split('.')[0].isdigit():\n                return False\n            if exp.split('.')[0].isdigit():\n                return False\n            if exp[0] == '+' or exp[0] == '-':\n                exp = exp[1:]\n            if not exp:\n                return False\n            if not exp.split('.')[0].isdigit():\n                return False\n            if exp.split('.')[0].isdigit():\n                return False\n            if exp[0] == '+' or exp[0] == '-':\n                exp = exp[1:]\n            if not exp:\n                return False\n            if not exp.split('.')[0].isdigit():\n                return False\n            if exp.split('.')[0].isdigit():\n                return False\n            if exp[0] == '+' or exp[0] == '-':\n                exp = exp[1:]\n            if not exp:\n                return False\n            if not exp.split('.')[0].isdigit():\n                return False\n            if exp.split('.')[0].isdigit():\n                return False\n            if exp[0] == '+' or exp[0] == '-':\n                exp = exp[1:]\n            if not exp:\n                return False\n            if not exp.split('.')[0].isdigit():\n                return False\n            if exp.split('.')[0].isdigit():\n                return False\n            if exp[0] == '+' or exp[0] == '-':\n                exp = exp[1:]\n            if not exp:\n                return False\n            if not exp.split('.')[0].isdigit():\n                return False\n            if exp.split('.')[0].isdigit():\n                return False\n            if exp[0] == '+' or exp[0] == '-':\n                exp = exp[1:]\n            if not exp:\n                return False\n            if not exp.split('.')[0].isdigit():\n                return False\n            if exp.split('.')[0].isdigit():\n                return False\n            if exp[0] == '+' or exp[0] == '-':\n                exp = exp[1:]\n            if not exp:\n                return False\n            if not exp.split('.')[0].isdigit():\n                return False\n            if exp.split('.')[0].isdigit():\n                return False\n            if exp[0] == '+' or exp[0] == '-':\n                exp = exp[1:]\n            if not exp:\n                return False\n            if not exp.split('.')[0].isdigit():\n                return False\n            if exp.split('.')[0].isdigit():\n                return False\n            if exp[0] == '+' or exp[0] == '-':\n                exp = exp[1:]\n            if not exp:\n                return False\n            if not exp.split('.')[0].isdigit():\n                return False\n            if exp.split('.')[0].isdigit():\n                return False\n            if exp[0] == '+' or exp[0] == '-':\n                exp = exp[1:]\n            if not exp:\n                return False\n            if not exp.split('.')[0].isdigit():\n                return False\n            if exp.split('.')[0].isdigit():\n                return False\n            if exp[0] == '+' or"}], "integer-to-roman": [{"task_id": "integer-to-roman", "completion": "class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        # 1000 - M\n        # 500 - D\n        # 100 - C\n        # 50 - L\n        # 10 - X\n        # 5 - V\n        # 1 - I\n        \n        # 1000 - M\n        # 500 - D\n        # 100 - C\n        # 50 - L\n        # 10 - X\n        # 5 - V\n        # 1 - I\n        \n        # 1000 - M\n        # 500 - D\n        # 100 - C\n        # 50 - L\n        # 10 - X\n        # 5 - V\n        # 1 - I\n        \n        # 1000 - M\n        # 500 - D\n        # 100 - C\n        # 50 - L\n        # 10 - X\n        # 5 - V\n        # 1 - I\n        \n        # 1000 - M\n        # 500 - D\n        # 100 - C\n        # 50 - L\n        # 10 - X\n        # 5 - V\n        # 1 - I\n        \n        # 1000 - M\n        # 500 - D\n        # 100 - C\n        # 50 - L\n        # 10 - X\n        # 5 - V\n        # 1 - I\n        \n        # 1000 - M\n        # 500 - D\n        # 100 - C\n        # 50 - L\n        # 10 - X\n        # 5 - V\n        # 1 - I\n        \n        # 1000 - M\n        # 500 - D\n        # 100 - C\n        # 50 - L\n        # 10 - X\n        # 5 - V\n        # 1 - I\n        \n        # 1000 - M\n        # 500 - D\n        # 100 - C\n        # 50 - L\n        # 10 - X\n        # 5 - V\n        # 1 - I\n        \n        # 1000 - M\n        # 500 - D\n        # 100 - C\n        # 50 - L\n        # 10 - X\n        # 5 - V\n        # 1 - I\n        \n        # 1000 - M\n        # 500 - D\n        # 100 - C\n        # 50 - L\n        # 10 - X\n        # 5 - V\n        # 1 - I\n        \n        # 1000 - M\n        # 500 - D\n        # 100 - C\n        # 50 - L\n        # 10 - X\n        # 5 - V\n        # 1 - I\n        \n        # 1000 - M\n        # 500 - D\n        # 100 - C\n        # 50 - L\n        # 10 - X\n        # 5 - V\n        # 1 - I\n        \n        # 1000 - M\n        # 500 - D\n        # 100 - C\n        # 50 - L\n        # 10 - X\n        # 5 - V\n        # 1 - I\n        \n        # 1000 - M\n        # 500 - D\n        # 100 - C\n        # 50 - L\n        # 10 - X\n        # 5 - V\n        # 1 - I\n        \n        # 1000 - M\n        # 500 - D\n        # 100 - C\n        # 50 - L\n        # 10 - X\n        # 5 - V\n        # 1 - I\n        \n        # 1000 - M\n        # 500 - D\n        # 100 - C\n        # 50 - L\n        # 10 - X\n        # 5 - V\n        # 1 - I\n        \n        # 1"}], "find-the-difference": [{"task_id": "find-the-difference", "completion": "class Solution(object):\n    def findTheDifference(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        ## 1st method\n        ## 26 bit array\n        ## 1st method\n        ## 26 bit array\n        ## 1st method\n        ## 26 bit array\n        ## 1st method\n        ## 26 bit array\n        ## 1st method\n        ## 26 bit array\n        ## 1st method\n        ## 26 bit array\n        ## 1st method\n        ## 26 bit array\n        ## 1st method\n        ## 26 bit array\n        ## 1st method\n        ## 26 bit array\n        ## 1st method\n        ## 26 bit array\n        ## 1st method\n        ## 26 bit array\n        ## 1st method\n        ## 26 bit array\n        ## 1st method\n        ## 26 bit array\n        ## 1st method\n        ## 26 bit array\n        ## 1st method\n        ## 26 bit array\n        ## 1st method\n        ## 26 bit array\n        ## 1st method\n        ## 26 bit array\n        ## 1st method\n        ## 26 bit array\n        ## 1st method\n        ## 26 bit array\n        ## 1st method\n        ## 26 bit array\n        ## 1st method\n        ## 26 bit array\n        ## 1st method\n        ## 26 bit array\n        ## 1st method\n        ## 26 bit array\n        ## 1st method\n        ## 26 bit array\n        ## 1st method\n        ## 26 bit array\n        ## 1st method\n        ## 26 bit array\n        ## 1st method\n        ## 26 bit array\n        ## 1st method\n        ## 26 bit array\n        ## 1st method\n        ## 26 bit array\n        ## 1st method\n        ## 26 bit array\n        ## 1st method\n        ## 26 bit array\n        ## 1st method\n        ## 26 bit array\n        ## 1st method\n        ## 26 bit array\n        ## 1st method\n        ## 26 bit array\n        ## 1st method\n        ## 26 bit array\n        ## 1st method\n        ## 26 bit array\n        ## 1st method\n        ## 26 bit array\n        ## 1st method\n        ## 26 bit array\n        ## 1st method\n        ## 26 bit array\n        ## 1st method\n        ## 26 bit array\n        ## 1st method\n        ## 26 bit array\n        ## 1st method\n        ## 26 bit array\n        ## 1st method\n        ## 26 bit array\n        ## 1st method\n        ## 26 bit array\n        ## 1st method\n        ## 26 bit array\n        ## 1st method\n        ## 26 bit array\n        ## 1st method\n        ## 26 bit array\n        ## 1st method\n        ## 26 bit array\n        ## 1st method\n        ## 26 bit array\n        ## 1st method\n        ## 26 bit array\n        ## 1st method\n        ## 26 bit array\n        ## 1st method\n        ## 26 bit array\n        ## 1st method\n        ## 26 bit array\n        ## 1st method\n        ## 26 bit array\n        ## 1st method\n        ## 26 bit array\n        ## 1st method\n        ## 26 bit array\n        ## 1st method\n        ## 26 bit array\n        ## 1st method\n        ## 26 bit array\n        ## 1st method\n        ## 26 bit array\n        ## 1st method\n        ## 26 bit array\n        ##"}], "sudoku-solver": [{"task_id": "sudoku-solver", "completion": "class Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        # 1. 1st pass: mark the number of each row, col, and 3x3 box as 1-9\n        # 2. 2nd pass: mark the number of each row, col, and 3x3 box as 0\n        # 3. 3rd pass: if the number of each row, col, and 3x3 box is 0, then the board is solved\n        \n        # 1. 1st pass: mark the number of each row, col, and 3x3 box as 1-9\n        # 1.1 mark the number of each row\n        row_set = [set() for _ in range(9)]\n        # 1.2 mark the number of each col\n        col_set = [set() for _ in range(9)]\n        # 1.3 mark the number of each 3x3 box\n        box_set = [set() for _ in range(9)]\n        \n        for i in range(9):\n            for j in range(9):\n                if board[i][j] != '.':\n                    num = int(board[i][j])\n                    row_set[i].add(num)\n                    col_set[j].add(num)\n                    box_set[i//3*3+j//3].add(num)\n        \n        # 2. 2nd pass: mark the number of each row, col, and 3x3 box as 0\n        for i in range(9):\n            for j in range(9):\n                if board[i][j] == '.':\n                    continue\n                num = int(board[i][j])\n                row_set[i].remove(num)\n                col_set[j].remove(num)\n                box_set[i//3*3+j//3].remove(num)\n        \n        # 3. 3rd pass: if the number of each row, col, and 3x3 box is 0, then the board is solved\n        for i in range(9):\n            if len(row_set[i]) == 1:\n                num = row_set[i].pop()\n                board[i][0] = str(num)\n            if len(col_set[i]) == 1:\n                num = col_set[i].pop()\n                board[0][i] = str(num)\n            if len(box_set[i]) == 1:\n                num = box_set[i].pop()\n                board[i//3*3+i%3][i%3] = str(num)\n        \n        return board"}], "recover-binary-search-tree": [{"task_id": "recover-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        # 1. Find the first and second node that are swapped\n        # 2. Swap the values of the two nodes\n        # 3. Recursively traverse the tree\n        \n        # 1. Find the first and second node that are swapped\n        # 2. Swap the values of the two nodes\n        # 3. Recursively traverse the tree\n        \n        # 1. Find the first and second node that are swapped\n        # 2. Swap the values of the two nodes\n        # 3. Recursively traverse the tree\n        \n        # 1. Find the first and second node that are swapped\n        # 2. Swap the values of the two nodes\n        # 3. Recursively traverse the tree\n        \n        # 1. Find the first and second node that are swapped\n        # 2. Swap the values of the two nodes\n        # 3. Recursively traverse the tree\n        \n        # 1. Find the first and second node that are swapped\n        # 2. Swap the values of the two nodes\n        # 3. Recursively traverse the tree\n        \n        # 1. Find the first and second node that are swapped\n        # 2. Swap the values of the two nodes\n        # 3. Recursively traverse the tree\n        \n        # 1. Find the first and second node that are swapped\n        # 2. Swap the values of the two nodes\n        # 3. Recursively traverse the tree\n        \n        # 1. Find the first and second node that are swapped\n        # 2. Swap the values of the two nodes\n        # 3. Recursively traverse the tree\n        \n        # 1. Find the first and second node that are swapped\n        # 2. Swap the values of the two nodes\n        # 3. Recursively traverse the tree\n        \n        # 1. Find the first and second node that are swapped\n        # 2. Swap the values of the two nodes\n        # 3. Recursively traverse the tree\n        \n        # 1. Find the first and second node that are swapped\n        # 2. Swap the values of the two nodes\n        # 3. Recursively traverse the tree\n        \n        # 1. Find the first and second node that are swapped\n        # 2. Swap the values of the two nodes\n        # 3. Recursively traverse the tree\n        \n        # 1. Find the first and second node that are swapped\n        # 2. Swap the values of the two nodes\n        # 3. Recursively traverse the tree\n        \n        # 1. Find the first and second node that are swapped\n        # 2. Swap the values of the two nodes\n        # 3. Recursively traverse the tree\n        \n        # 1. Find the first and second node that are swapped\n        # 2. Swap the values of the two nodes\n        # 3. Recursively traverse the tree\n        \n        # 1. Find the first and second node that are swapped\n        # 2. Swap the values of the two nodes\n        # 3. Recursively traverse the tree\n        \n        # 1. Find the first and second node that are swapped\n        # 2. Swap the values of the two nodes\n        # 3. Recursively traverse the tree\n        \n        # 1. Find the first and second node that are swapped\n        # 2. Swap the values of the two nodes\n        # 3. Recursively traverse the tree\n        \n        # 1. Find the first and second node that are swapped\n        # 2. Swap the values of the two nodes\n        # 3. Recursively traverse the tree\n        \n        # 1. Find the first and second node that are swapped\n        # 2. Swap the values of the two nodes\n        # 3. Recursively traverse the tree\n        \n        # 1. Find the first and second node that are swapped\n        # 2. Swap the values of the two nodes\n        # 3. Recursively traverse the tree\n        \n        # 1. Find the first and second node that are swapped\n        # 2. Swap the values of the two nodes\n        # 3"}], "palindrome-linked-list": [{"task_id": "palindrome-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        \n        # find the middle of the list\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # reverse the second half of the list\n        prev = None\n        while slow:\n            nxt = slow.next\n            slow.next = prev\n            prev = slow\n            slow = nxt\n        \n        # compare the first half and the second half\n        while prev:\n            if prev.val != head.val:\n                return False\n            prev = prev.next\n            head = head.next\n        \n        return True"}], "valid-perfect-square": [{"task_id": "valid-perfect-square", "completion": "class Solution(object):\n    def isPerfectSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return True\n        \n        left = 0\n        right = num\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            if mid * mid == num:\n                return True\n            elif mid * mid < num:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return False"}], "counting-bits": [{"task_id": "counting-bits", "completion": "class Solution(object):\n    def countBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if n == 0:\n            return [0]\n        if n == 1:\n            return [0,1]\n        if n == 2:\n            return [0,1,1]\n        if n == 3:\n            return [0,1,1,2]\n        if n == 4:\n            return [0,1,1,2,2]\n        if n == 5:\n            return [0,1,1,2,2,3]\n        if n == 6:\n            return [0,1,1,2,2,3,3]\n        if n == 7:\n            return [0,1,1,2,2,3,3,4]\n        if n == 8:\n            return [0,1,1,2,2,3,3,4,4]\n        if n == 9:\n            return [0,1,1,2,2,3,3,4,4,5]\n        if n == 10:\n            return [0,1,1,2,2,3,3,4,4,5,5]\n        if n == 11:\n            return [0,1,1,2,2,3,3,4,4,5,5,6]\n        if n == 12:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6]\n        if n == 13:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7]\n        if n == 14:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7]\n        if n == 15:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8]\n        if n == 16:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8]\n        if n == 17:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9]\n        if n == 18:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10]\n        if n == 19:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,10]\n        if n == 20:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,10,11]\n        if n == 21:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,10,11,12]\n        if n == 22:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,10,11,12,13]\n        if n == 23:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,10,11,12,13,14]\n        if n == 24:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,10,11,12,13,14,15]\n        if n == 25:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,10,11,"}], "remove-linked-list-elements": [{"task_id": "remove-linked-list-elements", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # if head is None:\n        #     return None\n        \n        # while head and head.val == val:\n        #     head = head.next\n        #     if head is None:\n        #         return None\n        \n        # dummy = ListNode(0)\n        # dummy.next = head\n        \n        # while head:\n        #     if head.val == val:\n        #         head = head.next\n        #     else:\n        #         break\n        \n        # curr = dummy\n        # while head:\n        #     if head.val != val:\n        #         curr.next = head\n        #         curr = curr.next\n        #     head = head.next\n        \n        # curr.next = None\n        # return dummy.next\n        \n        if head is None:\n            return None\n        \n        while head and head.val == val:\n            head = head.next\n        \n        curr = head\n        while curr:\n            if curr.val == val:\n                curr.val = curr.next.val\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        \n        return head"}], "scramble-string": [{"task_id": "scramble-string", "completion": "class Solution(object):\n    def isScramble(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) != len(s2):\n            return False\n        \n        if sorted(s1) != sorted(s2):\n            return False\n        \n        return self.isScrambleHelper(s1, s2)\n    \n    def isScrambleHelper(self, s1, s2):\n        if len(s1) == 1:\n            return s1 == s2\n        \n        if sorted(s1) != sorted(s2):\n            return False\n        \n        for i in range(1, len(s1)):\n            if self.isScrambleHelper(s1[:i], s2[:i]) and self.isScrambleHelper(s1[i:], s2[i:]):\n                return True\n            \n            if self.isScrambleHelper(s1[:i], s2[-i:]) and self.isScrambleHelper(s1[i:], s2[:-i]):\n                return True\n        \n        return False"}], "simplify-path": [{"task_id": "simplify-path", "completion": "class Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        \n        # split the path into a list of directories\n        dirs = path.split('/')\n        \n        # remove empty strings from the list\n        dirs = [d for d in dirs if d]\n        \n        # use a stack to keep track of the directories\n        stack = []\n        \n        # iterate over the list of directories\n        for d in dirs:\n            # if the directory is '..', pop the last directory from the stack\n            if d == '..':\n                if stack:\n                    stack.pop()\n            # if the directory is not '..', add it to the stack\n            elif d != '.':\n                stack.append(d)\n        \n        # join the list of directories with a '/'\n        return '/' + '/'.join(stack)"}], "word-search-ii": [{"task_id": "word-search-ii", "completion": "class Solution(object):\n    def findWords(self, board, words):\n        \"\"\"\n        :type board: List[List[str]]\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # build trie\n        trie = {}\n        for word in words:\n            node = trie\n            for c in word:\n                if c not in node:\n                    node[c] = {}\n                node = node[c]\n            node['#'] = '#'\n        \n        # build adjacency list\n        adj = {}\n        for word in words:\n            node = trie\n            for c in word:\n                if c not in node:\n                    node[c] = {}\n                node = node[c]\n            adj[node] = adj.get(node, []) + [word]\n        \n        # build result\n        result = []\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                self.dfs(board, i, j, trie, adj, result)\n        return result\n    \n    def dfs(self, board, i, j, node, adj, result):\n        c = board[i][j]\n        if c not in node:\n            return\n        \n        word = node.get(c, '#')\n        if word == '#':\n            return\n        \n        if word in adj:\n            result.extend(adj[word])\n        \n        board[i][j] = '#'\n        if i > 0:\n            self.dfs(board, i - 1, j, node[c], adj, result)\n        if i < len(board) - 1:\n            self.dfs(board, i + 1, j, node[c], adj, result)\n        if j > 0:\n            self.dfs(board, i, j - 1, node[c], adj, result)\n        if j < len(board[0]) - 1:\n            self.dfs(board, i, j + 1, node[c], adj, result)\n        board[i][j] = c"}], "valid-anagram": [{"task_id": "valid-anagram", "completion": "class Solution(object):\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_dict = {}\n        t_dict = {}\n        \n        for i in range(len(s)):\n            s_dict[s[i]] = 1 + s_dict.get(s[i], 0)\n            t_dict[t[i]] = 1 + t_dict.get(t[i], 0)\n        \n        for key in s_dict:\n            if s_dict[key] != t_dict.get(key, 0):\n                return False\n        \n        return True"}], "valid-sudoku": [{"task_id": "valid-sudoku", "completion": "class Solution(object):\n    def isValidSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. 9x9 grid\n        # 2. 9 rows\n        # 3. 9 cols\n        # 4. 9 subboxes\n        \n        # 1. 9x9 grid\n        # 2. 9 rows\n        # 3. 9 cols\n        # 4. 9 subboxes\n        \n        # 1. 9x9 grid\n        # 2. 9 rows\n        # 3. 9 cols\n        # 4. 9 subboxes\n        \n        # 1. 9x9 grid\n        # 2. 9 rows\n        # 3. 9 cols\n        # 4. 9 subboxes\n        \n        # 1. 9x9 grid\n        # 2. 9 rows\n        # 3. 9 cols\n        # 4. 9 subboxes\n        \n        # 1. 9x9 grid\n        # 2. 9 rows\n        # 3. 9 cols\n        # 4. 9 subboxes\n        \n        # 1. 9x9 grid\n        # 2. 9 rows\n        # 3. 9 cols\n        # 4. 9 subboxes\n        \n        # 1. 9x9 grid\n        # 2. 9 rows\n        # 3. 9 cols\n        # 4. 9 subboxes\n        \n        # 1. 9x9 grid\n        # 2. 9 rows\n        # 3. 9 cols\n        # 4. 9 subboxes\n        \n        # 1. 9x9 grid\n        # 2. 9 rows\n        # 3. 9 cols\n        # 4. 9 subboxes\n        \n        # 1. 9x9 grid\n        # 2. 9 rows\n        # 3. 9 cols\n        # 4. 9 subboxes\n        \n        # 1. 9x9 grid\n        # 2. 9 rows\n        # 3. 9 cols\n        # 4. 9 subboxes\n        \n        # 1. 9x9 grid\n        # 2. 9 rows\n        # 3. 9 cols\n        # 4. 9 subboxes\n        \n        # 1. 9x9 grid\n        # 2. 9 rows\n        # 3. 9 cols\n        # 4. 9 subboxes\n        \n        # 1. 9x9 grid\n        # 2. 9 rows\n        # 3. 9 cols\n        # 4. 9 subboxes\n        \n        # 1. 9x9 grid\n        # 2. 9 rows\n        # 3. 9 cols\n        # 4. 9 subboxes\n        \n        # 1. 9x9 grid\n        # 2. 9 rows\n        # 3. 9 cols\n        # 4. 9 subboxes\n        \n        # 1. 9x9 grid\n        # 2. 9 rows\n        # 3. 9 cols\n        # 4. 9 subboxes\n        \n        # 1. 9x9 grid\n        # 2. 9 rows\n        # 3. 9 cols\n        # 4. 9 subboxes\n        \n        # 1. 9x9 grid\n        # 2. 9 rows\n        # 3. 9 cols\n        # 4. 9 subboxes\n        \n        # 1. 9x9 grid\n        # 2. 9 rows\n        # 3. 9 cols\n        # 4. 9 subboxes\n        \n        # 1. 9x9 grid\n        # 2. 9 rows\n        # 3. 9 cols\n        # 4. 9 subboxes\n        \n        # 1. 9x9 grid\n        # 2. 9 rows\n        # 3. 9 cols\n        # 4. 9 subboxes\n        \n        # 1. 9x9 grid\n        # 2. 9 rows\n        # 3. 9 cols\n        # 4."}], "fizz-buzz": [{"task_id": "fizz-buzz", "completion": "class Solution(object):\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "reverse-words-in-a-string": [{"task_id": "reverse-words-in-a-string", "completion": "class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # split the string into words\n        words = s.split()\n        \n        # reverse the order of the words\n        words.reverse()\n        \n        # join the words back into a string\n        return ' '.join(words)"}], "excel-sheet-column-number": [{"task_id": "excel-sheet-column-number", "completion": "class Solution(object):\n    def titleToNumber(self, columnTitle):\n        \"\"\"\n        :type columnTitle: str\n        :rtype: int\n        \"\"\"\n        \n        # 26^0 = 1\n        # 26^1 = 26\n        # 26^2 = 676\n        # 26^3 = 2097152\n        # 26^4 = 55924220\n        # 26^5 = 1431655765\n        # 26^6 = 4294967290\n        # 26^7 = 10737418240\n        \n        # 26^(n-1) = n\n        # 26^(n-2) = 26^(n-1) * 26\n        # 26^(n-3) = 26^(n-1) * 26 * 26\n        # 26^(n-4) = 26^(n-1) * 26 * 26 * 26\n        # 26^(n-5) = 26^(n-1) * 26 * 26 * 26 * 26\n        # 26^(n-6) = 26^(n-1) * 26 * 26 * 26 * 26 * 26\n        # 26^(n-7) = 26^(n-1) * 26 * 26 * 26 * 26 * 26 * 26\n        # 26^(n-8) = 26^(n-1) * 26 * 26 * 26 * 26 * 26 * 26 * 26\n        # 26^(n-9) = 26^(n-1) * 26 * 26 * 26 * 26 * 26 * 26 * 26 * 26\n        # 26^(n-10) = 26^(n-1) * 26 * 26 * 26 * 26 * 26 * 26 * 26 * 26 * 26\n        # 26^(n-11) = 26^(n-1) * 26 * 26 * 26 * 26 * 26 * 26 * 26 * 26 * 26 * 26\n        # 26^(n-12) = 26^(n-1) * 26 * 26 * 26 * 26 * 26 * 26 * 26 * 26 * 26 * 26 * 26\n        # 26^(n-13) = 26^(n-1) * 26 * 26 * 26 * 26 * 26 * 26 * 26 * 26 * 26 * 26 * 26 * 26\n        # 26^(n-14) = 26^(n-1) * 26 * 26 * 26 * 26 * 26 * 26 * 26 * 26 * 26 * 26 * 26 * 26 * 26\n        # 26^(n-15) = 26^(n-1) * 26 * 26 * 26 * 26 * 26 * 26 * 26 * 26 * 26 * 26 * 26 * 26 * 26 * 26\n        # 26^(n-16) = 26^(n-1) * 26 * 26 * 26 * 26 * 26 * 26 * 26 * 26 * 26 * 26 * 26 * 26 * 26 * 26 * 26\n        # 26^(n-17) = 26^(n-1) * 26 * 26 * 26 * 26 * 26 * 26 * 26 * 26 * 26 * 26 * 26 * 26 * 26 * 26 * 26 *"}], "candy": [{"task_id": "candy", "completion": "class Solution(object):\n    def candy(self, ratings):\n        \"\"\"\n        :type ratings: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "same-tree": [{"task_id": "same-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if p == None and q == None:\n            return True\n        elif p == None or q == None:\n            return False\n        elif p.val != q.val:\n            return False\n        else:\n            return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"}], "reorder-list": [{"task_id": "reorder-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reorderList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: None Do not return anything, modify head in-place instead.\n        \"\"\"\n        \n        # find the middle of the list\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # reverse the second half of the list\n        second = slow.next\n        prev = None\n        while second:\n            next = second.next\n            second.next = prev\n            prev = second\n            second = next\n        \n        # connect the first half to the second half\n        slow.next = None\n        first = head\n        while first and second:\n            next = first.next\n            first.next = second\n            first = next\n            second = second.next\n        \n        return head"}], "word-pattern": [{"task_id": "word-pattern", "completion": "class Solution(object):\n    def wordPattern(self, pattern, s):\n        \"\"\"\n        :type pattern: str\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # if len(pattern) != len(s.split()):\n        #     return False\n        \n        # p_map = {}\n        # s_map = {}\n        # for i in range(len(pattern)):\n        #     p_map[pattern[i]] = p_map.get(pattern[i], []) + [i]\n        #     s_map[s.split()[i]] = s_map.get(s.split()[i], []) + [i]\n        #     if p_map[pattern[i]] != s_map[s.split()[i]]:\n        #         return False\n        # return True\n        \n        # if len(pattern) != len(s.split()):\n        #     return False\n        \n        # p_map = {}\n        # s_map = {}\n        # for i in range(len(pattern)):\n        #     if pattern[i] not in p_map:\n        #         p_map[pattern[i]] = s.split()[i]\n        #     else:\n        #         if p_map[pattern[i]] != s.split()[i]:\n        #             return False\n        #     if s.split()[i] not in s_map:\n        #         s_map[s.split()[i]] = pattern[i]\n        #     else:\n        #         if s_map[s.split()[i]] != pattern[i]:\n        #             return False\n        # return True\n        \n        # if len(pattern) != len(s.split()):\n        #     return False\n        \n        # p_map = {}\n        # s_map = {}\n        # for i in range(len(pattern)):\n        #     if pattern[i] not in p_map:\n        #         p_map[pattern[i]] = s.split()[i]\n        #     else:\n        #         if p_map[pattern[i]] != s.split()[i]:\n        #             return False\n        #     if s.split()[i] not in s_map:\n        #         s_map[s.split()[i]] = pattern[i]\n        #     else:\n        #         if s_map[s.split()[i]] != pattern[i]:\n        #             return False\n        # return True\n        \n        # if len(pattern) != len(s.split()):\n        #     return False\n        \n        # p_map = {}\n        # s_map = {}\n        # for i in range(len(pattern)):\n        #     if pattern[i] not in p_map:\n        #         p_map[pattern[i]] = s.split()[i]\n        #     else:\n        #         if p_map[pattern[i]] != s.split()[i]:\n        #             return False\n        #     if s.split()[i] not in s_map:\n        #         s_map[s.split()[i]] = pattern[i]\n        #     else:\n        #         if s_map[s.split()[i]] != pattern[i]:\n        #             return False\n        # return True\n        \n        # if len(pattern) != len(s.split()):\n        #     return False\n        \n        # p_map = {}\n        # s_map = {}\n        # for i in range(len(pattern)):\n        #     if pattern[i] not in p_map:\n        #         p_map[pattern[i]] = s.split()[i]\n        #     else:\n        #         if p_map[pattern[i]] != s.split()[i]:\n        #             return False\n        #     if s.split()[i] not in s_map:\n        #         s_map[s.split()[i]] = pattern[i]\n        #     else:\n        #         if s_map[s.split()[i]] != pattern[i]:\n        #             return False\n        # return True\n        \n        # if len(pattern) != len(s.split()):\n        #     return False\n        \n        # p_map = {}\n        # s_map = {}\n        # for i in range(len(pattern)):\n        #     if"}], "permutations": [{"task_id": "permutations", "completion": "class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if len(nums) == 1:\n            return [nums]\n        \n        if len(nums) == 2:\n            return [nums, [nums[1], nums[0]]]\n        \n        if len(nums) == 3:\n            return [nums, [nums[2], nums[1], nums[0]], [nums[0], nums[2], nums[1]], [nums[1], nums[0], nums[2]], [nums[1], nums[2], nums[0]], [nums[0], nums[1], nums[2]]]\n        \n        if len(nums) == 4:\n            return [nums, [nums[3], nums[2], nums[1], nums[0]], [nums[2], nums[3], nums[1], nums[0]], [nums[3], nums[1], nums[2], nums[0]], [nums[1], nums[3], nums[2], nums[0]], [nums[2], nums[1], nums[3], nums[0]], [nums[1], nums[2], nums[3], nums[0]], [nums[2], nums[3], nums[1], nums[0]], [nums[3], nums[2], nums[1], nums[0]], [nums[0], nums[3], nums[2], nums[1]], [nums[2], nums[0], nums[3], nums[1]], [nums[3], nums[0], nums[2], nums[1]], [nums[0], nums[2], nums[3], nums[1]], [nums[2], nums[3], nums[0], nums[1]], [nums[3], nums[2], nums[0], nums[1]], [nums[0], nums[3], nums[2], nums[1]], [nums[2], nums[0], nums[3], nums[1]], [nums[3], nums[2], nums[0], nums[1]], [nums[0], nums[2], nums[3], nums[1]], [nums[2], nums[3], nums[0], nums[1]], [nums[3], nums[1], nums[2], nums[0]], [nums[1], nums[3], nums[2], nums[0]], [nums[2], nums[1], nums[3], nums[0]], [nums[1], nums[2], nums[3], nums[0]], [nums[2], nums[3], nums[1], nums[0]], [nums[3], nums[1], nums[2], nums[0]], [nums[1], nums[3], nums[2], nums[0]], [nums[2], nums[1], nums[3], nums[0]], [nums[3], nums[2], nums[1], nums[0]], [nums[0], nums[3], nums[2], nums[1]], [nums[2], nums[0], nums[3], nums[1]], [nums[3], nums[2], nums[0], nums[1]], [nums[0], nums[2], nums[3], nums[1]], [nums[2], nums[3], nums[0], nums[1]], [nums[3], nums[1], nums[2], nums[0]], [nums[1], nums[3], nums[2], nums[0]], [nums[2], nums[1], nums[3], nums[0]], [nums[1], nums[2], nums[3], nums[0]], [nums[2], nums[3], nums[1], nums[0]], [nums[3], nums[1], nums["}], "search-a-2d-matrix": [{"task_id": "search-a-2d-matrix", "completion": "class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)"}], "add-two-numbers": [{"task_id": "add-two-numbers", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # Initialize a new ListNode with value 0\n        dummy = ListNode(0)\n        # Initialize a pointer to the new ListNode\n        curr = dummy\n        # Initialize a variable to store the carry over\n        carry = 0\n        \n        # Loop through both lists\n        while l1 or l2 or carry:\n            # If l1 is not None, add its value to the carry over\n            if l1:\n                carry += l1.val\n                l1 = l1.next\n            # If l2 is not None, add its value to the carry over\n            if l2:\n                carry += l2.val\n                l2 = l2.next\n            # If carry over is greater than 9, set carry over to 1 and subtract 10 from it\n            if carry > 9:\n                carry = 1\n            else:\n                carry = 0\n            # Create a new ListNode with the carry over value\n            curr.next = ListNode(carry)\n            # Move the pointer to the next node\n            curr = curr.next\n        \n        # Return the new ListNode\n        return dummy.next"}], "number-complement": [{"task_id": "number-complement", "completion": "class Solution(object):\n    def findComplement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. 2's complement\n        # 2. 2's complement + 1\n        # 3. 2's complement + 1\n        # 4. 2's complement + 1\n        # 5. 2's complement + 1\n        # 6. 2's complement + 1\n        # 7. 2's complement + 1\n        # 8. 2's complement + 1\n        # 9. 2's complement + 1\n        # 10. 2's complement + 1\n        # 11. 2's complement + 1\n        # 12. 2's complement + 1\n        # 13. 2's complement + 1\n        # 14. 2's complement + 1\n        # 15. 2's complement + 1\n        # 16. 2's complement + 1\n        # 17. 2's complement + 1\n        # 18. 2's complement + 1\n        # 19. 2's complement + 1\n        # 20. 2's complement + 1\n        # 21. 2's complement + 1\n        # 22. 2's complement + 1\n        # 23. 2's complement + 1\n        # 24. 2's complement + 1\n        # 25. 2's complement + 1\n        # 26. 2's complement + 1\n        # 27. 2's complement + 1\n        # 28. 2's complement + 1\n        # 29. 2's complement + 1\n        # 30. 2's complement + 1\n        # 31. 2's complement + 1\n        # 32. 2's complement + 1\n        # 33. 2's complement + 1\n        # 34. 2's complement + 1\n        # 35. 2's complement + 1\n        # 36. 2's complement + 1\n        # 37. 2's complement + 1\n        # 38. 2's complement + 1\n        # 39. 2's complement + 1\n        # 40. 2's complement + 1\n        # 41. 2's complement + 1\n        # 42. 2's complement + 1\n        # 43. 2's complement + 1\n        # 44. 2's complement + 1\n        # 45. 2's complement + 1\n        # 46. 2's complement + 1\n        # 47. 2's complement + 1\n        # 48. 2's complement + 1\n        # 49. 2's complement + 1\n        # 50. 2's complement + 1\n        # 51. 2's complement + 1\n        # 52. 2's complement + 1\n        # 53. 2's complement + 1\n        # 54. 2's complement + 1\n        # 55. 2's complement + 1\n        # 56. 2's complement + 1\n        # 57. 2's complement + 1\n        # 58. 2's complement + 1\n        # 59. 2's complement + 1\n        # 60. 2's complement + 1\n        # 61. 2's complement + 1\n        # 62. 2's complement + 1\n        # 63. 2's complement + 1\n        # 64. 2's complement + 1\n        # 65. 2's complement + 1\n        # 66. 2's complement + 1\n        # 67. 2's complement + 1\n        # 68. 2's complement + 1\n        # 69. 2's complement + 1\n        # 70. 2's complement + 1\n        # 71. 2's complement + 1\n        # 72. 2's complement + 1\n        # 73. 2's complement + 1\n        # 74. 2's complement + 1"}], "arithmetic-slices-ii-subsequence": [{"task_id": "arithmetic-slices-ii-subsequence", "completion": "class Solution(object):\n    def numberOfArithmeticSlices(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 3:\n            return 0\n        \n        diff = nums[1] - nums[0]\n        count = 0\n        res = 0\n        \n        for i in range(2, len(nums)):\n            if nums[i] - nums[i-1] == diff:\n                count += 1\n            else:\n                diff = nums[i] - nums[i-1]\n                count = 0\n            res += count\n        \n        return res"}], "text-justification": [{"task_id": "text-justification", "completion": "class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "binary-tree-postorder-traversal": [{"task_id": "binary-tree-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def postorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        stack = [root]\n        res = []\n        \n        while stack:\n            node = stack.pop()\n            if node:\n                res.append(node.val)\n                stack.append(node.left)\n                stack.append(node.right)\n        \n        return res[::-1]"}], "container-with-most-water": [{"task_id": "container-with-most-water", "completion": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # two pointers\n        # left and right pointers\n        # left = 0\n        # right = len(height) - 1\n        # max_area = 0\n        # while left < right:\n        #     area = min(height[left], height[right]) * (right - left)\n        #     max_area = max(max_area, area)\n        #     if height[left] < height[right]:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return max_area\n        \n        # two pointers\n        # left = 0\n        # right = len(height) - 1\n        # max_area = 0\n        # while left < right:\n        #     area = min(height[left], height[right]) * (right - left)\n        #     max_area = max(max_area, area)\n        #     if height[left] < height[right]:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return max_area\n        \n        # two pointers\n        # left = 0\n        # right = len(height) - 1\n        # max_area = 0\n        # while left < right:\n        #     area = min(height[left], height[right]) * (right - left)\n        #     max_area = max(max_area, area)\n        #     if height[left] < height[right]:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return max_area\n        \n        # two pointers\n        # left = 0\n        # right = len(height) - 1\n        # max_area = 0\n        # while left < right:\n        #     area = min(height[left], height[right]) * (right - left)\n        #     max_area = max(max_area, area)\n        #     if height[left] < height[right]:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return max_area\n        \n        # two pointers\n        # left = 0\n        # right = len(height) - 1\n        # max_area = 0\n        # while left < right:\n        #     area = min(height[left], height[right]) * (right - left)\n        #     max_area = max(max_area, area)\n        #     if height[left] < height[right]:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return max_area\n        \n        # two pointers\n        # left = 0\n        # right = len(height) - 1\n        # max_area = 0\n        # while left < right:\n        #     area = min(height[left], height[right]) * (right - left)\n        #     max_area = max(max_area, area)\n        #     if height[left] < height[right]:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return max_area\n        \n        # two pointers\n        # left = 0\n        # right = len(height) - 1\n        # max_area = 0\n        # while left < right:\n        #     area = min(height[left], height[right]) * (right - left)\n        #     max_area = max(max_area, area)\n        #     if height[left] < height[right]:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return max_area\n        \n        # two pointers\n        # left = 0\n        # right = len(height) - 1\n        # max_area = 0\n        # while left < right:\n        #     area = min(height[left], height[right]) * (right - left)\n        #     max_area = max(max_area, area)\n        #     if height[left] < height[right]:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return max_area\n        \n        # two pointers\n        # left = 0\n        # right = len(height) - 1\n        # max_area ="}], "concatenated-words": [{"task_id": "concatenated-words", "completion": "class Solution(object):\n    def findAllConcatenatedWordsInADict(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # Time: O(N * L)\n        # Space: O(N)\n        # 1. build a hashmap with all the words\n        # 2. iterate through the words, for each word, check if it can be built from other words in the hashmap\n        # 3. if it can, add it to the result\n        # 4. if it can't, add it to the hashmap\n        # 5. return the result\n        \n        word_set = set(words)\n        result = []\n        \n        for word in words:\n            if word == \"\":\n                continue\n            word_set.remove(word)\n            word_length = len(word)\n            for i in range(1, word_length):\n                prefix = word[:i]\n                suffix = word[i:]\n                if prefix in word_set and suffix in word_set:\n                    word_set.remove(prefix)\n                    word_set.remove(suffix)\n                    word_set.add(word)\n                    break\n                elif prefix in word_set:\n                    word_set.remove(prefix)\n                    word_set.add(word)\n                    break\n                elif suffix in word_set:\n                    word_set.remove(suffix)\n                    word_set.add(word)\n                    break\n                else:\n                    word_set.add(word)\n        \n        for word in words:\n            if word in word_set:\n                result.append(word)\n        \n        return result"}], "base-7": [{"task_id": "base-7", "completion": "class Solution(object):\n    def convertToBase7(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        \n        if num < 0:\n            num = -num\n        \n        res = \"\"\n        while num:\n            res = str(num % 7) + res\n            num = num // 7\n        \n        return res if res else \"0\""}], "nim-game": [{"task_id": "nim-game", "completion": "class Solution(object):\n    def canWinNim(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        # if n is a multiple of 4, then it is not possible to win\n        if n % 4 == 0:\n            return False\n        else:\n            return True"}], "n-queens-ii": [{"task_id": "n-queens-ii", "completion": "class Solution(object):\n    def totalNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. 1 queen\n        # 2. 2 queens\n        # 3. 3 queens\n        # 4. 4 queens\n        # 5. 5 queens\n        # 6. 6 queens\n        # 7. 7 queens\n        # 8. 8 queens\n        # 9. 9 queens\n        # 10. 10 queens\n        # 11. 11 queens\n        # 12. 12 queens\n        # 13. 13 queens\n        # 14. 14 queens\n        # 15. 15 queens\n        # 16. 16 queens\n        # 17. 17 queens\n        # 18. 18 queens\n        # 19. 19 queens\n        # 20. 20 queens\n        # 21. 21 queens\n        # 22. 22 queens\n        # 23. 23 queens\n        # 24. 24 queens\n        # 25. 25 queens\n        # 26. 26 queens\n        # 27. 27 queens\n        # 28. 28 queens\n        # 29. 29 queens\n        # 30. 30 queens\n        # 31. 31 queens\n        # 32. 32 queens\n        # 33. 33 queens\n        # 34. 34 queens\n        # 35. 35 queens\n        # 36. 36 queens\n        # 37. 37 queens\n        # 38. 38 queens\n        # 39. 39 queens\n        # 40. 40 queens\n        # 41. 41 queens\n        # 42. 42 queens\n        # 43. 43 queens\n        # 44. 44 queens\n        # 45. 45 queens\n        # 46. 46 queens\n        # 47. 47 queens\n        # 48. 48 queens\n        # 49. 49 queens\n        # 50. 50 queens\n        # 51. 51 queens\n        # 52. 52 queens\n        # 53. 53 queens\n        # 54. 54 queens\n        # 55. 55 queens\n        # 56. 56 queens\n        # 57. 57 queens\n        # 58. 58 queens\n        # 59. 59 queens\n        # 60. 60 queens\n        # 61. 61 queens\n        # 62. 62 queens\n        # 63. 63 queens\n        # 64. 64 queens\n        # 65. 65 queens\n        # 66. 66 queens\n        # 67. 67 queens\n        # 68. 68 queens\n        # 69. 69 queens\n        # 70. 70 queens\n        # 71. 71 queens\n        # 72. 72 queens\n        # 73. 73 queens\n        # 74. 74 queens\n        # 75. 75 queens\n        # 76. 76 queens\n        # 77. 77 queens\n        # 78. 78 queens\n        # 79. 79 queens\n        # 80. 80 queens\n        # 81. 81 queens\n        # 82. 82 queens\n        # 83. 83 queens\n        # 84. 84 queens\n        # 85. 85 queens\n        # 86. 86 queens\n        # 87. 87 queens"}], "n-queens": [{"task_id": "n-queens", "completion": "class Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        # 1. \u521d\u59cb\u5316\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\uff0c\u957f\u5ea6\u4e3an\uff0c\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f'.'\n        board = [['.'] * n for _ in range(n)]\n        # 2. \u521d\u59cb\u5316\u4e00\u4e2a\u5217\u8868\uff0c\u7528\u4e8e\u5b58\u653e\u6240\u6709\u53ef\u80fd\u7684\u5217\u7d22\u5f15\n        cols = set()\n        # 3. \u521d\u59cb\u5316\u4e00\u4e2a\u5217\u8868\uff0c\u7528\u4e8e\u5b58\u653e\u6240\u6709\u53ef\u80fd\u7684\u5bf9\u89d2\u7ebf\u7d22\u5f15\n        pos_diag = set()\n        # 4. \u521d\u59cb\u5316\u4e00\u4e2a\u5217\u8868\uff0c\u7528\u4e8e\u5b58\u653e\u6240\u6709\u53ef\u80fd\u7684\u53cd\u5bf9\u89d2\u7ebf\u7d22\u5f15\n        neg_diag = set()\n        \n        # 5. \u521d\u59cb\u5316\u4e00\u4e2a\u5217\u8868\uff0c\u7528\u4e8e\u5b58\u653e\u6240\u6709\u53ef\u80fd\u7684\u5217\u7d22\u5f15\n        res = []\n        \n        # 6. \u521d\u59cb\u5316\u4e00\u4e2a\u5217\u8868\uff0c\u7528\u4e8e\u5b58\u653e\u6240\u6709\u53ef\u80fd\u7684\u5bf9\u89d2\u7ebf\u7d22\u5f15\n        pos_diag = set()\n        # 7. \u521d\u59cb\u5316\u4e00\u4e2a\u5217\u8868\uff0c\u7528\u4e8e\u5b58\u653e\u6240\u6709\u53ef\u80fd\u7684\u53cd\u5bf9\u89d2\u7ebf\u7d22\u5f15\n        neg_diag = set()\n        \n        # 8. \u521d\u59cb\u5316\u4e00\u4e2a\u5217\u8868\uff0c\u7528\u4e8e\u5b58\u653e\u6240\u6709\u53ef\u80fd\u7684\u5217\u7d22\u5f15\n        cols = set()\n        # 9. \u521d\u59cb\u5316\u4e00\u4e2a\u5217\u8868\uff0c\u7528\u4e8e\u5b58\u653e\u6240\u6709\u53ef\u80fd\u7684\u5bf9\u89d2\u7ebf\u7d22\u5f15\n        pos_diag = set()\n        # 10. \u521d\u59cb\u5316\u4e00\u4e2a\u5217\u8868\uff0c\u7528\u4e8e\u5b58\u653e\u6240\u6709\u53ef\u80fd\u7684\u53cd\u5bf9\u89d2\u7ebf\u7d22\u5f15\n        neg_diag = set()\n        \n        # 11. \u521d\u59cb\u5316\u4e00\u4e2a\u5217\u8868\uff0c\u7528\u4e8e\u5b58\u653e\u6240\u6709\u53ef\u80fd\u7684\u5217\u7d22\u5f15\n        cols = set()\n        # 12. \u521d\u59cb\u5316\u4e00\u4e2a\u5217\u8868\uff0c\u7528\u4e8e\u5b58\u653e\u6240\u6709\u53ef\u80fd\u7684\u5bf9\u89d2\u7ebf\u7d22\u5f15\n        pos_diag = set()\n        # 13. \u521d\u59cb\u5316\u4e00\u4e2a\u5217\u8868\uff0c\u7528\u4e8e\u5b58\u653e\u6240\u6709\u53ef\u80fd\u7684\u53cd\u5bf9\u89d2\u7ebf\u7d22\u5f15\n        neg_diag = set()\n        \n        # 14. \u521d\u59cb\u5316\u4e00\u4e2a\u5217\u8868\uff0c\u7528\u4e8e\u5b58\u653e\u6240\u6709\u53ef\u80fd\u7684\u5217\u7d22\u5f15\n        cols = set()\n        # 15. \u521d\u59cb\u5316\u4e00\u4e2a\u5217\u8868\uff0c\u7528\u4e8e\u5b58\u653e\u6240\u6709\u53ef\u80fd\u7684\u5bf9\u89d2\u7ebf\u7d22\u5f15\n        pos_diag = set()\n        # 16. \u521d\u59cb\u5316\u4e00\u4e2a\u5217\u8868\uff0c\u7528\u4e8e\u5b58\u653e\u6240\u6709\u53ef\u80fd\u7684\u53cd\u5bf9\u89d2\u7ebf\u7d22\u5f15\n        neg_diag = set()\n        \n        # 17. \u521d\u59cb\u5316\u4e00\u4e2a\u5217\u8868\uff0c\u7528\u4e8e\u5b58\u653e\u6240\u6709\u53ef\u80fd\u7684\u5217\u7d22\u5f15\n        cols = set()\n        # 18. \u521d\u59cb\u5316\u4e00\u4e2a\u5217\u8868\uff0c\u7528\u4e8e\u5b58\u653e\u6240\u6709\u53ef\u80fd\u7684\u5bf9\u89d2\u7ebf\u7d22\u5f15\n        pos_diag = set()\n        # 19. \u521d\u59cb\u5316\u4e00\u4e2a\u5217\u8868\uff0c\u7528\u4e8e\u5b58\u653e\u6240\u6709\u53ef\u80fd\u7684\u53cd\u5bf9\u89d2\u7ebf\u7d22\u5f15\n        neg_diag = set()\n        \n        # 20. \u521d\u59cb\u5316\u4e00\u4e2a\u5217\u8868\uff0c\u7528\u4e8e\u5b58\u653e\u6240\u6709\u53ef\u80fd\u7684\u5217\u7d22\u5f15\n        cols = set()\n        # 21. \u521d\u59cb\u5316\u4e00\u4e2a\u5217\u8868\uff0c\u7528\u4e8e\u5b58\u653e\u6240\u6709\u53ef\u80fd\u7684\u5bf9\u89d2\u7ebf\u7d22\u5f15\n        pos_diag = set()\n        # 22. \u521d\u59cb\u5316\u4e00\u4e2a\u5217\u8868\uff0c\u7528\u4e8e\u5b58\u653e\u6240\u6709\u53ef\u80fd\u7684\u53cd\u5bf9\u89d2\u7ebf\u7d22\u5f15\n        neg_diag = set()\n        \n        # 23. \u521d\u59cb\u5316\u4e00\u4e2a\u5217\u8868\uff0c\u7528\u4e8e\u5b58\u653e\u6240\u6709\u53ef\u80fd\u7684\u5217\u7d22\u5f15\n        cols = set()\n        # 24. \u521d\u59cb\u5316\u4e00\u4e2a\u5217\u8868\uff0c\u7528\u4e8e\u5b58\u653e\u6240\u6709\u53ef\u80fd\u7684\u5bf9\u89d2\u7ebf\u7d22\u5f15\n        pos_diag = set()\n        # 25. \u521d\u59cb\u5316\u4e00\u4e2a\u5217\u8868\uff0c\u7528\u4e8e\u5b58\u653e\u6240\u6709\u53ef\u80fd\u7684\u53cd\u5bf9\u89d2\u7ebf\u7d22\u5f15\n        neg_diag = set()\n        \n        # 26. \u521d\u59cb\u5316\u4e00\u4e2a\u5217\u8868\uff0c\u7528\u4e8e\u5b58\u653e\u6240\u6709\u53ef\u80fd\u7684\u5217\u7d22\u5f15\n        cols = set()\n        # 27. \u521d\u59cb\u5316\u4e00\u4e2a\u5217\u8868\uff0c\u7528\u4e8e\u5b58\u653e\u6240\u6709\u53ef\u80fd\u7684\u5bf9\u89d2\u7ebf\u7d22\u5f15\n        pos_diag = set()\n        # 28. \u521d\u59cb\u5316\u4e00\u4e2a\u5217\u8868\uff0c\u7528\u4e8e\u5b58\u653e\u6240\u6709\u53ef\u80fd\u7684\u53cd\u5bf9\u89d2\u7ebf\u7d22\u5f15\n        neg_diag = set()\n        \n        # 29. \u521d\u59cb\u5316\u4e00\u4e2a\u5217\u8868\uff0c\u7528\u4e8e\u5b58\u653e\u6240\u6709\u53ef\u80fd\u7684\u5217\u7d22\u5f15\n        cols = set()\n        # 30. \u521d\u59cb\u5316\u4e00\u4e2a\u5217\u8868\uff0c\u7528\u4e8e\u5b58\u653e\u6240\u6709\u53ef\u80fd\u7684\u5bf9\u89d2"}], "word-search": [{"task_id": "word-search", "completion": "class Solution(object):\n    def exist(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if not board:\n            return False\n        \n        if not word:\n            return False\n        \n        if len(word) == 0:\n            return True\n        \n        if len(board) == 0:\n            return False\n        \n        if len(board[0]) == 0:\n            return False\n        \n        if len(board) * len(board[0]) < len(word):\n            return False\n        \n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if board[i][j] == word[0]:\n                    if self.dfs(board, word, i, j):\n                        return True\n        \n        return False\n    \n    def dfs(self, board, word, i, j):\n        if len(word) == 0:\n            return True\n        \n        if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != word[0]:\n            return False\n        \n        temp = board[i][j]\n        board[i][j] = '#'\n        \n        res = self.dfs(board, word[1:], i + 1, j) or self.dfs(board, word[1:], i - 1, j) or self.dfs(board, word[1:], i, j + 1) or self.dfs(board, word[1:], i, j - 1)\n        \n        board[i][j] = temp\n        \n        return res"}], "merge-sorted-array": [{"task_id": "merge-sorted-array", "completion": "class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1]\n        # m = 1\n        # nums2 = []\n        # n = 0\n        \n        # nums1 = [0]\n        # m = 0\n        # nums2 = [1]\n        # n = 1\n        \n        # nums1 = [0]\n        # m = 0\n        # nums2 = [1]\n        # n = 1\n        \n        # nums1 = [1]\n        # m = 1\n        # nums2 = []\n        # n = 0\n        \n        # nums1 = [1]\n        # m = 1\n        # nums2 = [1]\n        # n = 1\n        \n        # nums1 = [1]\n        # m = 1\n        # nums2 = [1]\n        # n = 1\n        \n        # nums1 = [1]\n        # m = 1\n        # nums2 = [1]\n        # n = 1\n        \n        # nums1 = [1]\n        # m = 1\n        # nums2 = [1]\n        # n = 1\n        \n        # nums1 = [1]\n        # m = 1\n        # nums2 = [1]\n        # n = 1\n        \n        # nums1 = [1]\n        # m = 1\n        # nums2 = [1]\n        # n = 1\n        \n        # nums1 = [1]\n        # m = 1\n        # nums2 = [1]\n        # n = 1\n        \n        # nums1 = [1]\n        # m = 1\n        # nums2 = [1]\n        # n = 1\n        \n        # nums1 = [1]\n        # m = 1\n        # nums2 = [1]\n        # n = 1\n        \n        # nums1 = [1]\n        # m = 1\n        # nums2 = [1]\n        # n = 1\n        \n        # nums1 = [1]\n        # m = 1\n        # nums2 = [1]\n        # n = 1\n        \n        # nums1 = [1]\n        # m = 1\n        # nums2 = [1]\n        # n = 1\n        \n        # nums1 = [1]\n        # m = 1\n        # nums2 = [1]\n        # n = 1\n        \n        # nums1 = [1]\n        # m = 1\n        # nums2 = [1]\n        # n = 1\n        \n        # nums1 = [1]\n        # m = 1\n        # nums2 = [1]\n        # n = 1\n        \n        # nums1 = [1]\n        # m = 1\n        # nums2 = [1]\n        # n = 1\n        \n        # nums1 = [1]\n        # m = 1\n        # nums2 = [1]\n        # n = 1\n        \n        # nums1 = [1]\n        # m = 1\n        # nums2 = [1]\n        # n = 1\n        \n        # nums1 = [1]\n        # m = 1\n        # nums2 = [1]\n        # n = 1\n        \n        # nums1 = [1]\n        # m = 1\n        # nums2 = [1]\n        # n = 1\n        \n        # nums1 = [1]\n        # m = 1\n        # nums2 = [1]\n        # n = 1\n        \n        # nums1 = [1]\n        # m = 1\n        # nums2 = [1]\n        # n = 1\n        \n        # nums1 = [1]\n        # m = 1\n        # nums2 = [1]\n        # n = 1\n        \n        # nums1 = [1]\n        # m ="}], "third-maximum-number": [{"task_id": "third-maximum-number", "completion": "class Solution(object):\n    def thirdMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. sort the array\n        # 2. if the array has less than 3 elements, return the max element\n        # 3. if the array has 3 elements, return the third element\n        # 4. if the array has 2 elements, return the max element\n        # 5. if the array has 1 element, return the max element\n        \n        nums = sorted(set(nums))\n        if len(nums) < 3:\n            return nums[-1]\n        else:\n            return nums[-3]"}]}