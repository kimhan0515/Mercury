{"spiral-matrix": [{"task_id": "spiral-matrix", "completion": "class Solution(object):\n    def spiralOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not matrix:\n            return []\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        \n        res = []\n        left = 0\n        right = n - 1\n        top = 0\n        bottom = m - 1\n        \n        while left <= right and top <= bottom:\n            \n            # left to right\n            for i in range(left, right + 1):\n                res.append(matrix[top][i])\n            \n            top += 1\n            \n            # top to bottom\n            for i in range(top, bottom + 1):\n                res.append(matrix[i][right])\n            \n            right -= 1\n            \n            if top <= bottom:\n                # right to left\n                for i in range(right, left - 1, -1):\n                    res.append(matrix[bottom][i])\n            \n            bottom -= 1\n            \n            if left <= right:\n                # bottom to top\n                for i in range(bottom, top - 1, -1):\n                    res.append(matrix[i][left])\n            \n            left += 1\n        \n        return res"}], "summary-ranges": [{"task_id": "summary-ranges", "completion": "class Solution(object):\n    def summaryRanges(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        if not nums:\n            return []\n        \n        start = nums[0]\n        end = nums[0]\n        res = []\n        \n        for i in range(1, len(nums)):\n            if nums[i] == end + 1:\n                end = nums[i]\n            else:\n                if start == end:\n                    res.append(str(start))\n                else:\n                    res.append(str(start) + \"->\" + str(end))\n                start = nums[i]\n                end = nums[i]\n        \n        if start == end:\n            res.append(str(start))\n        else:\n            res.append(str(start) + \"->\" + str(end))\n        \n        return res"}], "distinct-subsequences": [{"task_id": "distinct-subsequences", "completion": "class Solution(object):\n    def numDistinct(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"\n        \n        # dp[i][j] = number of distinct subsequences of s[:i] that equals t[:j]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] if s[i-1] == t[j-1]\n        #         = dp[i-1][j]\n        # dp[i][0] = 1\n        # dp[0][j] = 0\n        # dp[0][0] = 1\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] if s[i-1] == t[j-1]\n        #         = dp[i-1][j]\n        # dp[0][j] = 0\n        # dp[0][0] = 1\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] if s[i-1] == t[j-1]\n        #         = dp[i-1][j]\n        # dp[0][j] = 0\n        # dp[0][0] = 1\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] if s[i-1] == t[j-1]\n        #         = dp[i-1][j]\n        # dp[0][j] = 0\n        # dp[0][0] = 1\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] if s[i-1] == t[j-1]\n        #         = dp[i-1][j]\n        # dp[0][j] = 0\n        # dp[0][0] = 1\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] if s[i-1] == t[j-1]\n        #         = dp[i-1][j]\n        # dp[0][j] = 0\n        # dp[0][0] = 1\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] if s[i-1] == t[j-1]\n        #         = dp[i-1][j]\n        # dp[0][j] = 0\n        # dp[0][0] = 1\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] if s[i-1] == t[j-1]\n        #         = dp[i-1][j]\n        # dp[0][j] = 0\n        # dp[0][0] = 1\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] if s[i-1] == t[j-1]\n        #         = dp[i-1][j]\n        # dp[0][j] = 0\n        # dp[0][0] = 1\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] if s[i-1] == t[j-1]\n        #         = dp[i-1][j]\n        # dp[0][j] = 0\n        # dp[0][0] = 1\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] if s[i-1] == t[j-1]\n        #         = dp[i-1][j]\n        # dp[0][j] = 0\n        # dp[0][0] = 1\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] if s[i-1] == t[j-1]\n        #         = dp[i-1][j]"}], "first-missing-positive": [{"task_id": "first-missing-positive", "completion": "class Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. Mark all negative numbers as 0\n        # 2. Mark all numbers in the range [1, n] as 1\n        # 3. Iterate through the array and mark the numbers as -1\n        # 4. Iterate through the array again and return the first number that is not marked as -1\n        \n        n = len(nums)\n        for i in range(n):\n            if nums[i] <= 0:\n                nums[i] = n + 1\n        \n        for i in range(n):\n            num = abs(nums[i])\n            if num <= n:\n                nums[num - 1] = -abs(nums[num - 1])\n        \n        for i in range(1, n + 1):\n            if nums[i - 1] > 0:\n                return i\n        \n        return n + 1"}], "permutation-sequence": [{"task_id": "permutation-sequence", "completion": "class Solution(object):\n    def getPermutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. Calculate the factorial of n\n        fact = 1\n        for i in range(1, n):\n            fact *= i\n        \n        # 2. Calculate the number of digits in the permutation\n        num_digits = n\n        \n        # 3. Calculate the number of permutations\n        k -= 1\n        \n        # 4. Calculate the permutation\n        res = \"\"\n        while num_digits > 0:\n            fact //= num_digits\n            res += str(k // fact + 1)\n            k %= fact\n            num_digits -= 1\n        \n        return res"}], "two-sum-ii-input-array-is-sorted": [{"task_id": "two-sum-ii-input-array-is-sorted", "completion": "class Solution(object):\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        left = 0\n        right = len(numbers) - 1\n        \n        while left < right:\n            if numbers[left] + numbers[right] == target:\n                return [left + 1, right + 1]\n            elif numbers[left] + numbers[right] < target:\n                left += 1\n            else:\n                right -= 1\n        \n        return [-1, -1]"}], "expression-add-operators": [{"task_id": "expression-add-operators", "completion": "class Solution(object):\n    def addOperators(self, num, target):\n        \"\"\"\n        :type num: str\n        :type target: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def backtrack(idx, prev, curr, val, op):\n            if idx == len(num):\n                if val == target:\n                    res.append(curr)\n                return\n            if op:\n                backtrack(idx + 1, prev, curr + op + num[idx], val - prev + (op * int(num[idx])), '')\n            else:\n                backtrack(idx + 1, prev, curr + num[idx], val - prev + int(num[idx]), num[idx])\n                backtrack(idx + 1, prev, curr, val, '')\n                backtrack(idx + 1, prev, curr + op + num[idx], val - prev + (op * int(num[idx])), num[idx])\n        \n        if not num:\n            return []\n        res = []\n        backtrack(0, 0, '', int(num), '')\n        return res"}], "sum-root-to-leaf-numbers": [{"task_id": "sum-root-to-leaf-numbers", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        self.sum = 0\n        self.dfs(root, 0)\n        return self.sum\n        \n    def dfs(self, root, curr):\n        if not root:\n            return 0\n        \n        curr = curr * 10 + root.val\n        \n        if not root.left and not root.right:\n            self.sum += curr\n            return curr\n        \n        self.dfs(root.left, curr)\n        self.dfs(root.right, curr)\n        \n        return curr"}], "license-key-formatting": [{"task_id": "license-key-formatting", "completion": "class Solution(object):\n    def licenseKeyFormatting(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        s = s.replace('-', '').upper()\n        n = len(s)\n        if n <= k:\n            return s\n        res = ''\n        i = n % k\n        res += s[:i]\n        while i < n:\n            res += '-' + s[i:i+k]\n            i += k\n        return res"}], "gas-station": [{"task_id": "gas-station", "completion": "class Solution(object):\n    def canCompleteCircuit(self, gas, cost):\n        \"\"\"\n        :type gas: List[int]\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        \n        total_gas = sum(gas)\n        total_cost = sum(cost)\n        \n        if total_gas < total_cost:\n            return -1\n        \n        start = 0\n        curr_gas = 0\n        \n        for i in range(len(gas)):\n            curr_gas += gas[i] - cost[i]\n            if curr_gas < 0:\n                start = i + 1\n                curr_gas = 0\n        \n        return start"}], "burst-balloons": [{"task_id": "burst-balloons", "completion": "class Solution(object):\n    def maxCoins(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums = [1] + nums + [1]\n        n = len(nums)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n-2, -1, -1):\n            for j in range(i+2, n):\n                dp[i][j] = max(nums[i]*nums[k]*nums[j] + dp[i][k] + dp[k][j] for k in range(i+1, j))\n        return dp[0][n-1]"}], "plus-one": [{"task_id": "plus-one", "completion": "class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        if digits[-1] < 9:\n            digits[-1] += 1\n            return digits\n        \n        digits[-1] = 0\n        i = len(digits) - 2\n        \n        while i >= 0 and digits[i] == 9:\n            digits[i] = 0\n            i -= 1\n        \n        if i < 0:\n            digits.insert(0, 1)\n        else:\n            digits[i] += 1\n        \n        return digits"}], "regular-expression-matching": [{"task_id": "regular-expression-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        # if p is empty, then s must be empty as well\n        if not p:\n            return not s\n        \n        # if p is not empty, then s must not be empty\n        if not s:\n            return False\n        \n        # if p is a single character, then s must be a single character\n        if len(p) == 1:\n            return s == p or p == '.'\n        \n        # if p is a double star, then s must be a double star\n        if p[-2] == '*':\n            return self.isMatch(s, p[:-2]) or (s and p[-1] == '.' and self.isMatch(s[1:], p))\n        \n        # if p is not a double star, then s must be a single character\n        return s[0] == p[0] or p[0] == '.' and self.isMatch(s[1:], p[1:])"}], "create-maximum-number": [{"task_id": "create-maximum-number", "completion": "class Solution(object):\n    def maxNumber(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # find the length of the longest common substring\n        # between nums1 and nums2\n        # if the length is greater than k, return the first k elements\n        # of nums1\n        # if the length is less than k, return the first k elements\n        # of nums2\n        # if the length is equal to k, return the longest substring\n        # between nums1 and nums2\n        \n        # find the length of the longest common substring\n        # between nums1 and nums2\n        # if the length is greater than k, return the first k elements\n        # of nums1\n        # if the length is less than k, return the first k elements\n        # of nums2\n        # if the length is equal to k, return the longest substring\n        # between nums1 and nums2\n        \n        # find the length of the longest common substring\n        # between nums1 and nums2\n        # if the length is greater than k, return the first k elements\n        # of nums1\n        # if the length is less than k, return the first k elements\n        # of nums2\n        # if the length is equal to k, return the longest substring\n        # between nums1 and nums2\n        \n        # find the length of the longest common substring\n        # between nums1 and nums2\n        # if the length is greater than k, return the first k elements\n        # of nums1\n        # if the length is less than k, return the first k elements\n        # of nums2\n        # if the length is equal to k, return the longest substring\n        # between nums1 and nums2\n        \n        # find the length of the longest common substring\n        # between nums1 and nums2\n        # if the length is greater than k, return the first k elements\n        # of nums1\n        # if the length is less than k, return the first k elements\n        # of nums2\n        # if the length is equal to k, return the longest substring\n        # between nums1 and nums2\n        \n        # find the length of the longest common substring\n        # between nums1 and nums2\n        # if the length is greater than k, return the first k elements\n        # of nums1\n        # if the length is less than k, return the first k elements\n        # of nums2\n        # if the length is equal to k, return the longest substring\n        # between nums1 and nums2\n        \n        # find the length of the longest common substring\n        # between nums1 and nums2\n        # if the length is greater than k, return the first k elements\n        # of nums1\n        # if the length is less than k, return the first k elements\n        # of nums2\n        # if the length is equal to k, return the longest substring\n        # between nums1 and nums2\n        \n        # find the length of the longest common substring\n        # between nums1 and nums2\n        # if the length is greater than k, return the first k elements\n        # of nums1\n        # if the length is less than k, return the first k elements\n        # of nums2\n        # if the length is equal to k, return the longest substring\n        # between nums1 and nums2\n        \n        # find the length of the longest common substring\n        # between nums1 and nums2\n        # if the length is greater than k, return the first k elements\n        # of nums1\n        # if the length is less than k, return the first k elements\n        # of nums2\n        # if the length is equal to k, return the longest substring\n        # between nums1 and nums2\n        \n        # find the length of the longest common substring\n        # between nums1 and nums2\n        # if the length is greater than k, return the first k elements\n        # of nums1\n        # if the length is less than k, return the first k elements\n        # of nums2\n        # if the length is equal to k, return the longest substring\n        # between nums1 and nums2\n        \n        # find the length of the longest common substring\n        # between nums1 and nums2\n        # if the length is greater than k, return the first k elements\n        # of nums"}], "perfect-number": [{"task_id": "perfect-number", "completion": "class Solution(object):\n    def checkPerfectNumber(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return False\n        \n        sum_of_divisors = 1\n        \n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                sum_of_divisors += i + num//i\n        \n        return sum_of_divisors == num"}], "fibonacci-number": [{"task_id": "fibonacci-number", "completion": "class Solution(object):\n    def fib(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        \n        a = 0\n        b = 1\n        for i in range(2, n+1):\n            c = a + b\n            a = b\n            b = c\n        return b"}], "dungeon-game": [{"task_id": "dungeon-game", "completion": "class Solution(object):\n    def calculateMinimumHP(self, dungeon):\n        \"\"\"\n        :type dungeon: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(dungeon)\n        n = len(dungeon[0])\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        dp[m][n-1] = max(1, 1 - dungeon[m-1][n-1])\n        for i in range(m-1, -1, -1):\n            for j in range(n-1, -1, -1):\n                dp[i][j] = max(1, dp[i+1][j] - dungeon[i][j])\n                dp[i][j] = max(dp[i][j], dp[i][j+1] - dungeon[i][j])\n        return dp[0][0]"}], "find-k-th-smallest-pair-distance": [{"task_id": "find-k-th-smallest-pair-distance", "completion": "class Solution(object):\n    def smallestDistancePair(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        left, right = 0, nums[-1] - nums[0]\n        while left < right:\n            mid = (left + right) // 2\n            count = 0\n            left_idx = 0\n            for right_idx in range(len(nums)):\n                count += right_idx - left_idx\n                while nums[right_idx] - nums[left_idx] > mid:\n                    left_idx += 1\n                count -= left_idx\n            if count >= k:\n                right = mid\n            else:\n                left = mid + 1\n        return left"}], "number-of-segments-in-a-string": [{"task_id": "number-of-segments-in-a-string", "completion": "class Solution(object):\n    def countSegments(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        return len(s.split())"}], "reverse-vowels-of-a-string": [{"task_id": "reverse-vowels-of-a-string", "completion": "class Solution(object):\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n        s = list(s)\n        left, right = 0, len(s) - 1\n        while left < right:\n            if s[left] in vowels:\n                while right > left and s[right] not in vowels:\n                    right -= 1\n                if s[right] in vowels:\n                    s[left], s[right] = s[right], s[left]\n                    left += 1\n                    right -= 1\n            else:\n                left += 1\n        return ''.join(s)"}], "longest-consecutive-sequence": [{"task_id": "longest-consecutive-sequence", "completion": "class Solution(object):\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums_set = set(nums)\n        longest_streak = 0\n\n        for num in nums:\n            if num - 1 not in nums_set:\n                current_num = num\n                current_streak = 1\n\n                while current_num + 1 in nums_set:\n                    current_num += 1\n                    current_streak += 1\n\n                longest_streak = max(longest_streak, current_streak)\n\n        return longest_streak"}], "missing-number": [{"task_id": "missing-number", "completion": "class Solution(object):\n    def missingNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # XOR\n        # xor of all the numbers from 0 to n\n        # xor of all the numbers from 0 to n+1\n        # xor of all the numbers from 0 to n+2\n        # xor of all the numbers from 0 to n+3\n        # xor of all the numbers from 0 to n+4\n        # xor of all the numbers from 0 to n+5\n        # xor of all the numbers from 0 to n+6\n        # xor of all the numbers from 0 to n+7\n        # xor of all the numbers from 0 to n+8\n        # xor of all the numbers from 0 to n+9\n        # xor of all the numbers from 0 to n+10\n        # xor of all the numbers from 0 to n+11\n        # xor of all the numbers from 0 to n+12\n        # xor of all the numbers from 0 to n+13\n        # xor of all the numbers from 0 to n+14\n        # xor of all the numbers from 0 to n+15\n        # xor of all the numbers from 0 to n+16\n        # xor of all the numbers from 0 to n+17\n        # xor of all the numbers from 0 to n+18\n        # xor of all the numbers from 0 to n+19\n        # xor of all the numbers from 0 to n+20\n        # xor of all the numbers from 0 to n+21\n        # xor of all the numbers from 0 to n+22\n        # xor of all the numbers from 0 to n+23\n        # xor of all the numbers from 0 to n+24\n        # xor of all the numbers from 0 to n+25\n        # xor of all the numbers from 0 to n+26\n        # xor of all the numbers from 0 to n+27\n        # xor of all the numbers from 0 to n+28\n        # xor of all the numbers from 0 to n+29\n        # xor of all the numbers from 0 to n+30\n        # xor of all the numbers from 0 to n+31\n        # xor of all the numbers from 0 to n+32\n        # xor of all the numbers from 0 to n+33\n        # xor of all the numbers from 0 to n+34\n        # xor of all the numbers from 0 to n+35\n        # xor of all the numbers from 0 to n+36\n        # xor of all the numbers from 0 to n+37\n        # xor of all the numbers from 0 to n+38\n        # xor of all the numbers from 0 to n+39\n        # xor of all the numbers from 0 to n+40\n        # xor of all the numbers from 0 to n+41\n        # xor of all the numbers from 0 to n+42\n        # xor of all the numbers from 0 to n+43\n        # xor of all the numbers from 0 to n+44\n        # xor of all the numbers from 0 to n+45\n        # xor of all the numbers from 0 to n+46\n        # xor of all the numbers from 0 to n+47\n        # xor of all the numbers from 0 to n+48\n        # xor of all the numbers from 0 to n+49\n        # xor of all the numbers from 0 to n+50\n        # xor of all the numbers from 0 to n+51\n        # xor of all the numbers from 0 to n+52\n        # xor of all the numbers from 0 to n+53\n        # xor of all the numbers from 0 to n+54\n        # xor of all the numbers from 0 to n+55\n        # xor of all the numbers from 0 to n+56\n        # xor of all the numbers from 0 to n+57\n        # xor of all the numbers from 0 to n+58\n        # xor of all the numbers from 0 to n+59\n        # xor of all the numbers from 0"}], "word-ladder": [{"task_id": "word-ladder", "completion": "class Solution(object):\n    def ladderLength(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\"\n        \n        wordList = set(wordList)\n        if endWord not in wordList:\n            return 0\n        \n        queue = collections.deque([beginWord])\n        level = 1\n        while queue:\n            level += 1\n            for _ in range(len(queue)):\n                word = queue.popleft()\n                for i in range(len(word)):\n                    for c in string.ascii_lowercase:\n                        newWord = word[:i] + c + word[i+1:]\n                        if newWord in wordList:\n                            if newWord == endWord:\n                                return level\n                            queue.append(newWord)\n                            wordList.remove(newWord)\n        return 0"}], "add-binary": [{"task_id": "add-binary", "completion": "class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        \n        if len(a) < len(b):\n            a, b = b, a\n        \n        a = a[::-1]\n        b = b[::-1]\n        \n        carry = 0\n        res = \"\"\n        \n        for i in range(len(a)):\n            if i < len(b):\n                if a[i] == '1' and b[i] == '1':\n                    if carry == 1:\n                        res += '1'\n                        carry = 1\n                    else:\n                        res += '0'\n                        carry = 1\n                elif a[i] == '1' and b[i] == '0':\n                    if carry == 1:\n                        res += '0'\n                        carry = 1\n                    else:\n                        res += '1'\n                elif a[i] == '0' and b[i] == '1':\n                    if carry == 1:\n                        res += '0'\n                        carry = 1\n                    else:\n                        res += '1'\n                else:\n                    if carry == 1:\n                        res += '1'\n                    else:\n                        res += '0'\n            else:\n                if a[i] == '1':\n                    if carry == 1:\n                        res += '0'\n                    else:\n                        res += '1'\n                else:\n                    if carry == 1:\n                        res += '1'\n                    else:\n                        res += '0'\n        \n        if carry == 1:\n            res += '1'\n        \n        return res[::-1]"}], "find-first-and-last-position-of-element-in-sorted-array": [{"task_id": "find-first-and-last-position-of-element-in-sorted-array", "completion": "class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if not nums:\n            return [-1,-1]\n        \n        left = 0\n        right = len(nums)-1\n        \n        while left < right:\n            mid = (left + right)//2\n            if nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid\n        \n        if nums[left] != target:\n            return [-1,-1]\n        \n        start = left\n        right = len(nums)-1\n        \n        while left < right:\n            mid = (left + right)//2 + 1\n            if nums[mid] > target:\n                right = mid - 1\n            else:\n                left = mid\n        \n        return [start, right]"}], "remove-duplicates-from-sorted-array": [{"task_id": "remove-duplicates-from-sorted-array", "completion": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) <= 1:\n            return len(nums)\n        \n        i = 1\n        j = 1\n        \n        while j < len(nums):\n            if nums[j] != nums[j-1]:\n                nums[i] = nums[j]\n                i += 1\n            j += 1\n        \n        return i"}], "jump-game-ii": [{"task_id": "jump-game-ii", "completion": "class Solution(object):\n    def jump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(nums)\n        if n == 1:\n            return 0\n        \n        max_reach = nums[0]\n        jumps = 1\n        curr_reach = 0\n        \n        for i in range(1, n):\n            if i > max_reach:\n                jumps += 1\n                max_reach = curr_reach\n            curr_reach = max(curr_reach, i + nums[i])\n        \n        return jumps"}], "best-time-to-buy-and-sell-stock-iv": [{"task_id": "best-time-to-buy-and-sell-stock-iv", "completion": "class Solution(object):\n    def maxProfit(self, k, prices):\n        \"\"\"\n        :type k: int\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if k >= len(prices)//2:\n            return sum(max(0, prices[i]-prices[i-1]) for i in range(1, len(prices)))\n        \n        dp = [0]*k*2\n        for price in prices:\n            for i in range(k*2-1, 0, -1):\n                dp[i] = max(dp[i], dp[i-1]+price)\n                if i%2 == 1:\n                    dp[i] = max(dp[i], dp[i-2]-price)\n        return dp[-1]"}], "convert-a-number-to-hexadecimal": [{"task_id": "convert-a-number-to-hexadecimal", "completion": "class Solution(object):\n    def toHex(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        \n        if num < 0:\n            num = 2**32 + num\n        \n        hex_dict = {10:\"a\", 11:\"b\", 12:\"c\", 13:\"d\", 14:\"e\", 15:\"f\"}\n        res = \"\"\n        while num > 0:\n            rem = num % 16\n            if rem < 10:\n                res = str(rem) + res\n            else:\n                res = hex_dict[rem] + res\n            num = num // 16\n        return res"}], "first-unique-character-in-a-string": [{"task_id": "first-unique-character-in-a-string", "completion": "class Solution(object):\n    def firstUniqChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # create a hashmap with character as key and frequency as value\n        # iterate through the string and update the frequency\n        # if frequency is 1, return the index\n        # if frequency is not 1, return -1\n        \n        # create a hashmap with character as key and frequency as value\n        hashmap = {}\n        \n        # iterate through the string and update the frequency\n        for char in s:\n            if char not in hashmap:\n                hashmap[char] = 1\n            else:\n                hashmap[char] += 1\n        \n        # iterate through the string and return the index\n        for i, char in enumerate(s):\n            if hashmap[char] == 1:\n                return i\n        \n        # if frequency is not 1, return -1\n        return -1"}], "contains-duplicate-iii": [{"task_id": "contains-duplicate-iii", "completion": "class Solution(object):\n    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff):\n        \"\"\"\n        :type nums: List[int]\n        :type indexDiff: int\n        :type valueDiff: int\n        :rtype: bool\n        \"\"\"\n        \n        if indexDiff < 0 or valueDiff < 0:\n            return False\n        \n        bucket = {}\n        \n        for i, num in enumerate(nums):\n            bucket_num = num // (valueDiff + 1)\n            \n            if bucket_num in bucket:\n                return True\n            \n            if bucket_num + 1 in bucket and abs(bucket[bucket_num + 1] - num) <= valueDiff:\n                return True\n            \n            if bucket_num - 1 in bucket and abs(bucket[bucket_num - 1] - num) <= valueDiff:\n                return True\n            \n            bucket[bucket_num] = num\n            \n            if i >= indexDiff:\n                del bucket[nums[i - indexDiff] // (valueDiff + 1)]\n            \n        return False"}], "sort-colors": [{"task_id": "sort-colors", "completion": "class Solution(object):\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,"}], "max-consecutive-ones": [{"task_id": "max-consecutive-ones", "completion": "class Solution(object):\n    def findMaxConsecutiveOnes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_count = 0\n        count = 0\n        \n        for num in nums:\n            if num == 1:\n                count += 1\n                max_count = max(max_count, count)\n            else:\n                count = 0\n        \n        return max_count"}], "count-complete-tree-nodes": [{"task_id": "count-complete-tree-nodes", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def countNodes(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        left = root\n        right = root\n        \n        left_height = 0\n        right_height = 0\n        \n        while left:\n            left = left.left\n            left_height += 1\n        \n        while right:\n            right = right.right\n            right_height += 1\n        \n        if left_height == right_height:\n            return (2**left_height) - 1\n        \n        return 1 + self.countNodes(root.left) + self.countNodes(root.right)"}], "add-strings": [{"task_id": "add-strings", "completion": "class Solution(object):\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        num1 = num1[::-1]\n        num2 = num2[::-1]\n        carry = 0\n        res = \"\"\n        i = 0\n        while i < len(num1) or i < len(num2) or carry:\n            if i < len(num1):\n                carry += int(num1[i])\n            if i < len(num2):\n                carry += int(num2[i])\n            res += str(carry % 10)\n            carry //= 10\n            i += 1\n        return res[::-1]"}], "basic-calculator": [{"task_id": "basic-calculator", "completion": "class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        num = 0\n        sign = 1\n        res = 0\n        for i in range(len(s)):\n            if s[i].isdigit():\n                num = num*10 + int(s[i])\n            if s[i] in '+-' or i == len(s)-1:\n                res += sign*num\n                if s[i] == '-':\n                    sign = -1\n                elif s[i] == '+':\n                    sign = 1\n                num = 0\n            if s[i] == '(':\n                stack.append(res)\n                stack.append(sign)\n                res = 0\n                sign = 1\n            if s[i] == ')':\n                res = res*stack.pop() + stack.pop()\n        return res"}], "ipo": [{"task_id": "ipo", "completion": "class Solution(object):\n    def findMaximizedCapital(self, k, w, profits, capital):\n        \"\"\"\n        :type k: int\n        :type w: int\n        :type profits: List[int]\n        :type capital: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # sort capital and profits\n        sorted_capital = sorted(zip(capital, profits))\n        \n        # iterate over sorted capital\n        i = 0\n        for _ in range(k):\n            while i < len(sorted_capital) and sorted_capital[i][0] <= w:\n                w += sorted_capital[i][1]\n                i += 1\n            if i == 0:\n                break\n            w -= sorted_capital[i-1][1]\n        return w"}], "valid-parentheses": [{"task_id": "valid-parentheses", "completion": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        stack = []\n        d = {\n            ')':'(',\n            ']':'[',\n            '}':'{'\n        }\n        for c in s:\n            if c in d:\n                if stack and stack[-1] == d[c]:\n                    stack.pop()\n                else:\n                    return False\n            else:\n                stack.append(c)\n        return not stack"}], "next-permutation": [{"task_id": "next-permutation", "completion": "class Solution(object):\n    def nextPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # find the index of the first number that is smaller than its next number\n        # if there is no such number, then the array is sorted in descending order\n        # so we need to reverse the entire array\n        # if there is such number, then we need to find the index of the number that is just greater than the number that is smaller than its next number\n        # we need to swap the number that is just greater than the number that is smaller than its next number with the number that is smaller than its next number\n        # we need to reverse the numbers after the index of the number that is just greater than the number that is smaller than its next number\n        # if there is no such number, then the array is sorted in descending order\n        # so we need to reverse the entire array\n        # if there is such number, then we need to find the index of the number that is just greater than the number that is smaller than its next number\n        # we need to swap the number that is just greater than the number that is smaller than its next number with the number that is smaller than its next number\n        # we need to reverse the numbers after the index of the number that is just greater than the number that is smaller than its next number\n        # if there is no such number, then the array is sorted in descending order\n        # so we need to reverse the entire array\n        \n        # find the index of the first number that is smaller than its next number\n        # if there is no such number, then the array is sorted in descending order\n        # so we need to reverse the entire array\n        # if there is such number, then we need to find the index of the number that is just greater than the number that is smaller than its next number\n        # we need to swap the number that is just greater than the number that is smaller than its next number with the number that is smaller than its next number\n        # we need to reverse the numbers after the index of the number that is just greater than the number that is smaller than its next number\n        # if there is no such number, then the array is sorted in descending order\n        # so we need to reverse the entire array\n        \n        # find the index of the first number that is smaller than its next number\n        # if there is no such number, then the array is sorted in descending order\n        # so we need to reverse the entire array\n        # if there is such number, then we need to find the index of the number that is just greater than the number that is smaller than its next number\n        # we need to swap the number that is just greater than the number that is smaller than its next number with the number that is smaller than its next number\n        # we need to reverse the numbers after the index of the number that is just greater than the number that is smaller than its next number\n        # if there is no such number, then the array is sorted in descending order\n        # so we need to reverse the entire array\n        \n        # find the index of the first number that is smaller than its next number\n        # if there is no such number, then the array is sorted in descending order\n        # so we need to reverse the entire array\n        # if there is such number, then we need to find the index of the number that is just greater than the number that is smaller than its next number\n        # we need to swap the number that is just greater than the number that is smaller than its next number with the number that is smaller than its next number\n        # we need to reverse the numbers after the index of the number that is just greater than the number that is smaller than its next number\n        # if there is no such number, then the array is sorted in descending order\n        # so we need to reverse the entire array\n        \n        # find the index of the first number that is smaller than its next number\n        # if there is no such number, then the array is sorted in descending order\n        # so we need to reverse the entire array\n        # if there is such number, then we need to find the index of the number that is just greater than the number that is smaller than its next number\n        # we need to swap the number that is just greater than the number that is smaller than its next number with the number that is smaller than its next number\n        # we need to reverse the numbers after the index of the number that is just greater than the number that is smaller than its next number\n        # if there is no such number, then the array is sorted in descending order\n        # so we need to reverse the entire array\n        \n        # find the index of the first number that is smaller than its next number\n        # if there is no such number, then the array"}], "contains-duplicate-ii": [{"task_id": "contains-duplicate-ii", "completion": "class Solution(object):\n    def containsNearbyDuplicate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        \n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        \n        # Hashmap\n        hashmap = {}\n        \n        for i, num in enumerate(nums):\n            if num in hashmap and i - hashmap[num] <= k:\n                return True\n            hashmap[num] = i\n        \n        return False"}], "maximum-gap": [{"task_id": "maximum-gap", "completion": "class Solution(object):\n    def maximumGap(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 2:\n            return 0\n        \n        nums.sort()\n        max_diff = 0\n        for i in range(1, len(nums)):\n            max_diff = max(max_diff, nums[i] - nums[i - 1])\n        \n        return max_diff"}], "binary-tree-level-order-traversal": [{"task_id": "binary-tree-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        \n        while queue:\n            temp = []\n            for node in queue:\n                temp.append(node.val)\n                if node.left:\n                    temp.append(node.left)\n                if node.right:\n                    temp.append(node.right)\n            queue = temp\n            result.append(temp)\n        \n        return result"}], "couples-holding-hands": [{"task_id": "couples-holding-hands", "completion": "class Solution(object):\n    def minSwapsCouples(self, row):\n        \"\"\"\n        :type row: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(row) // 2\n        couples = [i // 2 for i in row]\n        couples.sort()\n        swaps = 0\n        for i in range(0, n):\n            if couples[i] == couples[i + 1]:\n                continue\n            else:\n                swaps += 1\n                couples[i + 1] = couples[i]\n        return swaps"}], "interleaving-string": [{"task_id": "interleaving-string", "completion": "class Solution(object):\n    def isInterleave(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) + len(s2) != len(s3):\n            return False\n        \n        if s1 == s2:\n            return s3 == s1 + s2\n        \n        dp = [False] * (len(s2) + 1)\n        dp[0] = True\n        \n        for i in range(len(s1)):\n            dp_new = [False] * (len(s2) + 1)\n            dp_new[0] = dp[0] and s1[i] == s3[i]\n            for j in range(1, len(s2) + 1):\n                dp_new[j] = (dp[j] and s2[j - 1] == s3[i + j - 1]) or (dp[j - 1] and s1[i] == s3[i + j - 1])\n            dp = dp_new\n        \n        return dp[-1]"}], "assign-cookies": [{"task_id": "assign-cookies", "completion": "class Solution(object):\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        \n        g.sort()\n        s.sort()\n        i = 0\n        j = 0\n        while i < len(g) and j < len(s):\n            if s[j] >= g[i]:\n                i += 1\n            j += 1\n        return i"}], "keyboard-row": [{"task_id": "keyboard-row", "completion": "class Solution(object):\n    def findWords(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        row1 = set('qwertyuiop')\n        row2 = set('asdfghjkl')\n        row3 = set('zxcvbnm')\n        \n        res = []\n        \n        for word in words:\n            if word[0].lower() in row1:\n                if set(word.lower()) <= row1:\n                    res.append(word)\n            elif word[0].lower() in row2:\n                if set(word.lower()) <= row2:\n                    res.append(word)\n            else:\n                if set(word.lower()) <= row3:\n                    res.append(word)\n                    \n        return res"}], "reverse-linked-list-ii": [{"task_id": "reverse-linked-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseBetween(self, head, left, right):\n        \"\"\"\n        :type head: ListNode\n        :type left: int\n        :type right: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if left == right:\n            return head\n        \n        dummy = ListNode(0, head)\n        prev = dummy\n        curr = head\n        i = 1\n        \n        while i < left:\n            prev = curr\n            curr = curr.next\n            i += 1\n        \n        tail = curr\n        \n        while i <= right:\n            temp = curr.next\n            curr.next = prev\n            prev = curr\n            curr = temp\n            i += 1\n        \n        tail.next = curr\n        head = prev\n        \n        return head"}], "shortest-palindrome": [{"task_id": "shortest-palindrome", "completion": "class Solution(object):\n    def shortestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # reverse the string\n        # find the longest palindrome that can be formed from the end of the string\n        # add the reverse string to the beginning of the string\n        # return the reverse string\n        \n        # reverse the string\n        rev = s[::-1]\n        \n        # find the longest palindrome that can be formed from the end of the string\n        # find the longest palindrome that can be formed from the end of the string\n        # find the longest palindrome that can be formed from the end of the string\n        # find the longest palindrome that can be formed from the end of the string\n        # find the longest palindrome that can be formed from the end of the string\n        # find the longest palindrome that can be formed from the end of the string\n        # find the longest palindrome that can be formed from the end of the string\n        # find the longest palindrome that can be formed from the end of the string\n        # find the longest palindrome that can be formed from the end of the string\n        # find the longest palindrome that can be formed from the end of the string\n        # find the longest palindrome that can be formed from the end of the string\n        # find the longest palindrome that can be formed from the end of the string\n        # find the longest palindrome that can be formed from the end of the string\n        # find the longest palindrome that can be formed from the end of the string\n        # find the longest palindrome that can be formed from the end of the string\n        # find the longest palindrome that can be formed from the end of the string\n        # find the longest palindrome that can be formed from the end of the string\n        # find the longest palindrome that can be formed from the end of the string\n        # find the longest palindrome that can be formed from the end of the string\n        # find the longest palindrome that can be formed from the end of the string\n        # find the longest palindrome that can be formed from the end of the string\n        # find the longest palindrome that can be formed from the end of the string\n        # find the longest palindrome that can be formed from the end of the string\n        # find the longest palindrome that can be formed from the end of the string\n        # find the longest palindrome that can be formed from the end of the string\n        # find the longest palindrome that can be formed from the end of the string\n        # find the longest palindrome that can be formed from the end of the string\n        # find the longest palindrome that can be formed from the end of the string\n        # find the longest palindrome that can be formed from the end of the string\n        # find the longest palindrome that can be formed from the end of the string\n        # find the longest palindrome that can be formed from the end of the string\n        # find the longest palindrome that can be formed from the end of the string\n        # find the longest palindrome that can be formed from the end of the string\n        # find the longest palindrome that can be formed from the end of the string\n        # find the longest palindrome that can be formed from the end of the string\n        # find the longest palindrome that can be formed from the end of the string\n        # find the longest palindrome that can be formed from the end of the string\n        # find the longest palindrome that can be formed from the end of the string\n        # find the longest palindrome that can be formed from the end of the string\n        # find the longest palindrome that can be formed from the end of the string\n        # find the longest palindrome that can be formed from the end of the string\n        # find the longest palindrome that can be formed from the end of the string\n        # find the longest palindrome that can be formed from the end of the string\n        # find the longest palindrome that can be formed from the end of the string\n        # find the longest palindrome that can be formed from the end of the string\n        # find the longest palindrome that can be formed from the end of the string\n        # find the longest palindrome that can be formed from the end of the string\n        # find the longest palindrome that can be formed from the end of the string\n        # find the longest palindrome that can be formed from the end of the string\n        # find the longest palindrome that can be formed from the end of the string\n        # find the longest palindrome that"}], "minimum-window-substring": [{"task_id": "minimum-window-substring", "completion": "class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        if len(s) < len(t):\n            return \"\"\n        \n        t_map = {}\n        for c in t:\n            if c not in t_map:\n                t_map[c] = 0\n            t_map[c] += 1\n        \n        left = 0\n        right = 0\n        min_window = \"\"\n        min_len = float('inf')\n        count = 0\n        \n        while right < len(s):\n            if s[right] in t_map:\n                t_map[s[right]] -= 1\n                if t_map[s[right]] >= 0:\n                    count += 1\n            \n            while count == len(t_map):\n                if right - left + 1 < min_len:\n                    min_window = s[left:right+1]\n                    min_len = right - left + 1\n                \n                if s[left] in t_map:\n                    t_map[s[left]] += 1\n                    if t_map[s[left]] > 0:\n                        count -= 1\n                \n                left += 1\n            \n            right += 1\n        \n        return min_window"}], "self-crossing": [{"task_id": "self-crossing", "completion": "class Solution(object):\n    def isSelfCrossing(self, distance):\n        \"\"\"\n        :type distance: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        for i in range(3, len(distance)):\n            if distance[i] >= distance[i - 2] and distance[i - 1] <= distance[i - 3]:\n                return True\n            if i >= 4 and distance[i] == distance[i - 3] and distance[i - 1] == distance[i - 4]:\n                return True\n            if i >= 5 and distance[i] + distance[i - 4] >= distance[i - 2] and distance[i - 1] == distance[i - 3]:\n                return True\n            if i >= 6 and distance[i] + distance[i - 5] >= distance[i - 2] and distance[i - 2] + distance[i - 4] >= distance[i - 1]:\n                return True\n        return False"}], "remove-duplicates-from-sorted-list": [{"task_id": "remove-duplicates-from-sorted-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        curr = head\n        while curr.next:\n            if curr.val == curr.next.val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        return head"}], "longest-palindrome": [{"task_id": "longest-palindrome", "completion": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Create a hashmap to store the frequency of each character in the string\n        hashmap = {}\n        \n        # Iterate through the string and add the character to the hashmap\n        for char in s:\n            if char in hashmap:\n                hashmap[char] += 1\n            else:\n                hashmap[char] = 1\n        \n        # Initialize the result to 0\n        result = 0\n        \n        # Iterate through the hashmap and check if the frequency is odd\n        for value in hashmap.values():\n            if value % 2 == 0:\n                result += value\n            else:\n                result += value - 1\n                odd_flag = True\n        \n        # If there are odd characters, add 1 to the result\n        if odd_flag:\n            result += 1\n        \n        # Return the result\n        return result"}], "construct-binary-tree-from-inorder-and-postorder-traversal": [{"task_id": "construct-binary-tree-from-inorder-and-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not inorder:\n            return None\n        \n        root = TreeNode(postorder[-1])\n        root_index = inorder.index(root.val)\n        \n        root.left = self.buildTree(inorder[:root_index], postorder[:root_index])\n        root.right = self.buildTree(inorder[root_index+1:], postorder[root_index:-1])\n        \n        return root"}], "cut-off-trees-for-golf-event": [{"task_id": "cut-off-trees-for-golf-event", "completion": "class Solution(object):\n    def cutOffTree(self, forest):\n        \"\"\"\n        :type forest: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        trees = []\n        for i in range(len(forest)):\n            for j in range(len(forest[0])):\n                if forest[i][j] > 1:\n                    trees.append((forest[i][j], i, j))\n        trees.sort()\n        curr_i, curr_j = 0, 0\n        ans = 0\n        for height, i, j in trees:\n            dist = self.bfs(forest, curr_i, curr_j, i, j)\n            if dist == -1:\n                return -1\n            ans += dist\n            curr_i, curr_j = i, j\n        return ans\n        \n    def bfs(self, forest, curr_i, curr_j, i, j):\n        m, n = len(forest), len(forest[0])\n        q = [(curr_i, curr_j)]\n        visited = set()\n        visited.add((curr_i, curr_j))\n        dist = 0\n        while q:\n            new_q = []\n            for x, y in q:\n                if x == i and y == j:\n                    return dist\n                for dx, dy in [(0, -1), (0, 1), (-1, 0), (1, 0)]:\n                    nx, ny = x + dx, y + dy\n                    if 0 <= nx < m and 0 <= ny < n and (nx, ny) not in visited and forest[nx][ny] > 0:\n                        visited.add((nx, ny))\n                        new_q.append((nx, ny))\n            dist += 1\n            q = new_q\n        return -1"}], "minimum-depth-of-binary-tree": [{"task_id": "minimum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def minDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        if not root.left:\n            return self.minDepth(root.right) + 1\n        \n        if not root.right:\n            return self.minDepth(root.left) + 1\n        \n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1"}], "count-of-range-sum": [{"task_id": "count-of-range-sum", "completion": "class Solution(object):\n    def countRangeSum(self, nums, lower, upper):\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"\n        \n        # prefix sum\n        # prefix sum + count\n        # prefix sum - count\n        # prefix sum - count - lower\n        # prefix sum - count - lower - upper\n        # prefix sum - count - lower - upper - lower\n        # prefix sum - count - lower - upper - lower - upper\n        # prefix sum - count - lower - upper - lower - upper - lower\n        # prefix sum - count - lower - upper - lower - upper - lower - upper\n        # prefix sum - count - lower - upper - lower - upper - lower - upper - lower\n        # prefix sum - count - lower - upper - lower - upper - lower - upper - lower - upper\n        # prefix sum - count - lower - upper - lower - upper - lower - upper - lower - upper - lower\n        # prefix sum - count - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper\n        # prefix sum - count - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower\n        # prefix sum - count - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper\n        # prefix sum - count - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower\n        # prefix sum - count - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper\n        # prefix sum - count - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower\n        # prefix sum - count - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper\n        # prefix sum - count - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower\n        # prefix sum - count - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower\n        # prefix sum - count - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower\n        # prefix sum - count - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower\n        # prefix sum - count - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower\n        # prefix sum - count - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower\n        # prefix sum - count - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower\n        # prefix sum - count - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower\n        # prefix sum - count - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower\n        # prefix sum - count - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower\n        # prefix sum - count - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower\n        # prefix sum - count - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower\n        # prefix sum - count - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower\n        # prefix sum - count - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower\n        # prefix sum - count - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower - upper - lower\n        # prefix sum - count"}], "arranging-coins": [{"task_id": "arranging-coins", "completion": "class Solution(object):\n    def arrangeCoins(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        return int((-1 + sqrt(1 + 8*n))/2)"}], "longest-uncommon-subsequence-i": [{"task_id": "longest-uncommon-subsequence-i", "completion": "class Solution(object):\n    def findLUSlength(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: int\n        \"\"\"\n        \n        if a == b:\n            return -1\n        else:\n            return max(len(a), len(b))"}], "binary-tree-level-order-traversal-ii": [{"task_id": "binary-tree-level-order-traversal-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        \n        while queue:\n            temp = []\n            for node in queue:\n                temp.append(node.val)\n                if node.left:\n                    temp.append(node.left)\n                if node.right:\n                    temp.append(node.right)\n            queue = temp\n            result.append(temp)\n        \n        return result[::-1]"}], "palindrome-number": [{"task_id": "palindrome-number", "completion": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        \n        if x < 0:\n            return False\n        \n        temp = x\n        rev = 0\n        \n        while temp:\n            rev = rev * 10 + temp % 10\n            temp = temp // 10\n        \n        return rev == x"}], "decode-ways": [{"task_id": "decode-ways", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s[0] == '0':\n            return 0\n        \n        if len(s) == 1:\n            return 1\n        \n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, len(s) + 1):\n            if s[i - 1] != '0':\n                dp[i] = dp[i - 1]\n            if s[i - 2] != '0' and int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        \n        return dp[-1]"}], "is-subsequence": [{"task_id": "is-subsequence", "completion": "class Solution(object):\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        i = 0\n        j = 0\n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n            j += 1\n        return i == len(s)"}], "gray-code": [{"task_id": "gray-code", "completion": "class Solution(object):\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 2^n - 1 is the number of bits in the binary representation of the number\n        # 2^n - 1 is the number of numbers in the sequence\n        # 2^n - 1 is the number of numbers in the sequence\n        # 2^n - 1 is the number of numbers in the sequence\n        # 2^n - 1 is the number of numbers in the sequence\n        # 2^n - 1 is the number of numbers in the sequence\n        # 2^n - 1 is the number of numbers in the sequence\n        # 2^n - 1 is the number of numbers in the sequence\n        # 2^n - 1 is the number of numbers in the sequence\n        # 2^n - 1 is the number of numbers in the sequence\n        # 2^n - 1 is the number of numbers in the sequence\n        # 2^n - 1 is the number of numbers in the sequence\n        # 2^n - 1 is the number of numbers in the sequence\n        # 2^n - 1 is the number of numbers in the sequence\n        # 2^n - 1 is the number of numbers in the sequence\n        # 2^n - 1 is the number of numbers in the sequence\n        # 2^n - 1 is the number of numbers in the sequence\n        # 2^n - 1 is the number of numbers in the sequence\n        # 2^n - 1 is the number of numbers in the sequence\n        # 2^n - 1 is the number of numbers in the sequence\n        # 2^n - 1 is the number of numbers in the sequence\n        # 2^n - 1 is the number of numbers in the sequence\n        # 2^n - 1 is the number of numbers in the sequence\n        # 2^n - 1 is the number of numbers in the sequence\n        # 2^n - 1 is the number of numbers in the sequence\n        # 2^n - 1 is the number of numbers in the sequence\n        # 2^n - 1 is the number of numbers in the sequence\n        # 2^n - 1 is the number of numbers in the sequence\n        # 2^n - 1 is the number of numbers in the sequence\n        # 2^n - 1 is the number of numbers in the sequence\n        # 2^n - 1 is the number of numbers in the sequence\n        # 2^n - 1 is the number of numbers in the sequence\n        # 2^n - 1 is the number of numbers in the sequence\n        # 2^n - 1 is the number of numbers in the sequence\n        # 2^n - 1 is the number of numbers in the sequence\n        # 2^n - 1 is the number of numbers in the sequence\n        # 2^n - 1 is the number of numbers in the sequence\n        # 2^n - 1 is the number of numbers in the sequence\n        # 2^n - 1 is the number of numbers in the sequence\n        # 2^n - 1 is the number of numbers in the sequence\n        # 2^n - 1 is the number of numbers in the sequence\n        # 2^n - 1 is the number of numbers in the sequence\n        # 2^n - 1 is the number of numbers in the sequence\n        # 2^n - 1 is the number of numbers in the sequence\n        # 2^n - 1 is the number of numbers in the sequence\n        # 2^n - 1 is the number of numbers in the sequence\n        # 2^n - 1 is the number of numbers in the sequence\n        # 2^n - 1 is the number of numbers in the sequence\n        # 2^n - 1 is the number of numbers in the sequence\n        # 2^n - 1 is the number of numbers in the sequence\n        # 2^n - 1 is the number of numbers in the sequence\n        # 2^n - 1 is the number of numbers in the sequence\n        # 2^n - 1 is the number of numbers in the sequence\n        # 2^n - 1 is the number of numbers in the sequence\n        # 2^n - 1 is the number of numbers in the sequence\n        # 2^n - 1 is the number of numbers in the sequence\n        # 2^n - 1 is the number"}], "climbing-stairs": [{"task_id": "climbing-stairs", "completion": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        \n        a = 1\n        b = 2\n        for i in range(3, n+1):\n            c = a + b\n            a = b\n            b = c\n        return c"}], "word-break": [{"task_id": "word-break", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(0, i))\n        # return dp[len(s)]\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(0, i))\n        # return dp[len(s)]\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(0, i))\n        # return dp[len(s)]\n        \n        dp = [False] * (len(s) + 1)\n        dp[0] = True\n        for i in range(1, len(s) + 1):\n            for word in wordDict:\n                if s[i - len(word):i] == word:\n                    dp[i] = dp[i] or dp[i - len(word)]\n        return dp[-1]"}], "validate-binary-search-tree": [{"task_id": "validate-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def isValidBSTHelper(root, lower=float('-inf'), upper=float('inf')):\n            if not root:\n                return True\n            \n            if root.val <= lower or root.val >= upper:\n                return False\n            \n            return isValidBSTHelper(root.left, lower, root.val) and isValidBSTHelper(root.right, root.val, upper)\n        \n        return isValidBSTHelper(root)"}], "insert-interval": [{"task_id": "insert-interval", "completion": "class Solution(object):\n    def insert(self, intervals, newInterval):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type newInterval: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # if intervals is empty\n        if not intervals:\n            return [newInterval]\n        \n        # if newInterval is empty\n        if not newInterval:\n            return intervals\n        \n        # if newInterval is not overlapping with any interval in intervals\n        if newInterval[0] > intervals[-1][1]:\n            intervals.append(newInterval)\n            return intervals\n        \n        # if newInterval is overlapping with last interval in intervals\n        if newInterval[0] <= intervals[-1][1]:\n            intervals[-1][1] = max(newInterval[1], intervals[-1][1])\n            return intervals\n        \n        # if newInterval is overlapping with any interval in intervals\n        i = 0\n        while i < len(intervals):\n            if newInterval[0] <= intervals[i][1]:\n                intervals[i][0] = min(newInterval[0], intervals[i][0])\n                intervals[i][1] = max(newInterval[1], intervals[i][1])\n                break\n            i += 1\n        \n        # remove intervals that are overlapping with newInterval\n        while i < len(intervals) - 1:\n            if intervals[i][1] >= intervals[i+1][0]:\n                intervals[i][1] = max(intervals[i][1], intervals[i+1][1])\n                intervals.pop(i+1)\n            else:\n                i += 1\n        \n        return intervals"}], "palindrome-partitioning": [{"task_id": "palindrome-partitioning", "completion": "class Solution(object):\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def isPalindrome(s):\n            return s == s[::-1]\n        \n        res = []\n        dp = [[False] * len(s) for _ in range(len(s))]\n        \n        for i in range(len(s)-1, -1, -1):\n            dp[i][i] = True\n            for j in range(i+1, len(s)):\n                dp[i][j] = s[i] == s[j] and dp[i+1][j-1]\n            \n        # dp[i][j] = True if s[i:j+1] is palindrome\n        # dp[i][j] = True if s[i:j+1] is palindrome and s[j+1:end] is palindrome\n        # dp[i][j] = True if s[i:j+1] is palindrome and s[j+1:end] is palindrome and s[end+1:end2] is palindrome\n        # ...\n        # dp[i][j] = True if s[i:j+1] is palindrome and s[j+1:end] is palindrome and s[end+1:end2] is palindrome and ...\n        # dp[i][j] = True if s[i:j+1] is palindrome and s[j+1:end] is palindrome and s[end+1:end2] is palindrome and ... and s[end2+1:end3] is palindrome\n        # ...\n        # dp[i][j] = True if s[i:j+1] is palindrome and s[j+1:end] is palindrome and s[end+1:end2] is palindrome and ... and s[end2+1:end3] is palindrome and ... and s[end3+1:end4] is palindrome\n        # ...\n        # dp[i][j] = True if s[i:j+1] is palindrome and s[j+1:end] is palindrome and s[end+1:end2] is palindrome and ... and s[end2+1:end3] is palindrome and ... and s[end3+1:end4] is palindrome and ... and s[end4+1:end5] is palindrome\n        # ...\n        # dp[i][j] = True if s[i:j+1] is palindrome and s[j+1:end] is palindrome and s[end+1:end2] is palindrome and ... and s[end2+1:end3] is palindrome and ... and s[end3+1:end4] is palindrome and ... and s[end4+1:end5] is palindrome and ... and s[end5+1:end6] is palindrome\n        # ...\n        # dp[i][j] = True if s[i:j+1] is palindrome and s[j+1:end] is palindrome and s[end+1:end2] is palindrome and ... and s[end2+1:end3] is palindrome and ... and s[end3+1:end4] is palindrome and ... and s[end4+1:end5] is palindrome and ... and s[end5+1:end6] is palindrome and ... and s[end6+1:end7] is palindrome\n        # ...\n        # dp[i][j] = True if s[i:j+1] is palindrome and s[j+1:end] is palindrome and s[end+1:end2] is palindrome and ... and s[end2+1:end3] is palindrome and ... and s[end3+1:end4] is palindrome and ... and s[end4+1:end5] is palindrome and ... and s[end5+1:end6] is palindrome and ... and s[end6+1:end7] is palindrome and ... and s[end7+1:end8] is palindrome\n        # ...\n        # dp[i][j] = True if s[i:j+1] is palindrome and s"}], "smallest-range-covering-elements-from-k-lists": [{"task_id": "smallest-range-covering-elements-from-k-lists", "completion": "class Solution(object):\n    def smallestRange(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        min_val = float('inf')\n        max_val = float('-inf')\n        min_range = [min_val, max_val]\n        max_heap = [(nums[i][0], i, 0) for i in range(len(nums))]\n        heapq.heapify(max_heap)\n        max_val = max(max_val, nums[i][0])\n        while True:\n            min_val, i, j = heapq.heappop(max_heap)\n            if max_val - min_val < min_range[1] - min_range[0]:\n                min_range = [min_val, max_val]\n            if j + 1 == len(nums[i]):\n                break\n            max_val = max(max_val, nums[i][j + 1])\n            heapq.heappush(max_heap, (nums[i][j + 1], i, j + 1))\n        return min_range"}], "poor-pigs": [{"task_id": "poor-pigs", "completion": "class Solution(object):\n    def poorPigs(self, buckets, minutesToDie, minutesToTest):\n        \"\"\"\n        :type buckets: int\n        :type minutesToDie: int\n        :type minutesToTest: int\n        :rtype: int\n        \"\"\"\n        \n        # 1000 buckets, 15 minutes, 30 minutes\n        # 1000 / 15 + 1 = 67\n        # 67 pigs\n        # 67 * 15 + 1 = 1081\n        # 1081 / 30 + 1 = 42\n        # 42 pigs\n        # 42 * 30 + 1 = 1053\n        # 1053 / 15 + 1 = 72\n        # 72 pigs\n        # 72 * 15 + 1 = 1473\n        # 1473 / 30 + 1 = 48\n        # 48 pigs\n        # 48 * 30 + 1 = 1169\n        # 1169 / 15 + 1 = 73\n        # 73 pigs\n        # 73 * 15 + 1 = 1494\n        # 1494 / 30 + 1 = 49\n        # 49 pigs\n        # 49 * 30 + 1 = 1185\n        # 1185 / 15 + 1 = 74\n        # 74 pigs\n        # 74 * 15 + 1 = 1530\n        # 1530 / 30 + 1 = 50\n        # 50 pigs\n        # 50 * 30 + 1 = 1151\n        # 1151 / 15 + 1 = 76\n        # 76 pigs\n        # 76 * 15 + 1 = 1576\n        # 1576 / 30 + 1 = 52\n        # 52 pigs\n        # 52 * 30 + 1 = 1197\n        # 1197 / 15 + 1 = 77\n        # 77 pigs\n        # 77 * 15 + 1 = 1622\n        # 1622 / 30 + 1 = 53\n        # 53 pigs\n        # 53 * 30 + 1 = 1198\n        # 1198 / 15 + 1 = 78\n        # 78 pigs\n        # 78 * 15 + 1 = 1633\n        # 1633 / 30 + 1 = 54\n        # 54 pigs\n        # 54 * 30 + 1 = 1204\n        # 1204 / 15 + 1 = 79\n        # 79 pigs\n        # 79 * 15 + 1 = 1649\n        # 1649 / 30 + 1 = 55\n        # 55 pigs\n        # 55 * 30 + 1 = 1210\n        # 1210 / 15 + 1 = 80\n        # 80 pigs\n        # 80 * 15 + 1 = 1665\n        # 1665 / 30 + 1 = 56\n        # 56 pigs\n        # 56 * 30 + 1 = 1216\n        # 1216 / 15 + 1 = 81\n        # 81 pigs\n        # 81 * 15 + 1 = 1671\n        # 1671 / 30 + 1 = 57\n        # 57 pigs\n        # 57 * 30 + 1 = 1217\n        # 1217 / 15 + 1 = 82\n        # 82 pigs\n        # 82 * 15 + 1 = 1676\n        # 1676 / 30 + 1 = 58\n        # 58 pigs\n        # 58 * 30 + 1 = 1218\n        # 1218 / 15 + 1 = 83\n        # 83 pigs\n        # 83 * 15 + 1 = 1683\n        # 1683 / 30 + 1 = 59\n        # 59 pigs\n        # 59 * 30 + 1 = 1"}], "swim-in-rising-water": [{"task_id": "swim-in-rising-water", "completion": "class Solution(object):\n    def swimInWater(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        if n == 1:\n            return grid[0][0]\n        \n        # binary search\n        left = 0\n        right = max(grid[0][0], grid[n-1][n-1])\n        \n        while left < right:\n            mid = (left + right) // 2\n            if self.is_possible(grid, mid, n):\n                right = mid\n            else:\n                left = mid + 1\n        \n        return left\n        \n        \n    def is_possible(self, grid, time, n):\n        visited = set()\n        visited.add((0, 0))\n        q = [(0, 0)]\n        \n        while q:\n            x, y = q.pop()\n            if x == n-1 and y == n-1:\n                return True\n            for dx, dy in [(0, 1), (1, 0), (-1, 0), (0, -1)]:\n                nx = x + dx\n                ny = y + dy\n                if nx < 0 or nx >= n or ny < 0 or ny >= n or (nx, ny) in visited:\n                    continue\n                if grid[nx][ny] <= time:\n                    visited.add((nx, ny))\n                    q.append((nx, ny))\n        \n        return False"}], "unique-paths": [{"task_id": "unique-paths", "completion": "class Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i"}], "multiply-strings": [{"task_id": "multiply-strings", "completion": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        if num1 == \"0\" or num2 == \"0\":\n            return \"0\"\n        \n        num1 = num1[::-1]\n        num2 = num2[::-1]\n        \n        res = 0\n        for i in range(len(num1)):\n            digit1 = int(num1[i])\n            carry = 0\n            j = 0\n            while j < len(num2):\n                digit2 = int(num2[j])\n                product = digit1 * digit2 + carry + res\n                res = product % 10\n                carry = product // 10\n                num2[j] = str(res)\n                j += 1\n            num2 += \"0\" * i\n            res = carry + res\n        if res == 0:\n            return \"0\"\n        return str(res)"}], "best-time-to-buy-and-sell-stock-iii": [{"task_id": "best-time-to-buy-and-sell-stock-iii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # if len(prices) < 2:\n        #     return 0\n        \n        # left_min = prices[0]\n        # right_max = prices[-1]\n        # left_sum = 0\n        # right_sum = 0\n        \n        # for i in range(1, len(prices)):\n        #     if prices[i] < left_min:\n        #         left_min = prices[i]\n        #         left_sum = 0\n        #     left_sum += prices[i] - left_min\n        #     right_max = max(right_max, prices[-i-1])\n        #     right_sum = max(right_sum, right_max - prices[-i-1])\n        # return max(left_sum, right_sum)\n        \n        # if len(prices) < 2:\n        #     return 0\n        \n        # left_min = prices[0]\n        # right_max = prices[-1]\n        # left_sum = 0\n        # right_sum = 0\n        \n        # for i in range(1, len(prices)):\n        #     if prices[i] < left_min:\n        #         left_min = prices[i]\n        #     left_sum = max(left_sum, prices[i] - left_min)\n        #     right_max = max(right_max, prices[-i-1])\n        #     right_sum = max(right_sum, right_max - prices[-i-1])\n        # return max(left_sum, right_sum)\n        \n        if len(prices) < 2:\n            return 0\n        \n        left_min = prices[0]\n        right_max = prices[-1]\n        left_sum = 0\n        right_sum = 0\n        \n        for i in range(1, len(prices)):\n            if prices[i] < left_min:\n                left_min = prices[i]\n            left_sum = max(left_sum, prices[i] - left_min)\n            right_max = max(right_max, prices[-i-1])\n            right_sum = max(right_sum, right_max - prices[-i-1])\n        return max(left_sum, right_sum)"}], "combination-sum-ii": [{"task_id": "combination-sum-ii", "completion": "class Solution(object):\n    def combinationSum2(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        res = []\n        self.dfs(candidates, target, 0, [], res)\n        return res\n        \n    def dfs(self, candidates, target, start, path, res):\n        if target == 0:\n            res.append(path[:])\n            return\n        for i in range(start, len(candidates)):\n            if candidates[i] > target:\n                break\n            if i > start and candidates[i] == candidates[i-1]:\n                continue\n            path.append(candidates[i])\n            self.dfs(candidates, target - candidates[i], i + 1, path, res)\n            path.pop()"}], "detect-capital": [{"task_id": "detect-capital", "completion": "class Solution(object):\n    def detectCapitalUse(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if word.isupper() or word.islower() or word[0].isupper():\n            return True\n        \n        if word[1:].isupper():\n            return False\n        \n        return True"}], "best-time-to-buy-and-sell-stock": [{"task_id": "best-time-to-buy-and-sell-stock", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        min_price = float('inf')\n        max_profit = 0\n        \n        for price in prices:\n            min_price = min(min_price, price)\n            max_profit = max(max_profit, price - min_price)\n        \n        return max_profit"}], "binary-tree-inorder-traversal": [{"task_id": "binary-tree-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = []\n        result = []\n        curr = root\n        \n        while curr is not None or stack:\n            if curr is not None:\n                stack.append(curr)\n                curr = curr.left\n            else:\n                curr = stack.pop()\n                result.append(curr.val)\n                curr = curr.right\n        \n        return result"}], "construct-binary-tree-from-preorder-and-inorder-traversal": [{"task_id": "construct-binary-tree-from-preorder-and-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not preorder:\n            return None\n        \n        root = TreeNode(preorder[0])\n        root_index = inorder.index(preorder[0])\n        \n        root.left = self.buildTree(preorder[1:root_index+1], inorder[:root_index])\n        root.right = self.buildTree(preorder[root_index+1:], inorder[root_index+1:])\n        \n        return root"}], "remove-invalid-parentheses": [{"task_id": "remove-invalid-parentheses", "completion": "class Solution(object):\n    def removeInvalidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. find the number of left and right parentheses\n        # 2. find the number of left and right parentheses that are not removed\n        # 3. find the number of left and right parentheses that are removed\n        # 4. find the number of left and right parentheses that are removed\n        # 5. find the number of left and right parentheses that are removed\n        # 6. find the number of left and right parentheses that are removed\n        # 7. find the number of left and right parentheses that are removed\n        # 8. find the number of left and right parentheses that are removed\n        # 9. find the number of left and right parentheses that are removed\n        # 10. find the number of left and right parentheses that are removed\n        # 11. find the number of left and right parentheses that are removed\n        # 12. find the number of left and right parentheses that are removed\n        # 13. find the number of left and right parentheses that are removed\n        # 14. find the number of left and right parentheses that are removed\n        # 15. find the number of left and right parentheses that are removed\n        # 16. find the number of left and right parentheses that are removed\n        # 17. find the number of left and right parentheses that are removed\n        # 18. find the number of left and right parentheses that are removed\n        # 19. find the number of left and right parentheses that are removed\n        # 20. find the number of left and right parentheses that are removed\n        # 21. find the number of left and right parentheses that are removed\n        # 22. find the number of left and right parentheses that are removed\n        # 23. find the number of left and right parentheses that are removed\n        # 24. find the number of left and right parentheses that are removed\n        # 25. find the number of left and right parentheses that are removed\n        # 26. find the number of left and right parentheses that are removed\n        # 27. find the number of left and right parentheses that are removed\n        # 28. find the number of left and right parentheses that are removed\n        # 29. find the number of left and right parentheses that are removed\n        # 30. find the number of left and right parentheses that are removed\n        # 31. find the number of left and right parentheses that are removed\n        # 32. find the number of left and right parentheses that are removed\n        # 33. find the number of left and right parentheses that are removed\n        # 34. find the number of left and right parentheses that are removed\n        # 35. find the number of left and right parentheses that are removed\n        # 36. find the number of left and right parentheses that are removed\n        # 37. find the number of left and right parentheses that are removed\n        # 38. find the number of left and right parentheses that are removed\n        # 39. find the number of left and right parentheses that are removed\n        # 40. find the number of left and right parentheses that are removed\n        # 41. find the number of left and right parentheses that are removed\n        # 42. find the number of left and right parentheses that are removed\n        # 43. find the number of left and right parentheses that are removed\n        # 44. find the number of left and right parentheses that are removed\n        # 45. find the number of left and right parentheses that are removed\n        # 46. find the number of left and right parentheses that are removed\n        # 47. find the number of left and right parentheses that are removed\n        # 48. find the number of left and right parentheses that are removed\n        # 49. find the number of left and right parentheses that are removed\n        # 50. find the number of left and right parentheses that are removed\n        # 51. find the number of left and right parentheses that are removed\n        # 52. find the number of left and right parenthes"}], "merge-k-sorted-lists": [{"task_id": "merge-k-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        \n        if not lists:\n            return None\n        \n        if len(lists) == 1:\n            return lists[0]\n        \n        mid = len(lists) // 2\n        \n        left = self.mergeKLists(lists[:mid])\n        right = self.mergeKLists(lists[mid:])\n        \n        return self.mergeTwoLists(left, right)\n        \n        \n        \n    def mergeTwoLists(self, l1, l2):\n        if not l1:\n            return l2\n        if not l2:\n            return l1\n        \n        if l1.val < l2.val:\n            l1.next = self.mergeTwoLists(l1.next, l2)\n            return l1\n        else:\n            l2.next = self.mergeTwoLists(l1, l2.next)\n            return l2"}], "palindrome-partitioning-ii": [{"task_id": "palindrome-partitioning-ii", "completion": "class Solution(object):\n    def minCut(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # dp[i] = min cuts needed for s[0:i]\n        # dp[i] = min(dp[j] + 1) for all j < i and s[j:i] is palindrome\n        # dp[i] = 0 if s[i] is palindrome\n        # dp[0] = -1\n        # dp[1] = 0\n        # dp[2] = 1\n        # dp[3] = 0\n        # dp[4] = 1\n        # dp[5] = 2\n        # dp[6] = 3\n        # dp[7] = 4\n        # dp[8] = 5\n        # dp[9] = 6\n        # dp[10] = 7\n        # dp[11] = 8\n        # dp[12] = 9\n        # dp[13] = 10\n        # dp[14] = 11\n        # dp[15] = 12\n        # dp[16] = 13\n        # dp[17] = 14\n        # dp[18] = 15\n        # dp[19] = 16\n        # dp[20] = 17\n        # dp[21] = 18\n        # dp[22] = 19\n        # dp[23] = 20\n        # dp[24] = 21\n        # dp[25] = 22\n        # dp[26] = 23\n        # dp[27] = 24\n        # dp[28] = 25\n        # dp[29] = 26\n        # dp[30] = 27\n        # dp[31] = 28\n        # dp[32] = 29\n        # dp[33] = 30\n        # dp[34] = 31\n        # dp[35] = 32\n        # dp[36] = 33\n        # dp[37] = 34\n        # dp[38] = 35\n        # dp[39] = 36\n        # dp[40] = 37\n        # dp[41] = 38\n        # dp[42] = 39\n        # dp[43] = 40\n        # dp[44] = 41\n        # dp[45] = 42\n        # dp[46] = 43\n        # dp[47] = 44\n        # dp[48] = 45\n        # dp[49] = 46\n        # dp[50] = 47\n        # dp[51] = 48\n        # dp[52] = 49\n        # dp[53] = 50\n        # dp[54] = 51\n        # dp[55] = 52\n        # dp[56] = 53\n        # dp[57] = 54\n        # dp[58] = 55\n        # dp[59] = 56\n        # dp[60] = 57\n        # dp[61] = 58\n        # dp[62] = 59\n        # dp[63] = 60\n        # dp[64] = 61\n        # dp[65] = 62\n        # dp[66] = 63\n        # dp[67] = 64\n        # dp[68] = 65\n        # dp[69] = 66\n        # dp[70] = 67\n        # dp[71] = 68\n        # dp[72] = 69\n        # dp[73] = 70\n        # dp[74] = 71\n        # dp[75] = 72\n        # dp[76] = 73\n        # dp[77] = 74\n        # dp[78] = 75\n        # dp[79] = 76\n        # dp[80] = 77\n        #"}], "preimage-size-of-factorial-zeroes-function": [{"task_id": "preimage-size-of-factorial-zeroes-function", "completion": "class Solution(object):\n    def preimageSizeFZF(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226,"}], "palindrome-pairs": [{"task_id": "palindrome-pairs", "completion": "class Solution(object):\n    def palindromePairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # Time Complexity: O(n^2)\n        # Space Complexity: O(n)\n        \n        # Create a hashmap to store the reverse of each word\n        # and its index\n        word_map = {word[::-1]: i for i, word in enumerate(words)}\n        \n        # Create a result list\n        result = []\n        \n        # Iterate over the words in the words list\n        for i, word in enumerate(words):\n            \n            # If the word is a palindrome\n            if word in word_map:\n                \n                # If the index of the word is not the same as the index of the reverse of the word\n                # then add the index of the word to the result list\n                if i != word_map[word]:\n                    result.append([i, word_map[word]])\n            \n            # Reverse the word\n            rev_word = word[::-1]\n            \n            # If the reverse of the word is in the hashmap\n            if rev_word in word_map:\n                \n                # Add the index of the word to the result list\n                result.append([word_map[rev_word], i])\n            \n        return result"}], "convert-sorted-array-to-binary-search-tree": [{"task_id": "convert-sorted-array-to-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedArrayToBST(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not nums:\n            return None\n        \n        mid = len(nums)//2\n        root = TreeNode(nums[mid])\n        root.left = self.sortedArrayToBST(nums[:mid])\n        root.right = self.sortedArrayToBST(nums[mid+1:])\n        \n        return root"}], "contain-virus": [{"task_id": "contain-virus", "completion": "class Solution(object):\n    def containVirus(self, isInfected):\n        \"\"\"\n        :type isInfected: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. Find the largest region\n        # 2. Build walls around the region\n        # 3. Repeat until no more regions\n        \n        # 1. Find the largest region\n        m, n = len(isInfected), len(isInfected[0])\n        largest_region_size = 0\n        largest_region_coords = None\n        for i in range(m):\n            for j in range(n):\n                if isInfected[i][j] == 1:\n                    largest_region_size += 1\n                    largest_region_coords = (i, j)\n        \n        # 2. Build walls around the region\n        walls = 0\n        while largest_region_size > 0:\n            # 2.1 Find the next uninfected cell\n            next_uninfected_cell = None\n            for i in range(m):\n                for j in range(n):\n                    if isInfected[i][j] == 0:\n                        if next_uninfected_cell is None:\n                            next_uninfected_cell = (i, j)\n                        else:\n                            if (i, j) < next_uninfected_cell:\n                                next_uninfected_cell = (i, j)\n            \n            # 2.2 Build walls around the next uninfected cell\n            walls += self.build_walls(isInfected, next_uninfected_cell)\n            \n            # 2.3 Update the largest region size\n            largest_region_size -= 1\n        \n        return walls\n        \n    def build_walls(self, isInfected, next_uninfected_cell):\n        # Build walls around the next uninfected cell\n        # Return the number of walls built\n        m, n = len(isInfected), len(isInfected[0])\n        walls = 0\n        queue = [next_uninfected_cell]\n        while queue:\n            i, j = queue.pop()\n            isInfected[i][j] = -1\n            walls += 1\n            for di, dj in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n                ni, nj = i + di, j + dj\n                if 0 <= ni < m and 0 <= nj < n and isInfected[ni][nj] == 1:\n                    queue.append((ni, nj))\n        \n        return walls"}], "longest-increasing-path-in-a-matrix": [{"task_id": "longest-increasing-path-in-a-matrix", "completion": "class Solution(object):\n    def longestIncreasingPath(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        longest_path = 0\n        cache = [[0 for _ in range(n)] for _ in range(m)]\n        \n        for i in range(m):\n            for j in range(n):\n                longest_path = max(longest_path, self.dfs(matrix, i, j, cache))\n        \n        return longest_path\n        \n    def dfs(self, matrix, i, j, cache):\n        if cache[i][j] != 0:\n            return cache[i][j]\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        directions = [[0,1], [0,-1], [1,0], [-1,0]]\n        longest_path = 1\n        \n        for direction in directions:\n            new_i = i + direction[0]\n            new_j = j + direction[1]\n            \n            if new_i >= 0 and new_i < m and new_j >= 0 and new_j < n and matrix[new_i][new_j] > matrix[i][j]:\n                longest_path = max(longest_path, 1 + self.dfs(matrix, new_i, new_j, cache))\n        \n        cache[i][j] = longest_path\n        return longest_path"}], "number-of-digit-one": [{"task_id": "number-of-digit-one", "completion": "class Solution(object):\n    def countDigitOne(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        ones = 0\n        power = 1\n        while n >= power:\n            ones += (n // power) * power + (n % power if n % power >= 2 else 0)\n            power *= 10\n        return ones"}], "word-break-ii": [{"task_id": "word-break-ii", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # dp[i] = True if s[:i] is a word in wordDict\n        # dp[i] = dp[j] and s[j:i] is a word in wordDict\n        # dp[i] = False otherwise\n        dp = [False] * (len(s) + 1)\n        dp[0] = True\n        for i in range(1, len(s) + 1):\n            for word in wordDict:\n                if s[i - len(word):i] == word:\n                    dp[i] = dp[i] or dp[i - len(word)]\n        if not dp[-1]:\n            return []\n        res = []\n        i = len(s)\n        while i > 0:\n            if dp[i]:\n                res.append(s[i - len(wordDict[-1]):i])\n                i -= len(wordDict[-1])\n            else:\n                i -= 1\n        return res[::-1]"}], "binary-tree-zigzag-level-order-traversal": [{"task_id": "binary-tree-zigzag-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def zigzagLevelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        left_to_right = True\n        \n        while queue:\n            level = []\n            for _ in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            if not left_to_right:\n                level.reverse()\n            result.append(level)\n            left_to_right = not left_to_right\n        \n        return result"}], "binary-watch": [{"task_id": "binary-watch", "completion": "class Solution(object):\n    def readBinaryWatch(self, turnedOn):\n        \"\"\"\n        :type turnedOn: int\n        :rtype: List[str]\n        \"\"\"\n        \n        if turnedOn > 8:\n            return []\n        \n        res = []\n        for h in range(12):\n            if h*6 + (turnedOn - h) < 12:\n                res.append(str(h) + \":\" + (\"0\" + str(h*6 + (turnedOn - h)) if h*6 + (turnedOn - h) < 10 else str(h*6 + (turnedOn - h))))\n            else:\n                res.append(str(h) + \":\" + (\"0\" + str(h*6 + (turnedOn - h)) if h*6 + (turnedOn - h) < 10 else str(h*6 + (turnedOn - h))))\n        return res"}], "pascals-triangle": [{"task_id": "pascals-triangle", "completion": "class Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if numRows == 0:\n            return []\n        \n        if numRows == 1:\n            return [[1]]\n        \n        if numRows == 2:\n            return [[1], [1,1]]\n        \n        res = [[1,1]]\n        \n        for i in range(2, numRows):\n            temp = [1]\n            for j in range(1, i):\n                temp.append(res[i-1][j] + res[i-1][j-1])\n            temp.append(1)\n            res.append(temp)\n        \n        return res"}], "power-of-three": [{"task_id": "power-of-three", "completion": "class Solution(object):\n    def isPowerOfThree(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        if n == 1:\n            return True\n        \n        if n % 3 == 0:\n            return self.isPowerOfThree(n/3)\n        \n        return False"}], "binary-tree-maximum-path-sum": [{"task_id": "binary-tree-maximum-path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxPathSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        self.max_sum = float('-inf')\n        def max_gain(node):\n            if not node:\n                return 0\n            \n            left_gain = max(max_gain(node.left), 0)\n            right_gain = max(max_gain(node.right), 0)\n            \n            self.max_sum = max(self.max_sum, left_gain + right_gain + node.val)\n            \n            return node.val + max(left_gain, right_gain)\n        \n        max_gain(root)\n        return self.max_sum"}], "trapping-rain-water-ii": [{"task_id": "trapping-rain-water-ii", "completion": "class Solution(object):\n    def trapRainWater(self, heightMap):\n        \"\"\"\n        :type heightMap: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not heightMap or not heightMap[0]:\n            return 0\n        \n        n, m = len(heightMap), len(heightMap[0])\n        heap = [(heightMap[i][0], i, 0) for i in range(n)] + [(heightMap[i][m-1], i, m-1) for i in range(n)]\n        heapq.heapify(heap)\n        seen = set((0, 0))\n        seen.add((0, 0))\n        seen.add((n-1, m-1))\n        ans = 0\n        dirs = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n        while heap:\n            h, i, j = heapq.heappop(heap)\n            for di, dj in dirs:\n                ni, nj = i+di, j+dj\n                if 0<=ni<n and 0<=nj<m and (ni, nj) not in seen:\n                    ans += max(h-heightMap[ni][nj], 0)\n                    heapq.heappush(heap, (max(h, heightMap[ni][nj]), ni, nj))\n                    seen.add((ni, nj))\n        return ans"}], "valid-palindrome": [{"task_id": "valid-palindrome", "completion": "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        s = s.lower()\n        s = ''.join(filter(str.isalnum, s))\n        return s == s[::-1]"}], "sliding-window-median": [{"task_id": "sliding-window-median", "completion": "class Solution(object):\n    def medianSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[float]\n        \"\"\"\n        \n        # O(n) time and O(n) space\n        # sliding window of size k\n        # if k is odd, median is the middle value\n        # if k is even, median is the mean of the two middle values\n        # if k is 1, median is the first value\n        # if k is n, median is the last value\n        # if k is n+1, median is the average of the two middle values\n        # if k is n+2, median is the average of the three middle values\n        # if k is n+3, median is the average of the four middle values\n        # ...\n        # if k is n+k, median is the average of the k middle values\n        # if k is n+k+1, median is the average of the k+1 middle values\n        # ...\n        # if k is n+2k-1, median is the average of the 2k-1 middle values\n        # if k is n+2k, median is the average of the 2k middle values\n        # if k is n+2k+1, median is the average of the 2k+1 middle values\n        # ...\n        # if k is n+2(k-1), median is the average of the 2(k-1) middle values\n        # if k is n+2(k-1)+1, median is the average of the 2(k-1)+1 middle values\n        # ...\n        # if k is n+2(k-1)+k-1, median is the average of the 2(k-1)+k-1 middle values\n        # if k is n+2(k-1)+k, median is the average of the 2(k-1)+k middle values\n        # if k is n+2(k-1)+k+1, median is the average of the 2(k-1)+k+1 middle values\n        # ...\n        # if k is n+2(k-1)+2k-1, median is the average of the 2(k-1)+2k-1 middle values\n        # if k is n+2(k-1)+2k, median is the average of the 2(k-1)+2k middle values\n        # if k is n+2(k-1)+2k+1, median is the average of the 2(k-1)+2k+1 middle values\n        # ...\n        # if k is n+2(k-1)+2(k-1), median is the average of the 2(k-1)+2(k-1) middle values\n        # if k is n+2(k-1)+2(k-1)+1, median is the average of the 2(k-1)+2(k-1)+1 middle values\n        # ...\n        # if k is n+2(k-1)+2(k-1)+k-1, median is the average of the 2(k-1)+2(k-1)+k-1 middle values\n        # if k is n+2(k-1)+2(k-1)+k, median is the average of the 2(k-1)+2(k-1)+k middle values\n        # if k is n+2(k-1)+2(k-1)+k+1, median is the average of the 2(k-1)+2(k-1)+k+1 middle values\n        # ...\n        # if k is n+2(k-1)+2(k-1)+2k-1, median is the average of the 2(k-1)+2(k-1)+2k-1 middle values\n        # if k is n+2(k-1)+2(k-1)+2k, median is the average of the 2(k-1)+2(k-1)+2k middle values\n        # if k is n+2(k-1)+2(k-1)+2k+1, median is the average of the 2(k-1)+2(k-1)+2k+1 middle values\n        # ...\n        # if k is n+2(k-1)+2(k-1)+2(k-1), median is the average of the 2(k-1)+2(k-1"}], "rotate-list": [{"task_id": "rotate-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        length = 1\n        curr = head\n        while curr.next:\n            curr = curr.next\n            length += 1\n        \n        curr.next = head\n        k = k % length\n        if k == 0:\n            return head\n        \n        curr = head\n        for i in range(length - k - 1):\n            curr = curr.next\n        \n        new_head = curr.next\n        curr.next = None\n        \n        return new_head"}], "ugly-number": [{"task_id": "ugly-number", "completion": "class Solution(object):\n    def isUgly(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 2 == 0:\n            n = n // 2\n        \n        while n % 3 == 0:\n            n = n // 3\n        \n        while n % 5 == 0:\n            n = n // 5\n        \n        return n == 1"}], "falling-squares": [{"task_id": "falling-squares", "completion": "class Solution(object):\n    def fallingSquares(self, positions):\n        \"\"\"\n        :type positions: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # Time: O(nlogn)\n        # Space: O(n)\n        # Sort the positions by left coordinate\n        # Keep track of the max height of the current stack\n        # Keep track of the max height of the previous stack\n        # If the current position is smaller than the previous position,\n        # then the previous position is the bottom of the current stack\n        # Otherwise, the current position is the top of the current stack\n        # Update the max height of the current stack\n        # Update the max height of the previous stack\n        # Return the max height of the current stack\n        \n        # Sort the positions by left coordinate\n        positions.sort(key=lambda x: x[0])\n        \n        # Keep track of the max height of the current stack\n        max_height = 0\n        \n        # Keep track of the max height of the previous stack\n        prev_max_height = 0\n        \n        # Keep track of the current stack\n        stack = []\n        \n        # Keep track of the previous position\n        prev_pos = -1\n        \n        # Keep track of the current position\n        curr_pos = 0\n        \n        # Keep track of the current height\n        curr_height = 0\n        \n        # Iterate over the positions\n        for pos in positions:\n            curr_pos = pos[0]\n            curr_height = pos[1]\n            \n            # Update the max height of the current stack\n            if curr_height > max_height:\n                max_height = curr_height\n            \n            # Update the max height of the previous stack\n            if prev_pos != -1 and curr_pos < prev_pos:\n                prev_max_height = max(prev_max_height, max_height)\n            \n            # Update the current stack\n            stack.append((curr_pos, curr_height))\n            \n            # Update the previous position\n            prev_pos = curr_pos\n            \n            # Update the max height of the current stack\n            max_height += curr_height\n            \n            # Update the max height of the previous stack\n            prev_max_height = max(prev_max_height, max_height)\n            \n            # Update the stack\n            stack.append((curr_pos, max_height))\n            \n            # Update the max height of the current stack\n            max_height += curr_height\n            \n            # Update the max height of the previous stack\n            prev_max_height = max(prev_max_height, max_height)\n            \n            # Return the max height of the current stack\n            return [prev_max_height] * len(stack)"}], "sum-of-left-leaves": [{"task_id": "sum-of-left-leaves", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumOfLeftLeaves(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        if root.left and not root.left.left and not root.left.right:\n            return root.left.val + self.sumOfLeftLeaves(root.right)\n        \n        return self.sumOfLeftLeaves(root.left) + self.sumOfLeftLeaves(root.right)"}], "max-sum-of-rectangle-no-larger-than-k": [{"task_id": "max-sum-of-rectangle-no-larger-than-k", "completion": "class Solution(object):\n    def maxSumSubmatrix(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # Time Complexity: O(m*n*log(m*n))\n        # Space Complexity: O(m*n)\n        \n        # Approach:\n        # 1. Find the max sum of a subarray in the matrix with sum <= k\n        # 2. Find the max sum of a subarray in the transpose of the matrix with sum <= k\n        # 3. Find the max sum of a subarray in the matrix with sum <= k\n        # 4. Find the max sum of a subarray in the transpose of the matrix with sum <= k\n        # 5. Return the max of the above 4 sums\n        \n        # Edge Case:\n        # If the matrix is empty, return 0\n        if not matrix:\n            return 0\n        \n        # Initialize the max sum to the maximum value of the matrix\n        max_sum = max(map(max, matrix))\n        \n        # If the max sum is already less than k, return it\n        if max_sum <= k:\n            return max_sum\n        \n        # Initialize the max sum to 0\n        curr_sum = 0\n        \n        # Initialize the max sum to 0\n        max_sum_transpose = 0\n        \n        # Initialize the max sum to 0\n        max_sum_submatrix = 0\n        \n        # Initialize the max sum to 0\n        max_sum_submatrix_transpose = 0\n        \n        # Initialize the max sum to 0\n        max_sum_submatrix_transpose_transpose = 0\n        \n        # Initialize the max sum to 0\n        max_sum_submatrix_transpose_transpose_transpose = 0\n        \n        # Initialize the max sum to 0\n        max_sum_submatrix_transpose_transpose_transpose_transpose = 0\n        \n        # Initialize the max sum to 0\n        max_sum_submatrix_transpose_transpose_transpose_transpose_transpose = 0\n        \n        # Initialize the max sum to 0\n        max_sum_submatrix_transpose_transpose_transpose_transpose_transpose = 0\n        \n        # Initialize the max sum to 0\n        max_sum_submatrix_transpose_transpose_transpose_transpose_transpose = 0\n        \n        # Initialize the max sum to 0\n        max_sum_submatrix_transpose_transpose_transpose_transpose_transpose = 0\n        \n        # Initialize the max sum to 0\n        max_sum_submatrix_transpose_transpose_transpose_transpose_transpose = 0\n        \n        # Initialize the max sum to 0\n        max_sum_submatrix_transpose_transpose_transpose_transpose_transpose = 0\n        \n        # Initialize the max sum to 0\n        max_sum_submatrix_transpose_transpose_transpose_transpose_transpose = 0\n        \n        # Initialize the max sum to 0\n        max_sum_submatrix_transpose_transpose_transpose_transpose_transpose = 0\n        \n        # Initialize the max sum to 0\n        max_sum_submatrix_transpose_transpose_transpose_transpose_transpose = 0\n        \n        # Initialize the max sum to 0\n        max_sum_submatrix_transpose_transpose_transpose_transpose_transpose = 0\n        \n        # Initialize the max sum to 0\n        max_sum_submatrix_transpose_transpose_transpose_transpose_transpose = 0\n        \n        # Initialize the max sum to 0\n        max_sum_submatrix_transpose_transpose_transpose_transpose_transpose = 0\n        \n        # Initialize the max sum to 0\n        max_sum_submatrix_transpose_transpose_transpose_transpose_transpose = 0\n        \n        # Initialize the max sum to 0\n        max_sum_submatrix_transpose_transpose_transpose_transpose_transpose = 0\n        \n        # Initialize the max sum to 0\n        max_sum_submatrix_transpose_transpose_transpose_transpose_transpose = 0\n        \n        # Initialize the max sum to 0\n        max_sum_submatrix_trans"}], "divide-two-integers": [{"task_id": "divide-two-integers", "completion": "class Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"\n        \n        if dividend == 0:\n            return 0\n        \n        if dividend == -2**31 and divisor == -1:\n            return 2**31 - 1\n        \n        sign = 1 if (dividend > 0) == (divisor > 0) else -1\n        \n        dividend = abs(dividend)\n        divisor = abs(divisor)\n        \n        quotient = 0\n        \n        while dividend >= divisor:\n            dividend -= divisor\n            quotient += 1\n        \n        return sign * quotient"}], "surrounded-regions": [{"task_id": "surrounded-regions", "completion": "class Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        if not board:\n            return\n        \n        m = len(board)\n        n = len(board[0])\n        \n        # mark all the border 'O's with 'T's\n        for i in range(m):\n            if board[i][0] == 'O':\n                self.dfs(board, i, 0)\n            if board[i][n-1] == 'O':\n                self.dfs(board, i, n-1)\n        \n        for j in range(n):\n            if board[0][j] == 'O':\n                self.dfs(board, 0, j)\n            if board[m-1][j] == 'O':\n                self.dfs(board, m-1, j)\n        \n        # change all the 'O's to 'X's that are not 'T's\n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'O':\n                    board[i][j] = 'X'\n                if board[i][j] == 'T':\n                    board[i][j] = 'O'\n        \n        \n    def dfs(self, board, i, j):\n        if board[i][j] == 'O':\n            board[i][j] = 'T'\n            if i > 0:\n                self.dfs(board, i-1, j)\n            if i < len(board)-1:\n                self.dfs(board, i+1, j)\n            if j > 0:\n                self.dfs(board, i, j-1)\n            if j < len(board[0])-1:\n                self.dfs(board, i, j+1)"}], "two-sum": [{"task_id": "two-sum", "completion": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # create a hashmap\n        hashmap = {}\n        \n        # iterate through the nums array\n        for i in range(len(nums)):\n            \n            # if the difference between the target and the current number is in the hashmap, return the index of the number and the index of the difference\n            if target - nums[i] in hashmap:\n                return [hashmap[target - nums[i]], i]\n            \n            # otherwise, add the number to the hashmap with its index as the value\n            hashmap[nums[i]] = i\n        \n        return [-1, -1]"}], "24-game": [{"task_id": "24-game", "completion": "class Solution(object):\n    def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        def backtrack(cards, target):\n            if len(cards) == 1:\n                return abs(cards[0] - target) < 1e-6\n            \n            for i in range(len(cards)):\n                for j in range(i):\n                    a = cards[i]\n                    b = cards[j]\n                    new_cards = [a + b, a - b, b - a, a * b]\n                    if b != 0:\n                        new_cards.append(a / b)\n                    if a != 0:\n                        new_cards.append(b / a)\n                    if backtrack(cards[:j] + new_cards + cards[j+1:], target):\n                        return True\n            return False\n        \n        return backtrack(cards, 24)"}], "wildcard-matching": [{"task_id": "wildcard-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        # if p is empty, then s must be empty as well\n        if not p:\n            return not s\n        \n        # if p is not empty, then s must not be empty\n        if not s:\n            return False\n        \n        # if p is a single character, then s must also be a single character\n        if len(p) == 1:\n            return s == p or p == '*'\n        \n        # if p is a double star, then s can be empty\n        if p[-1] == '*':\n            return self.isMatch(s, p[:-1])\n        \n        # if p is not a double star, then s must not be empty\n        if not s:\n            return False\n        \n        # if p is not a double star, then s must be a single character\n        if p[-1] != '*':\n            return s[-1] == p[-1] and self.isMatch(s[:-1], p[:-1])\n        \n        # if p is a double star, then s can be a single character\n        # if p is a double star, then s can be a single character\n        # if p is a double star, then s can be a single character\n        # if p is a double star, then s can be a single character\n        # if p is a double star, then s can be a single character\n        # if p is a double star, then s can be a single character\n        # if p is a double star, then s can be a single character\n        # if p is a double star, then s can be a single character\n        # if p is a double star, then s can be a single character\n        # if p is a double star, then s can be a single character\n        # if p is a double star, then s can be a single character\n        # if p is a double star, then s can be a single character\n        # if p is a double star, then s can be a single character\n        # if p is a double star, then s can be a single character\n        # if p is a double star, then s can be a single character\n        # if p is a double star, then s can be a single character\n        # if p is a double star, then s can be a single character\n        # if p is a double star, then s can be a single character\n        # if p is a double star, then s can be a single character\n        # if p is a double star, then s can be a single character\n        # if p is a double star, then s can be a single character\n        # if p is a double star, then s can be a single character\n        # if p is a double star, then s can be a single character\n        # if p is a double star, then s can be a single character\n        # if p is a double star, then s can be a single character\n        # if p is a double star, then s can be a single character\n        # if p is a double star, then s can be a single character\n        # if p is a double star, then s can be a single character\n        # if p is a double star, then s can be a single character\n        # if p is a double star, then s can be a single character\n        # if p is a double star, then s can be a single character\n        # if p is a double star, then s can be a single character\n        # if p is a double star, then s can be a single character\n        # if p is a double star, then s can be a single character\n        # if p is a double star, then s can be a single character\n        # if p is a double star, then s can be a single character\n        # if p is a double star, then s can be a single character\n        # if p is a double star, then s can be a single character\n        # if p is a double star, then s can be a single character\n        # if p is a double star, then s can be a single character\n        # if p is a double star, then s can be a single character\n        # if p is a double star, then s can be a single character\n        # if p is a double star, then s can be a single character\n        # if p is a double star, then s can be a single character\n        # if p is a double star, then s can be a single character\n        # if p is a double star, then s can be a single character\n        # if p is a double star, then s can be"}], "majority-element": [{"task_id": "majority-element", "completion": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        count = 0\n        candidate = None\n        \n        for num in nums:\n            if count == 0:\n                candidate = num\n            if num == candidate:\n                count += 1\n            else:\n                count -= 1\n        \n        return candidate"}], "reconstruct-itinerary": [{"task_id": "reconstruct-itinerary", "completion": "class Solution(object):\n    def findItinerary(self, tickets):\n        \"\"\"\n        :type tickets: List[List[str]]\n        :rtype: List[str]\n        \"\"\"\n        \n        # Build a graph\n        graph = defaultdict(list)\n        for start, end in tickets:\n            graph[start].append(end)\n        \n        # Sort the keys in the graph\n        for key in graph:\n            graph[key].sort(reverse=True)\n        \n        # DFS\n        res = []\n        def dfs(node):\n            # If there is no node, return\n            if node not in graph:\n                return\n            \n            # Visit all the nodes\n            for neighbor in graph[node]:\n                # Remove the node from the graph\n                graph[node].remove(neighbor)\n                # Recursively call dfs\n                dfs(neighbor)\n            \n            # Add the node to the result\n            res.append(node)\n        \n        # Start from JFK\n        dfs(\"JFK\")\n        \n        # Reverse the result\n        return res[::-1]"}], "4sum": [{"task_id": "4sum", "completion": "class Solution(object):\n    def fourSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        for i in range(len(nums)-3):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            if nums[i] + nums[i+1] + nums[i+2] + nums[i+3] > target:\n                break\n            if nums[i] + nums[len(nums)-1] + nums[len(nums)-2] + nums[len(nums)-3] < target:\n                continue\n            left = i+1\n            right = len(nums)-1\n            while left < right:\n                if nums[i] + nums[left] + nums[right] + nums[right-1] < target:\n                    left += 1\n                elif nums[i] + nums[left] + nums[right] + nums[right-1] > target:\n                    right -= 1\n                else:\n                    res.append([nums[i], nums[left], nums[right], nums[right-1]])\n                    left += 1\n                    right -= 1\n                    while left < right and nums[left] == nums[left-1]:\n                        left += 1\n                    while left < right and nums[right] == nums[right+1]:\n                        right -= 1\n        return res"}], "the-skyline-problem": [{"task_id": "the-skyline-problem", "completion": "class Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # sort buildings by left\n        buildings.sort(key=lambda x: x[0])\n\n        # initialize result\n        result = [[0, 0]]\n\n        # iterate through buildings\n        for building in buildings:\n            # if building is ending, remove it from result\n            if building[1] < 0:\n                result.remove([building[1], -building[2]])\n            # if building is starting, add it to result\n            else:\n                result.append([building[0], building[2]])\n\n        # sort result by x\n        result.sort(key=lambda x: x[0])\n\n        # initialize max_height\n        max_height = 0\n\n        # initialize result\n        res = []\n\n        # iterate through result\n        for i in range(len(result)):\n            # if max_height is greater than current building height, add it to result\n            if max_height < result[i][1]:\n                res.append([result[i][0], result[i][1]])\n                max_height = result[i][1]\n            # if max_height is equal to current building height, add it to result\n            elif max_height == result[i][1]:\n                res.append([result[i][0], max_height])\n\n        # return result\n        return res"}], "reverse-string": [{"task_id": "reverse-string", "completion": "class Solution(object):\n    def reverseString(self, s):\n        \"\"\"\n        :type s: List[str]\n        :rtype: None Do not return anything, modify s in-place instead.\n        \"\"\"\n        \n        left = 0\n        right = len(s) - 1\n        \n        while left < right:\n            s[left], s[right] = s[right], s[left]\n            left += 1\n            right -= 1\n        \n        return s"}], "reverse-linked-list": [{"task_id": "reverse-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        prev = None\n        curr = head\n        \n        while curr:\n            temp = curr.next\n            curr.next = prev\n            prev = curr\n            curr = temp\n            \n        return prev"}], "triangle": [{"task_id": "triangle", "completion": "class Solution(object):\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not triangle:\n            return 0\n        \n        dp = triangle[-1]\n        \n        for i in range(len(triangle)-2,-1,-1):\n            for j in range(len(triangle[i])):\n                dp[j] = triangle[i][j] + min(dp[j],dp[j+1])\n        \n        return dp[0]"}], "integer-to-english-words": [{"task_id": "integer-to-english-words", "completion": "class Solution(object):\n    def numberToWords(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"Zero\"\n        \n        ones = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n        tens = [\"\", \"Ten\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"]\n        teens = [\"\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"]\n        \n        def helper(num):\n            if num == 0:\n                return \"\"\n            if num < 10:\n                return ones[num]\n            if num < 20:\n                return teens[num % 10]\n            if num < 100:\n                return tens[num // 10] + \" \" + helper(num % 10)\n            if num < 1000:\n                return ones[num // 100] + \" Hundred \" + helper(num % 100)\n            if num < 1000000:\n                return helper(num // 1000) + \" Thousand \" + helper(num % 1000)\n            if num < 1000000000:\n                return helper(num // 1000000) + \" Million \" + helper(num % 1000000)\n            return helper(num // 1000000000) + \" Billion \" + helper(num % 1000000000)\n        \n        return helper(num).strip()"}], "k-inverse-pairs-array": [{"task_id": "k-inverse-pairs-array", "completion": "class Solution(object):\n    def kInversePairs(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        mod = 10**9 + 7\n        dp = [[0] * (k+1) for _ in range(n+1)]\n        dp[0][0] = 1\n        for i in range(1, n+1):\n            for j in range(min(k, i*(i-1)//2), -1, -1):\n                dp[i][j] = (dp[i][j+1] + dp[i-1][j]) % mod\n        return dp[n][k]"}], "swap-nodes-in-pairs": [{"task_id": "swap-nodes-in-pairs", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        dummy = ListNode(0, head)\n        prev = dummy\n        \n        while prev.next and prev.next.next:\n            first = prev.next\n            second = prev.next.next\n            \n            prev.next = second\n            first.next = second.next\n            second.next = first\n            \n            prev = first\n            \n        return dummy.next"}], "path-sum": [{"task_id": "path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def hasPathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: bool\n        \"\"\"\n        \n        if not root:\n            return False\n        \n        if not root.left and not root.right:\n            return targetSum == root.val\n        \n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)"}], "partition-list": [{"task_id": "partition-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def partition(self, head, x):\n        \"\"\"\n        :type head: ListNode\n        :type x: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # create two dummy nodes\n        dummy1 = ListNode(0)\n        dummy2 = ListNode(0)\n        \n        # create two pointers\n        curr1 = dummy1\n        curr2 = dummy2\n        \n        # traverse the linked list\n        curr = head\n        \n        while curr:\n            # if the current node is less than x, add it to the first list\n            if curr.val < x:\n                curr1.next = curr\n                curr1 = curr1.next\n            else:\n                curr2.next = curr\n                curr2 = curr2.next\n            curr = curr.next\n        \n        # connect the two lists\n        curr1.next = dummy2.next\n        curr2.next = None\n        \n        return dummy1.next"}], "redundant-connection-ii": [{"task_id": "redundant-connection-ii", "completion": "class Solution(object):\n    def findRedundantDirectedConnection(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # edge 1: (u,v)\n        # edge 2: (u,w)\n        # edge 3: (v,w)\n        # edge 4: (w,u)\n        # edge 5: (w,v)\n        # edge 6: (v,u)\n        # edge 7: (u,v)\n        # edge 8: (u,w)\n        # edge 9: (v,w)\n        # edge 10: (w,u)\n        # edge 11: (w,v)\n        # edge 12: (v,u)\n        # edge 13: (u,v)\n        # edge 14: (u,w)\n        # edge 15: (v,w)\n        # edge 16: (w,u)\n        # edge 17: (w,v)\n        # edge 18: (v,u)\n        # edge 19: (u,v)\n        # edge 20: (u,w)\n        # edge 21: (v,w)\n        # edge 22: (w,u)\n        # edge 23: (w,v)\n        # edge 24: (v,u)\n        # edge 25: (u,v)\n        # edge 26: (u,w)\n        # edge 27: (v,w)\n        # edge 28: (w,u)\n        # edge 29: (w,v)\n        # edge 30: (v,u)\n        # edge 31: (u,v)\n        # edge 32: (u,w)\n        # edge 33: (v,w)\n        # edge 34: (w,u)\n        # edge 35: (w,v)\n        # edge 36: (v,u)\n        # edge 37: (u,v)\n        # edge 38: (u,w)\n        # edge 39: (v,w)\n        # edge 40: (w,u)\n        # edge 41: (w,v)\n        # edge 42: (v,u)\n        # edge 43: (u,v)\n        # edge 44: (u,w)\n        # edge 45: (v,w)\n        # edge 46: (w,u)\n        # edge 47: (w,v)\n        # edge 48: (v,u)\n        # edge 49: (u,v)\n        # edge 50: (u,w)\n        # edge 51: (v,w)\n        # edge 52: (w,u)\n        # edge 53: (w,v)\n        # edge 54: (v,u)\n        # edge 55: (u,v)\n        # edge 56: (u,w)\n        # edge 57: (v,w)\n        # edge 58: (w,u)\n        # edge 59: (w,v)\n        # edge 60: (v,u)\n        # edge 61: (u,v)\n        # edge 62: (u,w)\n        # edge 63: (v,w)\n        # edge 64: (w,u)\n        # edge 65: (w,v)\n        # edge 66: (v,u)\n        # edge 67: (u,v)\n        # edge 68: (u,w)\n        # edge 69: (v,w)\n        # edge 70: (w,u)\n        # edge 71: (w,v)\n        # edge 72: (v,u)\n        # edge 73: (u,v)\n        # edge 74: (u,w)\n        # edge 75: (v,w)\n        # edge 76: (w,u)\n        # edge 77: (w,v)\n        # edge 78: (v,u)\n        # edge 79: (u,v)\n        # edge 80"}], "permutations-ii": [{"task_id": "permutations-ii", "completion": "class Solution(object):\n    def permuteUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        visited = [False] * len(nums)\n        self.backtrack(nums, visited, [], res)\n        return res\n        \n    def backtrack(self, nums, visited, path, res):\n        if len(path) == len(nums):\n            res.append(path[:])\n            return\n        \n        for i in range(len(nums)):\n            if visited[i] or (i > 0 and nums[i] == nums[i-1] and not visited[i-1]):\n                continue\n            visited[i] = True\n            path.append(nums[i])\n            self.backtrack(nums, visited, path, res)\n            visited[i] = False\n            path.pop()"}], "add-digits": [{"task_id": "add-digits", "completion": "class Solution(object):\n    def addDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        if num == 0:\n            return 0\n        \n        if num % 9 == 0:\n            return 9\n        else:\n            return num % 9"}], "single-number": [{"task_id": "single-number", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # XOR of a number with itself is 0\n        # XOR of a number with 0 is the number\n        # so XOR all the numbers in the array\n        # and the answer will be the number that does not repeat\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        ans = 0\n        for num in nums:\n            ans = ans ^ num\n        \n        return ans"}], "length-of-last-word": [{"task_id": "length-of-last-word", "completion": "class Solution(object):\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Split the string into words\n        words = s.split()\n        \n        # Return the length of the last word\n        return len(words[-1])"}], "cherry-pickup": [{"task_id": "cherry-pickup", "completion": "class Solution(object):\n    def cherryPickup(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        dp = [[[0] * n for _ in range(n)] for _ in range(n)]\n        dp[0][0] = grid[0][0]\n        for i in range(1, n):\n            dp[i][0] = dp[i - 1][0] + grid[i][0]\n        for i in range(1, n):\n            dp[0][i] = dp[0][i - 1] + grid[0][i]\n        for i in range(1, n):\n            for j in range(1, n):\n                dp[i][j] = grid[i][j] + dp[i - 1][j] + dp[i][j - 1] - dp[i - 1][j - 1]\n                if i + j != n - 1:\n                    dp[i][j] = max(dp[i][j], dp[i][j - 1])\n                    dp[i][j] = max(dp[i][j], dp[i - 1][j])\n                if i + j != n - 1:\n                    dp[i][j] = max(dp[i][j], dp[i][j - 1])\n                    dp[i][j] = max(dp[i][j], dp[i - 1][j])\n                if i + j != n - 1:\n                    dp[i][j] = max(dp[i][j], dp[i][j - 1])\n                    dp[i][j] = max(dp[i][j], dp[i - 1][j])\n                if i + j != n - 1:\n                    dp[i][j] = max(dp[i][j], dp[i][j - 1])\n                    dp[i][j] = max(dp[i][j], dp[i - 1][j])\n                if i + j != n - 1:\n                    dp[i][j] = max(dp[i][j], dp[i][j - 1])\n                    dp[i][j] = max(dp[i][j], dp[i - 1][j])\n                if i + j != n - 1:\n                    dp[i][j] = max(dp[i][j], dp[i][j - 1])\n                    dp[i][j] = max(dp[i][j], dp[i - 1][j])\n                if i + j != n - 1:\n                    dp[i][j] = max(dp[i][j], dp[i][j - 1])\n                    dp[i][j] = max(dp[i][j], dp[i - 1][j])\n                if i + j != n - 1:\n                    dp[i][j] = max(dp[i][j], dp[i][j - 1])\n                    dp[i][j] = max(dp[i][j], dp[i - 1][j])\n                if i + j != n - 1:\n                    dp[i][j] = max(dp[i][j], dp[i][j - 1])\n                    dp[i][j] = max(dp[i][j], dp[i - 1][j])\n                if i + j != n - 1:\n                    dp[i][j] = max(dp[i][j], dp[i][j - 1])\n                    dp[i][j] = max(dp[i][j], dp[i - 1][j])\n                if i + j != n - 1:\n                    dp[i][j] = max(dp[i][j], dp[i][j - 1])\n                    dp[i][j] = max(dp[i][j], dp[i - 1][j])\n                if i + j != n - 1:\n                    dp[i][j] = max(dp[i][j], dp[i][j - 1])\n                    dp[i][j] = max(dp[i][j], dp[i - 1]["}], "student-attendance-record-ii": [{"task_id": "student-attendance-record-ii", "completion": "class Solution(object):\n    def checkRecord(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        mod = 10**9 + 7\n        dp = [1, 2, 4]\n        if n < 3:\n            return dp[n]\n        \n        for i in range(3, n+1):\n            dp.append((dp[i-1] + dp[i-2] + dp[i-3]) % mod)\n        \n        return dp[n]"}], "happy-number": [{"task_id": "happy-number", "completion": "class Solution(object):\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        slow = n\n        fast = n\n        \n        while True:\n            slow = sum(int(i)**2 for i in str(slow))\n            fast = sum(int(i)**2 for i in str(fast))\n            fast = sum(int(i)**2 for i in str(fast))\n            if slow == 1:\n                return True\n            if slow == fast:\n                return False"}], "search-insert-position": [{"task_id": "search-insert-position", "completion": "class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        low = 0\n        high = len(nums)-1\n        \n        while low <= high:\n            mid = (low + high)//2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                low = mid + 1\n            else:\n                high = mid - 1\n        \n        return low"}], "jump-game": [{"task_id": "jump-game", "completion": "class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        last_pos = len(nums) - 1\n        for i in range(len(nums)-1,-1,-1):\n            if i + nums[i] >= last_pos:\n                last_pos = i\n        return last_pos == 0"}], "minimum-path-sum": [{"task_id": "minimum-path-sum", "completion": "class Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(grid)\n        n = len(grid[0])\n        \n        for i in range(1,m):\n            grid[i][0] += grid[i-1][0]\n        \n        for j in range(1,n):\n            grid[0][j] += grid[0][j-1]\n        \n        for i in range(1,m):\n            for j in range(1,n):\n                grid[i][j] += min(grid[i-1][j],grid[i][j-1])\n        \n        return grid[-1][-1]"}], "count-and-say": [{"task_id": "count-and-say", "completion": "class Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        \n        if n == 1:\n            return \"1\"\n        \n        res = \"1\"\n        curr = res\n        count = 1\n        \n        for i in range(2, n+1):\n            curr = \"\"\n            count = 1\n            for j in range(1, len(res)):\n                if res[j] == res[j-1]:\n                    count += 1\n                else:\n                    curr += str(count) + res[j-1]\n                    count = 1\n            curr += str(count) + res[-1]\n            res = curr\n        \n        return res"}], "split-array-largest-sum": [{"task_id": "split-array-largest-sum", "completion": "class Solution(object):\n    def splitArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # binary search on the range of the possible answer\n        # we want to find the largest sum of the subarray\n        # so we can use binary search to find the largest sum\n        # of the subarray\n        # we can use binary search to find the largest sum\n        # of the subarray\n        # we can use binary search to find the largest sum\n        # of the subarray\n        # we can use binary search to find the largest sum\n        # of the subarray\n        # we can use binary search to find the largest sum\n        # of the subarray\n        # we can use binary search to find the largest sum\n        # of the subarray\n        # we can use binary search to find the largest sum\n        # of the subarray\n        # we can use binary search to find the largest sum\n        # of the subarray\n        # we can use binary search to find the largest sum\n        # of the subarray\n        # we can use binary search to find the largest sum\n        # of the subarray\n        # we can use binary search to find the largest sum\n        # of the subarray\n        # we can use binary search to find the largest sum\n        # of the subarray\n        # we can use binary search to find the largest sum\n        # of the subarray\n        # we can use binary search to find the largest sum\n        # of the subarray\n        # we can use binary search to find the largest sum\n        # of the subarray\n        # we can use binary search to find the largest sum\n        # of the subarray\n        # we can use binary search to find the largest sum\n        # of the subarray\n        # we can use binary search to find the largest sum\n        # of the subarray\n        # we can use binary search to find the largest sum\n        # of the subarray\n        # we can use binary search to find the largest sum\n        # of the subarray\n        # we can use binary search to find the largest sum\n        # of the subarray\n        # we can use binary search to find the largest sum\n        # of the subarray\n        # we can use binary search to find the largest sum\n        # of the subarray\n        # we can use binary search to find the largest sum\n        # of the subarray\n        # we can use binary search to find the largest sum\n        # of the subarray\n        # we can use binary search to find the largest sum\n        # of the subarray\n        # we can use binary search to find the largest sum\n        # of the subarray\n        # we can use binary search to find the largest sum\n        # of the subarray\n        # we can use binary search to find the largest sum\n        # of the subarray\n        # we can use binary search to find the largest sum\n        # of the subarray\n        # we can use binary search to find the largest sum\n        # of the subarray\n        # we can use binary search to find the largest sum\n        # of the subarray\n        # we can use binary search to find the largest sum\n        # of the subarray\n        # we can use binary search to find the largest sum\n        # of the subarray\n        # we can use binary search to find the largest sum\n        # of the subarray\n        # we can use binary search to find the largest sum\n        # of the subarray\n        # we can use binary search to find the largest sum\n        # of the subarray\n        # we can use binary search to find the largest sum\n        # of the subarray\n        # we can use binary search to find the largest sum\n        # of the subarray\n        # we can use binary search to find the largest sum\n        # of the subarray\n        # we can use binary search to find the largest sum\n        # of the subarray\n        # we can use binary search to find the largest sum\n        # of the subarray\n        # we can use binary search to find the largest sum\n        # of the subarray\n        # we can use binary search to find the largest sum\n        # of the subarray\n        # we can use binary search to find the largest sum\n        # of the subarray\n        # we can use binary search to find the largest sum\n        # of the subarray\n        # we can use binary search to find the largest sum\n        # of the subarray\n        # we can use binary search to find the largest sum\n        # of the subarray\n        # we can use binary search to find the largest sum\n        # of the subarray\n        # we can use binary search to find the largest sum\n        # of the"}], "search-in-rotated-sorted-array": [{"task_id": "search-in-rotated-sorted-array", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            \n            if nums[mid] == target:\n                return mid\n            \n            if nums[mid] < nums[right]:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n            else:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n        \n        return -1"}], "letter-combinations-of-a-phone-number": [{"task_id": "letter-combinations-of-a-phone-number", "completion": "class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        \n        if not digits:\n            return []\n        \n        phone = {\n            '2': 'abc',\n            '3': 'def',\n            '4': 'ghi',\n            '5': 'jkl',\n            '6': 'mno',\n            '7': 'pqrs',\n            '8': 'tuv',\n            '9': 'wxyz'\n        }\n        \n        res = [phone[digits[0]]]\n        \n        for i in range(1, len(digits)):\n            res = [x + y for x in res for y in phone[digits[i]]]\n        \n        return res"}], "combination-sum": [{"task_id": "combination-sum", "completion": "class Solution(object):\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        res = []\n        self.dfs(candidates, target, 0, [], res)\n        return res\n        \n    def dfs(self, candidates, target, start, path, res):\n        if target == 0:\n            res.append(path[:])\n            return\n        for i in range(start, len(candidates)):\n            if target - candidates[i] < 0:\n                break\n            self.dfs(candidates, target - candidates[i], i, path + [candidates[i]], res)"}], "find-the-closest-palindrome": [{"task_id": "find-the-closest-palindrome", "completion": "class Solution(object):\n    def nearestPalindromic(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\"\n        \n        if n[0] == '9':\n            return str(int(n) + 1)\n        \n        if n[0] == '1':\n            if len(n) == 1:\n                return '9'\n            else:\n                return str(int(n) - 1)\n        \n        if n[-1] == '9':\n            return str(int(n[:-1]) + 1)\n        \n        if n[-1] == '1':\n            return str(int(n[:-1]) - 1)\n        \n        if n[-1] != '0':\n            return str(int(n[:-1]) + 1)\n        \n        if len(n) % 2 == 0:\n            return str(int(n[:-1]) - 1)\n        \n        return str(int(n[:-1]) + 1)"}], "spiral-matrix-ii": [{"task_id": "spiral-matrix-ii", "completion": "class Solution(object):\n    def generateMatrix(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        matrix = [[0]*n for _ in range(n)]\n        top, bottom, left, right = 0, n-1, 0, n-1\n        num = 1\n        \n        while top <= bottom and left <= right:\n            for i in range(left, right+1):\n                matrix[top][i] = num\n                num += 1\n            top += 1\n            \n            for i in range(top, bottom+1):\n                matrix[i][right] = num\n                num += 1\n            right -= 1\n            \n            if top <= bottom:\n                for i in range(right, left-1, -1):\n                    matrix[bottom][i] = num\n                    num += 1\n                bottom -= 1\n            \n            if left <= right:\n                for i in range(bottom, top-1, -1):\n                    matrix[i][left] = num\n                    num += 1\n                left += 1\n        \n        return matrix"}], "reverse-integer": [{"task_id": "reverse-integer", "completion": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x < 0:\n            sign = -1\n        else:\n            sign = 1\n        \n        x = abs(x)\n        rev = 0\n        while x > 0:\n            rev = rev * 10 + x % 10\n            x = x // 10\n        \n        if rev > 2**31 - 1:\n            return 0\n        else:\n            return rev * sign"}], "rotate-image": [{"task_id": "rotate-image", "completion": "class Solution(object):\n    def rotate(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        n = len(matrix)\n        for i in range(n//2):\n            for j in range(i, n-i-1):\n                temp = matrix[i][j]\n                matrix[i][j] = matrix[n-j-1][i]\n                matrix[n-j-1][i] = matrix[n-i-1][n-j-1]\n                matrix[n-i-1][n-j-1] = matrix[j][n-i-1]\n                matrix[j][n-i-1] = temp\n        \n        return matrix"}], "maximum-product-subarray": [{"task_id": "maximum-product-subarray", "completion": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_prod = nums[0]\n        min_prod = nums[0]\n        res = max_prod\n        \n        for i in range(1, len(nums)):\n            temp = max_prod\n            max_prod = max(nums[i], nums[i] * max_prod, nums[i] * min_prod)\n            min_prod = min(nums[i], nums[i] * temp, nums[i] * min_prod)\n            res = max(max_prod, res)\n        \n        return res"}], "frog-jump": [{"task_id": "frog-jump", "completion": "class Solution(object):\n    def canCross(self, stones):\n        \"\"\"\n        :type stones: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        stone_set = set(stones)\n        stone_map = {stone:set() for stone in stone_set}\n        stone_map[stones[0]].add(1)\n        \n        for stone in stones[1:]:\n            for jump in stone_map[stone]:\n                if stone + jump in stone_set:\n                    stone_map[stone + jump].add(jump + 1)\n                    stone_map[stone + jump].add(jump)\n                    stone_map[stone + jump].add(jump - 1)\n        \n        return stone_map[stones[-1]] != set()"}], "relative-ranks": [{"task_id": "relative-ranks", "completion": "class Solution(object):\n    def findRelativeRanks(self, score):\n        \"\"\"\n        :type score: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        sorted_score = sorted(score, reverse=True)\n        rank_map = {}\n        for i, s in enumerate(sorted_score):\n            rank_map[s] = i + 1\n        \n        return [ \"Gold Medal\" if rank == 1 else \"Silver Medal\" if rank == 2 else \"Bronze Medal\" if rank == 3 else str(rank) for rank in rank_map.values()]"}], "longest-substring-without-repeating-characters": [{"task_id": "longest-substring-without-repeating-characters", "completion": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if len(s) == 0:\n            return 0\n        \n        max_len = 1\n        start = 0\n        seen = {}\n        \n        for i in range(len(s)):\n            if s[i] in seen:\n                start = max(start, seen[s[i]] + 1)\n            seen[s[i]] = i\n            max_len = max(max_len, i - start + 1)\n        \n        return max_len"}], "substring-with-concatenation-of-all-words": [{"task_id": "substring-with-concatenation-of-all-words", "completion": "class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(words) == 0:\n            return []\n        \n        word_len = len(words[0])\n        word_dict = {}\n        for word in words:\n            if word in word_dict:\n                word_dict[word] += 1\n            else:\n                word_dict[word] = 1\n        \n        word_count = len(word_dict)\n        word_count_len = word_len * word_count\n        word_count_len_s = len(s) - word_count_len + 1\n        \n        start = 0\n        end = word_count_len_s - 1\n        res = []\n        while end < len(s):\n            sub_str = s[start:end+1]\n            sub_str_dict = {}\n            for i in range(start, end+1, word_len):\n                if sub_str[i:i+word_len] in word_dict:\n                    if sub_str[i:i+word_len] in sub_str_dict:\n                        sub_str_dict[sub_str[i:i+word_len]] += 1\n                    else:\n                        sub_str_dict[sub_str[i:i+word_len]] = 1\n            \n            if sub_str_dict == word_dict:\n                res.append(start)\n            \n            start += 1\n            end += 1\n        \n        return res"}], "max-chunks-to-make-sorted-ii": [{"task_id": "max-chunks-to-make-sorted-ii", "completion": "class Solution(object):\n    def maxChunksToSorted(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_val = arr[0]\n        chunks = 1\n        \n        for i in range(1, len(arr)):\n            if arr[i] > max_val:\n                max_val = arr[i]\n            if max_val == i:\n                chunks += 1\n        \n        return chunks"}], "insertion-sort-list": [{"task_id": "insertion-sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def insertionSortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        curr = head.next\n        \n        while curr:\n            if curr.val < dummy.next.val:\n                dummy.next = curr\n                curr = curr.next\n            else:\n                prev = dummy\n                while prev.next and prev.next.val < curr.val:\n                    prev = prev.next\n                curr.next = prev.next\n                prev.next = curr\n            curr = curr.next\n        \n        return dummy.next"}], "remove-duplicates-from-sorted-list-ii": [{"task_id": "remove-duplicates-from-sorted-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        dummy = ListNode(0, head)\n        prev = dummy\n        curr = head\n        \n        while curr:\n            if curr.next and curr.val == curr.next.val:\n                while curr.next and curr.val == curr.next.val:\n                    curr = curr.next\n                prev.next = curr.next\n            else:\n                prev = curr\n            curr = curr.next\n        \n        return dummy.next"}], "3sum": [{"task_id": "3sum", "completion": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        for i in range(len(nums)-2):\n            if nums[i] > 0:\n                break\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            l = i+1\n            r = len(nums)-1\n            while l < r:\n                if nums[i] + nums[l] + nums[r] == 0:\n                    res.append([nums[i], nums[l], nums[r]])\n                    l += 1\n                    r -= 1\n                    while l < r and nums[l] == nums[l-1]:\n                        l += 1\n                    while l < r and nums[r] == nums[r+1]:\n                        r -= 1\n                elif nums[i] + nums[l] + nums[r] < 0:\n                    l += 1\n                else:\n                    r -= 1\n        return res"}], "edit-distance": [{"task_id": "edit-distance", "completion": "class Solution(object):\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        \n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 if word1[i] != word2[j]\n        # dp[i][j] = dp[i-1][j-1] if word1[i] == word2[j]\n        # dp[0][j] = j\n        # dp[i][0] = i\n        # return dp[-1][-1]\n        \n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 if word1[i] != word2[j]\n        # dp[i][j] = dp[i-1][j-1] if word1[i] == word2[j]\n        # dp[0][j] = j\n        # dp[i][0] = i\n        # return dp[-1][-1]\n        \n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 if word1[i] != word2[j]\n        # dp[i][j] = dp[i-1][j-1] if word1[i] == word2[j]\n        # dp[0][j] = j\n        # dp[i][0] = i\n        # return dp[-1][-1]\n        \n        m, n = len(word1), len(word2)\n        if m < n:\n            return self.minDistance(word2, word1)\n        \n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            dp[i][0] = i\n        for j in range(1, n + 1):\n            dp[0][j] = j\n        \n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if word1[i - 1] == word2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1\n        \n        return dp[-1][-1]"}], "hamming-distance": [{"task_id": "hamming-distance", "completion": "class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        \n        xor = x ^ y\n        count = 0\n        while xor:\n            count += 1\n            xor = xor & (xor - 1)\n        return count"}], "binary-tree-paths": [{"task_id": "binary-tree-paths", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        if not root.left and not root.right:\n            return [str(root.val)]\n        \n        left = self.binaryTreePaths(root.left)\n        right = self.binaryTreePaths(root.right)\n        \n        return [str(root.val) + '->' + path for path in left + right]"}], "reverse-pairs": [{"task_id": "reverse-pairs", "completion": "class Solution(object):\n    def reversePairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        def merge(nums, left, mid, right):\n            count = 0\n            j = mid + 1\n            for i in range(left, mid + 1):\n                while j <= right and nums[i] > 2 * nums[j]:\n                    j += 1\n                count += j - (mid + 1)\n            i = left\n            j = mid + 1\n            temp = []\n            while i <= mid and j <= right:\n                if nums[i] <= nums[j]:\n                    temp.append(nums[i])\n                    i += 1\n                else:\n                    temp.append(nums[j])\n                    j += 1\n            temp += nums[i:mid + 1] + nums[j:right + 1]\n            nums[left:right + 1] = temp\n            return count\n        \n        return merge(nums, 0, len(nums) - 1, len(nums) - 1)"}], "reaching-points": [{"task_id": "reaching-points", "completion": "class Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        \n        while tx >= sx and ty >= sy:\n            if tx == sx and ty == sy:\n                return True\n            if tx > ty:\n                tx %= ty\n            else:\n                ty %= tx\n        return tx == sx and ty == sy"}], "compare-version-numbers": [{"task_id": "compare-version-numbers", "completion": "class Solution(object):\n    def compareVersion(self, version1, version2):\n        \"\"\"\n        :type version1: str\n        :type version2: str\n        :rtype: int\n        \"\"\"\n        \n        v1 = version1.split('.')\n        v2 = version2.split('.')\n        \n        for i in range(max(len(v1), len(v2))):\n            v1_i = int(v1[i]) if i < len(v1) else 0\n            v2_i = int(v2[i]) if i < len(v2) else 0\n            if v1_i > v2_i:\n                return 1\n            elif v1_i < v2_i:\n                return -1\n        \n        return 0"}], "best-time-to-buy-and-sell-stock-ii": [{"task_id": "best-time-to-buy-and-sell-stock-ii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_profit = 0\n        min_price = float('inf')\n        \n        for price in prices:\n            min_price = min(min_price, price)\n            max_profit = max(max_profit, price - min_price)\n            \n        return max_profit"}], "course-schedule-iii": [{"task_id": "course-schedule-iii", "completion": "class Solution(object):\n    def scheduleCourse(self, courses):\n        \"\"\"\n        :type courses: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # sort by duration\n        courses.sort(key=lambda x: x[1])\n        # priority queue\n        pq = []\n        # total duration\n        total = 0\n        # iterate over courses\n        for duration, end in courses:\n            # add course to priority queue\n            heapq.heappush(pq, (-duration, end))\n            # update total duration\n            total += duration\n            # if total duration exceeds end time of last course\n            if total > end:\n                # remove course from priority queue\n                total += heapq.heappop(pq)[0]\n        # return length of priority queue\n        return len(pq)"}], "reverse-nodes-in-k-group": [{"task_id": "reverse-nodes-in-k-group", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseKGroup(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or k == 1:\n            return head\n        \n        dummy = ListNode(0, head)\n        prev = dummy\n        curr = head\n        count = 0\n        \n        while curr:\n            count += 1\n            if count % k == 0:\n                prev = self.reverse(prev, curr)\n                curr = prev.next\n            else:\n                curr = curr.next\n        \n        return dummy.next\n        \n    def reverse(self, prev, end):\n        curr = prev.next\n        prev.next = None\n        while curr != end:\n            nxt = curr.next\n            curr.next = prev.next\n            prev.next = curr\n            curr = nxt\n        return prev"}], "repeated-substring-pattern": [{"task_id": "repeated-substring-pattern", "completion": "class Solution(object):\n    def repeatedSubstringPattern(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) < 2:\n            return False\n        \n        n = len(s)\n        for i in range(n//2):\n            if n % (i+1) == 0:\n                if s[:i+1] * (n//(i+1)) == s:\n                    return True\n        return False"}], "unique-binary-search-trees": [{"task_id": "unique-binary-search-trees", "completion": "class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        dp = [0] * (n+1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, n+1):\n            for j in range(1, i+1):\n                dp[i] += dp[j-1] * dp[i-j]\n        \n        return dp[n]"}], "single-number-ii": [{"task_id": "single-number-ii", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # XOR of a number with itself is 0\n        # XOR of a number with 0 is the number\n        # XOR of two same numbers is 0\n        # XOR of a number with a number with itself is 0\n        # XOR of a number with 0 is the number\n        # XOR of two different numbers is the number\n        # XOR of a number with a number with itself is 0\n        # XOR of a number with 0 is the number\n        # XOR of two different numbers is the number\n        # XOR of a number with a number with itself is 0\n        # XOR of a number with 0 is the number\n        # XOR of two different numbers is the number\n        # XOR of a number with a number with itself is 0\n        # XOR of a number with 0 is the number\n        # XOR of two different numbers is the number\n        # XOR of a number with a number with itself is 0\n        # XOR of a number with 0 is the number\n        # XOR of two different numbers is the number\n        # XOR of a number with a number with itself is 0\n        # XOR of a number with 0 is the number\n        # XOR of two different numbers is the number\n        # XOR of a number with a number with itself is 0\n        # XOR of a number with 0 is the number\n        # XOR of two different numbers is the number\n        # XOR of a number with a number with itself is 0\n        # XOR of a number with 0 is the number\n        # XOR of two different numbers is the number\n        # XOR of a number with a number with itself is 0\n        # XOR of a number with 0 is the number\n        # XOR of two different numbers is the number\n        # XOR of a number with a number with itself is 0\n        # XOR of a number with 0 is the number\n        # XOR of two different numbers is the number\n        # XOR of a number with a number with itself is 0\n        # XOR of a number with 0 is the number\n        # XOR of two different numbers is the number\n        # XOR of a number with a number with itself is 0\n        # XOR of a number with 0 is the number\n        # XOR of two different numbers is the number\n        # XOR of a number with a number with itself is 0\n        # XOR of a number with 0 is the number\n        # XOR of two different numbers is the number\n        # XOR of a number with a number with itself is 0\n        # XOR of a number with 0 is the number\n        # XOR of two different numbers is the number\n        # XOR of a number with a number with itself is 0\n        # XOR of a number with 0 is the number\n        # XOR of two different numbers is the number\n        # XOR of a number with a number with itself is 0\n        # XOR of a number with 0 is the number\n        # XOR of two different numbers is the number\n        # XOR of a number with a number with itself is 0\n        # XOR of a number with 0 is the number\n        # XOR of two different numbers is the number\n        # XOR of a number with a number with itself is 0\n        # XOR of a number with 0 is the number\n        # XOR of two different numbers is the number\n        # XOR of a number with a number with itself is 0\n        # XOR of a number with 0 is the number\n        # XOR of two different numbers is the number\n        # XOR of a number with a number with itself is 0\n        # XOR of a number with 0 is the number\n        # XOR of two different numbers is the number\n        # XOR of a number with a number with itself is 0\n        # XOR of a number with 0 is the number\n        # XOR of two different numbers is the number\n        # XOR of a number with a number with itself is 0\n        # XOR of a number with 0 is the number\n        # XOR of two different numbers is the number\n        # XOR of a number with a number with itself is 0\n        # XOR of a number with 0 is the number\n        # XOR of two different numbers is the number\n        # XOR of a number with a number with itself is 0\n        # X"}], "stickers-to-spell-word": [{"task_id": "stickers-to-spell-word", "completion": "class Solution(object):\n    def minStickers(self, stickers, target):\n        \"\"\"\n        :type stickers: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\"\n        \n        stickers = [sorted(s) for s in stickers]\n        stickers.sort(key=len)\n        target = sorted(target)\n        sticker_map = {s: stickers.count(s) for s in set(stickers)}\n        sticker_map[None] = 0\n        sticker_map[tuple(target)] = 0\n        sticker_map[tuple(target)] = self.minStickers(stickers, tuple(target))\n        return sticker_map[tuple(target)]"}], "strange-printer": [{"task_id": "strange-printer", "completion": "class Solution(object):\n    def strangePrinter(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        n = len(s)\n        dp = [[0] * n for _ in range(n)]\n        dp[0][0] = 1\n        \n        for i in range(1, n):\n            dp[i][i] = 1\n            dp[i][0] = 1\n            \n            if s[i] == s[i - 1]:\n                dp[i][i - 1] = 1\n            \n        for i in range(1, n):\n            for j in range(i - 1, -1, -1):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i - 1][j] + 1\n        \n        return dp[n - 1][0]"}], "sqrtx": [{"task_id": "sqrtx", "completion": "class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        \n        left = 1\n        right = x\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            if mid * mid == x:\n                return mid\n            elif mid * mid < x:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return right"}], "roman-to-integer": [{"task_id": "roman-to-integer", "completion": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        roman_dict = {\n            'I': 1,\n            'V': 5,\n            'X': 10,\n            'L': 50,\n            'C': 100,\n            'D': 500,\n            'M': 1000\n        }\n        \n        total = 0\n        i = 0\n        \n        while i < len(s):\n            if i + 1 < len(s) and roman_dict[s[i]] < roman_dict[s[i+1]]:\n                total += roman_dict[s[i+1]] - roman_dict[s[i]]\n                i += 2\n            else:\n                total += roman_dict[s[i]]\n                i += 1\n                \n        return total"}], "contains-duplicate": [{"task_id": "contains-duplicate", "completion": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        return len(set(nums)) != len(nums)"}], "sliding-window-maximum": [{"task_id": "sliding-window-maximum", "completion": "class Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # if k == 1:\n        #     return nums\n        \n        # max_num = max(nums[0:k])\n        # res = [max_num]\n        # for i in range(k, len(nums)):\n        #     if nums[i] > max_num:\n        #         max_num = nums[i]\n        #     if nums[i-k] == max_num:\n        #         max_num = max(nums[i-k+1:i+1])\n        #     res.append(max_num)\n        # return res\n        \n        # using deque\n        dq = deque()\n        res = []\n        for i in range(len(nums)):\n            if dq and dq[0] == i-k:\n                dq.popleft()\n            while dq and nums[dq[-1]] < nums[i]:\n                dq.pop()\n            dq.append(i)\n            if i >= k-1:\n                res.append(nums[dq[0]])\n        return res"}], "median-of-two-sorted-arrays": [{"task_id": "median-of-two-sorted-arrays", "completion": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        \n        nums1.extend(nums2)\n        nums1.sort()\n        if len(nums1) % 2 == 0:\n            return (nums1[len(nums1)//2] + nums1[len(nums1)//2 - 1]) / 2\n        else:\n            return nums1[len(nums1)//2]"}], "find-minimum-in-rotated-sorted-array": [{"task_id": "find-minimum-in-rotated-sorted-array", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left < right:\n            mid = left + (right - left) // 2\n            \n            if nums[mid] > nums[right]:\n                left = mid + 1\n            else:\n                right = mid\n                \n        return nums[left]"}], "pascals-triangle-ii": [{"task_id": "pascals-triangle-ii", "completion": "class Solution(object):\n    def getRow(self, rowIndex):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if rowIndex == 0:\n            return [1]\n        \n        if rowIndex == 1:\n            return [1,1]\n        \n        prev = [1,1]\n        \n        for i in range(2, rowIndex+1):\n            curr = [1]\n            for j in range(1, i):\n                curr.append(prev[j] + prev[j-1])\n            curr.append(1)\n            prev = curr\n        \n        return prev"}], "path-sum-ii": [{"task_id": "path-sum-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def pathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        res = []\n        if not root:\n            return res\n        \n        def dfs(root, targetSum, path):\n            if not root:\n                return\n            \n            path.append(root.val)\n            \n            if root.val == targetSum and not root.left and not root.right:\n                res.append(path.copy())\n            \n            dfs(root.left, targetSum - root.val, path)\n            dfs(root.right, targetSum - root.val, path)\n            \n            path.pop()\n            \n        dfs(root, targetSum, [])\n        return res"}], "construct-the-rectangle": [{"task_id": "construct-the-rectangle", "completion": "class Solution(object):\n    def constructRectangle(self, area):\n        \"\"\"\n        :type area: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. 2 * area = x + y\n        # 2. x + y = area\n        # 3. x = area / y\n        # 4. x = area // y\n        # 5. x = area // y\n        # 6. x = area // y\n        # 7. x = area // y\n        # 8. x = area // y\n        # 9. x = area // y\n        # 10. x = area // y\n        # 11. x = area // y\n        # 12. x = area // y\n        # 13. x = area // y\n        # 14. x = area // y\n        # 15. x = area // y\n        # 16. x = area // y\n        # 17. x = area // y\n        # 18. x = area // y\n        # 19. x = area // y\n        # 20. x = area // y\n        # 21. x = area // y\n        # 22. x = area // y\n        # 23. x = area // y\n        # 24. x = area // y\n        # 25. x = area // y\n        # 26. x = area // y\n        # 27. x = area // y\n        # 28. x = area // y\n        # 29. x = area // y\n        # 30. x = area // y\n        # 31. x = area // y\n        # 32. x = area // y\n        # 33. x = area // y\n        # 34. x = area // y\n        # 35. x = area // y\n        # 36. x = area // y\n        # 37. x = area // y\n        # 38. x = area // y\n        # 39. x = area // y\n        # 40. x = area // y\n        # 41. x = area // y\n        # 42. x = area // y\n        # 43. x = area // y\n        # 44. x = area // y\n        # 45. x = area // y\n        # 46. x = area // y\n        # 47. x = area // y\n        # 48. x = area // y\n        # 49. x = area // y\n        # 50. x = area // y\n        # 51. x = area // y\n        # 52. x = area // y\n        # 53. x = area // y\n        # 54. x = area // y\n        # 55. x = area // y\n        # 56. x = area // y\n        # 57. x = area // y\n        # 58. x = area // y\n        # 59. x = area // y\n        # 60. x = area // y\n        # 61. x = area // y\n        # 62. x = area // y\n        # 63. x = area // y\n        # 64. x = area // y\n        # 65. x = area // y\n        # 66. x = area // y\n        # 67. x = area // y\n        # 68. x = area // y\n        # 69. x = area // y\n        # 70. x = area // y\n        # 71. x = area // y\n        # 72. x = area // y\n        # 73. x = area // y\n        # 74. x = area // y\n        # 75. x = area // y\n        # 76. x = area // y\n        # 77. x = area // y\n        # 78. x = area // y\n        # 79. x = area // y\n        # 80. x = area // y\n        # 81. x = area // y\n        # 82. x = area // y\n        # 83. x = area // y\n        # 84. x = area // y\n        # 85. x = area // y\n        # 86. x = area //"}], "word-ladder-ii": [{"task_id": "word-ladder-ii", "completion": "class Solution(object):\n    def findLadders(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        # build the graph\n        graph = defaultdict(set)\n        for word in wordList:\n            graph[word].add(word)\n        \n        # build the graph\n        for word in wordList:\n            for i in range(len(word)):\n                temp = word[:i] + \"*\" + word[i+1:]\n                graph[temp].add(word)\n        \n        # BFS\n        queue = deque([beginWord])\n        visited = {beginWord: True}\n        level = 1\n        res = []\n        while queue:\n            size = len(queue)\n            level_res = []\n            for _ in range(size):\n                curr = queue.popleft()\n                for i in range(len(curr)):\n                    temp = curr[:i] + \"*\" + curr[i+1:]\n                    for neighbor in graph[temp]:\n                        if neighbor not in visited:\n                            visited[neighbor] = True\n                            queue.append(neighbor)\n                            level_res.append(neighbor)\n            if endWord in level_res:\n                res.append(level_res)\n            if len(res) > 1:\n                return res\n            level += 1\n        \n        return res"}], "balanced-binary-tree": [{"task_id": "balanced-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isBalanced(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def height(root):\n            if not root:\n                return 0\n            left = height(root.left)\n            right = height(root.right)\n            if left == -1 or right == -1 or abs(left - right) > 1:\n                return -1\n            return max(left, right) + 1\n        \n        return height(root) != -1"}], "power-of-two": [{"task_id": "power-of-two", "completion": "class Solution(object):\n    def isPowerOfTwo(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        return n & (n - 1) == 0"}], "subsets-ii": [{"task_id": "subsets-ii", "completion": "class Solution(object):\n    def subsetsWithDup(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = [[]]\n        i = 0\n        while i < len(nums):\n            j = i + 1\n            while j < len(nums) and nums[j] == nums[i]:\n                j += 1\n            size = len(res)\n            for k in range(size):\n                res.append(res[k][:])\n                res[-1].append(nums[j])\n            i = j\n        return res"}], "largest-rectangle-in-histogram": [{"task_id": "largest-rectangle-in-histogram", "completion": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        max_area = 0\n        for i in range(len(heights)+1):\n            while stack and (i == len(heights) or heights[stack[-1]] >= heights[i]):\n                height = heights[stack.pop()]\n                width = i if not stack else i - stack[-1] - 1\n                max_area = max(max_area, height * width)\n            stack.append(i)\n        return max_area"}], "evaluate-reverse-polish-notation": [{"task_id": "evaluate-reverse-polish-notation", "completion": "class Solution(object):\n    def evalRPN(self, tokens):\n        \"\"\"\n        :type tokens: List[str]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        for token in tokens:\n            if token in \"+-*/\":\n                second = stack.pop()\n                first = stack.pop()\n                if token == \"+\":\n                    stack.append(first + second)\n                elif token == \"-\":\n                    stack.append(first - second)\n                elif token == \"*\":\n                    stack.append(first * second)\n                else:\n                    stack.append(int(first / second))\n            else:\n                stack.append(int(token))\n        return stack[0]"}], "perfect-rectangle": [{"task_id": "perfect-rectangle", "completion": "class Solution(object):\n    def isRectangleCover(self, rectangles):\n        \"\"\"\n        :type rectangles: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        \n        xmin, xmax, ymin, ymax = float('inf'), float('-inf'), float('inf'), float('-inf')\n        area = 0\n        seen = set()\n        \n        for x1, y1, x2, y2 in rectangles:\n            xmin = min(xmin, x1, x2)\n            xmax = max(xmax, x1, x2)\n            ymin = min(ymin, y1, y2)\n            ymax = max(ymax, y1, y2)\n            area += (x2 - x1) * (y2 - y1)\n            if (x1, y1) in seen or (x1, y2) in seen or (x2, y1) in seen or (x2, y2) in seen:\n                seen.remove((x1, y1))\n                seen.remove((x1, y2))\n                seen.remove((x2, y1))\n                seen.remove((x2, y2))\n            else:\n                seen.add((x1, y1))\n                seen.add((x1, y2))\n                seen.add((x2, y1))\n                seen.add((x2, y2))\n        \n        if (xmin, ymin) in seen and (xmin, ymax) in seen and (xmax, ymin) in seen and (xmax, ymax) in seen:\n            return area == (xmax - xmin) * (ymax - ymin)\n        return False"}], "excel-sheet-column-title": [{"task_id": "excel-sheet-column-title", "completion": "class Solution(object):\n    def convertToTitle(self, columnNumber):\n        \"\"\"\n        :type columnNumber: int\n        :rtype: str\n        \"\"\"\n        \n        res = \"\"\n        while columnNumber > 0:\n            columnNumber -= 1\n            res = chr(columnNumber % 26 + ord('A')) + res\n            columnNumber //= 26\n        return res"}], "maximum-subarray": [{"task_id": "maximum-subarray", "completion": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_sum = nums[0]\n        curr_sum = 0\n        \n        for num in nums:\n            if curr_sum < 0:\n                curr_sum = num\n            else:\n                curr_sum += num\n            max_sum = max(max_sum, curr_sum)\n        \n        return max_sum"}], "sliding-puzzle": [{"task_id": "sliding-puzzle", "completion": "class Solution(object):\n    def slidingPuzzle(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # convert board to a number\n        num = 0\n        for i in range(len(board)):\n            num = num * 10 + board[i][0]\n            num = num * 10 + board[i][1]\n            num = num * 10 + board[i][2]\n        \n        # if the number is already solved, return 0\n        if num == 123450:\n            return 0\n        \n        # if the number is not solved, find the next possible number\n        next_num = num + 1\n        while next_num % 10 != 0:\n            next_num += 1\n        \n        # find the position of 0\n        zero_pos = num % 10\n        num = num // 10\n        \n        # find the position of 2\n        two_pos = num % 10\n        num = num // 10\n        \n        # find the position of 3\n        three_pos = num % 10\n        num = num // 10\n        \n        # find the position of 4\n        four_pos = num % 10\n        num = num // 10\n        \n        # find the position of 5\n        five_pos = num % 10\n        num = num // 10\n        \n        # find the position of 6\n        six_pos = num % 10\n        num = num // 10\n        \n        # find the position of 7\n        seven_pos = num % 10\n        num = num // 10\n        \n        # find the position of 8\n        eight_pos = num % 10\n        num = num // 10\n        \n        # find the position of 9\n        nine_pos = num % 10\n        num = num // 10\n        \n        # find the position of 1\n        one_pos = num % 10\n        \n        # find the position of 0\n        zero_pos = zero_pos - 1\n        two_pos = two_pos - 1\n        three_pos = three_pos - 1\n        four_pos = four_pos - 1\n        five_pos = five_pos - 1\n        six_pos = six_pos - 1\n        seven_pos = seven_pos - 1\n        eight_pos = eight_pos - 1\n        nine_pos = nine_pos - 1\n        one_pos = one_pos - 1\n        \n        # find the position of 2\n        two_pos = two_pos - 1\n        three_pos = three_pos - 1\n        four_pos = four_pos - 1\n        five_pos = five_pos - 1\n        six_pos = six_pos - 1\n        seven_pos = seven_pos - 1\n        eight_pos = eight_pos - 1\n        nine_pos = nine_pos - 1\n        one_pos = one_pos - 1\n        \n        # find the position of 3\n        three_pos = three_pos - 1\n        four_pos = four_pos - 1\n        five_pos = five_pos - 1\n        six_pos = six_pos - 1\n        seven_pos = seven_pos - 1\n        eight_pos = eight_pos - 1\n        nine_pos = nine_pos - 1\n        one_pos = one_pos - 1\n        \n        # find the position of 4\n        four_pos = four_pos - 1\n        five_pos = five_pos - 1\n        six_pos = six_pos - 1\n        seven_pos = seven_pos - 1\n        eight_pos = eight_pos - 1\n        nine_pos = nine_pos - 1\n        one_pos = one_pos - 1\n        \n        # find the position of 5\n        five_pos = five_pos - 1\n        six_pos = six_pos - 1\n        seven_pos = seven_pos - 1\n        eight_pos = eight_pos - 1\n        nine_pos = nine_pos - 1\n        one_pos = one_pos - 1\n        \n        # find the position of 6\n        six_pos = six_pos - 1\n        seven_pos = seven_pos - 1"}], "isomorphic-strings": [{"task_id": "isomorphic-strings", "completion": "class Solution(object):\n    def isIsomorphic(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_map = {}\n        t_map = {}\n        \n        for i in range(len(s)):\n            if s[i] in s_map:\n                if s_map[s[i]] != t[i]:\n                    return False\n            else:\n                s_map[s[i]] = t[i]\n            \n            if t[i] in t_map:\n                if t_map[t[i]] != s[i]:\n                    return False\n            else:\n                t_map[t[i]] = s[i]\n        \n        return True"}], "search-in-rotated-sorted-array-ii": [{"task_id": "search-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        left, right = 0, len(nums)-1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return True\n            if nums[mid] > nums[right]:\n                if nums[mid] > target and nums[left] <= target:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target and nums[right] >= target:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return False"}], "unique-paths-ii": [{"task_id": "unique-paths-ii", "completion": "class Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid):\n        \"\"\"\n        :type obstacleGrid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        \n        if obstacleGrid[m-1][n-1] == 1:\n            return 0\n        \n        obstacleGrid[m-1][n-1] = 1\n        \n        for i in range(m-2,-1,-1):\n            if obstacleGrid[i][n-1] == 1:\n                obstacleGrid[i][n-1] = 0\n            else:\n                obstacleGrid[i][n-1] = obstacleGrid[i+1][n-1]\n        \n        for i in range(n-2,-1,-1):\n            if obstacleGrid[m-1][i] == 1:\n                obstacleGrid[m-1][i] = 0\n            else:\n                obstacleGrid[m-1][i] = obstacleGrid[m-1][i+1]\n        \n        return obstacleGrid[0][0]"}], "decode-ways-ii": [{"task_id": "decode-ways-ii", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s[0] == '0':\n            return 0\n        \n        if len(s) == 1:\n            return 1\n        \n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, len(s) + 1):\n            if s[i - 1] != '0':\n                dp[i] = dp[i - 1]\n            if s[i - 2] != '0' and int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        \n        return dp[-1]"}], "3sum-closest": [{"task_id": "3sum-closest", "completion": "class Solution(object):\n    def threeSumClosest(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        closest = nums[0] + nums[1] + nums[2]\n        left = 0\n        right = len(nums) - 1\n        \n        while left < right:\n            sum_ = nums[left] + nums[right]\n            if abs(sum_ - target) < abs(closest - target):\n                closest = sum_ + nums[left] + nums[right]\n            if sum_ > target:\n                right -= 1\n            elif sum_ < target:\n                left += 1\n            else:\n                return target\n        return closest"}], "maximum-depth-of-binary-tree": [{"task_id": "maximum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))"}], "intersection-of-two-arrays-ii": [{"task_id": "intersection-of-two-arrays-ii", "completion": "class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums1) > len(nums2):\n            return self.intersect(nums2, nums1)\n        \n        nums1.sort()\n        nums2.sort()\n        \n        i = 0\n        j = 0\n        res = []\n        \n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] < nums2[j]:\n                i += 1\n            elif nums1[i] > nums2[j]:\n                j += 1\n            else:\n                res.append(nums1[i])\n                i += 1\n                j += 1\n        \n        return res"}], "minimum-absolute-difference-in-bst": [{"task_id": "minimum-absolute-difference-in-bst", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def getMinimumDifference(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        prev = float('-inf')\n        ans = float('inf')\n        node = root\n        while node:\n            if node.left:\n                prev = node.left\n                while prev.right:\n                    prev = prev.right\n                ans = min(ans, node.val - prev.val)\n                node = node.left\n            else:\n                ans = min(ans, node.val - prev)\n                prev = node\n                node = node.right\n        return ans"}], "find-mode-in-binary-search-tree": [{"task_id": "find-mode-in-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        max_count = 0\n        curr_count = 0\n        prev_val = root.val\n        max_val = root.val\n        res = []\n        \n        while root:\n            if root.left:\n                if root.left.val == prev_val:\n                    curr_count += 1\n                else:\n                    curr_count = 1\n                    prev_val = root.left.val\n                    \n                if curr_count > max_count:\n                    max_count = curr_count\n                    res = [root.left.val]\n                elif curr_count == max_count:\n                    res.append(root.left.val)\n                    \n                root = root.left\n            else:\n                if root.val == prev_val:\n                    curr_count += 1\n                else:\n                    curr_count = 1\n                    prev_val = root.val\n                    \n                if curr_count > max_count:\n                    max_count = curr_count\n                    res = [root.val]\n                elif curr_count == max_count:\n                    res.append(root.val)\n                    \n                root = root.right\n                \n        return res"}], "find-the-index-of-the-first-occurrence-in-a-string": [{"task_id": "find-the-index-of-the-first-occurrence-in-a-string", "completion": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        \n        if needle == \"\":\n            return 0\n        \n        if needle in haystack:\n            return haystack.index(needle)\n        \n        return -1"}], "strong-password-checker": [{"task_id": "strong-password-checker", "completion": "class Solution(object):\n    def strongPasswordChecker(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. Count the number of lowercase, uppercase, and digit characters\n        lower, upper, digit = 0, 0, 0\n        for c in password:\n            if c.islower():\n                lower += 1\n            elif c.isupper():\n                upper += 1\n            else:\n                digit += 1\n        \n        # 2. Count the number of consecutive characters\n        consecutive = 0\n        prev = None\n        for c in password:\n            if c == prev:\n                consecutive += 1\n            else:\n                consecutive = 1\n            prev = c\n        \n        # 3. Calculate the number of replacements needed\n        replacements = max(lower - 2, 0)\n        \n        # 4. Calculate the number of deletions needed\n        deletions = max(len(password) - 2 * consecutive, 0)\n        \n        # 5. Calculate the number of additional characters needed\n        additional = max(0, 3 - (digit + upper + lower))\n        \n        # 6. Calculate the number of additional deletions needed\n        additional_deletions = max(deletions - 3 + additional, 0)\n        \n        # 7. Calculate the number of additional replacements needed\n        additional_replacements = max(replacements - 2 + additional, 0)\n        \n        # 8. Calculate the number of additional characters needed\n        additional_characters = len(password) + additional_deletions + additional_replacements\n        \n        # 9. Calculate the number of additional deletions needed\n        additional_deletions = max(additional_deletions - 3, 0)\n        \n        # 10. Calculate the number of additional replacements needed\n        additional_replacements = max(additional_replacements - 2, 0)\n        \n        # 11. Calculate the number of additional characters needed\n        additional_characters = additional_characters + additional_deletions + additional_replacements\n        \n        # 12. Calculate the number of additional deletions needed\n        additional_deletions = max(additional_deletions - 3, 0)\n        \n        # 13. Calculate the number of additional replacements needed\n        additional_replacements = max(additional_replacements - 2, 0)\n        \n        # 14. Calculate the number of additional characters needed\n        additional_characters = additional_characters + additional_deletions + additional_replacements\n        \n        # 15. Calculate the number of additional deletions needed\n        additional_deletions = max(additional_deletions - 3, 0)\n        \n        # 16. Calculate the number of additional replacements needed\n        additional_replacements = max(additional_replacements - 2, 0)\n        \n        # 17. Calculate the number of additional characters needed\n        additional_characters = additional_characters + additional_deletions + additional_replacements\n        \n        # 18. Calculate the number of additional deletions needed\n        additional_deletions = max(additional_deletions - 3, 0)\n        \n        # 19. Calculate the number of additional replacements needed\n        additional_replacements = max(additional_replacements - 2, 0)\n        \n        # 20. Calculate the number of additional characters needed\n        additional_characters = additional_characters + additional_deletions + additional_replacements\n        \n        # 21. Calculate the number of additional deletions needed\n        additional_deletions = max(additional_deletions - 3, 0)\n        \n        # 22. Calculate the number of additional replacements needed\n        additional_replacements = max(additional_replacements - 2, 0)\n        \n        # 23. Calculate the number of additional characters needed\n        additional_characters = additional_characters + additional_deletions + additional_replacements\n        \n        # 24. Calculate the number of additional deletions needed\n        additional_deletions = max(additional_deletions - 3,"}], "factorial-trailing-zeroes": [{"task_id": "factorial-trailing-zeroes", "completion": "class Solution(object):\n    def trailingZeroes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        count = 0\n        while n >= 5:\n            count += n//5\n            n = n//5\n        return count"}], "zigzag-conversion": [{"task_id": "zigzag-conversion", "completion": "class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        \n        if numRows == 1:\n            return s\n        \n        res = [\"\"] * numRows\n        i = 0\n        flag = -1\n        \n        for c in s:\n            res[i] += c\n            if i == 0 or i == numRows - 1:\n                flag = -flag\n            i += flag\n        \n        return \"\".join(res)"}], "trapping-rain-water": [{"task_id": "trapping-rain-water", "completion": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        left, right = 0, len(height) - 1\n        left_max, right_max = 0, 0\n        res = 0\n        \n        while left < right:\n            if height[left] < height[right]:\n                if height[left] >= left_max:\n                    left_max = height[left]\n                else:\n                    res += left_max - height[left]\n                left += 1\n            else:\n                if height[right] >= right_max:\n                    right_max = height[right]\n                else:\n                    res += right_max - height[right]\n                right -= 1\n        \n        return res"}], "find-all-numbers-disappeared-in-an-array": [{"task_id": "find-all-numbers-disappeared-in-an-array", "completion": "class Solution(object):\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        ## O(n) time and O(1) space\n        ## we can use the array as a hashmap to keep track of the numbers that we have seen\n        ## we can iterate through the array and mark the index of the number as negative\n        ## we can then iterate through the array again and return the numbers that are positive\n        ## we can also use the index of the number as the key and mark the value as negative\n        ## we can then iterate through the array again and return the numbers that are positive\n        \n        ## we can use the array as a hashmap to keep track of the numbers that we have seen\n        ## we can iterate through the array and mark the index of the number as negative\n        ## we can then iterate through the array again and return the numbers that are positive\n        ## we can also use the index of the number as the key and mark the value as negative\n        ## we can then iterate through the array again and return the numbers that are positive\n        \n        ## we can use the array as a hashmap to keep track of the numbers that we have seen\n        ## we can iterate through the array and mark the index of the number as negative\n        ## we can then iterate through the array again and return the numbers that are positive\n        ## we can also use the index of the number as the key and mark the value as negative\n        ## we can then iterate through the array again and return the numbers that are positive\n        \n        ## we can use the array as a hashmap to keep track of the numbers that we have seen\n        ## we can iterate through the array and mark the index of the number as negative\n        ## we can then iterate through the array again and return the numbers that are positive\n        ## we can also use the index of the number as the key and mark the value as negative\n        ## we can then iterate through the array again and return the numbers that are positive\n        \n        ## we can use the array as a hashmap to keep track of the numbers that we have seen\n        ## we can iterate through the array and mark the index of the number as negative\n        ## we can then iterate through the array again and return the numbers that are positive\n        ## we can also use the index of the number as the key and mark the value as negative\n        ## we can then iterate through the array again and return the numbers that are positive\n        \n        ## we can use the array as a hashmap to keep track of the numbers that we have seen\n        ## we can iterate through the array and mark the index of the number as negative\n        ## we can then iterate through the array again and return the numbers that are positive\n        ## we can also use the index of the number as the key and mark the value as negative\n        ## we can then iterate through the array again and return the numbers that are positive\n        \n        ## we can use the array as a hashmap to keep track of the numbers that we have seen\n        ## we can iterate through the array and mark the index of the number as negative\n        ## we can then iterate through the array again and return the numbers that are positive\n        ## we can also use the index of the number as the key and mark the value as negative\n        ## we can then iterate through the array again and return the numbers that are positive\n        \n        ## we can use the array as a hashmap to keep track of the numbers that we have seen\n        ## we can iterate through the array and mark the index of the number as negative\n        ## we can then iterate through the array again and return the numbers that are positive\n        ## we can also use the index of the number as the key and mark the value as negative\n        ## we can then iterate through the array again and return the numbers that are positive\n        \n        ## we can use the array as a hashmap to keep track of the numbers that we have seen\n        ## we can iterate through the array and mark the index of the number as negative\n        ## we can then iterate through the array again and return the numbers that are positive\n        ## we can also use the index of the number as the key and mark the value as negative\n        ## we can then iterate through the array again and return the numbers that are positive\n        \n        ## we can use the array as a hashmap to keep track of the numbers that we have seen\n        ## we can iterate through the array and mark the index of the number as negative\n        ##"}], "count-of-smaller-numbers-after-self": [{"task_id": "count-of-smaller-numbers-after-self", "completion": "class Solution(object):\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        nums = [(num, i) for i, num in enumerate(nums)]\n        nums.sort()\n        res = [0] * len(nums)\n        count = 0\n        for i in range(len(nums)-1, -1, -1):\n            if nums[i][1] < i:\n                count += 1\n            res[i] = count\n        return res"}], "set-intersection-size-at-least-two": [{"task_id": "set-intersection-size-at-least-two", "completion": "class Solution(object):\n    def intersectionSizeTwo(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        intervals.sort(key=lambda x: (x[1], -x[0]))\n        res = 0\n        prev = -1\n        for interval in intervals:\n            if interval[0] > prev:\n                res += 2\n                prev = interval[1] - 1\n            else:\n                res += 1\n                prev -= 1\n        return res"}], "symmetric-tree": [{"task_id": "symmetric-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def isMirror(left, right):\n            if not left and not right:\n                return True\n            if not left or not right:\n                return False\n            return left.val == right.val and isMirror(left.left, right.right) and isMirror(left.right, right.left)\n        \n        return isMirror(root, root)"}], "number-of-atoms": [{"task_id": "number-of-atoms", "completion": "class Solution(object):\n    def countOfAtoms(self, formula):\n        \"\"\"\n        :type formula: str\n        :rtype: str\n        \"\"\"\n        \n        stack = []\n        i = 0\n        while i < len(formula):\n            if formula[i] == '(':\n                stack.append(0)\n                i += 1\n            elif formula[i] == ')':\n                num = 0\n                while i < len(formula) and formula[i].isdigit():\n                    num = num * 10 + int(formula[i])\n                    i += 1\n                if num == 0:\n                    num = 1\n                if stack:\n                    stack[-1] = stack[-1] * num\n                else:\n                    stack.append(num)\n                i += 1\n            else:\n                j = i\n                while j < len(formula) and formula[j].islower():\n                    j += 1\n                count = int(formula[i:j]) if j > i else 1\n                i = j\n                if stack:\n                    stack[-1] = stack[-1] * count\n                else:\n                    stack.append(count)\n        count_dict = {}\n        for count in stack:\n            if count_dict.get(formula[i:i+count].lower()):\n                count_dict[formula[i:i+count].lower()] += count\n            else:\n                count_dict[formula[i:i+count].lower()] = count\n            i += count\n        return ''.join([key + (str(value) if value > 1 else '') for key, value in sorted(count_dict.items())])"}], "binary-tree-preorder-traversal": [{"task_id": "binary-tree-preorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def preorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = [root]\n        res = []\n        \n        while stack:\n            node = stack.pop()\n            res.append(node.val)\n            if node.right:\n                stack.append(node.right)\n            if node.left:\n                stack.append(node.left)\n                \n        return res"}], "power-of-four": [{"task_id": "power-of-four", "completion": "class Solution(object):\n    def isPowerOfFour(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        if n == 1:\n            return True\n        \n        if n % 4 != 0:\n            return False\n        \n        return self.isPowerOfFour(n // 4)"}], "invert-binary-tree": [{"task_id": "invert-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def invertTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        \n        if root is None:\n            return None\n        \n        temp = root.left\n        root.left = root.right\n        root.right = temp\n        \n        self.invertTree(root.left)\n        self.invertTree(root.right)\n        \n        return root"}], "generate-parentheses": [{"task_id": "generate-parentheses", "completion": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        if n == 0:\n            return []\n        \n        if n == 1:\n            return ['()']\n        \n        res = []\n        res.append('()')\n        res.append('(())')\n        \n        for i in range(2, n):\n            temp = []\n            for j in res:\n                temp.append('(' + j + ')')\n                temp.append(j + '()')\n            res = temp\n        \n        return res"}], "patching-array": [{"task_id": "patching-array", "completion": "class Solution(object):\n    def minPatches(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # edge case\n        if nums[0] > n:\n            return 0\n        \n        # edge case\n        if nums[-1] < n:\n            return 1\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            nums.pop()\n            return self.minPatches(nums, n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            nums.pop()\n            return self.minPatches(nums, n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            nums.pop()\n            return self.minPatches(nums, n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            nums.pop()\n            return self.minPatches(nums, n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            nums.pop()\n            return self.minPatches(nums, n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            nums.pop()\n            return self.minPatches(nums, n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            nums.pop()\n            return self.minPatches(nums, n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            nums.pop()\n            return self.minPatches(nums, n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            nums.pop()\n            return self.minPatches(nums, n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            nums.pop()\n            return self.minPatches(nums, n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            nums.pop()\n            return self.minPatches(nums, n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            nums.pop()\n            return self.minPatches(nums, n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            nums.pop()\n            return self.minPatches(nums, n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            nums.pop()\n            return self.minPatches(nums, n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            nums.pop()\n            return self.minPatches(nums, n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            nums.pop()\n            return"}], "longest-valid-parentheses": [{"task_id": "longest-valid-parentheses", "completion": "class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        stack = [-1]\n        max_len = 0\n        for i in range(len(s)):\n            if s[i] == '(':\n                stack.append(i)\n            else:\n                stack.pop()\n                if stack == []:\n                    stack.append(i)\n                else:\n                    max_len = max(max_len, i - stack[-1])\n        return max_len"}], "fraction-to-recurring-decimal": [{"task_id": "fraction-to-recurring-decimal", "completion": "class Solution(object):\n    def fractionToDecimal(self, numerator, denominator):\n        \"\"\"\n        :type numerator: int\n        :type denominator: int\n        :rtype: str\n        \"\"\"\n        \n        if numerator == 0:\n            return \"0\"\n        \n        res = \"\"\n        if (numerator < 0) ^ (denominator < 0):\n            res += \"-\"\n        \n        numerator = abs(numerator)\n        denominator = abs(denominator)\n        \n        res += str(numerator // denominator)\n        numerator = numerator % denominator\n        \n        if numerator == 0:\n            return res\n        \n        res += \".\"\n        seen = {}\n        while numerator != 0:\n            if numerator in seen:\n                res = res[:seen[numerator]] + \"(\" + res[seen[numerator]:] + \")\"\n                break\n            seen[numerator] = len(res)\n            numerator *= 10\n            res += str(numerator // denominator)\n            numerator = numerator % denominator\n        \n        return res"}], "sort-list": [{"task_id": "sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        mid = slow.next\n        slow.next = None\n        \n        left = self.sortList(head)\n        right = self.sortList(mid)\n        \n        dummy = ListNode()\n        curr = dummy\n        \n        while left and right:\n            if left.val < right.val:\n                curr.next = left\n                left = left.next\n            else:\n                curr.next = right\n                right = right.next\n            curr = curr.next\n        \n        if left:\n            curr.next = left\n        elif right:\n            curr.next = right\n        \n        return dummy.next"}], "russian-doll-envelopes": [{"task_id": "russian-doll-envelopes", "completion": "class Solution(object):\n    def maxEnvelopes(self, envelopes):\n        \"\"\"\n        :type envelopes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        envelopes.sort(key=lambda x: (x[0], -x[1]))\n        # envelopes.sort(key=lambda x: (x[1], x[0]))\n        # envelopes.sort(key=lambda x: (x[1], -x[0]))\n        # envelopes.sort(key=lambda x: (x[0], x[1]))\n        # envelopes.sort(key=lambda x: (-x[0], x[1]))\n        # envelopes.sort(key=lambda x: (-x[1], x[0]))\n        # envelopes.sort(key=lambda x: (-x[1], -x[0]))\n        # envelopes.sort(key=lambda x: (-x[0], -x[1]))\n        # envelopes.sort(key=lambda x: (-x[0], -x[1]))\n        # envelopes.sort(key=lambda x: (-x[1], -x[0]))\n        # envelopes.sort(key=lambda x: (-x[1], -x[0]))\n        # envelopes.sort(key=lambda x: (-x[0], -x[1]))\n        # envelopes.sort(key=lambda x: (-x[0], -x[1]))\n        # envelopes.sort(key=lambda x: (-x[1], -x[0]))\n        # envelopes.sort(key=lambda x: (-x[1], -x[0]))\n        # envelopes.sort(key=lambda x: (-x[0], -x[1]))\n        # envelopes.sort(key=lambda x: (-x[0], -x[1]))\n        # envelopes.sort(key=lambda x: (-x[1], -x[0]))\n        # envelopes.sort(key=lambda x: (-x[1], -x[0]))\n        # envelopes.sort(key=lambda x: (-x[0], -x[1]))\n        # envelopes.sort(key=lambda x: (-x[0], -x[1]))\n        # envelopes.sort(key=lambda x: (-x[1], -x[0]))\n        # envelopes.sort(key=lambda x: (-x[1], -x[0]))\n        # envelopes.sort(key=lambda x: (-x[0], -x[1]))\n        # envelopes.sort(key=lambda x: (-x[0], -x[1]))\n        # envelopes.sort(key=lambda x: (-x[1], -x[0]))\n        # envelopes.sort(key=lambda x: (-x[1], -x[0]))\n        # envelopes.sort(key=lambda x: (-x[0], -x[1]))\n        # envelopes.sort(key=lambda x: (-x[0], -x[1]))\n        # envelopes.sort(key=lambda x: (-x[1], -x[0]))\n        # envelopes.sort(key=lambda x: (-x[1], -x[0]))\n        # envelopes.sort(key=lambda x: (-x[0], -x[1]))\n        # envelopes.sort(key=lambda x: (-x[0], -x[1]))\n        # envelopes.sort(key=lambda x: (-x[1], -x[0]))\n        # envelopes.sort(key=lambda x: (-x[1], -x[0]))\n        # envelopes.sort(key=lambda x: (-x[0], -x[1]))\n        # envelopes.sort(key=lambda x: (-x[0], -x[1]))\n        # envelopes.sort(key=lambda x: (-x[1], -x[0]))\n        # envelopes.sort(key=lambda x: (-x[1], -x[0]))\n        # envelopes.sort(key=lambda x: (-x[0], -x[1]))\n        # envelopes.sort(key=lambda x: (-x[0], -x[1]))\n        # envelopes.sort(key=lambda x: (-x[1], -x[0]))\n        # envelopes.sort(key=lambda x: (-x[1], -x["}], "set-matrix-zeroes": [{"task_id": "set-matrix-zeroes", "completion": "class Solution(object):\n    def setZeroes(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        rows = set()\n        cols = set()\n        \n        for i in range(len(matrix)):\n            for j in range(len(matrix[0])):\n                if matrix[i][j] == 0:\n                    rows.add(i)\n                    cols.add(j)\n        \n        for i in range(len(matrix)):\n            for j in range(len(matrix[0])):\n                if i in rows or j in cols:\n                    matrix[i][j] = 0"}], "remove-nth-node-from-end-of-list": [{"task_id": "remove-nth-node-from-end-of-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # if the list is empty\n        if not head:\n            return None\n        \n        # if the list has only one node\n        if not head.next:\n            return None\n        \n        # if the list has two nodes\n        if not head.next.next:\n            head = None\n            return head\n        \n        # if the list has more than two nodes\n        slow = fast = head\n        \n        # move fast pointer n nodes ahead\n        for i in range(n):\n            fast = fast.next\n        \n        # if fast pointer is None, then the list has less than n nodes\n        if not fast:\n            return head.next\n        \n        # move slow pointer until fast pointer reaches the end\n        while fast.next:\n            slow = slow.next\n            fast = fast.next\n        \n        # remove the node\n        slow.next = slow.next.next\n        \n        return head"}], "intersection-of-two-arrays": [{"task_id": "intersection-of-two-arrays", "completion": "class Solution(object):\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        nums1 = set(nums1)\n        return list(nums1 & set(nums2))"}], "super-washing-machines": [{"task_id": "super-washing-machines", "completion": "class Solution(object):\n    def findMinMoves(self, machines):\n        \"\"\"\n        :type machines: List[int]\n        :rtype: int\n        \"\"\"\n        \n        total = sum(machines)\n        if total % len(machines) != 0:\n            return -1\n        avg = total // len(machines)\n        curr = 0\n        max_move = 0\n        for m in machines:\n            curr += m - avg\n            max_move = max(max_move, abs(curr))\n        return max_move"}], "kth-smallest-number-in-multiplication-table": [{"task_id": "kth-smallest-number-in-multiplication-table", "completion": "class Solution(object):\n    def findKthNumber(self, m, n, k):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # if k == 1:\n        #     return 1\n        # count = 0\n        # i = 1\n        # j = 1\n        # while i <= m and j <= n:\n        #     count += min(m, n)\n        #     if i * n < j * m:\n        #         i += 1\n        #     else:\n        #         j += 1\n        #     if count >= k:\n        #         return i * n + (j - 1)\n        # return -1\n        # TLE\n        # if k == 1:\n        #     return min(m, n)\n        # count = 0\n        # i = 1\n        # j = 1\n        # while i <= m and j <= n:\n        #     count += min(m, n)\n        #     if i * n < j * m:\n        #         i += 1\n        #     else:\n        #         j += 1\n        #     if count >= k:\n        #         return i * n + (j - 1)\n        # return -1\n        # TLE\n        # if k == 1:\n        #     return min(m, n)\n        # count = 0\n        # i = 1\n        # j = 1\n        # while i <= m and j <= n:\n        #     count += min(m, n)\n        #     if i * n < j * m:\n        #         i += 1\n        #     else:\n        #         j += 1\n        #     if count >= k:\n        #         return i * n + (j - 1)\n        # return -1\n        # TLE\n        # if k == 1:\n        #     return min(m, n)\n        # count = 0\n        # i = 1\n        # j = 1\n        # while i <= m and j <= n:\n        #     count += min(m, n)\n        #     if i * n < j * m:\n        #         i += 1\n        #     else:\n        #         j += 1\n        #     if count >= k:\n        #         return i * n + (j - 1)\n        # return -1\n        # TLE\n        # if k == 1:\n        #     return min(m, n)\n        # count = 0\n        # i = 1\n        # j = 1\n        # while i <= m and j <= n:\n        #     count += min(m, n)\n        #     if i * n < j * m:\n        #         i += 1\n        #     else:\n        #         j += 1\n        #     if count >= k:\n        #         return i * n + (j - 1)\n        # return -1\n        # TLE\n        # if k == 1:\n        #     return min(m, n)\n        # count = 0\n        # i = 1\n        # j = 1\n        # while i <= m and j <= n:\n        #     count += min(m, n)\n        #     if i * n < j * m:\n        #         i += 1\n        #     else:\n        #         j += 1\n        #     if count >= k:\n        #         return i * n + (j - 1)\n        # return -1\n        # TLE\n        # if k == 1:\n        #     return min(m, n)\n        # count = 0\n        # i = 1\n        # j = 1\n        # while i <= m and j <= n:\n        #     count += min(m, n)\n        #     if i * n < j * m:\n        #         i += 1\n        #     else:\n        #         j += 1\n        #     if count >= k:\n        #         return i * n + (j - 1)\n        # return -1\n        # TLE\n        # if k == 1:\n        #     return min(m, n)\n        # count = 0\n        # i = 1\n        # j = 1\n        # while i <= m and j <= n:\n        #     count += min(m, n)\n        #     if i * n < j * m:\n        #         i += 1\n        #     else:\n        #         j += 1\n        #     if count >= k:\n        #         return i * n + (j - 1)\n        # return -1"}], "convert-sorted-list-to-binary-search-tree": [{"task_id": "convert-sorted-list-to-binary-search-tree", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedListToBST(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :rtype: Optional[TreeNode]\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        slow = head\n        fast = head\n        prev = None\n        \n        while fast and fast.next:\n            prev = slow\n            slow = slow.next\n            fast = fast.next.next\n        \n        prev.next = None\n        \n        root = TreeNode(slow.val)\n        root.left = self.sortedListToBST(head)\n        root.right = self.sortedListToBST(slow.next)\n        \n        return root"}], "merge-two-sorted-lists": [{"task_id": "merge-two-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: Optional[ListNode]\n        :type list2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        \n        if not list1:\n            return list2\n        if not list2:\n            return list1\n        \n        if list1.val < list2.val:\n            list1.next = self.mergeTwoLists(list1.next, list2)\n            return list1\n        else:\n            list2.next = self.mergeTwoLists(list1, list2.next)\n            return list2"}], "maximal-rectangle": [{"task_id": "maximal-rectangle", "completion": "class Solution(object):\n    def maximalRectangle(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        rows = len(matrix)\n        cols = len(matrix[0])\n        \n        # dp[i][j] = height of the largest rectangle with matrix[i][j] as bottom right corner\n        dp = [0] * cols\n        \n        max_area = 0\n        \n        for i in range(rows):\n            for j in range(cols):\n                if matrix[i][j] == '1':\n                    dp[j] += 1\n                else:\n                    dp[j] = 0\n            \n            max_area = max(max_area, self.largestRectangleArea(dp))\n        \n        return max_area\n        \n        \n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        max_area = 0\n        \n        for i in range(len(heights)):\n            while stack and heights[stack[-1]] >= heights[i]:\n                height = heights[stack.pop()]\n                width = i if not stack else i - stack[-1] - 1\n                max_area = max(max_area, height * width)\n            stack.append(i)\n        \n        while stack:\n            height = heights[stack.pop()]\n            width = len(heights) if not stack else len(heights) - stack[-1] - 1\n            max_area = max(max_area, height * width)\n        \n        return max_area"}], "subsets": [{"task_id": "subsets", "completion": "class Solution(object):\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        res = [[]]\n        for num in nums:\n            res += [item + [num] for item in res]\n        return res"}], "find-minimum-in-rotated-sorted-array-ii": [{"task_id": "find-minimum-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left < right:\n            mid = (left + right) // 2\n            \n            if nums[mid] > nums[right]:\n                left = mid + 1\n            elif nums[mid] < nums[right]:\n                right = mid\n            else:\n                right -= 1\n        \n        return nums[left]"}], "valid-number": [{"task_id": "valid-number", "completion": "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        s = s.strip()\n        if not s:\n            return False\n        \n        if s[0] in ['+','-']:\n            s = s[1:]\n        \n        if s.count('.') > 1:\n            return False\n        \n        if s.count('.') == 1:\n            if s[0] == '.':\n                return False\n            if s[-1] == '.':\n                return False\n            s = s.replace('.','')\n        \n        if s.count('e') > 1:\n            return False\n        \n        if s.count('e') == 1:\n            if s[0] == 'e':\n                return False\n            if s[-1] == 'e':\n                return False\n            s = s.replace('e','')\n        \n        if s.isdigit():\n            return True\n        \n        return False"}], "integer-to-roman": [{"task_id": "integer-to-roman", "completion": "class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        roman_dict = {\n            1000: \"M\",\n            900: \"CM\",\n            500: \"D\",\n            400: \"CD\",\n            100: \"C\",\n            90: \"XC\",\n            50: \"L\",\n            40: \"XL\",\n            10: \"X\",\n            9: \"IX\",\n            5: \"V\",\n            4: \"IV\",\n            1: \"I\"\n        }\n        \n        result = \"\"\n        \n        for key in sorted(roman_dict.keys(), reverse=True):\n            while num >= key:\n                result += roman_dict[key]\n                num -= key\n                \n        return result"}], "find-the-difference": [{"task_id": "find-the-difference", "completion": "class Solution(object):\n    def findTheDifference(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        # XOR of two strings is the sum of the differences of the characters\n        # in the two strings.\n        # XOR of two empty strings is zero.\n        # XOR of a string and itself is zero.\n        # XOR of two strings with the same character is zero.\n        # XOR of two strings with different characters is the character.\n        # XOR of two strings with different characters is the character.\n        # XOR of two strings with different characters is the character.\n        # XOR of two strings with different characters is the character.\n        # XOR of two strings with different characters is the character.\n        # XOR of two strings with different characters is the character.\n        # XOR of two strings with different characters is the character.\n        # XOR of two strings with different characters is the character.\n        # XOR of two strings with different characters is the character.\n        # XOR of two strings with different characters is the character.\n        # XOR of two strings with different characters is the character.\n        # XOR of two strings with different characters is the character.\n        # XOR of two strings with different characters is the character.\n        # XOR of two strings with different characters is the character.\n        # XOR of two strings with different characters is the character.\n        # XOR of two strings with different characters is the character.\n        # XOR of two strings with different characters is the character.\n        # XOR of two strings with different characters is the character.\n        # XOR of two strings with different characters is the character.\n        # XOR of two strings with different characters is the character.\n        # XOR of two strings with different characters is the character.\n        # XOR of two strings with different characters is the character.\n        # XOR of two strings with different characters is the character.\n        # XOR of two strings with different characters is the character.\n        # XOR of two strings with different characters is the character.\n        # XOR of two strings with different characters is the character.\n        # XOR of two strings with different characters is the character.\n        # XOR of two strings with different characters is the character.\n        # XOR of two strings with different characters is the character.\n        # XOR of two strings with different characters is the character.\n        # XOR of two strings with different characters is the character.\n        # XOR of two strings with different characters is the character.\n        # XOR of two strings with different characters is the character.\n        # XOR of two strings with different characters is the character.\n        # XOR of two strings with different characters is the character.\n        # XOR of two strings with different characters is the character.\n        # XOR of two strings with different characters is the character.\n        # XOR of two strings with different characters is the character.\n        # XOR of two strings with different characters is the character.\n        # XOR of two strings with different characters is the character.\n        # XOR of two strings with different characters is the character.\n        # XOR of two strings with different characters is the character.\n        # XOR of two strings with different characters is the character.\n        # XOR of two strings with different characters is the character.\n        # XOR of two strings with different characters is the character.\n        # XOR of two strings with different characters is the character.\n        # XOR of two strings with different characters is the character.\n        # XOR of two strings with different characters is the character.\n        # XOR of two strings with different characters is the character.\n        # XOR of two strings with different characters is the character.\n        # XOR of two strings with different characters is the character.\n        # XOR of two strings with different characters is the character.\n        # XOR of two strings with different characters is the character.\n        # XOR of two strings with different characters is the character.\n        # XOR of two strings with different characters is the character.\n        # XOR of two strings with different characters is the character.\n        # XOR of two strings with different characters is the character.\n        # XOR of two strings with different characters is the character.\n        # XOR of two strings with different characters is the character.\n        # XOR of two strings with different characters is the character.\n        # XOR of two strings with different characters is the character.\n        # XOR of two strings with different characters is the character.\n        # XOR of two strings with different characters is the character.\n        # XOR of two strings with different characters is the character."}], "sudoku-solver": [{"task_id": "sudoku-solver", "completion": "class Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        def isValid(row, col, val):\n            # check if val is already in the row\n            if val in board[row]:\n                return False\n            # check if val is already in the col\n            for i in range(9):\n                if board[i][col] == val:\n                    return False\n            # check if val is already in the 3x3 box\n            boxRow = row // 3\n            boxCol = col // 3\n            for i in range(3):\n                for j in range(3):\n                    if board[boxRow * 3 + i][boxCol * 3 + j] == val:\n                        return False\n            return True\n        \n        def solve(row, col):\n            if row == 9:\n                return True\n            if col == 9:\n                return solve(row + 1, 0)\n            if board[row][col] != '.':\n                return solve(row, col + 1)\n            for val in range(1, 10):\n                if isValid(row, col, str(val)):\n                    board[row][col] = str(val)\n                    if solve(row, col + 1):\n                        return True\n                    board[row][col] = '.'\n            return False\n        \n        solve(0, 0)"}], "recover-binary-search-tree": [{"task_id": "recover-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        # inorder traversal\n        # if the current node is None, return\n        # if the current node is not None,\n        # if the current node is the first node,\n        # if the current node is the second node,\n        # if the current node is the third node,\n        # if the current node is the fourth node,\n        # if the current node is the fifth node,\n        # if the current node is the sixth node,\n        # if the current node is the seventh node,\n        # if the current node is the eighth node,\n        # if the current node is the ninth node,\n        # if the current node is the tenth node,\n        # if the current node is the eleventh node,\n        # if the current node is the twelfth node,\n        # if the current node is the thirteenth node,\n        # if the current node is the fourteenth node,\n        # if the current node is the fifteenth node,\n        # if the current node is the sixteenth node,\n        # if the current node is the seventeenth node,\n        # if the current node is the eighteenth node,\n        # if the current node is the nineteenth node,\n        # if the current node is the twentieth node,\n        # if the current node is the twenty-first node,\n        # if the current node is the twenty-second node,\n        # if the current node is the twenty-third node,\n        # if the current node is the twenty-fourth node,\n        # if the current node is the twenty-fifth node,\n        # if the current node is the twenty-sixth node,\n        # if the current node is the twenty-seventh node,\n        # if the current node is the twenty-eighth node,\n        # if the current node is the twenty-ninth node,\n        # if the current node is the thirty-first node,\n        # if the current node is the thirty-second node,\n        # if the current node is the thirty-third node,\n        # if the current node is the thirty-fourth node,\n        # if the current node is the thirty-fifth node,\n        # if the current node is the thirty-sixth node,\n        # if the current node is the thirty-seventh node,\n        # if the current node is the thirty-eighth node,\n        # if the current node is the thirty-ninth node,\n        # if the current node is the forty-first node,\n        # if the current node is the forty-second node,\n        # if the current node is the forty-third node,\n        # if the current node is the forty-fourth node,\n        # if the current node is the forty-fifth node,\n        # if the current node is the forty-sixth node,\n        # if the current node is the forty-seventh node,\n        # if the current node is the forty-eighth node,\n        # if the current node is the forty-ninth node,\n        # if the current node is the fifty-first node,\n        # if the current node is the fifty-second node,\n        # if the current node is the fifty-third node,\n        # if the current node is the fifty-fourth node,\n        # if the current node is the fifty-fifth node,\n        # if the current node is the fifty-sixth node,\n        # if the current node is the fifty-seventh node,\n        # if the current node is the fifty-eighth node,\n        # if the current node is the fifty-ninth node,\n        # if the current node is the sixty-first node,\n        # if the current node is the sixty-second node,\n        # if the current node is the sixty-third node,\n        # if the current node is the sixty-fourth node,\n        # if the current node is the sixty-fifth node,\n        # if the current node is the sixty-sixth node,\n        # if the current node is the sixty-seventh node,\n        # if the current node is the sixty-eighth node,\n        # if the current node is the sixty-ninth node,\n        # if the current node is the seventy-first node,\n        # if the current node is the seventy-second node,\n        # if the current node is the seventy-third node,\n        # if the current node is the seventy-fourth node,\n        # if the current node is the seventy"}], "palindrome-linked-list": [{"task_id": "palindrome-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        \n        if not head or not head.next:\n            return True\n        \n        slow = head\n        fast = head\n        \n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        slow = slow.next\n        slow = self.reverse(slow)\n        fast = head\n        \n        while slow:\n            if slow.val != fast.val:\n                return False\n            slow = slow.next\n            fast = fast.next\n        \n        return True\n        \n    def reverse(self, head):\n        prev = None\n        curr = head\n        \n        while curr:\n            temp = curr.next\n            curr.next = prev\n            prev = curr\n            curr = temp\n        \n        return prev"}], "valid-perfect-square": [{"task_id": "valid-perfect-square", "completion": "class Solution(object):\n    def isPerfectSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        l = 0\n        r = num\n        while l <= r:\n            mid = (l + r) // 2\n            if mid * mid == num:\n                return True\n            elif mid * mid < num:\n                l = mid + 1\n            else:\n                r = mid - 1\n        return False"}], "counting-bits": [{"task_id": "counting-bits", "completion": "class Solution(object):\n    def countBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if n == 0:\n            return [0]\n        \n        ans = [0]\n        curr = 1\n        for i in range(1, n+1):\n            if i == curr:\n                ans.append(1)\n                curr *= 2\n            else:\n                ans.append(ans[i-curr] + 1)\n        return ans"}], "remove-linked-list-elements": [{"task_id": "remove-linked-list-elements", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        dummy = ListNode(0, head)\n        curr = dummy\n        \n        while curr.next:\n            if curr.next.val == val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        \n        return dummy.next"}], "scramble-string": [{"task_id": "scramble-string", "completion": "class Solution(object):\n    def isScramble(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        \n        if s1 == s2:\n            return True\n        \n        if sorted(s1) != sorted(s2):\n            return False\n        \n        for i in range(1, len(s1)):\n            if self.isScramble(s1[:i], s2[:i]) and self.isScramble(s1[i:], s2[i:]):\n                return True\n            if self.isScramble(s1[:i], s2[-i:]) and self.isScramble(s1[i:], s2[:-i]):\n                return True\n        return False"}], "simplify-path": [{"task_id": "simplify-path", "completion": "class Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        \n        stack = []\n        path = path.split('/')\n        for p in path:\n            if p == '' or p == '.':\n                continue\n            elif p == '..':\n                if stack:\n                    stack.pop()\n            else:\n                stack.append(p)\n        return '/' + '/'.join(stack)"}], "word-search-ii": [{"task_id": "word-search-ii", "completion": "class Solution(object):\n    def findWords(self, board, words):\n        \"\"\"\n        :type board: List[List[str]]\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        trie = {}\n        for word in words:\n            node = trie\n            for char in word:\n                if char not in node:\n                    node[char] = {}\n                node = node[char]\n            node['$'] = True\n        \n        res = []\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                self.dfs(board, i, j, trie, res)\n        return res\n    \n    def dfs(self, board, i, j, node, res):\n        if '$' in node:\n            res.append(node.pop('$'))\n        if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]):\n            return\n        char = board[i][j]\n        if char not in node:\n            return\n        board[i][j] = '#'\n        self.dfs(board, i+1, j, node[char], res)\n        self.dfs(board, i-1, j, node[char], res)\n        self.dfs(board, i, j+1, node[char], res)\n        self.dfs(board, i, j-1, node[char], res)\n        board[i][j] = char"}], "valid-anagram": [{"task_id": "valid-anagram", "completion": "class Solution(object):\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_dict = {}\n        t_dict = {}\n        \n        for i in range(len(s)):\n            s_dict[s[i]] = 1 + s_dict.get(s[i], 0)\n            t_dict[t[i]] = 1 + t_dict.get(t[i], 0)\n        \n        for key in s_dict:\n            if s_dict[key] != t_dict.get(key, 0):\n                return False\n        \n        return True"}], "valid-sudoku": [{"task_id": "valid-sudoku", "completion": "class Solution(object):\n    def isValidSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        \n        rows = [set() for _ in range(9)]\n        cols = [set() for _ in range(9)]\n        squares = [set() for _ in range(9)]\n        \n        for i in range(9):\n            for j in range(9):\n                if board[i][j] != '.':\n                    num = int(board[i][j])\n                    if num in rows[i] or num in cols[j] or num in squares[(i//3)*3 + j//3]:\n                        return False\n                    rows[i].add(num)\n                    cols[j].add(num)\n                    squares[(i//3)*3 + j//3].add(num)\n        \n        return True"}], "fizz-buzz": [{"task_id": "fizz-buzz", "completion": "class Solution(object):\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        ans = []\n        for i in range(1,n+1):\n            if i%3 == 0 and i%5 == 0:\n                ans.append(\"FizzBuzz\")\n            elif i%3 == 0:\n                ans.append(\"Fizz\")\n            elif i%5 == 0:\n                ans.append(\"Buzz\")\n            else:\n                ans.append(str(i))\n        return ans"}], "reverse-words-in-a-string": [{"task_id": "reverse-words-in-a-string", "completion": "class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # split the string into words\n        words = s.split()\n        \n        # reverse the words\n        words.reverse()\n        \n        # join the words with a single space\n        return ' '.join(words)"}], "excel-sheet-column-number": [{"task_id": "excel-sheet-column-number", "completion": "class Solution(object):\n    def titleToNumber(self, columnTitle):\n        \"\"\"\n        :type columnTitle: str\n        :rtype: int\n        \"\"\"\n        \n        res = 0\n        for i in columnTitle:\n            res = res * 26 + (ord(i) - ord('A') + 1)\n        return res"}], "candy": [{"task_id": "candy", "completion": "class Solution(object):\n    def candy(self, ratings):\n        \"\"\"\n        :type ratings: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(ratings)\n        candies = [1] * n\n        \n        for i in range(1, n):\n            if ratings[i] > ratings[i-1]:\n                candies[i] = candies[i-1] + 1\n        \n        for i in range(n-2, -1, -1):\n            if ratings[i] > ratings[i+1]:\n                candies[i] = max(candies[i], candies[i+1] + 1)\n        \n        return sum(candies)"}], "same-tree": [{"task_id": "same-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val != q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"}], "reorder-list": [{"task_id": "reorder-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reorderList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: None Do not return anything, modify head in-place instead.\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        slow = head\n        fast = head.next\n        \n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        second = slow.next\n        slow.next = None\n        \n        second = self.reverseList(second)\n        \n        first = head\n        \n        while second:\n            temp = first.next\n            first.next = second\n            second = second.next\n            first.next.next = temp\n            first = temp\n        \n        return head\n        \n    def reverseList(self, head):\n        prev = None\n        curr = head\n        \n        while curr:\n            temp = curr.next\n            curr.next = prev\n            prev = curr\n            curr = temp\n        \n        return prev"}], "word-pattern": [{"task_id": "word-pattern", "completion": "class Solution(object):\n    def wordPattern(self, pattern, s):\n        \"\"\"\n        :type pattern: str\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        s = s.split()\n        if len(pattern) != len(s):\n            return False\n        \n        d = {}\n        d2 = {}\n        for i in range(len(pattern)):\n            if pattern[i] not in d:\n                if s[i] in d2:\n                    return False\n                d[pattern[i]] = s[i]\n                d2[s[i]] = True\n            elif d[pattern[i]] != s[i]:\n                return False\n        return True"}], "permutations": [{"task_id": "permutations", "completion": "class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if len(nums) == 1:\n            return [nums]\n        \n        res = []\n        for i in range(len(nums)):\n            temp = nums[i]\n            nums[i] = None\n            res += self.permute(nums)\n            nums[i] = temp\n        \n        for i in range(len(res)):\n            res[i].append(nums[i])\n        \n        return res"}], "search-a-2d-matrix": [{"task_id": "search-a-2d-matrix", "completion": "class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        \n        low = 0\n        high = m*n - 1\n        \n        while low <= high:\n            mid = (low + high) // 2\n            \n            if matrix[mid//n][mid%n] == target:\n                return True\n            elif matrix[mid//n][mid%n] < target:\n                low = mid + 1\n            else:\n                high = mid - 1\n        \n        return False"}], "add-two-numbers": [{"task_id": "add-two-numbers", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # Initialize a new linked list\n        head = ListNode()\n        # Initialize a pointer to the new linked list\n        curr = head\n        # Initialize a variable to keep track of the carry\n        carry = 0\n        # Iterate over the two linked lists\n        while l1 or l2 or carry:\n            # If both l1 and l2 are not None, add the values\n            if l1 and l2:\n                val = l1.val + l2.val + carry\n                l1 = l1.next\n                l2 = l2.next\n            # If only l1 is not None, add the value\n            elif l1:\n                val = l1.val + carry\n                l1 = l1.next\n            # If only l2 is not None, add the value\n            elif l2:\n                val = l2.val + carry\n                l2 = l2.next\n            # If both l1 and l2 are None, add the carry\n            else:\n                val = carry\n            # Update the carry\n            carry = val // 10\n            # Add the new node to the new linked list\n            curr.next = ListNode(val % 10)\n            # Move the pointer to the next node\n            curr = curr.next\n        # Return the new linked list\n        return head.next"}], "number-complement": [{"task_id": "number-complement", "completion": "class Solution(object):\n    def findComplement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. Find the number of bits in num\n        # 2. Find the number of bits in num - 1\n        # 3. Shift num to the left by the number of bits in num - 1\n        # 4. Subtract 1 from num\n        # 5. Return num\n        \n        # 1. Find the number of bits in num\n        count = 0\n        while num > 0:\n            count += 1\n            num = num >> 1\n        \n        # 2. Find the number of bits in num - 1\n        num = num - 1\n        \n        # 3. Shift num to the left by the number of bits in num - 1\n        num = num << count\n        \n        # 4. Subtract 1 from num\n        num = num - 1\n        \n        # 5. Return num\n        return num"}], "arithmetic-slices-ii-subsequence": [{"task_id": "arithmetic-slices-ii-subsequence", "completion": "class Solution(object):\n    def numberOfArithmeticSlices(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 3:\n            return 0\n        \n        count = 0\n        prev_diff = nums[1] - nums[0]\n        curr_count = 0\n        \n        for i in range(2, len(nums)):\n            curr_diff = nums[i] - nums[i-1]\n            if curr_diff == prev_diff:\n                curr_count += 1\n                count += curr_count\n            else:\n                curr_count = 0\n            prev_diff = curr_diff\n        \n        return count"}], "text-justification": [{"task_id": "text-justification", "completion": "class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\"\n        \n        res = []\n        curr_len = 0\n        curr_words = []\n        for word in words:\n            if curr_len + len(word) + len(curr_words) > maxWidth:\n                if len(curr_words) == 1:\n                    res.append(curr_words[0] + ' ' * (maxWidth - curr_len))\n                else:\n                    num_spaces = (maxWidth - curr_len) // (len(curr_words) - 1)\n                    extra_spaces = (maxWidth - curr_len) % (len(curr_words) - 1)\n                    res.append(''.join([curr_words[i] + ' ' * num_spaces + (' ' if i < extra_spaces else '') for i in range(len(curr_words))]))\n                curr_len = 0\n                curr_words = []\n            curr_len += len(word)\n            curr_words.append(word)\n        if curr_words:\n            res.append(' '.join(curr_words) + ' ' * (maxWidth - curr_len - len(curr_words) + 1))\n        return res"}], "binary-tree-postorder-traversal": [{"task_id": "binary-tree-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def postorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        stack = [root]\n        res = []\n        \n        while stack:\n            node = stack.pop()\n            res.append(node.val)\n            if node.left:\n                stack.append(node.left)\n            if node.right:\n                stack.append(node.right)\n                \n        return res[::-1]"}], "container-with-most-water": [{"task_id": "container-with-most-water", "completion": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        left = 0\n        right = len(height) - 1\n        max_area = 0\n        \n        while left < right:\n            area = min(height[left], height[right]) * (right - left)\n            max_area = max(max_area, area)\n            \n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n                \n        return max_area"}], "concatenated-words": [{"task_id": "concatenated-words", "completion": "class Solution(object):\n    def findAllConcatenatedWordsInADict(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        word_set = set(words)\n        res = []\n        for word in words:\n            if self.helper(word, word_set):\n                res.append(word)\n        return res\n        \n    def helper(self, word, word_set):\n        for i in range(1, len(word)):\n            prefix = word[:i]\n            suffix = word[i:]\n            if prefix in word_set and (suffix in word_set or self.helper(suffix, word_set)):\n                return True\n        return False"}], "base-7": [{"task_id": "base-7", "completion": "class Solution(object):\n    def convertToBase7(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        \n        if num < 0:\n            num = abs(num)\n            sign = \"-\"\n        else:\n            sign = \"\"\n        \n        res = \"\"\n        while num:\n            res = str(num % 7) + res\n            num = num // 7\n        \n        return sign + res"}], "nim-game": [{"task_id": "nim-game", "completion": "class Solution(object):\n    def canWinNim(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        return n%4 != 0"}], "n-queens-ii": [{"task_id": "n-queens-ii", "completion": "class Solution(object):\n    def totalNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. 1 queen -> n rows\n        # 2. 2 queens -> n-1 rows\n        # 3. 3 queens -> n-2 rows\n        # 4. 4 queens -> n-3 rows\n        # 5. 5 queens -> n-4 rows\n        # 6. 6 queens -> n-5 rows\n        # 7. 7 queens -> n-6 rows\n        # 8. 8 queens -> n-7 rows\n        # 9. 9 queens -> n-8 rows\n        # 10. 10 queens -> n-9 rows\n        # 11. 11 queens -> n-10 rows\n        # 12. 12 queens -> n-11 rows\n        # 13. 13 queens -> n-12 rows\n        # 14. 14 queens -> n-13 rows\n        # 15. 15 queens -> n-14 rows\n        # 16. 16 queens -> n-15 rows\n        # 17. 17 queens -> n-16 rows\n        # 18. 18 queens -> n-17 rows\n        # 19. 19 queens -> n-18 rows\n        # 20. 20 queens -> n-19 rows\n        # 21. 21 queens -> n-20 rows\n        # 22. 22 queens -> n-21 rows\n        # 23. 23 queens -> n-22 rows\n        # 24. 24 queens -> n-23 rows\n        # 25. 25 queens -> n-24 rows\n        # 26. 26 queens -> n-25 rows\n        # 27. 27 queens -> n-26 rows\n        # 28. 28 queens -> n-27 rows\n        # 29. 29 queens -> n-28 rows\n        # 30. 30 queens -> n-29 rows\n        # 31. 31 queens -> n-30 rows\n        # 32. 32 queens -> n-31 rows\n        # 33. 33 queens -> n-32 rows\n        # 34. 34 queens -> n-33 rows\n        # 35. 35 queens -> n-34 rows\n        # 36. 36 queens -> n-35 rows\n        # 37. 37 queens -> n-36 rows\n        # 38. 38 queens -> n-37 rows\n        # 39. 39 queens -> n-38 rows\n        # 40. 40 queens -> n-39 rows\n        # 41. 41 queens -> n-40 rows\n        # 42. 42 queens -> n-41 rows\n        # 43. 43 queens -> n-42 rows\n        # 44. 44 queens -> n-43 rows\n        # 45. 45 queens -> n-44 rows\n        # 46. 46 queens -> n-45 rows\n        # 47. 47 queens -> n-46 rows\n        # 48. 48 queens -> n-47 rows\n        # 49. 49 queens -> n-48 rows\n        # 50. 50 queens -> n-49 rows\n        # 51. 51 queens -> n-50 rows\n        # 52. 52 queens -> n-51 rows\n        # 53. 53 queens -> n-52 rows\n        # 54. 54 queens -> n-53 rows\n        # 55. 55 queens -> n-54 rows\n        # 56. 56 que"}], "n-queens": [{"task_id": "n-queens", "completion": "class Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def isValid(board, row, col):\n            for i in range(row):\n                if board[i][col] == 'Q':\n                    return False\n            i = row - 1\n            j = col - 1\n            while i >= 0 and j >= 0:\n                if board[i][j] == 'Q':\n                    return False\n                i -= 1\n                j -= 1\n            i = row - 1\n            j = col + 1\n            while i >= 0 and j < n:\n                if board[i][j] == 'Q':\n                    return False\n                i -= 1\n                j += 1\n            return True\n        \n        def backtrack(board, row):\n            if row == n:\n                res.append([''.join(row) for row in board])\n                return\n            for col in range(n):\n                if isValid(board, row, col):\n                    board[row][col] = 'Q'\n                    backtrack(board, row + 1)\n                    board[row][col] = '.'\n            return\n        \n        res = []\n        board = [['.' for _ in range(n)] for _ in range(n)]\n        backtrack(board, 0)\n        return res"}], "word-search": [{"task_id": "word-search", "completion": "class Solution(object):\n    def exist(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if not word:\n            return True\n        \n        if not board:\n            return False\n        \n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if self.dfs(board, word, i, j, 0):\n                    return True\n        return False\n        \n    def dfs(self, board, word, i, j, k):\n        if k == len(word):\n            return True\n        \n        if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != word[k]:\n            return False\n        \n        temp = board[i][j]\n        board[i][j] = '#'\n        \n        res = self.dfs(board, word, i+1, j, k+1) or self.dfs(board, word, i-1, j, k+1) or self.dfs(board, word, i, j+1, k+1) or self.dfs(board, word, i, j-1, k+1)\n        \n        board[i][j] = temp\n        \n        return res"}], "merge-sorted-array": [{"task_id": "merge-sorted-array", "completion": "class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        \n        # if nums1 is empty, return nums2\n        if m == 0:\n            nums1[:] = nums2[:]\n            return\n        \n        # if nums2 is empty, return nums1\n        if n == 0:\n            return\n        \n        # if nums1 is empty, return nums2\n        if m == 0:\n            return\n        \n        # if nums1 is empty, return nums2\n        if n == 0:\n            return\n        \n        # if nums1 is empty, return nums2\n        if m == 0:\n            return\n        \n        # if nums1 is empty, return nums2\n        if n == 0:\n            return\n        \n        # if nums1 is empty, return nums2\n        if m == 0:\n            return\n        \n        # if nums1 is empty, return nums2\n        if n == 0:\n            return\n        \n        # if nums1 is empty, return nums2\n        if m == 0:\n            return\n        \n        # if nums1 is empty, return nums2\n        if n == 0:\n            return\n        \n        # if nums1 is empty, return nums2\n        if m == 0:\n            return\n        \n        # if nums1 is empty, return nums2\n        if n == 0:\n            return\n        \n        # if nums1 is empty, return nums2\n        if m == 0:\n            return\n        \n        # if nums1 is empty, return nums2\n        if n == 0:\n            return\n        \n        # if nums1 is empty, return nums2\n        if m == 0:\n            return\n        \n        # if nums1 is empty, return nums2\n        if n == 0:\n            return\n        \n        # if nums1 is empty, return nums2\n        if m == 0:\n            return\n        \n        # if nums1 is empty, return nums2\n        if n == 0:\n            return\n        \n        # if nums1 is empty, return nums2\n        if m == 0:\n            return\n        \n        # if nums1 is empty, return nums2\n        if n == 0:\n            return\n        \n        # if nums1 is empty, return nums2\n        if m == 0:\n            return\n        \n        # if nums1 is empty, return nums2\n        if n == 0:\n            return\n        \n        # if nums1 is empty, return nums2\n        if m == 0:\n            return\n        \n        # if nums1 is empty, return nums2\n        if n == 0:\n            return\n        \n        # if nums1 is empty, return nums2\n        if m == 0:\n            return\n        \n        # if nums1 is empty, return nums2\n        if n == 0:\n            return\n        \n        # if nums1 is empty, return nums2\n        if m == 0:\n            return\n        \n        # if nums1 is empty, return nums2\n        if n == 0:\n            return\n        \n        # if nums1 is empty, return nums2\n        if m == 0:\n            return\n        \n        # if nums1 is empty, return nums2\n        if n == 0:\n            return\n        \n        # if nums1 is empty, return nums2\n        if m == 0:\n            return\n        \n        # if nums1 is empty, return nums2\n        if n == 0:\n            return\n        \n        # if nums1 is empty, return nums2\n        if m == 0:\n            return\n        \n        # if nums1 is empty, return nums2\n        if n == 0:\n            return\n        \n        # if nums1 is empty, return nums2\n        if m == 0:\n            return\n        \n        # if nums1 is empty, return nums2\n        if n == 0:\n            return\n        \n        # if nums1 is empty, return nums2\n        if m == 0:\n            return\n        \n        # if nums1 is empty, return nums2\n        if n == 0:\n            return\n        \n        # if nums1 is empty, return nums2\n        if m == 0:\n            return"}], "third-maximum-number": [{"task_id": "third-maximum-number", "completion": "class Solution(object):\n    def thirdMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max1 = max2 = max3 = float('-inf')\n        \n        for num in nums:\n            if num > max1:\n                max3 = max2\n                max2 = max1\n                max1 = num\n            elif num > max2 and num < max1:\n                max3 = max2\n                max2 = num\n            elif num > max3 and num < max2:\n                max3 = num\n            \n        return max3 if max3 != float('-inf') else max1"}]}