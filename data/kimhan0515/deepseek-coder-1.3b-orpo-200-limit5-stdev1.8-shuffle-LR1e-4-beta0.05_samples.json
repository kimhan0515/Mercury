{"spiral-matrix": [{"task_id": "spiral-matrix", "completion": "class Solution(object):\n    def spiralOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not matrix:\n            return []\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        res = []\n        left, right = 0, n - 1\n        top, bottom = 0, m - 1\n        \n        while left <= right and top <= bottom:\n            for i in range(left, right + 1):\n                res.append(matrix[top][i])\n            top += 1\n            \n            for i in range(top, bottom + 1):\n                res.append(matrix[i][right])\n            right -= 1\n            \n            if top <= bottom:\n                for i in range(right, left - 1, -1):\n                    res.append(matrix[bottom][i])\n                bottom -= 1\n            \n            if left <= right:\n                for i in range(bottom, top - 1, -1):\n                    res.append(matrix[i][left])\n                left += 1\n        \n        return res"}], "summary-ranges": [{"task_id": "summary-ranges", "completion": "class Solution(object):\n    def summaryRanges(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        ans = []\n        i = 0\n        while i < len(nums):\n            j = i\n            while j + 1 < len(nums) and nums[j] + 1 == nums[j + 1]:\n                j += 1\n            if i == j:\n                ans.append(str(nums[i]))\n            else:\n                ans.append(str(nums[i]) + \"->\" + str(nums[j]))\n            i = j + 1\n        return ans"}], "distinct-subsequences": [{"task_id": "distinct-subsequences", "completion": "class Solution(object):\n    def numDistinct(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"\n        \n        n, m = len(s), len(t)\n        dp = [[0] * (m + 1) for _ in range(n + 1)]\n        for i in range(n + 1):\n            dp[i][0] = 1\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                dp[i][j] = dp[i - 1][j]\n                if s[i - 1] == t[j - 1]:\n                    dp[i][j] += dp[i - 1][j - 1]\n        return dp[n][m]"}], "first-missing-positive": [{"task_id": "first-missing-positive", "completion": "class Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(nums)\n        for i in range(n):\n            while nums[i] > 0 and nums[i] <= n and nums[i] != nums[nums[i] - 1]:\n                nums[i], nums[nums[i] - 1] = nums[nums[i] - 1], nums[i]\n        \n        for i in range(n):\n            if i + 1 != nums[i]:\n                return i + 1\n        \n        return n + 1"}], "permutation-sequence": [{"task_id": "permutation-sequence", "completion": "class Solution(object):\n    def getPermutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        nums = [i for i in range(1, n + 1)]\n        k -= 1\n        res = ''\n        while n:\n            n -= 1\n            num, k = divmod(k, math.factorial(n))\n            res += str(nums[num])\n            nums.remove(nums[num])\n        return res"}], "two-sum-ii-input-array-is-sorted": [{"task_id": "two-sum-ii-input-array-is-sorted", "completion": "class Solution(object):\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        for i in range(len(numbers)):\n            for j in range(i+1, len(numbers)):\n                if numbers[i] + numbers[j] == target:\n                    return [i+1, j+1]"}], "expression-add-operators": [{"task_id": "expression-add-operators", "completion": "class Solution(object):\n    def addOperators(self, num, target):\n        \"\"\"\n        :type num: str\n        :type target: int\n        :rtype: List[str]\n        \"\"\""}], "sum-root-to-leaf-numbers": [{"task_id": "sum-root-to-leaf-numbers", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def dfs(root, sum):\n            if not root:\n                return 0\n            if not root.left and not root.right:\n                return sum * 10 + root.val\n            return dfs(root.left, sum * 10 + root.val) + dfs(root.right, sum * 10 + root.val)\n        \n        return dfs(root, 0)"}], "license-key-formatting": [{"task_id": "license-key-formatting", "completion": "class Solution(object):\n    def licenseKeyFormatting(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        s = s.replace('-', '')\n        s = s.upper()\n        s = s[::-1]\n        s = s[k:]\n        s = s[::-1]\n        s = s.replace('', '-')\n        return s"}], "gas-station": [{"task_id": "gas-station", "completion": "class Solution(object):\n    def canCompleteCircuit(self, gas, cost):\n        \"\"\"\n        :type gas: List[int]\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(gas)\n        total_gas = 0\n        total_cost = 0\n        for i in range(n):\n            total_gas += gas[i]\n            total_cost += cost[i]\n        if total_gas < total_cost:\n            return -1\n        start = 0\n        tank = 0\n        for i in range(n):\n            tank += gas[i] - cost[i]\n            if tank < 0:\n                start = i + 1\n                tank = 0\n        return start"}], "burst-balloons": [{"task_id": "burst-balloons", "completion": "class Solution(object):\n    def maxCoins(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(nums)\n        nums = [1] + nums + [1]\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n - 2, -1, -1):\n            for j in range(i + 2, n):\n                for k in range(i + 1, j):\n                    dp[i][j] = max(dp[i][j], dp[i][k] + dp[k][j] + nums[i] * nums[k] * nums[j])\n        return dp[0][n - 1]"}], "plus-one": [{"task_id": "plus-one", "completion": "class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        for i in range(len(digits)-1,-1,-1):\n            if digits[i] < 9:\n                digits[i] += 1\n                return digits\n            else:\n                digits[i] = 0\n        digits.insert(0,1)\n        return digits"}], "regular-expression-matching": [{"task_id": "regular-expression-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        if not p:\n            return not s\n        \n        if len(p) == 1:\n            return len(s) == 1 and (s[0] == p[0] or p[0] == '.')\n        \n        if p[1] != '*':\n            if len(s) < 1:\n                return False\n            return (s[0] == p[0] or p[0] == '.') and self.isMatch(s[1:], p[1:])\n        \n        while len(s) > 0 and (s[0] == p[0] or p[0] == '.'):\n            if self.isMatch(s, p[2:]):\n                return True\n            s = s[1:]\n        \n        return self.isMatch(s, p[2:])"}], "create-maximum-number": [{"task_id": "create-maximum-number", "completion": "class Solution(object):\n    def maxNumber(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\""}], "perfect-number": [{"task_id": "perfect-number", "completion": "class Solution(object):\n    def checkPerfectNumber(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return False\n        sum = 1\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                sum += i + num // i\n        return sum == num"}], "fibonacci-number": [{"task_id": "fibonacci-number", "completion": "class Solution(object):\n    def fib(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        return self.fib(n-1) + self.fib(n-2)"}], "dungeon-game": [{"task_id": "dungeon-game", "completion": "class Solution(object):\n    def calculateMinimumHP(self, dungeon):\n        \"\"\"\n        :type dungeon: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(dungeon)\n        n = len(dungeon[0])\n        dp = [[0 for i in range(n)] for j in range(m)]\n        dp[m-1][n-1] = max(1, 1 - dungeon[m-1][n-1])\n        for i in range(m-2, -1, -1):\n            dp[i][n-1] = max(dp[i+1][n-1] - dungeon[i][n-1], 1)\n        for j in range(n-2, -1, -1):\n            dp[m-1][j] = max(dp[m-1][j+1] - dungeon[m-1][j], 1)\n        for i in range(m-2, -1, -1):\n            for j in range(n-2, -1, -1):\n                dp[i][j] = max(min(dp[i+1][j], dp[i][j+1]) - dungeon[i][j], 1)\n        return dp[0][0]"}], "find-k-th-smallest-pair-distance": [{"task_id": "find-k-th-smallest-pair-distance", "completion": "class Solution(object):\n    def smallestDistancePair(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        n = len(nums)\n        left, right = 0, nums[-1] - nums[0]\n        while left < right:\n            mid = (left + right) // 2\n            count = 0\n            j = 0\n            for i in range(n):\n                while j < n and nums[j] - nums[i] <= mid:\n                    j += 1\n                count += j - i - 1\n            if count < k:\n                left = mid + 1\n            else:\n                right = mid\n        return left"}], "number-of-segments-in-a-string": [{"task_id": "number-of-segments-in-a-string", "completion": "class Solution(object):\n    def countSegments(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        return len(s.split())"}], "reverse-vowels-of-a-string": [{"task_id": "reverse-vowels-of-a-string", "completion": "class Solution(object):\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n        s = list(s)\n        i = 0\n        j = len(s) - 1\n        while i < j:\n            while i < j and s[i] not in vowels:\n                i += 1\n            while i < j and s[j] not in vowels:\n                j -= 1\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n        return ''.join(s)"}], "longest-consecutive-sequence": [{"task_id": "longest-consecutive-sequence", "completion": "class Solution(object):\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums_set = set(nums)\n        longest = 0\n        for num in nums:\n            if num - 1 not in nums_set:\n                cur_num = num\n                cur_len = 1\n                while cur_num + 1 in nums_set:\n                    cur_num += 1\n                    cur_len += 1\n                longest = max(longest, cur_len)\n        return longest"}], "missing-number": [{"task_id": "missing-number", "completion": "class Solution(object):\n    def missingNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(nums)\n        sum_n = n * (n + 1) // 2\n        sum_nums = sum(nums)\n        return sum_n - sum_nums"}], "word-ladder": [{"task_id": "word-ladder", "completion": "class Solution(object):\n    def ladderLength(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\"\n        \n        def is_adjacent(word1, word2):\n            count = 0\n            for i in range(len(word1)):\n                if word1[i] != word2[i]:\n                    count += 1\n                if count > 1:\n                    return False\n            return True\n        \n        wordList = set(wordList)\n        queue = [(beginWord, 1)]\n        while queue:\n            word, count = queue.pop(0)\n            if word == endWord:\n                return count\n            for word in wordList:\n                if is_adjacent(word, word):\n                    queue.append((word, count + 1))\n                    wordList.remove(word)\n        return 0"}], "add-binary": [{"task_id": "add-binary", "completion": "class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        \n        a = int(a, 2)\n        b = int(b, 2)\n        return bin(a + b)"}], "find-first-and-last-position-of-element-in-sorted-array": [{"task_id": "find-first-and-last-position-of-element-in-sorted-array", "completion": "class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        def binary_search(nums, target, left):\n            left = 0\n            right = len(nums) - 1\n            while left <= right:\n                mid = (left + right) // 2\n                if nums[mid] < target:\n                    left = mid + 1\n                elif nums[mid] > target:\n                    right = mid - 1\n                else:\n                    if left == right:\n                        return left\n                    else:\n                        if left + 1 == right:\n                            return right\n                        else:\n                            if nums[left + 1] == target:\n                                return left + 1\n                            else:\n                                return right\n            return -1\n        \n        left = binary_search(nums, target, True)\n        right = binary_search(nums, target, False)\n        return [left, right]"}], "remove-duplicates-from-sorted-array": [{"task_id": "remove-duplicates-from-sorted-array", "completion": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        k = 0\n        for i in range(len(nums)):\n            if i == 0 or nums[i] != nums[k]:\n                k += 1\n                nums[k] = nums[i]\n        return k + 1"}], "jump-game-ii": [{"task_id": "jump-game-ii", "completion": "class Solution(object):\n    def jump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(nums)\n        jumps = [float('inf') for _ in range(n)]\n        jumps[0] = 0\n        for i in range(n):\n            for j in range(1, nums[i] + 1):\n                if i + j < n:\n                    jumps[i + j] = min(jumps[i + j], jumps[i] + 1)\n        return jumps[-1]"}], "best-time-to-buy-and-sell-stock-iv": [{"task_id": "best-time-to-buy-and-sell-stock-iv", "completion": "class Solution(object):\n    def maxProfit(self, k, prices):\n        \"\"\"\n        :type k: int\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if k >= len(prices) // 2:\n            return sum(sorted(prices)[1:]) - sum(sorted(prices)[:-1])\n        \n        dp = [[0] * (k + 1) for _ in range(len(prices))]\n        \n        for i in range(len(prices)):\n            for j in range(1, k + 1):\n                if i == 0:\n                    dp[i][j] = prices[i]\n                else:\n                    dp[i][j] = max(dp[i - 1][j] - prices[i], dp[i - 1][j - 1])\n                    dp[i][j] = max(dp[i][j], dp[i - 1][j] + prices[i])\n        \n        return dp[-1][-1]"}], "convert-a-number-to-hexadecimal": [{"task_id": "convert-a-number-to-hexadecimal", "completion": "class Solution(object):\n    def toHex(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        if num < 0:\n            num = num + 2**32\n        ans = \"\"\n        while num > 0:\n            ans = str(num % 16) + ans\n            num = num // 16\n        return ans"}], "first-unique-character-in-a-string": [{"task_id": "first-unique-character-in-a-string", "completion": "class Solution(object):\n    def firstUniqChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        for i in range(len(s)):\n            if s.count(s[i]) == 1:\n                return i\n        return -1"}], "contains-duplicate-iii": [{"task_id": "contains-duplicate-iii", "completion": "class Solution(object):\n    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff):\n        \"\"\"\n        :type nums: List[int]\n        :type indexDiff: int\n        :type valueDiff: int\n        :rtype: bool\n        \"\"\""}], "sort-colors": [{"task_id": "sort-colors", "completion": "class Solution(object):\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Use the Dutch National Flag Algorithm\n        # We have three colors: 0, 1, 2\n        # We have three pointers: low, mid, high\n        # We have three loops:\n        # 1. We have a loop that iterates through the array\n        # 2. We have a loop that iterates through the array\n        # 3. We have a loop that iterates through the array\n        # We have a loop that iterates through the array\n        # We have a loop that iterates through the array\n        # We have a loop that iterates through the array\n        # We have a loop that iterates through the array\n        # We have a loop that iterates through the array\n        # We have a loop that iterates through the array\n        # We have a loop that iterates through the array\n        # We have a loop that iterates through the array\n        # We have a loop that iterates through the array\n        # We have a loop that iterates through the array\n        # We have a loop that iterates through the array\n        # We have a loop that iterates through the array\n        # We have a loop that iterates through the array\n        # We have a loop that iterates through the array\n        # We have a loop that iterates through the array\n        # We have a loop that iterates through the array\n        # We have a loop that iterates through the array\n        # We have a loop that iterates through the array\n        # We have a loop that iterates through the array\n        # We have a loop that iterates through the array\n        # We have a loop that iterates through the array\n        # We have a loop that iterates through the array\n        # We have a loop that iterates through the array\n        # We have a loop that iterates through the array\n        # We have a loop that iterates through the array\n        # We have a loop that iterates through the array\n        # We have a loop that iterates through the array\n        # We have a loop that iterates through the array\n        # We have a loop that iterates through the array\n        # We have a loop that iterates through the array\n        # We have a loop that iterates through the array\n        # We have a loop that iterates through the array\n        # We have a loop that iterates through the array\n        # We have a loop that iterates through the array\n        # We have a loop that iterates through the array\n        # We have a loop that iterates through the array\n        # We have a loop that iterates through the array\n        # We have a loop that iterates through the array\n        # We have a loop that iterates through the array\n        # We have a loop that iterates through the array\n        # We have a loop that iterates through the array\n        # We have a loop that iterates through the array\n        # We have a loop that iterates through the array\n        # We have a loop that iterates through the array\n        # We have a loop that iterates through the array\n        # We have a loop that iterates through the array\n        # We have a loop that iterates through the array\n        # We have a loop that iterates through the array\n        # We have a loop that iterates through the array\n        # We have a loop that iterates through the array\n        # We have a loop that iterates through the array\n        # We have a loop that iterates through the array\n        # We have a loop that iterates through the array\n        # We have a loop that iterates through the array\n        # We have a loop that iterates through the array\n        # We have a loop that iterates through the array\n        # We have a loop that iterates through the array\n        # We have a loop that iterates through the array\n        # We have a loop that iterates through the array\n        # We have a loop that iterates through the array\n        # We have a loop that iterates through the array\n        # We have a loop that iterates through the array\n        # We have a loop that iterates through the array\n        # We have a loop that iterates through the array\n        # We have a loop that iterates through the array\n        # We have a loop that iterates through the array\n        # We have a loop that iterates through the array\n        # We have a loop that iterates through the array\n        # We have a loop that iterates through the array\n        # We have a loop"}], "max-consecutive-ones": [{"task_id": "max-consecutive-ones", "completion": "class Solution(object):\n    def findMaxConsecutiveOnes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_count = 0\n        count = 0\n        for i in nums:\n            if i == 1:\n                count += 1\n            else:\n                count = 0\n            max_count = max(max_count, count)\n        return max_count"}], "count-complete-tree-nodes": [{"task_id": "count-complete-tree-nodes", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def countNodes(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        return 1 + self.countNodes(root.left) + self.countNodes(root.right)"}], "add-strings": [{"task_id": "add-strings", "completion": "class Solution(object):\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        num1 = num1[::-1]\n        num2 = num2[::-1]\n        res = []\n        i = 0\n        while i < len(num1) or i < len(num2):\n            if i < len(num1):\n                n1 = int(num1[i])\n            else:\n                n1 = 0\n            if i < len(num2):\n                n2 = int(num2[i])\n            else:\n                n2 = 0\n            res.append(str((n1 + n2) % 10))\n            i += 1\n        if res[-1] == '0':\n            res.pop()\n        return ''.join(res[::-1])"}], "basic-calculator": [{"task_id": "basic-calculator", "completion": "class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        s = s.replace(\" \", \"\")\n        stack = []\n        num = 0\n        sign = \"+\"\n        for i in range(len(s)):\n            if s[i].isdigit():\n                num = num * 10 + int(s[i])\n            if s[i] in \"+-()\" or i == len(s) - 1:\n                if sign == \"+\":\n                    stack.append(num)\n                elif sign == \"-\":\n                    stack.append(-num)\n                elif sign == \"*\":\n                    stack[-1] *= num\n                else:\n                    stack[-1] = int(stack[-1] / num)\n                num = 0\n                sign = s[i]\n        return sum(stack)"}], "ipo": [{"task_id": "ipo", "completion": "class Solution(object):\n    def findMaximizedCapital(self, k, w, profits, capital):\n        \"\"\"\n        :type k: int\n        :type w: int\n        :type profits: List[int]\n        :type capital: List[int]\n        :rtype: int\n        \"\"\""}], "valid-parentheses": [{"task_id": "valid-parentheses", "completion": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        stack = []\n        for i in s:\n            if i == '(':\n                stack.append(')')\n            elif i == '{':\n                stack.append('}')\n            elif i == '[':\n                stack.append(']')\n            elif len(stack) == 0 or i != stack.pop():\n                return False\n        return len(stack) == 0"}], "next-permutation": [{"task_id": "next-permutation", "completion": "class Solution(object):\n    def nextPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        i = len(nums) - 2\n        while i >= 0 and nums[i] >= nums[i + 1]:\n            i -= 1\n        if i >= 0:\n            j = len(nums) - 1\n            while j >= 0 and nums[j] <= nums[i]:\n                j -= 1\n            nums[i], nums[j] = nums[j], nums[i]\n        i += 1\n        j = len(nums) - 1\n        while i < j:\n            nums[i], nums[j] = nums[j], nums[i]\n            i += 1\n            j -= 1"}], "contains-duplicate-ii": [{"task_id": "contains-duplicate-ii", "completion": "class Solution(object):\n    def containsNearbyDuplicate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        \n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] == nums[j] and abs(i-j) <= k:\n                    return True\n        return False"}], "maximum-gap": [{"task_id": "maximum-gap", "completion": "class Solution(object):\n    def maximumGap(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 2:\n            return 0\n        \n        nums.sort()\n        max_gap = 0\n        for i in range(1, len(nums)):\n            max_gap = max(max_gap, nums[i] - nums[i - 1])\n        \n        return max_gap"}], "binary-tree-level-order-traversal": [{"task_id": "binary-tree-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        res = []\n        while queue:\n            temp = []\n            for i in range(len(queue)):\n                node = queue.pop(0)\n                temp.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            res.append(temp)\n        return res"}], "couples-holding-hands": [{"task_id": "couples-holding-hands", "completion": "class Solution(object):\n    def minSwapsCouples(self, row):\n        \"\"\"\n        :type row: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(row)\n        if n <= 2:\n            return 0\n        ans = 0\n        for i in range(0, n, 2):\n            if row[i] % 2 == 1:\n                ans += 1\n            if row[i + 1] % 2 == 0:\n                ans += 1\n        return ans // 2"}], "interleaving-string": [{"task_id": "interleaving-string", "completion": "class Solution(object):\n    def isInterleave(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) + len(s2) != len(s3):\n            return False\n        \n        if len(s1) == 0 and len(s2) == 0 and len(s3) == 0:\n            return True\n        \n        if len(s1) == 0:\n            return s2 == s3\n        \n        if len(s2) == 0:\n            return s1 == s3\n        \n        dp = [[False for i in range(len(s2) + 1)] for j in range(len(s1) + 1)]\n        \n        for i in range(len(s1) + 1):\n            for j in range(len(s2) + 1):\n                if i == 0 and j == 0:\n                    dp[i][j] = True\n                elif i == 0:\n                    dp[i][j] = dp[i][j - 1] and s2[j - 1] == s3[j - 1]\n                elif j == 0:\n                    dp[i][j] = dp[i - 1][j] and s1[i - 1] == s3[i - 1]\n                else:\n                    dp[i][j] = (dp[i - 1][j] and s1[i - 1] == s3[i + j - 1]) or (dp[i][j - 1] and s2[j - 1] == s3[i + j - 1])\n        \n        return dp[len(s1)][len(s2)]"}], "assign-cookies": [{"task_id": "assign-cookies", "completion": "class Solution(object):\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        \n        g.sort()\n        s.sort()\n        i = 0\n        j = 0\n        while i < len(g) and j < len(s):\n            if s[j] >= g[i]:\n                i += 1\n            j += 1\n        return i"}], "keyboard-row": [{"task_id": "keyboard-row", "completion": "class Solution(object):\n    def findWords(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        row1 = set(\"qwertyuiop\")\n        row2 = set(\"asdfghjkl\")\n        row3 = set(\"zxcvbnm\")\n        ans = []\n        for word in words:\n            if word[0].lower() in row1:\n                row = row1\n            elif word[0].lower() in row2:\n                row = row2\n            else:\n                row = row3\n            for letter in word:\n                if letter.lower() not in row:\n                    break\n            else:\n                ans.append(word)\n        return ans"}], "reverse-linked-list-ii": [{"task_id": "reverse-linked-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseBetween(self, head, left, right):\n        \"\"\"\n        :type head: ListNode\n        :type left: int\n        :type right: int\n        :rtype: ListNode\n        \"\"\"\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        for i in range(left - 1):\n            prev = prev.next\n        cur = prev.next\n        for i in range(right - left):\n            temp = cur.next\n            cur.next = temp.next\n            temp.next = prev.next\n            prev.next = temp\n        return dummy.next"}], "shortest-palindrome": [{"task_id": "shortest-palindrome", "completion": "class Solution(object):\n    def shortestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # if s is a palindrome, return s\n        if s == s[::-1]:\n            return s\n        \n        # if s is not a palindrome, add characters to the front of s until it is a palindrome\n        s += '#' + s[::-1][:len(s)-1][::-1]\n        return s"}], "minimum-window-substring": [{"task_id": "minimum-window-substring", "completion": "class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        if len(s) < len(t):\n            return \"\"\n        \n        t_count = Counter(t)\n        s_count = Counter()\n        left = 0\n        right = 0\n        min_len = len(s) + 1\n        min_left = 0\n        min_right = 0\n        \n        while right < len(s):\n            s_count[s[right]] += 1\n            if s_count[s[right]] <= t_count[s[right]]:\n                right += 1\n            while s_count[s[left]] > t_count[s[left]]:\n                s_count[s[left]] -= 1\n                left += 1\n            if right - left < min_len:\n                min_len = right - left\n                min_left = left\n                min_right = right\n            right += 1\n        \n        return s[min_left:min_right] if min_len < len(s) + 1 else \"\""}], "self-crossing": [{"task_id": "self-crossing", "completion": "class Solution(object):\n    def isSelfCrossing(self, distance):\n        \"\"\"\n        :type distance: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        n = len(distance)\n        for i in range(3, n):\n            if distance[i] >= distance[i - 2] and distance[i - 1] <= distance[i - 3]:\n                return True\n            if i >= 4 and distance[i] + distance[i - 4] >= distance[i - 2] and distance[i - 1] == distance[i - 3]:\n                return True\n            if i >= 5 and distance[i] + distance[i - 4] >= distance[i - 2] and distance[i - 1] + distance[i - 5] >= distance[i - 3] and distance[i - 2] + distance[i - 4] >= distance[i - 4]:\n                return True\n        return False"}], "remove-duplicates-from-sorted-list": [{"task_id": "remove-duplicates-from-sorted-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        curr = head\n        while curr:\n            while curr.next and curr.val == curr.next.val:\n                curr.next = curr.next.next\n            curr = curr.next\n        return head"}], "longest-palindrome": [{"task_id": "longest-palindrome", "completion": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        d = {}\n        for i in s:\n            if i in d:\n                d[i] += 1\n            else:\n                d[i] = 1\n        ans = 0\n        for i in d.values():\n            ans += i // 2 * 2\n            if ans % 2 == 0 and i % 2 == 1:\n                ans += 1\n        return ans"}], "construct-binary-tree-from-inorder-and-postorder-traversal": [{"task_id": "construct-binary-tree-from-inorder-and-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if len(inorder) == 0:\n            return None\n        \n        root = TreeNode(postorder[-1])\n        i = inorder.index(root.val)\n        root.left = self.buildTree(inorder[:i], postorder[:i])\n        root.right = self.buildTree(inorder[i+1:], postorder[i:len(postorder)-1])\n        return root"}], "cut-off-trees-for-golf-event": [{"task_id": "cut-off-trees-for-golf-event", "completion": "class Solution(object):\n    def cutOffTree(self, forest):\n        \"\"\"\n        :type forest: List[List[int]]\n        :rtype: int\n        \"\"\""}], "minimum-depth-of-binary-tree": [{"task_id": "minimum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def minDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        if not root.left and not root.right:\n            return 1\n        \n        if not root.left:\n            return self.minDepth(root.right) + 1\n        \n        if not root.right:\n            return self.minDepth(root.left) + 1\n        \n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1"}], "count-of-range-sum": [{"task_id": "count-of-range-sum", "completion": "class Solution(object):\n    def countRangeSum(self, nums, lower, upper):\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\""}], "arranging-coins": [{"task_id": "arranging-coins", "completion": "class Solution(object):\n    def arrangeCoins(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        return int((2 * n + 0.25) ** 0.5 - 0.5)"}], "longest-uncommon-subsequence-i": [{"task_id": "longest-uncommon-subsequence-i", "completion": "class Solution(object):\n    def findLUSlength(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: int\n        \"\"\"\n        \n        if a == b:\n            return -1\n        else:\n            return max(len(a), len(b))"}], "binary-tree-level-order-traversal-ii": [{"task_id": "binary-tree-level-order-traversal-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        q = [root]\n        res = []\n        while q:\n            res.append([node.val for node in q])\n            q = [child for node in q for child in (node.left, node.right) if child]\n        return res[::-1]"}], "palindrome-number": [{"task_id": "palindrome-number", "completion": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        \n        if x < 0:\n            return False\n        \n        if x == 0:\n            return True\n        \n        if x % 10 == 0:\n            return False\n        \n        rev = 0\n        while x > rev:\n            rev = rev * 10 + x % 10\n            x = x // 10\n        \n        return x == rev or x == rev // 10"}], "decode-ways": [{"task_id": "decode-ways", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if not s or s[0] == '0':\n            return 0\n        if len(s) == 1:\n            return 1\n        \n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, len(dp)):\n            if s[i - 1] != '0':\n                dp[i] = dp[i - 1]\n            if s[i - 2] != '0' and int(s[i - 2: i]) <= 26:\n                dp[i] += dp[i - 2]\n        \n        return dp[-1]"}], "is-subsequence": [{"task_id": "is-subsequence", "completion": "class Solution(object):\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        i = 0\n        j = 0\n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n            j += 1\n        return i == len(s)"}], "gray-code": [{"task_id": "gray-code", "completion": "class Solution(object):\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        res = []\n        for i in range(2**n):\n            res.append(i ^ i>>1)\n        return res"}], "climbing-stairs": [{"task_id": "climbing-stairs", "completion": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        return self.climbStairs(n-1) + self.climbStairs(n-2)"}], "word-break": [{"task_id": "word-break", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        \n        dp = [False] * (len(s) + 1)\n        dp[0] = True\n        \n        for i in range(1, len(s) + 1):\n            for j in range(i):\n                if dp[j] and s[j:i] in wordDict:\n                    dp[i] = True\n                    break\n        \n        return dp[-1]"}], "validate-binary-search-tree": [{"task_id": "validate-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def isValid(node, left, right):\n            if not node:\n                return True\n            \n            if (left and node.val <= left.val) or (right and node.val >= right.val):\n                return False\n            \n            return isValid(node.left, left, node) and isValid(node.right, node, right)\n        \n        return isValid(root, None, None)"}], "insert-interval": [{"task_id": "insert-interval", "completion": "class Solution(object):\n    def insert(self, intervals, newInterval):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type newInterval: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        intervals.append(newInterval)\n        intervals.sort()\n        res = []\n        for i in intervals:\n            if not res or res[-1][1] < i[0]:\n                res.append(i)\n            else:\n                res[-1][1] = max(res[-1][1], i[1])\n        return res"}], "palindrome-partitioning": [{"task_id": "palindrome-partitioning", "completion": "class Solution(object):\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def isPalindrome(s):\n            return s == s[::-1]\n        \n        def dfs(s, i, path):\n            if i == len(s):\n                res.append(path[:])\n                return\n            for j in range(i, len(s)):\n                if isPalindrome(s[i:j+1]):\n                    path.append(s[i:j+1])\n                    dfs(s, j+1, path)\n                    path.pop()\n        \n        res = []\n        dfs(s, 0, [])\n        return res"}], "smallest-range-covering-elements-from-k-lists": [{"task_id": "smallest-range-covering-elements-from-k-lists", "completion": "class Solution(object):\n    def smallestRange(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[int]\n        \"\"\""}], "poor-pigs": [{"task_id": "poor-pigs", "completion": "class Solution(object):\n    def poorPigs(self, buckets, minutesToDie, minutesToTest):\n        \"\"\"\n        :type buckets: int\n        :type minutesToDie: int\n        :type minutesToTest: int\n        :rtype: int\n        \"\"\"\n        \n        n = minutesToTest / minutesToDie + 1\n        return math.ceil(math.log(buckets, n) / math.log(n))"}], "swim-in-rising-water": [{"task_id": "swim-in-rising-water", "completion": "class Solution(object):\n    def swimInWater(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\""}], "unique-paths": [{"task_id": "unique-paths", "completion": "class Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        dp = [[0 for i in range(n)] for j in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if i == 0 or j == 0:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        return dp[m-1][n-1]"}], "multiply-strings": [{"task_id": "multiply-strings", "completion": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        if num1 == \"0\" or num2 == \"0\":\n            return \"0\"\n        \n        num1 = num1[::-1]\n        num2 = num2[::-1]\n        res = [0] * (len(num1) + len(num2))\n        \n        for i in range(len(num1)):\n            for j in range(len(num2)):\n                res[i + j] += int(num1[i]) * int(num2[j])\n                res[i + j + 1] += res[i + j] // 10\n                res[i + j] %= 10\n        \n        res = res[::-1]\n        i = 0\n        while i < len(res) and res[i] == 0:\n            i += 1\n        return \"\".join(map(str, res[i:]))"}], "best-time-to-buy-and-sell-stock-iii": [{"task_id": "best-time-to-buy-and-sell-stock-iii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(prices)\n        if n <= 1:\n            return 0\n        \n        left = [0] * n\n        right = [0] * n\n        \n        min_price = prices[0]\n        for i in range(1, n):\n            min_price = min(min_price, prices[i])\n            left[i] = max(left[i - 1], prices[i] - min_price)\n        \n        max_price = prices[-1]\n        for i in range(n - 2, -1, -1):\n            max_price = max(max_price, prices[i])\n            right[i] = max(right[i + 1], max_price - prices[i])\n        \n        return max(left[i] + right[i] for i in range(n))"}], "combination-sum-ii": [{"task_id": "combination-sum-ii", "completion": "class Solution(object):\n    def combinationSum2(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        ans = []\n        def dfs(i, target):\n            if target == 0:\n                ans.append(candidates[:])\n                return\n            for j in range(i, len(candidates)):\n                if target < candidates[j]:\n                    break\n                if j > i and candidates[j] == candidates[j-1]:\n                    continue\n                candidates[j], candidates[j-1] = candidates[j-1], candidates[j]\n                dfs(j+1, target - candidates[j])\n                candidates[j], candidates[j-1] = candidates[j-1], candidates[j]\n        dfs(0, target)\n        return ans"}], "detect-capital": [{"task_id": "detect-capital", "completion": "class Solution(object):\n    def detectCapitalUse(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if word.isupper() or word.islower():\n            return True\n        if word[0].isupper() and word[1:].islower():\n            return True\n        return False"}], "best-time-to-buy-and-sell-stock": [{"task_id": "best-time-to-buy-and-sell-stock", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_profit = 0\n        min_price = float('inf')\n        \n        for price in prices:\n            min_price = min(min_price, price)\n            max_profit = max(max_profit, price - min_price)\n        \n        return max_profit"}], "binary-tree-inorder-traversal": [{"task_id": "binary-tree-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        stack = []\n        res = []\n        while root or stack:\n            while root:\n                stack.append(root)\n                root = root.left\n            root = stack.pop()\n            res.append(root.val)\n            root = root.right\n        return res"}], "construct-binary-tree-from-preorder-and-inorder-traversal": [{"task_id": "construct-binary-tree-from-preorder-and-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not preorder:\n            return None\n        \n        root = TreeNode(preorder[0])\n        i = inorder.index(preorder[0])\n        root.left = self.buildTree(preorder[1:i+1], inorder[:i])\n        root.right = self.buildTree(preorder[i+1:], inorder[i+1:])\n        return root"}], "remove-invalid-parentheses": [{"task_id": "remove-invalid-parentheses", "completion": "class Solution(object):\n    def removeInvalidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\""}], "merge-k-sorted-lists": [{"task_id": "merge-k-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        \n        def merge(l1, l2):\n            if not l1:\n                return l2\n            if not l2:\n                return l1\n            if l1.val < l2.val:\n                l1.next = merge(l1.next, l2)\n                return l1\n            else:\n                l2.next = merge(l1, l2.next)\n                return l2\n        \n        if not lists:\n            return None\n        while len(lists) > 1:\n            merged = []\n            for i in range(0, len(lists), 2):\n                l1 = lists[i]\n                l2 = lists[i + 1] if i + 1 < len(lists) else None\n                merged.append(merge(l1, l2))\n            lists = merged\n        return lists[0]"}], "palindrome-partitioning-ii": [{"task_id": "palindrome-partitioning-ii", "completion": "class Solution(object):\n    def minCut(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        n = len(s)\n        dp = [n] * n\n        dp[0] = -1\n        for i in range(1, n):\n            dp[i] = i\n            for j in range(i):\n                if s[j:i+1] == s[j:i+1][::-1]:\n                    dp[i] = min(dp[i], dp[j-1] + 1)\n        return dp[n-1]"}], "preimage-size-of-factorial-zeroes-function": [{"task_id": "preimage-size-of-factorial-zeroes-function", "completion": "class Solution(object):\n    def preimageSizeFZF(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def f(x):\n            return x / 5 + x / 25 + x / 125\n        \n        l, r = 0, 10 ** 9\n        while l < r:\n            m = (l + r) / 2\n            if f(m) < k:\n                l = m + 1\n            else:\n                r = m\n        return l"}], "palindrome-pairs": [{"task_id": "palindrome-pairs", "completion": "class Solution(object):\n    def palindromePairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def isPalindrome(s):\n            return s == s[::-1]\n        \n        ans = []\n        for i in range(len(words)):\n            for j in range(len(words)):\n                if i != j and isPalindrome(words[i] + words[j]):\n                    ans.append([i, j])\n        return ans"}], "convert-sorted-array-to-binary-search-tree": [{"task_id": "convert-sorted-array-to-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedArrayToBST(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        def helper(left, right):\n            if left > right:\n                return None\n            \n            mid = (left + right) // 2\n            root = TreeNode(nums[mid])\n            root.left = helper(left, mid - 1)\n            root.right = helper(mid + 1, right)\n            return root\n        \n        return helper(0, len(nums) - 1)"}], "contain-virus": [{"task_id": "contain-virus", "completion": "class Solution(object):\n    def containVirus(self, isInfected):\n        \"\"\"\n        :type isInfected: List[List[int]]\n        :rtype: int\n        \"\"\""}], "longest-increasing-path-in-a-matrix": [{"task_id": "longest-increasing-path-in-a-matrix", "completion": "class Solution(object):\n    def longestIncreasingPath(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        ans = 0\n        \n        def dfs(i, j):\n            if dp[i][j]:\n                return dp[i][j]\n            \n            dp[i][j] = 1\n            \n            for x, y in ((i, j - 1), (i, j + 1), (i - 1, j), (i + 1, j)):\n                if 0 <= x < m and 0 <= y < n and matrix[x][y] > matrix[i][j]:\n                    dp[i][j] = max(dp[i][j], dfs(x, y) + 1)\n            \n            return dp[i][j]\n        \n        for i in range(m):\n            for j in range(n):\n                ans = max(ans, dfs(i, j))\n        \n        return ans"}], "number-of-digit-one": [{"task_id": "number-of-digit-one", "completion": "class Solution(object):\n    def countDigitOne(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        count = 0\n        i = 1\n        while i <= n:\n            count += (n // i) * i + min(i, n % i)\n            i *= 10\n        return count"}], "word-break-ii": [{"task_id": "word-break-ii", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        n = len(s)\n        dp = [False] * (n + 1)\n        dp[0] = True\n        for i in range(1, n + 1):\n            for j in range(i):\n                if dp[j] and s[j:i] in wordDict:\n                    dp[i] = True\n                    break\n        if dp[n]:\n            return self.dfs(s, 0, n, dp, wordDict)\n        return []\n    \n    def dfs(self, s, i, n, dp, wordDict):\n        if i == n:\n            return [\"\"]\n        res = []\n        for j in range(i, n):\n            if dp[j + 1] and s[i:j + 1] in wordDict:\n                for item in self.dfs(s, j + 1, n, dp, wordDict):\n                    res.append(s[i:j + 1] + \" \" + item)\n        return res"}], "binary-tree-zigzag-level-order-traversal": [{"task_id": "binary-tree-zigzag-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def zigzagLevelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        leftToRight = True\n        \n        while queue:\n            level = []\n            for _ in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            if not leftToRight:\n                level.reverse()\n            result.append(level)\n            leftToRight = not leftToRight\n        \n        return result"}], "binary-watch": [{"task_id": "binary-watch", "completion": "class Solution(object):\n    def readBinaryWatch(self, turnedOn):\n        \"\"\"\n        :type turnedOn: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def get_hour(hour):\n            if hour == 0:\n                return []\n            if hour == 1:\n                return ['0:01','0:02','0:04','0:08','0:16','0:32','0:64','1:00','2:00','4:00','8:00']\n            if hour == 2:\n                return ['0:09','0:18','0:36','0:54','0:72','0:90','1:09','2:18','4:36','8:54']\n            if hour == 3:\n                return ['0:05','0:10','0:15','0:20','0:25','0:30','0:35','0:40','0:45','0:50','0:55','1:05','2:10','4:15','8:30']\n            if hour == 4:\n                return ['0:03','0:06','0:09','0:12','0:15','0:18','0:21','0:24','0:27','0:30','0:33','0:36','0:39','0:42','0:45','0:48','0:51','0:54','0:57','1:03','2:06','4:09','8:12']\n            if hour == 5:\n                return ['0:02','0:04','0:06','0:08','0:10','0:12','0:14','0:16','0:18','0:20','0:22','0:24','0:26','0:28','0:30','0:32','0:34','0:36','0:38','0:40','0:42','0:44','0:46','0:48','0:50','0:52','0:54','0:56','0:58','1:02','2:04','4:06','8:08']\n            if hour == 6:\n                return ['0:01','0:02','0:04','0:06','0:08','0:10','0:12','0:14','0:16','0:18','0:20','0:22','0:24','0:26','0:28','0:30','0:32','0:34','0:36','0:38','0:40','0:42','0:44','0:46','0:48','0:50','0:52','0:54','0:56','0:58','1:03','2:06','4:09','8:12']\n            if hour == 7:\n                return ['0:05','0:09','0:13','0:17','0:21','0:25','0:29','0:33','0:37','0:41','0:45','0:49','0:53','0:57','1:01','2:05','4:09','8:13']\n            if hour == 8:\n                return ['0:03','0:06','0:09','0:12','0:15','0:18','0:21','0:24','0:27','0:30','0:33','0:36','0:39','0:42','0:45','0:48','0:51','0:54','0:57','1:02','2:05','4:08','8:12']\n            if hour == 9:\n                return ['0:02','0:04','0:06','0:08','0:10','0:12','0:14','0:16','0:18','0:20','0:22','0:24','0:26','0:28','0"}], "pascals-triangle": [{"task_id": "pascals-triangle", "completion": "class Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1],[1,1]]\n        if numRows > 2:\n            res = [[1],[1,1]]\n            for i in range(2,numRows):\n                res.append([1])\n                for j in range(1,i):\n                    res[i].append(res[i-1][j-1] + res[i-1][j])\n                res[i].append(1)\n            return res"}], "power-of-three": [{"task_id": "power-of-three", "completion": "class Solution(object):\n    def isPowerOfThree(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        while n % 3 == 0:\n            n /= 3\n        return n == 1"}], "binary-tree-maximum-path-sum": [{"task_id": "binary-tree-maximum-path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxPathSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        self.max_sum = float('-inf')\n        def dfs(node):\n            if not node:\n                return 0\n            left = dfs(node.left)\n            right = dfs(node.right)\n            self.max_sum = max(self.max_sum, left + node.val + right)\n            return max(node.val + max(left, right), 0)\n        dfs(root)\n        return self.max_sum"}], "trapping-rain-water-ii": [{"task_id": "trapping-rain-water-ii", "completion": "class Solution(object):\n    def trapRainWater(self, heightMap):\n        \"\"\"\n        :type heightMap: List[List[int]]\n        :rtype: int\n        \"\"\""}], "valid-palindrome": [{"task_id": "valid-palindrome", "completion": "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        s = s.lower()\n        s = s.replace(' ', '')\n        s = s.replace('-', '')\n        s = s.replace('_', '')\n        s = s.replace('.', '')\n        s = s.replace(':', '')\n        s = s.replace(';', '')\n        s = s.replace('[', '')\n        s = s.replace(']', '')\n        s = s.replace('{', '')\n        s = s.replace('}', '')\n        s = s.replace('(', '')\n        s = s.replace(')', '')\n        s = s.replace('*', '')\n        s = s.replace('+', '')\n        s = s.replace(',', '')\n        s = s.replace('/', '')\n        s = s.replace('\\\\', '')\n        s = s.replace('|', '')\n        s = s.replace('\"', '')\n        s = s.replace('\\'', '')\n        s = s.replace('`', '')\n        s = s.replace('~', '')\n        s = s.replace('?', '')\n        s = s.replace('=', '')\n        s = s.replace('&', '')\n        s = s.replace('$', '')\n        s = s.replace('@', '')\n        s = s.replace('%', '')\n        s = s.replace('^', '')\n        s = s.replace('#', '')\n        s = s.replace('&', '')\n        s = s.replace('*', '')\n        s = s.replace('+', '')\n        s = s.replace(',', '')\n        s = s.replace('/', '')\n        s = s.replace('\\\\', '')\n        s = s.replace('|', '')\n        s = s.replace('\"', '')\n        s = s.replace('\\'', '')\n        s = s.replace('`', '')\n        s = s.replace('~', '')\n        s = s.replace('?', '')\n        s = s.replace('=', '')\n        s = s.replace('&', '')\n        s = s.replace('$', '')\n        s = s.replace('@', '')\n        s = s.replace('%', '')\n        s = s.replace('^', '')\n        s = s.replace('#', '')\n        s = s.replace('&', '')\n        s = s.replace('*', '')\n        s = s.replace('+', '')\n        s = s.replace(',', '')\n        s = s.replace('/', '')\n        s = s.replace('\\\\', '')\n        s = s.replace('|', '')\n        s = s.replace('\"', '')\n        s = s.replace('\\'', '')\n        s = s.replace('`', '')\n        s = s.replace('~', '')\n        s = s.replace('?', '')\n        s = s.replace('=', '')\n        s = s.replace('&', '')\n        s = s.replace('$', '')\n        s = s.replace('@', '')\n        s = s.replace('%', '')\n        s = s.replace('^', '')\n        s = s.replace('#', '')\n        s = s.replace('&', '')\n        s = s.replace('*', '')\n        s = s.replace('+', '')\n        s = s.replace(',', '')\n        s = s.replace('/', '')\n        s = s.replace('\\\\', '')\n        s = s.replace('|', '')\n        s = s.replace('\"', '')\n        s = s.replace('\\'', '')\n        s = s.replace('`', '')\n        s = s.replace('~', '')\n        s = s.replace('?', '')\n        s = s.replace('=', '')\n        s = s.replace('&', '')\n        s = s.replace('$', '')\n        s = s.replace('@', '')\n        s = s.replace('%', '')\n        s = s."}], "sliding-window-median": [{"task_id": "sliding-window-median", "completion": "class Solution(object):\n    def medianSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[float]\n        \"\"\""}], "rotate-list": [{"task_id": "rotate-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        length = 0\n        cur = head\n        while cur:\n            length += 1\n            cur = cur.next\n        \n        k = k % length\n        if k == 0:\n            return head\n        \n        cur = head\n        for i in range(length - k - 1):\n            cur = cur.next\n        \n        new_head = cur.next\n        cur.next = None\n        cur = new_head\n        while cur.next:\n            cur = cur.next\n        cur.next = head\n        return new_head"}], "ugly-number": [{"task_id": "ugly-number", "completion": "class Solution(object):\n    def isUgly(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 2 == 0:\n            n = n // 2\n        \n        while n % 3 == 0:\n            n = n // 3\n        \n        while n % 5 == 0:\n            n = n // 5\n        \n        return n == 1"}], "falling-squares": [{"task_id": "falling-squares", "completion": "class Solution(object):\n    def fallingSquares(self, positions):\n        \"\"\"\n        :type positions: List[List[int]]\n        :rtype: List[int]\n        \"\"\""}], "sum-of-left-leaves": [{"task_id": "sum-of-left-leaves", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumOfLeftLeaves(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def sumOfLeftLeaves(root):\n            if not root:\n                return 0\n            if root.left and not root.left.left and not root.left.right:\n                return root.left.val + sumOfLeftLeaves(root.right)\n            return sumOfLeftLeaves(root.left) + sumOfLeftLeaves(root.right)\n        \n        return sumOfLeftLeaves(root)"}], "max-sum-of-rectangle-no-larger-than-k": [{"task_id": "max-sum-of-rectangle-no-larger-than-k", "completion": "class Solution(object):\n    def maxSumSubmatrix(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\""}], "divide-two-integers": [{"task_id": "divide-two-integers", "completion": "class Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"\n        \n        if dividend == 0:\n            return 0\n        if dividend == -2147483648 and divisor == -1:\n            return 2147483647\n        if dividend == -2147483648 and divisor == 1:\n            return -2147483648\n        if dividend == -2147483648 and divisor == 2:\n            return -1073741824\n        if dividend == 2147483647 and divisor == 1:\n            return 2147483647\n        if dividend == 2147483647 and divisor == -1:\n            return -2147483648\n        if dividend == 2147483647 and divisor == -2:\n            return 1073741824\n        if dividend == 2147483647 and divisor == 2:\n            return 1073741824\n        if dividend == 2147483647 and divisor == 3:\n            return 65535\n        if dividend == 2147483647 and divisor == 4:\n            return 32767\n        if dividend == 2147483647 and divisor == 5:\n            return 16384\n        if dividend == 2147483647 and divisor == 6:\n            return 8192\n        if dividend == 2147483647 and divisor == 7:\n            return 4096\n        if dividend == 2147483647 and divisor == 8:\n            return 2048\n        if dividend == 2147483647 and divisor == 9:\n            return 1024\n        if dividend == 2147483647 and divisor == 10:\n            return 512\n        if dividend == 2147483647 and divisor == 11:\n            return 256\n        if dividend == 2147483647 and divisor == 12:\n            return 128\n        if dividend == 2147483647 and divisor == 13:\n            return 64\n        if dividend == 2147483647 and divisor == 14:\n            return 32\n        if dividend == 2147483647 and divisor == 15:\n            return 16\n        if dividend == 2147483647 and divisor == 16:\n            return 8\n        if dividend == 2147483647 and divisor == 17:\n            return 4\n        if dividend == 2147483647 and divisor == 18:\n            return 2\n        if dividend == 2147483647 and divisor == 19:\n            return 1\n        if dividend == 2147483647 and divisor == 20:\n            return 0\n        if dividend == 2147483647 and divisor == 21:\n            return 0\n        if dividend == 2147483647 and divisor == 22:\n            return 0\n        if dividend == 2147483647 and divisor == 23:\n            return 0\n        if dividend == 2147483647 and divisor == 24:\n            return 0\n        if dividend == 2147483647 and divisor == 25:\n            return 0\n        if dividend == 2147483647 and divisor == 26:\n            return 0\n        if dividend == 2147483647 and divisor == 27:\n            return 0\n        if dividend == 2147483647 and divisor == 28:\n            return 0"}], "surrounded-regions": [{"task_id": "surrounded-regions", "completion": "class Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        def dfs(i, j):\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != 'O':\n                return\n            board[i][j] = 'T'\n            dfs(i + 1, j)\n            dfs(i - 1, j)\n            dfs(i, j + 1)\n            dfs(i, j - 1)\n        \n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if i == 0 or i == len(board) - 1 or j == 0 or j == len(board[0]) - 1:\n                    dfs(i, j)\n        \n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if board[i][j] == 'O':\n                    board[i][j] = 'X'\n                if board[i][j] == 'T':\n                    board[i][j] = 'O'"}], "two-sum": [{"task_id": "two-sum", "completion": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] + nums[j] == target:\n                    return [i, j]"}], "24-game": [{"task_id": "24-game", "completion": "class Solution(object):\n    def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        def dfs(cards, n):\n            if n == 1:\n                return cards == [24]\n            for i in range(len(cards)):\n                for j in range(i + 1, len(cards)):\n                    for op in ['+', '-', '*', '/']:\n                        new_cards = [cards[i], cards[j], op]\n                        new_cards.extend(cards[:i] + cards[i + 1:j] + cards[j + 1:])\n                        if dfs(new_cards, n - 1):\n                            return True\n            return False\n        \n        return dfs(cards, 4)"}], "wildcard-matching": [{"task_id": "wildcard-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        if not p:\n            return not s\n        \n        if not s:\n            return False\n        \n        if p[0] == '*':\n            return self.isMatch(s, p[1:])\n        \n        if p[0] == '?':\n            return self.isMatch(s[1:], p[1:])\n        \n        if s and p[0] in {s[0], '?'}:\n            return self.isMatch(s[1:], p[1:])\n        \n        return False"}], "majority-element": [{"task_id": "majority-element", "completion": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        return max(set(nums), key = nums.count)"}], "reconstruct-itinerary": [{"task_id": "reconstruct-itinerary", "completion": "class Solution(object):\n    def findItinerary(self, tickets):\n        \"\"\"\n        :type tickets: List[List[str]]\n        :rtype: List[str]\n        \"\"\""}], "4sum": [{"task_id": "4sum", "completion": "class Solution(object):\n    def fourSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        n = len(nums)\n        ans = []\n        for i in range(n):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            for j in range(i+1, n):\n                if j > i+1 and nums[j] == nums[j-1]:\n                    continue\n                l = j+1\n                r = n-1\n                while l < r:\n                    sum = nums[i] + nums[j] + nums[l] + nums[r]\n                    if sum == target:\n                        ans.append([nums[i], nums[j], nums[l], nums[r]])\n                        l += 1\n                        r -= 1\n                        while l < r and nums[l] == nums[l-1]:\n                            l += 1\n                        while l < r and nums[r] == nums[r+1]:\n                            r -= 1\n                    elif sum < target:\n                        l += 1\n                    else:\n                        r -= 1\n        return ans"}], "the-skyline-problem": [{"task_id": "the-skyline-problem", "completion": "class Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\""}], "reverse-string": [{"task_id": "reverse-string", "completion": "class Solution(object):\n    def reverseString(self, s):\n        \"\"\"\n        :type s: List[str]\n        :rtype: None Do not return anything, modify s in-place instead.\n        \"\"\"\n        \n        s.reverse()"}], "reverse-linked-list": [{"task_id": "reverse-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        prev = None\n        curr = head\n        while curr:\n            next = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next\n        return prev"}], "triangle": [{"task_id": "triangle", "completion": "class Solution(object):\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        for i in range(1, len(triangle)):\n            for j in range(len(triangle[i])):\n                if j == 0:\n                    triangle[i][j] += triangle[i - 1][j]\n                elif j == len(triangle[i]) - 1:\n                    triangle[i][j] += triangle[i - 1][j - 1]\n                else:\n                    triangle[i][j] += min(triangle[i - 1][j], triangle[i - 1][j - 1])\n        return min(triangle[-1])"}], "integer-to-english-words": [{"task_id": "integer-to-english-words", "completion": "class Solution(object):\n    def numberToWords(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"Zero\"\n        \n        num_words = {\n            1: \"One\",\n            2: \"Two\",\n            3: \"Three\",\n            4: \"Four\",\n            5: \"Five\",\n            6: \"Six\",\n            7: \"Seven\",\n            8: \"Eight\",\n            9: \"Nine\",\n            10: \"Ten\",\n            11: \"Eleven\",\n            12: \"Twelve\",\n            13: \"Thirteen\",\n            14: \"Fourteen\",\n            15: \"Fifteen\",\n            16: \"Sixteen\",\n            17: \"Seventeen\",\n            18: \"Eighteen\",\n            19: \"Nineteen\",\n            20: \"Twenty\",\n            30: \"Thirty\",\n            40: \"Forty\",\n            50: \"Fifty\",\n            60: \"Sixty\",\n            70: \"Seventy\",\n            80: \"Eighty\",\n            90: \"Ninety\",\n            100: \"Hundred\",\n            1000: \"Thousand\",\n            1000000: \"Million\",\n            1000000000: \"Billion\",\n            1000000000000: \"Trillion\",\n            1000000000000000: \"Quadrillion\",\n            1000000000000000000: \"Quintillion\",\n            10000000000000000000000: \"Sextillion\",\n            100000000000000000000000000: \"Septillion\",\n            1000000000000000000000000000000: \"Octillion\",\n            10000000000000000000000000000000000: \"Nonillion\",\n            100000000000000000000000000000000000000: \"Decillion\",\n            1000000000000000000000000000000000000000000: \"Undecillion\",\n            10000000000000000000000000000000000000000000000: \"Duodecillion\",\n            100000000000000000000000000000000000000000000000000: \"Tredecillion\",\n            100000000000000000000000000000000000000000000000000000: \"Quattuordecillion\",\n            100000000000000000000000000000000000000000000000000000000: \"Quindecillion\",\n            100000000000000000000000000000000000000000000000000000000000: \"Quadecillion\",\n            10000000000000000000000000000000000000000000000000000000000000: \"Tredecillion\",\n            1000000"}], "k-inverse-pairs-array": [{"task_id": "k-inverse-pairs-array", "completion": "class Solution(object):\n    def kInversePairs(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        mod = 1000000007\n        dp = [[0 for _ in range(k + 1)] for _ in range(n + 1)]\n        for i in range(n + 1):\n            dp[i][0] = 1\n        for i in range(1, n + 1):\n            for j in range(1, k + 1):\n                dp[i][j] = (dp[i - 1][j] + dp[i - 1][j - 1]) % mod\n                if j >= i:\n                    dp[i][j] = (dp[i][j] - dp[i - 1][j - i] + mod) % mod\n        return dp[n][k]"}], "swap-nodes-in-pairs": [{"task_id": "swap-nodes-in-pairs", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        cur = dummy\n        \n        while cur.next and cur.next.next:\n            a = cur.next\n            b = a.next\n            c = b.next\n            \n            cur.next = b\n            b.next = a\n            a.next = c\n            \n            cur = a\n            \n        return dummy.next"}], "path-sum": [{"task_id": "path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def hasPathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: bool\n        \"\"\"\n        \n        if not root:\n            return False\n        \n        if not root.left and not root.right:\n            return targetSum == root.val\n        \n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)"}], "partition-list": [{"task_id": "partition-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def partition(self, head, x):\n        \"\"\"\n        :type head: ListNode\n        :type x: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        left = ListNode(0)\n        right = ListNode(0)\n        l = left\n        r = right\n        \n        while head:\n            if head.val < x:\n                l.next = head\n                l = l.next\n            else:\n                r.next = head\n                r = r.next\n            head = head.next\n        \n        l.next = right.next\n        r.next = None\n        \n        return left.next"}], "redundant-connection-ii": [{"task_id": "redundant-connection-ii", "completion": "class Solution(object):\n    def findRedundantDirectedConnection(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        n = len(edges)\n        parent = [i for i in range(n + 1)]\n        def find(x):\n            if parent[x] != x:\n                parent[x] = find(parent[x])\n            return parent[x]\n        \n        def union(x, y):\n            parent[find(x)] = find(y)\n        \n        for u, v in edges:\n            if find(u) == find(v):\n                return [u, v]\n            else:\n                union(u, v)\n        \n        for u, v in edges:\n            if find(u) == find(v):\n                return [u, v]\n            else:\n                union(u, v)\n        \n        return [u, v]"}], "permutations-ii": [{"task_id": "permutations-ii", "completion": "class Solution(object):\n    def permuteUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def backtrack(nums, res, path):\n            if len(nums) == 0:\n                res.append(path)\n                return\n            for i in range(len(nums)):\n                backtrack(nums[:i] + nums[i+1:], res, path + [nums[i]])\n        \n        nums.sort()\n        res = []\n        backtrack(nums, res, [])\n        return res"}], "add-digits": [{"task_id": "add-digits", "completion": "class Solution(object):\n    def addDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        while num > 9:\n            num = sum(map(int, str(num)))\n        return num"}], "single-number": [{"task_id": "single-number", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        return 2 * sum(set(nums)) - sum(nums)"}], "length-of-last-word": [{"task_id": "length-of-last-word", "completion": "class Solution(object):\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        s = s.strip()\n        return len(s.split()[-1])"}], "cherry-pickup": [{"task_id": "cherry-pickup", "completion": "class Solution(object):\n    def cherryPickup(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\""}], "student-attendance-record-ii": [{"task_id": "student-attendance-record-ii", "completion": "class Solution(object):\n    def checkRecord(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        mod = 10**9 + 7\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        for i in range(1, n + 1):\n            dp[i] = (dp[i - 1] + dp[i - 1] + dp[i - 1]) % mod\n            if i >= 2:\n                dp[i] = (dp[i] + dp[i - 2]) % mod\n            if i >= 3:\n                dp[i] = (dp[i] + dp[i - 3]) % mod\n        return dp[n]"}], "happy-number": [{"task_id": "happy-number", "completion": "class Solution(object):\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        def get_next(n):\n            total_sum = 0\n            while n > 0:\n                n, digit = divmod(n, 10)\n                total_sum += digit ** 2\n            return total_sum\n        \n        slow = n\n        fast = get_next(n)\n        while fast != 1 and fast != slow:\n            slow = get_next(slow)\n            fast = get_next(get_next(fast))\n        return fast == 1"}], "search-insert-position": [{"task_id": "search-insert-position", "completion": "class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        for i in range(len(nums)):\n            if nums[i] >= target:\n                return i\n        return len(nums)"}], "jump-game": [{"task_id": "jump-game", "completion": "class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        n = len(nums)\n        if n == 1:\n            return True\n        if nums[0] == 0:\n            return False\n        max_jump = nums[0]\n        for i in range(1, n):\n            if max_jump == 0:\n                return False\n            max_jump = max(max_jump - 1, nums[i])\n        return True"}], "minimum-path-sum": [{"task_id": "minimum-path-sum", "completion": "class Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(grid)\n        n = len(grid[0])\n        dp = [[0 for i in range(n)] for j in range(m)]\n        dp[0][0] = grid[0][0]\n        for i in range(1, m):\n            dp[i][0] = dp[i-1][0] + grid[i][0]\n        for i in range(1, n):\n            dp[0][i] = dp[0][i-1] + grid[0][i]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n        return dp[m-1][n-1]"}], "count-and-say": [{"task_id": "count-and-say", "completion": "class Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        \n        if n == 1:\n            return \"1\"\n        else:\n            s = self.countAndSay(n-1)\n            res = \"\"\n            i = 0\n            while i < len(s):\n                count = 0\n                while i < len(s) and s[i] == s[i+1]:\n                    count += 1\n                    i += 1\n                res += str(count) + s[i]\n                i += 1\n            return res"}], "split-array-largest-sum": [{"task_id": "split-array-largest-sum", "completion": "class Solution(object):\n    def splitArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def isPossible(nums, k, mid):\n            c = 1\n            cur = 0\n            for i in range(len(nums)):\n                if cur + nums[i] <= mid:\n                    cur += nums[i]\n                else:\n                    c += 1\n                    cur = nums[i]\n            return c <= k\n        \n        l = max(nums)\n        r = sum(nums)\n        while l < r:\n            mid = (l + r) // 2\n            if isPossible(nums, k, mid):\n                r = mid\n            else:\n                l = mid + 1\n        return l"}], "search-in-rotated-sorted-array": [{"task_id": "search-in-rotated-sorted-array", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        l = 0\n        r = len(nums) - 1\n        while l <= r:\n            mid = (l + r) // 2\n            if nums[mid] == target:\n                return mid\n            if nums[l] <= nums[mid]:\n                if nums[l] <= target and target < nums[mid]:\n                    r = mid - 1\n                else:\n                    l = mid + 1\n            else:\n                if nums[mid] < target and target <= nums[r]:\n                    l = mid + 1\n                else:\n                    r = mid - 1\n        return -1"}], "letter-combinations-of-a-phone-number": [{"task_id": "letter-combinations-of-a-phone-number", "completion": "class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        \n        if len(digits) == 0:\n            return []\n        \n        digit_map = {\n            '2': 'abc',\n            '3': 'def',\n            '4': 'ghi',\n            '5': 'jkl',\n            '6': 'mno',\n            '7': 'pqrs',\n            '8': 'tuv',\n            '9': 'wxyz'\n        }\n        \n        def backtrack(digits, digit_map, index, path, res):\n            if index == len(digits):\n                res.append(''.join(path))\n                return\n            \n            for i in range(index, len(digits)):\n                for c in digit_map[digits[i]]:\n                    path.append(c)\n                    backtrack(digits, digit_map, i + 1, path, res)\n                    path.pop()\n        \n        res = []\n        backtrack(digits, digit_map, 0, [], res)\n        return res"}], "combination-sum": [{"task_id": "combination-sum", "completion": "class Solution(object):\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        res = []\n        def dfs(i, target, path):\n            if target == 0:\n                res.append(path)\n                return\n            for j in range(i, len(candidates)):\n                if target - candidates[j] < 0:\n                    break\n                dfs(j, target - candidates[j], path + [candidates[j]])\n        dfs(0, target, [])\n        return res"}], "find-the-closest-palindrome": [{"task_id": "find-the-closest-palindrome", "completion": "class Solution(object):\n    def nearestPalindromic(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\""}], "spiral-matrix-ii": [{"task_id": "spiral-matrix-ii", "completion": "class Solution(object):\n    def generateMatrix(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        matrix = [[0 for i in range(n)] for j in range(n)]\n        i = 0\n        j = 0\n        count = 1\n        while count <= n*n:\n            matrix[i][j] = count\n            count += 1\n            if i + 1 < n and matrix[i + 1][j] == 0:\n                i += 1\n            else:\n                j += 1\n                i -= 1\n                while j < n and matrix[i][j] != 0:\n                    j += 1\n                i += 1\n                while i < n and matrix[i][j] != 0:\n                    i += 1\n                j -= 1\n                i -= 1\n                while j >= 0 and matrix[i][j] != 0:\n                    j -= 1\n                i += 1\n                while i < n and matrix[i][j] != 0:\n                    i += 1\n                j += 1\n                i -= 1\n                while j < n and matrix[i][j] != 0:\n                    j += 1\n        return matrix"}], "reverse-integer": [{"task_id": "reverse-integer", "completion": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x < 0:\n            x = -x\n            x = str(x)\n            x = x[::-1]\n            x = int(x)\n            x = -x\n        else:\n            x = str(x)\n            x = x[::-1]\n            x = int(x)\n        if x < -2**31 or x > 2**31 - 1:\n            return 0\n        else:\n            return x"}], "rotate-image": [{"task_id": "rotate-image", "completion": "class Solution(object):\n    def rotate(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        n = len(matrix)\n        for i in range(n):\n            for j in range(i, n):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n        \n        for i in range(n):\n            for j in range(n // 2):\n                matrix[i][j], matrix[i][n - j - 1] = matrix[i][n - j - 1], matrix[i][j]"}], "maximum-product-subarray": [{"task_id": "maximum-product-subarray", "completion": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_prod = nums[0]\n        min_prod = nums[0]\n        result = nums[0]\n        \n        for i in range(1, len(nums)):\n            max_prod, min_prod = max(nums[i], nums[i] * max_prod, nums[i] * min_prod), min(nums[i], nums[i] * max_prod, nums[i] * min_prod)\n            result = max(result, max_prod)\n        \n        return result"}], "frog-jump": [{"task_id": "frog-jump", "completion": "class Solution(object):\n    def canCross(self, stones):\n        \"\"\"\n        :type stones: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        stone_set = set(stones)\n        stone_set.add(0)\n        stone_set.add(stones[-1])\n        stone_set = list(stone_set)\n        stone_set.sort()\n        stone_set = [0] + stone_set\n        stone_set_len = len(stone_set)\n        stone_set_len_minus_one = stone_set_len - 1\n        stone_set_len_minus_two = stone_set_len - 2\n        stone_set_len_minus_three = stone_set_len - 3\n        stone_set_len_minus_four = stone_set_len - 4\n        stone_set_len_minus_five = stone_set_len - 5\n        stone_set_len_minus_six = stone_set_len - 6\n        stone_set_len_minus_seven = stone_set_len - 7\n        stone_set_len_minus_eight = stone_set_len - 8\n        stone_set_len_minus_nine = stone_set_len - 9\n        stone_set_len_minus_ten = stone_set_len - 10\n        stone_set_len_minus_eleven = stone_set_len - 11\n        stone_set_len_minus_twelve = stone_set_len - 12\n        stone_set_len_minus_thirteen = stone_set_len - 13\n        stone_set_len_minus_fourteen = stone_set_len - 14\n        stone_set_len_minus_fifteen = stone_set_len - 15\n        stone_set_len_minus_sixteen = stone_set_len - 16\n        stone_set_len_minus_seventeen = stone_set_len - 17\n        stone_set_len_minus_eighteen = stone_set_len - 18\n        stone_set_len_minus_nineteen = stone_set_len - 19\n        stone_set_len_minus_twenty = stone_set_len - 20\n        stone_set_len_minus_twenty_one = stone_set_len - 21\n        stone_set_len_minus_twenty_two = stone_set_len - 22\n        stone_set_len_minus_twenty_three = stone_set_len - 23\n        stone_set_len_minus_twenty_four = stone_set_len - 24\n        stone_set_len_minus_twenty_five = stone_set_len - 25\n        stone_set_len_minus_twenty_six = stone_set_len - 26\n        stone_set_len_minus_twenty_seven = stone_set_len - 27\n        stone_set_len_minus_twenty_eight = stone_set_len - 28\n        stone_set_len_minus_twenty_nine = stone_set_len - 29\n        stone_set_len_minus_thirty = stone_set_len - 30\n        stone_set_len_minus_thirty_one = stone_set_len - 31\n        stone_set_len_minus_thirty_two = stone_set_len - 32\n        stone_set_len_minus_thirty_three = stone_set_len - 33\n        stone_set_len_minus_thirty_four = stone_set_len - 34\n        stone_set_len_minus_thirty_five = stone_set_len - 35\n        stone_set_len_minus_thirty_six = stone_set_len - 36\n        stone_set_len_minus_thirty_seven = stone_set_len - 37\n        stone_set_len_minus_thirty_eight = stone_set_len - 38\n        stone_set_len_minus_thirty_nine = stone_set_len - 39\n        stone_set_len_minus_forty = stone_set_len - 40\n        stone_set_len_minus_forty_one = stone_set_len - 41\n        stone_set_len_minus_forty_"}], "relative-ranks": [{"task_id": "relative-ranks", "completion": "class Solution(object):\n    def findRelativeRanks(self, score):\n        \"\"\"\n        :type score: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        score_sorted = sorted(score, reverse=True)\n        score_dict = {}\n        for i in range(len(score_sorted)):\n            score_dict[score_sorted[i]] = i + 1\n        \n        answer = []\n        for i in score:\n            answer.append(str(score_dict[i]))\n        \n        for i in range(len(answer)):\n            if answer[i] == \"1\":\n                answer[i] = \"Gold Medal\"\n            elif answer[i] == \"2\":\n                answer[i] = \"Silver Medal\"\n            elif answer[i] == \"3\":\n                answer[i] = \"Bronze Medal\"\n        \n        return answer"}], "longest-substring-without-repeating-characters": [{"task_id": "longest-substring-without-repeating-characters", "completion": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        max_len = 0\n        cur_len = 0\n        cur_str = ''\n        for i in range(len(s)):\n            if s[i] in cur_str:\n                max_len = max(max_len, cur_len)\n                cur_len = cur_len - cur_str.index(s[i])\n                cur_str = cur_str[cur_str.index(s[i]) + 1:]\n            cur_str += s[i]\n            cur_len += 1\n        max_len = max(max_len, cur_len)\n        return max_len"}], "substring-with-concatenation-of-all-words": [{"task_id": "substring-with-concatenation-of-all-words", "completion": "class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not s or not words:\n            return []\n        \n        word_len = len(words[0])\n        word_count = len(words)\n        word_dict = {}\n        for word in words:\n            if word in word_dict:\n                word_dict[word] += 1\n            else:\n                word_dict[word] = 1\n        \n        res = []\n        for i in range(len(s) - word_len * word_count + 1):\n            word_dict_copy = word_dict.copy()\n            j = i\n            while j < i + word_len * word_count:\n                word = s[j:j + word_len]\n                if word in word_dict_copy:\n                    word_dict_copy[word] -= 1\n                    if word_dict_copy[word] == 0:\n                        del word_dict_copy[word]\n                j += word_len\n            if not word_dict_copy:\n                res.append(i)\n        \n        return res"}], "max-chunks-to-make-sorted-ii": [{"task_id": "max-chunks-to-make-sorted-ii", "completion": "class Solution(object):\n    def maxChunksToSorted(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_val = arr[0]\n        chunks = 0\n        for i in range(len(arr)):\n            if arr[i] > max_val:\n                max_val = arr[i]\n            if i == max_val:\n                chunks += 1\n                max_val = 0\n        return chunks"}], "insertion-sort-list": [{"task_id": "insertion-sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def insertionSortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        cur = head\n        while cur:\n            if cur.next and cur.val > cur.next.val:\n                prev = dummy\n                while prev.next.val < cur.next.val:\n                    prev = prev.next\n                cur.next, cur.next.next, prev.next = cur.next.next, cur.next.next, cur.next\n            else:\n                cur = cur.next\n        return dummy.next"}], "remove-duplicates-from-sorted-list-ii": [{"task_id": "remove-duplicates-from-sorted-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        cur = head\n        \n        while cur:\n            if cur.next and cur.val == cur.next.val:\n                while cur.next and cur.val == cur.next.val:\n                    cur = cur.next\n                prev.next = cur.next\n            else:\n                prev = cur\n            cur = cur.next\n        \n        return dummy.next"}], "3sum": [{"task_id": "3sum", "completion": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        for i in range(len(nums)-2):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            l = i + 1\n            r = len(nums) - 1\n            while l < r:\n                sum = nums[i] + nums[l] + nums[r]\n                if sum < 0:\n                    l += 1\n                elif sum > 0:\n                    r -= 1\n                else:\n                    res.append([nums[i], nums[l], nums[r]])\n                    l += 1\n                    r -= 1\n                    while l < r and nums[l] == nums[l-1]:\n                        l += 1\n                    while l < r and nums[r] == nums[r+1]:\n                        r -= 1\n        return res"}], "edit-distance": [{"task_id": "edit-distance", "completion": "class Solution(object):\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        \n        m = len(word1)\n        n = len(word2)\n        dp = [[0 for i in range(n+1)] for j in range(m+1)]\n        for i in range(m+1):\n            dp[i][0] = i\n        for j in range(n+1):\n            dp[0][j] = j\n        for i in range(1, m+1):\n            for j in range(1, n+1):\n                if word1[i-1] == word2[j-1]:\n                    dp[i][j] = dp[i-1][j-1]\n                else:\n                    dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        return dp[m][n]"}], "hamming-distance": [{"task_id": "hamming-distance", "completion": "class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        \n        xor = x ^ y\n        count = 0\n        while xor:\n            count += xor & 1\n            xor = xor >> 1\n        return count"}], "binary-tree-paths": [{"task_id": "binary-tree-paths", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        \n        def dfs(root, path):\n            if not root:\n                return\n            path += str(root.val)\n            if not root.left and not root.right:\n                self.paths.append(path)\n            else:\n                path += '->'\n                dfs(root.left, path)\n                dfs(root.right, path)\n        \n        self.paths = []\n        dfs(root, '')\n        return self.paths"}], "reverse-pairs": [{"task_id": "reverse-pairs", "completion": "class Solution(object):\n    def reversePairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        def merge(nums, left, right):\n            count = 0\n            i = left\n            j = right\n            while i < j:\n                while i < j and nums[i] > 2 * nums[j]:\n                    j -= 1\n                count += j - left\n                i += 1\n            return count\n\n        def merge_sort(nums, left, right):\n            if left >= right:\n                return 0\n            mid = (left + right) // 2\n            count = merge_sort(nums, left, mid) + merge_sort(nums, mid + 1, right)\n            count += merge(nums, left, right)\n            return count\n\n        return merge_sort(nums, 0, len(nums) - 1)"}], "reaching-points": [{"task_id": "reaching-points", "completion": "class Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        \n        while sx < tx and sy < ty:\n            if sx == tx and sy < ty:\n                tx = ty\n            elif sy == ty and sx < tx:\n                tx = sx\n            elif sx < tx and sy < ty:\n                sx = sx + sy\n            else:\n                return False\n        return sx == tx and sy <= ty"}], "compare-version-numbers": [{"task_id": "compare-version-numbers", "completion": "class Solution(object):\n    def compareVersion(self, version1, version2):\n        \"\"\"\n        :type version1: str\n        :type version2: str\n        :rtype: int\n        \"\"\"\n        \n        v1 = version1.split('.')\n        v2 = version2.split('.')\n        for i in range(max(len(v1), len(v2))):\n            if i >= len(v1):\n                v1.append('0')\n            if i >= len(v2):\n                v2.append('0')\n            if int(v1[i]) < int(v2[i]):\n                return -1\n            if int(v1[i]) > int(v2[i]):\n                return 1\n        return 0"}], "best-time-to-buy-and-sell-stock-ii": [{"task_id": "best-time-to-buy-and-sell-stock-ii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_profit = 0\n        min_price = float('inf')\n        \n        for price in prices:\n            min_price = min(min_price, price)\n            max_profit = max(max_profit, price - min_price)\n        \n        return max_profit"}], "course-schedule-iii": [{"task_id": "course-schedule-iii", "completion": "class Solution(object):\n    def scheduleCourse(self, courses):\n        \"\"\"\n        :type courses: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        courses.sort(key=lambda x: x[1])\n        heap = []\n        time = 0\n        for duration, lastDay in courses:\n            time += duration\n            heapq.heappush(heap, -duration)\n            if time > lastDay:\n                time += heapq.heappop(heap)\n        return len(heap)"}], "reverse-nodes-in-k-group": [{"task_id": "reverse-nodes-in-k-group", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseKGroup(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        while True:\n            next_group_start = prev\n            for i in range(k):\n                if not next_group_start:\n                    return dummy.next\n                next_group_start = next_group_start.next\n            next_group_end = prev.next\n            prev.next = None\n            cur = prev.next\n            prev.next = self.reverseList(cur)\n            cur.next = next_group_end\n            prev = cur\n        return dummy.next\n        \n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head:\n            return None\n        prev = None\n        while head:\n            next_node = head.next\n            head.next = prev\n            prev = head\n            head = next_node\n        return prev"}], "repeated-substring-pattern": [{"task_id": "repeated-substring-pattern", "completion": "class Solution(object):\n    def repeatedSubstringPattern(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        return s in (s + s)[1:-1]"}], "unique-binary-search-trees": [{"task_id": "unique-binary-search-trees", "completion": "class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, n + 1):\n            for j in range(1, i + 1):\n                dp[i] += dp[j - 1] * dp[i - j]\n        \n        return dp[n]"}], "single-number-ii": [{"task_id": "single-number-ii", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        return sum(set(nums)) * 2 - sum(nums)"}], "stickers-to-spell-word": [{"task_id": "stickers-to-spell-word", "completion": "class Solution(object):\n    def minStickers(self, stickers, target):\n        \"\"\"\n        :type stickers: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\""}], "strange-printer": [{"task_id": "strange-printer", "completion": "class Solution(object):\n    def strangePrinter(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        n = len(s)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = 1\n        for i in range(n - 1):\n            dp[i][i + 1] = 2 if s[i] == s[i + 1] else 1\n        for i in range(n - 2, -1, -1):\n            for j in range(i + 2, n):\n                dp[i][j] = dp[i + 1][j]\n                for k in range(i + 1, j):\n                    if s[i] == s[k]:\n                        dp[i][j] = min(dp[i][j], dp[i][k - 1] + dp[k + 1][j])\n        return dp[0][n - 1]"}], "sqrtx": [{"task_id": "sqrtx", "completion": "class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        if x == 1:\n            return 1\n        left = 0\n        right = x\n        while left < right:\n            mid = (left + right) // 2\n            if mid * mid <= x:\n                left = mid\n            else:\n                right = mid - 1\n        return left"}], "roman-to-integer": [{"task_id": "roman-to-integer", "completion": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n        num = 0\n        for i in range(len(s)):\n            if i + 1 < len(s) and roman_dict[s[i]] < roman_dict[s[i + 1]]:\n                num -= roman_dict[s[i]]\n            else:\n                num += roman_dict[s[i]]\n        return num"}], "contains-duplicate": [{"task_id": "contains-duplicate", "completion": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        return len(nums) != len(set(nums))"}], "sliding-window-maximum": [{"task_id": "sliding-window-maximum", "completion": "class Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums) == 0:\n            return []\n        if len(nums) == 1:\n            return [nums[0]]\n        if len(nums) == 2:\n            return [max(nums[0], nums[1]), max(nums[0], nums[1])]\n        if len(nums) == 3:\n            return [max(nums[0], nums[1], nums[2]), max(nums[1], nums[2]), max(nums[0], nums[2])]\n        if len(nums) == 4:\n            return [max(nums[0], nums[1], nums[2], nums[3]), max(nums[1], nums[2], nums[3]), max(nums[2], nums[3]), max(nums[0], nums[3])]\n        if len(nums) == 5:\n            return [max(nums[0], nums[1], nums[2], nums[3], nums[4]), max(nums[1], nums[2], nums[3], nums[4]), max(nums[2], nums[3], nums[4]), max(nums[3], nums[4])]\n        if len(nums) == 6:\n            return [max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5]), max(nums[1], nums[2], nums[3], nums[4], nums[5]), max(nums[2], nums[3], nums[4], nums[5]), max(nums[3], nums[4], nums[5])]\n        if len(nums) == 7:\n            return [max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6]), max(nums[1], nums[2], nums[3], nums[4], nums[5], nums[6]), max(nums[2], nums[3], nums[4], nums[5], nums[6]), max(nums[3], nums[4], nums[5], nums[6])]\n        if len(nums) == 8:\n            return [max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7]), max(nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7]), max(nums[2], nums[3], nums[4], nums[5], nums[6], nums[7]), max(nums[3], nums[4], nums[5], nums[6], nums[7])]\n        if len(nums) == 9:\n            return [max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8]), max(nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8]), max(nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8]), max(nums[3], nums[4], nums[5], nums[6], nums[7], nums[8])]\n        if len(nums) == 10:\n            return [max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9]), max(nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9]), max(nums[2"}], "median-of-two-sorted-arrays": [{"task_id": "median-of-two-sorted-arrays", "completion": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        \n        nums1.extend(nums2)\n        nums1.sort()\n        if len(nums1) % 2 == 0:\n            return (nums1[len(nums1) // 2] + nums1[len(nums1) // 2 - 1]) / 2\n        else:\n            return nums1[len(nums1) // 2]"}], "find-minimum-in-rotated-sorted-array": [{"task_id": "find-minimum-in-rotated-sorted-array", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        l = 0\n        r = len(nums) - 1\n        while l < r:\n            mid = (l + r) // 2\n            if nums[mid] < nums[r]:\n                r = mid\n            else:\n                l = mid + 1\n        return nums[l]"}], "pascals-triangle-ii": [{"task_id": "pascals-triangle-ii", "completion": "class Solution(object):\n    def getRow(self, rowIndex):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if rowIndex == 0:\n            return [1]\n        if rowIndex == 1:\n            return [1,1]\n        row = [1,1]\n        for i in range(2, rowIndex + 1):\n            row.append(1)\n            for j in range(i - 1, 0, -1):\n                row[j] = row[j] + row[j - 1]\n        return row"}], "path-sum-ii": [{"task_id": "path-sum-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def pathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def dfs(root, targetSum, path):\n            if not root:\n                return []\n            path.append(root.val)\n            if not root.left and not root.right and root.val == targetSum:\n                return [[root.val]]\n            left = dfs(root.left, targetSum - root.val, path)\n            right = dfs(root.right, targetSum - root.val, path)\n            return left + right\n        \n        return dfs(root, targetSum, [])"}], "construct-the-rectangle": [{"task_id": "construct-the-rectangle", "completion": "class Solution(object):\n    def constructRectangle(self, area):\n        \"\"\"\n        :type area: int\n        :rtype: List[int]\n        \"\"\"\n        \n        for i in range(int(area**0.5), 0, -1):\n            if area % i == 0:\n                return [area // i, i]"}], "word-ladder-ii": [{"task_id": "word-ladder-ii", "completion": "class Solution(object):\n    def findLadders(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: List[List[str]]\n        \"\"\""}], "balanced-binary-tree": [{"task_id": "balanced-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isBalanced(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def height(root):\n            if not root:\n                return 0\n            return 1 + max(height(root.left), height(root.right))\n        \n        if not root:\n            return True\n        \n        return abs(height(root.left) - height(root.right)) <= 1 and self.isBalanced(root.left) and self.isBalanced(root.right)"}], "power-of-two": [{"task_id": "power-of-two", "completion": "class Solution(object):\n    def isPowerOfTwo(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 2 == 0:\n            n = n / 2\n        \n        return n == 1"}], "subsets-ii": [{"task_id": "subsets-ii", "completion": "class Solution(object):\n    def subsetsWithDup(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        def backtrack(i, cur):\n            if i == len(nums):\n                res.append(cur[:])\n                return\n            backtrack(i + 1, cur)\n            cur.append(nums[i])\n            backtrack(i + 1, cur)\n            cur.pop()\n        backtrack(0, [])\n        return res"}], "largest-rectangle-in-histogram": [{"task_id": "largest-rectangle-in-histogram", "completion": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(heights)\n        left = [0] * n\n        right = [0] * n\n        stack = []\n        for i in range(n):\n            while stack and heights[stack[-1]] >= heights[i]:\n                stack.pop()\n            if not stack:\n                left[i] = 0\n            else:\n                left[i] = stack[-1] + 1\n            stack.append(i)\n        stack = []\n        for i in range(n - 1, -1, -1):\n            while stack and heights[stack[-1]] >= heights[i]:\n                stack.pop()\n            if not stack:\n                right[i] = n - 1\n            else:\n                right[i] = stack[-1] - 1\n            stack.append(i)\n        ans = 0\n        for i in range(n):\n            ans = max(ans, (right[i] - left[i] + 1) * heights[i])\n        return ans"}], "evaluate-reverse-polish-notation": [{"task_id": "evaluate-reverse-polish-notation", "completion": "class Solution(object):\n    def evalRPN(self, tokens):\n        \"\"\"\n        :type tokens: List[str]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        for i in tokens:\n            if i not in [\"+\", \"-\", \"*\", \"/\"]:\n                stack.append(int(i))\n            else:\n                a = stack.pop()\n                b = stack.pop()\n                if i == \"+\":\n                    stack.append(a + b)\n                elif i == \"-\":\n                    stack.append(b - a)\n                elif i == \"*\":\n                    stack.append(a * b)\n                else:\n                    stack.append(int(b / a))\n        return stack[0]"}], "perfect-rectangle": [{"task_id": "perfect-rectangle", "completion": "class Solution(object):\n    def isRectangleCover(self, rectangles):\n        \"\"\"\n        :type rectangles: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        \n        x_min, y_min, x_max, y_max = float('inf'), float('inf'), float('-inf'), float('-inf')\n        for x, y, a, b in rectangles:\n            x_min, y_min, x_max, y_max = min(x_min, x), min(y_min, y), max(x_max, a), max(y_max, b)\n        area = (x_max - x_min) * (y_max - y_min)\n        for x, y, a, b in rectangles:\n            area -= (a - x) * (b - y)\n        return area == 0"}], "excel-sheet-column-title": [{"task_id": "excel-sheet-column-title", "completion": "class Solution(object):\n    def convertToTitle(self, columnNumber):\n        \"\"\"\n        :type columnNumber: int\n        :rtype: str\n        \"\"\"\n        \n        ans = ''\n        while columnNumber:\n            columnNumber -= 1\n            ans = chr(columnNumber % 26 + ord('A')) + ans\n            columnNumber //= 26\n        return ans"}], "maximum-subarray": [{"task_id": "maximum-subarray", "completion": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_sum = nums[0]\n        cur_sum = 0\n        for num in nums:\n            if cur_sum < 0:\n                cur_sum = 0\n            cur_sum += num\n            max_sum = max(max_sum, cur_sum)\n        return max_sum"}], "sliding-puzzle": [{"task_id": "sliding-puzzle", "completion": "class Solution(object):\n    def slidingPuzzle(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        def swap(board, i, j):\n            board[i][j], board[i][j + 1] = board[i][j + 1], board[i][j]\n            return board\n        \n        def isSolved(board):\n            return board == [[1,2,3],[4,5,0]]\n        \n        def getNextStates(board):\n            i = board.index(0)\n            j = i % 3\n            if i < 2:\n                board = swap(board, i, j)\n                yield board\n                board = swap(board, i, j + 1)\n                yield board\n                board = swap(board, i, j)\n            else:\n                j = i % 3\n                if j < 2:\n                    board = swap(board, i, j)\n                    yield board\n                    board = swap(board, i, j + 1)\n                    yield board\n                    board = swap(board, i, j)\n                else:\n                    i = i // 3\n                    if i < 2:\n                        board = swap(board, i, j)\n                        yield board\n                        board = swap(board, i, j + 1)\n                        yield board\n                        board = swap(board, i, j)\n                    else:\n                        j = i % 3\n                        if j < 2:\n                            board = swap(board, i, j)\n                            yield board\n                            board = swap(board, i, j + 1)\n                            yield board\n                            board = swap(board, i, j)\n                        else:\n                            i = i // 3\n                            if i < 2:\n                                board = swap(board, i, j)\n                                yield board\n                                board = swap(board, i, j + 1)\n                                yield board\n                                board = swap(board, i, j)\n                            else:\n                                j = i % 3\n                                if j < 2:\n                                    board = swap(board, i, j)\n                                    yield board\n                                    board = swap(board, i, j + 1)\n                                    yield board\n                                    board = swap(board, i, j)\n                                else:\n                                    i = i // 3\n                                    if i < 2:\n                                        board = swap(board, i, j)\n                                        yield board\n                                        board = swap(board, i, j + 1)\n                                        yield board\n                                        board = swap(board, i, j)\n                                    else:\n                                        j = i % 3\n                                        if j < 2:\n                                            board = swap(board, i, j)\n                                            yield board\n                                            board = swap(board, i, j + 1)\n                                            yield board\n                                            board = swap(board, i, j)\n                                        else:\n                                            i = i // 3\n                                            if i < 2:\n                                                board = swap(board, i, j)\n                                                yield board\n                                                board = swap(board, i, j + 1)\n                                                yield board\n                                                board = swap(board, i, j)\n                                            else:\n                                                j = i % 3\n                                                if j < 2:\n                                                    board = swap(board, i, j)\n                                                    yield board\n                                                    board = swap(board, i, j + 1)\n                                                    yield board\n                                                    board = swap(board, i, j)\n                                                else:\n                                                    i = i // 3\n                                                    if i < 2:\n                                                        board = swap(board, i, j)\n                                                        yield board\n                                                        board = swap(board, i, j + 1)\n                                                        yield board\n                                                        board = swap(board, i, j)\n                                                    else:\n                                                        j = i % 3\n                                                        if j < 2:\n                                                            board = swap(board, i, j)\n                                                            yield board\n                                                            board = swap(board, i, j + 1)\n                                                            yield board\n                                                            board = swap(board, i, j)\n                                                        else:\n                                                            i = i // 3\n                                                            if i < 2:\n                                                                board = swap(board, i, j)\n                                                                yield board\n                                                                board = swap(board, i, j + 1)\n                                                                yield board\n                                                                board = swap(board, i, j)\n                                                            else:\n                                                                j = i % 3\n                                                                if j < 2:\n                                                                    board = swap(board, i, j)\n                                                                    yield board\n                                                                    board = swap(board, i, j + 1)"}], "isomorphic-strings": [{"task_id": "isomorphic-strings", "completion": "class Solution(object):\n    def isIsomorphic(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_map = {}\n        t_map = {}\n        \n        for i in range(len(s)):\n            s_char = s[i]\n            t_char = t[i]\n            \n            if s_char in s_map:\n                if s_map[s_char] != t_char:\n                    return False\n            else:\n                s_map[s_char] = t_char\n            \n            if t_char in t_map:\n                if t_map[t_char] != s_char:\n                    return False\n            else:\n                t_map[t_char] = s_char\n        \n        return True"}], "search-in-rotated-sorted-array-ii": [{"task_id": "search-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        l = 0\n        r = len(nums) - 1\n        while l <= r:\n            m = (l + r) // 2\n            if nums[m] == target:\n                return True\n            if nums[m] < nums[r]:\n                if nums[m] < target and target <= nums[r]:\n                    l = m + 1\n                else:\n                    r = m - 1\n            else:\n                if nums[l] <= target and target < nums[m]:\n                    r = m - 1\n                else:\n                    l = m + 1\n        return False"}], "unique-paths-ii": [{"task_id": "unique-paths-ii", "completion": "class Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid):\n        \"\"\"\n        :type obstacleGrid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        dp = [[0 for i in range(n)] for j in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if obstacleGrid[i][j] == 1:\n                    dp[i][j] = 0\n                elif i == 0 and j == 0:\n                    dp[i][j] = 1\n                elif i == 0:\n                    dp[i][j] = dp[i][j-1]\n                elif j == 0:\n                    dp[i][j] = dp[i-1][j]\n                else:\n                    dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        return dp[m-1][n-1]"}], "decode-ways-ii": [{"task_id": "decode-ways-ii", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s[0] == '0':\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            if s[0] == '0':\n                return 0\n            if int(s[0]) == 1 and int(s[1]) in range(1, 7):\n                return 2\n            if int(s[0]) == 2 and int(s[1]) in range(1, 7):\n                return 1\n            return 0\n        if len(s) == 3:\n            if s[0] == '0':\n                return 0\n            if int(s[0]) == 1 and int(s[1]) in range(1, 7) and int(s[2]) in range(1, 7):\n                return 3\n            if int(s[0]) == 2 and int(s[1]) in range(1, 7) and int(s[2]) in range(1, 7):\n                return 2\n            if int(s[0]) == 1 and int(s[1]) == 0 and int(s[2]) in range(1, 7):\n                return 1\n            if int(s[0]) == 2 and int(s[1]) == 0 and int(s[2]) in range(1, 7):\n                return 1\n            return 0\n        if len(s) == 4:\n            if s[0] == '0':\n                return 0\n            if int(s[0]) == 1 and int(s[1]) in range(1, 7) and int(s[2]) in range(1, 7) and int(s[3]) in range(1, 7):\n                return 4\n            if int(s[0]) == 2 and int(s[1]) in range(1, 7) and int(s[2]) in range(1, 7) and int(s[3]) in range(1, 7):\n                return 3\n            if int(s[0]) == 1 and int(s[1]) == 0 and int(s[2]) in range(1, 7) and int(s[3]) in range(1, 7):\n                return 2\n            if int(s[0]) == 2 and int(s[1]) == 0 and int(s[2]) in range(1, 7) and int(s[3]) in range(1, 7):\n                return 2\n            return 0\n        if len(s) == 5:\n            if s[0] == '0':\n                return 0\n            if int(s[0]) == 1 and int(s[1]) in range(1, 7) and int(s[2]) in range(1, 7) and int(s[3]) in range(1, 7) and int(s[4]) in range(1, 7):\n                return 5\n            if int(s[0]) == 2 and int(s[1]) in range(1, 7) and int(s[2]) in range(1, 7) and int(s[3]) in range(1, 7) and int(s[4]) in range(1, 7):\n                return 4\n            if int(s[0]) == 1 and int(s[1]) == 0 and int(s[2]) in range(1, 7) and int(s[3]) in range(1, 7) and int(s[4]) in range(1, 7):\n                return 3\n            if int(s[0]) == 2 and int(s[1]) == 0 and int(s[2]) in range(1, 7) and int(s[3]) in range(1, 7) and int(s[4]) in range(1, 7):\n                return 3\n            return 0\n        if len(s) == 6:\n            if s[0] == '0':\n                return 0\n            if int(s[0]) == 1 and int(s[1]) in range(1, 7) and int(s[2]) in range(1, 7) and int(s[3]) in range(1, 7) and int(s[4]) in range(1, 7) and int(s[5]) in range(1, 7):"}], "3sum-closest": [{"task_id": "3sum-closest", "completion": "class Solution(object):\n    def threeSumClosest(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        closest = nums[0] + nums[1] + nums[2]\n        for i in range(len(nums)-2):\n            left = i + 1\n            right = len(nums) - 1\n            while left < right:\n                sum = nums[i] + nums[left] + nums[right]\n                if abs(sum - target) < abs(closest - target):\n                    closest = sum\n                if sum < target:\n                    left += 1\n                else:\n                    right -= 1\n        return closest"}], "maximum-depth-of-binary-tree": [{"task_id": "maximum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))"}], "intersection-of-two-arrays-ii": [{"task_id": "intersection-of-two-arrays-ii", "completion": "class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        nums1.sort()\n        nums2.sort()\n        i, j = 0, 0\n        res = []\n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] < nums2[j]:\n                i += 1\n            elif nums1[i] > nums2[j]:\n                j += 1\n            else:\n                res.append(nums1[i])\n                i += 1\n                j += 1\n        return res"}], "minimum-absolute-difference-in-bst": [{"task_id": "minimum-absolute-difference-in-bst", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def getMinimumDifference(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def inorder(root):\n            if root is None:\n                return []\n            return inorder(root.left) + [root.val] + inorder(root.right)\n        \n        arr = inorder(root)\n        min_diff = float('inf')\n        for i in range(1, len(arr)):\n            min_diff = min(min_diff, arr[i] - arr[i - 1])\n        return min_diff"}], "find-mode-in-binary-search-tree": [{"task_id": "find-mode-in-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\""}], "find-the-index-of-the-first-occurrence-in-a-string": [{"task_id": "find-the-index-of-the-first-occurrence-in-a-string", "completion": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        \n        if len(needle) == 0:\n            return 0\n        if len(haystack) == 0:\n            return -1\n        \n        for i in range(len(haystack)-len(needle)+1):\n            if haystack[i:i+len(needle)] == needle:\n                return i\n        return -1"}], "strong-password-checker": [{"task_id": "strong-password-checker", "completion": "class Solution(object):\n    def strongPasswordChecker(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: int\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def strongPasswordChecker(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: int\n        \"\"\""}], "factorial-trailing-zeroes": [{"task_id": "factorial-trailing-zeroes", "completion": "class Solution(object):\n    def trailingZeroes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        count = 0\n        while n > 0:\n            n = n // 5\n            count += n\n        return count"}], "zigzag-conversion": [{"task_id": "zigzag-conversion", "completion": "class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        \n        if numRows == 1:\n            return s\n        \n        rows = [\"\" for i in range(numRows)]\n        row = 0\n        direction = 1\n        for i in range(len(s)):\n            rows[row] += s[i]\n            if row == 0:\n                direction = 1\n            elif row == numRows - 1:\n                direction = -1\n            row += direction\n        \n        return \"\".join(rows)"}], "trapping-rain-water": [{"task_id": "trapping-rain-water", "completion": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(height)\n        left_max = [0] * n\n        right_max = [0] * n\n        left_max[0] = height[0]\n        right_max[n - 1] = height[n - 1]\n        for i in range(1, n):\n            left_max[i] = max(left_max[i - 1], height[i])\n        for i in range(n - 2, -1, -1):\n            right_max[i] = max(right_max[i + 1], height[i])\n        ans = 0\n        for i in range(n):\n            ans += min(left_max[i], right_max[i]) - height[i]\n        return ans"}], "find-all-numbers-disappeared-in-an-array": [{"task_id": "find-all-numbers-disappeared-in-an-array", "completion": "class Solution(object):\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        n = len(nums)\n        for i in range(n):\n            index = abs(nums[i]) - 1\n            if nums[index] > 0:\n                nums[index] = -nums[index]\n        \n        return [i + 1 for i in range(n) if nums[i] > 0]"}], "count-of-smaller-numbers-after-self": [{"task_id": "count-of-smaller-numbers-after-self", "completion": "class Solution(object):\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\""}], "set-intersection-size-at-least-two": [{"task_id": "set-intersection-size-at-least-two", "completion": "class Solution(object):\n    def intersectionSizeTwo(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\""}], "symmetric-tree": [{"task_id": "symmetric-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def isMirror(left, right):\n            if not left and not right:\n                return True\n            if not left or not right:\n                return False\n            return left.val == right.val and isMirror(left.left, right.right) and isMirror(left.right, right.left)\n        \n        return isMirror(root, root)"}], "number-of-atoms": [{"task_id": "number-of-atoms", "completion": "class Solution(object):\n    def countOfAtoms(self, formula):\n        \"\"\"\n        :type formula: str\n        :rtype: str\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def countOfAtoms(self, formula):\n        \"\"\"\n        :type formula: str\n        :rtype: str\n        \"\"\""}], "binary-tree-preorder-traversal": [{"task_id": "binary-tree-preorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def preorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        stack = [root]\n        res = []\n        while stack:\n            node = stack.pop()\n            res.append(node.val)\n            if node.right:\n                stack.append(node.right)\n            if node.left:\n                stack.append(node.left)\n        return res"}], "power-of-four": [{"task_id": "power-of-four", "completion": "class Solution(object):\n    def isPowerOfFour(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        while n % 4 == 0:\n            n = n // 4\n        return n == 1"}], "invert-binary-tree": [{"task_id": "invert-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def invertTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        \n        if root is None:\n            return None\n        \n        temp = root.left\n        root.left = root.right\n        root.right = temp\n        \n        self.invertTree(root.left)\n        self.invertTree(root.right)\n        \n        return root"}], "generate-parentheses": [{"task_id": "generate-parentheses", "completion": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def generate(n, left, right, res):\n            if left == n and right == n:\n                res.append(''.join(s))\n                return\n            if left < n:\n                s.append('(')\n                generate(n, left + 1, right, res)\n                s.pop()\n            if right < left:\n                s.append(')')\n                generate(n, left, right + 1, res)\n                s.pop()\n        \n        res = []\n        s = []\n        generate(n, 0, 0, res)\n        return res"}], "patching-array": [{"task_id": "patching-array", "completion": "class Solution(object):\n    def minPatches(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        i = 0\n        patch = 0\n        while i < len(nums) and nums[i] <= n:\n            n += nums[i]\n            i += 1\n            patch += 1\n        if n < nums[-1]:\n            patch += 1\n        return patch"}], "longest-valid-parentheses": [{"task_id": "longest-valid-parentheses", "completion": "class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        n = len(s)\n        dp = [0] * n\n        for i in range(1, n):\n            if s[i] == ')':\n                if s[i - 1] == '(':\n                    dp[i] = (i >= 2) and dp[i - 2] + 2 or 2\n                else:\n                    if i - dp[i - 1] - 1 >= 0 and s[i - dp[i - 1] - 1] == '(':\n                        dp[i] = dp[i - 1] + 2 + (i - dp[i - 1] - 2 >= 0 and dp[i - dp[i - 1] - 2] or 0)\n        return max(dp)"}], "fraction-to-recurring-decimal": [{"task_id": "fraction-to-recurring-decimal", "completion": "class Solution(object):\n    def fractionToDecimal(self, numerator, denominator):\n        \"\"\"\n        :type numerator: int\n        :type denominator: int\n        :rtype: str\n        \"\"\"\n        \n        if numerator == 0:\n            return \"0\"\n        \n        if numerator % denominator == 0:\n            return str(numerator // denominator)\n        \n        res = []\n        if numerator < 0:\n            res.append(\"-\")\n            numerator = -numerator\n        if denominator < 0:\n            res.append(\"-\")\n            denominator = -denominator\n        \n        res.append(str(numerator // denominator))\n        numerator = numerator % denominator\n        if numerator == 0:\n            return \"\".join(res)\n        \n        res.append(\".\")\n        seen = {}\n        while numerator != 0:\n            if numerator in seen:\n                res.insert(seen[numerator], \"(\")\n                res.append(\")\")\n                break\n            seen[numerator] = len(res)\n            numerator *= 10\n            res.append(str(numerator // denominator))\n            numerator = numerator % denominator\n        \n        return \"\".join(res)"}], "sort-list": [{"task_id": "sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        fast = slow.next\n        slow.next = None\n        left = self.sortList(head)\n        right = self.sortList(fast)\n        \n        dummy = ListNode()\n        cur = dummy\n        while left and right:\n            if left.val < right.val:\n                cur.next = left\n                left = left.next\n            else:\n                cur.next = right\n                right = right.next\n            cur = cur.next\n        \n        if left:\n            cur.next = left\n        if right:\n            cur.next = right\n        \n        return dummy.next"}], "russian-doll-envelopes": [{"task_id": "russian-doll-envelopes", "completion": "class Solution(object):\n    def maxEnvelopes(self, envelopes):\n        \"\"\"\n        :type envelopes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        envelopes.sort(key=lambda x: (x[0], -x[1]))\n        dp = []\n        for i in envelopes:\n            left, right = 0, len(dp) - 1\n            while left <= right:\n                mid = (left + right) // 2\n                if dp[mid] < i[1]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n            if left == len(dp):\n                dp.append(i[1])\n            else:\n                dp[left] = i[1]\n        return len(dp)"}], "set-matrix-zeroes": [{"task_id": "set-matrix-zeroes", "completion": "class Solution(object):\n    def setZeroes(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        rows = len(matrix)\n        cols = len(matrix[0])\n        rows_zero = False\n        cols_zero = False\n        \n        for i in range(rows):\n            for j in range(cols):\n                if matrix[i][j] == 0:\n                    matrix[i][0] = 0\n                    matrix[0][j] = 0\n                    if i == 0:\n                        rows_zero = True\n                    if j == 0:\n                        cols_zero = True\n        \n        for i in range(1, rows):\n            for j in range(1, cols):\n                if matrix[i][0] == 0 or matrix[0][j] == 0:\n                    matrix[i][j] = 0\n        \n        if rows_zero:\n            for i in range(rows):\n                matrix[i][0] = 0\n        \n        if cols_zero:\n            for j in range(cols):\n                matrix[0][j] = 0"}], "remove-nth-node-from-end-of-list": [{"task_id": "remove-nth-node-from-end-of-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        \n        dummy = ListNode(0, head)\n        left = dummy\n        right = head\n        for i in range(n):\n            right = right.next\n        while right:\n            left = left.next\n            right = right.next\n        left.next = left.next.next\n        return dummy.next"}], "intersection-of-two-arrays": [{"task_id": "intersection-of-two-arrays", "completion": "class Solution(object):\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        return list(set(nums1).intersection(set(nums2)))"}], "super-washing-machines": [{"task_id": "super-washing-machines", "completion": "class Solution(object):\n    def findMinMoves(self, machines):\n        \"\"\"\n        :type machines: List[int]\n        :rtype: int\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def findMinMoves(self, machines):\n        \"\"\"\n        :type machines: List[int]\n        :rtype: int\n        \"\"\""}], "kth-smallest-number-in-multiplication-table": [{"task_id": "kth-smallest-number-in-multiplication-table", "completion": "class Solution(object):\n    def findKthNumber(self, m, n, k):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\""}], "convert-sorted-list-to-binary-search-tree": [{"task_id": "convert-sorted-list-to-binary-search-tree", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedListToBST(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :rtype: Optional[TreeNode]\n        \"\"\"\n        \n        def sortedListToBST(head):\n            if not head:\n                return None\n            if not head.next:\n                return TreeNode(head.val)\n            slow = fast = head\n            while fast.next and fast.next.next:\n                slow = slow.next\n                fast = fast.next.next\n            root = TreeNode(slow.next.val)\n            root.right = sortedListToBST(slow.next.next)\n            slow.next = None\n            root.left = sortedListToBST(head)\n            return root\n        \n        return sortedListToBST(head)"}], "merge-two-sorted-lists": [{"task_id": "merge-two-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: Optional[ListNode]\n        :type list2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        \n        if not list1:\n            return list2\n        if not list2:\n            return list1\n        \n        if list1.val < list2.val:\n            list1.next = self.mergeTwoLists(list1.next, list2)\n            return list1\n        else:\n            list2.next = self.mergeTwoLists(list1, list2.next)\n            return list2"}], "maximal-rectangle": [{"task_id": "maximal-rectangle", "completion": "class Solution(object):\n    def maximalRectangle(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        rows, cols = len(matrix), len(matrix[0])\n        max_area = 0\n        heights = [0] * cols\n        \n        for row in range(rows):\n            for col in range(cols):\n                if matrix[row][col] == '1':\n                    heights[col] += 1\n                else:\n                    heights[col] = 0\n            max_area = max(max_area, self.largestRectangleArea(heights))\n        \n        return max_area\n    \n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        max_area = 0\n        \n        for i, height in en enumerate(heights):\n            while stack and height < heights[stack[-1]]:\n                top = stack.pop()\n                max_area = max(max_area, heights[top] * (i - stack[-1] - 1 if stack else i))\n            stack.append(i)\n        \n        while stack:\n            top = stack.pop()\n            max_area = max(max_area, heights[top] * (len(heights) - stack[-1] - 1 if stack else len(heights)))\n        \n        return max_area"}], "subsets": [{"task_id": "subsets", "completion": "class Solution(object):\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        res = []\n        n = len(nums)\n        for i in range(2**n):\n            res.append([nums[j] for j in range(n) if (i & (1 << j))])\n        return res"}], "find-minimum-in-rotated-sorted-array-ii": [{"task_id": "find-minimum-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        l, r = 0, len(nums) - 1\n        while l < r:\n            m = (l + r) // 2\n            if nums[m] < nums[r]:\n                r = m\n            elif nums[m] > nums[r]:\n                l = m + 1\n            else:\n                r -= 1\n        return nums[l]"}], "valid-number": [{"task_id": "valid-number", "completion": "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        s = s.strip()\n        if not s:\n            return False\n        if s[0] in ['+', '-']:\n            s = s[1:]\n        if not s:\n            return False\n        if s[-1] in ['+', '-']:\n            s = s[:-1]\n        if not s:\n            return False\n        if s[0] in ['+', '-']:\n            s = s[1:]\n        if not s:\n            return False\n        if s[-1] in ['+', '-']:\n            s = s[:-1]\n        if not s:\n            return False\n        if s[0] in ['+', '-']:\n            s = s[1:]\n        if not s:\n            return False\n        if s[-1] in ['+', '-']:\n            s = s[:-1]\n        if not s:\n            return False\n        if s[0] in ['+', '-']:\n            s = s[1:]\n        if not s:\n            return False\n        if s[-1] in ['+', '-']:\n            s = s[:-1]\n        if not s:\n            return False\n        if s[0] in ['+', '-']:\n            s = s[1:]\n        if not s:\n            return False\n        if s[-1] in ['+', '-']:\n            s = s[:-1]\n        if not s:\n            return False\n        if s[0] in ['+', '-']:\n            s = s[1:]\n        if not s:\n            return False\n        if s[-1] in ['+', '-']:\n            s = s[:-1]\n        if not s:\n            return False\n        if s[0] in ['+', '-']:\n            s = s[1:]\n        if not s:\n            return False\n        if s[-1] in ['+', '-']:\n            s = s[:-1]\n        if not s:\n            return False\n        if s[0] in ['+', '-']:\n            s = s[1:]\n        if not s:\n            return False\n        if s[-1] in ['+', '-']:\n            s = s[:-1]\n        if not s:\n            return False\n        if s[0] in ['+', '-']:\n            s = s[1:]\n        if not s:\n            return False\n        if s[-1] in ['+', '-']:\n            s = s[:-1]\n        if not s:\n            return False\n        if s[0] in ['+', '-']:\n            s = s[1:]\n        if not s:\n            return False\n        if s[-1] in ['+', '-']:\n            s = s[:-1]\n        if not s:\n            return False\n        if s[0] in ['+', '-']:\n            s = s[1:]\n        if not s:\n            return False\n        if s[-1] in ['+', '-']:\n            s = s[:-1]\n        if not s:\n            return False\n        if s[0] in ['+', '-']:\n            s = s[1:]\n        if not s:\n            return False\n        if s[-1] in ['+', '-']:\n            s = s[:-1]\n        if not s:\n            return False\n        if s[0] in ['+', '-']:\n            s = s[1:]\n        if not s:\n            return False\n        if s[-1] in ['+', '-']:\n            s = s[:-1]\n        if not s:\n            return False\n        if s[0] in ['+', '-']:\n            s = s[1:]\n        if not s:\n            return False\n        if s[-1] in ['+', '-']:\n            s = s[:-1]\n        if not s:\n            return False\n        if s[0] in ['+', '-']:\n            s = s[1:]\n        if not s:\n            return False\n        if s[-1] in ['+', '-']:\n            s = s[:-1]\n        if not s:\n            return False\n        if s[0] in ['+', '-']:\n            s = s[1:]\n        if not s:\n            return False"}], "integer-to-roman": [{"task_id": "integer-to-roman", "completion": "class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        roman = {\n            1000: \"M\",\n            900: \"CM\",\n            500: \"D\",\n            400: \"CD\",\n            100: \"C\",\n            90: \"XC\",\n            50: \"L\",\n            40: \"XL\",\n            10: \"X\",\n            9: \"IX\",\n            5: \"V\",\n            4: \"IV\",\n            1: \"I\"\n        }\n        result = \"\"\n        for i in roman.keys():\n            while num >= i:\n                result += roman[i]\n                num -= i\n        return result"}], "find-the-difference": [{"task_id": "find-the-difference", "completion": "class Solution(object):\n    def findTheDifference(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        for i in t:\n            if i not in s:\n                return i\n            else:\n                s = s.replace(i, '', 1)\n\n        return s"}], "sudoku-solver": [{"task_id": "sudoku-solver", "completion": "class Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        def solve(board):\n            for i in range(9):\n                for j in range(9):\n                    if board[i][j] == '.':\n                        for k in range(1, 10):\n                            if isValid(board, i, j, k):\n                                board[i][j] = str(k)\n                                if solve(board):\n                                    return True\n                                else:\n                                    board[i][j] = '.'\n                        return False\n            return True\n\n        def isValid(board, i, j, k):\n            for l in range(9):\n                if board[i][l] == str(k) and l != j:\n                    return False\n                if board[l][j] == str(k) and l != i:\n                    return False\n                if board[(i // 3) * 3 + l // 3][(j // 3) * 3 + l % 3] == str(k) and (i // 3) * 3 + l // 3 != i and (j // 3) * 3 + l % 3 != j:\n                    return False\n            return True\n\n        solve(board)"}], "recover-binary-search-tree": [{"task_id": "recover-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        def inorder(root):\n            if root:\n                inorder(root.left)\n                self.arr.append(root)\n                inorder(root.right)\n        \n        self.arr = []\n        inorder(root)\n        n = len(self.arr)\n        x = y = None\n        for i in range(n-1):\n            if self.arr[i].val > self.arr[i+1].val:\n                y = self.arr[i+1]\n                if x is None:\n                    x = self.arr[i]\n                else:\n                    break\n        x.val, y.val = y.val, x.val\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        def inorder(root):\n            if root:\n                inorder(root.left)\n                self.arr.append(root)\n                inorder(root.right)\n        \n        self.arr = []\n        inorder(root)\n        n = len(self.arr)\n        x = y = None\n        for i in range(n-1):\n            if self.arr[i].val > self.arr[i+1].val:\n                y = self.arr[i+1]\n                if x is None:\n                    x = self.arr[i]\n                else:\n                    break\n        x.val, y.val = y.val, x.val\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        def inorder(root):\n            if root:\n                inorder(root.left)\n                self.arr.append(root)\n                inorder(root.right)\n        \n        self.arr = []\n        inorder(root)\n        n = len(self.arr)\n        x = y = None\n        for i in range(n-1):\n            if self.arr[i].val > self.arr[i+1].val:\n                y = self.arr[i+1]\n                if x is None:\n                    x = self.arr[i]\n                else:\n                    break\n        x.val, y.val = y.val, x.val\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        def inorder(root):\n            if root:\n                inorder(root.left)\n                self.arr.append(root)\n                inorder(root.right)\n        \n        self.arr = []\n        inorder(root)\n        n = len(self.arr)\n        x = y = None\n        for i in range(n-1):\n            if self.arr[i].val > self.arr[i+1].val:\n                y = self.arr[i+1]\n                if x is None:\n                    x = self.arr[i]\n                else:\n                    break\n        x.val, y.val = y.val, x.val\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self."}], "palindrome-linked-list": [{"task_id": "palindrome-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        \n        if not head:\n            return True\n        \n        slow = fast = head\n        \n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        slow = self.reverse(slow)\n        fast = head\n        \n        while slow:\n            if slow.val != fast.val:\n                return False\n            slow = slow.next\n            fast = fast.next\n        \n        return True\n    \n    def reverse(self, head):\n        prev = None\n        while head:\n            next = head.next\n            head.next = prev\n            prev = head\n            head = next\n        return prev"}], "valid-perfect-square": [{"task_id": "valid-perfect-square", "completion": "class Solution(object):\n    def isPerfectSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        i = 1\n        while i * i < num:\n            i += 1\n        return i * i == num"}], "counting-bits": [{"task_id": "counting-bits", "completion": "class Solution(object):\n    def countBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        ans = []\n        for i in range(n + 1):\n            ans.append(bin(i).count('1'))\n        return ans"}], "remove-linked-list-elements": [{"task_id": "remove-linked-list-elements", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        \n        while head and head.val == val:\n            head = head.next\n        \n        if not head:\n            return None\n        \n        cur = head\n        while cur.next:\n            if cur.next.val == val:\n                cur.next = cur.next.next\n            else:\n                cur = cur.next\n        \n        return head"}], "scramble-string": [{"task_id": "scramble-string", "completion": "class Solution(object):\n    def isScramble(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) != len(s2):\n            return False\n        if s1 == s2:\n            return True\n        if sorted(s1) != sorted(s2):\n            return False\n        for i in range(1, len(s1)):\n            if self.isScramble(s1[:i], s2[:i]) and self.isScramble(s1[i:], s2[i:]):\n                return True\n            if self.isScramble(s1[:i], s2[-i:]) and self.isScramble(s1[i:], s2[:-i]):\n                return True\n        return False"}], "simplify-path": [{"task_id": "simplify-path", "completion": "class Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        \n        path = path.split('/')\n        stack = []\n        for i in path:\n            if i == '':\n                continue\n            if i == '.':\n                continue\n            if i == '..':\n                if stack:\n                    stack.pop()\n            else:\n                stack.append(i)\n        return '/' + '/'.join(stack)"}], "word-search-ii": [{"task_id": "word-search-ii", "completion": "class Solution(object):\n    def findWords(self, board, words):\n        \"\"\"\n        :type board: List[List[str]]\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\""}], "valid-anagram": [{"task_id": "valid-anagram", "completion": "class Solution(object):\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_dict = {}\n        t_dict = {}\n        \n        for i in range(len(s)):\n            s_dict[s[i]] = s_dict.get(s[i], 0) + 1\n            t_dict[t[i]] = t_dict.get(t[i], 0) + 1\n        \n        for i in s_dict:\n            if s_dict[i] != t_dict.get(i, 0):\n                return False\n        \n        return True"}], "valid-sudoku": [{"task_id": "valid-sudoku", "completion": "class Solution(object):\n    def isValidSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        \n        def isValid(board):\n            for i in range(9):\n                if len(set(board[i])) != 9:\n                    return False\n            for i in range(9):\n                if len(set([board[j][i] for j in range(9)])) != 9:\n                    return False\n            for i in range(3):\n                for j in range(3):\n                    if len(set([board[i*3+k][j*3+l] for k in range(3) for l in range(3)])) != 9:\n                        return False\n            return True\n        \n        return isValid(board)"}], "fizz-buzz": [{"task_id": "fizz-buzz", "completion": "class Solution(object):\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        answer = []\n        for i in range(1, n + 1):\n            if i % 3 == 0 and i % 5 == 0:\n                answer.append(\"FizzBuzz\")\n            elif i % 3 == 0:\n                answer.append(\"Fizz\")\n            elif i % 5 == 0:\n                answer.append(\"Buzz\")\n            else:\n                answer.append(str(i))\n        return answer"}], "reverse-words-in-a-string": [{"task_id": "reverse-words-in-a-string", "completion": "class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        s = s.strip()\n        s = s.split()\n        s = s[::-1]\n        s = ' '.join(s)\n        return s"}], "excel-sheet-column-number": [{"task_id": "excel-sheet-column-number", "completion": "class Solution(object):\n    def titleToNumber(self, columnTitle):\n        \"\"\"\n        :type columnTitle: str\n        :rtype: int\n        \"\"\"\n        \n        ans = 0\n        for i in range(len(columnTitle)):\n            ans = ans * 26 + (ord(columnTitle[i]) - ord('A') + 1)\n        return ans"}], "candy": [{"task_id": "candy", "completion": "class Solution(object):\n    def candy(self, ratings):\n        \"\"\"\n        :type ratings: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(ratings)\n        candies = [1] * n\n        for i in range(1, n):\n            if ratings[i] > ratings[i - 1]:\n                candies[i] = candies[i - 1] + 1\n        \n        for i in range(n - 2, -1, -1):\n            if ratings[i] > ratings[i + 1]:\n                candies[i] = max(candies[i], candies[i + 1] + 1)\n        \n        return sum(candies)"}], "same-tree": [{"task_id": "same-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val != q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"}], "reorder-list": [{"task_id": "reorder-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reorderList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: None Do not return anything, modify head in-place instead.\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        slow = head\n        fast = head\n        \n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        second = slow.next\n        slow.next = None\n        second = self.reverse(second)\n        \n        first = head\n        while second:\n            temp = first.next\n            first.next = second\n            second = second.next\n            first.next.next = temp\n            first = temp\n        \n        return head\n        \n    def reverse(self, head):\n        prev = None\n        curr = head\n        \n        while curr:\n            temp = curr.next\n            curr.next = prev\n            prev = curr\n            curr = temp\n        \n        return prev"}], "word-pattern": [{"task_id": "word-pattern", "completion": "class Solution(object):\n    def wordPattern(self, pattern, s):\n        \"\"\"\n        :type pattern: str\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        s = s.split()\n        if len(pattern) != len(s):\n            return False\n        \n        d = {}\n        for i in range(len(pattern)):\n            if pattern[i] in d:\n                if d[pattern[i]] != s[i]:\n                    return False\n            else:\n                if s[i] in d.values():\n                    return False\n                d[pattern[i]] = s[i]\n        return True"}], "permutations": [{"task_id": "permutations", "completion": "class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def backtrack(nums, permutation, permutations):\n            if not nums:\n                permutations.append(permutation[:])\n            for i in range(len(nums)):\n                backtrack(nums[:i] + nums[i+1:], permutation + [nums[i]], permutations)\n        \n        permutations = []\n        backtrack(nums, [], permutations)\n        return permutations"}], "search-a-2d-matrix": [{"task_id": "search-a-2d-matrix", "completion": "class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        \n        for i in range(m):\n            if matrix[i][0] > target:\n                return False\n            if matrix[i][n-1] < target:\n                continue\n            if matrix[i][n-1] == target:\n                return True\n            if matrix[i][n-1] > target:\n                for j in range(n-1, -1, -1):\n                    if matrix[i][j] == target:\n                        return True\n        return False"}], "add-two-numbers": [{"task_id": "add-two-numbers", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        l1 = self.reverse(l1)\n        l2 = self.reverse(l2)\n        l3 = ListNode()\n        l4 = l3\n        carry = 0\n        while l1 or l2:\n            if l1:\n                l3.val += l1.val\n                l1 = l1.next\n            if l2:\n                l3.val += l2.val\n                l2 = l2.next\n            l3.next = ListNode()\n            l3 = l3.next\n            l3.val += carry\n            carry = l3.val // 10\n            l3.val = l3.val % 10\n        if carry:\n            l3.next = ListNode(carry)\n        return self.reverse(l4)\n        \n    def reverse(self, l):\n        prev = None\n        while l:\n            next = l.next\n            l.next = prev\n            prev = l\n            l = next\n        return prev"}], "number-complement": [{"task_id": "number-complement", "completion": "class Solution(object):\n    def findComplement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        binary = bin(num)[2:]\n        complement = ''\n        for i in binary:\n            if i == '1':\n                complement += '0'\n            else:\n                complement += '1'\n        return int(complement, 2)"}], "arithmetic-slices-ii-subsequence": [{"task_id": "arithmetic-slices-ii-subsequence", "completion": "class Solution(object):\n    def numberOfArithmeticSlices(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(nums)\n        if n < 3:\n            return 0\n        dp = [0] * n\n        for i in range(n):\n            for j in range(i):\n                if nums[i] - nums[j] == nums[j] - nums[j - 1]:\n                    dp[i] += dp[j] + 1\n        return sum(dp)"}], "text-justification": [{"task_id": "text-justification", "completion": "class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\""}], "binary-tree-postorder-traversal": [{"task_id": "binary-tree-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def postorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        stack = [root]\n        res = []\n        while stack:\n            node = stack.pop()\n            res.append(node.val)\n            if node.left:\n                stack.append(node.left)\n            if node.right:\n                stack.append(node.right)\n        return res[::-1]"}], "container-with-most-water": [{"task_id": "container-with-most-water", "completion": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_area = 0\n        left = 0\n        right = len(height) - 1\n        \n        while left < right:\n            max_area = max(max_area, min(height[left], height[right]) * (right - left))\n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n        \n        return max_area"}], "concatenated-words": [{"task_id": "concatenated-words", "completion": "class Solution(object):\n    def findAllConcatenatedWordsInADict(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n\n        def isConcatenated(word, words):\n            if word in words:\n                return True\n            for i in range(1, len(word)):\n                left = word[:i]\n                right = word[i:]\n                if left in words and right in words:\n                    return True\n            return False\n\n        words.sort(key=lambda x: len(x))\n        ans = []\n        for word in words:\n            if isConcatenated(word, words):\n                ans.append(word)\n        return ans"}], "base-7": [{"task_id": "base-7", "completion": "class Solution(object):\n    def convertToBase7(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        res = \"\"\n        if num < 0:\n            res += \"-\"\n            num = -num\n        while num:\n            res += str(num % 7)\n            num //= 7\n        return res[::-1]"}], "nim-game": [{"task_id": "nim-game", "completion": "class Solution(object):\n    def canWinNim(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        return n % 4 != 0"}], "n-queens-ii": [{"task_id": "n-queens-ii", "completion": "class Solution(object):\n    def totalNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        def is_valid(board, row, col):\n            for i in range(row):\n                if board[i][col] == 1:\n                    return False\n            i, j = row, col\n            while i >= 0 and j >= 0:\n                if board[i][j] == 1:\n                    return False\n                i -= 1\n                j -= 1\n            i, j = row, col\n            while i >= 0 and j < n:\n                if board[i][j] == 1:\n                    return False\n                i -= 1\n                j += 1\n            return True\n        \n        def backtrack(board, row):\n            if row == n:\n                return 1\n            count = 0\n            for col in range(n):\n                if is_valid(board, row, col):\n                    board[row][col] = 1\n                    count += backtrack(board, row + 1)\n                    board[row][col] = 0\n            return count\n        \n        board = [[0 for _ in range(n)] for _ in range(n)]\n        return backtrack(board, 0)"}], "n-queens": [{"task_id": "n-queens", "completion": "class Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def solve(queens, row, cols, n):\n            if row == n:\n                return [queens]\n            solutions = []\n            for col in range(n):\n                if col not in cols and row + col not in rows and row - col not in cols:\n                    solutions.extend(solve(queens + [(row, col)], rows + [row], cols + [col], n))\n            return solutions\n        \n        return solve([], [], [], n)"}], "word-search": [{"task_id": "word-search", "completion": "class Solution(object):\n    def exist(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        def dfs(i, j, word):\n            if not word:\n                return True\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != word[0]:\n                return False\n            board[i][j] = '#'\n            res = dfs(i + 1, j, word[1:]) or dfs(i - 1, j, word[1:]) or dfs(i, j + 1, word[1:]) or dfs(i, j - 1, word[1:])\n            board[i][j] = word[0]\n            return res\n        \n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if dfs(i, j, word):\n                    return True\n        return False"}], "merge-sorted-array": [{"task_id": "merge-sorted-array", "completion": "class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        \n        i = m - 1\n        j = n - 1\n        k = m + n - 1\n        \n        while i >= 0 and j >= 0:\n            if nums1[i] > nums2[j]:\n                nums1[k] = nums1[i]\n                i -= 1\n            else:\n                nums1[k] = nums2[j]\n                j -= 1\n            k -= 1\n        \n        while j >= 0:\n            nums1[k] = nums2[j]\n            j -= 1\n            k -= 1"}], "third-maximum-number": [{"task_id": "third-maximum-number", "completion": "class Solution(object):\n    def thirdMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums = list(set(nums))\n        if len(nums) < 3:\n            return max(nums)\n        else:\n            return sorted(nums)[-3]"}]}