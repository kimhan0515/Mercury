{"spiral-matrix": [{"task_id": "spiral-matrix", "completion": "class Solution(object):\n    def spiralOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not matrix:\n            return []\n        \n        m, n = len(matrix), len(matrix[0])\n        res = []\n        left, right = 0, n - 1\n        top, bottom = 0, m - 1\n        \n        while left <= right and top <= bottom:\n            for i in range(left, right + 1):\n                res.append(matrix[top][i])\n            top += 1\n            \n            for i in range(top, bottom + 1):\n                res.append(matrix[i][right])\n            right -= 1\n            \n            if top <= bottom:\n                for i in range(right, left - 1, -1):\n                    res.append(matrix[bottom][i])\n                bottom -= 1\n            \n            if left <= right:\n                for i in range(bottom, top - 1, -1):\n                    res.append(matrix[i][left])\n                left += 1\n        \n        return res"}], "summary-ranges": [{"task_id": "summary-ranges", "completion": "class Solution(object):\n    def summaryRanges(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n\n\n# Completion\nclass Solution(object):\n    def summaryRanges(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        if not nums:\n            return []\n        \n        ans = []\n        start = nums[0]\n        for num in nums[1:]:\n            if num != start + 1:\n                if start == num - 1:\n                    ans.append(str(start))\n                else:\n                    ans.append(str(start) + \"->\" + str(num - 1))\n                start = num\n        if start == nums[-1]:\n            ans.append(str(start))\n        else:\n            ans.append(str(start) + \"->\" + str(nums[-1]))\n        return ans"}], "distinct-subsequences": [{"task_id": "distinct-subsequences", "completion": "class Solution(object):\n    def numDistinct(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"\n        \n        n, m = len(s), len(t)\n        if m > n:\n            return 0\n        \n        dp = [0] * (m + 1)\n        dp[0] = 1\n        \n        for i in range(n):\n            new_dp = dp.copy()\n            for j in range(m, 0, -1):\n                if s[i] == t[j - 1]:\n                    new_dp[j] += dp[j - 1]\n                dp = new_dp\n        \n        return dp[m]"}], "first-missing-positive": [{"task_id": "first-missing-positive", "completion": "class Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(nums)\n        i = 0\n        while i < n:\n            if nums[i] > 0 and nums[i] <= n and nums[i] != nums[nums[i] - 1]:\n                nums[i], nums[nums[i] - 1] = nums[nums[i] - 1], nums[i]\n            else:\n                i += 1\n        \n        i = 0\n        while i < n and nums[i] == i + 1:\n            i += 1\n        \n        return i + 1"}], "permutation-sequence": [{"task_id": "permutation-sequence", "completion": "class Solution(object):\n    def getPermutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        nums = list(range(1, n + 1))\n        fact = 1\n        k -= 1\n        ans = \"\"\n        \n        # find the factorial of n\n        for i in range(1, n):\n            fact *= i\n            \n        # find the kth permutation\n        k %= fact\n        \n        # find the index of the number to be added\n        # in the permutation\n        for i in range(n - 1, -1, -1):\n            fact //= i\n            # find the index of the number to be added\n            # in the permutation\n            idx = k // fact\n            ans += str(nums[idx])\n            # remove the number from the list\n            nums.pop(idx)\n            k %= fact\n            \n        return ans"}], "two-sum-ii-input-array-is-sorted": [{"task_id": "two-sum-ii-input-array-is-sorted", "completion": "class Solution(object):\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        left = 0\n        right = len(numbers) - 1\n        \n        while left < right:\n            if numbers[left] + numbers[right] < target:\n                left += 1\n            elif numbers[left] + numbers[right] > target:\n                right -= 1\n            else:\n                return [left + 1, right + 1]\n        \n        return [left + 1, right + 1]"}], "expression-add-operators": [{"task_id": "expression-add-operators", "completion": "class Solution(object):\n    def addOperators(self, num, target):\n        \"\"\"\n        :type num: str\n        :type target: int\n        :rtype: List[str]\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def addOperators(self, num, target):\n        \"\"\"\n        :type num: str\n        :type target: int\n        :rtype: List[str]\n        \"\"\""}], "sum-root-to-leaf-numbers": [{"task_id": "sum-root-to-leaf-numbers", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        self.sum = 0\n        def dfs(node, num):\n            if not node:\n                return 0\n            num = num * 10 + node.val\n            if not node.left and not node.right:\n                self.sum += num\n            dfs(node.left, num)\n            dfs(node.right, num)\n        dfs(root, 0)\n        return self.sum"}], "license-key-formatting": [{"task_id": "license-key-formatting", "completion": "class Solution(object):\n    def licenseKeyFormatting(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        s = s.replace('-', '').upper()\n        n = len(s)\n        if n <= k:\n            return s\n        return s[:n - n % k] + '-' + self.licenseKeyFormatting(s[n - n % k:], k)"}], "gas-station": [{"task_id": "gas-station", "completion": "class Solution(object):\n    def canCompleteCircuit(self, gas, cost):\n        \"\"\"\n        :type gas: List[int]\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(gas)\n        if sum(gas) < sum(cost):\n            return -1\n        \n        curr_sum = 0\n        total_sum = 0\n        start = 0\n        \n        for i in range(n):\n            curr_sum += gas[i] - cost[i]\n            total_sum += gas[i] - cost[i]\n            \n            if curr_sum < 0:\n                start = i + 1\n                curr_sum = 0\n        \n        return start if total_sum >= 0 else -1"}], "burst-balloons": [{"task_id": "burst-balloons", "completion": "class Solution(object):\n    def maxCoins(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def maxCoins(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums = [1] + nums + [1]\n        n = len(nums)\n        dp = [[0] * n for _ in range(n)]\n        for l in range(2, n):\n            for i in range(n - l):\n                j = i + l\n                for k in range(i + 1, j):\n                    dp[i][j] = max(dp[i][j], dp[i][k] + dp[k][j] + nums[i] * nums[k] * nums[j])\n        return dp[0][n - 1]"}], "plus-one": [{"task_id": "plus-one", "completion": "class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        n = len(digits)\n        for i in range(n - 1, -1, -1):\n            if digits[i] < 9:\n                digits[i] += 1\n                return digits\n            digits[i] = 0\n        digits.insert(0, 1)\n        return digits"}], "regular-expression-matching": [{"task_id": "regular-expression-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\""}], "create-maximum-number": [{"task_id": "create-maximum-number", "completion": "class Solution(object):\n    def maxNumber(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\""}], "perfect-number": [{"task_id": "perfect-number", "completion": "class Solution(object):\n    def checkPerfectNumber(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return False\n        \n        sum_divisors = 1\n        \n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                sum_divisors += i + num // i\n        \n        return sum_divisors == num"}], "fibonacci-number": [{"task_id": "fibonacci-number", "completion": "class Solution(object):\n    def fib(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        \n        a = 0\n        b = 1\n        for i in range(2, n + 1):\n            c = a + b\n            a = b\n            b = c\n        \n        return b"}], "dungeon-game": [{"task_id": "dungeon-game", "completion": "class Solution(object):\n    def calculateMinimumHP(self, dungeon):\n        \"\"\"\n        :type dungeon: List[List[int]]\n        :rtype: int\n        \"\"\""}], "find-k-th-smallest-pair-distance": [{"task_id": "find-k-th-smallest-pair-distance", "completion": "class Solution(object):\n    def smallestDistancePair(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def smallestDistancePair(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        n = len(nums)\n        l, r = 0, nums[-1] - nums[0]\n        while l < r:\n            m = (l + r) // 2\n            c = m\n            j = 0\n            for i in nums:\n                while i + m < nums[j] + m:\n                    j += 1\n                c += j - j // 2\n            if c >= k:\n                r = m\n            else:\n                l = m + 1\n        return l"}], "number-of-segments-in-a-string": [{"task_id": "number-of-segments-in-a-string", "completion": "class Solution(object):\n    def countSegments(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        return len(s.split())"}], "reverse-vowels-of-a-string": [{"task_id": "reverse-vowels-of-a-string", "completion": "class Solution(object):\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n        s = list(s)\n        l, r = 0, len(s) - 1\n        while l < r:\n            if s[l] in vowels and s[r] in vowels:\n                s[l], s[r] = s[r], s[l]\n                l += 1\n                r -= 1\n            elif s[l] not in vowels:\n                l += 1\n            elif s[r] not in vowels:\n                r -= 1\n        return ''.join(s)"}], "longest-consecutive-sequence": [{"task_id": "longest-consecutive-sequence", "completion": "class Solution(object):\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums_set = set(nums)\n        longest_seq = 0\n        \n        for num in nums:\n            if num - 1 not in nums_set:\n                curr_num = num\n                curr_seq = 1\n                \n                while curr_num + 1 in nums_set:\n                    curr_num += 1\n                    curr_seq += 1\n                \n                longest_seq = max(longest_seq, curr_seq)\n        \n        return longest_seq"}], "missing-number": [{"task_id": "missing-number", "completion": "class Solution(object):\n    def missingNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(nums)\n        xor = n\n        for i in range(n):\n            xor ^= i\n            xor ^= nums[i]\n        return xor"}], "word-ladder": [{"task_id": "word-ladder", "completion": "class Solution(object):\n    def ladderLength(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def ladderLength(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\""}], "add-binary": [{"task_id": "add-binary", "completion": "class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        \n        a_len = len(a)\n        b_len = len(b)\n        if a_len < b_len:\n            a, b = b, a\n            a_len, b_len = b_len, a_len\n        \n        a = a[::-1]\n        b = b[::-1]\n        \n        res = ''\n        carry = 0\n        for i in range(a_len):\n            sum_ = carry\n            if i < b_len:\n                sum_ += int(a[i]) + int(b[i])\n            if sum_ == 0:\n                res += '0'\n            elif sum_ == 1:\n                res += '1'\n                carry = 0\n            elif sum_ == 2:\n                res += '0'\n                carry = 1\n            else:\n                res += '1'\n                carry = 1\n        \n        if a_len == b_len:\n            return res\n        \n        for i in range(b_len, a_len):\n            sum_ = carry\n            if a[i] == '1':\n                sum_ += 1\n            if sum_ == 0:\n                res += '0'\n            elif sum_ == 1:\n                res += '1'\n                carry = 0\n            elif sum_ == 2:\n                res += '0'\n                carry = 1\n            else:\n                res += '1'\n                carry = 1\n        \n        if carry == 1:\n            res += '1'\n        \n        return res[::-1]"}], "find-first-and-last-position-of-element-in-sorted-array": [{"task_id": "find-first-and-last-position-of-element-in-sorted-array", "completion": "class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums) == 0:\n            return [-1, -1]\n        \n        left = 0\n        right = len(nums) - 1\n        while left < right:\n            mid = (left + right) // 2\n            if nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid\n        \n        if nums[left] != target:\n            return [-1, -1]\n        \n        left = left + 1\n        right = len(nums) - 1\n        while left < right:\n            mid = (left + right) // 2\n            if nums[mid] > target:\n                right = mid - 1\n            else:\n                left = mid\n        \n        return [left, right]"}], "remove-duplicates-from-sorted-array": [{"task_id": "remove-duplicates-from-sorted-array", "completion": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        k = 0\n        for num in nums:\n            if k < 2 or nums[k-2] != num:\n                nums[k] = num\n                k += 1\n        return k"}], "jump-game-ii": [{"task_id": "jump-game-ii", "completion": "class Solution(object):\n    def jump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(nums)\n        jumps = 0\n        max_reach = 0\n        cur_reach = 0\n        \n        for i in range(n - 1):\n            max_reach = max(max_reach, i + nums[i])\n            if i == cur_reach:\n                jumps += 1\n                cur_reach = max_reach\n        \n        return jumps"}], "best-time-to-buy-and-sell-stock-iv": [{"task_id": "best-time-to-buy-and-sell-stock-iv", "completion": "class Solution(object):\n    def maxProfit(self, k, prices):\n        \"\"\"\n        :type k: int\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if k >= len(prices) // 2:\n            return sum(max(prices[i+1] - prices[i], 0) for i in range(0, len(prices) - 1))\n        \n        # if k >= len(prices) // 2:\n        #     return sum(max(prices[i+1] - prices[i], 0) for i in range(0, len(prices) - 1))\n        \n        # if k >= len(prices) // 2:\n        #     return sum(max(prices[i+1] - prices[i], 0) for i in range(0, len(prices) - 1))\n        \n        # if k >= len(prices) // 2:\n        #     return sum(max(prices[i+1] - prices[i], 0) for i in range(0, len(prices) - 1))\n        \n        # if k >= len(prices) // 2:\n        #     return sum(max(prices[i+1] - prices[i], 0) for i in range(0, len(prices) - 1))\n        \n        # if k >= len(prices) // 2:\n        #     return sum(max(prices[i+1] - prices[i], 0) for i in range(0, len(prices) - 1))\n        \n        # if k >= len(prices) // 2:\n        #     return sum(max(prices[i+1] - prices[i], 0) for i in range(0, len(prices) - 1))\n        \n        # if k >= len(prices) // 2:\n        #     return sum(max(prices[i+1] - prices[i], 0) for i in range(0, len(prices) - 1))\n        \n        # if k >= len(prices) // 2:\n        #     return sum(max(prices[i+1] - prices[i], 0) for i in range(0, len(prices) - 1))\n        \n        # if k >= len(prices) // 2:\n        #     return sum(max(prices[i+1] - prices[i], 0) for i in range(0, len(prices) - 1))\n        \n        # if k >= len(prices) // 2:\n        #     return sum(max(prices[i+1] - prices[i], 0) for i in range(0, len(prices) - 1))\n        \n        # if k >= len(prices) // 2:\n        #     return sum(max(prices[i+1] - prices[i], 0) for i in range(0, len(prices) - 1))\n        \n        # if k >= len(prices) // 2:\n        #     return sum(max(prices[i+1] - prices[i], 0) for i in range(0, len(prices) - 1))\n        \n        # if k >= len(prices) // 2:\n        #     return sum(max(prices[i+1] - prices[i], 0) for i in range(0, len(prices) - 1))\n        \n        # if k >= len(prices) // 2:\n        #     return sum(max(prices[i+1] - prices[i], 0) for i in range(0, len(prices) - 1))\n        \n        # if k >= len(prices) // 2:\n        #     return sum(max(prices[i+1] - prices[i], 0) for i in range(0, len(prices) - 1))\n        \n        # if k >= len(prices) // 2:\n        #     return sum(max(prices[i+1] - prices[i], 0) for i in range(0, len(prices) - 1))\n        \n        # if k >= len(prices) // 2:\n        #     return sum(max(prices[i+1] - prices[i], 0) for i in range(0, len(prices) - 1))"}], "convert-a-number-to-hexadecimal": [{"task_id": "convert-a-number-to-hexadecimal", "completion": "class Solution(object):\n    def toHex(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        \n        hex_dict = {10: \"a\", 11: \"b\", 12: \"c\", 13: \"d\", 14: \"e\", 15: \"f\"}\n        hex_str = \"\"\n        if num < 0:\n            num = 2 ** 32 + num\n        \n        while num > 0:\n            hex_str = str(num % 16) + hex_str\n            num //= 16\n        \n        return hex_str"}], "first-unique-character-in-a-string": [{"task_id": "first-unique-character-in-a-string", "completion": "class Solution(object):\n    def firstUniqChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # We can use a hashmap to store the frequency of each character in the string.\n        # We can then iterate through the string and return the index of the first character with a frequency of 1.\n        # If we reach the end of the string without finding a character with a frequency of 1, we return -1.\n        \n        # We can use a set to store the characters we have already seen.\n        # We can then iterate through the string and add the character to the set.\n        # If the character is already in the set, we can remove it from the set and continue.\n        # If the character is not in the set, we can add it to the set and continue.\n        # We can then iterate through the string again and return the index of the first character with a frequency of 1.\n        # If we reach the end of the string without finding a character with a frequency of 1, we return -1.\n        \n        # We can use a dictionary to store the index of the first character with a frequency of 1.\n        # We can then iterate through the string and add the character to the dictionary.\n        # If the character is already in the dictionary, we can remove it from the dictionary and continue.\n        # If the character is not in the dictionary, we can add it to the dictionary and continue.\n        # We can then iterate through the string again and return the index of the first character with a frequency of 1.\n        # If we reach the end of the string without finding a character with a frequency of 1, we return -1.\n        \n        # We can use a set to store the characters we have already seen.\n        # We can then iterate through the string and add the character to the set.\n        # If the character is already in the set, we can remove it from the set and continue.\n        # If the character is not in the set, we can add it to the set and continue.\n        # We can then iterate through the string again and return the index of the first character with a frequency of 1.\n        # If we reach the end of the string without finding a character with a frequency of 1, we return -1.\n        \n        # We can use a dictionary to store the index of the first character with a frequency of 1.\n        # We can then iterate through the string and add the character to the dictionary.\n        # If the character is already in the dictionary, we can remove it from the dictionary and continue.\n        # If the character is not in the dictionary, we can add it to the dictionary and continue.\n        # We can then iterate through the string again and return the index of the first character with a frequency of 1.\n        # If we reach the end of the string without finding a character with a frequency of 1, we return -1.\n        \n        # We can use a set to store the characters we have already seen.\n        # We can then iterate through the string and add the character to the set.\n        # If the character is already in the set, we can remove it from the set and continue.\n        # If the character is not in the set, we can add it to the set and continue.\n        # We can then iterate through the string again and return the index of the first character with a frequency of 1.\n        # If we reach the end of the string without finding a character with a frequency of 1, we return -1.\n        \n        # We can use a dictionary to store the index of the first character with a frequency of 1.\n        # We can then iterate through the string and add the character to the dictionary.\n        # If the character is already in the dictionary, we can remove it from the dictionary and continue.\n        # If the character is not in the dictionary, we can add it to the dictionary and continue.\n        # We can then iterate through the string again and return the index of the first character with a frequency of 1.\n        # If we reach the end of the string without finding a character with a frequency of 1, we return -1.\n        \n        # We can use a set to store the characters we have already seen.\n        # We can then iterate through the string and add the character to the set.\n        # If the character is already in the set, we can remove it from the set and continue.\n        # If the character is not in the set, we can add it to the set and continue.\n        # We can then iterate through the"}], "contains-duplicate-iii": [{"task_id": "contains-duplicate-iii", "completion": "class Solution(object):\n    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff):\n        \"\"\"\n        :type nums: List[int]\n        :type indexDiff: int\n        :type valueDiff: int\n        :rtype: bool\n        \"\"\"\n        \n\n\n# Completion\nclass Solution(object):\n    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff):\n        \"\"\"\n        :type nums: List[int]\n        :type indexDiff: int\n        :type valueDiff: int\n        :rtype: bool\n        \"\"\"\n        \n        if valueDiff < 0:\n            return False\n        \n        # We will use a set to keep track of the closest value to nums[i]\n        # We will use a set to keep track of the closest value to nums[i] + valueDiff\n        # We will use a set to keep track of the closest value to nums[i] - valueDiff\n        # We will use a set to keep track of the closest value to nums[i] + valueDiff / (indexDiff + 1)\n        # We will use a set to keep track of the closest value to nums[i] - valueDiff / (indexDiff + 1)\n        # We will use a set to keep track of the closest value to nums[i] + valueDiff / (indexDiff + 1)\n        # We will use a set to keep track of the closest value to nums[i] - valueDiff / (indexDiff + 1)\n        # We will use a set to keep track of the closest value to nums[i] + valueDiff / (indexDiff + 1)\n        # We will use a set to keep track of the closest value to nums[i] - valueDiff / (indexDiff + 1)\n        # We will use a set to keep track of the closest value to nums[i] + valueDiff / (indexDiff + 1)\n        # We will use a set to keep track of the closest value to nums[i] - valueDiff / (indexDiff + 1)\n        # We will use a set to keep track of the closest value to nums[i] + valueDiff / (indexDiff + 1)\n        # We will use a set to keep track of the closest value to nums[i] - valueDiff / (indexDiff + 1)\n        # We will use a set to keep track of the closest value to nums[i] + valueDiff / (indexDiff + 1)\n        # We will use a set to keep track of the closest value to nums[i] - valueDiff / (indexDiff + 1)\n        # We will use a set to keep track of the closest value to nums[i] + valueDiff / (indexDiff + 1)\n        # We will use a set to keep track of the closest value to nums[i] - valueDiff / (indexDiff + 1)\n        # We will use a set to keep track of the closest value to nums[i] + valueDiff / (indexDiff + 1)\n        # We will use a set to keep track of the closest value to nums[i] - valueDiff / (indexDiff + 1)\n        # We will use a set to keep track of the closest value to nums[i] + valueDiff / (indexDiff + 1)\n        # We will use a set to keep track of the closest value to nums[i] - valueDiff / (indexDiff + 1)\n        # We will use a set to keep track of the closest value to nums[i] + valueDiff / (indexDiff + 1)\n        # We will use a set to keep track of the closest value to nums[i] - valueDiff / (indexDiff + 1)\n        # We will use a set to keep track of the closest value to nums[i] + valueDiff / (indexDiff + 1)\n        # We will use a set to keep track of the closest value to nums[i] - valueDiff / (indexDiff + 1)\n        # We will use a set to keep track of the closest value to nums[i] + valueDiff / (indexDiff + 1)\n        # We will use a set to keep track of the closest value to nums[i] - valueDiff / (indexDiff + 1)\n        # We will use a set to keep track of the closest value to nums[i] + valueDiff / (indexDiff + 1)\n        # We will use a set to keep track of the closest value to nums[i] - valueDiff / (indexDiff + 1)\n        # We will use a set to keep track of the closest value to nums[i] + valueDiff / (indexDiff + 1)\n        # We will use a set to keep track of the closest value to nums[i] - valueDiff / (index"}], "sort-colors": [{"task_id": "sort-colors", "completion": "class Solution(object):\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2"}], "max-consecutive-ones": [{"task_id": "max-consecutive-ones", "completion": "class Solution(object):\n    def findMaxConsecutiveOnes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_consec = 0\n        consec = 0\n        for num in nums:\n            if num == 1:\n                consec += 1\n            else:\n                consec = 0\n            max_consec = max(consec, max_consec)\n        return max_consec"}], "count-complete-tree-nodes": [{"task_id": "count-complete-tree-nodes", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def countNodes(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        left_height = 0\n        left_node = root\n        while left_node:\n            left_height += 1\n            left_node = left_node.left\n        \n        right_height = 0\n        right_node = root\n        while right_node:\n            right_height += 1\n            right_node = right_node.right\n        \n        if left_height == right_height:\n            return 2 ** left_height - 1\n        \n        return 1 + self.countNodes(root.left) + self.countNodes(root.right)"}], "add-strings": [{"task_id": "add-strings", "completion": "class Solution(object):\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        if len(num1) < len(num2):\n            num1, num2 = num2, num1\n        \n        num1 = num1[::-1]\n        num2 = num2[::-1]\n        \n        carry = 0\n        ans = []\n        \n        for i in range(len(num1)):\n            sum_ = carry\n            if i < len(num2):\n                sum_ += int(num1[i]) + int(num2[i])\n            else:\n                sum_ += int(num1[i])\n            \n            ans.append(str(sum_ % 10))\n            carry = sum_ // 10\n        \n        if carry:\n            ans.append(str(carry))\n        \n        return ''.join(ans[::-1])"}], "basic-calculator": [{"task_id": "basic-calculator", "completion": "class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\""}], "ipo": [{"task_id": "ipo", "completion": "class Solution(object):\n    def findMaximizedCapital(self, k, w, profits, capital):\n        \"\"\"\n        :type k: int\n        :type w: int\n        :type profits: List[int]\n        :type capital: List[int]\n        :rtype: int\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def findMaximizedCapital(self, k, w, profits, capital):\n        \"\"\"\n        :type k: int\n        :type w: int\n        :type profits: List[int]\n        :type capital: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. sort by capital\n        # 2. greedily pick the projects with the smallest capital\n        # 3. if we have no more projects to pick, return the current capital\n        # 4. otherwise, pick the project with the smallest capital and add its profit to the capital\n        # 5. if we have no more projects to pick, return the current capital\n        # 6. otherwise, pick the project with the smallest capital and add its profit to the capital\n        # 7. repeat 5 and 6 until we have no more projects to pick or we have no more capital\n        # 8. return the current capital\n        \n        # 1. sort by capital\n        projects = sorted(zip(capital, profits), reverse=True)\n        \n        # 2. greedily pick the projects with the smallest capital\n        # 3. if we have no more projects to pick, return the current capital\n        # 4. otherwise, pick the project with the smallest capital and add its profit to the capital\n        # 5. if we have no more projects to pick, return the current capital\n        # 6. otherwise, pick the project with the smallest capital and add its profit to the capital\n        # 7. repeat 5 and 6 until we have no more projects to pick or we have no more capital\n        # 8. return the current capital\n        \n        # 2. greedily pick the projects with the smallest capital\n        # 3. if we have no more projects to pick, return the current capital\n        # 4. otherwise, pick the project with the smallest capital and add its profit to the capital\n        # 5. if we have no more projects to pick, return the current capital\n        # 6. otherwise, pick the project with the smallest capital and add its profit to the capital\n        # 7. repeat 5 and 6 until we have no more projects to pick or we have no more capital\n        # 8. return the current capital\n        \n        # 3. greedily pick the projects with the smallest capital\n        # 4. if we have no more projects to pick, return the current capital\n        # 5. otherwise, pick the project with the smallest capital and add its profit to the capital\n        # 6. if we have no more projects to pick, return the current capital\n        # 7. otherwise, pick the project with the smallest capital and add its profit to the capital\n        # 8. repeat 5 and 6 until we have no more projects to pick or we have no more capital\n        # 9. return the current capital\n        \n        # 4. greedily pick the projects with the smallest capital\n        # 5. if we have no more projects to pick, return the current capital\n        # 6. otherwise, pick the project with the smallest capital and add its profit to the capital\n        # 7. if we have no more projects to pick, return the current capital\n        # 8. otherwise, pick the project with the smallest capital and add its profit to the capital\n        # 9. repeat 5 and 6 until we have no more projects to pick or we have no more capital\n        # 10. return the current capital\n        \n        # 5. greedily pick the projects with the smallest capital\n        # 6. if we have no more projects to pick, return the current capital\n        # 7. otherwise, pick the project with the smallest capital and add its profit to the capital\n        # 8. if we have no more projects to pick, return the current capital\n        # 9. otherwise, pick the project with the smallest capital and add its profit to the capital\n        # 10. repeat 5 and 6 until we have no more projects to pick or we have no more capital\n        # 11. return the current capital\n        \n        # 6. greedily pick the projects with the smallest capital\n        # 7. if we have no more projects to pick, return the current capital\n        # 8. otherwise, pick the project with the smallest capital and add its profit to the capital\n        # 9. if we have no more projects to pick, return the current capital\n        # 10. otherwise, pick the project with the smallest"}], "valid-parentheses": [{"task_id": "valid-parentheses", "completion": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        stack = []\n        d = {')': '(', ']': '[', '}': '{'}\n        for c in s:\n            if c in d:\n                if stack and stack[-1] == d[c]:\n                    stack.pop()\n                else:\n                    return False\n            else:\n                stack.append(c)\n        return not stack"}], "next-permutation": [{"task_id": "next-permutation", "completion": "class Solution(object):\n    def nextPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # Find the first number that is smaller than the number to the right of it\n        # Find the number that is larger than the number to the right of it\n        # Swap the numbers\n        # Reverse the numbers to the right of the number that was swapped\n        # Return\n\n        # Find the first number that is smaller than the number to the right of it\n        i = len(nums) - 2\n        while i >= 0 and nums[i] >= nums[i + 1]:\n            i -= 1\n\n        # Find the number that is larger than the number to the right of it\n        j = len(nums) - 1\n        if i >= 0:\n            while nums[j] <= nums[i]:\n                j -= 1\n            nums[i], nums[j] = nums[j], nums[i]\n\n        # Swap the numbers\n        nums[i + 1:] = nums[len(nums) - 1: i:-1]\n\n        return nums"}], "contains-duplicate-ii": [{"task_id": "contains-duplicate-ii", "completion": "class Solution(object):\n    def containsNearbyDuplicate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        \n        if len(nums) <= 1:\n            return False\n        \n        d = {}\n        \n        for i, n in enumerate(nums):\n            if n in d and i - d[n] <= k:\n                return True\n            d[n] = i\n        \n        return False"}], "maximum-gap": [{"task_id": "maximum-gap", "completion": "class Solution(object):\n    def maximumGap(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def maximumGap(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 2:\n            return 0\n        \n        nums.sort()\n        ans = 0\n        for x in nums:\n            ans = max(ans, x - nums[len(nums) - 1])\n        \n        return ans"}], "binary-tree-level-order-traversal": [{"task_id": "binary-tree-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        q = [root]\n        ans = []\n        \n        while q:\n            ans.append([node.val for node in q])\n            q = [child for node in q if node for child in (node.left, node.right) if child]\n        \n        return ans"}], "couples-holding-hands": [{"task_id": "couples-holding-hands", "completion": "class Solution(object):\n    def minSwapsCouples(self, row):\n        \"\"\"\n        :type row: List[int]\n        :rtype: int\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def minSwapsCouples(self, row):\n        \"\"\"\n        :type row: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(row)\n        if n == 2:\n            return 0\n        \n        # 1. 2n couples\n        # 2. 2n - 1 swaps\n        # 3. 2n - 2 swaps\n        # 4. 2n - 3 swaps\n        # 5. 2n - 4 swaps\n        # 6. 2n - 5 swaps\n        # 7. 2n - 6 swaps\n        # 8. 2n - 7 swaps\n        # 9. 2n - 8 swaps\n        # 10. 2n - 9 swaps\n        # 11. 2n - 10 swaps\n        # 12. 2n - 11 swaps\n        # 13. 2n - 12 swaps\n        # 14. 2n - 13 swaps\n        # 15. 2n - 14 swaps\n        # 16. 2n - 15 swaps\n        # 17. 2n - 16 swaps\n        # 18. 2n - 17 swaps\n        # 19. 2n - 18 swaps\n        # 20. 2n - 19 swaps\n        # 21. 2n - 20 swaps\n        # 22. 2n - 21 swaps\n        # 23. 2n - 22 swaps\n        # 24. 2n - 23 swaps\n        # 25. 2n - 24 swaps\n        # 26. 2n - 25 swaps\n        # 27. 2n - 26 swaps\n        # 28. 2n - 27 swaps\n        # 29. 2n - 28 swaps\n        # 30. 2n - 29 swaps\n        # 31. 2n - 30 swaps\n        # 32. 2n - 31 swaps\n        # 33. 2n - 32 swaps\n        # 34. 2n - 33 swaps\n        # 35. 2n - 34 swaps\n        # 36. 2n - 35 swaps\n        # 37. 2n - 36 swaps\n        # 38. 2n - 37 swaps\n        # 39. 2n - 38 swaps\n        # 40. 2n - 39 swaps\n        # 41. 2n - 40 swaps\n        # 42. 2n - 41 swaps\n        # 43. 2n - 42 swaps\n        # 44. 2n - 43 swaps\n        # 45. 2n - 44 swaps\n        # 46. 2n - 45 swaps\n        # 47. 2n - 46 swaps\n        # 48. 2n - 47 swaps\n        # 49. 2n - 48 swaps\n        # 50. 2n - 49 swaps\n        # 51. 2n - 50 swaps\n        # 52. 2n - 51 swaps\n        # 53. 2n - 52 swaps\n        # 54. 2n - 53 swaps\n        # 55. 2n - 54 swaps\n        # 56. 2n - 55 swaps\n        # 57. 2n - 56 swaps\n        # 58. 2n - 57 swaps\n        # 59. 2n - 58 swaps\n        # 60. 2n - 59 swaps\n        # 61. 2n - 60 swaps"}], "interleaving-string": [{"task_id": "interleaving-string", "completion": "class Solution(object):\n    def isInterleave(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) + len(s2) != len(s3):\n            return False\n        \n        if not s1:\n            return s2 == s3\n        \n        if not s2:\n            return s1 == s3\n        \n        if s1[0] == s3[0] and s2[0] == s3[0]:\n            return self.isInterleave(s1[1:], s2, s3[1:]) or self.isInterleave(s1, s2[1:], s3[1:])\n        \n        if s1[0] == s3[0]:\n            return self.isInterleave(s1[1:], s2, s3[1:])\n        \n        if s2[0] == s3[0]:\n            return self.isInterleave(s1, s2[1:], s3[1:])\n        \n        return False"}], "assign-cookies": [{"task_id": "assign-cookies", "completion": "class Solution(object):\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        \n        g.sort()\n        s.sort()\n        i = j = 0\n        while i < len(g) and j < len(s):\n            if s[j] >= g[i]:\n                i += 1\n            j += 1\n        return i"}], "keyboard-row": [{"task_id": "keyboard-row", "completion": "class Solution(object):\n    def findWords(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        row1 = set(\"qwertyuiop\")\n        row2 = set(\"asdfghjkl\")\n        row3 = set(\"zxcvbnm\")\n        \n        ans = []\n        \n        for word in words:\n            if word[0] in row1:\n                r = row1\n            elif word[0] in row2:\n                r = row2\n            else:\n                r = row3\n            \n            if all(w in r for w in word):\n                ans.append(word)\n        \n        return ans"}], "reverse-linked-list-ii": [{"task_id": "reverse-linked-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseBetween(self, head, left, right):\n        \"\"\"\n        :type head: ListNode\n        :type left: int\n        :type right: int\n        :rtype: ListNode\n        \"\"\"\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        leftNode = dummy\n        rightNode = dummy\n        \n        for _ in range(left - 1):\n            leftNode = leftNode.next\n        \n        for _ in range(right - left):\n            rightNode = rightNode.next\n        \n        leftNode.next, rightNode.next = rightNode.next, leftNode.next\n        \n        return dummy.next"}], "shortest-palindrome": [{"task_id": "shortest-palindrome", "completion": "class Solution(object):\n    def shortestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # reverse the string\n        # then find the longest palindrome that can be formed\n        # by the reversed string\n        # then add the reversed string to the front of the original string\n        # and return the result\n        \n        # reverse the string\n        s_reverse = s[::-1]\n        \n        # find the longest palindrome that can be formed\n        # by the reversed string\n        # the longest palindrome that can be formed\n        # by the reversed string is the longest palindrome that can be formed\n        # by the original string\n        # so we just need to find the longest palindrome that can be formed\n        # by the original string\n        # the longest palindrome that can be formed\n        # by the original string is the longest palindrome that can be formed\n        # by the reversed string\n        # so we just need to find the longest palindrome that can be formed\n        # by the reversed string\n        # the longest palindrome that can be formed\n        # by the reversed string is the longest palindrome that can be formed\n        # by the original string\n        # so we just need to find the longest palindrome that can be formed\n        # by the original string\n        # the longest palindrome that can be formed\n        # by the original string is the longest palindrome that can be formed\n        # by the reversed string\n        # so we just need to find the longest palindrome that can be formed\n        # by the reversed string\n        # the longest palindrome that can be formed\n        # by the reversed string is the longest palindrome that can be formed\n        # by the original string\n        # so we just need to find the longest palindrome that can be formed\n        # by the original string\n        # the longest palindrome that can be formed\n        # by the original string is the longest palindrome that can be formed\n        # by the reversed string\n        # so we just need to find the longest palindrome that can be formed\n        # by the reversed string\n        # the longest palindrome that can be formed\n        # by the reversed string is the longest palindrome that can be formed\n        # by the original string\n        # so we just need to find the longest palindrome that can be formed\n        # by the original string\n        # the longest palindrome that can be formed\n        # by the original string is the longest palindrome that can be formed\n        # by the reversed string\n        # so we just need to find the longest palindrome that can be formed\n        # by the reversed string\n        # the longest palindrome that can be formed\n        # by the reversed string is the longest palindrome that can be formed\n        # by the original string\n        # so we just need to find the longest palindrome that can be formed\n        # by the original string\n        # the longest palindrome that can be formed\n        # by the original string is the longest palindrome that can be formed\n        # by the reversed string\n        # so we just need to find the longest palindrome that can be formed\n        # by the reversed string\n        # the longest palindrome that can be formed\n        # by the reversed string is the longest palindrome that can be formed\n        # by the original string\n        # so we just need to find the longest palindrome that can be formed\n        # by the original string\n        # the longest palindrome that can be formed\n        # by the original string is the longest palindrome that can be formed\n        # by the reversed string\n        # so we just need to find the longest palindrome that can be formed\n        # by the reversed string\n        # the longest palindrome that can be formed\n        # by the reversed string is the longest palindrome that can be formed\n        # by the original string\n        # so we just need to find the longest palindrome that can be formed\n        # by the original string\n        # the longest palindrome that can be formed\n        # by the original string is the longest palindrome that can be formed\n        # by the reversed string\n        # so we just need to find the longest palindrome that can be formed\n        # by the reversed string\n        # the longest palindrome that can be formed\n        # by the reversed string is the longest palindrome that can be formed\n        # by the original string\n        # so we just need to find the longest palindrome that can be formed"}], "minimum-window-substring": [{"task_id": "minimum-window-substring", "completion": "class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\""}], "self-crossing": [{"task_id": "self-crossing", "completion": "class Solution(object):\n    def isSelfCrossing(self, distance):\n        \"\"\"\n        :type distance: List[int]\n        :rtype: bool\n        \"\"\""}], "remove-duplicates-from-sorted-list": [{"task_id": "remove-duplicates-from-sorted-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        curr = head\n        while curr:\n            if curr.next and curr.val == curr.next.val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        return head"}], "longest-palindrome": [{"task_id": "longest-palindrome", "completion": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. Count the number of each character in the string\n        # 2. If the number of the character is odd, add 1 to the result\n        # 3. If the number of the character is even, add it to the result\n        # 4. Return the result\n        \n        char_count = {}\n        for char in s:\n            if char not in char_count:\n                char_count[char] = 1\n            else:\n                char_count[char] += 1\n        \n        result = 0\n        has_odd = False\n        for char in char_count:\n            if char_count[char] % 2 == 0:\n                result += char_count[char]\n            else:\n                result += char_count[char] - 1\n                has_odd = True\n        \n        if has_odd:\n            result += 1\n        \n        return result"}], "construct-binary-tree-from-inorder-and-postorder-traversal": [{"task_id": "construct-binary-tree-from-inorder-and-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not inorder:\n            return None\n        \n        root = TreeNode(postorder[-1])\n        inorder_index = inorder.index(root.val)\n        root.right = self.buildTree(inorder[inorder_index + 1:], postorder[inorder_index:-1])\n        root.left = self.buildTree(inorder[:inorder_index], postorder[:inorder_index])\n        \n        return root"}], "cut-off-trees-for-golf-event": [{"task_id": "cut-off-trees-for-golf-event", "completion": "class Solution(object):\n    def cutOffTree(self, forest):\n        \"\"\"\n        :type forest: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def cutOffTree(self, forest):\n        \"\"\"\n        :type forest: List[List[int]]\n        :rtype: int\n        \"\"\""}], "minimum-depth-of-binary-tree": [{"task_id": "minimum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def minDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        if not root.left:\n            return self.minDepth(root.right) + 1\n        \n        if not root.right:\n            return self.minDepth(root.left) + 1\n        \n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1"}], "count-of-range-sum": [{"task_id": "count-of-range-sum", "completion": "class Solution(object):\n    def countRangeSum(self, nums, lower, upper):\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def countRangeSum(self, nums, lower, upper):\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"\n        \n        n = len(nums)\n        s = [0]\n        for num in nums:\n            s.append(s[-1] + num)\n        s.sort()\n        ans = 0\n        d = {0: 1}\n        for x in s:\n            ans += d.get(x - upper, 0)\n            ans += d.get(x - lower, 0)\n            d[x] = d.get(x, 0) + 1\n        return ans"}], "arranging-coins": [{"task_id": "arranging-coins", "completion": "class Solution(object):\n    def arrangeCoins(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        return int((2 * n + 0.25) ** 0.5 - 0.5)"}], "longest-uncommon-subsequence-i": [{"task_id": "longest-uncommon-subsequence-i", "completion": "class Solution(object):\n    def findLUSlength(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: int\n        \"\"\"\n        \n        if a == b:\n            return -1\n        return max(len(a), len(b))"}], "binary-tree-level-order-traversal-ii": [{"task_id": "binary-tree-level-order-traversal-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        q = [root]\n        res = []\n        \n        while q:\n            res.append([node.val for node in q])\n            q = [child for node in q if node for child in (node.left, node.right) if child]\n        \n        return res[::-1]"}], "palindrome-number": [{"task_id": "palindrome-number", "completion": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        \n        if x < 0:\n            return False\n        \n        if x < 10:\n            return True\n        \n        if x % 10 == 0:\n            return False\n        \n        rev = 0\n        while x > rev:\n            rev = rev * 10 + x % 10\n            x //= 10\n        \n        return x == rev or x == rev // 10"}], "decode-ways": [{"task_id": "decode-ways", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if not s or s[0] == '0':\n            return 0\n        \n        a = b = 1\n        \n        for i in s:\n            a, b = b, (a if i != '0' else 0) + (b if i != '0' and int(s[:2]) <= 26 else 0)\n        \n        return b"}], "is-subsequence": [{"task_id": "is-subsequence", "completion": "class Solution(object):\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        i = 0\n        for c in t:\n            if i < len(s) and c == s[i]:\n                i += 1\n        return i == len(s)"}], "gray-code": [{"task_id": "gray-code", "completion": "class Solution(object):\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\""}], "climbing-stairs": [{"task_id": "climbing-stairs", "completion": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        \n        a = 1\n        b = 2\n        for i in range(3, n + 1):\n            c = a + b\n            a = b\n            b = c\n        \n        return c"}], "word-break": [{"task_id": "word-break", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        \n        n = len(s)\n        dp = [False] * (n + 1)\n        dp[0] = True\n        \n        for i in range(1, n + 1):\n            for word in wordDict:\n                if i - len(word) >= 0 and s[i - len(word):i] == word:\n                    dp[i] = dp[i - len(word)]\n                if dp[i]:\n                    break\n        \n        return dp[n]"}], "validate-binary-search-tree": [{"task_id": "validate-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def isValidBST(root, left, right):\n            if not root:\n                return True\n            \n            if (left and root.val <= left.val) or (right and root.val >= right.val):\n                return False\n            \n            return isValidBST(root.left, left, root) and isValidBST(root.right, root, right)\n        \n        return isValidBST(root, None, None)"}], "insert-interval": [{"task_id": "insert-interval", "completion": "class Solution(object):\n    def insert(self, intervals, newInterval):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type newInterval: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n\n        intervals.append(newInterval)\n        intervals.sort()\n        ans = [intervals[0]]\n        for i in intervals[1:]:\n            if ans[-1][1] >= i[0]:\n                ans[-1][1] = max(ans[-1][1], i[1])\n            else:\n                ans.append(i)\n        return ans"}], "palindrome-partitioning": [{"task_id": "palindrome-partitioning", "completion": "class Solution(object):\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        n = len(s)\n        is_palindrome = [[False] * n for _ in range(n)]\n        for i in range(n - 1, -1, -1):\n            for j in range(i + 1, n):\n                is_palindrome[i][j] = s[i] == s[j] and (j - i <= 1 or is_palindrome[i + 1][j - 1])\n        ans = []\n        self.dfs(s, 0, [], ans, is_palindrome)\n        return ans\n\n    def dfs(self, s, i, path, ans, is_palindrome):\n        if i == len(s):\n            ans.append(path[:])\n            return\n        for j in range(i, len(s)):\n            if is_palindrome[i][j]:\n                self.dfs(s, j + 1, path + [s[i:j + 1]], ans, is_palindrome)"}], "smallest-range-covering-elements-from-k-lists": [{"task_id": "smallest-range-covering-elements-from-k-lists", "completion": "class Solution(object):\n    def smallestRange(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def smallestRange(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[int]\n        \"\"\""}], "poor-pigs": [{"task_id": "poor-pigs", "completion": "class Solution(object):\n    def poorPigs(self, buckets, minutesToDie, minutesToTest):\n        \"\"\"\n        :type buckets: int\n        :type minutesToDie: int\n        :type minutesToTest: int\n        :rtype: int\n        \"\"\""}], "swim-in-rising-water": [{"task_id": "swim-in-rising-water", "completion": "class Solution(object):\n    def swimInWater(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def swimInWater(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        if n == 1:\n            return grid[0][0]\n        \n        # We can use a binary search to find the minimum time to reach the bottom right corner.\n        # The minimum time is the largest value in the grid.\n        # The maximum time is the sum of the values in the grid.\n        # We can use binary search to find the minimum time.\n        # We can use binary search to find the maximum time.\n        # We can use binary search to find the minimum time.\n        # We can use binary search to find the maximum time.\n        # We can use binary search to find the minimum time.\n        # We can use binary search to find the maximum time.\n        # We can use binary search to find the minimum time.\n        # We can use binary search to find the maximum time.\n        # We can use binary search to find the minimum time.\n        # We can use binary search to find the maximum time.\n        # We can use binary search to find the minimum time.\n        # We can use binary search to find the maximum time.\n        # We can use binary search to find the minimum time.\n        # We can use binary search to find the maximum time.\n        # We can use binary search to find the minimum time.\n        # We can use binary search to find the maximum time.\n        # We can use binary search to find the minimum time.\n        # We can use binary search to find the maximum time.\n        # We can use binary search to find the minimum time.\n        # We can use binary search to find the maximum time.\n        # We can use binary search to find the minimum time.\n        # We can use binary search to find the maximum time.\n        # We can use binary search to find the minimum time.\n        # We can use binary search to find the maximum time.\n        # We can use binary search to find the minimum time.\n        # We can use binary search to find the maximum time.\n        # We can use binary search to find the minimum time.\n        # We can use binary search to find the maximum time.\n        # We can use binary search to find the minimum time.\n        # We can use binary search to find the maximum time.\n        # We can use binary search to find the minimum time.\n        # We can use binary search to find the maximum time.\n        # We can use binary search to find the minimum time.\n        # We can use binary search to find the maximum time.\n        # We can use binary search to find the minimum time.\n        # We can use binary search to find the maximum time.\n        # We can use binary search to find the minimum time.\n        # We can use binary search to find the maximum time.\n        # We can use binary search to find the minimum time.\n        # We can use binary search to find the maximum time.\n        # We can use binary search to find the minimum time.\n        # We can use binary search to find the maximum time.\n        # We can use binary search to find the minimum time.\n        # We can use binary search to find the maximum time.\n        # We can use binary search to find the minimum time.\n        # We can use binary search to find the maximum time.\n        # We can use binary search to find the minimum time.\n        # We can use binary search to find the maximum time.\n        # We can use binary search to find the minimum time.\n        # We can use binary search to find the maximum time.\n        # We can use binary search to find the minimum time.\n        # We can use binary search to find the maximum time.\n        # We can use binary search to find the minimum time.\n        # We can use binary search to find the maximum time.\n        # We can use binary search to find the minimum time.\n        # We can use binary search to find the maximum time.\n        # We can use binary search to find the minimum time.\n        # We can use binary search to find the maximum time.\n        # We can use binary search to find the minimum time.\n        # We can use binary search to find the maximum time.\n        # We can use binary search to find the minimum time.\n        # We can use binary search to find the maximum time.\n        # We can use binary search to find the minimum time.\n        # We can use binary search to find the maximum time.\n        # We can"}], "unique-paths": [{"task_id": "unique-paths", "completion": "class Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # if m == 1 or n == 1:\n        #     return 1\n        # return self.uniquePaths(m - 1, n) + self.uniquePaths(m, n - 1)\n        \n        # if m == 1 or n == 1:\n        #     return 1\n        # dp = [1] * n\n        # for i in range(1, m):\n        #     for j in range(1, n):\n        #         dp[j] += dp[j - 1]\n        # return dp[-1]\n        \n        # if m == 1 or n == 1:\n        #     return 1\n        # dp = [1] * n\n        # for i in range(1, m):\n        #     for j in range(1, n):\n        #         dp[j] += dp[j - 1]\n        # return dp[-1]\n        \n        # if m == 1 or n == 1:\n        #     return 1\n        # dp = [1] * n\n        # for i in range(1, m):\n        #     for j in range(1, n):\n        #         dp[j] += dp[j - 1]\n        # return dp[-1]\n        \n        # if m == 1 or n == 1:\n        #     return 1\n        # dp = [1] * n\n        # for i in range(1, m):\n        #     for j in range(1, n):\n        #         dp[j] += dp[j - 1]\n        # return dp[-1]\n        \n        # if m == 1 or n == 1:\n        #     return 1\n        # dp = [1] * n\n        # for i in range(1, m):\n        #     for j in range(1, n):\n        #         dp[j] += dp[j - 1]\n        # return dp[-1]\n        \n        # if m == 1 or n == 1:\n        #     return 1\n        # dp = [1] * n\n        # for i in range(1, m):\n        #     for j in range(1, n):\n        #         dp[j] += dp[j - 1]\n        # return dp[-1]\n        \n        # if m == 1 or n == 1:\n        #     return 1\n        # dp = [1] * n\n        # for i in range(1, m):\n        #     for j in range(1, n):\n        #         dp[j] += dp[j - 1]\n        # return dp[-1]\n        \n        # if m == 1 or n == 1:\n        #     return 1\n        # dp = [1] * n\n        # for i in range(1, m):\n        #     for j in range(1, n):\n        #         dp[j] += dp[j - 1]\n        # return dp[-1]\n        \n        # if m == 1 or n == 1:\n        #     return 1\n        # dp = [1] * n\n        # for i in range(1, m):\n        #     for j in range(1, n):\n        #         dp[j] += dp[j - 1]\n        # return dp[-1]\n        \n        # if m == 1 or n == 1:\n        #     return 1\n        # dp = [1] * n\n        # for i in range(1, m):\n        #     for j in range(1, n):\n        #         dp[j] += dp[j - 1]\n        # return dp[-1]\n        \n        # if m == 1 or n == 1:\n        #     return 1\n        # dp = [1] * n\n        # for i in range(1, m):\n        #     for j in range(1, n):\n        #         dp[j] += dp[j - 1]\n        # return dp[-1]\n        \n        # if m == 1 or n == 1:\n        #     return 1\n        # dp = [1] * n\n        # for i in range(1, m):\n        #     for j in"}], "multiply-strings": [{"task_id": "multiply-strings", "completion": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        if num1 == \"0\" or num2 == \"0\":\n            return \"0\"\n        \n        num1_len = len(num1)\n        num2_len = len(num2)\n        \n        product = \"0\"\n        \n        for i in range(num1_len - 1, -1, -1):\n            num1_digit = num1[i]\n            product_digit_carry = 0\n            \n            j = num2_len - 1\n            \n            while j >= 0:\n                product_digit_carry += int(num2[j]) * int(num1_digit)\n                product_digit_carry += product[j + i + 1]\n                product_digit = product_digit_carry % 10\n                product_digit_carry //= 10\n                product = str(product_digit) + product[j + i + 1:j + 1]\n                j -= 1\n            \n            product = str(product_digit_carry) + product\n            \n        return product"}], "best-time-to-buy-and-sell-stock-iii": [{"task_id": "best-time-to-buy-and-sell-stock-iii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # if len(prices) < 2:\n        #     return 0\n        \n        # left_min = prices[0]\n        # right_max = prices[-1]\n        # left_profit = 0\n        # right_profit = 0\n        \n        # for price in prices:\n        #     left_profit = max(left_profit, price - left_min)\n        #     left_min = min(left_min, price)\n        #     right_profit = max(right_profit, right_max - price)\n        #     right_max = max(right_max, price)\n        \n        # return left_profit\n        \n        # if len(prices) < 2:\n        #     return 0\n        \n        # left_min = prices[0]\n        # right_max = prices[-1]\n        # left_profit = 0\n        # right_profit = 0\n        \n        # for price in prices:\n        #     left_profit = max(left_profit, price - left_min)\n        #     left_min = min(left_min, price)\n        #     right_profit = max(right_profit, price - right_max)\n        #     right_max = max(right_max, price)\n        \n        # return left_profit\n        \n        if len(prices) < 2:\n            return 0\n        \n        left_min = prices[0]\n        right_max = prices[-1]\n        left_profit = 0\n        right_profit = 0\n        \n        for price in prices:\n            left_profit = max(left_profit, price - left_min)\n            left_min = min(left_min, price)\n            right_profit = max(right_profit, price - right_max)\n            right_max = max(right_max, price)\n        \n        return left_profit"}], "combination-sum-ii": [{"task_id": "combination-sum-ii", "completion": "class Solution(object):\n    def combinationSum2(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def combinationSum2(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        ans = []\n        n = len(candidates)\n        i = 0\n        while i < n:\n            if candidates[i] > target:\n                break\n            if i == 0 or candidates[i] != candidates[i - 1]:\n                left = target - candidates[i]\n                right = i\n                while right < n and candidates[right] == candidates[i]:\n                    right += 1\n                ans.append([candidates[i]] * (right - i))\n                i = right\n            i += 1\n        return ans"}], "detect-capital": [{"task_id": "detect-capital", "completion": "class Solution(object):\n    def detectCapitalUse(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        return word.isupper() or word.islower() or word.istitle()"}], "best-time-to-buy-and-sell-stock": [{"task_id": "best-time-to-buy-and-sell-stock", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        min_price = float('inf')\n        max_profit = 0\n        \n        for price in prices:\n            min_price = min(min_price, price)\n            max_profit = max(max_profit, price - min_price)\n        \n        return max_profit"}], "binary-tree-inorder-traversal": [{"task_id": "binary-tree-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        stack = []\n        res = []\n        curr = root\n        \n        while curr or stack:\n            if curr:\n                stack.append(curr)\n                curr = curr.left\n            else:\n                curr = stack.pop()\n                res.append(curr.val)\n                curr = curr.right\n        \n        return res"}], "construct-binary-tree-from-preorder-and-inorder-traversal": [{"task_id": "construct-binary-tree-from-preorder-and-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not preorder:\n            return None\n        \n        root = TreeNode(preorder[0])\n        inorder_index = inorder.index(root.val)\n        root.left = self.buildTree(preorder[1:inorder_index+1], inorder[:inorder_index])\n        root.right = self.buildTree(preorder[inorder_index+1:], inorder[inorder_index+1:])\n        \n        return root"}], "remove-invalid-parentheses": [{"task_id": "remove-invalid-parentheses", "completion": "class Solution(object):\n    def removeInvalidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\""}], "merge-k-sorted-lists": [{"task_id": "merge-k-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        \n        if not lists or len(lists) == 0:\n            return None\n        \n        from heapq import heappush, heappop\n        h = []\n        for l in lists:\n            if l:\n                heappush(h, (l.val, l))\n        \n        dummy = ListNode(0)\n        curr = dummy\n        while h:\n            val, node = heappop(h)\n            curr.next = node\n            curr = curr.next\n            if curr.next:\n                heappush(h, (curr.next.val, curr.next))\n        \n        return dummy.next"}], "palindrome-partitioning-ii": [{"task_id": "palindrome-partitioning-ii", "completion": "class Solution(object):\n    def minCut(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        n = len(s)\n        if n < 2:\n            return 0\n        \n        # dp[i] is the min cut of s[:i+1]\n        dp = [i for i in range(n)]\n        \n        for i in range(n):\n            # j is the center of the palindrome\n            j = 0\n            # j is the center of the palindrome\n            for k in range(i, -1, -1):\n                # if s[k:i+1] is a palindrome\n                if s[k] == s[i]:\n                    # if j is 0, then dp[i] is 0\n                    if j == 0:\n                        dp[i] = 0\n                    # if dp[j-1] is not -1, then dp[i] is min(dp[i], dp[j-1] + 1)\n                    elif dp[j-1] != -1:\n                        dp[i] = min(dp[i], dp[j-1] + 1)\n                # j is the center of the palindrome\n                j += 1\n        \n        return dp[-1]"}], "preimage-size-of-factorial-zeroes-function": [{"task_id": "preimage-size-of-factorial-zeroes-function", "completion": "class Solution(object):\n    def preimageSizeFZF(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # 0 is the only number that ends in 0\n        # 1 is the only number that ends in 5\n        # 2 is the only number that ends in 10\n        # 3 is the only number that ends in 15\n        # 4 is the only number that ends in 20\n        # 5 is the only number that ends in 25\n        # 6 is the only number that ends in 30\n        # 7 is the only number that ends in 35\n        # 8 is the only number that ends in 40\n        # 9 is the only number that ends in 45\n        # 10 is the only number that ends in 50\n        # 11 is the only number that ends in 55\n        # 12 is the only number that ends in 60\n        # 13 is the only number that ends in 65\n        # 14 is the only number that ends in 70\n        # 15 is the only number that ends in 75\n        # 16 is the only number that ends in 80\n        # 17 is the only number that ends in 85\n        # 18 is the only number that ends in 90\n        # 19 is the only number that ends in 95\n        # 20 is the only number that ends in 100\n        # 21 is the only number that ends in 105\n        # 22 is the only number that ends in 110\n        # 23 is the only number that ends in 115\n        # 24 is the only number that ends in 120\n        # 25 is the only number that ends in 125\n        # 26 is the only number that ends in 130\n        # 27 is the only number that ends in 135\n        # 28 is the only number that ends in 140\n        # 29 is the only number that ends in 145\n        # 30 is the only number that ends in 150\n        # 31 is the only number that ends in 155\n        # 32 is the only number that ends in 160\n        # 33 is the only number that ends in 165\n        # 34 is the only number that ends in 170\n        # 35 is the only number that ends in 175\n        # 36 is the only number that ends in 180\n        # 37 is the only number that ends in 185\n        # 38 is the only number that ends in 190\n        # 39 is the only number that ends in 195\n        # 40 is the only number that ends in 200\n        # 41 is the only number that ends in 205\n        # 42 is the only number that ends in 210\n        # 43 is the only number that ends in 215\n        # 44 is the only number that ends in 220\n        # 45 is the only number that ends in 225\n        # 46 is the only number that ends in 230\n        # 47 is the only number that ends in 235\n        # 48 is the only number that ends in 240\n        # 49 is the only number that ends in 245\n        # 50 is the only number that ends in 250\n        # 51 is the only number that ends in 255\n        # 52 is the only number that ends in 260\n        # 53 is the only number that ends in 265\n        # 54 is the only number that ends in 270\n        # 55 is the only number that ends in 275\n        # 56 is the only number that ends in 280\n        # 57 is the only number that ends in 285\n        # 58 is the only number that ends in 290\n        # 59 is the only number that ends in 295\n        # 60 is the only number that ends in 300\n        # 61 is the only number that ends in 305\n        #"}], "palindrome-pairs": [{"task_id": "palindrome-pairs", "completion": "class Solution(object):\n    def palindromePairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[List[int]]\n        \"\"\""}], "convert-sorted-array-to-binary-search-tree": [{"task_id": "convert-sorted-array-to-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedArrayToBST(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not nums:\n            return None\n        \n        mid = len(nums) // 2\n        root = TreeNode(nums[mid])\n        root.left = self.sortedArrayToBST(nums[:mid])\n        root.right = self.sortedArrayToBST(nums[mid + 1:])\n        \n        return root"}], "contain-virus": [{"task_id": "contain-virus", "completion": "class Solution(object):\n    def containVirus(self, isInfected):\n        \"\"\"\n        :type isInfected: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def containVirus(self, isInfected):\n        \"\"\"\n        :type isInfected: List[List[int]]\n        :rtype: int\n        \"\"\""}], "longest-increasing-path-in-a-matrix": [{"task_id": "longest-increasing-path-in-a-matrix", "completion": "class Solution(object):\n    def longestIncreasingPath(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\""}], "number-of-digit-one": [{"task_id": "number-of-digit-one", "completion": "class Solution(object):\n    def countDigitOne(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n <= 0:\n            return 0\n        \n        digit = 1\n        high = n // 10\n        cur = n % 10\n        low = 0\n        res = 0\n        \n        while high != 0 or cur != 0:\n            res += high * digit\n            \n            if cur == 1:\n                res += low + 1\n            \n            low += cur * digit\n            cur = high % 10\n            high //= 10\n            digit *= 10\n        \n        return res"}], "word-break-ii": [{"task_id": "word-break-ii", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: List[str]\n        \"\"\""}], "binary-tree-zigzag-level-order-traversal": [{"task_id": "binary-tree-zigzag-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def zigzagLevelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        leftToRight = True\n        \n        while queue:\n            level = []\n            for _ in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            if not leftToRight:\n                level.reverse()\n            result.append(level)\n            leftToRight = not leftToRight\n        \n        return result"}], "binary-watch": [{"task_id": "binary-watch", "completion": "class Solution(object):\n    def readBinaryWatch(self, turnedOn):\n        \"\"\"\n        :type turnedOn: int\n        :rtype: List[str]\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def readBinaryWatch(self, turnedOn):\n        \"\"\"\n        :type turnedOn: int\n        :rtype: List[str]\n        \"\"\"\n        \n        if turnedOn > 8:\n            return []\n        \n        hours = [1, 2, 4, 8, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192]\n        minutes = [1, 2, 4, 8, 1, 2, 4, 8, 16, 32, 64, 8, 16, 32, 64, 8, 16, 32, 64, 8, 16, 32, 64, 8, 16, 32, 64, 8, 16, 32, 64, 8, 16, 32, 64, 8, 16, 32, 64, 8, 16, 32, 64, 8, 16, 32, 64, 8, 16, 32, 64, 8, 16, 32, 64, 8, 16, 32, 64, 8, 16, 32, 64, 8, 16, 32, 64, 8, 16, 32, 64, 8, 16, 32, 64, 8, 16, 32, 64, 8, 16, 32, 64, 8, 16, 32, 64, 8, 16, 32, 64, 8, 16, 32, 64, 8, 16, 32, 64, 8, 16, 32, 64, 8, 16, 32, 64, 8, 16, 32, 64, 8, 16, 32, 64, 8, 16, 32, 64, 8, 16, 32, 64, 8, 16, 32, 64, 8, 16, 32, 64, 8, 16, 32, 64, 8, 16, 32, 64, 8, 16, 32, 64, 8, 16, 32, 64, 8, 16, 32, 64, 8, 16, 32, 64, 8, 16, 32, 64, 8, 16, 32, 64, 8, 16, 32, 64, 8, 16, 32, 64, 8, 16, 32, 64, 8, 16, 32, 64, 8, 16, 32, 64, 8, 16, 32, 64, 8, 16, 32, 64, 8, 16, 32, 64, 8, 16, 32, 64, 8, 16, 32, 64, 8, 16, 32, 64, 8, 16, 32, 64, 8, 16, 32, 64, 8, 16, 32, 64, 8, 16, 32, 64, 8, 16, 32, 64, 8, 16, 32, 64, 8, 16, 32, 64, 8, 1"}], "pascals-triangle": [{"task_id": "pascals-triangle", "completion": "class Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if numRows == 0:\n            return []\n        \n        if numRows == 1:\n            return [[1]]\n        \n        if numRows == 2:\n            return [[1], [1, 1]]\n        \n        res = [[1], [1, 1]]\n        \n        for i in range(2, numRows):\n            temp = [1]\n            for j in range(1, len(res[-1])):\n                temp.append(res[-1][j] + res[-1][j - 1])\n            temp.append(1)\n            res.append(temp)\n        \n        return res"}], "power-of-three": [{"task_id": "power-of-three", "completion": "class Solution(object):\n    def isPowerOfThree(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        return n > 0 and 1162261467 % n == 0"}], "binary-tree-maximum-path-sum": [{"task_id": "binary-tree-maximum-path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxPathSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\""}], "trapping-rain-water-ii": [{"task_id": "trapping-rain-water-ii", "completion": "class Solution(object):\n    def trapRainWater(self, heightMap):\n        \"\"\"\n        :type heightMap: List[List[int]]\n        :rtype: int\n        \"\"\""}], "valid-palindrome": [{"task_id": "valid-palindrome", "completion": "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        s = s.lower()\n        s = ''.join(c for c in s if c.isalnum())\n        \n        return s == s[::-1]"}], "sliding-window-median": [{"task_id": "sliding-window-median", "completion": "class Solution(object):\n    def medianSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[float]\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def medianSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[float]\n        \"\"\"\n        \n        # 1. Sort the array\n        nums.sort()\n        \n        # 2. Calculate the median\n        n = len(nums)\n        if n % 2 == 1:\n            return nums[n // 2]\n        else:\n            return (nums[n // 2] + nums[n // 2 - 1]) / 2.0"}], "rotate-list": [{"task_id": "rotate-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next or k == 0:\n            return head\n        \n        length = 1\n        curr = head\n        while curr.next:\n            length += 1\n            curr = curr.next\n        \n        k %= length\n        if k == 0:\n            return head\n        \n        curr.next = head\n        curr = head\n        for _ in range(length - k - 1):\n            curr = curr.next\n        \n        head = curr.next\n        curr.next = None\n        \n        return head"}], "ugly-number": [{"task_id": "ugly-number", "completion": "class Solution(object):\n    def isUgly(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        if n == 1:\n            return True\n        \n        if n % 2 == 0:\n            return self.isUgly(n // 2)\n        \n        if n % 3 == 0:\n            return self.isUgly(n // 3)\n        \n        if n % 5 == 0:\n            return self.isUgly(n // 5)\n        \n        return False"}], "falling-squares": [{"task_id": "falling-squares", "completion": "class Solution(object):\n    def fallingSquares(self, positions):\n        \"\"\"\n        :type positions: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n\n\n# Your FallingSquares object will be instantiated and called as such:\n# obj = FallingSquares(positions)\n# param_1 = obj.fall(position, height)"}], "sum-of-left-leaves": [{"task_id": "sum-of-left-leaves", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumOfLeftLeaves(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        if root.left and not root.left.left and not root.left.right:\n            return root.left.val + self.sumOfLeftLeaves(root.right)\n        \n        return self.sumOfLeftLeaves(root.left) + self.sumOfLeftLeaves(root.right)"}], "max-sum-of-rectangle-no-larger-than-k": [{"task_id": "max-sum-of-rectangle-no-larger-than-k", "completion": "class Solution(object):\n    def maxSumSubmatrix(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\""}], "divide-two-integers": [{"task_id": "divide-two-integers", "completion": "class Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"\n        \n        if dividend == 0:\n            return 0\n        \n        if dividend == -2147483648 and divisor == -1:\n            return 2147483647\n        \n        sign = 1\n        if dividend < 0:\n            sign = -sign\n            dividend = -dividend\n        if divisor < 0:\n            sign = -sign\n            divisor = -divisor\n        \n        quotient = 0\n        while dividend >= divisor:\n            dividend -= divisor\n            quotient += 1\n        \n        return sign * quotient"}], "surrounded-regions": [{"task_id": "surrounded-regions", "completion": "class Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n\n        if not board:\n            return\n        \n        m, n = len(board), len(board[0])\n        \n        # mark all the border 'O's as 'T's\n        for i in range(m):\n            for j in range(n):\n                if i == 0 or i == m - 1 or j == 0 or j == n - 1:\n                    self.dfs(board, i, j)\n        \n        # replace 'O's with 'X's and 'T's with 'O's\n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'O':\n                    board[i][j] = 'X'\n                if board[i][j] == 'T':\n                    board[i][j] = 'O'\n        \n\n    def dfs(self, board, i, j):\n        if board[i][j] == 'O':\n            board[i][j] = 'T'\n            if i > 0:\n                self.dfs(board, i - 1, j)\n            if i < len(board) - 1:\n                self.dfs(board, i + 1, j)\n            if j > 0:\n                self.dfs(board, i, j - 1)\n            if j < len(board[0]) - 1:\n                self.dfs(board, i, j + 1)"}], "two-sum": [{"task_id": "two-sum", "completion": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\""}], "24-game": [{"task_id": "24-game", "completion": "class Solution(object):\n    def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        if len(cards) == 1:\n            return cards[0] == 24\n        \n        # 24 is a special case\n        if 24 in cards:\n            return True\n        \n        # 2 * 2 = 4\n        # 2 * 3 = 6\n        # 2 * 4 = 8\n        # 2 * 5 = 10\n        # 2 * 6 = 12\n        # 2 * 7 = 14\n        # 2 * 8 = 16\n        # 2 * 9 = 18\n        # 3 * 2 = 6\n        # 3 * 3 = 9\n        # 3 * 4 = 12\n        # 3 * 5 = 15\n        # 3 * 6 = 18\n        # 3 * 7 = 21\n        # 3 * 8 = 24\n        # 3 * 9 = 27\n        # 4 * 2 = 8\n        # 4 * 3 = 12\n        # 4 * 4 = 16\n        # 4 * 5 = 20\n        # 4 * 6 = 24\n        # 4 * 7 = 28\n        # 4 * 8 = 32\n        # 4 * 9 = 36\n        # 5 * 2 = 10\n        # 5 * 3 = 15\n        # 5 * 4 = 20\n        # 5 * 5 = 25\n        # 5 * 6 = 30\n        # 5 * 7 = 35\n        # 5 * 8 = 40\n        # 5 * 9 = 45\n        # 6 * 2 = 12\n        # 6 * 3 = 18\n        # 6 * 4 = 24\n        # 6 * 5 = 30\n        # 6 * 6 = 36\n        # 6 * 7 = 42\n        # 6 * 8 = 48\n        # 6 * 9 = 54\n        # 7 * 2 = 14\n        # 7 * 3 = 21\n        # 7 * 4 = 28\n        # 7 * 5 = 35\n        # 7 * 6 = 42\n        # 7 * 7 = 49\n        # 7 * 8 = 56\n        # 7 * 9 = 63\n        # 8 * 2 = 16\n        # 8 * 3 = 24\n        # 8 * 4 = 32\n        # 8 * 5 = 40\n        # 8 * 6 = 48\n        # 8 * 7 = 56\n        # 8 * 8 = 64\n        # 8 * 9 = 72\n        # 9 * 2 = 18\n        # 9 * 3 = 27\n        # 9 * 4 = 36\n        # 9 * 5 = 45\n        # 9 * 6 = 54\n        # 9 * 7 = 63\n        # 9 * 8 = 72\n        # 9 * 9 = 81\n        \n        # 2 * 3 * 4 = 24\n        # 2 * 3 * 5 = 15\n        # 2 * 3 * 6 = 18\n        # 2 * 3 * 7 = 21\n        # 2 * 3 * 8 = 24\n        # 2 * 3 * 9 = 27\n        # 2 * 4 * 5 = 10\n        # 2 * 4 * 6 = 12\n        # 2 * 4 * 7 = 14\n        # 2 * 4 * 8 = 16\n        # 2 * 4 * 9 = 18\n        # 2 * 5 * 6 = 15\n        # 2 * 5 * 7 = 21\n        # 2 * 5 * 8 = 24\n        # 2 * 5 * 9 = 27\n        # 2 * 6 * 7 = 21\n        # 2 *"}], "wildcard-matching": [{"task_id": "wildcard-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        m, n = len(s), len(p)\n        dp = [[False] * (n + 1) for _ in range(m + 1)]\n        dp[0][0] = True\n        for i in range(1, n + 1):\n            if p[i - 1] == '*':\n                dp[0][i] = dp[0][i - 1]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if p[j - 1] == '*':\n                    dp[i][j] = dp[i][j - 1] or dp[i - 1][j]\n                elif p[j - 1] == '?' or s[i - 1] == p[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n        return dp[m][n]"}], "majority-element": [{"task_id": "majority-element", "completion": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Boyer-Moore Voting Algorithm\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # The majority element always exists in the array\n        # The majority element appears more than n/2 times\n        # So we can use the Boyer-Moore Voting Algorithm\n        # To find the majority element, we can use the following steps:\n        # 1. Initialize the majority element and the count to 0\n        # 2. Iterate through the array\n        # 3. If the current element is the majority element, increment the count by 1\n        # 4. If the current element is not the majority element, decrement the count by 1\n        # 5. If the count becomes 0, set the current element as the majority element\n        # 6. Return the majority element\n        \n        # The majority element always exists in the array\n        # The majority element appears more than n/2 times\n        # So we can use the Boyer-Moore Voting Algorithm\n        # To find the majority element, we can use the following steps:\n        # 1. Initialize the majority element and the count to 0\n        # 2. Iterate through the array\n        # 3. If the current element is the majority element, increment the count by 1\n        # 4. If the current element is not the majority element, decrement the count by 1\n        # 5. If the count becomes 0, set the current element as the majority element\n        # 6. Return the majority element\n        \n        # The majority element always exists in the array\n        # The majority element appears more than n/2 times\n        # So we can use the Boyer-Moore Voting Algorithm\n        # To find the majority element, we can use the following steps:\n        # 1. Initialize the majority element and the count to 0\n        # 2. Iterate through the array\n        # 3. If the current element is the majority element, increment the count by 1\n        # 4. If the current element is not the majority element, decrement the count by 1\n        # 5. If the count becomes 0, set the current element as the majority element\n        # 6. Return the majority element\n        \n        # The majority element always exists in the array\n        # The majority element appears more than n/2 times\n        # So we can use the Boyer-Moore Voting Algorithm\n        # To find the majority element, we can use the following steps:\n        # 1. Initialize the majority element and the count to 0\n        # 2. Iterate through the array\n        # 3. If the current element is the majority element, increment the count by 1\n        # 4. If the current element is not the majority element, decrement the count by 1\n        # 5. If the count becomes 0, set the current element as the majority element\n        # 6. Return the majority element\n        \n        # The majority element always exists in the array\n        # The majority element appears more than n/2 times\n        # So we can use the Boyer-Moore Voting Algorithm\n        # To find the majority element, we can use the following steps:\n        # 1. Initialize the majority element and the count to 0\n        # 2. Iterate through the array\n        # 3. If the current element is the majority element, increment the count by 1\n        # 4. If the current element is not the majority element, decrement the count by 1\n        # 5. If the count becomes 0, set the current element as the majority element\n        # 6. Return the majority element\n        \n        # The majority element always exists in the array\n        # The majority element appears more than n/2 times\n        # So we can use the Boyer-Moore Voting Algorithm\n        # To find the majority element, we can use the following steps:\n        # 1. Initialize the majority element and the count to 0\n        # 2. Iterate through the array\n        # 3. If the current element is the majority element, increment the count by 1\n        # 4. If the current element is not the majority element, decrement the count by 1\n        # 5. If the count becomes 0, set the current element as the majority element\n        # 6. Return the majority element\n        \n        # The majority element always exists in the array\n        # The majority element appears more than n/"}], "reconstruct-itinerary": [{"task_id": "reconstruct-itinerary", "completion": "class Solution(object):\n    def findItinerary(self, tickets):\n        \"\"\"\n        :type tickets: List[List[str]]\n        :rtype: List[str]\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def findItinerary(self, tickets):\n        \"\"\"\n        :type tickets: List[List[str]]\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. Build a graph\n        # 2. Do a DFS\n        # 3. Reverse the result\n        \n        # Build a graph\n        graph = collections.defaultdict(list)\n        for from_airport, to_airport in tickets:\n            graph[from_airport].append(to_airport)\n        \n        # Do a DFS\n        # We want to visit the most frequent airport\n        # So we visit the most frequent airport first\n        # We can do this by sorting the airports by frequency\n        # We can do this by sorting the airports by frequency\n        # We can do this by sorting the airports by frequency\n        # We can do this by sorting the airports by frequency\n        # We can do this by sorting the airports by frequency\n        # We can do this by sorting the airports by frequency\n        # We can do this by sorting the airports by frequency\n        # We can do this by sorting the airports by frequency\n        # We can do this by sorting the airports by frequency\n        # We can do this by sorting the airports by frequency\n        # We can do this by sorting the airports by frequency\n        # We can do this by sorting the airports by frequency\n        # We can do this by sorting the airports by frequency\n        # We can do this by sorting the airports by frequency\n        # We can do this by sorting the airports by frequency\n        # We can do this by sorting the airports by frequency\n        # We can do this by sorting the airports by frequency\n        # We can do this by sorting the airports by frequency\n        # We can do this by sorting the airports by frequency\n        # We can do this by sorting the airports by frequency\n        # We can do this by sorting the airports by frequency\n        # We can do this by sorting the airports by frequency\n        # We can do this by sorting the airports by frequency\n        # We can do this by sorting the airports by frequency\n        # We can do this by sorting the airports by frequency\n        # We can do this by sorting the airports by frequency\n        # We can do this by sorting the airports by frequency\n        # We can do this by sorting the airports by frequency\n        # We can do this by sorting the airports by frequency\n        # We can do this by sorting the airports by frequency\n        # We can do this by sorting the airports by frequency\n        # We can do this by sorting the airports by frequency\n        # We can do this by sorting the airports by frequency\n        # We can do this by sorting the airports by frequency\n        # We can do this by sorting the airports by frequency\n        # We can do this by sorting the airports by frequency\n        # We can do this by sorting the airports by frequency\n        # We can do this by sorting the airports by frequency\n        # We can do this by sorting the airports by frequency\n        # We can do this by sorting the airports by frequency\n        # We can do this by sorting the airports by frequency\n        # We can do this by sorting the airports by frequency\n        # We can do this by sorting the airports by frequency\n        # We can do this by sorting the airports by frequency\n        # We can do this by sorting the airports by frequency\n        # We can do this by sorting the airports by frequency\n        # We can do this by sorting the airports by frequency\n        # We can do this by sorting the airports by frequency\n        # We can do this by sorting the airports by frequency\n        # We can do this by sorting the airports by frequency\n        # We can do this by sorting the airports by frequency\n        # We can do this by sorting the airports by frequency\n        # We can do this by sorting the airports by frequency\n        # We can do this by sorting the airports by frequency\n        # We can do this by sorting the airports by frequency\n        # We can do this by sorting the airports by frequency\n        # We can do this by sorting the airports by frequency\n        # We can do this by"}], "4sum": [{"task_id": "4sum", "completion": "class Solution(object):\n    def fourSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def fourSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        n = len(nums)\n        ans = []\n        if n < 4:\n            return ans\n        \n        # 1. 4 sum problem\n        # 2. 3 sum problem\n        # 3. 2 sum problem\n        # 4. 1 sum problem\n        \n        # 2. 3 sum problem\n        # 3. 2 sum problem\n        # 4. 1 sum problem\n        \n        # 3. 2 sum problem\n        # 4. 1 sum problem\n        \n        # 4. 1 sum problem\n        \n        # 2. 3 sum problem\n        # 3. 2 sum problem\n        # 4. 1 sum problem\n        \n        # 3. 2 sum problem\n        # 4. 1 sum problem\n        \n        # 4. 1 sum problem\n        \n        # 3. 2 sum problem\n        # 4. 1 sum problem\n        \n        # 4. 1 sum problem\n        \n        # 2. 3 sum problem\n        # 3. 2 sum problem\n        # 4. 1 sum problem\n        \n        # 3. 2 sum problem\n        # 4. 1 sum problem\n        \n        # 4. 1 sum problem\n        \n        # 3. 2 sum problem\n        # 4. 1 sum problem\n        \n        # 4. 1 sum problem\n        \n        # 2. 3 sum problem\n        # 3. 2 sum problem\n        # 4. 1 sum problem\n        \n        # 3. 2 sum problem\n        # 4. 1 sum problem\n        \n        # 4. 1 sum problem\n        \n        # 3. 2 sum problem\n        # 4. 1 sum problem\n        \n        # 4. 1 sum problem\n        \n        # 2. 3 sum problem\n        # 3. 2 sum problem\n        # 4. 1 sum problem\n        \n        # 3. 2 sum problem\n        # 4. 1 sum problem\n        \n        # 4. 1 sum problem\n        \n        # 3. 2 sum problem\n        # 4. 1 sum problem\n        \n        # 4. 1 sum problem\n        \n        # 2. 3 sum problem\n        # 3. 2 sum problem\n        # 4. 1 sum problem\n        \n        # 3. 2 sum problem\n        # 4. 1 sum problem\n        \n        # 4. 1 sum problem\n        \n        # 3. 2 sum problem\n        # 4. 1 sum problem\n        \n        # 4. 1 sum problem\n        \n        # 2. 3 sum problem\n        # 3. 2 sum problem\n        # 4. 1 sum problem\n        \n        # 3. 2 sum problem\n        # 4. 1 sum problem\n        \n        # 4. 1 sum problem\n        \n        # 3. 2 sum problem\n        # 4. 1 sum problem\n        \n        # 4. 1 sum problem\n        \n        # 2. 3 sum problem\n        # 3. 2 sum problem\n        # 4. 1 sum problem\n        \n        # 3. 2 sum problem\n        # 4. 1 sum problem\n        \n        # 4. 1 sum problem\n        \n        # 3. 2 sum problem\n        # 4. 1 sum problem\n        \n        # 4. 1 sum problem\n        \n        # 2. 3 sum problem\n        # 3. 2 sum problem\n        # 4. 1 sum problem\n        \n        # 3. 2 sum problem\n        # 4. 1 sum problem\n        \n        # 4. 1 sum problem\n        \n        # 3. 2 sum problem\n        # 4. 1 sum problem\n        \n        # 4. 1 sum problem\n        \n        # 2. 3 sum problem\n        # 3. 2 sum problem"}], "the-skyline-problem": [{"task_id": "the-skyline-problem", "completion": "class Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\""}], "reverse-string": [{"task_id": "reverse-string", "completion": "class Solution(object):\n    def reverseString(self, s):\n        \"\"\"\n        :type s: List[str]\n        :rtype: None Do not return anything, modify s in-place instead.\n        \"\"\"\n        \n        left = 0\n        right = len(s) - 1\n        \n        while left < right:\n            s[left], s[right] = s[right], s[left]\n            left += 1\n            right -= 1"}], "reverse-linked-list": [{"task_id": "reverse-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        prev = None\n        curr = head\n        \n        while curr:\n            next_node = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next_node\n            \n        return prev"}], "triangle": [{"task_id": "triangle", "completion": "class Solution(object):\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(triangle[-1])\n        dp = triangle[-1]\n        for row in triangle[-2::-1]:\n            for i, num in enumerate(row):\n                dp[i] = num + min(dp[i], dp[i+1])\n        return dp[0]"}], "integer-to-english-words": [{"task_id": "integer-to-english-words", "completion": "class Solution(object):\n    def numberToWords(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\""}], "k-inverse-pairs-array": [{"task_id": "k-inverse-pairs-array", "completion": "class Solution(object):\n    def kInversePairs(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        mod = 10 ** 9 + 7\n        if k == 0:\n            return 1\n        if k == 1:\n            return n\n        if n == 1:\n            return 0\n        if k > n * (n - 1) // 2:\n            return 0\n        if k == 2:\n            return n * (n - 1) // 2\n        if k == 3:\n            return n * (n - 1) // 2 * 2\n        if k == 4:\n            return n * (n - 1) // 2 * 3\n        if k == 5:\n            return n * (n - 1) // 2 * 4\n        if k == 6:\n            return n * (n - 1) // 2 * 5\n        if k == 7:\n            return n * (n - 1) // 2 * 6\n        if k == 8:\n            return n * (n - 1) // 2 * 7\n        if k == 9:\n            return n * (n - 1) // 2 * 8\n        if k == 10:\n            return n * (n - 1) // 2 * 9\n        if k == 11:\n            return n * (n - 1) // 2 * 10\n        if k == 12:\n            return n * (n - 1) // 2 * 11\n        if k == 13:\n            return n * (n - 1) // 2 * 12\n        if k == 14:\n            return n * (n - 1) // 2 * 13\n        if k == 15:\n            return n * (n - 1) // 2 * 14\n        if k == 16:\n            return n * (n - 1) // 2 * 15\n        if k == 17:\n            return n * (n - 1) // 2 * 16\n        if k == 18:\n            return n * (n - 1) // 2 * 17\n        if k == 19:\n            return n * (n - 1) // 2 * 18\n        if k == 20:\n            return n * (n - 1) // 2 * 19\n        if k == 21:\n            return n * (n - 1) // 2 * 20\n        if k == 22:\n            return n * (n - 1) // 2 * 21\n        if k == 23:\n            return n * (n - 1) // 2 * 22\n        if k == 24:\n            return n * (n - 1) // 2 * 23\n        if k == 25:\n            return n * (n - 1) // 2 * 24\n        if k == 26:\n            return n * (n - 1) // 2 * 25\n        if k == 27:\n            return n * (n - 1) // 2 * 26\n        if k == 28:\n            return n * (n - 1) // 2 * 27\n        if k == 29:\n            return n * (n - 1) // 2 * 28\n        if k == 30:\n            return n * (n - 1) // 2 * 29\n        if k == 31:\n            return n * (n - 1) // 2 * 30\n        if k == 32:\n            return n * (n - 1) // 2 * 31\n        if k == 33:\n            return n * (n - 1) // 2 * 32\n        if k == 34:\n            return n * (n - 1) // 2 * 33\n        if k == 35:\n            return n * (n - 1) // 2 * 34\n        if k == 36:\n            return n * (n - 1) // 2 * 35\n        if k == 37:\n            return n * (n - 1) // 2 * 36\n        if k == 38:\n            return n * (n - 1) // 2 * 37\n        if k == 39:\n            return n * (n"}], "swap-nodes-in-pairs": [{"task_id": "swap-nodes-in-pairs", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        curr = dummy\n        \n        while curr.next and curr.next.next:\n            first = curr.next\n            second = curr.next.next\n            \n            curr.next = second\n            first.next = second.next\n            second.next = first\n            \n            curr = first\n            \n        return dummy.next"}], "path-sum": [{"task_id": "path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def hasPathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: bool\n        \"\"\"\n        \n        if not root:\n            return False\n        \n        if not root.left and not root.right and targetSum == root.val:\n            return True\n        \n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)"}], "partition-list": [{"task_id": "partition-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def partition(self, head, x):\n        \"\"\"\n        :type head: ListNode\n        :type x: int\n        :rtype: ListNode\n        \"\"\"\n        \n        left = ListNode(0)\n        right = ListNode(0)\n        l = left\n        r = right\n        \n        while head:\n            if head.val < x:\n                l.next = head\n                l = l.next\n            else:\n                r.next = head\n                r = r.next\n            head = head.next\n        \n        r.next = None\n        l.next = right.next\n        \n        return left.next"}], "redundant-connection-ii": [{"task_id": "redundant-connection-ii", "completion": "class Solution(object):\n    def findRedundantDirectedConnection(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\""}], "permutations-ii": [{"task_id": "permutations-ii", "completion": "class Solution(object):\n    def permuteUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def permuteUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        ans = [nums]\n        i = 0\n        while i < len(nums) - 1:\n            if nums[i] == nums[i + 1]:\n                nums.pop(i + 1)\n            else:\n                i += 1\n        n = len(nums)\n        for j in xrange(n - 1, 0, -1):\n            if nums[j] > nums[j - 1]:\n                k = j\n                while k < n and nums[k] > nums[j - 1]:\n                    k += 1\n                nums[j - 1], nums[k - 1] = nums[k - 1], nums[j - 1]\n                break\n        else:\n            return ans\n        nums.extend([nums[-1]] * (n - j))\n        ans.append(nums)\n        i = n - 1\n        while i > 0:\n            if nums[i] > nums[i - 1]:\n                k = i\n                while k < n and nums[k] > nums[i - 1]:\n                    k += 1\n                nums[i - 1], nums[k - 1] = nums[k - 1], nums[i - 1]\n                break\n            i -= 1\n        ans.append(nums)\n        return ans"}], "add-digits": [{"task_id": "add-digits", "completion": "class Solution(object):\n    def addDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        if num == 0:\n            return 0\n        if num % 9 == 0:\n            return 9\n        return num % 9"}], "single-number": [{"task_id": "single-number", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        return 2 * sum(set(nums)) - sum(nums)"}], "length-of-last-word": [{"task_id": "length-of-last-word", "completion": "class Solution(object):\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        return len(s.rstrip().split(' ')[-1])"}], "cherry-pickup": [{"task_id": "cherry-pickup", "completion": "class Solution(object):\n    def cherryPickup(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def cherryPickup(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\""}], "student-attendance-record-ii": [{"task_id": "student-attendance-record-ii", "completion": "class Solution(object):\n    def checkRecord(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        mod = 10**9 + 7\n        a = 2\n        b = 3\n        c = 4\n        d = 5\n        e = 6\n        f = 7\n        g = 8\n        h = 9\n        i = 10\n        j = 11\n        k = 12\n        l = 13\n        m = 14\n        n = 15\n        o = 16\n        p = 17\n        q = 18\n        r = 19\n        s = 20\n        t = 21\n        u = 22\n        v = 23\n        w = 24\n        x = 25\n        y = 26\n        z = 27\n        \n        if n == 1:\n            return 3\n        if n == 2:\n            return 8\n        \n        a = a * (n - 1)\n        b = b * (n - 2)\n        c = c * (n - 3)\n        d = d * (n - 4)\n        e = e * (n - 5)\n        f = f * (n - 6)\n        g = g * (n - 7)\n        h = h * (n - 8)\n        i = i * (n - 9)\n        j = j * (n - 10)\n        k = k * (n - 11)\n        l = l * (n - 12)\n        m = m * (n - 13)\n        n = n * (n - 14)\n        o = o * (n - 15)\n        p = p * (n - 16)\n        q = q * (n - 17)\n        r = r * (n - 18)\n        s = s * (n - 19)\n        t = t * (n - 20)\n        u = u * (n - 21)\n        v = v * (n - 22)\n        w = w * (n - 23)\n        x = x * (n - 24)\n        y = y * (n - 25)\n        z = z * (n - 26)\n        \n        a = a % mod\n        b = b % mod\n        c = c % mod\n        d = d % mod\n        e = e % mod\n        f = f % mod\n        g = g % mod\n        h = h % mod\n        i = i % mod\n        j = j % mod\n        k = k % mod\n        l = l % mod\n        m = m % mod\n        n = n % mod\n        o = o % mod\n        p = p % mod\n        q = q % mod\n        r = r % mod\n        s = s % mod\n        t = t % mod\n        u = u % mod\n        v = v % mod\n        w = w % mod\n        x = x % mod\n        y = y % mod\n        z = z % mod\n        \n        return (a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + r + s + t + u + v + w + x + y + z) % mod"}], "happy-number": [{"task_id": "happy-number", "completion": "class Solution(object):\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        seen = set()\n        while n not in seen:\n            seen.add(n)\n            n = sum(int(d) ** 2 for d in str(n))\n        return n == 1"}], "search-insert-position": [{"task_id": "search-insert-position", "completion": "class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        l = 0\n        r = len(nums) - 1\n        \n        while l <= r:\n            m = (l + r) // 2\n            if nums[m] < target:\n                l = m + 1\n            else:\n                r = m - 1\n        \n        return l"}], "jump-game": [{"task_id": "jump-game", "completion": "class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        n = len(nums)\n        last_pos = n - 1\n        \n        for i in range(n - 1, -1, -1):\n            if i + nums[i] >= last_pos:\n                last_pos = i\n        \n        return last_pos == 0"}], "minimum-path-sum": [{"task_id": "minimum-path-sum", "completion": "class Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(grid)\n        n = len(grid[0])\n        \n        for i in range(m):\n            for j in range(n):\n                if i == 0 and j == 0:\n                    continue\n                elif i == 0:\n                    grid[i][j] += grid[i][j-1]\n                elif j == 0:\n                    grid[i][j] += grid[i-1][j]\n                else:\n                    grid[i][j] += min(grid[i][j-1], grid[i-1][j])\n        \n        return grid[-1][-1]"}], "count-and-say": [{"task_id": "count-and-say", "completion": "class Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        \n        if n == 1:\n            return \"1\"\n        \n        s = \"1\"\n        for i in range(1, n):\n            s = self.countAndSay(s)\n        \n        return s"}], "split-array-largest-sum": [{"task_id": "split-array-largest-sum", "completion": "class Solution(object):\n    def splitArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\""}], "search-in-rotated-sorted-array": [{"task_id": "search-in-rotated-sorted-array", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        l, r = 0, len(nums) - 1\n        while l <= r:\n            m = (l + r) // 2\n            if nums[m] == target:\n                return m\n            if nums[m] < nums[r]:\n                if nums[m] < target <= nums[r]:\n                    l = m + 1\n                else:\n                    r = m - 1\n            else:\n                if nums[l] <= target < nums[m]:\n                    r = m - 1\n                else:\n                    l = m + 1\n        return -1"}], "letter-combinations-of-a-phone-number": [{"task_id": "letter-combinations-of-a-phone-number", "completion": "class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        \n        if not digits:\n            return []\n        \n        digit_to_char = {\n            '2': 'abc',\n            '3': 'def',\n            '4': 'ghi',\n            '5': 'jkl',\n            '6': 'mno',\n            '7': 'pqrs',\n            '8': 'tuv',\n            '9': 'wxyz',\n        }\n        \n        ans = ['']\n        for digit in digits:\n            ans = [a + b for a in ans for b in digit_to_char[digit]]\n        \n        return ans"}], "combination-sum": [{"task_id": "combination-sum", "completion": "class Solution(object):\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\""}], "find-the-closest-palindrome": [{"task_id": "find-the-closest-palindrome", "completion": "class Solution(object):\n    def nearestPalindromic(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\"\n        \n\n\n# Completion\nclass Solution(object):\n    def nearestPalindromic(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\""}], "spiral-matrix-ii": [{"task_id": "spiral-matrix-ii", "completion": "class Solution(object):\n    def generateMatrix(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        matrix = [[0] * n for _ in range(n)]\n        left, right, top, bottom = 0, n - 1, 0, n - 1\n        num = 1\n        \n        while left <= right and top <= bottom:\n            for i in range(left, right + 1):\n                matrix[top][i] = num\n                num += 1\n            top += 1\n            \n            for i in range(top, bottom + 1):\n                matrix[i][right] = num\n                num += 1\n            right -= 1\n            \n            if top <= bottom:\n                for i in range(right, left - 1, -1):\n                    matrix[bottom][i] = num\n                    num += 1\n                bottom -= 1\n            \n            if left <= right:\n                for i in range(bottom, top - 1, -1):\n                    matrix[i][left] = num\n                    num += 1\n                left += 1\n        \n        return matrix"}], "reverse-integer": [{"task_id": "reverse-integer", "completion": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x < 0:\n            sign = -1\n        else:\n            sign = 1\n        \n        x = abs(x)\n        \n        rev = 0\n        \n        while x > 0:\n            rev = rev * 10 + x % 10\n            x //= 10\n        \n        if rev > 2 ** 31 - 1:\n            return 0\n        \n        return sign * rev"}], "rotate-image": [{"task_id": "rotate-image", "completion": "class Solution(object):\n    def rotate(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        n = len(matrix)\n        # transpose\n        for i in range(n):\n            for j in range(i, n):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n        \n        # reverse each row\n        for i in range(n):\n            matrix[i].reverse()"}], "maximum-product-subarray": [{"task_id": "maximum-product-subarray", "completion": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_prod = nums[0]\n        min_prod = nums[0]\n        result = max_prod\n        \n        for num in nums[1:]:\n            curr_max = max_prod\n            max_prod = max(num, curr_max * num, min_prod * num)\n            min_prod = min(num, curr_max * num, min_prod * num)\n            result = max(result, max_prod)\n        \n        return result"}], "frog-jump": [{"task_id": "frog-jump", "completion": "class Solution(object):\n    def canCross(self, stones):\n        \"\"\"\n        :type stones: List[int]\n        :rtype: bool\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def canCross(self, stones):\n        \"\"\"\n        :type stones: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        n = len(stones)\n        if n == 1:\n            return True\n        if stones[1] != 1:\n            return False\n        d = {stones[0]: set([1])}\n        for s in stones[1:]:\n            d.setdefault(s, set())\n            if s in d:\n                d[s].add(s-1)\n                d[s].add(s)\n                d[s].add(s+1)\n        return len(d[stones[-1]]) > 0"}], "relative-ranks": [{"task_id": "relative-ranks", "completion": "class Solution(object):\n    def findRelativeRanks(self, score):\n        \"\"\"\n        :type score: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        n = len(score)\n        if n <= 1:\n            return score\n        \n        score_sorted = sorted(score)\n        score_map = {s: i + 1 for i, s in en enumerate(score_sorted)}\n        \n        return [score_map[s] if i == n - 1 else str(n - i) for i, s in enumerate(score)]"}], "longest-substring-without-repeating-characters": [{"task_id": "longest-substring-without-repeating-characters", "completion": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if len(s) == 0:\n            return 0\n        \n        max_len = 1\n        cur_len = 1\n        last_seen = {}\n        last_seen[s[0]] = 0\n        \n        for i in range(1, len(s)):\n            if s[i] in last_seen:\n                cur_len = i - last_seen[s[i]]\n            else:\n                cur_len += 1\n            \n            max_len = max(max_len, cur_len)\n            last_seen[s[i]] = i\n        \n        return max_len"}], "substring-with-concatenation-of-all-words": [{"task_id": "substring-with-concatenation-of-all-words", "completion": "class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\""}], "max-chunks-to-make-sorted-ii": [{"task_id": "max-chunks-to-make-sorted-ii", "completion": "class Solution(object):\n    def maxChunksToSorted(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_val = arr[0]\n        chunks = 1\n        \n        for i in arr[1:]:\n            if i > max_val:\n                max_val = i\n                chunks += 1\n        \n        return chunks"}], "insertion-sort-list": [{"task_id": "insertion-sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def insertionSortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        dummy = ListNode(0)\n        curr = head\n        \n        while curr:\n            next_node = curr.next\n            curr.next = None\n            curr = next_node\n            \n            node = dummy\n            while node.next and node.next.val < curr.val:\n                node = node.next\n                \n            next_node = curr.next\n            curr.next = node.next\n            node.next = curr\n            \n            curr = next_node\n            \n        return dummy.next"}], "remove-duplicates-from-sorted-list-ii": [{"task_id": "remove-duplicates-from-sorted-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        curr = head\n        \n        while curr:\n            if curr.next and curr.val == curr.next.val:\n                val = curr.val\n                while curr and curr.val == val:\n                    curr = curr.next\n            else:\n                prev.next = curr\n                prev = curr\n                curr = curr.next\n        \n        prev.next = None\n        return dummy.next"}], "3sum": [{"task_id": "3sum", "completion": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        ans = []\n        n = len(nums)\n        for i in range(n):\n            if nums[i] > 0:\n                break\n            if i == 0 or nums[i] != nums[i - 1]:\n                left = i + 1\n                right = n - 1\n                while left < right:\n                    s = nums[i] + nums[left] + nums[right]\n                    if s == 0:\n                        ans.append([nums[i], nums[left], nums[right]])\n                        left += 1\n                        right -= 1\n                        while left < right and nums[left] == nums[left - 1]:\n                            left += 1\n                        while left < right and nums[right] == nums[right + 1]:\n                            right -= 1\n                    elif s < 0:\n                        left += 1\n                    else:\n                        right -= 1\n        return ans"}], "edit-distance": [{"task_id": "edit-distance", "completion": "class Solution(object):\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(word1), len(word2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            dp[i][0] = i\n        for j in range(1, n + 1):\n            dp[0][j] = j\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if word1[i - 1] == word2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1\n        return dp[-1][-1]"}], "hamming-distance": [{"task_id": "hamming-distance", "completion": "class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        \n        xor = x ^ y\n        distance = 0\n        while xor:\n            distance += 1\n            xor &= xor - 1\n        return distance"}], "binary-tree-paths": [{"task_id": "binary-tree-paths", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        if not root.left and not root.right:\n            return [str(root.val)]\n        \n        left_paths = self.binaryTreePaths(root.left)\n        right_paths = self.binaryTreePaths(root.right)\n        \n        return [f'{root.val}->{path}' for path in left_paths + right_paths]"}], "reverse-pairs": [{"task_id": "reverse-pairs", "completion": "class Solution(object):\n    def reversePairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def reversePairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ans = 0\n        a = nums\n        # a is sorted\n        # we need to count the number of reverse pairs\n        # we can do this by counting the number of smaller elements\n        # in the right half of the array\n        # we can do this by counting the number of smaller elements\n        # in the left half of the array\n        # we can do this by counting the number of smaller elements\n        # in the right half of the array\n        # we can do this by counting the number of smaller elements\n        # in the left half of the array\n        # we can do this by counting the number of smaller elements\n        # in the right half of the array\n        # we can do this by counting the number of smaller elements\n        # in the left half of the array\n        # we can do this by counting the number of smaller elements\n        # in the right half of the array\n        # we can do this by counting the number of smaller elements\n        # in the left half of the array\n        # we can do this by counting the number of smaller elements\n        # in the right half of the array\n        # we can do this by counting the number of smaller elements\n        # in the left half of the array\n        # we can do this by counting the number of smaller elements\n        # in the right half of the array\n        # we can do this by counting the number of smaller elements\n        # in the left half of the array\n        # we can do this by counting the number of smaller elements\n        # in the right half of the array\n        # we can do this by counting the number of smaller elements\n        # in the left half of the array\n        # we can do this by counting the number of smaller elements\n        # in the right half of the array\n        # we can do this by counting the number of smaller elements\n        # in the left half of the array\n        # we can do this by counting the number of smaller elements\n        # in the right half of the array\n        # we can do this by counting the number of smaller elements\n        # in the left half of the array\n        # we can do this by counting the number of smaller elements\n        # in the right half of the array\n        # we can do this by counting the number of smaller elements\n        # in the left half of the array\n        # we can do this by counting the number of smaller elements\n        # in the right half of the array\n        # we can do this by counting the number of smaller elements\n        # in the left half of the array\n        # we can do this by counting the number of smaller elements\n        # in the right half of the array\n        # we can do this by counting the number of smaller elements\n        # in the left half of the array\n        # we can do this by counting the number of smaller elements\n        # in the right half of the array\n        # we can do this by counting the number of smaller elements\n        # in the left half of the array\n        # we can do this by counting the number of smaller elements\n        # in the right half of the array\n        # we can do this by counting the number of smaller elements\n        # in the left half of the array\n        # we can do this by counting the number of smaller elements\n        # in the right half of the array\n        # we can do this by counting the number of smaller elements\n        # in the left half of the array\n        # we can do this by counting the number of smaller elements\n        # in the right half of the array\n        # we can do this by counting the number of smaller elements\n        # in the left half of the array\n        # we can do this by counting the number of smaller elements\n        # in the right half of the array\n        # we can do this by counting the number of smaller elements\n        # in the left half of the array\n        # we can do this by counting the number of smaller elements\n        # in the right half of the array\n        # we can do this by counting the number of smaller elements\n        # in the left half of the array\n        # we can do this by counting the number of smaller elements\n        # in the right half of the array\n        # we can do this by counting the number of smaller elements\n        # in the left half of the array\n        # we can do this by counting the number of smaller elements\n        # in the right half of the array\n        # we can do this by counting the number of"}], "reaching-points": [{"task_id": "reaching-points", "completion": "class Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        \n        while tx > sx and ty > sy:\n            if tx == ty:\n                return (tx - sx) % ty == 0\n            if ty > tx:\n                ty %= tx\n            else:\n                tx %= ty\n        return tx == sx and ty >= sy and (ty - sy) % sx == 0"}], "compare-version-numbers": [{"task_id": "compare-version-numbers", "completion": "class Solution(object):\n    def compareVersion(self, version1, version2):\n        \"\"\"\n        :type version1: str\n        :type version2: str\n        :rtype: int\n        \"\"\"\n        \n        v1 = version1.split('.')\n        v2 = version2.split('.')\n        l1 = len(v1)\n        l2 = len(v2)\n        l = min(l1, l2)\n        for i in range(l):\n            if int(v1[i]) < int(v2[i]):\n                return -1\n            elif int(v1[i]) > int(v2[i]):\n                return 1\n        if l1 > l2:\n            return 1\n        elif l1 < l2:\n            return -1\n        return 0"}], "best-time-to-buy-and-sell-stock-ii": [{"task_id": "best-time-to-buy-and-sell-stock-ii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_profit = 0\n        min_price = float('inf')\n        \n        for price in prices:\n            min_price = min(min_price, price)\n            max_profit = max(max_profit, price - min_price)\n        \n        return max_profit"}], "course-schedule-iii": [{"task_id": "course-schedule-iii", "completion": "class Solution(object):\n    def scheduleCourse(self, courses):\n        \"\"\"\n        :type courses: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def scheduleCourse(self, courses):\n        \"\"\"\n        :type courses: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        courses.sort(key=lambda x: x[1])\n        q = []\n        t = 0\n        for d, e in courses:\n            heappush(q, d)\n            t += d\n            if t > e:\n                t -= heappop(q)\n        return len(q)"}], "reverse-nodes-in-k-group": [{"task_id": "reverse-nodes-in-k-group", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseKGroup(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or k < 2:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        \n        prev = dummy\n        curr = head\n        \n        while curr:\n            for i in range(k):\n                if curr:\n                    curr = curr.next\n                else:\n                    return dummy.next\n            next_group = curr\n            \n            prev.next, curr, next_group.next = self.reverse(prev.next, curr)\n            prev = next_group\n            \n        return dummy.next\n        \n    def reverse(self, start, end):\n        prev = None\n        curr = start\n        \n        while curr != end:\n            next_node = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next_node\n            \n        return prev, end"}], "repeated-substring-pattern": [{"task_id": "repeated-substring-pattern", "completion": "class Solution(object):\n    def repeatedSubstringPattern(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        return s in (s + s)[1:-1]"}], "unique-binary-search-trees": [{"task_id": "unique-binary-search-trees", "completion": "class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. The number of unique BSTs with n nodes is the same as the number of unique BSTs with n-1 nodes.\n        # 2. The number of unique BSTs with n nodes is the sum of the number of unique BSTs with n-1 nodes and the number of unique BSTs with n-2 nodes.\n        # 3. The number of unique BSTs with n nodes is the number of unique BSTs with n-1 nodes multiplied by the number of unique BSTs with n-2 nodes.\n        # 4. The number of unique BSTs with n nodes is the number of unique BSTs with n-1 nodes multiplied by the number of unique BSTs with n-2 nodes divided by the number of unique BSTs with n-3 nodes.\n        # 5. The number of unique BSTs with n nodes is the number of unique BSTs with n-1 nodes multiplied by the number of unique BSTs with n-2 nodes divided by the number of unique BSTs with n-3 nodes multiplied by the number of unique BSTs with n-4 nodes.\n        # 6. The number of unique BSTs with n nodes is the number of unique BSTs with n-1 nodes multiplied by the number of unique BSTs with n-2 nodes divided by the number of unique BSTs with n-3 nodes multiplied by the number of unique BSTs with n-4 nodes divided by the number of unique BSTs with n-5 nodes.\n        # 7. The number of unique BSTs with n nodes is the number of unique BSTs with n-1 nodes multiplied by the number of unique BSTs with n-2 nodes divided by the number of unique BSTs with n-3 nodes multiplied by the number of unique BSTs with n-4 nodes divided by the number of unique BSTs with n-5 nodes multiplied by the number of unique BSTs with n-6 nodes.\n        # 8. The number of unique BSTs with n nodes is the number of unique BSTs with n-1 nodes multiplied by the number of unique BSTs with n-2 nodes divided by the number of unique BSTs with n-3 nodes multiplied by the number of unique BSTs with n-4 nodes divided by the number of unique BSTs with n-5 nodes multiplied by the number of unique BSTs with n-6 nodes divided by the number of unique BSTs with n-7 nodes.\n        # 9. The number of unique BSTs with n nodes is the number of unique BSTs with n-1 nodes multiplied by the number of unique BSTs with n-2 nodes divided by the number of unique BSTs with n-3 nodes multiplied by the number of unique BSTs with n-4 nodes divided by the number of unique BSTs with n-5 nodes multiplied by the number of unique BSTs with n-6 nodes divided by the number of unique BSTs with n-7 nodes multiplied by the number of unique BSTs with n-8 nodes.\n        # 10. The number of unique BSTs with n nodes is the number of unique BSTs with n-1 nodes multiplied by the number of unique BSTs with n-2 nodes divided by the number of unique BSTs with n-3 nodes multiplied by the number of unique BSTs with n-4 nodes divided by the number of unique BSTs with n-5 nodes multiplied by the number of unique BSTs with n-6 nodes divided by the number of unique BSTs with n-7 nodes multiplied by the number of unique BSTs with n-8 nodes divided by the number of unique BSTs with n-9 nodes.\n        # 11. The number of unique BSTs with n nodes is the number of unique BSTs with n-1 nodes multiplied by the number of unique BSTs with n-2 nodes divided by the number of unique BSTs with n-3 nodes multiplied by the number of unique BSTs with n-4 nodes divided by the number of unique BSTs with n-5 nodes multiplied by the number of unique BSTs with n-6 nodes divided by the number of unique BSTs with n-7 nodes multiplied by the number of unique BSTs with n-8 nodes divided by the number of unique BSTs with n-9 nodes multiplied by the number of unique BSTs with n-10 nodes.\n        # 12. The number of unique BSTs with n nodes is"}], "single-number-ii": [{"task_id": "single-number-ii", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        a = 0\n        for n in nums:\n            a = a ^ n\n        return a"}], "stickers-to-spell-word": [{"task_id": "stickers-to-spell-word", "completion": "class Solution(object):\n    def minStickers(self, stickers, target):\n        \"\"\"\n        :type stickers: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def minStickers(self, stickers, target):\n        \"\"\"\n        :type stickers: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\""}], "strange-printer": [{"task_id": "strange-printer", "completion": "class Solution(object):\n    def strangePrinter(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        n = len(s)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n - 1, -1, -1):\n            dp[i][i] = 1\n            c = s[i]\n            for j in range(i + 1, n):\n                if s[j] == c:\n                    dp[i][j] = dp[i][j - 1]\n                else:\n                    dp[i][j] = dp[i][j - 1] + 1\n                    for k in range(i, j):\n                        if s[k] == c:\n                            dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + 1][j])\n        return dp[0][n - 1]"}], "sqrtx": [{"task_id": "sqrtx", "completion": "class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        \n        left, right = 1, x\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            if mid ** 2 <= x:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return left - 1"}], "roman-to-integer": [{"task_id": "roman-to-integer", "completion": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n        prev_val = 0\n        res = 0\n        for i in s[::-1]:\n            curr_val = roman_dict[i]\n            if curr_val < prev_val:\n                res -= curr_val\n            else:\n                res += curr_val\n            prev_val = curr_val\n        return res"}], "contains-duplicate": [{"task_id": "contains-duplicate", "completion": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        return len(nums) != len(set(nums))"}], "sliding-window-maximum": [{"task_id": "sliding-window-maximum", "completion": "class Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if not nums:\n            return []\n        \n        n = len(nums)\n        max_window = nums[0:k]\n        max_window.sort()\n        ans = [max_window[-1]]\n        \n        for i in range(k, n):\n            max_window.remove(nums[i - k])\n            max_window.append(nums[i])\n            max_window.sort()\n            ans.append(max_window[-1])\n        \n        return ans"}], "median-of-two-sorted-arrays": [{"task_id": "median-of-two-sorted-arrays", "completion": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\""}], "find-minimum-in-rotated-sorted-array": [{"task_id": "find-minimum-in-rotated-sorted-array", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        l, r = 0, len(nums) - 1\n        while l < r:\n            m = (l + r) // 2\n            if nums[m] < nums[r]:\n                r = m\n            else:\n                l = m + 1\n        return nums[l]"}], "pascals-triangle-ii": [{"task_id": "pascals-triangle-ii", "completion": "class Solution(object):\n    def getRow(self, rowIndex):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if rowIndex == 0:\n            return [1]\n        if rowIndex == 1:\n            return [1,1]\n        \n        row = [1,1]\n        for i in range(2, rowIndex + 1):\n            row = [1] + [row[j] + row[j+1] for j in range(len(row) - 1)] + [1]\n        \n        return row"}], "path-sum-ii": [{"task_id": "path-sum-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def pathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        ans = []\n        def dfs(node, curr_sum, path):\n            if not node:\n                return\n            curr_sum += node.val\n            path.append(node.val)\n            if curr_sum == targetSum and not node.left and not node.right:\n                ans.append(path.copy())\n            else:\n                dfs(node.left, curr_sum, path)\n                dfs(node.right, curr_sum, path)\n            path.pop()\n        \n        dfs(root, 0, [])\n        return ans"}], "construct-the-rectangle": [{"task_id": "construct-the-rectangle", "completion": "class Solution(object):\n    def constructRectangle(self, area):\n        \"\"\"\n        :type area: int\n        :rtype: List[int]\n        \"\"\"\n        \n        w = area\n        l = area // w\n        while w % l != 0:\n            l -= 1\n        return [l, w // l]"}], "word-ladder-ii": [{"task_id": "word-ladder-ii", "completion": "class Solution(object):\n    def findLadders(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def findLadders(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: List[List[str]]\n        \"\"\""}], "balanced-binary-tree": [{"task_id": "balanced-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isBalanced(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def height(root):\n            if not root:\n                return 0\n            left = height(root.left)\n            right = height(root.right)\n            if left == -1 or right == -1 or abs(left - right) > 1:\n                return -1\n            return max(left, right) + 1\n        \n        return height(root) != -1"}], "power-of-two": [{"task_id": "power-of-two", "completion": "class Solution(object):\n    def isPowerOfTwo(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        return n > 0 and not (n & (n - 1))"}], "subsets-ii": [{"task_id": "subsets-ii", "completion": "class Solution(object):\n    def subsetsWithDup(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        ans = [[]]\n        i = 0\n        n = len(nums)\n        while i < n:\n            j = i\n            while j < n and nums[j] == nums[i]:\n                j += 1\n            m = len(ans)\n            ans += ans[m - 1] + [nums[i] * (j - i)]\n            i = j\n        return ans"}], "largest-rectangle-in-histogram": [{"task_id": "largest-rectangle-in-histogram", "completion": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(heights)\n        left = [0] * n\n        right = [0] * n\n        stack = []\n        for i in range(n):\n            while stack and heights[stack[-1]] >= heights[i]:\n                stack.pop()\n            left[i] = stack[-1] if stack else -1\n            stack.append(i)\n        \n        stack = []\n        for i in range(n - 1, -1, -1):\n            while stack and heights[stack[-1]] >= heights[i]:\n                stack.pop()\n            right[i] = stack[-1] if stack else n\n            stack.append(i)\n        \n        ans = 0\n        for i in range(n):\n            ans = max(ans, (right[i] - left[i] - 1) * heights[i])\n        return ans"}], "evaluate-reverse-polish-notation": [{"task_id": "evaluate-reverse-polish-notation", "completion": "class Solution(object):\n    def evalRPN(self, tokens):\n        \"\"\"\n        :type tokens: List[str]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        for token in tokens:\n            if token not in \"+-*/\":\n                stack.append(int(token))\n            else:\n                a = stack.pop()\n                b = stack.pop()\n                if token == \"+\":\n                    stack.append(a + b)\n                elif token == \"-\":\n                    stack.append(b - a)\n                elif token == \"*\":\n                    stack.append(a * b)\n                else:\n                    stack.append(int(b / a))\n        return stack.pop()"}], "perfect-rectangle": [{"task_id": "perfect-rectangle", "completion": "class Solution(object):\n    def isRectangleCover(self, rectangles):\n        \"\"\"\n        :type rectangles: List[List[int]]\n        :rtype: bool\n        \"\"\""}], "excel-sheet-column-title": [{"task_id": "excel-sheet-column-title", "completion": "class Solution(object):\n    def convertToTitle(self, columnNumber):\n        \"\"\"\n        :type columnNumber: int\n        :rtype: str\n        \"\"\"\n        \n        ans = ''\n        while columnNumber > 0:\n            columnNumber -= 1\n            ans = chr(columnNumber % 26 + ord('A')) + ans\n            columnNumber //= 26\n        return ans"}], "maximum-subarray": [{"task_id": "maximum-subarray", "completion": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_sum = nums[0]\n        cur_sum = 0\n        \n        for num in nums:\n            if cur_sum < 0:\n                cur_sum = 0\n            cur_sum += num\n            max_sum = max(max_sum, cur_sum)\n        \n        return max_sum"}], "sliding-puzzle": [{"task_id": "sliding-puzzle", "completion": "class Solution(object):\n    def slidingPuzzle(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def slidingPuzzle(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\""}], "isomorphic-strings": [{"task_id": "isomorphic-strings", "completion": "class Solution(object):\n    def isIsomorphic(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_to_t = {}\n        t_to_s = {}\n        \n        for c1, c2 in zip(s, t):\n            if c1 in s_to_t and s_to_t[c1] != c2:\n                return False\n            if c2 in t_to_s and t_to_s[c2] != c1:\n                return False\n            s_to_t[c1] = c2\n            t_to_s[c2] = c1\n        \n        return True"}], "search-in-rotated-sorted-array-ii": [{"task_id": "search-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        l, r = 0, len(nums) - 1\n        while l <= r:\n            m = (l + r) // 2\n            if nums[m] == target:\n                return True\n            if nums[m] == nums[l]:\n                l += 1\n            elif nums[m] > nums[l]:\n                if nums[m] > target and nums[l] <= target:\n                    r = m - 1\n                else:\n                    l = m + 1\n            else:\n                if nums[m] < target and nums[r] >= target:\n                    l = m + 1\n                else:\n                    r = m - 1\n        return False"}], "unique-paths-ii": [{"task_id": "unique-paths-ii", "completion": "class Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid):\n        \"\"\"\n        :type obstacleGrid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        \n        if obstacleGrid[m - 1][n - 1] == 1 or obstacleGrid[0][0] == 1:\n            return 0\n        \n        dp = [0] * n\n        dp[0] = 1\n        \n        for i in range(m):\n            for j in range(n):\n                if obstacleGrid[i][j] == 1:\n                    dp[j] = 0\n                elif j > 0 and obstacleGrid[i][j] == 0:\n                    dp[j] += dp[j - 1]\n                \n        return dp[n - 1]"}], "decode-ways-ii": [{"task_id": "decode-ways-ii", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s[0] == '0':\n            return 0\n        \n        a = b = 1\n        \n        for i in s[1:]:\n            c = a\n            if i == '0':\n                if s[b] == '0':\n                    return 0\n                c = b\n            a = b\n            b = c + a if i in '12' else b\n        \n        return b"}], "3sum-closest": [{"task_id": "3sum-closest", "completion": "class Solution(object):\n    def threeSumClosest(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        closest = nums[0] + nums[1] + nums[2]\n        n = len(nums)\n        \n        for i in range(n - 2):\n            j = i + 1\n            k = n - 1\n            \n            while j < k:\n                sum = nums[i] + nums[j] + nums[k]\n                \n                if abs(sum - target) < abs(closest - target):\n                    closest = sum\n                \n                if sum < target:\n                    j += 1\n                else:\n                    k -= 1\n            \n        return closest"}], "maximum-depth-of-binary-tree": [{"task_id": "maximum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))"}], "intersection-of-two-arrays-ii": [{"task_id": "intersection-of-two-arrays-ii", "completion": "class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        nums1.sort()\n        nums2.sort()\n        i, j = 0, 0\n        res = []\n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] < nums2[j]:\n                i += 1\n            elif nums1[i] > nums2[j]:\n                j += 1\n            else:\n                res.append(nums1[i])\n                i += 1\n                j += 1\n        return res"}], "minimum-absolute-difference-in-bst": [{"task_id": "minimum-absolute-difference-in-bst", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def getMinimumDifference(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\""}], "find-mode-in-binary-search-tree": [{"task_id": "find-mode-in-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\""}], "find-the-index-of-the-first-occurrence-in-a-string": [{"task_id": "find-the-index-of-the-first-occurrence-in-a-string", "completion": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        \n        if len(needle) == 0:\n            return 0\n        \n        if len(haystack) == 0:\n            return -1\n        \n        if len(haystack) < len(needle):\n            return -1\n        \n        if len(haystack) == len(needle):\n            return 0 if haystack == needle else -1\n        \n        return haystack.find(needle)"}], "strong-password-checker": [{"task_id": "strong-password-checker", "completion": "class Solution(object):\n    def strongPasswordChecker(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: int\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def strongPasswordChecker(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: int\n        \"\"\"\n        \n        n = len(password)\n        a, b, c = (0, 0, 0)\n        # a: number of lowercase letters\n        # b: number of uppercase letters\n        # c: number of digits\n        # d: number of repeating characters in a row\n        # e: number of characters to be replaced\n        # f: number of characters to be deleted\n        # g: number of characters to be added\n        # h: number of characters to be replaced\n        # i: number of characters to be deleted\n        # j: number of characters to be added\n        # k: number of characters to be replaced\n        # l: number of characters to be deleted\n        # m: number of characters to be added\n        # n: number of characters to be replaced\n        # o: number of characters to be deleted\n        # p: number of characters to be added\n        # q: number of characters to be replaced\n        # r: number of characters to be deleted\n        # s: number of characters to be added\n        # t: number of characters to be replaced\n        # u: number of characters to be deleted\n        # v: number of characters to be added\n        # w: number of characters to be replaced\n        # x: number of characters to be deleted\n        # y: number of characters to be added\n        # z: number of characters to be replaced\n        # 0: number of characters to be deleted\n        # 1: number of characters to be added\n        # 2: number of characters to be replaced\n        # 3: number of characters to be deleted\n        # 4: number of characters to be added\n        # 5: number of characters to be replaced\n        # 6: number of characters to be deleted\n        # 7: number of characters to be added\n        # 8: number of characters to be replaced\n        # 9: number of characters to be deleted\n        # 9: number of characters to be added\n        # 10: number of characters to be replaced\n        # 11: number of characters to be deleted\n        # 12: number of characters to be added\n        # 13: number of characters to be replaced\n        # 14: number of characters to be deleted\n        # 15: number of characters to be added\n        # 16: number of characters to be replaced\n        # 17: number of characters to be deleted\n        # 18: number of characters to be added\n        # 19: number of characters to be replaced\n        # 20: number of characters to be deleted\n        # 21: number of characters to be added\n        # 22: number of characters to be replaced\n        # 23: number of characters to be deleted\n        # 24: number of characters to be added\n        # 25: number of characters to be replaced\n        # 26: number of characters to be deleted\n        # 27: number of characters to be added\n        # 28: number of characters to be replaced\n        # 29: number of characters to be deleted\n        # 30: number of characters to be added\n        # 31: number of characters to be replaced\n        # 32: number of characters to be deleted\n        # 33: number of characters to be added\n        # 34: number of characters to be replaced\n        # 35: number of characters to be deleted\n        # 36: number of characters to be added\n        # 37: number of characters to be replaced\n        # 38: number of characters to be deleted\n        # 39: number of characters to be added\n        # 40: number of characters to be replaced\n        # 41: number of characters to be deleted\n        # 42: number of characters to be added\n        # 43: number of characters to be replaced\n        # 44: number of characters to be deleted\n        # 45: number of characters to be added\n        # 46: number of characters to be replaced\n        # 47: number of characters to be deleted\n        # 48: number of characters to be added\n        # 49: number of characters to be replaced\n        # 50: number of characters to be deleted\n        # 51: number of"}], "factorial-trailing-zeroes": [{"task_id": "factorial-trailing-zeroes", "completion": "class Solution(object):\n    def trailingZeroes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n < 0:\n            return 0\n        \n        zeroes = 0\n        factor = 5\n        \n        while n // factor:\n            zeroes += n // factor\n            factor *= 5\n        \n        return zeroes"}], "zigzag-conversion": [{"task_id": "zigzag-conversion", "completion": "class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        \n        if numRows == 1:\n            return s\n        \n        rows = [\"\" for _ in range(numRows)]\n        row_idx = 0\n        going_down = False\n        \n        for c in s:\n            rows[row_idx] += c\n            if row_idx == 0 or row_idx == numRows - 1:\n                going_down = not going_down\n            row_idx += 1 if going_down else -1\n        \n        return \"\".join(rows)"}], "trapping-rain-water": [{"task_id": "trapping-rain-water", "completion": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(height)\n        left, right = 0, n - 1\n        left_max, right_max = 0, 0\n        ans = 0\n        \n        while left < right:\n            if height[left] < height[right]:\n                left_max = max(left_max, height[left])\n                ans += left_max - height[left]\n                left += 1\n            else:\n                right_max = max(right_max, height[right])\n                ans += right_max - height[right]\n                right -= 1\n        \n        return ans"}], "find-all-numbers-disappeared-in-an-array": [{"task_id": "find-all-numbers-disappeared-in-an-array", "completion": "class Solution(object):\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        n = len(nums)\n        for i in nums:\n            idx = abs(i) - 1\n            if nums[idx] > 0:\n                nums[idx] *= -1\n        \n        return [i for i in range(1, n + 1) if nums[i - 1] > 0]"}], "count-of-smaller-numbers-after-self": [{"task_id": "count-of-smaller-numbers-after-self", "completion": "class Solution(object):\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        n = len(nums)\n        if n <= 1:\n            return [0] * n\n        \n        nums = [(num, i) for i, num in enumerate(nums)]\n        nums.sort()\n        ans = [0] * n\n        \n        # count the number of smaller elements to the right of nums[i]\n        # in the sorted array nums\n        # we use a binary search to find the index of nums[i] in the sorted array\n        # we use a binary search to find the number of smaller elements to the right of nums[i]\n        # we use a binary search to find the number of smaller elements to the left of nums[i]\n        # we use a binary search to find the number of smaller elements to the right of nums[i]\n        # we use a binary search to find the number of smaller elements to the left of nums[i]\n        # we use a binary search to find the number of smaller elements to the right of nums[i]\n        # we use a binary search to find the number of smaller elements to the left of nums[i]\n        # we use a binary search to find the number of smaller elements to the right of nums[i]\n        # we use a binary search to find the number of smaller elements to the left of nums[i]\n        # we use a binary search to find the number of smaller elements to the right of nums[i]\n        # we use a binary search to find the number of smaller elements to the left of nums[i]\n        # we use a binary search to find the number of smaller elements to the right of nums[i]\n        # we use a binary search to find the number of smaller elements to the left of nums[i]\n        # we use a binary search to find the number of smaller elements to the right of nums[i]\n        # we use a binary search to find the number of smaller elements to the left of nums[i]\n        # we use a binary search to find the number of smaller elements to the right of nums[i]\n        # we use a binary search to find the number of smaller elements to the left of nums[i]\n        # we use a binary search to find the number of smaller elements to the right of nums[i]\n        # we use a binary search to find the number of smaller elements to the left of nums[i]\n        # we use a binary search to find the number of smaller elements to the right of nums[i]\n        # we use a binary search to find the number of smaller elements to the left of nums[i]\n        # we use a binary search to find the number of smaller elements to the right of nums[i]\n        # we use a binary search to find the number of smaller elements to the left of nums[i]\n        # we use a binary search to find the number of smaller elements to the right of nums[i]\n        # we use a binary search to find the number of smaller elements to the left of nums[i]\n        # we use a binary search to find the number of smaller elements to the right of nums[i]\n        # we use a binary search to find the number of smaller elements to the left of nums[i]\n        # we use a binary search to find the number of smaller elements to the right of nums[i]\n        # we use a binary search to find the number of smaller elements to the left of nums[i]\n        # we use a binary search to find the number of smaller elements to the right of nums[i]\n        # we use a binary search to find the number of smaller elements to the left of nums[i]\n        # we use a binary search to find the number of smaller elements to the right of nums[i]\n        # we use a binary search to find the number of smaller elements to the left of nums[i]\n        # we use a binary search to find the number of smaller elements to the right of nums[i]\n        # we use a binary search to find the number of smaller elements to the left of nums[i]\n        # we use a binary search to find the number of smaller elements to the right of nums[i]\n        # we use a binary search to find the number of smaller elements to the left of"}], "set-intersection-size-at-least-two": [{"task_id": "set-intersection-size-at-least-two", "completion": "class Solution(object):\n    def intersectionSizeTwo(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def intersectionSizeTwo(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        intervals.sort(key=lambda x: x[1])\n        ans = 0\n        a, b = -1, -1\n        for x, y in intervals:\n            if x <= b:\n                ans += b - a\n                a = b\n                b = x\n            else:\n                a = b\n                b = x\n            ans += 1\n        ans += b - a\n        return ans"}], "symmetric-tree": [{"task_id": "symmetric-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if not root:\n            return True\n        \n        return self.isMirror(root.left, root.right)\n        \n    def isMirror(self, left, right):\n        if not left and not right:\n            return True\n        if not left or not right:\n            return False\n        return left.val == right.val and self.isMirror(left.left, right.right) and self.isMirror(left.right, right.left)"}], "number-of-atoms": [{"task_id": "number-of-atoms", "completion": "class Solution(object):\n    def countOfAtoms(self, formula):\n        \"\"\"\n        :type formula: str\n        :rtype: str\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def countOfAtoms(self, formula):\n        \"\"\"\n        :type formula: str\n        :rtype: str\n        \"\"\""}], "binary-tree-preorder-traversal": [{"task_id": "binary-tree-preorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def preorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        stack = [root]\n        res = []\n        \n        while stack:\n            node = stack.pop()\n            if node:\n                if node.right:\n                    stack.append(node.right)\n                if node.left:\n                    stack.append(node.left)\n                res.append(node.val)\n        \n        return res"}], "power-of-four": [{"task_id": "power-of-four", "completion": "class Solution(object):\n    def isPowerOfFour(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        return n > 0 and not n & (n - 1) and not n & 0x55555555"}], "invert-binary-tree": [{"task_id": "invert-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def invertTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        \n        if root:\n            root.left, root.right = root.right, root.left\n            self.invertTree(root.left)\n            self.invertTree(root.right)\n            \n        return root"}], "generate-parentheses": [{"task_id": "generate-parentheses", "completion": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        if n == 0:\n            return []\n        \n        if n == 1:\n            return ['()']\n        \n        res = []\n        for i in range(n):\n            left = self.generateParenthesis(i)\n            right = self.generateParenthesis(n - i - 1)\n            for l in left:\n                for r in right:\n                    res.append('({}){}'.format(l, r))\n        \n        return res"}], "patching-array": [{"task_id": "patching-array", "completion": "class Solution(object):\n    def minPatches(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\""}], "longest-valid-parentheses": [{"task_id": "longest-valid-parentheses", "completion": "class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        n = len(s)\n        if n < 2:\n            return 0\n        \n        # dp[i] is the longest valid parentheses substring ending with s[i]\n        dp = [0] * n\n        max_len = 0\n        \n        for i in range(1, n):\n            if s[i] == ')':\n                if s[i - 1] == '(':\n                    dp[i] = (dp[i - 1] + 2) if i >= 2 else 2\n                else:\n                    if i - dp[i - 1] - 1 >= 0 and s[i - dp[i - 1] - 1] == '(':\n                        dp[i] = dp[i - 1] + (dp[i - dp[i - 1] - 2] + 2) if i - dp[i - 1] - 2 >= 0 else dp[i - 1] + 2\n                    dp[i] = 0\n            max_len = max(max_len, dp[i])\n        \n        return max_len"}], "fraction-to-recurring-decimal": [{"task_id": "fraction-to-recurring-decimal", "completion": "class Solution(object):\n    def fractionToDecimal(self, numerator, denominator):\n        \"\"\"\n        :type numerator: int\n        :type denominator: int\n        :rtype: str\n        \"\"\""}], "sort-list": [{"task_id": "sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n\n\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        # find the middle of the list\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # split the list into two halves\n        mid = slow\n        slow = head\n        while slow is not mid:\n            tmp = slow.next\n            slow.next = mid\n            slow = tmp\n        \n        # recursively sort the two halves\n        mid.next = self.sortList(mid.next)\n        \n        # merge the sorted halves\n        cur = mid\n        while cur.next:\n            tmp = cur.next\n            cur.next = mid\n            cur = tmp\n        \n        return mid"}], "russian-doll-envelopes": [{"task_id": "russian-doll-envelopes", "completion": "class Solution(object):\n    def maxEnvelopes(self, envelopes):\n        \"\"\"\n        :type envelopes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def maxEnvelopes(self, envelopes):\n        \"\"\"\n        :type envelopes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        envelopes.sort(key=lambda x: (x[0], -x[1]))\n        ans = 0\n        a = [x[1] for x in envelopes]\n        for x in a:\n            if x > ans:\n                ans += 1\n        return ans"}], "set-matrix-zeroes": [{"task_id": "set-matrix-zeroes", "completion": "class Solution(object):\n    def setZeroes(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        rows = len(matrix)\n        cols = len(matrix[0])\n        row_zero = False\n        \n        for i in range(rows):\n            if matrix[i][0] == 0:\n                row_zero = True\n            for j in range(1, cols):\n                if matrix[i][j] == 0:\n                    matrix[i][0] = 0\n                    matrix[0][j] = 0\n        \n        for i in range(1, rows):\n            for j in range(1, cols):\n                if matrix[i][0] == 0 or matrix[0][j] == 0:\n                    matrix[i][j] = 0\n        \n        if row_zero:\n            for j in range(cols):\n                matrix[0][j] = 0\n        \n        if col_zero:\n            for i in range(rows):\n                matrix[i][0] = 0"}], "remove-nth-node-from-end-of-list": [{"task_id": "remove-nth-node-from-end-of-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        \n        dummy = ListNode(0, head)\n        left = dummy\n        right = head\n        \n        # move right by n nodes\n        while n > 0 and right:\n            right = right.next\n            n -= 1\n        \n        # move left and right at the same time\n        while right:\n            left = left.next\n            right = right.next\n        \n        # delete the nth node\n        left.next = left.next.next\n        \n        return dummy.next"}], "intersection-of-two-arrays": [{"task_id": "intersection-of-two-arrays", "completion": "class Solution(object):\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        return list(set(nums1) & set(nums2))"}], "super-washing-machines": [{"task_id": "super-washing-machines", "completion": "class Solution(object):\n    def findMinMoves(self, machines):\n        \"\"\"\n        :type machines: List[int]\n        :rtype: int\n        \"\"\""}], "kth-smallest-number-in-multiplication-table": [{"task_id": "kth-smallest-number-in-multiplication-table", "completion": "class Solution(object):\n    def findKthNumber(self, m, n, k):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def findKthNumber(self, m, n, k):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. if k == 1, return m * n\n        # 2. if k > m * n, return 0\n        # 3. if k == 1, return m * n\n        # 4. if k <= m * n, binary search\n        # 5. if k > m * n, return m * n\n        \n        # 1. if k == 1, return m * n\n        # 2. if k > m * n, return 0\n        # 3. if k == 1, return m * n\n        # 4. if k <= m * n, binary search\n        # 5. if k > m * n, return m * n\n        \n        # 1. if k == 1, return m * n\n        # 2. if k > m * n, return 0\n        # 3. if k == 1, return m * n\n        # 4. if k <= m * n, binary search\n        # 5. if k > m * n, return m * n\n        \n        # 1. if k == 1, return m * n\n        # 2. if k > m * n, return 0\n        # 3. if k == 1, return m * n\n        # 4. if k <= m * n, binary search\n        # 5. if k > m * n, return m * n\n        \n        # 1. if k == 1, return m * n\n        # 2. if k > m * n, return 0\n        # 3. if k == 1, return m * n\n        # 4. if k <= m * n, binary search\n        # 5. if k > m * n, return m * n\n        \n        # 1. if k == 1, return m * n\n        # 2. if k > m * n, return 0\n        # 3. if k == 1, return m * n\n        # 4. if k <= m * n, binary search\n        # 5. if k > m * n, return m * n\n        \n        # 1. if k == 1, return m * n\n        # 2. if k > m * n, return 0\n        # 3. if k == 1, return m * n\n        # 4. if k <= m * n, binary search\n        # 5. if k > m * n, return m * n\n        \n        # 1. if k == 1, return m * n\n        # 2. if k > m * n, return 0\n        # 3. if k == 1, return m * n\n        # 4. if k <= m * n, binary search\n        # 5. if k > m * n, return m * n\n        \n        # 1. if k == 1, return m * n\n        # 2. if k > m * n, return 0\n        # 3. if k == 1, return m * n\n        # 4. if k <= m * n, binary search\n        # 5. if k > m * n, return m * n\n        \n        # 1. if k == 1, return m * n\n        # 2. if k > m * n, return 0\n        # 3. if k == 1, return m * n\n        # 4. if k <= m * n, binary search\n        # 5. if k > m * n, return m * n\n        \n        # 1. if k == 1, return m * n\n        # 2. if k > m * n, return 0\n        # 3. if k == 1, return m * n\n        # 4. if k <= m * n, binary search\n        # 5. if k > m * n, return m * n\n        \n        # 1. if k == 1, return m * n\n        # 2. if k > m * n, return 0\n        # 3. if k == 1, return m * n\n        # 4. if k <= m * n, binary search\n        # 5. if k > m * n, return m * n\n        \n        #"}], "convert-sorted-list-to-binary-search-tree": [{"task_id": "convert-sorted-list-to-binary-search-tree", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedListToBST(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :rtype: Optional[TreeNode]\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        if not head.next:\n            return TreeNode(head.val)\n        \n        slow = head\n        fast = head.next\n        \n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        root = TreeNode(slow.val)\n        root.right = self.sortedListToBST(slow.next)\n        slow.next = None\n        root.left = self.sortedListToBST(head)\n        \n        return root"}], "merge-two-sorted-lists": [{"task_id": "merge-two-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: Optional[ListNode]\n        :type list2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        \n        if not list1:\n            return list2\n        if not list2:\n            return list1\n        \n        if list1.val < list2.val:\n            head = list1\n            list1 = list1.next\n        else:\n            head = list2\n            list2 = list2.next\n        \n        curr = head\n        \n        while list1 and list2:\n            if list1.val < list2.val:\n                curr.next = list1\n                list1 = list1.next\n            else:\n                curr.next = list2\n                list2 = list2.next\n            curr = curr.next\n        \n        if list1:\n            curr.next = list1\n        else:\n            curr.next = list2\n        \n        return head"}], "maximal-rectangle": [{"task_id": "maximal-rectangle", "completion": "class Solution(object):\n    def maximalRectangle(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def maximalRectangle(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        rows, cols = len(matrix), len(matrix[0])\n        heights = [0] * cols\n        \n        max_area = 0\n        \n        for row in matrix:\n            for col in range(cols):\n                heights[col] = heights[col] + 1 if row[col] == '1' else 0\n            max_area = max(max_area, self.largestRectangleArea(heights))\n        \n        return max_area\n    \n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        stack = [-1]\n        max_area = 0\n        \n        for i in range(len(heights)):\n            while stack[-1] != -1 and heights[stack[-1]] >= heights[i]:\n                max_area = max(max_area, heights[stack.pop()] * (i - stack[-1] - 1))\n            stack.append(i)\n        \n        while stack[-1] != -1:\n            max_area = max(max_area, heights[stack.pop()] * (len(heights) - stack[-1] - 1))\n        \n        return max_area"}], "subsets": [{"task_id": "subsets", "completion": "class Solution(object):\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        n = len(nums)\n        ans = [[]]\n        for num in nums:\n            ans += [a + [num] for a in ans]\n        return ans"}], "find-minimum-in-rotated-sorted-array-ii": [{"task_id": "find-minimum-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        l, r = 0, len(nums) - 1\n        while l < r:\n            m = (l + r) // 2\n            if nums[m] < nums[r]:\n                r = m\n            elif nums[m] > nums[r]:\n                l = m + 1\n            else:\n                r -= 1\n        return nums[l]"}], "valid-number": [{"task_id": "valid-number", "completion": "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        s = s.strip()\n        if not s or s[0] not in '+-e':\n            return False\n        if s[0] in '-+' and len(s) == 1:\n            return False\n        if s[0] in '-+' and s[1] not in 'e.':\n            return False\n        if s[0] in 'e' and len(s) == 1:\n            return False\n        if s[0] in 'e' and s[1] not in '+-':\n            return False\n        if s[0] in 'e' and s[1] in '+-' and len(s) == 2:\n            return False\n        if s[0] in 'e' and s[1] in '+-' and s[2] not in 'e.':\n            return False\n        if s[0] in 'e' and s[1] in '+-' and s[2] in 'e.':\n            return False\n        if s[0] in 'e' and s[1] in '+-' and s[2] in 'e.' and len(s) == 3:\n            return False\n        if s[0] in 'e' and s[1] in '+-' and s[2] in 'e.' and s[3] not in 'e':\n            return False\n        if s[0] in 'e' and s[1] in '+-' and s[2] in 'e.' and s[3] in 'e':\n            return False\n        if s[0] in 'e' and s[1] in '+-' and s[2] in 'e.' and s[3] in 'e' and len(s) == 4:\n            return False\n        if s[0] in 'e' and s[1] in '+-' and s[2] in 'e.' and s[3] in 'e' and s[4] not in 'e':\n            return False\n        if s[0] in 'e' and s[1] in '+-' and s[2] in 'e.' and s[3] in 'e' and s[4] in 'e':\n            return False\n        if s[0] in 'e' and s[1] in '+-' and s[2] in 'e.' and s[3] in 'e' and s[4] in 'e' and len(s) == 5:\n            return False\n        if s[0] in 'e' and s[1] in '+-' and s[2] in 'e.' and s[3] in 'e' and s[4] in 'e' and s[5] not in 'e':\n            return False\n        if s[0] in 'e' and s[1] in '+-' and s[2] in 'e.' and s[3] in 'e' and s[4] in 'e' and s[5] in 'e':\n            return False\n        if s[0] in 'e' and s[1] in '+-' and s[2] in 'e.' and s[3] in 'e' and s[4] in 'e' and s[5] in 'e' and len(s) == 6:\n            return False\n        if s[0] in 'e' and s[1] in '+-' and s[2] in 'e.' and s[3] in 'e' and s[4] in 'e' and s[5] in 'e' and s[6] not in 'e':\n            return False\n        if s[0] in 'e' and s[1] in '+-' and s[2] in 'e.' and s[3] in 'e' and s[4] in 'e' and s[5] in 'e' and s[6] in 'e':\n            return False\n        if s[0] in 'e' and s[1] in '+-' and s[2] in 'e.' and s[3] in 'e' and s[4] in 'e' and s[5] in 'e' and s[6] in 'e' and len(s) == 7:\n            return False\n        if s[0] in 'e' and s[1] in '+-' and s[2] in 'e.' and s[3] in 'e"}], "integer-to-roman": [{"task_id": "integer-to-roman", "completion": "class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        roman_num = {1000: \"M\", 900: \"CM\", 500: \"D\", 400: \"CD\", 100: \"C\", 90: \"XC\", 50: \"L\", 40: \"XL\", 10: \"X\", 9: \"IX\", 5: \"V\", 4: \"IV\", 1: \"I\"}\n        roman_num_val = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n        roman_num_val_str = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n        roman_num_str = \"\"\n        i = 0\n        while num > 0:\n            if num // roman_num_val[i] > 0:\n                roman_num_str += roman_num_val_str[i] * (num // roman_num_val[i])\n                num = num % roman_num_val[i]\n            i += 1\n        return roman_num_str"}], "find-the-difference": [{"task_id": "find-the-difference", "completion": "class Solution(object):\n    def findTheDifference(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        return chr(sum(map(ord, s)) - sum(map(ord, t)))"}], "sudoku-solver": [{"task_id": "sudoku-solver", "completion": "class Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        # 0 - 8 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 - 9 - 9\n        # 0 -"}], "recover-binary-search-tree": [{"task_id": "recover-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\""}], "palindrome-linked-list": [{"task_id": "palindrome-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        \n        if not head or not head.next:\n            return True\n        \n        slow = head\n        fast = head\n        \n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        slow = slow.next\n        slow = self.reverse(slow)\n        \n        while slow:\n            if slow.val != head.val:\n                return False\n            slow = slow.next\n            head = head.next\n        \n        return True\n        \n    def reverse(self, head):\n        prev = None\n        curr = head\n        \n        while curr:\n            nxt = curr.next\n            curr.next = prev\n            prev = curr\n            curr = nxt\n        \n        return prev"}], "valid-perfect-square": [{"task_id": "valid-perfect-square", "completion": "class Solution(object):\n    def isPerfectSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        l, r = 0, num\n        while l <= r:\n            m = (l + r) // 2\n            if m ** 2 == num:\n                return True\n            elif m ** 2 < num:\n                l = m + 1\n            else:\n                r = m - 1\n        return False"}], "counting-bits": [{"task_id": "counting-bits", "completion": "class Solution(object):\n    def countBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        ans = [0]\n        while len(ans) < n + 1:\n            ans += ans\n        return ans[0:n + 1]"}], "remove-linked-list-elements": [{"task_id": "remove-linked-list-elements", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        curr = dummy\n        \n        while curr.next:\n            if curr.next.val == val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        \n        return dummy.next"}], "scramble-string": [{"task_id": "scramble-string", "completion": "class Solution(object):\n    def isScramble(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        \n\n        # if the length of the string is 1, stop.\n        if len(s1) == 1:\n            return s1 == s2\n        \n        # if the length of the string is > 1, do the following:\n        # Split the string into two non-empty substrings at a random index, i.e., if the string is s, divide it to x and y where s = x + y.\n        # Randomly\u00a0decide to swap the two substrings or to keep them in the same order. i.e., after this step, s may become s = x + y or s = y + x.\n        # Apply step 1 recursively on each of the two substrings x and y.\n        # If the two strings are scrambled, return True.\n        # Otherwise, return False.\n        if len(s1) != len(s2):\n            return False\n        \n        # if the two strings are not scrambled, return False.\n        if s1 == s2:\n            return True\n        \n        # if the two strings are scrambled, return True.\n        return self.isScramble(s1[:len(s1)//2], s2[:len(s1)//2]) and self.isScramble(s1[len(s1)//2:], s2[len(s1)//2:]) or self.isScramble(s1[:len(s1)//2], s2[len(s1)//2:]) and self.isScramble(s1[len(s1)//2:], s2[:len(s1)//2])"}], "simplify-path": [{"task_id": "simplify-path", "completion": "class Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        \n\n        stack = []\n        path = path.split('/')\n\n        for p in path:\n            if p == '..':\n                if stack:\n                    stack.pop()\n            elif p and p != '.':\n                stack.append(p)\n\n        return '/' + '/'.join(stack)"}], "word-search-ii": [{"task_id": "word-search-ii", "completion": "class Solution(object):\n    def findWords(self, board, words):\n        \"\"\"\n        :type board: List[List[str]]\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def findWords(self, board, words):\n        \"\"\"\n        :type board: List[List[str]]\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\""}], "valid-anagram": [{"task_id": "valid-anagram", "completion": "class Solution(object):\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_count = [0] * 26\n        t_count = [0] * 26\n        \n        for i in range(len(s)):\n            s_count[ord(s[i]) - ord('a')] += 1\n            t_count[ord(t[i]) - ord('a')] += 1\n        \n        for i in range(26):\n            if s_count[i] != t_count[i]:\n                return False\n        \n        return True"}], "valid-sudoku": [{"task_id": "valid-sudoku", "completion": "class Solution(object):\n    def isValidSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        \n        rows = [set() for _ in range(9)]\n        cols = [set() for _ in range(9)]\n        boxes = [set() for _ in range(9)]\n        \n        for i in range(9):\n            for j in range(9):\n                if board[i][j] != '.':\n                    num = int(board[i][j])\n                    box_idx = (i // 3) * 3 + j // 3\n                    if num in rows[i] or num in cols[j] or num in boxes[box_idx]:\n                        return False\n                    rows[i].add(num)\n                    cols[j].add(num)\n                    boxes[box_idx].add(num)\n        \n        return True"}], "fizz-buzz": [{"task_id": "fizz-buzz", "completion": "class Solution(object):\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n\n        ans = []\n        for i in range(1, n + 1):\n            if i % 3 == 0 and i % 5 == 0:\n                ans.append(\"FizzBuzz\")\n            elif i % 3 == 0:\n                ans.append(\"Fizz\")\n            elif i % 5 == 0:\n                ans.append(\"Buzz\")\n            else:\n                ans.append(str(i))\n        \n        return ans"}], "reverse-words-in-a-string": [{"task_id": "reverse-words-in-a-string", "completion": "class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        return \" \".join(s.split()[::-1])"}], "excel-sheet-column-number": [{"task_id": "excel-sheet-column-number", "completion": "class Solution(object):\n    def titleToNumber(self, columnTitle):\n        \"\"\"\n        :type columnTitle: str\n        :rtype: int\n        \"\"\"\n        \n        ans = 0\n        for c in columnTitle:\n            ans = ans * 26 + (ord(c) - ord('A') + 1)\n        return ans"}], "candy": [{"task_id": "candy", "completion": "class Solution(object):\n    def candy(self, ratings):\n        \"\"\"\n        :type ratings: List[int]\n        :rtype: int\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def candy(self, ratings):\n        \"\"\"\n        :type ratings: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(ratings)\n        candies = [1] * n\n        \n        for i in range(1, n):\n            if ratings[i] > ratings[i - 1]:\n                candies[i] = candies[i - 1] + 1\n        \n        total = candies[-1]\n        \n        for i in range(n - 2, -1, -1):\n            if ratings[i] > ratings[i + 1]:\n                candies[i] = max(candies[i], candies[i + 1] + 1)\n            total += candies[i]\n        \n        return total"}], "same-tree": [{"task_id": "same-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val != q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"}], "reorder-list": [{"task_id": "reorder-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reorderList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: None Do not return anything, modify head in-place instead.\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        # find the middle of the list\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # reverse the second half of the list\n        prev = None\n        while slow:\n            next_node = slow.next\n            slow.next = prev\n            prev = slow\n            slow = next_node\n        \n        # merge the two halves\n        left, right = head, prev\n        while right.next:\n            left_next = left.next\n            right_next = right.next\n            left.next = right\n            right.next = left_next\n            left = left_next\n            right = right_next\n        \n        return head"}], "word-pattern": [{"task_id": "word-pattern", "completion": "class Solution(object):\n    def wordPattern(self, pattern, s):\n        \"\"\"\n        :type pattern: str\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        s = s.split()\n        if len(pattern) != len(s):\n            return False\n        \n        p2s = {}\n        s2p = {}\n        \n        for p, s in zip(pattern, s):\n            if p in p2s and p2s[p] != s:\n                return False\n            if s in s2p and s2p[s] != p:\n                return False\n            p2s[p] = s\n            s2p[s] = p\n        \n        return True"}], "permutations": [{"task_id": "permutations", "completion": "class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        ans = [nums]\n        n = len(nums)\n        for i in range(n-1):\n            ans += [a[:i] + [nums[n-1]] + a[i:n-1] + a[i+1:] for a in ans]\n        return ans"}], "search-a-2d-matrix": [{"task_id": "search-a-2d-matrix", "completion": "class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        \n        l = 0\n        r = m * n - 1\n        \n        while l <= r:\n            mid = (l + r) // 2\n            if matrix[mid // n][mid % n] == target:\n                return True\n            elif matrix[mid // n][mid % n] < target:\n                l = mid + 1\n            else:\n                r = mid - 1\n        \n        return False"}], "add-two-numbers": [{"task_id": "add-two-numbers", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        dummy = ListNode()\n        curr = dummy\n        carry = 0\n        \n        while l1 or l2 or carry:\n            if l1:\n                carry += l1.val\n                l1 = l1.next\n            if l2:\n                carry += l2.val\n                l2 = l2.next\n            \n            curr.next = ListNode(carry % 10)\n            carry //= 10\n            curr = curr.next\n        \n        return dummy.next"}], "number-complement": [{"task_id": "number-complement", "completion": "class Solution(object):\n    def findComplement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. 2**n - 1\n        # 2. num & (2**n - 1)\n        # 3. num ^ (2**n - 1)\n        # 4. num & (2**n - 1) - 1\n        # 5. num ^ (2**n - 1) - 1\n        # 6. num & (2**n - 1) - 1 - 1\n        # 7. num ^ (2**n - 1) - 1 - 1\n        # 8. num & (2**n - 1) - 1 - 1 - 1\n        # 9. num ^ (2**n - 1) - 1 - 1 - 1\n        # 10. num & (2**n - 1) - 1 - 1 - 1 - 1\n        # 11. num ^ (2**n - 1) - 1 - 1 - 1 - 1 - 1\n        # 12. num & (2**n - 1) - 1 - 1 - 1 - 1 - 1 - 1\n        # 13. num ^ (2**n - 1) - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        # 14. num & (2**n - 1) - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        # 15. num ^ (2**n - 1) - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        # 16. num & (2**n - 1) - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        # 17. num ^ (2**n - 1) - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        # 18. num & (2**n - 1) - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        # 19. num ^ (2**n - 1) - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        # 20. num & (2**n - 1) - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        # 21. num ^ (2**n - 1) - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        # 22. num & (2**n - 1) - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        # 23. num ^ (2**n - 1) - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        # 24. num & (2**n - 1) - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        # 25. num ^ (2**n - 1) - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        # 26. num & (2**n - 1) - 1 - 1 -"}], "arithmetic-slices-ii-subsequence": [{"task_id": "arithmetic-slices-ii-subsequence", "completion": "class Solution(object):\n    def numberOfArithmeticSlices(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 3:\n            return 0\n        \n        ans = 0\n        dp = 0\n        \n        for i in range(2, len(nums)):\n            if nums[i] - nums[i - 1] == nums[i - 1] - nums[i - 2]:\n                dp += 1\n                ans += dp\n            else:\n                dp = 0\n        \n        return ans"}], "text-justification": [{"task_id": "text-justification", "completion": "class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\""}], "binary-tree-postorder-traversal": [{"task_id": "binary-tree-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def postorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        stack, res = [root], []\n        \n        while stack:\n            node = stack.pop()\n            if node:\n                res.append(node.val)\n                stack.append(node.left)\n                stack.append(node.right)\n        \n        return res[::-1]"}], "container-with-most-water": [{"task_id": "container-with-most-water", "completion": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        l, r = 0, len(height) - 1\n        max_area = 0\n        \n        while l < r:\n            area = min(height[l], height[r]) * (r - l)\n            max_area = max(max_area, area)\n            \n            if height[l] < height[r]:\n                l += 1\n            else:\n                r -= 1\n        \n        return max_area"}], "concatenated-words": [{"task_id": "concatenated-words", "completion": "class Solution(object):\n    def findAllConcatenatedWordsInADict(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def findAllConcatenatedWordsInADict(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        words.sort(key=len)\n        d = {word: True for word in words}\n        ans = []\n        for word in words:\n            if not word:\n                continue\n            n = len(word)\n            for i in range(1, n):\n                if word[:i] in d and (word[i:] in d or word[i:] in d and word[:i] in d):\n                    ans.append(word)\n                    break\n            else:\n                d[word] = False\n        return ans"}], "base-7": [{"task_id": "base-7", "completion": "class Solution(object):\n    def convertToBase7(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        \n        sign = \"-\" if num < 0 else \"\"\n        num = abs(num)\n        \n        res = \"\"\n        \n        while num:\n            res = str(num % 7) + res\n            num //= 7\n        \n        return sign + res"}], "nim-game": [{"task_id": "nim-game", "completion": "class Solution(object):\n    def canWinNim(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        return n % 4 != 0"}], "n-queens-ii": [{"task_id": "n-queens-ii", "completion": "class Solution(object):\n    def totalNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. 1 queen\n        # 2. 2 queens\n        # 3. 3 queens\n        # 4. 4 queens\n        # 5. 5 queens\n        # 6. 6 queens\n        # 7. 7 queens\n        # 8. 8 queens\n        # 9. 9 queens\n        # 10. 10 queens\n        # 11. 11 queens\n        # 12. 12 queens\n        # 13. 13 queens\n        # 14. 14 queens\n        # 15. 15 queens\n        # 16. 16 queens\n        # 17. 17 queens\n        # 18. 18 queens\n        # 19. 19 queens\n        # 20. 20 queens\n        # 21. 21 queens\n        # 22. 22 queens\n        # 23. 23 queens\n        # 24. 24 queens\n        # 25. 25 queens\n        # 26. 26 queens\n        # 27. 27 queens\n        # 28. 28 queens\n        # 29. 29 queens\n        # 30. 30 queens\n        # 31. 31 queens\n        # 32. 32 queens\n        # 33. 33 queens\n        # 34. 34 queens\n        # 35. 35 queens\n        # 36. 36 queens\n        # 37. 37 queens\n        # 38. 38 queens\n        # 39. 39 queens\n        # 40. 40 queens\n        # 41. 41 queens\n        # 42. 42 queens\n        # 43. 43 queens\n        # 44. 44 queens\n        # 45. 45 queens\n        # 46. 46 queens\n        # 47. 47 queens\n        # 48. 48 queens\n        # 49. 49 queens\n        # 50. 50 queens\n        # 51. 51 queens\n        # 52. 52 queens\n        # 53. 53 queens\n        # 54. 54 queens\n        # 55. 55 queens\n        # 56. 56 queens\n        # 57. 57 queens\n        # 58. 58 queens\n        # 59. 59 queens\n        # 60. 60 queens\n        # 61. 61 queens\n        # 62. 62 queens\n        # 63. 63 queens\n        # 64. 64 queens\n        # 65. 65 queens\n        # 66. 66 queens\n        # 67. 67 queens\n        # 68. 68 queens\n        # 69. 69 queens\n        # 70. 70 queens\n        # 71. 71 queens\n        # 72. 72 queens\n        # 73. 73 queens\n        # 74. 74 queens\n        # 75. 75 queens\n        # 76. 76 queens\n        # 77. 77 queens\n        # 78. 78 queens\n        # 79. 79 queens\n        # 80. 80 queens\n        # 81. 81 queens\n        # 82. 82 queens\n        # 83. 83 queens\n        # 84. 84 queens\n        # 85. 85 queens\n        # 86. 86 queens\n        # 87. 87 queens"}], "n-queens": [{"task_id": "n-queens", "completion": "class Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        col = set()\n        pos_diag = set()\n        neg_diag = set()\n        res = []\n        board = [[\".\"] * n for _ in range(n)]\n        \n        def backtrack(r):\n            if r == n:\n                copy = [\"\".join(row) for row in board]\n                res.append(copy)\n                return\n            for c in range(n):\n                if c in col or r + c in pos_diag or r - c in neg_diag:\n                    continue\n                col.add(c)\n                pos_diag.add(r + c)\n                neg_diag.add(r - c)\n                board[r][c] = \"Q\"\n                backtrack(r + 1)\n                col.remove(c)\n                pos_diag.remove(r + c)\n                neg_diag.remove(r - c)\n                board[r][c] = \".\"\n        \n        backtrack(0)\n        return res"}], "word-search": [{"task_id": "word-search", "completion": "class Solution(object):\n    def exist(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if not word:\n            return False\n        \n        if not board:\n            return False\n        \n        m, n = len(board), len(board[0])\n        visited = set()\n        \n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == word[0]:\n                    visited.add((i, j))\n                    if self.dfs(board, word[1:], i, j, visited):\n                        return True\n                    visited.remove((i, j))\n        \n        return False\n        \n    def dfs(self, board, word, i, j, visited):\n        if not word:\n            return True\n        \n        m, n = len(board), len(board[0])\n        \n        directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n        \n        for d in directions:\n            x, y = i + d[0], j + d[1]\n            if x < 0 or x >= m or y < 0 or y >= n or (x, y) in visited:\n                continue\n            if board[x][y] == word[0]:\n                visited.add((x, y))\n                if self.dfs(board, word[1:], x, y, visited):\n                    return True\n                visited.remove((x, y))\n        \n        return False"}], "merge-sorted-array": [{"task_id": "merge-sorted-array", "completion": "class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        \n        # We can use the built-in function nums1.extend(nums2) to merge nums2 into nums1.\n        # However, this will overwrite the elements in nums1.\n        # We can use the built-in function nums1[m:] = nums2 to merge nums2 into nums1.\n        # However, this will overwrite the elements in nums1.\n        # We can use the built-in function nums1[:m] = nums1[:m] + nums2 to merge nums2 into nums1.\n        # However, this will overwrite the elements in nums1.\n        # We can use the built-in function nums1[:m] = nums1[:m] + nums2[n:] to merge nums2 into nums1.\n        # However, this will overwrite the elements in nums1.\n        # We can use the built-in function nums1[:m] = nums1[:m] + nums2[n:] to merge nums2 into nums1.\n        # However, this will overwrite the elements in nums1.\n        # We can use the built-in function nums1[:m] = nums1[:m] + nums2[n:] to merge nums2 into nums1.\n        # However, this will overwrite the elements in nums1.\n        # We can use the built-in function nums1[:m] = nums1[:m] + nums2[n:] to merge nums2 into nums1.\n        # However, this will overwrite the elements in nums1.\n        # We can use the built-in function nums1[:m] = nums1[:m] + nums2[n:] to merge nums2 into nums1.\n        # However, this will overwrite the elements in nums1.\n        # We can use the built-in function nums1[:m] = nums1[:m] + nums2[n:] to merge nums2 into nums1.\n        # However, this will overwrite the elements in nums1.\n        # We can use the built-in function nums1[:m] = nums1[:m] + nums2[n:] to merge nums2 into nums1.\n        # However, this will overwrite the elements in nums1.\n        # We can use the built-in function nums1[:m] = nums1[:m] + nums2[n:] to merge nums2 into nums1.\n        # However, this will overwrite the elements in nums1.\n        # We can use the built-in function nums1[:m] = nums1[:m] + nums2[n:] to merge nums2 into nums1.\n        # However, this will overwrite the elements in nums1.\n        # We can use the built-in function nums1[:m] = nums1[:m] + nums2[n:] to merge nums2 into nums1.\n        # However, this will overwrite the elements in nums1.\n        # We can use the built-in function nums1[:m] = nums1[:m] + nums2[n:] to merge nums2 into nums1.\n        # However, this will overwrite the elements in nums1.\n        # We can use the built-in function nums1[:m] = nums1[:m] + nums2[n:] to merge nums2 into nums1.\n        # However, this will overwrite the elements in nums1.\n        # We can use the built-in function nums1[:m] = nums1[:m] + nums2[n:] to merge nums2 into nums1.\n        # However, this will overwrite the elements in nums1.\n        # We can use the built-in function nums1[:m] = nums1[:m] + nums2[n:] to merge nums2 into nums1.\n        # However, this will overwrite the elements in nums1.\n        # We can use the built-in function nums1[:m] = nums1[:m] + nums2[n:] to merge nums2 into nums1.\n        # However, this will overwrite the elements in nums1.\n        # We can use the built-in function nums1[:m] = nums1[:"}], "third-maximum-number": [{"task_id": "third-maximum-number", "completion": "class Solution(object):\n    def thirdMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums = set(nums)\n        if len(nums) < 3:\n            return max(nums)\n        return min(nums)"}]}