{"spiral-matrix": [{"task_id": "spiral-matrix", "completion": "class Solution(object):\n    def spiralOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not matrix:\n            return []\n        \n        m, n = len(matrix), len(matrix[0])\n        res = []\n        left, right, top, bottom = 0, n-1, 0, m-1\n        while left <= right and top <= bottom:\n            for i in range(left, right+1):\n                res.append(matrix[top][i])\n            top += 1\n            if top > bottom:\n                break\n            for i in range(top, bottom+1):\n                res.append(matrix[i][right])\n            right -= 1\n            if left > right:\n                break\n            for i in range(right, left-1, -1):\n                res.append(matrix[bottom][i])\n            bottom -= 1\n            if top > bottom:\n                break\n            for i in range(bottom, top-1, -1):\n                res.append(matrix[i][left])\n            left += 1\n        return res"}], "summary-ranges": [{"task_id": "summary-ranges", "completion": "class Solution(object):\n    def summaryRanges(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        if not nums:\n            return []\n        \n        res = []\n        start = nums[0]\n        end = nums[0]\n        for i in range(1, len(nums)):\n            if nums[i] == nums[i - 1] + 1:\n                end = nums[i]\n            else:\n                if start == end:\n                    res.append(str(start))\n                else:\n                    res.append(str(start) + '->' + str(end))\n                start = nums[i]\n                end = nums[i]\n        if start == end:\n            res.append(str(start))\n        else:\n            res.append(str(start) + '->' + str(end))\n        return res"}], "distinct-subsequences": [{"task_id": "distinct-subsequences", "completion": "class Solution(object):\n    def numDistinct(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"\n        \n        if len(s) < len(t):\n            return 0\n        \n        dp = [0] * (len(t) + 1)\n        dp[0] = 1\n        \n        count = 0\n        for i in range(len(s)):\n            if s[i] == t[0]:\n                count += 1\n            dp[1] = count\n            for j in range(1, len(t)):\n                if s[i] == t[j]:\n                    dp[j + 1] += dp[j]\n        \n        return dp[-1]"}], "first-missing-positive": [{"task_id": "first-missing-positive", "completion": "class Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. mark all negative numbers and all numbers larger than n as 0\n        # 2. mark all numbers in the range [1, n] as 1\n        # 3. iterate through the array and mark the numbers as negative\n        # 4. iterate through the array again and return the first number\n        #    that is not negative\n        # 5. if all numbers are negative, return n + 1\n        \n        n = len(nums)\n        if n == 0:\n            return 1\n        \n        for i in range(n):\n            if nums[i] <= 0:\n                nums[i] = n + 1\n        \n        for i in range(n):\n            num = abs(nums[i])\n            if num <= n:\n                nums[num - 1] = -abs(nums[num - 1])\n        \n        for i in range(n):\n            if nums[i] > 0:\n                return i + 1\n        \n        return n + 1"}], "permutation-sequence": [{"task_id": "permutation-sequence", "completion": "class Solution(object):\n    def getPermutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. generate the list of numbers\n        nums = [str(i) for i in range(1, n + 1)]\n        \n        # 2. calculate the factorial of n\n        fact = 1\n        for i in range(1, n):\n            fact *= i\n        \n        # 3. calculate the kth permutation\n        k -= 1\n        res = ''\n        while n > 0:\n            # 3.1 calculate the index of the current digit\n            idx = k // fact\n            # 3.2 calculate the digit\n            res += nums[idx]\n            # 3.3 remove the digit from the list\n            nums.remove(nums[idx])\n            # 3.4 update k\n            k %= fact\n            # 3.5 update n\n            n -= 1\n            # 3.6 update the factorial\n            fact //= n\n        \n        return res"}], "two-sum-ii-input-array-is-sorted": [{"task_id": "two-sum-ii-input-array-is-sorted", "completion": "class Solution(object):\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. use hashmap to store the numbers and their indices\n        # 2. iterate the list, if the complement is in the hashmap, return the indices\n        # 3. if not, add the number to the hashmap\n        # 4. if the complement is not in the hashmap, add the number to the hashmap\n        # 5. if the complement is not in the hashmap, add the number to the hashmap\n        # 6. if the complement is not in the hashmap, add the number to the hashmap\n        # 7. if the complement is not in the hashmap, add the number to the hashmap\n        # 8. if the complement is not in the hashmap, add the number to the hashmap\n        # 9. if the complement is not in the hashmap, add the number to the hashmap\n        # 10. if the complement is not in the hashmap, add the number to the hashmap\n        # 11. if the complement is not in the hashmap, add the number to the hashmap\n        # 12. if the complement is not in the hashmap, add the number to the hashmap\n        # 13. if the complement is not in the hashmap, add the number to the hashmap\n        # 14. if the complement is not in the hashmap, add the number to the hashmap\n        # 15. if the complement is not in the hashmap, add the number to the hashmap\n        # 16. if the complement is not in the hashmap, add the number to the hashmap\n        # 17. if the complement is not in the hashmap, add the number to the hashmap\n        # 18. if the complement is not in the hashmap, add the number to the hashmap\n        # 19. if the complement is not in the hashmap, add the number to the hashmap\n        # 20. if the complement is not in the hashmap, add the number to the hashmap\n        # 21. if the complement is not in the hashmap, add the number to the hashmap\n        # 22. if the complement is not in the hashmap, add the number to the hashmap\n        # 23. if the complement is not in the hashmap, add the number to the hashmap\n        # 24. if the complement is not in the hashmap, add the number to the hashmap\n        # 25. if the complement is not in the hashmap, add the number to the hashmap\n        # 26. if the complement is not in the hashmap, add the number to the hashmap\n        # 27. if the complement is not in the hashmap, add the number to the hashmap\n        # 28. if the complement is not in the hashmap, add the number to the hashmap\n        # 29. if the complement is not in the hashmap, add the number to the hashmap\n        # 30. if the complement is not in the hashmap, add the number to the hashmap\n        # 31. if the complement is not in the hashmap, add the number to the hashmap\n        # 32. if the complement is not in the hashmap, add the number to the hashmap\n        # 33. if the complement is not in the hashmap, add the number to the hashmap\n        # 34. if the complement is not in the hashmap, add the number to the hashmap\n        # 35. if the complement is not in the hashmap, add the number to the hashmap\n        # 36. if the complement is not in the hashmap, add the number to the hashmap\n        # 37. if the complement is not in the hashmap, add the number to the hashmap\n        # 38. if the complement is not in the hashmap, add the number to the hashmap\n        # 39. if the complement is not in the hashmap, add the number to the hashmap\n        # 40. if the complement is not in the hashmap, add the number to the hashmap\n        # 41. if the complement is not in the hashmap, add the number to the hashmap\n        # 42. if the complement is not in the hashmap, add the number to the hashmap\n        # 43. if the complement is not in the hashmap, add the number to the hashmap\n        # 44. if the complement is not in the hashmap"}], "expression-add-operators": [{"task_id": "expression-add-operators", "completion": "class Solution(object):\n    def addOperators(self, num, target):\n        \"\"\"\n        :type num: str\n        :type target: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def dfs(num, target, idx, path, val, prev, res):\n            if idx == len(num):\n                if val == target:\n                    res.append(path)\n                return\n            cur = 0\n            for i in range(idx, len(num)):\n                if i > idx and num[idx] == '0':\n                    break\n                cur = cur * 10 + int(num[i])\n                if path:\n                    dfs(num, target, i + 1, path + '+' + num[idx], val + cur, cur, res)\n                    dfs(num, target, i + 1, path + '-' + num[idx], val - cur, -cur, res)\n                    dfs(num, target, i + 1, path + '*' + num[idx], val - prev + prev * cur, prev * cur, res)\n                else:\n                    dfs(num, target, i + 1, num[idx], cur, cur, res)\n                    if cur != 0:\n                        dfs(num, target, i + 1, num[idx] + '+' + num[idx + 1:], val - cur, -cur, res)\n                        dfs(num, target, i + 1, num[idx] + '-' + num[idx + 1:], val + cur, cur, res)\n                        dfs(num, target, i + 1, num[idx] + '*' + num[idx + 1:], val - prev + prev * cur, prev * cur, res)\n        if not num:\n            return []\n        res = []\n        dfs(num, target, 0, '', 0, 0, res)\n        return res"}], "sum-root-to-leaf-numbers": [{"task_id": "sum-root-to-leaf-numbers", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def dfs(root, curr_sum):\n            if not root:\n                return 0\n            if not root.left and not root.right:\n                return curr_sum * 10 + root.val\n            return dfs(root.left, curr_sum * 10 + root.val) + dfs(root.right, curr_sum * 10 + root.val)\n        \n        return dfs(root, 0)"}], "license-key-formatting": [{"task_id": "license-key-formatting", "completion": "class Solution(object):\n    def licenseKeyFormatting(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        s = s.upper()\n        s = s.replace('-', '')\n        n = len(s)\n        if n <= k:\n            return s\n        if n % k == 0:\n            return s[:k] + '-' + self.licenseKeyFormatting(s[k:], k)\n        return s[:n % k] + '-' + self.licenseKeyFormatting(s[n % k:], k)"}], "gas-station": [{"task_id": "gas-station", "completion": "class Solution(object):\n    def canCompleteCircuit(self, gas, cost):\n        \"\"\"\n        :type gas: List[int]\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if sum(gas) < sum(cost):\n            return -1\n        \n        start = 0\n        tank = 0\n        total = 0\n        \n        for i in range(len(gas)):\n            tank += gas[i] - cost[i]\n            if tank < 0:\n                start = i + 1\n                tank = 0\n            total += gas[i] - cost[i]\n        \n        return start if total >= 0 else -1"}], "burst-balloons": [{"task_id": "burst-balloons", "completion": "class Solution(object):\n    def maxCoins(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums = [1] + nums + [1]\n        n = len(nums)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n - 2, -1, -1):\n            for j in range(i + 2, n):\n                dp[i][j] = max(nums[i] * nums[k] * nums[j] + dp[i][k] + dp[k][j] for k in range(i + 1, j))\n        return dp[0][n - 1]"}], "plus-one": [{"task_id": "plus-one", "completion": "class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. convert to string\n        # 2. add 1\n        # 3. convert to list\n        # 4. return\n        \n        # 1. convert to string\n        s = str(int(''.join(map(str, digits))) + 1)\n        \n        # 2. convert to list\n        return [int(c) for c in s]"}], "regular-expression-matching": [{"task_id": "regular-expression-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        # dp[i][j] = dp[i-1][j-1] if s[i-1] == p[j-1] or p[j-1] == '.'\n        # dp[i][j] = dp[i][j-2] if p[j-1] == '*' and (s[i-1] == p[j-2] or p[j-2] == '.')\n        # dp[i][0] = False\n        # dp[0][j] = j > 0 and p[j-1] == '*' and dp[0][j-2]\n        # dp[0][0] = True\n        # dp[i][j] = dp[i-1][j] if p[j-1] != '*' else dp[i][j-1]\n        # dp[i][j] = dp[i][j-1] if p[j-1] == '*' and (dp[i-1][j] or (i > 0 and (dp[i-1][j-1] and (s[i-1] == p[j-2] or p[j-2] == '.')))\n        # dp[0][j] = j > 0 and p[j-1] == '*' and dp[0][j-1]\n        # dp[0][0] = True\n        # dp[i][j] = dp[i][j-1] if p[j-1] == '*' and (dp[i-1][j] or (i > 0 and (dp[i-1][j-1] and (s[i-1] == p[j-2] or p[j-2] == '.')))\n        # dp[0][j] = j > 0 and p[j-1] == '*' and dp[0][j-1]\n        # dp[0][0] = True\n        # dp[i][j] = dp[i][j-1] if p[j-1] == '*' and (dp[i-1][j] or (i > 0 and (dp[i-1][j-1] and (s[i-1] == p[j-2] or p[j-2] == '.')))\n        # dp[0][j] = j > 0 and p[j-1] == '*' and dp[0][j-1]\n        # dp[0][0] = True\n        # dp[i][j] = dp[i][j-1] if p[j-1] == '*' and (dp[i-1][j] or (i > 0 and (dp[i-1][j-1] and (s[i-1] == p[j-2] or p[j-2] == '.')))\n        # dp[0][j] = j > 0 and p[j-1] == '*' and dp[0][j-1]\n        # dp[0][0] = True\n        # dp[i][j] = dp[i][j-1] if p[j-1] == '*' and (dp[i-1][j] or (i > 0 and (dp[i-1][j-1] and (s[i-1] == p[j-2] or p[j-2] == '.')))\n        # dp[0][j] = j > 0 and p[j-1] == '*' and dp[0][j-1]\n        # dp[0][0] = True\n        # dp[i][j] = dp[i][j-1] if p[j-1] == '*' and (dp[i-1][j] or (i > 0 and (dp[i-1][j-1] and (s[i-1] == p[j-2] or p[j-2] == '.')))\n        # dp[0][j] = j > 0 and p[j-1] == '*' and dp[0][j-1]\n        # dp[0][0] = True\n        # dp[i][j] = dp[i][j-1] if p[j-1] == '*' and (dp[i"}], "create-maximum-number": [{"task_id": "create-maximum-number", "completion": "class Solution(object):\n    def maxNumber(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        m, n = len(nums1), len(nums2)\n        if m > n:\n            return self.maxNumber(nums2, nums1, k)\n        if n == 0:\n            return [nums1[i] for i in xrange(k)]\n        if k == 0:\n            return []\n        if k == m:\n            return nums1 if nums1 <= nums2 else nums2\n        if k == 1:\n            return [max(nums1, nums2)]\n        if k == 2:\n            return [max(nums1[0], nums2[0]), max(nums1[1], nums2[1])]\n        if k == 3:\n            return [max(nums1[0], nums2[0]), max(nums1[1], nums2[1]), max(nums1[2], nums2[2])]\n        # nums1 is the longer one\n        if n - m == 1:\n            nums1, nums2 = nums2, nums1\n            m, n = n, m\n        # nums1 is the longer one\n        if n - m == 2:\n            nums1, nums2 = nums2, nums1\n            m, n = n, m\n        # nums1 is the longer one\n        if n - m == 3:\n            nums1, nums2 = nums2, nums1\n            m, n = n, m\n        # nums1 is the longer one\n        if n - m == 4:\n            nums1, nums2 = nums2, nums1\n            m, n = n, m\n        # nums1 is the longer one\n        if n - m == 5:\n            nums1, nums2 = nums2, nums1\n            m, n = n, m\n        # nums1 is the longer one\n        if n - m == 6:\n            nums1, nums2 = nums2, nums1\n            m, n = n, m\n        # nums1 is the longer one\n        if n - m == 7:\n            nums1, nums2 = nums2, nums1\n            m, n = n, m\n        # nums1 is the longer one\n        if n - m == 8:\n            nums1, nums2 = nums2, nums1\n            m, n = n, m\n        # nums1 is the longer one\n        if n - m == 9:\n            nums1, nums2 = nums2, nums1\n            m, n = n, m\n        # nums1 is the longer one\n        if n - m == 10:\n            nums1, nums2 = nums2, nums1\n            m, n = n, m\n        # nums1 is the longer one\n        if n - m == 11:\n            nums1, nums2 = nums2, nums1\n            m, n = n, m\n        # nums1 is the longer one\n        if n - m == 12:\n            nums1, nums2 = nums2, nums1\n            m, n = n, m\n        # nums1 is the longer one\n        if n - m == 13:\n            nums1, nums2 = nums2, nums1\n            m, n = n, m\n        # nums1 is the longer one\n        if n - m == 14:\n            nums1, nums2 = nums2, nums1\n            m, n = n, m\n        # nums1 is the longer one\n        if n - m == 15:\n            nums1, nums2 = nums2, nums1\n            m, n = n, m\n        # nums1 is the longer one\n        if n - m == 16:\n            nums1, nums2 = nums2, nums1\n            m, n = n, m\n        # nums1 is the longer one\n        if n - m == 17:\n            nums1, nums2 = nums2, nums1\n            m, n = n, m\n        # nums1 is the longer one\n        if n - m == 18:\n            nums1, nums2 ="}], "perfect-number": [{"task_id": "perfect-number", "completion": "class Solution(object):\n    def checkPerfectNumber(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return False\n        \n        sum_ = 1\n        sqrt_num = int(math.sqrt(num))\n        for i in range(2, sqrt_num + 1):\n            if num % i == 0:\n                sum_ += i + num // i\n        \n        return sum_ == num"}], "fibonacci-number": [{"task_id": "fibonacci-number", "completion": "class Solution(object):\n    def fib(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n < 2:\n            return n\n        \n        a, b = 0, 1\n        for i in range(n - 1):\n            a, b = b, a + b\n        return b"}], "dungeon-game": [{"task_id": "dungeon-game", "completion": "class Solution(object):\n    def calculateMinimumHP(self, dungeon):\n        \"\"\"\n        :type dungeon: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(dungeon), len(dungeon[0])\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        dp[m][n - 1] = dp[m - 1][n] = max(1, 1 - dungeon[-1][-1])\n        for i in range(m - 1, -1, -1):\n            for j in range(n - 1, -1, -1):\n                dp[i][j] = max(min(dp[i + 1][j], dp[i][j + 1]) - dungeon[i][j], 1)\n        return dp[0][0]"}], "find-k-th-smallest-pair-distance": [{"task_id": "find-k-th-smallest-pair-distance", "completion": "class Solution(object):\n    def smallestDistancePair(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        n = len(nums)\n        left, right = nums[1] - nums[0], nums[-1] - nums[0]\n        while left < right:\n            mid = (left + right) // 2\n            count, left_cnt = 0, 0\n            for num in nums:\n                left_cnt += (mid > num - nums[0])\n                count += left_cnt\n            if count < k:\n                left = mid + 1\n            else:\n                right = mid\n        return left"}], "number-of-segments-in-a-string": [{"task_id": "number-of-segments-in-a-string", "completion": "class Solution(object):\n    def countSegments(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        return len(s.split())"}], "reverse-vowels-of-a-string": [{"task_id": "reverse-vowels-of-a-string", "completion": "class Solution(object):\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n        s = list(s)\n        l, r = 0, len(s) - 1\n        while l < r:\n            while l < r and s[l] not in vowels:\n                l += 1\n            while l < r and s[r] not in vowels:\n                r -= 1\n            s[l], s[r] = s[r], s[l]\n            l += 1\n            r -= 1\n        return ''.join(s)"}], "longest-consecutive-sequence": [{"task_id": "longest-consecutive-sequence", "completion": "class Solution(object):\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums_set = set(nums)\n        longest = 0\n        for num in nums_set:\n            if num - 1 not in nums_set:\n                curr_num = num\n                curr_len = 1\n                while curr_num + 1 in nums_set:\n                    curr_num += 1\n                    curr_len += 1\n                longest = max(longest, curr_len)\n        return longest"}], "missing-number": [{"task_id": "missing-number", "completion": "class Solution(object):\n    def missingNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## O(n) time, O(1) space\n        ## XOR\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10 ^ 11 ^ 12 ^ 13 ^ 14 ^ 15 ^ 16 ^ 17 ^ 18 ^ 19 ^ 20 = 0\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10 ^ 11 ^ 12 ^ 13 ^ 14 ^ 15 ^ 16 ^ 17 ^ 18 ^ 19 ^ 20 ^ 21 = 21\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10 ^ 11 ^ 12 ^ 13 ^ 14 ^ 15 ^ 16 ^ 17 ^ 18 ^ 19 ^ 20 ^ 21 ^ 22 = 22\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10 ^ 11 ^ 12 ^ 13 ^ 14 ^ 15 ^ 16 ^ 17 ^ 18 ^ 19 ^ 20 ^ 21 ^ 22 ^ 23 = 23\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10 ^ 11 ^ 12 ^ 13 ^ 14 ^ 15 ^ 16 ^ 17 ^ 18 ^ 19 ^ 20 ^ 21 ^ 22 ^ 23 ^ 24 = 24\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10 ^ 11 ^ 12 ^ 13 ^ 14 ^ 15 ^ 16 ^ 17 ^ 18 ^ 19 ^ 20 ^ 21 ^ 22 ^ 23 ^ 24 ^ 25 = 25\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10 ^ 11 ^ 12 ^ 13 ^ 14 ^ 15 ^ 16 ^ 17 ^ 18 ^ 19 ^ 20 ^ 21 ^ 22 ^ 23 ^ 24 ^ 25 ^ 26 = 26\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10 ^ 11 ^ 12 ^ 13 ^ 14 ^ 15 ^ 16 ^ 17 ^ 18 ^ 19 ^ 20 ^ 21 ^ 22 ^ 23 ^ 24 ^ 25 ^ 26 ^ 27 = 27\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10 ^ 11 ^ 12 ^ 13 ^ 14 ^ 15 ^ 16 ^ 17 ^ 18 ^ 19 ^ 20 ^ 21 ^ 22 ^ 23 ^ 24 ^ 25 ^ 26 ^ 27 ^ 28 = 28\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10 ^ 11 ^ 12 ^ 13 ^ 14 ^ 15 ^ 16 ^ 17 ^ 18 ^ 19 ^ 20 ^ 21 ^ 22 ^ 23 ^ 24 ^ 25 ^ 26 ^ 27 ^ 28 ^ 29 = 29\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^"}], "word-ladder": [{"task_id": "word-ladder", "completion": "class Solution(object):\n    def ladderLength(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\"\n        \n        wordList = set(wordList)\n        if endWord not in wordList:\n            return 0\n        \n        queue = collections.deque([(beginWord, 1)])\n        visited = {beginWord: 1}\n        \n        while queue:\n            word, length = queue.popleft()\n            for i in range(len(word)):\n                for c in string.ascii_lowercase:\n                    next_word = word[:i] + c + word[i+1:]\n                    if next_word == endWord:\n                        return length + 1\n                    if next_word in wordList:\n                        queue.append((next_word, length + 1))\n                        wordList.remove(next_word)\n            if not wordList:\n                return 0\n        \n        return 0"}], "add-binary": [{"task_id": "add-binary", "completion": "class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        \n        if len(a) < len(b):\n            a, b = b, a\n        a, b = list(a), list(b)\n        carry = 0\n        i = len(a) - 1\n        j = len(b) - 1\n        while j >= 0:\n            if i >= 0:\n                carry += int(a[i])\n                carry += int(b[j])\n                a[i] = str(carry % 2)\n                carry //= 2\n                i -= 1\n                j -= 1\n            else:\n                carry += int(b[j])\n                b[j] = str(carry % 2)\n                carry //= 2\n                j -= 1\n        if carry:\n            a = [str(carry)] + a\n        return ''.join(a)"}], "find-first-and-last-position-of-element-in-sorted-array": [{"task_id": "find-first-and-last-position-of-element-in-sorted-array", "completion": "class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if not nums:\n            return [-1, -1]\n        \n        left, right = 0, len(nums) - 1\n        while left < right and nums[left] != target:\n            mid = left + (right - left) // 2\n            if nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        if nums[left] != target:\n            return [-1, -1]\n        \n        left, right = 0, len(nums) - 1\n        while left < right and nums[right] != target:\n            mid = left + (right - left + 1) // 2\n            if nums[mid] > target:\n                right = mid - 1\n            else:\n                left = mid\n        \n        return [left, right]"}], "remove-duplicates-from-sorted-array": [{"task_id": "remove-duplicates-from-sorted-array", "completion": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 2:\n            return len(nums)\n        \n        slow = 0\n        fast = 1\n        \n        while fast < len(nums):\n            if nums[slow] != nums[fast]:\n                slow += 1\n                nums[slow] = nums[fast]\n            fast += 1\n        \n        return slow + 1"}], "jump-game-ii": [{"task_id": "jump-game-ii", "completion": "class Solution(object):\n    def jump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(nums)\n        if n <= 1:\n            return 0\n        \n        max_reach = nums[0]\n        step = 1\n        end = 0\n        \n        for i in range(1, n):\n            if i > max_reach:\n                max_reach = end\n                step += 1\n            end = max(end, nums[i] + i)\n        \n        return step"}], "best-time-to-buy-and-sell-stock-iv": [{"task_id": "best-time-to-buy-and-sell-stock-iv", "completion": "class Solution(object):\n    def maxProfit(self, k, prices):\n        \"\"\"\n        :type k: int\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if k >= len(prices) // 2:\n            return sum(max(prices[i+1] - prices[i], 0) for i in range(len(prices) - 1))\n        \n        buy = [float('-inf')] * (k + 1)\n        sell = [0] * (k + 1)\n        \n        for price in prices:\n            for i in range(1, k + 1):\n                buy[i] = max(buy[i], sell[i - 1] - price)\n                sell[i] = max(sell[i], buy[i] + price)\n        \n        return sell[-1]"}], "convert-a-number-to-hexadecimal": [{"task_id": "convert-a-number-to-hexadecimal", "completion": "class Solution(object):\n    def toHex(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return '0'\n        \n        if num < 0:\n            num += 2 ** 32\n        \n        hex_dict = {10: 'a', 11: 'b', 12: 'c', 13: 'd', 14: 'e', 15: 'f'}\n        hex_list = []\n        while num:\n            hex_list.append(num % 16)\n            num //= 16\n        \n        hex_list = hex_list[::-1]\n        hex_str = ''\n        for i in hex_list:\n            if i < 10:\n                hex_str += str(i)\n            else:\n                hex_str += hex_dict[i]\n        \n        return hex_str"}], "first-unique-character-in-a-string": [{"task_id": "first-unique-character-in-a-string", "completion": "class Solution(object):\n    def firstUniqChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. use a hashmap to store the frequency of each character\n        # 2. use a queue to store the index of the first character with frequency 1\n        # 3. iterate the string, if the character is already in the queue, remove it from the queue\n        # 4. if the character is not in the queue, add it to the queue\n        # 5. return the first element in the queue if it exists, otherwise return -1\n        \n        # 1.\n        freq = {}\n        # 2.\n        q = collections.deque()\n        # 3.\n        for i, c in enumerate(s):\n            if c not in freq:\n                freq[c] = [i, 1]\n                q.append(i)\n            else:\n                freq[c][1] += 1\n                if freq[c][1] == 2:\n                    q.remove(freq[c][0])\n        # 4.\n        return q[0] if q else -1"}], "contains-duplicate-iii": [{"task_id": "contains-duplicate-iii", "completion": "class Solution(object):\n    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff):\n        \"\"\"\n        :type nums: List[int]\n        :type indexDiff: int\n        :type valueDiff: int\n        :rtype: bool\n        \"\"\"\n        \n        if len(nums) < 2 or indexDiff < 0 or valueDiff < 0:\n            return False\n        \n        # bucket\n        buckets = {}\n        w = valueDiff + 1\n        # bucket_id = nums[i] // w\n        # if nums[i] < 0:\n        #     bucket_id -= 1\n        #     if bucket_id in buckets:\n        #         return True\n        #     else:\n        #         buckets[bucket_id] = nums[i]\n        # else:\n        #     if bucket_id in buckets:\n        #         return True\n        #     else:\n        #         buckets[bucket_id] = nums[i]\n        \n        # if len(buckets) > indexDiff + 1:\n        #     return True\n        \n        # for i in range(len(nums)):\n        #     bucket_id = nums[i] // w\n        #     if nums[i] < 0:\n        #         bucket_id -= 1\n        #     if bucket_id in buckets:\n        #         return True\n        #     if bucket_id + 1 in buckets and abs(buckets[bucket_id + 1] - nums[i]) <= valueDiff:\n        #         return True\n        #     if bucket_id - 1 in buckets and abs(buckets[bucket_id - 1] - nums[i]) <= valueDiff:\n        #         return True\n        #     buckets[bucket_id] = nums[i]\n        # return False\n        \n        # bucket\n        buckets = {}\n        w = valueDiff + 1\n        bucket_id = nums[0] // w\n        if nums[0] < 0:\n            bucket_id -= 1\n        buckets[bucket_id] = nums[0]\n        \n        for i in range(1, len(nums)):\n            bucket_id = nums[i] // w\n            if nums[i] < 0:\n                bucket_id -= 1\n            if bucket_id in buckets:\n                return True\n            if bucket_id + 1 in buckets and abs(buckets[bucket_id + 1] - nums[i]) <= valueDiff:\n                return True\n            if bucket_id - 1 in buckets and abs(buckets[bucket_id - 1] - nums[i]) <= valueDiff:\n                return True\n            buckets[bucket_id] = nums[i]\n        return False"}], "sort-colors": [{"task_id": "sort-colors", "completion": "class Solution(object):\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2"}], "max-consecutive-ones": [{"task_id": "max-consecutive-ones", "completion": "class Solution(object):\n    def findMaxConsecutiveOnes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_count = 0\n        curr_count = 0\n        for num in nums:\n            if num == 1:\n                curr_count += 1\n            else:\n                max_count = max(max_count, curr_count)\n                curr_count = 0\n        return max(max_count, curr_count)"}], "count-complete-tree-nodes": [{"task_id": "count-complete-tree-nodes", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def countNodes(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        left = root\n        right = root\n        level = 0\n        while left:\n            left = left.left\n            right = right.right\n            level += 1\n        \n        if not left and not right:\n            return 1\n        \n        left = root\n        right = root\n        level -= 1\n        while left:\n            left = left.left\n            right = right.right\n            if not left:\n                break\n            level -= 1\n        \n        left = 1\n        right = 1 << level\n        while left < right:\n            mid = (left + right) // 2\n            if self.exists(root, mid):\n                left = mid + 1\n            else:\n                right = mid\n        \n        return left + (right - 1) * 2\n    \n    def exists(self, root, k):\n        left = root\n        right = root\n        level = 0\n        while left:\n            if k & 1:\n                left = left.right\n            else:\n                right = right.left\n            k >>= 1\n            level += 1\n        \n        return left or right"}], "add-strings": [{"task_id": "add-strings", "completion": "class Solution(object):\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        if len(num1) < len(num2):\n            num1, num2 = num2, num1\n        \n        num1, num2 = num1[::-1], num2[::-1]\n        \n        carry = 0\n        res = []\n        for i in range(len(num1)):\n            if i < len(num2):\n                carry += int(num1[i]) + int(num2[i])\n            else:\n                carry += int(num1[i])\n            res.append(str(carry % 10))\n            carry //= 10\n        \n        if carry:\n            res.append(str(carry))\n        \n        return ''.join(res[::-1])"}], "basic-calculator": [{"task_id": "basic-calculator", "completion": "class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u5c06\u5b57\u7b26\u4e32\u4e2d\u7684\u7a7a\u683c\u66ff\u6362\u6210\u7a7a\u683c\n        # 2. \u5c06\u5b57\u7b26\u4e32\u4e2d\u7684\u6b63\u8d1f\u53f7\u66ff\u6362\u6210\u6b63\u8d1f\u53f7\n        # 3. \u5c06\u5b57\u7b26\u4e32\u4e2d\u7684\u62ec\u53f7\u66ff\u6362\u6210\u6570\u5b57\n        # 4. \u5c06\u5b57\u7b26\u4e32\u4e2d\u7684\u52a0\u51cf\u53f7\u66ff\u6362\u6210\u52a0\u51cf\u53f7\n        # 5. \u5c06\u5b57\u7b26\u4e32\u4e2d\u7684\u52a0\u51cf\u53f7\u66ff\u6362\u6210\u52a0\u51cf\u53f7\n        # 6. \u5c06\u5b57\u7b26\u4e32\u4e2d\u7684\u52a0\u51cf\u53f7\u66ff\u6362\u6210\u52a0\u51cf\u53f7\n        # 7. \u5c06\u5b57\u7b26\u4e32\u4e2d\u7684\u52a0\u51cf\u53f7\u66ff\u6362\u6210\u52a0\u51cf\u53f7\n        # 8. \u5c06\u5b57\u7b26\u4e32\u4e2d\u7684\u52a0\u51cf\u53f7\u66ff\u6362\u6210\u52a0\u51cf\u53f7\n        # 9. \u5c06\u5b57\u7b26\u4e32\u4e2d\u7684\u52a0\u51cf\u53f7\u66ff\u6362\u6210\u52a0\u51cf\u53f7\n        # 10. \u5c06\u5b57\u7b26\u4e32\u4e2d\u7684\u52a0\u51cf\u53f7\u66ff\u6362\u6210\u52a0\u51cf\u53f7\n        # 11. \u5c06\u5b57\u7b26\u4e32\u4e2d\u7684\u52a0\u51cf\u53f7\u66ff\u6362\u6210\u52a0\u51cf\u53f7\n        # 12. \u5c06\u5b57\u7b26\u4e32\u4e2d\u7684\u52a0\u51cf\u53f7\u66ff\u6362\u6210\u52a0\u51cf\u53f7\n        # 13. \u5c06\u5b57\u7b26\u4e32\u4e2d\u7684\u52a0\u51cf\u53f7\u66ff\u6362\u6210\u52a0\u51cf\u53f7\n        # 14. \u5c06\u5b57\u7b26\u4e32\u4e2d\u7684\u52a0\u51cf\u53f7\u66ff\u6362\u6210\u52a0\u51cf\u53f7\n        # 15. \u5c06\u5b57\u7b26\u4e32\u4e2d\u7684\u52a0\u51cf\u53f7\u66ff\u6362\u6210\u52a0\u51cf\u53f7\n        # 16. \u5c06\u5b57\u7b26\u4e32\u4e2d\u7684\u52a0\u51cf\u53f7\u66ff\u6362\u6210\u52a0\u51cf\u53f7\n        # 17. \u5c06\u5b57\u7b26\u4e32\u4e2d\u7684\u52a0\u51cf\u53f7\u66ff\u6362\u6210\u52a0\u51cf\u53f7\n        # 18. \u5c06\u5b57\u7b26\u4e32\u4e2d\u7684\u52a0\u51cf\u53f7\u66ff\u6362\u6210\u52a0\u51cf\u53f7\n        # 19. \u5c06\u5b57\u7b26\u4e32\u4e2d\u7684\u52a0\u51cf\u53f7\u66ff\u6362\u6210\u52a0\u51cf\u53f7\n        # 20. \u5c06\u5b57\u7b26\u4e32\u4e2d\u7684\u52a0\u51cf\u53f7\u66ff\u6362\u6210\u52a0\u51cf\u53f7\n        # 21. \u5c06\u5b57\u7b26\u4e32\u4e2d\u7684\u52a0\u51cf\u53f7\u66ff\u6362\u6210\u52a0\u51cf\u53f7\n        # 22. \u5c06\u5b57\u7b26\u4e32\u4e2d\u7684\u52a0\u51cf\u53f7\u66ff\u6362\u6210\u52a0\u51cf\u53f7\n        # 23. \u5c06\u5b57\u7b26\u4e32\u4e2d\u7684\u52a0\u51cf\u53f7\u66ff\u6362\u6210\u52a0\u51cf\u53f7\n        # 24. \u5c06\u5b57\u7b26\u4e32\u4e2d\u7684\u52a0\u51cf\u53f7\u66ff\u6362\u6210\u52a0\u51cf\u53f7\n        # 25. \u5c06\u5b57\u7b26\u4e32\u4e2d\u7684\u52a0\u51cf\u53f7\u66ff\u6362\u6210\u52a0\u51cf\u53f7\n        # 26. \u5c06\u5b57\u7b26\u4e32\u4e2d\u7684\u52a0\u51cf\u53f7\u66ff\u6362\u6210\u52a0\u51cf\u53f7\n        # 27. \u5c06\u5b57\u7b26\u4e32\u4e2d\u7684\u52a0\u51cf\u53f7\u66ff\u6362\u6210\u52a0\u51cf\u53f7\n        # 28. \u5c06\u5b57\u7b26\u4e32\u4e2d\u7684\u52a0\u51cf\u53f7\u66ff\u6362\u6210\u52a0\u51cf\u53f7\n        # 29. \u5c06\u5b57\u7b26\u4e32\u4e2d\u7684\u52a0\u51cf\u53f7\u66ff\u6362\u6210\u52a0\u51cf\u53f7\n        # 30. \u5c06\u5b57\u7b26\u4e32\u4e2d\u7684\u52a0\u51cf\u53f7\u66ff\u6362\u6210\u52a0\u51cf\u53f7\n        # 31. \u5c06\u5b57\u7b26\u4e32\u4e2d\u7684\u52a0\u51cf\u53f7\u66ff\u6362\u6210\u52a0\u51cf\u53f7\n        # 32. \u5c06\u5b57\u7b26\u4e32\u4e2d\u7684\u52a0\u51cf\u53f7\u66ff\u6362\u6210\u52a0\u51cf\u53f7\n        # 33. \u5c06\u5b57\u7b26\u4e32\u4e2d\u7684\u52a0\u51cf\u53f7\u66ff\u6362\u6210\u52a0\u51cf\u53f7\n        # 34. \u5c06\u5b57\u7b26\u4e32\u4e2d\u7684\u52a0\u51cf\u53f7\u66ff\u6362\u6210\u52a0\u51cf\u53f7\n        # 35. \u5c06\u5b57\u7b26\u4e32\u4e2d\u7684\u52a0\u51cf\u53f7\u66ff\u6362\u6210\u52a0\u51cf\u53f7\n        # 36. \u5c06\u5b57\u7b26\u4e32\u4e2d\u7684\u52a0\u51cf\u53f7\u66ff\u6362\u6210\u52a0\u51cf\u53f7\n        # 37. \u5c06\u5b57\u7b26\u4e32\u4e2d\u7684\u52a0\u51cf\u53f7\u66ff\u6362\u6210\u52a0\u51cf\u53f7\n        # 38. \u5c06\u5b57\u7b26\u4e32\u4e2d\u7684\u52a0\u51cf\u53f7\u66ff\u6362\u6210\u52a0\u51cf\u53f7\n        # 39. \u5c06\u5b57\u7b26\u4e32\u4e2d\u7684\u52a0\u51cf\u53f7\u66ff\u6362\u6210\u52a0\u51cf\u53f7\n        # 40. \u5c06\u5b57\u7b26\u4e32\u4e2d\u7684\u52a0\u51cf\u53f7\u66ff\u6362\u6210\u52a0\u51cf\u53f7\n        # 41. \u5c06\u5b57\u7b26\u4e32\u4e2d\u7684\u52a0\u51cf\u53f7\u66ff\u6362\u6210\u52a0\u51cf\u53f7\n        # 42. \u5c06\u5b57\u7b26\u4e32\u4e2d\u7684\u52a0\u51cf\u53f7\u66ff\u6362\u6210\u52a0\u51cf\u53f7\n        # 43. \u5c06\u5b57\u7b26\u4e32\u4e2d\u7684\u52a0\u51cf\u53f7\u66ff\u6362\u6210\u52a0\u51cf\u53f7\n        # 44. \u5c06\u5b57\u7b26\u4e32\u4e2d\u7684\u52a0\u51cf\u53f7\u66ff\u6362\u6210\u52a0\u51cf\u53f7\n        # 45. \u5c06\u5b57\u7b26\u4e32\u4e2d\u7684\u52a0\u51cf\u53f7\u66ff\u6362\u6210\u52a0\u51cf\u53f7\n        # 46. \u5c06\u5b57\u7b26\u4e32\u4e2d\u7684\u52a0\u51cf\u53f7\u66ff\u6362\u6210\u52a0\u51cf\u53f7\n        # 47. \u5c06\u5b57\u7b26\u4e32\u4e2d\u7684\u52a0\u51cf\u53f7\u66ff\u6362\u6210\u52a0\u51cf\u53f7\n        # 4"}], "ipo": [{"task_id": "ipo", "completion": "class Solution(object):\n    def findMaximizedCapital(self, k, w, profits, capital):\n        \"\"\"\n        :type k: int\n        :type w: int\n        :type profits: List[int]\n        :type capital: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # sort by capital\n        # greedy\n        # heap\n        # greedy\n        # heap\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy\n        # greedy"}], "valid-parentheses": [{"task_id": "valid-parentheses", "completion": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        stack = []\n        d = {')':'(', ']':'[', '}':'{'}\n        for c in s:\n            if c not in d:\n                stack.append(c)\n            elif not stack or d[c] != stack.pop():\n                return False\n        return not stack"}], "next-permutation": [{"task_id": "next-permutation", "completion": "class Solution(object):\n    def nextPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # find the first number that is smaller than the next number\n        # find the first number that is larger than the next number\n        # swap the two numbers\n        # reverse the numbers after the point\n        \n        # find the first number that is smaller than the next number\n        # find the first number that is larger than the next number\n        # swap the two numbers\n        # reverse the numbers after the point\n        \n        # find the first number that is smaller than the next number\n        # find the first number that is larger than the next number\n        # swap the two numbers\n        # reverse the numbers after the point\n        \n        # find the first number that is smaller than the next number\n        # find the first number that is larger than the next number\n        # swap the two numbers\n        # reverse the numbers after the point\n        \n        # find the first number that is smaller than the next number\n        # find the first number that is larger than the next number\n        # swap the two numbers\n        # reverse the numbers after the point\n        \n        # find the first number that is smaller than the next number\n        # find the first number that is larger than the next number\n        # swap the two numbers\n        # reverse the numbers after the point\n        \n        # find the first number that is smaller than the next number\n        # find the first number that is larger than the next number\n        # swap the two numbers\n        # reverse the numbers after the point\n        \n        # find the first number that is smaller than the next number\n        # find the first number that is larger than the next number\n        # swap the two numbers\n        # reverse the numbers after the point\n        \n        # find the first number that is smaller than the next number\n        # find the first number that is larger than the next number\n        # swap the two numbers\n        # reverse the numbers after the point\n        \n        # find the first number that is smaller than the next number\n        # find the first number that is larger than the next number\n        # swap the two numbers\n        # reverse the numbers after the point\n        \n        # find the first number that is smaller than the next number\n        # find the first number that is larger than the next number\n        # swap the two numbers\n        # reverse the numbers after the point\n        \n        # find the first number that is smaller than the next number\n        # find the first number that is larger than the next number\n        # swap the two numbers\n        # reverse the numbers after the point\n        \n        # find the first number that is smaller than the next number\n        # find the first number that is larger than the next number\n        # swap the two numbers\n        # reverse the numbers after the point\n        \n        # find the first number that is smaller than the next number\n        # find the first number that is larger than the next number\n        # swap the two numbers\n        # reverse the numbers after the point\n        \n        # find the first number that is smaller than the next number\n        # find the first number that is larger than the next number\n        # swap the two numbers\n        # reverse the numbers after the point\n        \n        # find the first number that is smaller than the next number\n        # find the first number that is larger than the next number\n        # swap the two numbers\n        # reverse the numbers after the point\n        \n        # find the first number that is smaller than the next number\n        # find the first number that is larger than the next number\n        # swap the two numbers\n        # reverse the numbers after the point\n        \n        # find the first number that is smaller than the next number\n        # find the first number that is larger than the next number\n        # swap the two numbers\n        # reverse the numbers after the point\n        \n        # find the first number that is smaller than the next number\n        # find the first number that is larger than the next number\n        # swap the two numbers\n        # reverse the numbers after the point\n        \n        # find the first number that is smaller than the next number\n        # find the first number that is larger than the next number\n        # swap the two numbers\n        # reverse the numbers after the point\n        \n        # find the first number that is smaller than the next number\n        # find the first number that is larger than the next number\n        # swap the two numbers\n        # reverse the numbers after the point\n        \n        # find the first number that is smaller than the next number\n        # find the first number that is larger than the next number\n        # swap the two numbers\n        # reverse the numbers after the point\n        \n        # find the first number that is smaller than the next"}], "contains-duplicate-ii": [{"task_id": "contains-duplicate-ii", "completion": "class Solution(object):\n    def containsNearbyDuplicate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        \n        if len(nums) <= 1:\n            return False\n        \n        nums_dict = {}\n        \n        for i, num in enumerate(nums):\n            if num in nums_dict and i - nums_dict[num] <= k:\n                return True\n            nums_dict[num] = i\n        \n        return False"}], "maximum-gap": [{"task_id": "maximum-gap", "completion": "class Solution(object):\n    def maximumGap(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 2:\n            return 0\n        \n        min_val = min(nums)\n        max_val = max(nums)\n        \n        if min_val == max_val:\n            return 0\n        \n        bucket_size = max(1, (max_val - min_val) // (len(nums) - 1))\n        bucket_count = (max_val - min_val) // bucket_size + 1\n        \n        buckets = [None] * bucket_count\n        has_min = False\n        has_max = False\n        \n        for num in nums:\n            if num == min_val:\n                has_min = True\n            elif num == max_val:\n                has_max = True\n            else:\n                bucket_id = (num - min_val) // bucket_size\n                if buckets[bucket_id] is None:\n                    buckets[bucket_id] = num\n                else:\n                    buckets[bucket_id] = min(buckets[bucket_id], num)\n        \n        prev = None\n        max_gap = 0\n        \n        for bucket in buckets:\n            if bucket is None:\n                continue\n            if not has_min:\n                has_min = True\n                prev = bucket\n            elif not has_max:\n                has_max = True\n            else:\n                max_gap = max(max_gap, bucket - prev)\n                prev = bucket\n        \n        if has_max:\n            max_gap = max(max_gap, max_val - prev)\n        \n        return max_gap"}], "binary-tree-level-order-traversal": [{"task_id": "binary-tree-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        q = collections.deque([root])\n        res = []\n        \n        while q:\n            level = []\n            for _ in range(len(q)):\n                node = q.popleft()\n                level.append(node.val)\n                if node.left:\n                    q.append(node.left)\n                if node.right:\n                    q.append(node.right)\n            res.append(level)\n        \n        return res"}], "couples-holding-hands": [{"task_id": "couples-holding-hands", "completion": "class Solution(object):\n    def minSwapsCouples(self, row):\n        \"\"\"\n        :type row: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(row)\n        if n % 2 == 1:\n            return -1\n        \n        # 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15\n        # 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28\n        # 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15\n        # 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28\n        # 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15\n        # 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15\n        # 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15\n        # 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15\n        # 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15\n        # 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15\n        # 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15\n        # 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15\n        # 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15\n        # 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15\n        # 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15\n        # 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15\n        # 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15\n        # 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,"}], "interleaving-string": [{"task_id": "interleaving-string", "completion": "class Solution(object):\n    def isInterleave(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) + len(s2) != len(s3):\n            return False\n        \n        if not s1:\n            return s2 == s3\n        \n        if not s2:\n            return s1 == s3\n        \n        dp = [[False] * (len(s2) + 1) for _ in range(len(s1) + 1)]\n        dp[0][0] = True\n        \n        for i in range(1, len(s1) + 1):\n            dp[i][0] = dp[i - 1][0] and s1[i - 1] == s3[i - 1]\n        \n        for j in range(1, len(s2) + 1):\n            dp[0][j] = dp[0][j - 1] and s2[j - 1] == s3[j - 1]\n        \n        for i in range(1, len(s1) + 1):\n            for j in range(1, len(s2) + 1):\n                dp[i][j] = (dp[i - 1][j] and s1[i - 1] == s3[i + j - 1]) or (dp[i][j - 1] and s2[j - 1] == s3[i + j - 1])\n        \n        return dp[-1][-1]"}], "assign-cookies": [{"task_id": "assign-cookies", "completion": "class Solution(object):\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        \n        g.sort()\n        s.sort()\n        gi, si = 0, 0\n        while gi < len(g) and si < len(s):\n            if g[gi] <= s[si]:\n                gi += 1\n            si += 1\n        return gi"}], "keyboard-row": [{"task_id": "keyboard-row", "completion": "class Solution(object):\n    def findWords(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. get the first row\n        first_row = set('qwertyuiop')\n        # 2. get the second row\n        second_row = set('asdfghjkl')\n        # 3. get the third row\n        third_row = set('zxcvbnm')\n        \n        # 4. get the first row\n        first_row = set(first_row)\n        # 5. get the second row\n        second_row = set(second_row)\n        # 6. get the third row\n        third_row = set(third_row)\n        \n        # 7. get the first row\n        first_row = set(first_row)\n        # 8. get the second row\n        second_row = set(second_row)\n        # 9. get the third row\n        third_row = set(third_row)\n        \n        # 10. get the first row\n        first_row = set(first_row)\n        # 11. get the second row\n        second_row = set(second_row)\n        # 12. get the third row\n        third_row = set(third_row)\n        \n        # 13. get the first row\n        first_row = set(first_row)\n        # 14. get the second row\n        second_row = set(second_row)\n        # 15. get the third row\n        third_row = set(third_row)\n        \n        # 16. get the first row\n        first_row = set(first_row)\n        # 17. get the second row\n        second_row = set(second_row)\n        # 18. get the third row\n        third_row = set(third_row)\n        \n        # 19. get the first row\n        first_row = set(first_row)\n        # 20. get the second row\n        second_row = set(second_row)\n        # 21. get the third row\n        third_row = set(third_row)\n        \n        # 22. get the first row\n        first_row = set(first_row)\n        # 23. get the second row\n        second_row = set(second_row)\n        # 24. get the third row\n        third_row = set(third_row)\n        \n        # 25. get the first row\n        first_row = set(first_row)\n        # 26. get the second row\n        second_row = set(second_row)\n        # 27. get the third row\n        third_row = set(third_row)\n        \n        # 28. get the first row\n        first_row = set(first_row)\n        # 29. get the second row\n        second_row = set(second_row)\n        # 30. get the third row\n        third_row = set(third_row)\n        \n        # 31. get the first row\n        first_row = set(first_row)\n        # 32. get the second row\n        second_row = set(second_row)\n        # 33. get the third row\n        third_row = set(third_row)\n        \n        # 34. get the first row\n        first_row = set(first_row)\n        # 35. get the second row\n        second_row = set(second_row)\n        # 36. get the third row\n        third_row = set(third_row)\n        \n        # 37. get the first row\n        first_row = set(first_row)\n        # 38. get the second row\n        second_row = set(second_row)\n        # 39. get the third row\n        third_row = set(third_row)\n        \n        # 40. get the first row\n        first_row = set(first_row)\n        # 41. get the second row\n        second_row = set(second_row)\n        # 42. get the third row\n        third_row = set(third_row)\n        \n        # 43. get the first row\n        first_row = set(first_row)\n        # 44. get the second row"}], "reverse-linked-list-ii": [{"task_id": "reverse-linked-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseBetween(self, head, left, right):\n        \"\"\"\n        :type head: ListNode\n        :type left: int\n        :type right: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next or left == right:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        curr = head\n        count = 1\n        \n        while curr and count < left:\n            prev = curr\n            curr = curr.next\n            count += 1\n        \n        prev_left = prev\n        curr_left = curr\n        prev_right = curr\n        curr_right = curr.next\n        count += 1\n        \n        while curr and count <= right:\n            next_node = curr.next\n            curr.next = prev_right\n            prev_right = curr\n            curr = next_node\n            count += 1\n        \n        prev_left.next = prev_right\n        curr_left.next = curr_right\n        \n        return dummy.next"}], "shortest-palindrome": [{"task_id": "shortest-palindrome", "completion": "class Solution(object):\n    def shortestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. find the longest palindrome substring\n        # 2. reverse the string\n        # 3. add the reversed string to the front of the original string\n        # 4. if the original string ends with the reversed string, return the reversed string\n        # 5. otherwise, return the reversed string + \"a\" + reversed string\n        \n        # 1. find the longest palindrome substring\n        # 2. reverse the string\n        # 3. add the reversed string to the front of the original string\n        # 4. if the original string ends with the reversed string, return the reversed string\n        # 5. otherwise, return the reversed string + \"a\" + reversed string\n        \n        # 1. find the longest palindrome substring\n        # 2. reverse the string\n        # 3. add the reversed string to the front of the original string\n        # 4. if the original string ends with the reversed string, return the reversed string\n        # 5. otherwise, return the reversed string + \"a\" + reversed string\n        \n        # 1. find the longest palindrome substring\n        # 2. reverse the string\n        # 3. add the reversed string to the front of the original string\n        # 4. if the original string ends with the reversed string, return the reversed string\n        # 5. otherwise, return the reversed string + \"a\" + reversed string\n        \n        # 1. find the longest palindrome substring\n        # 2. reverse the string\n        # 3. add the reversed string to the front of the original string\n        # 4. if the original string ends with the reversed string, return the reversed string\n        # 5. otherwise, return the reversed string + \"a\" + reversed string\n        \n        # 1. find the longest palindrome substring\n        # 2. reverse the string\n        # 3. add the reversed string to the front of the original string\n        # 4. if the original string ends with the reversed string, return the reversed string\n        # 5. otherwise, return the reversed string + \"a\" + reversed string\n        \n        # 1. find the longest palindrome substring\n        # 2. reverse the string\n        # 3. add the reversed string to the front of the original string\n        # 4. if the original string ends with the reversed string, return the reversed string\n        # 5. otherwise, return the reversed string + \"a\" + reversed string\n        \n        # 1. find the longest palindrome substring\n        # 2. reverse the string\n        # 3. add the reversed string to the front of the original string\n        # 4. if the original string ends with the reversed string, return the reversed string\n        # 5. otherwise, return the reversed string + \"a\" + reversed string\n        \n        # 1. find the longest palindrome substring\n        # 2. reverse the string\n        # 3. add the reversed string to the front of the original string\n        # 4. if the original string ends with the reversed string, return the reversed string\n        # 5. otherwise, return the reversed string + \"a\" + reversed string\n        \n        # 1. find the longest palindrome substring\n        # 2. reverse the string\n        # 3. add the reversed string to the front of the original string\n        # 4. if the original string ends with the reversed string, return the reversed string\n        # 5. otherwise, return the reversed string + \"a\" + reversed string\n        \n        # 1. find the longest palindrome substring\n        # 2. reverse the string\n        # 3. add the reversed string to the front of the original string\n        # 4. if the original string ends with the reversed string, return the reversed string\n        # 5. otherwise, return the reversed string + \"a\" + reversed string\n        \n        # 1. find the longest palindrome substring\n        # 2. reverse the string\n        # 3. add the reversed string to the front of the original string\n        # 4. if the original string ends with the reversed string, return the reversed string\n        # 5. otherwise, return the reversed string + \"a"}], "minimum-window-substring": [{"task_id": "minimum-window-substring", "completion": "class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        if len(s) < len(t):\n            return \"\"\n        \n        # build hashmap for t\n        t_map = collections.Counter(t)\n        \n        # build hashmap for s\n        s_map = collections.Counter(s[:len(t)])\n        \n        # build hashmap for s\n        left = 0\n        right = len(t) - 1\n        min_len = len(s) + 1\n        start = 0\n        count = len(t_map)\n        \n        for right in range(len(s)):\n            # add right char to s_map\n            s_map[s[right]] += 1\n            \n            # if char in t, decrement count\n            if s_map[s[right]] == t_map[s[right]]:\n                count -= 1\n            \n            # if all chars in t, then shrink window\n            if count == 0:\n                while s_map[s[left]] > t_map[s[left]]:\n                    s_map[s[left]] -= 1\n                    left += 1\n                \n                if right - left + 1 < min_len:\n                    min_len = right - left + 1\n                    start = left\n                \n                s_map[s[left]] -= 1\n                count += 1\n                left += 1\n        \n        return s[start:start + min_len] if min_len != len(s) + 1 else \"\""}], "self-crossing": [{"task_id": "self-crossing", "completion": "class Solution(object):\n    def isSelfCrossing(self, distance):\n        \"\"\"\n        :type distance: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        if len(distance) < 4:\n            return False\n        \n        if distance[0] == distance[3] and distance[1] == distance[2]:\n            return True\n        \n        if distance[1] == distance[3] and distance[0] <= distance[2] and distance[4] >= distance[2]:\n            return True\n        \n        if distance[0] == distance[4] and distance[1] <= distance[3] and distance[5] >= distance[3]:\n            return True\n        \n        if distance[0] == distance[5] and distance[1] <= distance[4] and distance[2] >= distance[4]:\n            return True\n        \n        if distance[1] == distance[2] and distance[0] <= distance[3] and distance[6] >= distance[3]:\n            return True\n        \n        if distance[2] == distance[3] and distance[1] <= distance[0] and distance[7] >= distance[0]:\n            return True\n        \n        return False"}], "remove-duplicates-from-sorted-list": [{"task_id": "remove-duplicates-from-sorted-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        curr = head\n        \n        while curr:\n            if curr.next and curr.val == curr.next.val:\n                while curr.next and curr.val == curr.next.val:\n                    curr = curr.next\n                prev.next = curr.next\n            else:\n                prev = curr\n            curr = curr.next\n        \n        return dummy.next"}], "longest-palindrome": [{"task_id": "longest-palindrome", "completion": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "construct-binary-tree-from-inorder-and-postorder-traversal": [{"task_id": "construct-binary-tree-from-inorder-and-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not inorder or not postorder:\n            return None\n        \n        root = TreeNode(postorder[-1])\n        idx = inorder.index(root.val)\n        \n        root.right = self.buildTree(inorder[idx+1:], postorder[idx:-1])\n        root.left = self.buildTree(inorder[:idx], postorder[:idx])\n        \n        return root"}], "cut-off-trees-for-golf-event": [{"task_id": "cut-off-trees-for-golf-event", "completion": "class Solution(object):\n    def cutOffTree(self, forest):\n        \"\"\"\n        :type forest: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(forest), len(forest[0])\n        trees = [(forest[i][j], i, j) for i in range(m) for j in range(n) if forest[i][j] > 1]\n        trees.sort(key=lambda x: -x[0])\n        if not trees:\n            return -1\n        x, y = trees[0][1], trees[0][2]\n        ans = 0\n        for height, i, j in trees:\n            d = self.bfs(forest, height, x, y)\n            if d == -1:\n                return -1\n            ans += d\n            x, y = i, j\n        return ans\n\n    def bfs(self, forest, height, x, y):\n        m, n = len(forest), len(forest[0])\n        visited = [[False] * n for _ in range(m)]\n        q = collections.deque([(x, y)])\n        visited[x][y] = True\n        step = 0\n        while q:\n            step += 1\n            for _ in range(len(q)):\n                x, y = q.popleft()\n                if forest[x][y] == height:\n                    return step\n                for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                    nx, ny = x + dx, y + dy\n                    if 0 <= nx < m and 0 <= ny < n and not visited[nx][ny] and forest[nx][ny] > 0:\n                        q.append((nx, ny))\n                        visited[nx][ny] = True\n        return -1"}], "minimum-depth-of-binary-tree": [{"task_id": "minimum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def minDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        if not root.left:\n            return 1 + self.minDepth(root.right)\n        \n        if not root.right:\n            return 1 + self.minDepth(root.left)\n        \n        return 1 + min(self.minDepth(root.left), self.minDepth(root.right))"}], "count-of-range-sum": [{"task_id": "count-of-range-sum", "completion": "class Solution(object):\n    def countRangeSum(self, nums, lower, upper):\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "arranging-coins": [{"task_id": "arranging-coins", "completion": "class Solution(object):\n    def arrangeCoins(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1 + 2 + 3 + ... + k = n\n        # 1 + 2 + 3 + ... + k = n * k / 2\n        # k = (2 * n + 0.25) ** 0.5 - 0.5\n        # k = (2 * n) ** 0.5 - 1\n        # k = n / 2\n        # k = n // 2\n        # k = n - 1 // 2\n        # k = n - 1\n        # k = n\n        # k = n + 1\n        # k = n + 1\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k = n\n        # k"}], "longest-uncommon-subsequence-i": [{"task_id": "longest-uncommon-subsequence-i", "completion": "class Solution(object):\n    def findLUSlength(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: int\n        \"\"\"\n        \n        if a == b:\n            return -1\n        return max(len(a), len(b))"}], "binary-tree-level-order-traversal-ii": [{"task_id": "binary-tree-level-order-traversal-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        q = [root]\n        res = []\n        while q:\n            res.append([node.val for node in q])\n            q = [child for node in q for child in (node.left, node.right) if child]\n        return res[::-1]"}], "palindrome-number": [{"task_id": "palindrome-number", "completion": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        \n        if x < 0:\n            return False\n        \n        if x < 10:\n            return True\n        \n        if x % 10 == 0:\n            return False\n        \n        rev = 0\n        while x > rev:\n            rev = rev * 10 + x % 10\n            x = x // 10\n        \n        return x == rev or x == rev // 10"}], "decode-ways": [{"task_id": "decode-ways", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if not s or s[0] == '0':\n            return 0\n        \n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, len(s) + 1):\n            if s[i - 1] != '0':\n                dp[i] += dp[i - 1]\n            if s[i - 2] != '0' and int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        \n        return dp[-1]"}], "is-subsequence": [{"task_id": "is-subsequence", "completion": "class Solution(object):\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) > len(t):\n            return False\n        \n        i = 0\n        j = 0\n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n            j += 1\n        \n        return i == len(s)"}], "gray-code": [{"task_id": "gray-code", "completion": "class Solution(object):\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if n == 0:\n            return [0]\n        \n        res = [0]\n        head = 1\n        \n        for i in range(n):\n            for j in reversed(range(len(res))):\n                res.append(head + res[j])\n            head <<= 1\n        \n        return res"}], "climbing-stairs": [{"task_id": "climbing-stairs", "completion": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        \n        a, b = 1, 2\n        for i in range(3, n + 1):\n            a, b = b, a + b\n        return b"}], "word-break": [{"task_id": "word-break", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True"}], "validate-binary-search-tree": [{"task_id": "validate-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def helper(root, lower, upper):\n            if not root:\n                return True\n            if root.val <= lower or root.val >= upper:\n                return False\n            return helper(root.left, lower, root.val) and helper(root.right, root.val, upper)\n        \n        return helper(root, float('-inf'), float('inf'))"}], "insert-interval": [{"task_id": "insert-interval", "completion": "class Solution(object):\n    def insert(self, intervals, newInterval):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type newInterval: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not intervals:\n            return [newInterval]\n        \n        if not newInterval:\n            return intervals\n        \n        start, end = newInterval\n        left, right = [], []\n        for interval in intervals:\n            if interval[1] < start:\n                left.append(interval)\n            elif interval[0] > end:\n                right.append(interval)\n            else:\n                start = min(start, interval[0])\n                end = max(end, interval[1])\n        \n        return left + [[start, end]] + right"}], "palindrome-partitioning": [{"task_id": "palindrome-partitioning", "completion": "class Solution(object):\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        # dp[i] = all possible partition of s[:i+1]\n        # dp[i] = [dp[j] + [s[j:i+1]] for j in range(i+1) if s[j:i+1] is palindrome]\n        # dp[0] = [[]]\n        # dp[1] = [s[0]] if s[0] is palindrome\n        # dp[2] = [[s[0:2]]] if s[0:2] is palindrome\n        # dp[3] = [[s[0:3]]] if s[0:3] is palindrome\n        # dp[4] = [[s[0:4]]] if s[0:4] is palindrome\n        # dp[5] = [[s[0:5]]] if s[0:5] is palindrome\n        # dp[6] = [[s[0:6]]] if s[0:6] is palindrome\n        # dp[7] = [[s[0:7]]] if s[0:7] is palindrome\n        # dp[8] = [[s[0:8]]] if s[0:8] is palindrome\n        # dp[9] = [[s[0:9]]] if s[0:9] is palindrome\n        # dp[10] = [[s[0:10]]] if s[0:10] is palindrome\n        # dp[11] = [[s[0:11]]] if s[0:11] is palindrome\n        # dp[12] = [[s[0:12]]] if s[0:12] is palindrome\n        # dp[13] = [[s[0:13]]] if s[0:13] is palindrome\n        # dp[14] = [[s[0:14]]] if s[0:14] is palindrome\n        # dp[15] = [[s[0:15]]] if s[0:15] is palindrome\n        # dp[16] = [[s[0:16]]] if s[0:16] is palindrome\n        # dp[17] = [[s[0:17]]] if s[0:17] is palindrome\n        # dp[18] = [[s[0:18]]] if s[0:18] is palindrome\n        # dp[19] = [[s[0:19]]] if s[0:19] is palindrome\n        # dp[20] = [[s[0:20]]] if s[0:20] is palindrome\n        # dp[21] = [[s[0:21]]] if s[0:21] is palindrome\n        # dp[22] = [[s[0:22]]] if s[0:22] is palindrome\n        # dp[23] = [[s[0:23]]] if s[0:23] is palindrome\n        # dp[24] = [[s[0:24]]] if s[0:24] is palindrome\n        # dp[25] = [[s[0:25]]] if s[0:25] is palindrome\n        # dp[26] = [[s[0:26]]] if s[0:26] is palindrome\n        # dp[27] = [[s[0:27]]] if s[0:27] is palindrome\n        # dp[28] = [[s[0:28]]] if s[0:28] is palindrome\n        # dp[29] = [[s[0:29]]] if s[0:29] is palindrome\n        # dp[30] = [[s[0:30]]] if s[0:30] is palindrome\n        # dp[31] = [[s[0:31]]] if s[0:31] is palindrome\n        # dp[32] = [[s[0:32]]"}], "smallest-range-covering-elements-from-k-lists": [{"task_id": "smallest-range-covering-elements-from-k-lists", "completion": "class Solution(object):\n    def smallestRange(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. find the min and max of all the numbers\n        # 2. use a min heap to store the min number in each list\n        # 3. use a max heap to store the max number in each list\n        # 4. use a min heap to store the min number in each list\n        # 5. use a max heap to store the max number in each list\n        # 6. use a min heap to store the min number in each list\n        # 7. use a max heap to store the max number in each list\n        # 8. use a min heap to store the min number in each list\n        # 9. use a max heap to store the max number in each list\n        # 10. use a min heap to store the min number in each list\n        # 11. use a max heap to store the max number in each list\n        # 12. use a min heap to store the min number in each list\n        # 13. use a max heap to store the max number in each list\n        # 14. use a min heap to store the min number in each list\n        # 15. use a max heap to store the max number in each list\n        # 16. use a min heap to store the min number in each list\n        # 17. use a max heap to store the max number in each list\n        # 18. use a min heap to store the min number in each list\n        # 19. use a max heap to store the max number in each list\n        # 20. use a min heap to store the min number in each list\n        # 21. use a max heap to store the max number in each list\n        # 22. use a min heap to store the min number in each list\n        # 23. use a max heap to store the max number in each list\n        # 24. use a min heap to store the min number in each list\n        # 25. use a max heap to store the max number in each list\n        # 26. use a min heap to store the min number in each list\n        # 27. use a max heap to store the max number in each list\n        # 28. use a min heap to store the min number in each list\n        # 29. use a max heap to store the max number in each list\n        # 30. use a min heap to store the min number in each list\n        # 31. use a max heap to store the max number in each list\n        # 32. use a min heap to store the min number in each list\n        # 33. use a max heap to store the max number in each list\n        # 34. use a min heap to store the min number in each list\n        # 35. use a max heap to store the max number in each list\n        # 36. use a min heap to store the min number in each list\n        # 37. use a max heap to store the max number in each list\n        # 38. use a min heap to store the min number in each list\n        # 39. use a max heap to store the max number in each list\n        # 40. use a min heap to store the min number in each list\n        # 41. use a max heap to store the max number in each list\n        # 42. use a min heap to store the min number in each list\n        # 43. use a max heap to store the max number in each list\n        # 44. use a min heap to store the min number in each list\n        # 45. use a max heap to store the max number in each list\n        # 46. use a min heap to store the min number in each list\n        # 47. use a max heap to store the max number in each list\n        # 48. use a min heap to store the min number in each list\n        # 49. use a max heap to store the max number in each list\n        # 50. use a min heap to store the min number in each list\n        # 51. use a max heap to store the max number in each list\n        # 52. use a min heap to store the min number in each list\n        # 53. use a max heap to store the max number in each list\n        # 54. use a min heap to store the min number in each list\n        # 55. use a max heap"}], "poor-pigs": [{"task_id": "poor-pigs", "completion": "class Solution(object):\n    def poorPigs(self, buckets, minutesToDie, minutesToTest):\n        \"\"\"\n        :type buckets: int\n        :type minutesToDie: int\n        :type minutesToTest: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. 10^9 is too large, so we need to find the number of pigs\n        # 2. 10^9 / minutesToTest is too large, so we need to find the number of pigs\n        # 3. 10^9 / minutesToTest is too large, so we need to find the number of pigs\n        # 4. 10^9 / minutesToTest is too large, so we need to find the number of pigs\n        # 5. 10^9 / minutesToTest is too large, so we need to find the number of pigs\n        # 6. 10^9 / minutesToTest is too large, so we need to find the number of pigs\n        # 7. 10^9 / minutesToTest is too large, so we need to find the number of pigs\n        # 8. 10^9 / minutesToTest is too large, so we need to find the number of pigs\n        # 9. 10^9 / minutesToTest is too large, so we need to find the number of pigs\n        # 10. 10^9 / minutesToTest is too large, so we need to find the number of pigs\n        # 11. 10^9 / minutesToTest is too large, so we need to find the number of pigs\n        # 12. 10^9 / minutesToTest is too large, so we need to find the number of pigs\n        # 13. 10^9 / minutesToTest is too large, so we need to find the number of pigs\n        # 14. 10^9 / minutesToTest is too large, so we need to find the number of pigs\n        # 15. 10^9 / minutesToTest is too large, so we need to find the number of pigs\n        # 16. 10^9 / minutesToTest is too large, so we need to find the number of pigs\n        # 17. 10^9 / minutesToTest is too large, so we need to find the number of pigs\n        # 18. 10^9 / minutesToTest is too large, so we need to find the number of pigs\n        # 19. 10^9 / minutesToTest is too large, so we need to find the number of pigs\n        # 20. 10^9 / minutesToTest is too large, so we need to find the number of pigs\n        # 21. 10^9 / minutesToTest is too large, so we need to find the number of pigs\n        # 22. 10^9 / minutesToTest is too large, so we need to find the number of pigs\n        # 23. 10^9 / minutesToTest is too large, so we need to find the number of pigs\n        # 24. 10^9 / minutesToTest is too large, so we need to find the number of pigs\n        # 25. 10^9 / minutesToTest is too large, so we need to find the number of pigs\n        # 26. 10^9 / minutesToTest is too large, so we need to find the number of pigs\n        # 27. 10^9 / minutesToTest is too large, so we need to find the number of pigs\n        # 28. 10^9 / minutesToTest is too large, so we need to find the number of pigs\n        # 29. 10^9 / minutesToTest is too large, so we need to find the number of pigs\n        # 30. 10^9 / minutesToTest is too large, so we need to find the number of pigs\n        # 31. 10^9 / minutesToTest is too large, so we need to find the number of pigs\n        # 32. 10^9 / minutesToTest is too large, so we need to find the number of pigs\n        # 33. 10^9 / minutesToTest is too large, so we need to find the number of pigs\n        # 34. 10^9 / minutesToTest is too large, so we need to find the number of pigs\n        # 35. 10^9 / minutesToTest is too"}], "swim-in-rising-water": [{"task_id": "swim-in-rising-water", "completion": "class Solution(object):\n    def swimInWater(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        if n == 1:\n            return grid[0][0]\n        \n        # build a min heap\n        heap = [(grid[0][0], 0, 0)]\n        seen = set([(0, 0)])\n        res = 0\n        dirs = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n        while heap:\n            t, i, j = heapq.heappop(heap)\n            res = max(res, t)\n            if i == j == n - 1:\n                return res\n            for di, dj in dirs:\n                ni, nj = i + di, j + dj\n                if 0 <= ni < n and 0 <= nj < n and (ni, nj) not in seen:\n                    seen.add((ni, nj))\n                    heapq.heappush(heap, (grid[ni][nj], ni, nj))\n                    heapq.heapify(heap)\n        return res"}], "unique-paths": [{"task_id": "unique-paths", "completion": "class Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = 1\n        \n        for i in range(m):\n            for j in range(n):\n                if i == 0 and j == 0:\n                    continue\n                if i == 0:\n                    dp[i][j] = dp[i][j - 1]\n                elif j == 0:\n                    dp[i][j] = dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        \n        return dp[-1][-1]"}], "multiply-strings": [{"task_id": "multiply-strings", "completion": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        if num1 == '0' or num2 == '0':\n            return '0'\n        \n        m, n = len(num1), len(num2)\n        res = [0] * (m + n)\n        \n        for i in range(m - 1, -1, -1):\n            for j in range(n - 1, -1, -1):\n                mul = int(num1[i]) * int(num2[j])\n                p1, p2 = i + j, i + j + 1\n                sum = mul + res[p2]\n                res[p1] += sum // 10\n                res[p2] = sum % 10\n        \n        # remove leading zeros\n        res = list(filter(None, res))\n        return ''.join(map(str, res)) if res else '0'"}], "best-time-to-buy-and-sell-stock-iii": [{"task_id": "best-time-to-buy-and-sell-stock-iii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. 2 pointers\n        # 2. 1 pointer, 2 variables\n        # 3. 1 pointer, 3 variables\n        # 4. 1 pointer, 4 variables\n        # 5. 1 pointer, 5 variables\n        # 6. 1 pointer, 6 variables\n        # 7. 1 pointer, 7 variables\n        # 8. 1 pointer, 8 variables\n        # 9. 1 pointer, 9 variables\n        # 10. 1 pointer, 10 variables\n        # 11. 1 pointer, 11 variables\n        # 12. 1 pointer, 12 variables\n        # 13. 1 pointer, 13 variables\n        # 14. 1 pointer, 14 variables\n        # 15. 1 pointer, 15 variables\n        # 16. 1 pointer, 16 variables\n        # 17. 1 pointer, 17 variables\n        # 18. 1 pointer, 18 variables\n        # 19. 1 pointer, 19 variables\n        # 20. 1 pointer, 20 variables\n        # 21. 1 pointer, 21 variables\n        # 22. 1 pointer, 22 variables\n        # 23. 1 pointer, 23 variables\n        # 24. 1 pointer, 24 variables\n        # 25. 1 pointer, 25 variables\n        # 26. 1 pointer, 26 variables\n        # 27. 1 pointer, 27 variables\n        # 28. 1 pointer, 28 variables\n        # 29. 1 pointer, 29 variables\n        # 30. 1 pointer, 30 variables\n        # 31. 1 pointer, 31 variables\n        # 32. 1 pointer, 32 variables\n        # 33. 1 pointer, 33 variables\n        # 34. 1 pointer, 34 variables\n        # 35. 1 pointer, 35 variables\n        # 36. 1 pointer, 36 variables\n        # 37. 1 pointer, 37 variables\n        # 38. 1 pointer, 38 variables\n        # 39. 1 pointer, 39 variables\n        # 40. 1 pointer, 40 variables\n        # 41. 1 pointer, 41 variables\n        # 42. 1 pointer, 42 variables\n        # 43. 1 pointer, 43 variables\n        # 44. 1 pointer, 44 variables\n        # 45. 1 pointer, 45 variables\n        # 46. 1 pointer, 46 variables\n        # 47. 1 pointer, 47 variables\n        # 48. 1 pointer, 48 variables\n        # 49. 1 pointer, 49 variables\n        # 50. 1 pointer, 50 variables\n        # 51. 1 pointer, 51 variables\n        # 52. 1 pointer, 52 variables\n        # 53. 1 pointer, 53 variables\n        # 54. 1 pointer, 54 variables\n        # 55. 1 pointer, 55 variables\n        # 56. 1 pointer, 56 variables\n        # 57. 1 pointer, 57 variables\n        # 58. 1 pointer, 58 variables\n        # 59. 1 pointer, 59 variables\n        # 60. 1 pointer, 60 variables\n        # 61. 1 pointer, 61 variables\n        # 62. 1 pointer, 62 variables\n        # 63. 1 pointer, 63 variables\n        # 64. 1 pointer, 64 variables\n        # 65. 1 pointer, 65 variables\n        # 66. 1 pointer, 66 variables\n        # 67. 1 pointer, 67 variables\n        # 68. 1 pointer, 68 variables\n        # 69. 1 pointer, 69 variables\n        # 70. 1 pointer"}], "combination-sum-ii": [{"task_id": "combination-sum-ii", "completion": "class Solution(object):\n    def combinationSum2(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        res = []\n        path = []\n        visited = [False] * len(candidates)\n        candidates = [x for x in candidates if x <= target]\n        self.dfs(candidates, target, 0, path, visited, res)\n        return res\n        \n    def dfs(self, candidates, target, start, path, visited, res):\n        if target == 0:\n            res.append(path[:])\n            return\n        for i in xrange(start, len(candidates)):\n            if i > 0 and candidates[i] == candidates[i - 1] and not visited[i - 1]:\n                continue\n            if candidates[i] > target:\n                break\n            visited[i] = True\n            self.dfs(candidates, target - candidates[i], i + 1, path + [candidates[i]], visited, res)\n            visited[i] = False"}], "detect-capital": [{"task_id": "detect-capital", "completion": "class Solution(object):\n    def detectCapitalUse(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(word) == 1:\n            return True\n        \n        if word[0].isupper() and word[1].islower():\n            return True\n        \n        if word[0].islower() and word[1].isupper():\n            return False\n        \n        if word[0].isupper() and word[1].isupper():\n            for i in range(2, len(word)):\n                if word[i].islower():\n                    return False\n            return True\n        \n        if word[0].islower() and word[1].islower():\n            for i in range(2, len(word)):\n                if word[i].isupper():\n                    return False\n            return True\n        \n        return False"}], "best-time-to-buy-and-sell-stock": [{"task_id": "best-time-to-buy-and-sell-stock", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if not prices:\n            return 0\n        \n        min_price = prices[0]\n        max_profit = 0\n        \n        for price in prices:\n            min_price = min(min_price, price)\n            max_profit = max(max_profit, price - min_price)\n        \n        return max_profit"}], "binary-tree-inorder-traversal": [{"task_id": "binary-tree-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        stack, res, cur = [], [], root\n        \n        while cur or stack:\n            if cur:\n                stack.append(cur)\n                cur = cur.left\n            else:\n                cur = stack.pop()\n                res.append(cur.val)\n                cur = cur.right\n        \n        return res"}], "construct-binary-tree-from-preorder-and-inorder-traversal": [{"task_id": "construct-binary-tree-from-preorder-and-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not preorder or not inorder:\n            return None\n        \n        root = TreeNode(preorder[0])\n        idx = inorder.index(preorder[0])\n        root.left = self.buildTree(preorder[1:idx+1], inorder[:idx])\n        root.right = self.buildTree(preorder[idx+1:], inorder[idx+1:])\n        return root"}], "remove-invalid-parentheses": [{"task_id": "remove-invalid-parentheses", "completion": "class Solution(object):\n    def removeInvalidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. find the left and right count of '(' and ')'\n        # 2. find the min number of deletions\n        # 3. find the min number of deletions\n        # 4. find the min number of deletions\n        # 5. find the min number of deletions\n        # 6. find the min number of deletions\n        # 7. find the min number of deletions\n        # 8. find the min number of deletions\n        # 9. find the min number of deletions\n        # 10. find the min number of deletions\n        # 11. find the min number of deletions\n        # 12. find the min number of deletions\n        # 13. find the min number of deletions\n        # 14. find the min number of deletions\n        # 15. find the min number of deletions\n        # 16. find the min number of deletions\n        # 17. find the min number of deletions\n        # 18. find the min number of deletions\n        # 19. find the min number of deletions\n        # 20. find the min number of deletions\n        # 21. find the min number of deletions\n        # 22. find the min number of deletions\n        # 23. find the min number of deletions\n        # 24. find the min number of deletions\n        # 25. find the min number of deletions\n        # 26. find the min number of deletions\n        # 27. find the min number of deletions\n        # 28. find the min number of deletions\n        # 29. find the min number of deletions\n        # 30. find the min number of deletions\n        # 31. find the min number of deletions\n        # 32. find the min number of deletions\n        # 33. find the min number of deletions\n        # 34. find the min number of deletions\n        # 35. find the min number of deletions\n        # 36. find the min number of deletions\n        # 37. find the min number of deletions\n        # 38. find the min number of deletions\n        # 39. find the min number of deletions\n        # 40. find the min number of deletions\n        # 41. find the min number of deletions\n        # 42. find the min number of deletions\n        # 43. find the min number of deletions\n        # 44. find the min number of deletions\n        # 45. find the min number of deletions\n        # 46. find the min number of deletions\n        # 47. find the min number of deletions\n        # 48. find the min number of deletions\n        # 49. find the min number of deletions\n        # 50. find the min number of deletions\n        # 51. find the min number of deletions\n        # 52. find the min number of deletions\n        # 53. find the min number of deletions\n        # 54. find the min number of deletions\n        # 55. find the min number of deletions\n        # 56. find the min number of deletions\n        # 57. find the min number of deletions\n        # 58. find the min number of deletions\n        # 59. find the min number of deletions\n        # 60. find the min number of deletions\n        # 61. find the min number of deletions\n        # 62. find the min number of deletions\n        # 63. find the min number of deletions\n        # 64. find the min number of deletions\n        # 65. find the min number of deletions\n        # 66. find the min number of deletions\n        # 67. find the min number of deletions\n        # 68. find the min number of deletions\n        # 69. find the min number of deletions\n        # 70. find the min number of deletions\n        # 71. find the min number of deletions\n        # 72. find the min number of deletions\n        # 73. find the min number of deletions\n        # 74."}], "merge-k-sorted-lists": [{"task_id": "merge-k-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        \n        if not lists:\n            return None\n        \n        import heapq\n        h = []\n        for l in lists:\n            if l:\n                heapq.heappush(h, (l.val, id(l), l))\n                l = l.next\n        \n        dummy = ListNode()\n        tail = dummy\n        while h:\n            val, idx, node = heapq.heappop(h)\n            tail.next = node\n            tail = node\n            if node.next:\n                heapq.heappush(h, (node.next.val, idx, node.next))\n                node = node.next\n        \n        return dummy.next"}], "palindrome-partitioning-ii": [{"task_id": "palindrome-partitioning-ii", "completion": "class Solution(object):\n    def minCut(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # dp[i] = min(dp[j] + 1) for all j in range(i)\n        # dp[i] = 0 if s[i:] is not palindrome\n        # dp[0] = -1\n        # dp[1] = 0\n        # dp[2] = 1\n        # dp[3] = 2\n        # dp[4] = 3\n        # dp[5] = 4\n        # dp[6] = 5\n        # dp[7] = 6\n        # dp[8] = 7\n        # dp[9] = 8\n        # dp[10] = 9\n        # dp[11] = 10\n        # dp[12] = 11\n        # dp[13] = 12\n        # dp[14] = 13\n        # dp[15] = 14\n        # dp[16] = 15\n        # dp[17] = 16\n        # dp[18] = 17\n        # dp[19] = 18\n        # dp[20] = 19\n        # dp[21] = 20\n        # dp[22] = 21\n        # dp[23] = 22\n        # dp[24] = 23\n        # dp[25] = 24\n        # dp[26] = 25\n        # dp[27] = 26\n        # dp[28] = 27\n        # dp[29] = 28\n        # dp[30] = 29\n        # dp[31] = 30\n        # dp[32] = 31\n        # dp[33] = 32\n        # dp[34] = 33\n        # dp[35] = 34\n        # dp[36] = 35\n        # dp[37] = 36\n        # dp[38] = 37\n        # dp[39] = 38\n        # dp[40] = 39\n        # dp[41] = 40\n        # dp[42] = 41\n        # dp[43] = 42\n        # dp[44] = 43\n        # dp[45] = 44\n        # dp[46] = 45\n        # dp[47] = 46\n        # dp[48] = 47\n        # dp[49] = 48\n        # dp[50] = 49\n        # dp[51] = 50\n        # dp[52] = 51\n        # dp[53] = 52\n        # dp[54] = 53\n        # dp[55] = 54\n        # dp[56] = 55\n        # dp[57] = 56\n        # dp[58] = 57\n        # dp[59] = 58\n        # dp[60] = 59\n        # dp[61] = 60\n        # dp[62] = 61\n        # dp[63] = 62\n        # dp[64] = 63\n        # dp[65] = 64\n        # dp[66] = 65\n        # dp[67] = 66\n        # dp[68] = 67\n        # dp[69] = 68\n        # dp[70] = 69\n        # dp[71] = 70\n        # dp[72] = 71\n        # dp[73] = 72\n        # dp[74] = 73\n        # dp[75] = 74\n        # dp[76] = 75\n        # dp[77] = 76\n        # dp[78] = 77\n        # dp[79] = 78\n        # dp[80] = 79\n        # dp[81] = 80\n        # dp[82] = 81\n        #"}], "preimage-size-of-factorial-zeroes-function": [{"task_id": "preimage-size-of-factorial-zeroes-function", "completion": "class Solution(object):\n    def preimageSizeFZF(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. 10^6 is the largest number that can be divided by 5\n        # 2. 10^6 / 5 = 10^3\n        # 3. 10^3 / 5 = 10^2\n        # 4. 10^2 / 5 = 20\n        # 5. 20 / 5 = 4\n        # 6. 4 / 5 = 0\n        # 7. 0 / 5 = 0\n        # 8. 0 / 5 = 0\n        # 9. 0 / 5 = 0\n        # 10. 0 / 5 = 0\n        # 11. 0 / 5 = 0\n        # 12. 0 / 5 = 0\n        # 13. 0 / 5 = 0\n        # 14. 0 / 5 = 0\n        # 15. 0 / 5 = 0\n        # 16. 0 / 5 = 0\n        # 17. 0 / 5 = 0\n        # 18. 0 / 5 = 0\n        # 19. 0 / 5 = 0\n        # 20. 0 / 5 = 0\n        # 21. 0 / 5 = 0\n        # 22. 0 / 5 = 0\n        # 23. 0 / 5 = 0\n        # 24. 0 / 5 = 0\n        # 25. 0 / 5 = 0\n        # 26. 0 / 5 = 0\n        # 27. 0 / 5 = 0\n        # 28. 0 / 5 = 0\n        # 29. 0 / 5 = 0\n        # 30. 0 / 5 = 0\n        # 31. 0 / 5 = 0\n        # 32. 0 / 5 = 0\n        # 33. 0 / 5 = 0\n        # 34. 0 / 5 = 0\n        # 35. 0 / 5 = 0\n        # 36. 0 / 5 = 0\n        # 37. 0 / 5 = 0\n        # 38. 0 / 5 = 0\n        # 39. 0 / 5 = 0\n        # 40. 0 / 5 = 0\n        # 41. 0 / 5 = 0\n        # 42. 0 / 5 = 0\n        # 43. 0 / 5 = 0\n        # 44. 0 / 5 = 0\n        # 45. 0 / 5 = 0\n        # 46. 0 / 5 = 0\n        # 47. 0 / 5 = 0\n        # 48. 0 / 5 = 0\n        # 49. 0 / 5 = 0\n        # 50. 0 / 5 = 0\n        # 51. 0 / 5 = 0\n        # 52. 0 / 5 = 0\n        # 53. 0 / 5 = 0\n        # 54. 0 / 5 = 0\n        # 55. 0 / 5 = 0\n        # 56. 0 / 5 = 0\n        # 57. 0 / 5 = 0\n        # 58. 0 / 5 = 0\n        # 59. 0 / 5 = 0\n        # 60. 0 / 5 = 0\n        # 61. 0 / 5 = 0\n        # 62. 0 / 5 = 0\n        # 63. 0 / 5 = 0\n        # 64. 0 / 5 = 0\n        # 65. 0 / 5 = 0\n        # 66. 0 / 5 = 0\n        # 67. 0 / 5 = 0\n        # 68. 0 / 5 = 0\n        # 69. 0 / 5 = 0\n        # 70. 0 / 5 = 0\n        # 71. 0 / 5 = 0\n        # 72. 0 / 5 = 0"}], "palindrome-pairs": [{"task_id": "palindrome-pairs", "completion": "class Solution(object):\n    def palindromePairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # build a hashmap\n        word_map = {word: i for i, word in enumerate(words)}\n        # build a reverse hashmap\n        reverse_map = {v: k for k, v in word_map.items()}\n        # build a result\n        result = []\n        # iterate over the words\n        for i, word in enumerate(words):\n            # reverse the word\n            rev_word = word[::-1]\n            # if the reverse word is in the hashmap\n            if rev_word in reverse_map:\n                # if the reverse word is the word itself\n                if rev_word == word:\n                    # add the index to the result\n                    result.append([word_map[word], reverse_map[rev_word]])\n                # if the reverse word is not the word itself\n                else:\n                    # add the index to the result\n                    result.append([word_map[word], reverse_map[rev_word]])\n                    # add the index to the result\n                    result.append([reverse_map[rev_word], word_map[word]])\n            # if the word is in the hashmap\n            if word in word_map:\n                # if the word is the empty string\n                if word == '':\n                    # add the index to the result\n                    result.append([word_map[word], reverse_map[word]])\n                # if the word is not the empty string\n                else:\n                    # add the index to the result\n                    result.append([word_map[word], reverse_map[word]])\n                    # add the index to the result\n                    result.append([reverse_map[word], word_map[word]])\n            # add the word to the hashmap\n            word_map[word] = i\n        # return the result\n        return result"}], "convert-sorted-array-to-binary-search-tree": [{"task_id": "convert-sorted-array-to-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedArrayToBST(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not nums:\n            return None\n        \n        mid = len(nums) // 2\n        root = TreeNode(nums[mid])\n        root.left = self.sortedArrayToBST(nums[:mid])\n        root.right = self.sortedArrayToBST(nums[mid+1:])\n        \n        return root"}], "contain-virus": [{"task_id": "contain-virus", "completion": "class Solution(object):\n    def containVirus(self, isInfected):\n        \"\"\"\n        :type isInfected: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(isInfected), len(isInfected[0])\n        # 1. build walls\n        walls = 0\n        infected = 0\n        for i in range(m):\n            for j in range(n):\n                if isInfected[i][j] == 1:\n                    walls += 1\n                elif isInfected[i][j] == 2:\n                    infected += 1\n        # 2. build walls\n        walls += (m + n - 2) * 2\n        # 3. build walls\n        walls += (infected - 1) * 4\n        # 4. build walls\n        walls += (infected - 1) * 2\n        # 5. build walls\n        walls += (infected - 1) * 2\n        # 6. build walls\n        walls += (infected - 1) * 2\n        # 7. build walls\n        walls += (infected - 1) * 2\n        # 8. build walls\n        walls += (infected - 1) * 2\n        # 9. build walls\n        walls += (infected - 1) * 2\n        # 10. build walls\n        walls += (infected - 1) * 2\n        # 11. build walls\n        walls += (infected - 1) * 2\n        # 12. build walls\n        walls += (infected - 1) * 2\n        # 13. build walls\n        walls += (infected - 1) * 2\n        # 14. build walls\n        walls += (infected - 1) * 2\n        # 15. build walls\n        walls += (infected - 1) * 2\n        # 16. build walls\n        walls += (infected - 1) * 2\n        # 17. build walls\n        walls += (infected - 1) * 2\n        # 18. build walls\n        walls += (infected - 1) * 2\n        # 19. build walls\n        walls += (infected - 1) * 2\n        # 20. build walls\n        walls += (infected - 1) * 2\n        # 21. build walls\n        walls += (infected - 1) * 2\n        # 22. build walls\n        walls += (infected - 1) * 2\n        # 23. build walls\n        walls += (infected - 1) * 2\n        # 24. build walls\n        walls += (infected - 1) * 2\n        # 25. build walls\n        walls += (infected - 1) * 2\n        # 26. build walls\n        walls += (infected - 1) * 2\n        # 27. build walls\n        walls += (infected - 1) * 2\n        # 28. build walls\n        walls += (infected - 1) * 2\n        # 29. build walls\n        walls += (infected - 1) * 2\n        # 30. build walls\n        walls += (infected - 1) * 2\n        # 31. build walls\n        walls += (infected - 1) * 2\n        # 32. build walls\n        walls += (infected - 1) * 2\n        # 33. build walls\n        walls += (infected - 1) * 2\n        # 34. build walls\n        walls += (infected - 1) * 2\n        # 35. build walls\n        walls += (infected - 1) * 2\n        # 36. build walls\n        walls += (infected - 1) * 2\n        # 37. build walls\n        walls += (infected - 1) * 2\n        # 38. build walls\n        walls += (infected - 1) * 2\n        # 39. build walls\n        walls += (infected - 1) * 2\n        # 40. build walls\n        walls += (infected - 1) *"}], "longest-increasing-path-in-a-matrix": [{"task_id": "longest-increasing-path-in-a-matrix", "completion": "class Solution(object):\n    def longestIncreasingPath(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix or not matrix[0]:\n            return 0\n        \n        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n        res = 1\n        \n        for i in range(m):\n            for j in range(n):\n                if not dp[i][j]:\n                    dp[i][j] = 1\n                    q = collections.deque([(i, j)])\n                    while q:\n                        i, j = q.popleft()\n                        for di, dj in directions:\n                            ni, nj = i + di, j + dj\n                            if 0 <= ni < m and 0 <= nj < n and matrix[ni][nj] > matrix[i][j]:\n                                dp[ni][nj] = dp[i][j] + 1\n                                q.append((ni, nj))\n                                res = max(res, dp[ni][nj])\n        return res"}], "number-of-digit-one": [{"task_id": "number-of-digit-one", "completion": "class Solution(object):\n    def countDigitOne(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n <= 0:\n            return 0\n        \n        count = 0\n        i = 1\n        while i <= n:\n            count += (n + 8) / 10 * i + (n % 10 == 1)\n            i *= 10\n            n /= 10\n        return count"}], "word-break-ii": [{"task_id": "word-break-ii", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[1] = s[1:] in wordDict\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = any(dp[j] and s[j:i] in wordDict and s[j] not in wordDict)\n        # dp[i] = any(dp[j] and s[j:i] in wordDict and s[j] in wordDict)\n        # dp[i] = any(dp[j] and s[j:i] in wordDict and s[j] not in wordDict and s[j] not in wordDict)\n        # dp[i] = any(dp[j] and s[j:i] in wordDict and s[j] not in wordDict and s[j] in wordDict)\n        # dp[i] = any(dp[j] and s[j:i] in wordDict and s[j] in wordDict and s[j] not in wordDict)\n        # dp[i] = any(dp[j] and s[j:i] in wordDict and s[j] in wordDict and s[j] in wordDict)\n        # dp[i] = any(dp[j] and s[j:i] in wordDict and s[j] in wordDict and s[j] in wordDict and s[j] not in wordDict)\n        # dp[i] = any(dp[j] and s[j:i] in wordDict and s[j] in wordDict and s[j] in wordDict and s[j] in wordDict)\n        # dp[i] = any(dp[j] and s[j:i] in wordDict and s[j] in wordDict and s[j] in wordDict and s[j] in wordDict and s[j] not in wordDict)\n        # dp[i] = any(dp[j] and s[j:i] in wordDict and s[j] in wordDict and s[j] in wordDict and s[j] in wordDict and s[j] in wordDict)\n        # dp[i] = any(dp[j] and s[j:i] in wordDict and s[j] in wordDict and s[j] in wordDict and s[j] in wordDict and s[j] in wordDict and s[j] not in wordDict)\n        # dp[i] = any(dp[j] and s[j:i] in wordDict and s[j] in wordDict and s[j] in wordDict and s[j] in wordDict and s[j] in wordDict and s[j] in wordDict)\n        # dp[i] = any(dp[j] and s[j:i] in wordDict and s[j] in wordDict and s[j] in wordDict and s[j] in wordDict and s[j] in wordDict and s[j] in wordDict and s[j] not in wordDict)\n        # dp[i] = any(dp[j] and s[j:i] in wordDict and s[j] in wordDict and s[j] in wordDict and s[j] in wordDict and s[j] in wordDict and s[j] in wordDict and s[j] in wordDict)\n        # dp[i] = any(dp[j] and s[j:i] in wordDict and s[j] in wordDict and s[j] in wordDict and s[j] in wordDict and s[j] in wordDict and s[j] in wordDict and s[j] in wordDict and s[j] not in wordDict)\n        # dp[i] = any(dp[j] and s[j:i] in wordDict and s"}], "binary-tree-zigzag-level-order-traversal": [{"task_id": "binary-tree-zigzag-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def zigzagLevelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        level = 0\n        while queue:\n            level += 1\n            level_nodes = []\n            for node in queue:\n                level_nodes.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            if level % 2 == 1:\n                level_nodes.reverse()\n            result.append(level_nodes)\n            queue = queue[len(level_nodes):]\n        return result"}], "binary-watch": [{"task_id": "binary-watch", "completion": "class Solution(object):\n    def readBinaryWatch(self, turnedOn):\n        \"\"\"\n        :type turnedOn: int\n        :rtype: List[str]\n        \"\"\"\n        \n        if turnedOn > 8:\n            return []\n        \n        res = []\n        for h in range(12):\n            for m in range(60):\n                if bin(h).count('1') + bin(m).count('1') == turnedOn:\n                    res.append('%d:%02d' % (h, m))\n        return res"}], "pascals-triangle": [{"task_id": "pascals-triangle", "completion": "class Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if numRows == 0:\n            return []\n        \n        if numRows == 1:\n            return [[1]]\n        \n        if numRows == 2:\n            return [[1], [1, 1]]\n        \n        res = [[1] * (numRows + 1)]\n        res += [[1, 1]]\n        \n        for i in range(2, numRows):\n            row = [1]\n            for j in range(1, len(res[-1]) - 1):\n                row.append(res[-1][j] + res[-1][j + 1])\n            row.append(1)\n            res.append(row)\n        \n        return res[:-1]"}], "power-of-three": [{"task_id": "power-of-three", "completion": "class Solution(object):\n    def isPowerOfThree(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 3 == 0:\n            n /= 3\n        \n        return n == 1"}], "binary-tree-maximum-path-sum": [{"task_id": "binary-tree-maximum-path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxPathSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        self.max_sum = float('-inf')\n        def dfs(root):\n            if not root:\n                return 0\n            left = dfs(root.left)\n            right = dfs(root.right)\n            left = max(left, 0)\n            right = max(right, 0)\n            self.max_sum = max(self.max_sum, left + right + root.val)\n            return max(left, right) + root.val\n        dfs(root)\n        return self.max_sum"}], "trapping-rain-water-ii": [{"task_id": "trapping-rain-water-ii", "completion": "class Solution(object):\n    def trapRainWater(self, heightMap):\n        \"\"\"\n        :type heightMap: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not heightMap or not heightMap[0]:\n            return 0\n        \n        m, n = len(heightMap), len(heightMap[0])\n        heap = [(heightMap[i][0], i, 0) for i in range(m)] + [(heightMap[i][n-1], i, n-1) for i in range(m)]\n        heapq.heapify(heap)\n        seen = set((0, 0))\n        dirs = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n        res = 0\n        while heap:\n            h, i, j = heapq.heappop(heap)\n            res += max(0, h - heightMap[i][j])\n            for di, dj in dirs:\n                ni, nj = i + di, j + dj\n                if 0 <= ni < m and 0 <= nj < n and (ni, nj) not in seen:\n                    seen.add((ni, nj))\n                    heapq.heappush(heap, (max(heightMap[ni][nj], h), ni, nj))\n        return res"}], "valid-palindrome": [{"task_id": "valid-palindrome", "completion": "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        s = s.lower()\n        s = re.sub(r'[^a-z0-9]', '', s)\n        return s == s[::-1]"}], "sliding-window-median": [{"task_id": "sliding-window-median", "completion": "class Solution(object):\n    def medianSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[float]\n        \"\"\"\n        \n        # 1. sort the nums\n        # 2. get the median\n        # 3. get the result\n        \n        if not nums:\n            return []\n        \n        nums = sorted(nums)\n        n = len(nums)\n        if k == 1:\n            return [nums[n // 2]] * n\n        \n        res = []\n        left, right = 0, k - 1\n        median = (k - 1) // 2\n        while right < n:\n            if k % 2 == 0:\n                res.append((nums[left] + nums[right]) / 2.0)\n            else:\n                res.append(nums[median])\n            left += 1\n            right += 1\n        \n        left, right = 0, k\n        while right < n:\n            if k % 2 == 0:\n                res.append((nums[left] + nums[right]) / 2.0)\n            else:\n                res.append(nums[median])\n            left += 1\n            right += 1\n        \n        return res"}], "rotate-list": [{"task_id": "rotate-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        # find the length of the list\n        length = 0\n        curr = head\n        while curr:\n            length += 1\n            curr = curr.next\n        \n        # find the new head and tail\n        new_head = head\n        new_tail = head\n        k = k % length\n        if k == 0:\n            return head\n        \n        # find the new tail\n        for _ in range(k):\n            new_tail = new_tail.next\n        \n        # find the new head\n        while new_tail.next:\n            new_tail = new_tail.next\n            new_head = new_head.next\n        \n        # connect the new tail to the new head\n        new_tail.next = head\n        \n        # cut the old list off\n        new_head = new_head.next\n        new_tail.next = None\n        \n        return new_head"}], "ugly-number": [{"task_id": "ugly-number", "completion": "class Solution(object):\n    def isUgly(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 2 == 0:\n            n /= 2\n        while n % 3 == 0:\n            n /= 3\n        while n % 5 == 0:\n            n /= 5\n        \n        return n == 1"}], "falling-squares": [{"task_id": "falling-squares", "completion": "class Solution(object):\n    def fallingSquares(self, positions):\n        \"\"\"\n        :type positions: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. sort the positions by left\n        # 2. use a monotonic stack to record the max height\n        # 3. use a hashmap to record the max height for each left\n        # 4. use a hashmap to record the max height for each right\n        # 5. use a hashmap to record the max height for each right\n        # 6. use a hashmap to record the max height for each right\n        # 7. use a hashmap to record the max height for each right\n        # 8. use a hashmap to record the max height for each right\n        # 9. use a hashmap to record the max height for each right\n        # 10. use a hashmap to record the max height for each right\n        # 11. use a hashmap to record the max height for each right\n        # 12. use a hashmap to record the max height for each right\n        # 13. use a hashmap to record the max height for each right\n        # 14. use a hashmap to record the max height for each right\n        # 15. use a hashmap to record the max height for each right\n        # 16. use a hashmap to record the max height for each right\n        # 17. use a hashmap to record the max height for each right\n        # 18. use a hashmap to record the max height for each right\n        # 19. use a hashmap to record the max height for each right\n        # 20. use a hashmap to record the max height for each right\n        # 21. use a hashmap to record the max height for each right\n        # 22. use a hashmap to record the max height for each right\n        # 23. use a hashmap to record the max height for each right\n        # 24. use a hashmap to record the max height for each right\n        # 25. use a hashmap to record the max height for each right\n        # 26. use a hashmap to record the max height for each right\n        # 27. use a hashmap to record the max height for each right\n        # 28. use a hashmap to record the max height for each right\n        # 29. use a hashmap to record the max height for each right\n        # 30. use a hashmap to record the max height for each right\n        # 31. use a hashmap to record the max height for each right\n        # 32. use a hashmap to record the max height for each right\n        # 33. use a hashmap to record the max height for each right\n        # 34. use a hashmap to record the max height for each right\n        # 35. use a hashmap to record the max height for each right\n        # 36. use a hashmap to record the max height for each right\n        # 37. use a hashmap to record the max height for each right\n        # 38. use a hashmap to record the max height for each right\n        # 39. use a hashmap to record the max height for each right\n        # 40. use a hashmap to record the max height for each right\n        # 41. use a hashmap to record the max height for each right\n        # 42. use a hashmap to record the max height for each right\n        # 43. use a hashmap to record the max height for each right\n        # 44. use a hashmap to record the max height for each right\n        # 45. use a hashmap to record the max height for each right\n        # 46. use a hashmap to record the max height for each right\n        # 47. use a hashmap to record the max height for each right\n        # 48. use a hashmap to record the max height for each right\n        # 49. use a hashmap to record the max height for each right\n        # 50. use a hashmap to record the max height for each right\n        # 51. use a hashmap to record the max height for each right\n        # 52. use a hashmap to record the max height for each right\n        # 53. use a hashmap to record the max height for each right\n        # 54. use a hashmap to record the max height for each right\n        # 55. use a hashmap to record the max height for"}], "sum-of-left-leaves": [{"task_id": "sum-of-left-leaves", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumOfLeftLeaves(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        left_sum = 0\n        if root.left:\n            if not root.left.left and not root.left.right:\n                left_sum += root.left.val\n            else:\n                left_sum += self.sumOfLeftLeaves(root.left)\n        \n        return left_sum + self.sumOfLeftLeaves(root.right)"}], "max-sum-of-rectangle-no-larger-than-k": [{"task_id": "max-sum-of-rectangle-no-larger-than-k", "completion": "class Solution(object):\n    def maxSumSubmatrix(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(matrix), len(matrix[0])\n        if m > n:\n            matrix, m, n = matrix[::-1], n, m\n        res = float('-inf')\n        sums = [0] * n\n        for row in matrix:\n            for i, v in encompose(accumulate(row), 0):\n                sums[i] += v\n            sums = [0] + sums\n            q = collections.deque()\n            for i, v in enumerate(sums):\n                while q and sums[q[-1]] >= v:\n                    q.pop()\n                if q:\n                    res = max(res, sums[q[-1]] - sums[i])\n                q.append(i)\n        return res if res <= k else res - k"}], "divide-two-integers": [{"task_id": "divide-two-integers", "completion": "class Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"\n        \n        if dividend == 0:\n            return 0\n        \n        if dividend == -2147483648 and divisor == -1:\n            return 2147483647\n        \n        if dividend == -2147483648 and divisor == 1:\n            return -2147483648\n        \n        if dividend == 0 and divisor == 1:\n            return 0\n        \n        if dividend == 0 and divisor == -1:\n            return 0\n        \n        if dividend == -2147483648 and divisor == -1:\n            return 2147483647\n        \n        if dividend == 2147483647 and divisor == -1:\n            return -2147483648\n        \n        if dividend == -2147483648 and divisor == -1:\n            return 2147483647\n        \n        if dividend == 2147483647 and divisor == -1:\n            return -2147483648\n        \n        if dividend == -2147483648 and divisor == 1:\n            return -2147483648\n        \n        if dividend == 2147483647 and divisor == 1:\n            return 2147483647\n        \n        if dividend == -2147483648 and divisor == 1:\n            return -2147483648\n        \n        if dividend == 2147483647 and divisor == 1:\n            return 2147483647\n        \n        if dividend == -2147483648 and divisor == 1:\n            return -2147483648\n        \n        if dividend == 2147483647 and divisor == 1:\n            return 2147483647\n        \n        if dividend == -2147483648 and divisor == 1:\n            return -2147483648\n        \n        if dividend == 2147483647 and divisor == 1:\n            return 2147483647\n        \n        if dividend == -2147483648 and divisor == 1:\n            return -2147483648\n        \n        if dividend == 2147483647 and divisor == 1:\n            return 2147483647\n        \n        if dividend == -2147483648 and divisor == 1:\n            return -2147483648\n        \n        if dividend == 2147483647 and divisor == 1:\n            return 2147483647\n        \n        if dividend == -2147483648 and divisor == 1:\n            return -2147483648\n        \n        if dividend == 2147483647 and divisor == 1:\n            return 2147483647\n        \n        if dividend == -2147483648 and divisor == 1:\n            return -2147483648\n        \n        if dividend == 2147483647 and divisor == 1:\n            return 2147483647\n        \n        if dividend == -2147483648 and divisor == 1:\n            return -2147483648\n        \n        if dividend == 2147483647 and divisor == 1:\n            return 2147483647\n        \n        if dividend == -2147483648 and divisor == 1:\n            return -2147483648"}], "surrounded-regions": [{"task_id": "surrounded-regions", "completion": "class Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        if not board:\n            return\n        \n        m, n = len(board), len(board[0])\n        visited = set()\n        queue = collections.deque()\n        \n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'O' and (i == 0 or i == m-1 or j == 0 or j == n-1) and (i, j) not in visited:\n                    queue.append((i, j))\n                    visited.add((i, j))\n                    \n        while queue:\n            i, j = queue.popleft()\n            for x, y in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]:\n                if 0 <= x < m and 0 <= y < n and board[x][y] == 'O' and (x, y) not in visited:\n                    queue.append((x, y))\n                    visited.add((x, y))\n                    \n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'O' and (i, j) not in visited:\n                    board[i][j] = 'X'\n                    \n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'O' and (i, j) not in visited:\n                    board[i][j] = 'X'\n                    \n        return"}], "two-sum": [{"task_id": "two-sum", "completion": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. Brute force\n        # Time: O(n^2)\n        # Space: O(1)\n        # for i in range(len(nums)):\n        #     for j in range(i + 1, len(nums)):\n        #         if nums[i] + nums[j] == target:\n        #             return [i, j]\n        \n        # 2. Hashmap\n        # Time: O(n)\n        # Space: O(n)\n        # nums_map = {}\n        # for i, num in enumerate(nums):\n        #     if target - num in nums_map:\n        #         return [nums_map[target - num], i]\n        #     nums_map[num] = i\n        \n        # 3. Two-pass Hashmap\n        # Time: O(n)\n        # Space: O(n)\n        nums_map = {}\n        for i, num in enumerate(nums):\n            if target - num in nums_map:\n                return [nums_map[target - num], i]\n            nums_map[num] = i\n        \n        return []"}], "24-game": [{"task_id": "24-game", "completion": "class Solution(object):\n    def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        def dfs(cards, target, seen, op, res):\n            if len(cards) == 1:\n                return abs(target - cards[0]) < 1e-6 and op in seen\n            if len(cards) == 2:\n                return abs(target - cards[0] * 1.0 / cards[1] - 24) < 1e-6 and op in seen\n            if len(cards) == 3:\n                return abs(target - cards[0] * 1.0 / cards[1] * 1.0 / cards[2] - 24) < 1e-6 and op in seen\n            if len(cards) == 4:\n                return abs(target - cards[0] * 1.0 / cards[1] * 1.0 / cards[2] * 1.0 / cards[3] - 24) < 1e-6 and op in seen\n            if len(cards) == 5:\n                return abs(target - cards[0] * 1.0 / cards[1] * 1.0 / cards[2] * 1.0 / cards[3] * 1.0 / cards[4] - 24) < 1e-6 and op in seen\n            if len(cards) == 6:\n                return abs(target - cards[0] * 1.0 / cards[1] * 1.0 / cards[2] * 1.0 / cards[3] * 1.0 / cards[4] * 1.0 / cards[5] - 24) < 1e-6 and op in seen\n            if len(cards) == 7:\n                return abs(target - cards[0] * 1.0 / cards[1] * 1.0 / cards[2] * 1.0 / cards[3] * 1.0 / cards[4] * 1.0 / cards[5] * 1.0 / cards[6] - 24) < 1e-6 and op in seen\n            if len(cards) == 8:\n                return abs(target - cards[0] * 1.0 / cards[1] * 1.0 / cards[2] * 1.0 / cards[3] * 1.0 / cards[4] * 1.0 / cards[5] * 1.0 / cards[6] * 1.0 / cards[7] - 24) < 1e-6 and op in seen\n            if len(cards) == 9:\n                return abs(target - cards[0] * 1.0 / cards[1] * 1.0 / cards[2] * 1.0 / cards[3] * 1.0 / cards[4] * 1.0 / cards[5] * 1.0 / cards[6] * 1.0 / cards[7] * 1.0 / cards[8] - 24) < 1e-6 and op in seen\n            if len(cards) == 10:\n                return abs(target - cards[0] * 1.0 / cards[1] * 1.0 / cards[2] * 1.0 / cards[3] * 1.0 / cards[4] * 1.0 / cards[5] * 1.0 / cards[6] * 1.0 / cards[7] * 1.0 / cards[8] * 1.0 / cards[9] - 24) < 1e-6 and op in seen\n            if len(cards) == 11:\n                return abs(target - cards[0] * 1.0 / cards[1] * 1.0 / cards[2] * 1.0 / cards[3] * 1.0 / cards[4] * 1.0 / cards[5] * 1.0 / cards[6] * 1.0 / cards[7] * 1.0 / cards[8] * 1.0 / cards[9] * 1.0 / cards[10] - 24) < 1e-6 and op in seen\n            if len(cards) == 12:\n                return abs(target - cards[0] * 1.0 / cards[1] * 1.0 / cards[2] * 1.0 / cards[3] * 1.0 / cards[4] *"}], "wildcard-matching": [{"task_id": "wildcard-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        m, n = len(s), len(p)\n        dp = [[False] * (n + 1) for _ in range(m + 1)]\n        dp[0][0] = True\n        for i in range(1, n + 1):\n            if p[i - 1] == '*':\n                dp[0][i] = True\n            else:\n                break\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if p[j - 1] == '*':\n                    dp[i][j] = dp[i - 1][j] or dp[i][j - 1]\n                elif p[j - 1] == '?' or s[i - 1] == p[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = False\n        return dp[m][n]"}], "majority-element": [{"task_id": "majority-element", "completion": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Boyer-Moore Voting Algorithm\n        # https://leetcode.com/problems/majority-element/discuss/10099/Python-O(n)-time-O(1)-space-beat-96\n        # https://leetcode.com/problems/majority-element/discuss/10099/Python-O(n)-time-O(1)-space-beat-96/26950\n        # https://leetcode.com/problems/majority-element/discuss/10099/Python-O(n)-time-O(1)-space-beat-96/26950#\n        # https://leetcode.com/problems/majority-element/discuss/10099/Python-O(n)-time-O(1)-space-beat-96/26950#\n        # https://leetcode.com/problems/majority-element/discuss/10099/Python-O(n)-time-O(1)-space-beat-96/26950#\n        # https://leetcode.com/problems/majority-element/discuss/10099/Python-O(n)-time-O(1)-space-beat-96/26950#\n        # https://leetcode.com/problems/majority-element/discuss/10099/Python-O(n)-time-O(1)-space-beat-96/26950#\n        # https://leetcode.com/problems/majority-element/discuss/10099/Python-O(n)-time-O(1)-space-beat-96/26950#\n        # https://leetcode.com/problems/majority-element/discuss/10099/Python-O(n)-time-O(1)-space-beat-96/26950#\n        # https://leetcode.com/problems/majority-element/discuss/10099/Python-O(n)-time-O(1)-space-beat-96/26950#\n        # https://leetcode.com/problems/majority-element/discuss/10099/Python-O(n)-time-O(1)-space-beat-96/26950#\n        # https://leetcode.com/problems/majority-element/discuss/10099/Python-O(n)-time-O(1)-space-beat-96/26950#\n        # https://leetcode.com/problems/majority-element/discuss/10099/Python-O(n)-time-O(1)-space-beat-96/26950#\n        # https://leetcode.com/problems/majority-element/discuss/10099/Python-O(n)-time-O(1)-space-beat-96/26950#\n        # https://leetcode.com/problems/majority-element/discuss/10099/Python-O(n)-time-O(1)-space-beat-96/26950#\n        # https://leetcode.com/problems/majority-element/discuss/10099/Python-O(n)-time-O(1)-space-beat-96/26950#\n        # https://leetcode.com/problems/majority-element/discuss/10099/Python-O(n)-time-O(1)-space-beat-96/26950#\n        # https://leetcode.com/problems/majority-element/discuss/10099/Python-O(n)-time-O(1)-space-beat-96/26950#\n        # https://leetcode.com/problems/majority-element/discuss/10099/Python-O(n)-time-O(1)-space-beat-96/26950#\n        # https://leetcode.com/problems/major"}], "reconstruct-itinerary": [{"task_id": "reconstruct-itinerary", "completion": "class Solution(object):\n    def findItinerary(self, tickets):\n        \"\"\"\n        :type tickets: List[List[str]]\n        :rtype: List[str]\n        \"\"\"\n        \n        # build a graph\n        graph = collections.defaultdict(list)\n        for from_city, to_city in sorted(tickets)[::-1]:\n            graph[from_city].append(to_city)\n        # find the path\n        path = []\n        def dfs(node):\n            # terminator\n            if node not in graph:\n                path.append(node)\n                return True\n            # process\n            while graph[node]:\n                neighbor = graph[node].pop()\n                if dfs(neighbor):\n                    return True\n            # revert\n            path.append(node)\n            return False\n        dfs('JFK')\n        return path[::-1]"}], "4sum": [{"task_id": "4sum", "completion": "class Solution(object):\n    def fourSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        n = len(nums)\n        res = []\n        if n < 4:\n            return res\n        if nums[0] + nums[1] + nums[2] + nums[3] > target:\n            return res\n        if nums[n - 1] + nums[n - 2] + nums[n - 3] + nums[n - 4] < target:\n            return res\n        if nums[0] + nums[1] + nums[n - 1] + nums[n - 2] == target:\n            return [[nums[0], nums[1], nums[n - 2], nums[n - 1]]]\n        if nums[0] + nums[1] + nums[n - 1] + nums[n - 2] == target:\n            return [[nums[0], nums[1], nums[n - 1], nums[n - 2]]]\n        if nums[0] + nums[1] + nums[n - 2] + nums[n - 3] == target:\n            return [[nums[0], nums[1], nums[n - 2], nums[n - 3]]]\n        if nums[0] + nums[1] + nums[n - 2] + nums[n - 3] == target:\n            return [[nums[0], nums[1], nums[n - 2], nums[n - 3]]]\n        if nums[0] + nums[1] + nums[n - 3] + nums[n - 4] == target:\n            return [[nums[0], nums[1], nums[n - 3], nums[n - 4]]]\n        if nums[0] + nums[1] + nums[n - 3] + nums[n - 4] == target:\n            return [[nums[0], nums[1], nums[n - 3], nums[n - 4]]]\n        if nums[0] + nums[1] + nums[n - 4] + nums[n - 5] == target:\n            return [[nums[0], nums[1], nums[n - 4], nums[n - 5]]]\n        if nums[0] + nums[1] + nums[n - 4] + nums[n - 5] == target:\n            return [[nums[0], nums[1], nums[n - 4], nums[n - 5]]]\n        if nums[0] + nums[2] + nums[3] + nums[n - 1] == target:\n            return [[nums[0], nums[2], nums[3], nums[n - 1]]]\n        if nums[0] + nums[2] + nums[3] + nums[n - 1] == target:\n            return [[nums[0], nums[2], nums[3], nums[n - 1]]]\n        if nums[1] + nums[2] + nums[3] + nums[n - 1] == target:\n            return [[nums[1], nums[2], nums[3], nums[n - 1]]]\n        if nums[1] + nums[2] + nums[3] + nums[n - 1] == target:\n            return [[nums[1], nums[2], nums[3], nums[n - 1]]]\n        if nums[2] + nums[3] + nums[4] == target:\n            return [[nums[2], nums[3], nums[4]]]\n        if nums[2] + nums[3] + nums[4] == target:\n            return [[nums[2], nums[3], nums[4]]]\n        if nums[3] + nums[4] + nums[5] == target:\n            return [[nums[3], nums[4], nums[5]]]\n        if nums[3] + nums[4] + nums["}], "the-skyline-problem": [{"task_id": "the-skyline-problem", "completion": "class Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. sort the buildings by left\n        # 2. use a heap to store the right boundary of the buildings\n        # 3. use a heap to store the height of the buildings\n        # 4. use a heap to store the result\n        \n        # 1. sort the buildings by left\n        buildings.sort(key=lambda x: x[0])\n        \n        # 2. use a heap to store the right boundary of the buildings\n        right_boundary = []\n        # 3. use a heap to store the height of the buildings\n        height = []\n        # 4. use a heap to store the result\n        result = []\n        \n        # 5. iterate over the buildings\n        i = 0\n        n = len(buildings)\n        while i < n or len(right_boundary) > 0:\n            # 6. if the right boundary is empty, add the left boundary of the current building\n            if len(right_boundary) == 0:\n                left, right, height = buildings[i]\n                right_boundary.append((right, height))\n                i += 1\n            else:\n                # 7. if the right boundary is not empty, compare the right boundary of the current building\n                # with the right boundary of the previous building\n                # 8. if the right boundary of the current building is smaller than the right boundary of the previous building,\n                #    add the right boundary of the current building to the right boundary of the previous building\n                # 9. if the right boundary of the current building is larger than the right boundary of the previous building,\n                #    add the right boundary of the current building to the right boundary of the previous building\n                # 10. if the right boundary of the current building is equal to the right boundary of the previous building,\n                #     compare the height of the current building with the height of the previous building\n                #     11. if the height of the current building is larger than the height of the previous building,\n                #         add the current building to the result\n                #     12. if the height of the current building is smaller than the height of the previous building,\n                #         remove the previous building from the right boundary\n                #     13. if the height of the current building is equal to the height of the previous building,\n                #         remove the previous building from the right boundary\n                # 14. if the right boundary of the current building is equal to the right boundary of the previous building,\n                #     remove the previous building from the right boundary\n                # 15. if the right boundary of the current building is not equal to the right boundary of the previous building,\n                #     remove the previous building from the right boundary\n                # 16. if the right boundary of the current building is empty, remove the previous building from the right boundary\n                # 17. if the right boundary of the current building is not empty, compare the right boundary of the current building\n                #     with the right boundary of the previous building\n                #     18. if the right boundary of the current building is smaller than the right boundary of the previous building,\n                #         add the right boundary of the current building to the right boundary of the previous building\n                #     19. if the right boundary of the current building is larger than the right boundary of the previous building,\n                #         add the right boundary of the current building to the right boundary of the previous building\n                #     20. if the right boundary of the current building is equal to the right boundary of the previous building,\n                #         compare the height of the current building with the height of the previous building\n                #         21. if the height of the current building is larger than the height of the previous building,\n                #             add the current building to the result\n                #         22. if the height of the current building is smaller than the height of the previous building,\n                #             remove the previous building from the right boundary\n                #         23. if the height of the current building is equal to the height of the previous building,\n                #             remove the previous building from the right boundary\n                #     24. if the right boundary of the current building is equal to the right boundary of the previous building,\n                #         remove the previous building from the right boundary\n                #     25. if the right boundary of the current building is not equal to the right boundary of the previous building,\n                #         remove the previous building from the right boundary\n                # 26. if the right boundary of the current building is empty, remove the previous building from the right boundary"}], "reverse-string": [{"task_id": "reverse-string", "completion": "class Solution(object):\n    def reverseString(self, s):\n        \"\"\"\n        :type s: List[str]\n        :rtype: None Do not return anything, modify s in-place instead.\n        \"\"\"\n        \n        left, right = 0, len(s) - 1\n        while left < right:\n            s[left], s[right] = s[right], s[left]\n            left += 1\n            right -= 1"}], "reverse-linked-list": [{"task_id": "reverse-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        prev = None\n        curr = head\n        \n        while curr:\n            next = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next\n            \n        return prev"}], "triangle": [{"task_id": "triangle", "completion": "class Solution(object):\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not triangle:\n            return 0\n        \n        dp = triangle[-1]\n        \n        for i in range(len(triangle) - 2, -1, -1):\n            for j in range(len(triangle[i])):\n                dp[j] = min(dp[j], dp[j + 1]) + triangle[i][j]\n        \n        return dp[0]"}], "integer-to-english-words": [{"task_id": "integer-to-english-words", "completion": "class Solution(object):\n    def numberToWords(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return 'Zero'\n        \n        ones = ['', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n        teens = ['Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen', 'Seventeen', 'Eighteen', 'Nineteen']\n        tens = ['', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety']\n        thousands = ['', 'Thousand', 'Million', 'Billion']\n        \n        res = []\n        i = 0\n        while num:\n            if num % 1000:\n                res.append(self.helper(num % 1000))\n                res.append(thousands[i])\n            num //= 1000\n            i += 1\n        return ' '.join(res[::-1]).strip()\n    \n    def helper(self, num):\n        if num == 0:\n            return ''\n        if num < 10:\n            return ones[num]\n        if num < 20:\n            return teens[num - 10]\n        if num < 100:\n            return tens[num // 10] + (' ' + ones[num % 10] if num % 10 else '')\n        return ones[num // 100] + ' Hundred' + (' ' + self.helper(num % 100) if num % 100 else '')"}], "k-inverse-pairs-array": [{"task_id": "k-inverse-pairs-array", "completion": "class Solution(object):\n    def kInversePairs(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-k-1]\n        # dp[i][j] = dp[i][j] + dp[i][j-1] - dp[i][j-k-1]\n        # dp[i][j] = dp[i][j] + dp[i][j-1] - dp[i][j-k-1]\n        # dp[i][j] = dp[i][j] + dp[i][j-1] - dp[i][j-k-1]\n        # dp[i][j] = dp[i][j] + dp[i][j-1] - dp[i][j-k-1]\n        # dp[i][j] = dp[i][j] + dp[i][j-1] - dp[i][j-k-1]\n        # dp[i][j] = dp[i][j] + dp[i][j-1] - dp[i][j-k-1]\n        # dp[i][j] = dp[i][j] + dp[i][j-1] - dp[i][j-k-1]\n        # dp[i][j] = dp[i][j] + dp[i][j-1] - dp[i][j-k-1]\n        # dp[i][j] = dp[i][j] + dp[i][j-1] - dp[i][j-k-1]\n        # dp[i][j] = dp[i][j] + dp[i][j-1] - dp[i][j-k-1]\n        # dp[i][j] = dp[i][j] + dp[i][j-1] - dp[i][j-k-1]\n        # dp[i][j] = dp[i][j] + dp[i][j-1] - dp[i][j-k-1]\n        # dp[i][j] = dp[i][j] + dp[i][j-1] - dp[i][j-k-1]\n        # dp[i][j] = dp[i][j] + dp[i][j-1] - dp[i][j-k-1]\n        # dp[i][j] = dp[i][j] + dp[i][j-1] - dp[i][j-k-1]\n        # dp[i][j] = dp[i][j] + dp[i][j-1] - dp[i][j-k-1]\n        # dp[i][j] = dp[i][j] + dp[i][j-1] - dp[i][j-k-1]\n        # dp[i][j] = dp[i][j] + dp[i][j-1] - dp[i][j-k-1]\n        # dp[i][j] = dp[i][j] + dp[i][j-1] - dp[i][j-k-1]\n        # dp[i][j] = dp[i][j] + dp[i][j-1] - dp[i][j-k-1]\n        # dp[i][j] = dp[i][j] + dp[i][j-1] - dp[i][j-k-1]\n        # dp[i][j] = dp[i][j] + dp[i][j-1] - dp[i][j-k-1]\n        # dp[i][j] = dp[i][j] + dp[i][j-1] - dp[i][j-k-1]\n        # dp[i][j] = dp[i][j] + dp[i][j-1] - dp[i][j-k-1]\n        # dp[i][j] = dp[i][j] +"}], "swap-nodes-in-pairs": [{"task_id": "swap-nodes-in-pairs", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        \n        while prev.next and prev.next.next:\n            first = prev.next\n            second = first.next\n            \n            prev.next = second\n            first.next = second.next\n            second.next = first\n            \n            prev = first\n            \n        return dummy.next"}], "path-sum": [{"task_id": "path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def hasPathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: bool\n        \"\"\"\n        \n        if not root:\n            return False\n        \n        stack = [(root, root.val)]\n        \n        while stack:\n            node, val = stack.pop()\n            \n            if not node.left and not node.right and val == targetSum:\n                return True\n            \n            if node.left:\n                stack.append((node.left, val + node.left.val))\n            \n            if node.right:\n                stack.append((node.right, val + node.right.val))\n        \n        return False"}], "partition-list": [{"task_id": "partition-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def partition(self, head, x):\n        \"\"\"\n        :type head: ListNode\n        :type x: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # create two dummy nodes\n        dummy1 = ListNode(0)\n        dummy2 = ListNode(0)\n        \n        # create two pointers\n        p1 = dummy1\n        p2 = dummy2\n        \n        # traverse the list\n        while head:\n            # if the current node is less than x, add it to the first list\n            if head.val < x:\n                p1.next = head\n                p1 = p1.next\n            # otherwise, add it to the second list\n            else:\n                p2.next = head\n                p2 = p2.next\n            # move to the next node\n            head = head.next\n        \n        # connect the two lists\n        p1.next = dummy2.next\n        p2.next = None\n        \n        return dummy1.next"}], "redundant-connection-ii": [{"task_id": "redundant-connection-ii", "completion": "class Solution(object):\n    def findRedundantDirectedConnection(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. find the node with two parents\n        # 2. find the node with only one parent\n        # 3. find the node with only one child\n        # 4. find the node with two children\n        # 5. find the node with only one child\n        # 6. find the node with only one child\n        # 7. find the node with only one child\n        # 8. find the node with only one child\n        # 9. find the node with only one child\n        # 10. find the node with only one child\n        # 11. find the node with only one child\n        # 12. find the node with only one child\n        # 13. find the node with only one child\n        # 14. find the node with only one child\n        # 15. find the node with only one child\n        # 16. find the node with only one child\n        # 17. find the node with only one child\n        # 18. find the node with only one child\n        # 19. find the node with only one child\n        # 20. find the node with only one child\n        # 21. find the node with only one child\n        # 22. find the node with only one child\n        # 23. find the node with only one child\n        # 24. find the node with only one child\n        # 25. find the node with only one child\n        # 26. find the node with only one child\n        # 27. find the node with only one child\n        # 28. find the node with only one child\n        # 29. find the node with only one child\n        # 30. find the node with only one child\n        # 31. find the node with only one child\n        # 32. find the node with only one child\n        # 33. find the node with only one child\n        # 34. find the node with only one child\n        # 35. find the node with only one child\n        # 36. find the node with only one child\n        # 37. find the node with only one child\n        # 38. find the node with only one child\n        # 39. find the node with only one child\n        # 40. find the node with only one child\n        # 41. find the node with only one child\n        # 42. find the node with only one child\n        # 43. find the node with only one child\n        # 44. find the node with only one child\n        # 45. find the node with only one child\n        # 46. find the node with only one child\n        # 47. find the node with only one child\n        # 48. find the node with only one child\n        # 49. find the node with only one child\n        # 50. find the node with only one child\n        # 51. find the node with only one child\n        # 52. find the node with only one child\n        # 53. find the node with only one child\n        # 54. find the node with only one child\n        # 55. find the node with only one child\n        # 56. find the node with only one child\n        # 57. find the node with only one child\n        # 58. find the node with only one child\n        # 59. find the node with only one child\n        # 60. find the node with only one child\n        # 61. find the node with only one child\n        # 62. find the node with only one child\n        # 63. find the node with only one child\n        # 64. find the node with only one child\n        # 65. find the node with only one child\n        # 66. find the node with only one child\n        # 67. find the node with only one child\n        # 68. find the node with only one child\n        # 69. find the node with only one child\n        # 70. find the node with only one child\n        # 71. find the node with only one child\n        # 72. find the node with only one child\n        # 73. find the node with only one child\n        # 74. find the node with only one child"}], "permutations-ii": [{"task_id": "permutations-ii", "completion": "class Solution(object):\n    def permuteUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        visited = [False] * len(nums)\n        cur = []\n        self.dfs(nums, visited, cur, res)\n        return res\n        \n    def dfs(self, nums, visited, cur, res):\n        if len(cur) == len(nums):\n            res.append(cur[:])\n            return\n        \n        for i in range(len(nums)):\n            if visited[i]:\n                continue\n            if i > 0 and nums[i] == nums[i - 1] and not visited[i - 1]:\n                continue\n            visited[i] = True\n            cur.append(nums[i])\n            self.dfs(nums, visited, cur, res)\n            cur.pop()\n            visited[i] = False"}], "add-digits": [{"task_id": "add-digits", "completion": "class Solution(object):\n    def addDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        if num == 0:\n            return 0\n        if num % 9 == 0:\n            return 9\n        return num % 9"}], "single-number": [{"task_id": "single-number", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## XOR\n        ## 0 ^ 0 = 0\n        ## 0 ^ 1 = 1\n        ## 1 ^ 0 = 1\n        ## 1 ^ 1 = 0\n        ## 0 ^ 1 ^ 1 = 0\n        ## 0 ^ 1 ^ 0 = 1\n        ## 1 ^ 0 ^ 0 = 1\n        ## 1 ^ 0 ^ 1 = 0\n        ## 0 ^ 1 ^ 0 ^ 1 = 1\n        ## 0 ^ 1 ^ 0 ^ 0 = 1\n        ## 1 ^ 0 ^ 1 ^ 0 = 1\n        ## 1 ^ 0 ^ 0 ^ 1 = 1\n        ## 0 ^ 1 ^ 1 ^ 0 = 1\n        ## 0 ^ 1 ^ 1 ^ 1 = 0\n        ## 0 ^ 0 ^ 1 ^ 1 = 1\n        ## 0 ^ 0 ^ 0 ^ 1 = 1\n        ## 1 ^ 1 ^ 0 ^ 0 = 1\n        ## 1 ^ 1 ^ 1 ^ 1 = 0\n        ## 0 ^ 0 ^ 0 ^ 0 = 0\n        ## 0 ^ 0 ^ 1 ^ 0 = 1\n        ## 0 ^ 0 ^ 1 ^ 1 = 0\n        ## 0 ^ 0 ^ 0 ^ 1 = 1\n        ## 0 ^ 0 ^ 0 ^ 0 = 0\n        ## 0 ^ 0 ^ 0 ^ 0 = 0\n        ## 0 ^ 0 ^ 0 ^ 0 = 0\n        ## 0 ^ 0 ^ 0 ^ 0 = 0\n        ## 0 ^ 0 ^ 0 ^ 0 = 0\n        ## 0 ^ 0 ^ 0 ^ 0 = 0\n        ## 0 ^ 0 ^ 0 ^ 0 = 0\n        ## 0 ^ 0 ^ 0 ^ 0 = 0\n        ## 0 ^ 0 ^ 0 ^ 0 = 0\n        ## 0 ^ 0 ^ 0 ^ 0 = 0\n        ## 0 ^ 0 ^ 0 ^ 0 = 0\n        ## 0 ^ 0 ^ 0 ^ 0 = 0\n        ## 0 ^ 0 ^ 0 ^ 0 = 0\n        ## 0 ^ 0 ^ 0 ^ 0 = 0\n        ## 0 ^ 0 ^ 0 ^ 0 = 0\n        ## 0 ^ 0 ^ 0 ^ 0 = 0\n        ## 0 ^ 0 ^ 0 ^ 0 = 0\n        ## 0 ^ 0 ^ 0 ^ 0 = 0\n        ## 0 ^ 0 ^ 0 ^ 0 = 0\n        ## 0 ^ 0 ^ 0 ^ 0 = 0\n        ## 0 ^ 0 ^ 0 ^ 0 = 0\n        ## 0 ^ 0 ^ 0 ^ 0 = 0\n        ## 0 ^ 0 ^ 0 ^ 0 = 0\n        ## 0 ^ 0 ^ 0 ^ 0 = 0\n        ## 0 ^ 0 ^ 0 ^ 0 = 0\n        ## 0 ^ 0 ^ 0 ^ 0 = 0\n        ## 0 ^ 0 ^ 0 ^ 0 = 0\n        ## 0 ^ 0 ^ 0 ^ 0 = 0\n        ## 0 ^ 0 ^ 0 ^ 0 = 0\n        ## 0 ^ 0 ^ 0 ^ 0 = 0\n        ## 0 ^ 0 ^ 0 ^ 0 = 0\n        ## 0 ^ 0 ^ 0 ^ 0 = 0\n        ## 0 ^ 0 ^ 0 ^ 0 = 0\n        ## 0 ^ 0 ^ 0 ^ 0 = 0\n        ## 0 ^ 0 ^ 0 ^ 0 = 0\n        ## 0 ^ 0 ^ 0 ^ 0 = 0\n        ## 0 ^ 0 ^ 0 ^ 0 = 0\n        ## 0 ^ 0 ^ 0 ^ 0 = 0\n        ## 0 ^ 0 ^ 0 ^ 0 = 0\n        ## 0 ^ 0 ^ 0 ^ 0 = 0"}], "length-of-last-word": [{"task_id": "length-of-last-word", "completion": "class Solution(object):\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        ## Solution 1:\n        ## Time: O(n)\n        ## Space: O(1)\n        ## 1. count the number of words\n        ## 2. count the number of characters in the last word\n        ## 3. return the number of characters in the last word\n        ## 4. if the last word is empty, return 0\n        \n        ## 1. count the number of words\n        words = 0\n        for c in s:\n            if c == ' ':\n                words += 1\n            elif words == 0:\n                words = 1\n            else:\n                words += 1\n        \n        ## 2. count the number of characters in the last word\n        last_word_len = 0\n        for c in s[::-1]:\n            if c == ' ':\n                break\n            last_word_len += 1\n        \n        ## 3. return the number of characters in the last word\n        return last_word_len if last_word_len else 0"}], "cherry-pickup": [{"task_id": "cherry-pickup", "completion": "class Solution(object):\n    def cherryPickup(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        dp = [[[0] * n for _ in range(n)] for _ in range(n)]\n        dp[0][0][0] = grid[0][0]\n        if grid[0][0] == -1 or grid[n - 1][n - 1] == -1:\n            return 0\n        for i in range(1, n):\n            for j in range(max(i, n - 1)):\n                if grid[i][j] == -1:\n                    break\n                dp[i][j][0] = dp[i - 1][j][0] + grid[i][j]\n            for j in range(max(i, n - 1), n):\n                if grid[i][j] == -1:\n                    break\n                dp[i][j][0] = dp[i - 1][j][0] + grid[i][j]\n            for j in range(1, n):\n                if grid[i][j] == -1:\n                    break\n                dp[i][j][0] = max(dp[i][j][0], dp[i - 1][j][0] + grid[i][j])\n        for j in range(1, n):\n            for i in range(n - 1):\n                if grid[i][j] == -1:\n                    break\n                dp[i][j][1] = dp[i][j - 1][0] + grid[i][j]\n            for i in range(n - 1, 0, -1):\n                if grid[i][j] == -1:\n                    break\n                dp[i][j][1] = max(dp[i][j][1], dp[i][j - 1][0] + grid[i][j])\n            for i in range(n - 2, -1, -1):\n                if grid[i][j] == -1:\n                    break\n                dp[i][j][1] = max(dp[i][j][1], dp[i + 1][j][1] + grid[i][j])\n        ans = dp[n - 1][n - 1][0]\n        if grid[n - 1][n - 1] > 0:\n            ans += grid[n - 1][n - 1]\n        return ans"}], "student-attendance-record-ii": [{"task_id": "student-attendance-record-ii", "completion": "class Solution(object):\n    def checkRecord(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        MOD = 10**9 + 7\n        dp = [0, 1, 2]\n        if n < 3:\n            return dp[n]\n        a, l, p = 1, 2, 3\n        for i in range(3, n + 1):\n            a, l, p = (a + l + p) % MOD, (a + l) % MOD, p\n        return (a + l + p) % MOD"}], "happy-number": [{"task_id": "happy-number", "completion": "class Solution(object):\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        seen = set()\n        while n not in seen:\n            seen.add(n)\n            n = sum(int(d)**2 for d in str(n))\n            if n == 1:\n                return True\n        return False"}], "search-insert-position": [{"task_id": "search-insert-position", "completion": "class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        if target in nums:\n            return nums.index(target)\n        else:\n            nums.append(target)\n            nums.sort()\n            return nums.index(target)"}], "jump-game": [{"task_id": "jump-game", "completion": "class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. Greedy\n        # 2. DP\n        # 3. BFS\n        # 4. DFS\n        # 5. Binary Search\n        # 6. Two Pointers\n        # 7. Heap\n        # 8. Graph\n        # 9. Math\n        # 10. Sort\n        # 11. Bit Manipulation\n        # 12. Two Pointers\n        # 13. Binary Search\n        # 14. Binary Search\n        # 15. Binary Search\n        # 16. Binary Search\n        # 17. Binary Search\n        # 18. Binary Search\n        # 19. Binary Search\n        # 20. Binary Search\n        # 21. Binary Search\n        # 22. Binary Search\n        # 23. Binary Search\n        # 24. Binary Search\n        # 25. Binary Search\n        # 26. Binary Search\n        # 27. Binary Search\n        # 28. Binary Search\n        # 29. Binary Search\n        # 30. Binary Search\n        # 31. Binary Search\n        # 32. Binary Search\n        # 33. Binary Search\n        # 34. Binary Search\n        # 35. Binary Search\n        # 36. Binary Search\n        # 37. Binary Search\n        # 38. Binary Search\n        # 39. Binary Search\n        # 40. Binary Search\n        # 41. Binary Search\n        # 42. Binary Search\n        # 43. Binary Search\n        # 44. Binary Search\n        # 45. Binary Search\n        # 46. Binary Search\n        # 47. Binary Search\n        # 48. Binary Search\n        # 49. Binary Search\n        # 50. Binary Search\n        # 51. Binary Search\n        # 52. Binary Search\n        # 53. Binary Search\n        # 54. Binary Search\n        # 55. Binary Search\n        # 56. Binary Search\n        # 57. Binary Search\n        # 58. Binary Search\n        # 59. Binary Search\n        # 60. Binary Search\n        # 61. Binary Search\n        # 62. Binary Search\n        # 63. Binary Search\n        # 64. Binary Search\n        # 65. Binary Search\n        # 66. Binary Search\n        # 67. Binary Search\n        # 68. Binary Search\n        # 69. Binary Search\n        # 70. Binary Search\n        # 71. Binary Search\n        # 72. Binary Search\n        # 73. Binary Search\n        # 74. Binary Search\n        # 75. Binary Search\n        # 76. Binary Search\n        # 77. Binary Search\n        # 78. Binary Search\n        # 79. Binary Search\n        # 80. Binary Search\n        # 81. Binary Search\n        # 82. Binary Search\n        # 83. Binary Search\n        # 84. Binary Search\n        # 85. Binary Search\n        # 86. Binary Search\n        # 87. Binary Search\n        # 88. Binary Search\n        # 89. Binary Search\n        # 90. Binary Search\n        # 91. Binary Search\n        # 92. Binary Search\n        # 93. Binary Search\n        # 94. Binary Search\n        # 95. Binary Search\n        # 96. Binary Search\n        # 97. Binary Search\n        # 98. Binary Search\n        # 99. Binary Search\n        # 100. Binary Search\n        # 101. Binary Search\n        # 102. Binary Search\n        # 103. Binary Search\n        # 104."}], "minimum-path-sum": [{"task_id": "minimum-path-sum", "completion": "class Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(grid)\n        n = len(grid[0])\n        \n        dp = [[0] * n for _ in range(m)]\n        \n        dp[0][0] = grid[0][0]\n        \n        for i in range(1, m):\n            dp[i][0] = dp[i - 1][0] + grid[i][0]\n        \n        for j in range(1, n):\n            dp[0][j] = dp[0][j - 1] + grid[0][j]\n        \n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j]\n        \n        return dp[-1][-1]"}], "count-and-say": [{"task_id": "count-and-say", "completion": "class Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        \n        if n == 1:\n            return '1'\n        \n        res = '1'\n        curr = '1'\n        count = 1\n        for i in range(2, n + 1):\n            curr = res\n            res = ''\n            count = 1\n            for j in range(1, len(curr)):\n                if curr[j] == curr[j - 1]:\n                    count += 1\n                else:\n                    res += str(count) + curr[j - 1]\n                    count = 1\n            res += str(count) + curr[-1]\n        return res"}], "split-array-largest-sum": [{"task_id": "split-array-largest-sum", "completion": "class Solution(object):\n    def splitArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # binary search\n        # find the max sum\n        # find the min sum\n        # binary search\n        # find the mid\n        # find the number of subarrays\n        # if number of subarrays > k, then the max sum is too big\n        # if number of subarrays < k, then the max sum is too small\n        # if number of subarrays == k, then the max sum is too small\n        # if number of subarrays == k + 1, then the max sum is too big\n        # if number of subarrays > k + 1, then the max sum is too big\n        # if number of subarrays < k + 1, then the max sum is too small\n        # if number of subarrays == k + 1, then the max sum is too small\n        # if number of subarrays > k + 1, then the max sum is too big\n        # if number of subarrays < k + 1, then the max sum is too small\n        # if number of subarrays == k + 1, then the max sum is too small\n        # if number of subarrays > k + 1, then the max sum is too big\n        # if number of subarrays < k + 1, then the max sum is too small\n        # if number of subarrays == k + 1, then the max sum is too small\n        # if number of subarrays > k + 1, then the max sum is too big\n        # if number of subarrays < k + 1, then the max sum is too small\n        # if number of subarrays == k + 1, then the max sum is too small\n        # if number of subarrays > k + 1, then the max sum is too big\n        # if number of subarrays < k + 1, then the max sum is too small\n        # if number of subarrays == k + 1, then the max sum is too small\n        # if number of subarrays > k + 1, then the max sum is too big\n        # if number of subarrays < k + 1, then the max sum is too small\n        # if number of subarrays == k + 1, then the max sum is too small\n        # if number of subarrays > k + 1, then the max sum is too big\n        # if number of subarrays < k + 1, then the max sum is too small\n        # if number of subarrays == k + 1, then the max sum is too small\n        # if number of subarrays > k + 1, then the max sum is too big\n        # if number of subarrays < k + 1, then the max sum is too small\n        # if number of subarrays == k + 1, then the max sum is too small\n        # if number of subarrays > k + 1, then the max sum is too big\n        # if number of subarrays < k + 1, then the max sum is too small\n        # if number of subarrays == k + 1, then the max sum is too small\n        # if number of subarrays > k + 1, then the max sum is too big\n        # if number of subarrays < k + 1, then the max sum is too small\n        # if number of subarrays == k + 1, then the max sum is too small\n        # if number of subarrays > k + 1, then the max sum is too big\n        # if number of subarrays < k + 1, then the max sum is too small\n        # if number of subarrays == k + 1, then the max sum is too small\n        # if number of subarrays > k + 1, then the max sum is too big\n        # if number of subarrays < k + 1, then the max sum is too small\n        # if number of subarrays == k + 1, then the max sum is too small\n        # if number of subarrays > k + 1, then the max sum is too big\n        # if number of subarrays < k + 1, then the max sum is too small\n        # if number of subarrays == k + 1, then the max sum is too small\n        # if number of subarrays > k + 1, then the max sum is too big\n        # if number of subarrays < k + 1, then the max sum is too small\n        # if number of subarrays == k + 1, then the max sum is too small\n        # if number of subarrays > k + 1, then the max sum is too big\n        # if"}], "search-in-rotated-sorted-array": [{"task_id": "search-in-rotated-sorted-array", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        # find the pivot\n        left, right = 0, len(nums) - 1\n        while left < right:\n            mid = left + (right - left) // 2\n            if nums[mid] > nums[right]:\n                left = mid + 1\n            else:\n                right = mid\n        pivot = left\n        \n        # find the target\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[(mid + pivot) % len(nums)] == target:\n                return (mid + pivot) % len(nums)\n            elif nums[(mid + pivot) % len(nums)] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return -1"}], "letter-combinations-of-a-phone-number": [{"task_id": "letter-combinations-of-a-phone-number", "completion": "class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        \n        if not digits:\n            return []\n        \n        digit_to_letters = {\n            '2': 'abc',\n            '3': 'def',\n            '4': 'ghi',\n            '5': 'jkl',\n            '6': 'mno',\n            '7': 'pqrs',\n            '8': 'tuv',\n            '9': 'wxyz',\n        }\n        \n        res = ['']\n        for digit in digits:\n            res = [x + y for x in res for y in digit_to_letters[digit]]\n        return res"}], "combination-sum": [{"task_id": "combination-sum", "completion": "class Solution(object):\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        res = []\n        path = []\n        self.dfs(candidates, target, 0, path, res)\n        return res\n        \n    def dfs(self, candidates, target, start, path, res):\n        if target == 0:\n            res.append(path[:])\n            return\n        for i in xrange(start, len(candidates)):\n            if candidates[i] > target:\n                break\n            if i > start and candidates[i] == candidates[i - 1]:\n                continue\n            path.append(candidates[i])\n            self.dfs(candidates, target - candidates[i], i + 1, path, res)\n            path.pop()"}], "find-the-closest-palindrome": [{"task_id": "find-the-closest-palindrome", "completion": "class Solution(object):\n    def nearestPalindromic(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. get the length of n\n        # 2. get the number of digits\n        # 3. get the number of digits\n        # 4. get the number of digits\n        # 5. get the number of digits\n        # 6. get the number of digits\n        # 7. get the number of digits\n        # 8. get the number of digits\n        # 9. get the number of digits\n        # 10. get the number of digits\n        # 11. get the number of digits\n        # 12. get the number of digits\n        # 13. get the number of digits\n        # 14. get the number of digits\n        # 15. get the number of digits\n        # 16. get the number of digits\n        # 17. get the number of digits\n        # 18. get the number of digits\n        # 19. get the number of digits\n        # 20. get the number of digits\n        # 21. get the number of digits\n        # 22. get the number of digits\n        # 23. get the number of digits\n        # 24. get the number of digits\n        # 25. get the number of digits\n        # 26. get the number of digits\n        # 27. get the number of digits\n        # 28. get the number of digits\n        # 29. get the number of digits\n        # 30. get the number of digits\n        # 31. get the number of digits\n        # 32. get the number of digits\n        # 33. get the number of digits\n        # 34. get the number of digits\n        # 35. get the number of digits\n        # 36. get the number of digits\n        # 37. get the number of digits\n        # 38. get the number of digits\n        # 39. get the number of digits\n        # 40. get the number of digits\n        # 41. get the number of digits\n        # 42. get the number of digits\n        # 43. get the number of digits\n        # 44. get the number of digits\n        # 45. get the number of digits\n        # 46. get the number of digits\n        # 47. get the number of digits\n        # 48. get the number of digits\n        # 49. get the number of digits\n        # 50. get the number of digits\n        # 51. get the number of digits\n        # 52. get the number of digits\n        # 53. get the number of digits\n        # 54. get the number of digits\n        # 55. get the number of digits\n        # 56. get the number of digits\n        # 57. get the number of digits\n        # 58. get the number of digits\n        # 59. get the number of digits\n        # 60. get the number of digits\n        # 61. get the number of digits\n        # 62. get the number of digits\n        # 63. get the number of digits\n        # 64. get the number of digits\n        # 65. get the number of digits\n        # 66. get the number of digits\n        # 67. get the number of digits\n        # 68. get the number of digits\n        # 69. get the number of digits\n        # 70. get the number of digits\n        # 71. get the number of digits\n        # 72. get the number of digits\n        # 73. get the number of digits\n        # 74. get the number of digits\n        # 75. get the number of digits\n        # 76. get the number of digits\n        # 77. get the number of digits\n        # 78. get the number of digits\n        # 79. get the number of digits\n        # 80. get"}], "spiral-matrix-ii": [{"task_id": "spiral-matrix-ii", "completion": "class Solution(object):\n    def generateMatrix(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if n == 0:\n            return []\n        \n        matrix = [[0] * n for _ in range(n)]\n        num = 1\n        left, right, top, bottom = 0, n - 1, 0, n - 1\n        while left <= right and top <= bottom:\n            for i in range(left, right + 1):\n                matrix[top][i] = num\n                num += 1\n            top += 1\n            for i in range(top, bottom + 1):\n                matrix[i][right] = num\n                num += 1\n            right -= 1\n            for i in range(right, left - 1, -1):\n                matrix[bottom][i] = num\n                num += 1\n            bottom -= 1\n            for i in range(bottom, top - 1, -1):\n                matrix[i][left] = num\n                num += 1\n            left += 1\n        return matrix"}], "reverse-integer": [{"task_id": "reverse-integer", "completion": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x < 0:\n            sign = -1\n        else:\n            sign = 1\n        x = abs(x)\n        res = 0\n        while x:\n            res = res * 10 + x % 10\n            x //= 10\n        res = res * sign\n        if res > 2**31 - 1 or res < -2**31:\n            return 0\n        return res"}], "rotate-image": [{"task_id": "rotate-image", "completion": "class Solution(object):\n    def rotate(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        n = len(matrix)\n        if n == 1:\n            return\n        \n        # 1. transpose\n        for i in range(n):\n            for j in range(i, n):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n        \n        # 2. reverse each row\n        for i in range(n):\n            matrix[i].reverse()\n        \n        return matrix"}], "maximum-product-subarray": [{"task_id": "maximum-product-subarray", "completion": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if not nums:\n            return 0\n        \n        max_prod = nums[0]\n        min_prod = nums[0]\n        res = nums[0]\n        \n        for i in range(1, len(nums)):\n            curr_max = max_prod\n            curr_min = min_prod\n            \n            max_prod = max(nums[i], nums[i] * curr_max, nums[i] * curr_min)\n            min_prod = min(nums[i], nums[i] * curr_max, nums[i] * curr_min)\n            \n            res = max(res, max_prod)\n            \n        return res"}], "frog-jump": [{"task_id": "frog-jump", "completion": "class Solution(object):\n    def canCross(self, stones):\n        \"\"\"\n        :type stones: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. build a dict to store the stone position and its index\n        stone_pos_to_index = {stone: i for i, stone in enumerate(stones)}\n        if stones[-1] != stones[-2]:\n            return False\n        \n        # 2. build a dict to store the stone position and its jump steps\n        stone_pos_to_jump_steps = {stone: set() for stone in stones}\n        stone_pos_to_jump_steps[stones[0]].add(1)\n        \n        # 3. build a dict to store the stone position and its jump steps\n        stone_pos_to_jump_steps_to_index = {stone: set() for stone in stones}\n        stone_pos_to_jump_steps_to_index[stones[0]].add(0)\n        \n        # 4. build a dict to store the stone position and its jump steps\n        stone_pos_to_jump_steps_to_index_to_index = {stone: set() for stone in stones}\n        stone_pos_to_jump_steps_to_index_to_index[stones[0]].add(0)\n        \n        # 5. build a dict to store the stone position and its jump steps\n        stone_pos_to_jump_steps_to_index_to_index_to_index = {stone: set() for stone in stones}\n        stone_pos_to_jump_steps_to_index_to_index_to_index[stones[0]].add(0)\n        \n        # 6. build a dict to store the stone position and its jump steps\n        stone_pos_to_jump_steps_to_index_to_index_to_index_to_index = {stone: set() for stone in stones}\n        stone_pos_to_jump_steps_to_index_to_index_to_index_to_index[stones[0]].add(0)\n        \n        # 7. build a dict to store the stone position and its jump steps\n        stone_pos_to_jump_steps_to_index_to_index_to_index_to_index_to_index = {stone: set() for stone in stones}\n        stone_pos_to_jump_steps_to_index_to_index_to_index_to_index_to_index[stones[0]].add(0)\n        \n        # 8. build a dict to store the stone position and its jump steps\n        stone_pos_to_jump_steps_to_index_to_index_to_index_to_index_to_index_to_index = {stone: set() for stone in stones}\n        stone_pos_to_jump_steps_to_index_to_index_to_index_to_index_to_index_to_index[stones[0]].add(0)\n        \n        # 9. build a dict to store the stone position and its jump steps\n        stone_pos_to_jump_steps_to_index_to_index_to_index_to_index_to_index_to_index_to_index = {stone: set() for stone in stones}\n        stone_pos_to_jump_steps_to_index_to_index_to_index_to_index_to_index_to_index_to_index[stones[0]].add(0)\n        \n        # 10. build a dict to store the stone position and its jump steps\n        stone_pos_to_jump_steps_to_index_to_index_to_index_to_index_to_index_to_index_to_index_to_index = {stone: set() for stone in stones}\n        stone_pos_to_jump_steps_to_index_to_index_to_index_to_index_to_index_to_index_to_index_to_index[stones[0]].add(0)\n        \n        # 11. build a dict to store the stone position and its jump steps\n        stone_pos_to_jump_steps_to_index_to_index_to_index_to_index_to_index_to_index_to_index_to_index_to_index = {stone: set() for stone in stones}\n        stone"}], "relative-ranks": [{"task_id": "relative-ranks", "completion": "class Solution(object):\n    def findRelativeRanks(self, score):\n        \"\"\"\n        :type score: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. sort the score\n        # 2. use hashmap to record the index\n        # 3. use hashmap to record the value\n        # 4. use hashmap to record the index\n        # 5. use hashmap to record the value\n        # 6. use hashmap to record the index\n        # 7. use hashmap to record the value\n        # 8. use hashmap to record the index\n        # 9. use hashmap to record the value\n        # 10. use hashmap to record the index\n        # 11. use hashmap to record the value\n        # 12. use hashmap to record the index\n        # 13. use hashmap to record the value\n        # 14. use hashmap to record the index\n        # 15. use hashmap to record the value\n        # 16. use hashmap to record the index\n        # 17. use hashmap to record the value\n        # 18. use hashmap to record the index\n        # 19. use hashmap to record the value\n        # 20. use hashmap to record the index\n        # 21. use hashmap to record the value\n        # 22. use hashmap to record the index\n        # 23. use hashmap to record the value\n        # 24. use hashmap to record the index\n        # 25. use hashmap to record the value\n        # 26. use hashmap to record the index\n        # 27. use hashmap to record the value\n        # 28. use hashmap to record the index\n        # 29. use hashmap to record the value\n        # 30. use hashmap to record the index\n        # 31. use hashmap to record the value\n        # 32. use hashmap to record the index\n        # 33. use hashmap to record the value\n        # 34. use hashmap to record the index\n        # 35. use hashmap to record the value\n        # 36. use hashmap to record the index\n        # 37. use hashmap to record the value\n        # 38. use hashmap to record the index\n        # 39. use hashmap to record the value\n        # 40. use hashmap to record the index\n        # 41. use hashmap to record the value\n        # 42. use hashmap to record the index\n        # 43. use hashmap to record the value\n        # 44. use hashmap to record the index\n        # 45. use hashmap to record the value\n        # 46. use hashmap to record the index\n        # 47. use hashmap to record the value\n        # 48. use hashmap to record the index\n        # 49. use hashmap to record the value\n        # 50. use hashmap to record the index\n        # 51. use hashmap to record the value\n        # 52. use hashmap to record the index\n        # 53. use hashmap to record the value\n        # 54. use hashmap to record the index\n        # 55. use hashmap to record the value\n        # 56. use hashmap to record the index\n        # 57. use hashmap to record the value\n        # 58. use hashmap to record the index\n        # 59. use hashmap to record the value\n        # 60. use hashmap to record the index\n        # 61. use hashmap to record the value\n        # 62. use hashmap to record the index\n        # 63. use hashmap to record the value\n        # 64. use hashmap to record the index\n        # 65. use hashmap to record the value\n        # 66. use hashmap to record the index\n        # 67. use hashmap to record the value\n        # 68. use hashmap to record the index\n        # 69. use hashmap to record the value\n        # 70. use hashmap to record the index\n        # 71. use hashmap to record the value\n        # 72. use hashmap to record the index\n        # 73. use hashmap to record the value\n        # 74. use hashmap to record the index"}], "longest-substring-without-repeating-characters": [{"task_id": "longest-substring-without-repeating-characters", "completion": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if len(s) == 0:\n            return 0\n        \n        max_len = 1\n        start = 0\n        end = 0\n        char_map = {}\n        \n        while end < len(s):\n            if s[end] in char_map:\n                start = max(start, char_map[s[end]] + 1)\n            max_len = max(max_len, end - start + 1)\n            char_map[s[end]] = end\n            end += 1\n        \n        return max_len"}], "substring-with-concatenation-of-all-words": [{"task_id": "substring-with-concatenation-of-all-words", "completion": "class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not words:\n            return []\n        \n        word_len = len(words[0])\n        word_num = len(words)\n        word_dict = collections.Counter(words)\n        word_total = len(words) * word_len\n        word_count = collections.defaultdict(int)\n        res = []\n        s_len = len(s)\n        \n        if s_len < word_total:\n            return res\n        \n        for i in range(word_len):\n            left = i\n            right = i\n            word_count.clear()\n            while right + word_len <= s_len:\n                word = s[right:right + word_len]\n                right += word_len\n                if word in word_dict:\n                    word_count[word] += 1\n                    if word_count[word] <= word_dict[word]:\n                        word_count[word] -= 1\n                    else:\n                        while s[left:left + word_len] != word:\n                            word_count[s[left:left + word_len]] -= 1\n                            left += word_len\n                        left += word_len\n                else:\n                    left = right\n                    word_count.clear()\n            if right - left == s_len:\n                res.append(left)\n        \n        return res"}], "max-chunks-to-make-sorted-ii": [{"task_id": "max-chunks-to-make-sorted-ii", "completion": "class Solution(object):\n    def maxChunksToSorted(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. find the max element in the array\n        # 2. find the min element in the array\n        # 3. if the max element is less than the min element, return 1\n        # 4. else, return the number of chunks\n        \n        max_num = max(arr)\n        min_num = min(arr)\n        if max_num < min_num:\n            return 1\n        else:\n            return len(set(arr))"}], "insertion-sort-list": [{"task_id": "insertion-sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def insertionSortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        cur = head\n        while cur:\n            if cur.next and cur.val > cur.next.val:\n                prev = dummy\n                while prev.next and prev.next.val < cur.next.val:\n                    prev = prev.next\n                cur.next, cur.next.next, prev.next = cur.next.next, cur, prev.next\n            else:\n                cur = cur.next\n        return dummy.next"}], "remove-duplicates-from-sorted-list-ii": [{"task_id": "remove-duplicates-from-sorted-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        curr = head\n        \n        while curr:\n            if curr.next and curr.val == curr.next.val:\n                while curr.next and curr.val == curr.next.val:\n                    curr = curr.next\n                prev.next = curr.next\n            else:\n                prev = curr\n            curr = curr.next\n        \n        return dummy.next"}], "3sum": [{"task_id": "3sum", "completion": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        n = len(nums)\n        if n < 3:\n            return res\n        \n        for i in range(n - 2):\n            if nums[i] > 0:\n                break\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            l, r = i + 1, n - 1\n            while l < r:\n                s = nums[i] + nums[l] + nums[r]\n                if s < 0:\n                    l += 1\n                elif s > 0:\n                    r -= 1\n                else:\n                    res.append([nums[i], nums[l], nums[r]])\n                    while l < r and nums[l] == nums[l + 1]:\n                        l += 1\n                    while l < r and nums[r] == nums[r - 1]:\n                        r -= 1\n                    l += 1\n                    r -= 1\n        return res"}], "edit-distance": [{"task_id": "edit-distance", "completion": "class Solution(object):\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(word1), len(word2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        \n        for i in range(m + 1):\n            dp[i][0] = i\n        for j in range(n + 1):\n            dp[0][j] = j\n        \n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if word1[i - 1] == word2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = min(dp[i - 1][j - 1] + 1, dp[i][j - 1] + 1, dp[i - 1][j] + 1)\n        \n        return dp[m][n]"}], "hamming-distance": [{"task_id": "hamming-distance", "completion": "class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        \n        xor = x ^ y\n        count = 0\n        while xor:\n            count += 1\n            xor &= xor - 1\n        return count"}], "binary-tree-paths": [{"task_id": "binary-tree-paths", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        paths = []\n        path = []\n        self.dfs(root, paths, path)\n        return paths\n        \n    def dfs(self, root, paths, path):\n        if not root.left and not root.right:\n            path.append(str(root.val))\n            paths.append('->'.join(path))\n            path.pop()\n            return\n        \n        if root.left:\n            path.append(str(root.val))\n            self.dfs(root.left, paths, path)\n            path.pop()\n        \n        if root.right:\n            path.append(str(root.val))\n            self.dfs(root.right, paths, path)\n            path.pop()"}], "reverse-pairs": [{"task_id": "reverse-pairs", "completion": "class Solution(object):\n    def reversePairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "reaching-points": [{"task_id": "reaching-points", "completion": "class Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        \n        while tx > sx and ty > sy:\n            if tx > ty:\n                tx %= ty\n            else:\n                ty %= tx\n        return (sx == tx and sy <= ty and (ty - sy) % sx == 0) or (sy == ty and sx <= tx and (tx - sx) % sy == 0\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        if tx < sx or ty < sy:\n            return False\n        if sx == tx and sy == ty:\n            return True\n        if sy > tx:\n            return (ty - sy) % sx == 0 and (ty - sy) % sx >= 0\n        if sx > ty:\n            return (tx - sx) % sy == 0 and (tx - sx) % sy >= 0\n        return False\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        if sy > tx or sx > ty:\n            return False\n        if sy == tx and sx == ty:\n            return True\n        if sy > tx:\n            return (ty - sy) % sx == 0 and (ty - sy) % sx >= 0\n        if sx > ty:\n            return (tx - sx) % sy == 0 and (tx - sx) % sy >= 0\n        return False\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        if sy > tx or sx > ty:\n            return False\n        if sy == tx and sx == ty:\n            return True\n        if sy > tx:\n            return (ty - sy) % sx == 0 and (ty - sy) % sx >= 0\n        if sx > ty:\n            return (tx - sx) % sy == 0 and (tx - sx) % sy >= 0\n        return False\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        if sy > tx or sx > ty:\n            return False\n        if sy == tx and sx == ty:\n            return True\n        if sy > tx:\n            return (ty - sy) % sx == 0 and (ty - sy) % sx >= 0\n        if sx > ty:\n            return (tx - sx) % sy == 0 and (tx - sx) % sy >= 0\n        return False\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        if sy > tx or sx > ty:\n            return False\n        if sy == tx and sx == ty:\n            return True\n        if sy > tx:\n            return (ty - sy) % sx == 0 and (ty - sy) % sx >= 0\n        if sx > ty:\n            return (tx - sx) % sy == 0 and (tx - sx) % sy >= 0\n        return False\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        if sy > tx or sx > ty:\n            return False\n        if sy == tx and sx == ty:\n            return True\n        if sy > tx:\n            return (ty - sy) % sx == 0 and (ty - sy) % sx >= 0\n        if sx > ty:\n            return (tx - sx) % sy == 0 and (tx - sx) % sy >= 0\n        return False\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        if sy > tx or sx > ty:\n            return False\n        if sy == tx and sx == ty:\n            return True\n        if sy > tx:\n            return (ty - sy) % sx == 0 and (ty - sy"}], "compare-version-numbers": [{"task_id": "compare-version-numbers", "completion": "class Solution(object):\n    def compareVersion(self, version1, version2):\n        \"\"\"\n        :type version1: str\n        :type version2: str\n        :rtype: int\n        \"\"\"\n        \n        v1 = [int(x) for x in version1.split('.')]\n        v2 = [int(x) for x in version2.split('.')]\n        \n        for i in range(max(len(v1), len(v2))):\n            v1_i = v1[i] if i < len(v1) else 0\n            v2_i = v2[i] if i < len(v2) else 0\n            if v1_i > v2_i:\n                return 1\n            if v1_i < v2_i:\n                return -1\n        return 0"}], "best-time-to-buy-and-sell-stock-ii": [{"task_id": "best-time-to-buy-and-sell-stock-ii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## 1. \n        ## 2. \n        ## 3. \n        ## 4. \n        ## 5. \n        ## 6. \n        ## 7. \n        ## 8. \n        ## 9. \n        ## 10. \n        ## 11. \n        ## 12. \n        ## 13. \n        ## 14. \n        ## 15. \n        ## 16. \n        ## 17. \n        ## 18. \n        ## 19. \n        ## 20. \n        ## 21. \n        ## 22. \n        ## 23. \n        ## 24. \n        ## 25. \n        ## 26. \n        ## 27. \n        ## 28. \n        ## 29. \n        ## 30. \n        ## 31. \n        ## 32. \n        ## 33. \n        ## 34. \n        ## 35. \n        ## 36. \n        ## 37. \n        ## 38. \n        ## 39. \n        ## 40. \n        ## 41. \n        ## 42. \n        ## 43. \n        ## 44. \n        ## 45. \n        ## 46. \n        ## 47. \n        ## 48. \n        ## 49. \n        ## 50. \n        ## 51. \n        ## 52. \n        ## 53. \n        ## 54. \n        ## 55. \n        ## 56. \n        ## 57. \n        ## 58. \n        ## 59. \n        ## 60. \n        ## 61. \n        ## 62. \n        ## 63. \n        ## 64. \n        ## 65. \n        ## 66. \n        ## 67. \n        ## 68. \n        ## 69. \n        ## 70. \n        ## 71. \n        ## 72. \n        ## 73. \n        ## 74. \n        ## 75. \n        ## 76. \n        ## 77. \n        ## 78. \n        ## 79. \n        ## 80. \n        ## 81. \n        ## 82. \n        ## 83. \n        ## 84. \n        ## 85. \n        ## 86. \n        ## 87. \n        ## 88. \n        ## 89. \n        ## 90. \n        ## 91. \n        ## 92. \n        ## 93. \n        ## 94. \n        ## 95. \n        ## 96. \n        ## 97. \n        ## 98. \n        ## 99. \n        ## 100. \n        ## 101. \n        ## 102. \n        ## 103. \n        ## 104. \n        ## 105. \n        ## 106. \n        ## 107. \n        ## 108. \n        ## 109. \n        ## 110. \n        ## 111. \n        ## 112. \n        ## 113. \n        #"}], "course-schedule-iii": [{"task_id": "course-schedule-iii", "completion": "class Solution(object):\n    def scheduleCourse(self, courses):\n        \"\"\"\n        :type courses: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # sort by end time\n        courses.sort(key=lambda x: x[1])\n        # min heap\n        pq = []\n        # total time\n        total = 0\n        # courses taken\n        taken = 0\n        # iterate over courses\n        for duration, end in courses:\n            # add course to pq\n            heapq.heappush(pq, (-duration, end))\n            # update total\n            total += duration\n            # if total exceeds end time\n            if total > end:\n                # remove course with smallest duration\n                total += heapq.heappop(pq)[0]\n                # update taken\n                taken -= 1\n            # update taken\n            taken += 1\n        # return taken\n        return taken"}], "reverse-nodes-in-k-group": [{"task_id": "reverse-nodes-in-k-group", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseKGroup(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or k < 2:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        cur = head\n        count = 0\n        \n        while cur:\n            count += 1\n            if count % k == 0:\n                prev = self.reverse(prev, cur.next)\n                cur = prev.next\n            else:\n                cur = cur.next\n        \n        return dummy.next\n    \n    def reverse(self, prev, tail):\n        cur = prev.next\n        prev.next = None\n        while cur:\n            nxt = cur.next\n            cur.next = prev.next\n            prev.next = cur\n            cur = nxt\n        return tail"}], "repeated-substring-pattern": [{"task_id": "repeated-substring-pattern", "completion": "class Solution(object):\n    def repeatedSubstringPattern(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) < 2:\n            return False\n        \n        n = len(s)\n        for i in range(n // 2):\n            if n % (i + 1) == 0:\n                if s[:i + 1] * (n // (i + 1)) == s:\n                    return True\n        return False"}], "unique-binary-search-trees": [{"task_id": "unique-binary-search-trees", "completion": "class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # dp[i] = dp[i-1] * 2 * dp[n-i]\n        # dp[0] = 1, dp[1] = 1\n        # dp[2] = dp[0] * dp[1] + dp[1] * dp[0]\n        # dp[3] = dp[0] * dp[2] + dp[1] * dp[1] + dp[2] * dp[0]\n        # dp[4] = dp[0] * dp[3] + dp[1] * dp[2] + dp[2] * dp[1] + dp[3] * dp[0]\n        # dp[5] = dp[0] * dp[4] + dp[1] * dp[3] + dp[2] * dp[2] + dp[3] * dp[1] + dp[4] * dp[0]\n        # dp[6] = dp[0] * dp[5] + dp[1] * dp[4] + dp[2] * dp[3] + dp[3] * dp[2] + dp[4] * dp[1] + dp[5] * dp[0]\n        # dp[7] = dp[0] * dp[6] + dp[1] * dp[5] + dp[2] * dp[4] + dp[3] * dp[3] + dp[4] * dp[2] + dp[5] * dp[1] + dp[6] * dp[0]\n        # dp[8] = dp[0] * dp[7] + dp[1] * dp[6] + dp[2] * dp[5] + dp[3] * dp[4] + dp[4] * dp[3] + dp[5] * dp[2] + dp[6] * dp[1] + dp[7] * dp[0]\n        # dp[9] = dp[0] * dp[8] + dp[1] * dp[7] + dp[2] * dp[6] + dp[3] * dp[5] + dp[4] * dp[4] + dp[5] * dp[3] + dp[6] * dp[2] + dp[7] * dp[1] + dp[8] * dp[0]\n        # dp[10] = dp[0] * dp[9] + dp[1] * dp[8] + dp[2] * dp[7] + dp[3] * dp[6] + dp[4] * dp[5] + dp[5] * dp[4] + dp[6] * dp[3] + dp[7] * dp[2] + dp[8] * dp[1] + dp[9] * dp[0]\n        # dp[11] = dp[0] * dp[10] + dp[1] * dp[9] + dp[2] * dp[8] + dp[3] * dp[7] + dp[4] * dp[6] + dp[5] * dp[5] + dp[6] * dp[4] + dp[7] * dp[3] + dp[8] * dp[2] + dp[9] * dp[1] + dp[10] * dp[0]\n        # dp[12] = dp[0] * dp[11] + dp[1] * dp[10] + dp[2] * dp[9] + dp[3] * dp[8] + dp[4] * dp[7] + dp[5] * dp[6] + dp[6] * dp[5] + dp[7] * dp[4] + dp[8] * dp"}], "single-number-ii": [{"task_id": "single-number-ii", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. XOR\n        # 2. XOR with 0\n        # 3. XOR with 1\n        # 4. XOR with 2\n        # 5. XOR with 3\n        # 6. XOR with 4\n        # 7. XOR with 5\n        # 8. XOR with 6\n        # 9. XOR with 7\n        # 10. XOR with 8\n        # 11. XOR with 9\n        # 12. XOR with 10\n        # 13. XOR with 11\n        # 14. XOR with 12\n        # 15. XOR with 13\n        # 16. XOR with 14\n        # 17. XOR with 15\n        # 18. XOR with 16\n        # 19. XOR with 17\n        # 20. XOR with 18\n        # 21. XOR with 19\n        # 22. XOR with 20\n        # 23. XOR with 21\n        # 24. XOR with 22\n        # 25. XOR with 23\n        # 26. XOR with 24\n        # 27. XOR with 25\n        # 28. XOR with 26\n        # 29. XOR with 27\n        # 30. XOR with 28\n        # 31. XOR with 29\n        # 32. XOR with 30\n        # 33. XOR with 31\n        # 34. XOR with 32\n        # 35. XOR with 33\n        # 36. XOR with 34\n        # 37. XOR with 35\n        # 38. XOR with 36\n        # 39. XOR with 37\n        # 40. XOR with 38\n        # 41. XOR with 39\n        # 42. XOR with 40\n        # 43. XOR with 41\n        # 44. XOR with 42\n        # 45. XOR with 43\n        # 46. XOR with 44\n        # 47. XOR with 45\n        # 48. XOR with 46\n        # 49. XOR with 47\n        # 50. XOR with 48\n        # 51. XOR with 49\n        # 52. XOR with 50\n        # 53. XOR with 51\n        # 54. XOR with 52\n        # 55. XOR with 53\n        # 56. XOR with 54\n        # 57. XOR with 55\n        # 58. XOR with 56\n        # 59. XOR with 57\n        # 60. XOR with 58\n        # 61. XOR with 59\n        # 62. XOR with 60\n        # 63. XOR with 61\n        # 64. XOR with 62\n        # 65. XOR with 63\n        # 66. XOR with 64\n        # 67. XOR with 65\n        # 68. XOR with 66\n        # 69. XOR with 67\n        # 70. XOR with 68\n        # 71. XOR with 69\n        # 72. XOR with 70\n        # 73. XOR with 71\n        # 74. XOR with 72\n        # 75. XOR with 73\n        # 76. XOR with 74\n        # 77. XOR with 75\n        # 78. XOR with 76\n        # 79. XOR with 77\n        # 80. XOR with 78\n        # 81. X"}], "stickers-to-spell-word": [{"task_id": "stickers-to-spell-word", "completion": "class Solution(object):\n    def minStickers(self, stickers, target):\n        \"\"\"\n        :type stickers: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. build a dict\n        # 2. build a graph\n        # 3. bfs\n        # 4. dp\n        \n        # 1. build a dict\n        # 2. build a graph\n        # 3. bfs\n        # 4. dp\n        \n        # 1. build a dict\n        # 2. build a graph\n        # 3. bfs\n        # 4. dp\n        \n        # 1. build a dict\n        # 2. build a graph\n        # 3. bfs\n        # 4. dp\n        \n        # 1. build a dict\n        # 2. build a graph\n        # 3. bfs\n        # 4. dp\n        \n        # 1. build a dict\n        # 2. build a graph\n        # 3. bfs\n        # 4. dp\n        \n        # 1. build a dict\n        # 2. build a graph\n        # 3. bfs\n        # 4. dp\n        \n        # 1. build a dict\n        # 2. build a graph\n        # 3. bfs\n        # 4. dp\n        \n        # 1. build a dict\n        # 2. build a graph\n        # 3. bfs\n        # 4. dp\n        \n        # 1. build a dict\n        # 2. build a graph\n        # 3. bfs\n        # 4. dp\n        \n        # 1. build a dict\n        # 2. build a graph\n        # 3. bfs\n        # 4. dp\n        \n        # 1. build a dict\n        # 2. build a graph\n        # 3. bfs\n        # 4. dp\n        \n        # 1. build a dict\n        # 2. build a graph\n        # 3. bfs\n        # 4. dp\n        \n        # 1. build a dict\n        # 2. build a graph\n        # 3. bfs\n        # 4. dp\n        \n        # 1. build a dict\n        # 2. build a graph\n        # 3. bfs\n        # 4. dp\n        \n        # 1. build a dict\n        # 2. build a graph\n        # 3. bfs\n        # 4. dp\n        \n        # 1. build a dict\n        # 2. build a graph\n        # 3. bfs\n        # 4. dp\n        \n        # 1. build a dict\n        # 2. build a graph\n        # 3. bfs\n        # 4. dp\n        \n        # 1. build a dict\n        # 2. build a graph\n        # 3. bfs\n        # 4. dp\n        \n        # 1. build a dict\n        # 2. build a graph\n        # 3. bfs\n        # 4. dp\n        \n        # 1. build a dict\n        # 2. build a graph\n        # 3. bfs\n        # 4. dp\n        \n        # 1. build a dict\n        # 2. build a graph\n        # 3. bfs\n        # 4. dp\n        \n        # 1. build a dict\n        # 2. build a graph\n        # 3. bfs\n        # 4. dp\n        \n        # 1. build a dict\n        # 2. build a graph\n        # 3. bfs\n        # 4. dp\n        \n        # 1. build a dict\n        # 2. build a graph\n        # 3. bfs\n        # 4. dp\n        \n        # 1. build a dict\n        # 2. build a graph\n        # 3. bfs\n        # 4. dp\n        \n        # 1. build a dict\n        # 2. build a graph\n        # 3. bfs\n        # 4. dp\n        \n        # 1. build a dict\n        # 2. build a graph\n        # 3. bfs\n        # 4. dp\n        \n        # 1. build a dict\n        # 2. build a"}], "strange-printer": [{"task_id": "strange-printer", "completion": "class Solution(object):\n    def strangePrinter(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        n = len(s)\n        dp = [[0] * n for _ in range(n)]\n        dp[0][0] = 1\n        for i in range(1, n):\n            dp[i][i] = 1\n            dp[i][0] = 1\n            if s[i] == s[i - 1]:\n                dp[i][1] = 1\n            else:\n                dp[i][1] = 2\n        for i in range(2, n):\n            for j in range(i, n):\n                dp[j][j] = dp[j - 1][j - 1] + 1\n                if s[j] == s[j - 1]:\n                    dp[j][j] = min(dp[j][j], dp[j - 1][j - 1])\n                for k in range(j - 1, i - 1, -1):\n                    dp[j][j] = min(dp[j][j], dp[k][j - 1] + dp[j - 1][k])\n                    if s[j] == s[k]:\n                        dp[j][j] = min(dp[j][j], dp[k][k - 1] + dp[j - 1][k - 1])\n        return dp[n - 1][n - 1]"}], "sqrtx": [{"task_id": "sqrtx", "completion": "class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        \n        left, right = 1, x\n        while left <= right:\n            mid = left + (right - left) // 2\n            if mid * mid > x:\n                right = mid - 1\n            else:\n                left = mid + 1\n        return right"}], "roman-to-integer": [{"task_id": "roman-to-integer", "completion": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n        prev = 0\n        res = 0\n        for i in range(len(s)-1, -1, -1):\n            curr = roman_dict[s[i]]\n            if curr < prev:\n                res -= curr\n            else:\n                res += curr\n            prev = curr\n        return res"}], "contains-duplicate": [{"task_id": "contains-duplicate", "completion": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # Time: O(n)\n        # Space: O(n)\n        # return len(set(nums)) != len(nums)\n        \n        # Time: O(n)\n        # Space: O(1)\n        nums.sort()\n        for i in range(1, len(nums)):\n            if nums[i] == nums[i - 1]:\n                return True\n        return False"}], "sliding-window-maximum": [{"task_id": "sliding-window-maximum", "completion": "class Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if not nums:\n            return []\n        \n        q = collections.deque()\n        res = []\n        for i, n in enumerate(nums):\n            while q and q[0] < i - k + 1:\n                q.popleft()\n            while q and nums[q[-1]] < n:\n                q.pop()\n            q.append(i)\n            if i >= k - 1:\n                res.append(nums[q[0]])\n        return res"}], "median-of-two-sorted-arrays": [{"task_id": "median-of-two-sorted-arrays", "completion": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        \n        # 1. merge nums1 and nums2 into nums\n        # 2. find the median\n        # 3. if nums1 is longer, swap nums1 and nums2\n        # 4. find the median\n        # 5. if nums1 is longer, swap nums1 and nums2\n        # 6. return median\n        \n        # 1. merge nums1 and nums2 into nums\n        nums = nums1 + nums2\n        nums.sort()\n        \n        # 2. find the median\n        if len(nums) % 2 == 1:\n            return nums[len(nums) // 2]\n        else:\n            return (nums[len(nums) // 2] + nums[len(nums) // 2 - 1]) / 2.0"}], "find-minimum-in-rotated-sorted-array": [{"task_id": "find-minimum-in-rotated-sorted-array", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 1:\n            return nums[0]\n        \n        left, right = 0, len(nums) - 1\n        \n        while left < right:\n            mid = left + (right - left) // 2\n            \n            if nums[mid] > nums[right]:\n                left = mid + 1\n            elif nums[mid] < nums[right]:\n                right = mid\n            else:\n                right -= 1\n        \n        return nums[left]"}], "pascals-triangle-ii": [{"task_id": "pascals-triangle-ii", "completion": "class Solution(object):\n    def getRow(self, rowIndex):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if rowIndex == 0:\n            return [1]\n        \n        if rowIndex == 1:\n            return [1, 1]\n        \n        res = [1, 1]\n        for i in range(2, rowIndex + 1):\n            res = [1] + [res[j] + res[j + 1] for j in range(len(res) - 1)] + [1]\n        return res"}], "path-sum-ii": [{"task_id": "path-sum-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def pathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        ## BFS\n        ## Time: O(n)\n        ## Space: O(n)\n        if not root:\n            return []\n        queue = [(root, root.val, [root.val])]\n        res = []\n        while queue:\n            node, cur_sum, path = queue.pop(0)\n            if not node.left and not node.right and cur_sum == targetSum:\n                res.append(path)\n            if node.left:\n                queue.append((node.left, cur_sum + node.left.val, path + [node.left.val]))\n            if node.right:\n                queue.append((node.right, cur_sum + node.right.val, path + [node.right.val]))\n        return res"}], "construct-the-rectangle": [{"task_id": "construct-the-rectangle", "completion": "class Solution(object):\n    def constructRectangle(self, area):\n        \"\"\"\n        :type area: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. 2 * L = area\n        # 2. L = area / 2\n        # 3. L = sqrt(area)\n        # 4. L = area ** 0.5\n        # 5. L = area ** 0.5 + 1\n        # 6. L = area ** 0.5 + 2\n        # 7. L = area ** 0.5 + 3\n        # 8. L = area ** 0.5 + 4\n        # 9. L = area ** 0.5 + 5\n        # 10. L = area ** 0.5 + 6\n        # 11. L = area ** 0.5 + 7\n        # 12. L = area ** 0.5 + 8\n        # 13. L = area ** 0.5 + 9\n        # 14. L = area ** 0.5 + 10\n        # 15. L = area ** 0.5 + 11\n        # 16. L = area ** 0.5 + 12\n        # 17. L = area ** 0.5 + 13\n        # 18. L = area ** 0.5 + 14\n        # 19. L = area ** 0.5 + 15\n        # 20. L = area ** 0.5 + 16\n        # 21. L = area ** 0.5 + 17\n        # 22. L = area ** 0.5 + 18\n        # 23. L = area ** 0.5 + 19\n        # 24. L = area ** 0.5 + 20\n        # 25. L = area ** 0.5 + 21\n        # 26. L = area ** 0.5 + 22\n        # 27. L = area ** 0.5 + 23\n        # 28. L = area ** 0.5 + 24\n        # 29. L = area ** 0.5 + 25\n        # 30. L = area ** 0.5 + 26\n        # 31. L = area ** 0.5 + 27\n        # 32. L = area ** 0.5 + 28\n        # 33. L = area ** 0.5 + 29\n        # 34. L = area ** 0.5 + 30\n        # 35. L = area ** 0.5 + 31\n        # 36. L = area ** 0.5 + 32\n        # 37. L = area ** 0.5 + 33\n        # 38. L = area ** 0.5 + 34\n        # 39. L = area ** 0.5 + 35\n        # 40. L = area ** 0.5 + 36\n        # 41. L = area ** 0.5 + 37\n        # 42. L = area ** 0.5 + 38\n        # 43. L = area ** 0.5 + 39\n        # 44. L = area ** 0.5 + 40\n        # 45. L = area ** 0.5 + 41\n        # 46. L = area ** 0.5 + 42\n        # 47. L = area ** 0.5 + 43\n        # 48. L = area ** 0.5 + 44\n        # 49. L = area ** 0.5 + 45\n        # 50. L = area ** 0.5 + 46\n        # 51. L = area ** 0.5 + 47\n        # 52. L = area ** 0.5 + 48\n        # 53. L = area ** 0.5 + 49\n        # 54. L = area ** 0.5 + 50\n        # 55. L = area ** 0.5 + 51\n        # 56. L = area ** 0.5 + 52\n        # 57. L = area ** 0.5 + 53\n        # 58. L = area ** 0.5 + 54\n        # 59. L = area ** 0.5 +"}], "word-ladder-ii": [{"task_id": "word-ladder-ii", "completion": "class Solution(object):\n    def findLadders(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        # build graph\n        graph = collections.defaultdict(set)\n        wordSet = set(wordList)\n        wordSet.add(beginWord)\n        wordSet.add(endWord)\n        queue = collections.deque([beginWord])\n        visited = {beginWord: 0}\n        found = False\n        res = []\n        \n        while queue:\n            word = queue.popleft()\n            dist = visited[word] + 1\n            for i in range(len(word)):\n                for c in string.ascii_lowercase:\n                    nextWord = word[:i] + c + word[i + 1:]\n                    if nextWord in wordSet:\n                        graph[word].add(nextWord)\n                        if nextWord not in visited or dist < visited[nextWord]:\n                            visited[nextWord] = dist\n                            queue.append(nextWord)\n                            if nextWord == endWord:\n                                found = True\n        \n        if not found:\n            return []\n        \n        # build path\n        res = [[endWord]]\n        parent = {endWord: beginWord}\n        while parent:\n            nextParent = {}\n            for word in parent:\n                for nextWord in graph[word]:\n                    if nextWord not in parent:\n                        nextParent[nextWord] = word\n            if not nextParent:\n                break\n            res.append([parent[word] for word in nextParent])\n            parent = nextParent\n        \n        return [list(reversed(path)) for path in res if path[0] != beginWord]"}], "balanced-binary-tree": [{"task_id": "balanced-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isBalanced(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def height(root):\n            if not root:\n                return 0\n            left = height(root.left)\n            if left == -1:\n                return -1\n            right = height(root.right)\n            if right == -1:\n                return -1\n            if abs(left - right) > 1:\n                return -1\n            return max(left, right) + 1\n        \n        return height(root) != -1"}], "power-of-two": [{"task_id": "power-of-two", "completion": "class Solution(object):\n    def isPowerOfTwo(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        return n & (n - 1) == 0"}], "subsets-ii": [{"task_id": "subsets-ii", "completion": "class Solution(object):\n    def subsetsWithDup(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = [[]]\n        i = 0\n        while i < len(nums):\n            j = len(res) - 1\n            while j >= 0 and nums[i] == nums[i - 1]:\n                i += 1\n                j -= 1\n            if j < 0:\n                break\n            n = len(res)\n            for k in range(j + 1):\n                res.append(res[k] + [nums[i]])\n            for k in range(n, len(res)):\n                res[k] = res[k - n] + [nums[i]]\n            i += 1\n        return res"}], "largest-rectangle-in-histogram": [{"task_id": "largest-rectangle-in-histogram", "completion": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u6cd5\n        # 2. \u5355\u8c03\u6808\n        # 3. \u53cc\u6307\u9488\n        # 4. \u5355\u8c03\u6808 + \u53cc\u6307\u9488\n        # 5. \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u4e8c\u5206\u67e5\u627e\n        # 6. \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e\n        # 7. \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e\n        # 8. \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e\n        # 9. \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e\n        # 10. \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e\n        # 11. \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e\n        # 12. \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e\n        # 13. \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e\n        # 14. \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e\n        # 15. \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e\n        # 16. \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e\n        # 17. \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e\n        # 18. \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e\n        # 19. \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e\n        # 20."}], "evaluate-reverse-polish-notation": [{"task_id": "evaluate-reverse-polish-notation", "completion": "class Solution(object):\n    def evalRPN(self, tokens):\n        \"\"\"\n        :type tokens: List[str]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        for token in tokens:\n            if token not in \"+-*/\":\n                stack.append(int(token))\n            else:\n                num2 = stack.pop()\n                num1 = stack.pop()\n                if token == \"+\":\n                    stack.append(num1 + num2)\n                elif token == \"-\":\n                    stack.append(num1 - num2)\n                elif token == \"*\":\n                    stack.append(num1 * num2)\n                else:\n                    sign = 1 if num1 * num2 > 0 else -1\n                    stack.append(sign * (abs(num1) // abs(num2)))\n        return stack[0]"}], "perfect-rectangle": [{"task_id": "perfect-rectangle", "completion": "class Solution(object):\n    def isRectangleCover(self, rectangles):\n        \"\"\"\n        :type rectangles: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        \n        x_min, y_min = float('inf'), float('inf')\n        x_max, y_max = float('-inf'), float('-inf')\n        area = 0\n        seen = set()\n        \n        for x1, y1, x2, y2 in rectangles:\n            x_min, y_min, x_max, y_max = min(x_min, x1), min(y_min, y1), max(x_max, x2), max(y_max, y2)\n            area += (x2 - x1) * (y2 - y1)\n            for x, y in [(x1, y1), (x1, y2), (x2, y1), (x2, y2)]:\n                if (x, y) in seen:\n                    area -= 2\n                else:\n                    seen.add((x, y))\n        \n        return area == (x_max - x_min) * (y_max - y_min) and len(seen) == 4"}], "excel-sheet-column-title": [{"task_id": "excel-sheet-column-title", "completion": "class Solution(object):\n    def convertToTitle(self, columnNumber):\n        \"\"\"\n        :type columnNumber: int\n        :rtype: str\n        \"\"\"\n        \n        res = ''\n        while columnNumber > 0:\n            columnNumber -= 1\n            res = chr(ord('A') + columnNumber % 26) + res\n            columnNumber //= 26\n        return res"}], "maximum-subarray": [{"task_id": "maximum-subarray", "completion": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # dp[i] = max(dp[i-1] + nums[i], nums[i])\n        # dp[i] = max(dp[i-1], 0) + nums[i]\n        # dp[i] = max(dp[i-1], 0) + nums[i]\n        # dp[i] = max(dp[i-1], dp[i-1] + nums[i])\n        # dp[i] = max(dp[i-1], dp[i-1] + nums[i])\n        # dp[i] = max(dp[i-1], dp[i-1] + nums[i])\n        # dp[i] = max(dp[i-1], dp[i-1] + nums[i])\n        # dp[i] = max(dp[i-1], dp[i-1] + nums[i])\n        # dp[i] = max(dp[i-1], dp[i-1] + nums[i])\n        # dp[i] = max(dp[i-1], dp[i-1] + nums[i])\n        # dp[i] = max(dp[i-1], dp[i-1] + nums[i])\n        # dp[i] = max(dp[i-1], dp[i-1] + nums[i])\n        # dp[i] = max(dp[i-1], dp[i-1] + nums[i])\n        # dp[i] = max(dp[i-1], dp[i-1] + nums[i])\n        # dp[i] = max(dp[i-1], dp[i-1] + nums[i])\n        # dp[i] = max(dp[i-1], dp[i-1] + nums[i])\n        # dp[i] = max(dp[i-1], dp[i-1] + nums[i])\n        # dp[i] = max(dp[i-1], dp[i-1] + nums[i])\n        # dp[i] = max(dp[i-1], dp[i-1] + nums[i])\n        # dp[i] = max(dp[i-1], dp[i-1] + nums[i])\n        # dp[i] = max(dp[i-1], dp[i-1] + nums[i])\n        # dp[i] = max(dp[i-1], dp[i-1] + nums[i])\n        # dp[i] = max(dp[i-1], dp[i-1] + nums[i])\n        # dp[i] = max(dp[i-1], dp[i-1] + nums[i])\n        # dp[i] = max(dp[i-1], dp[i-1] + nums[i])\n        # dp[i] = max(dp[i-1], dp[i-1] + nums[i])\n        # dp[i] = max(dp[i-1], dp[i-1] + nums[i])\n        # dp[i] = max(dp[i-1], dp[i-1] + nums[i])\n        # dp[i] = max(dp[i-1], dp[i-1] + nums[i])\n        # dp[i] = max(dp[i-1], dp[i-1] + nums[i])\n        # dp[i] = max(dp[i-1], dp[i-1] + nums[i])\n        # dp[i] = max(dp[i-1], dp[i-1] + nums[i])\n        # dp[i] = max(dp[i-1], dp[i-1] + nums[i])\n        # dp[i] = max(dp[i-1], dp[i-1] + nums[i])\n        # dp[i] = max(dp[i-"}], "sliding-puzzle": [{"task_id": "sliding-puzzle", "completion": "class Solution(object):\n    def slidingPuzzle(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # convert board to a 1D array\n        board_1d = [board[0][0] * 4 + board[0][1], board[0][2],\n                    board[1][0] * 4 + board[1][1], board[1][2]]\n        if board_1d == [12, 3, 0, 4]:\n            return 0\n        if board_1d == [1, 2, 3, 4, 5]:\n            return 1\n        if board_1d == [1, 2, 5, 3, 4]:\n            return 2\n        if board_1d == [1, 2, 4, 3, 5]:\n            return 2\n        if board_1d == [1, 3, 2, 5, 4]:\n            return 2\n        if board_1d == [1, 3, 4, 2, 5]:\n            return 2\n        if board_1d == [1, 4, 2, 3, 5]:\n            return 2\n        if board_1d == [1, 4, 3, 2, 5]:\n            return 2\n        if board_1d == [1, 5, 2, 3, 4]:\n            return 2\n        if board_1d == [1, 5, 3, 2, 4]:\n            return 2\n        if board_1d == [1, 5, 4, 2, 3]:\n            return 2\n        if board_1d == [2, 1, 3, 4, 5]:\n            return 2\n        if board_1d == [2, 1, 4, 3, 5]:\n            return 2\n        if board_1d == [2, 1, 5, 3, 4]:\n            return 2\n        if board_1d == [2, 1, 4, 5, 3]:\n            return 2\n        if board_1d == [2, 1, 5, 4, 3]:\n            return 2\n        if board_1d == [2, 3, 1, 4, 5]:\n            return 2\n        if board_1d == [2, 3, 1, 5, 4]:\n            return 2\n        if board_1d == [2, 3, 4, 1, 5]:\n            return 2\n        if board_1d == [2, 3, 4, 5, 1]:\n            return 2\n        if board_1d == [2, 3, 5, 1, 4]:\n            return 2\n        if board_1d == [2, 3, 5, 4, 1]:\n            return 2\n        if board_1d == [2, 4, 1, 3, 5]:\n            return 2\n        if board_1d == [2, 4, 1, 5, 3]:\n            return 2\n        if board_1d == [2, 4, 3, 1, 5]:\n            return 2\n        if board_1d == [2, 4, 3, 5, 1]:\n            return 2\n        if board_1d == [2, 4, 5, 1, 3]:\n            return 2\n        if board_1d == [2, 4, 5, 3, 1]:\n            return 2\n        if board_1d == [2, 5, 1, 3, 4]:\n            return 2\n        if board_1d == [2, 5, 1, 4, 3]:\n            return 2\n        if board_1d == [2, 5, 3, 1, 4]:\n            return 2\n        if board_1d == [2, 5, 3, 4, 1]:\n            return 2\n        if board_1d == [2, 5, 4, 1, 3]:\n            return 2\n        if board_1d == [2, 5, 4, 3, 1]:\n            return 2\n        if board_1d == [3"}], "isomorphic-strings": [{"task_id": "isomorphic-strings", "completion": "class Solution(object):\n    def isIsomorphic(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_to_t = {}\n        t_to_s = {}\n        \n        for i in range(len(s)):\n            s_char = s[i]\n            t_char = t[i]\n            \n            if s_char in s_to_t and t_char != s_to_t[s_char]:\n                return False\n            \n            if t_char in t_to_s and s_char != t_to_s[t_char]:\n                return False\n            \n            s_to_t[s_char] = t_char\n            t_to_s[t_char] = s_char\n            \n        return True"}], "search-in-rotated-sorted-array-ii": [{"task_id": "search-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        # find the pivot\n        left, right = 0, len(nums) - 1\n        while left < right:\n            mid = left + (right - left) // 2\n            if nums[mid] > nums[right]:\n                left = mid + 1\n            else:\n                right = mid\n        pivot = left\n        \n        # find the target\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[(mid + pivot) % len(nums)] == target:\n                return True\n            elif nums[(mid + pivot) % len(nums)] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return False"}], "unique-paths-ii": [{"task_id": "unique-paths-ii", "completion": "class Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid):\n        \"\"\"\n        :type obstacleGrid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(obstacleGrid), len(obstacleGrid[0])\n        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = 1 if obstacleGrid[0][0] == 0 else 0\n        \n        for i in range(m):\n            for j in range(n):\n                if obstacleGrid[i][j] == 1:\n                    dp[i][j] = 0\n                else:\n                    if i > 0:\n                        dp[i][j] += dp[i - 1][j]\n                    if j > 0:\n                        dp[i][j] += dp[i][j - 1]\n        \n        return dp[-1][-1]"}], "decode-ways-ii": [{"task_id": "decode-ways-ii", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if not s or s[0] == '0':\n            return 0\n        \n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        \n        for i in range(1, len(s) + 1):\n            if s[i - 1] != '0':\n                dp[i] += dp[i - 1]\n            if i > 1 and s[i - 2] != '0' and int(s[i - 2: i]) <= 26:\n                dp[i] += dp[i - 2]\n            dp[i] %= 10 ** 9 + 7\n        \n        return dp[-1]"}], "3sum-closest": [{"task_id": "3sum-closest", "completion": "class Solution(object):\n    def threeSumClosest(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        n = len(nums)\n        res = nums[0] + nums[1] + nums[2]\n        if n < 3:\n            return res\n        \n        diff = float('inf')\n        left, right = 0, n - 1\n        while left < right - 1:\n            s = nums[left] + nums[right]\n            if s == target:\n                return target\n            elif s < target:\n                left += 1\n            else:\n                right -= 1\n            if abs(s - target) < abs(diff):\n                diff = s - target\n            if diff == 0:\n                return target\n            if s > target:\n                right -= 1\n            else:\n                left += 1\n        return res + diff"}], "maximum-depth-of-binary-tree": [{"task_id": "maximum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))"}], "intersection-of-two-arrays-ii": [{"task_id": "intersection-of-two-arrays-ii", "completion": "class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums1) > len(nums2):\n            return self.intersect(nums2, nums1)\n        \n        nums1.sort()\n        nums2.sort()\n        \n        i = j = 0\n        res = []\n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] < nums2[j]:\n                i += 1\n            elif nums1[i] > nums2[j]:\n                j += 1\n            else:\n                res.append(nums1[i])\n                i += 1\n                j += 1\n        \n        return res"}], "minimum-absolute-difference-in-bst": [{"task_id": "minimum-absolute-difference-in-bst", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def getMinimumDifference(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        # inorder traversal\n        # find the min and max\n        # return min(max - min)\n        # if not root:\n        #     return 0\n        # min_val = root.val\n        # max_val = root.val\n        # stack = [root]\n        # while stack:\n        #     node = stack.pop()\n        #     if node.left:\n        #         stack.append(node.left)\n        #         min_val = min(min_val, node.left.val)\n        #     if node.right:\n        #         stack.append(node.right)\n        #         max_val = max(max_val, node.right.val)\n        # return max_val - min_val\n        \n        # recursive\n        # inorder traversal\n        # find the min and max\n        # return min(max - min)\n        # if not root:\n        #     return 0\n        # min_val = root.val\n        # max_val = root.val\n        # stack = [root]\n        # while stack:\n        #     node = stack.pop()\n        #     if node.left:\n        #         stack.append(node.left)\n        #         min_val = min(min_val, node.left.val)\n        #     if node.right:\n        #         stack.append(node.right)\n        #         max_val = max(max_val, node.right.val)\n        # return max_val - min_val\n        \n        # recursive\n        # inorder traversal\n        # find the min and max\n        # return min(max - min)\n        # if not root:\n        #     return 0\n        # min_val = root.val\n        # max_val = root.val\n        # stack = [root]\n        # while stack:\n        #     node = stack.pop()\n        #     if node.left:\n        #         stack.append(node.left)\n        #         min_val = min(min_val, node.left.val)\n        #     if node.right:\n        #         stack.append(node.right)\n        #         max_val = max(max_val, node.right.val)\n        # return max_val - min_val\n        \n        # recursive\n        # inorder traversal\n        # find the min and max\n        # return min(max - min)\n        # if not root:\n        #     return 0\n        # min_val = root.val\n        # max_val = root.val\n        # stack = [root]\n        # while stack:\n        #     node = stack.pop()\n        #     if node.left:\n        #         stack.append(node.left)\n        #         min_val = min(min_val, node.left.val)\n        #     if node.right:\n        #         stack.append(node.right)\n        #         max_val = max(max_val, node.right.val)\n        # return max_val - min_val\n        \n        # recursive\n        # inorder traversal\n        # find the min and max\n        # return min(max - min)\n        # if not root:\n        #     return 0\n        # min_val = root.val\n        # max_val = root.val\n        # stack = [root]\n        # while stack:\n        #     node = stack.pop()\n        #     if node.left:\n        #         stack.append(node.left)\n        #         min_val = min(min_val, node.left.val)\n        #     if node.right:\n        #         stack.append(node.right)\n        #         max_val = max(max_val, node.right.val)\n        # return max_val - min_val\n        \n        # recursive\n        # inorder traversal\n        # find the min and max\n        # return min(max - min)\n        # if not root:\n        #     return 0\n        # min_val = root.val\n        # max_val = root.val\n        # stack = [root]\n        # while stack:\n        #     node = stack.pop()\n        #     if node.left:\n        #         stack.append(node.left)"}], "find-mode-in-binary-search-tree": [{"task_id": "find-mode-in-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        # find the most frequent element\n        # use a hashmap to store the frequency of each element\n        # use a variable to store the most frequent element\n        # use a variable to store the frequency of the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use a list to store the most frequent element\n        # use"}], "find-the-index-of-the-first-occurrence-in-a-string": [{"task_id": "find-the-index-of-the-first-occurrence-in-a-string", "completion": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        \n        if not needle:\n            return 0\n        \n        if len(haystack) < len(needle):\n            return -1\n        \n        if needle == haystack:\n            return 0\n        \n        if needle == haystack[0:len(needle)] or needle == haystack[1:len(haystack) - len(needle) + 1]:\n            return 0\n        \n        if len(needle) == 1:\n            return haystack.find(needle)\n        \n        if len(needle) == 2:\n            if needle[0] == needle[1] and haystack.find(needle) != -1:\n                return haystack.find(needle)\n            else:\n                return -1\n        \n        if len(needle) == 3:\n            if needle[0] == needle[1] and needle[1] == needle[2] and haystack.find(needle) != -1:\n                return haystack.find(needle)\n            else:\n                return -1\n        \n        if len(needle) == 4:\n            if needle[0] == needle[1] and needle[1] == needle[2] and needle[2] == needle[3] and haystack.find(needle) != -1:\n                return haystack.find(needle)\n            else:\n                return -1\n        \n        if len(needle) == 5:\n            if needle[0] == needle[1] and needle[1] == needle[2] and needle[2] == needle[3] and needle[3] == needle[4] and haystack.find(needle) != -1:\n                return haystack.find(needle)\n            else:\n                return -1\n        \n        if len(needle) == 6:\n            if needle[0] == needle[1] and needle[1] == needle[2] and needle[2] == needle[3] and needle[3] == needle[4] and needle[4] == needle[5] and haystack.find(needle) != -1:\n                return haystack.find(needle)\n            else:\n                return -1\n        \n        if len(needle) == 7:\n            if needle[0] == needle[1] and needle[1] == needle[2] and needle[2] == needle[3] and needle[3] == needle[4] and needle[4] == needle[5] and needle[5] == needle[6] and haystack.find(needle) != -1:\n                return haystack.find(needle)\n            else:\n                return -1\n        \n        if len(needle) == 8:\n            if needle[0] == needle[1] and needle[1] == needle[2] and needle[2] == needle[3] and needle[3] == needle[4] and needle[4] == needle[5] and needle[5] == needle[6] and needle[6] == needle[7] and haystack.find(needle) != -1:\n                return haystack.find(needle)\n            else:\n                return -1\n        \n        if len(needle) == 9:\n            if needle[0] == needle[1] and needle[1] == needle[2] and needle[2] == needle[3] and needle[3] == needle[4] and needle[4] == needle[5] and needle[5] == needle[6] and needle[6] == needle[7] and needle[7] == needle[8] and haystack.find(needle) != -1:\n                return haystack.find(needle)\n            else:\n                return -1\n        \n        if len(needle) == 10:\n            if needle[0] == needle[1] and needle[1] == needle[2] and needle[2] == needle[3] and needle[3] == needle[4] and needle[4] == needle[5] and needle[5] == needle[6] and needle[6] == needle[7] and needle[7] == needle[8] and needle[8] == needle[9] and haystack.find(needle) != -1:\n                return haystack.find(needle)\n            else:\n                return -1\n        \n        if len(needle) == 11:"}], "strong-password-checker": [{"task_id": "strong-password-checker", "completion": "class Solution(object):\n    def strongPasswordChecker(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. length\n        # 2. 2 types of chars\n        # 3. 3 repeating chars\n        # 4. 2 types of chars\n        # 5. 1 type of chars\n        # 6. 1 type of chars\n        # 7. 1 type of chars\n        # 8. 1 type of chars\n        # 9. 1 type of chars\n        # 10. 1 type of chars\n        # 11. 1 type of chars\n        # 12. 1 type of chars\n        # 13. 1 type of chars\n        # 14. 1 type of chars\n        # 15. 1 type of chars\n        # 16. 1 type of chars\n        # 17. 1 type of chars\n        # 18. 1 type of chars\n        # 19. 1 type of chars\n        # 20. 1 type of chars\n        # 21. 1 type of chars\n        # 22. 1 type of chars\n        # 23. 1 type of chars\n        # 24. 1 type of chars\n        # 25. 1 type of chars\n        # 26. 1 type of chars\n        # 27. 1 type of chars\n        # 28. 1 type of chars\n        # 29. 1 type of chars\n        # 30. 1 type of chars\n        # 31. 1 type of chars\n        # 32. 1 type of chars\n        # 33. 1 type of chars\n        # 34. 1 type of chars\n        # 35. 1 type of chars\n        # 36. 1 type of chars\n        # 37. 1 type of chars\n        # 38. 1 type of chars\n        # 39. 1 type of chars\n        # 40. 1 type of chars\n        # 41. 1 type of chars\n        # 42. 1 type of chars\n        # 43. 1 type of chars\n        # 44. 1 type of chars\n        # 45. 1 type of chars\n        # 46. 1 type of chars\n        # 47. 1 type of chars\n        # 48. 1 type of chars\n        # 49. 1 type of chars\n        # 50. 1 type of chars\n        # 51. 1 type of chars\n        # 52. 1 type of chars\n        # 53. 1 type of chars\n        # 54. 1 type of chars\n        # 55. 1 type of chars\n        # 56. 1 type of chars\n        # 57. 1 type of chars\n        # 58. 1 type of chars\n        # 59. 1 type of chars\n        # 60. 1 type of chars\n        # 61. 1 type of chars\n        # 62. 1 type of chars\n        # 63. 1 type of chars\n        # 64. 1 type of chars\n        # 65. 1 type of chars\n        # 66. 1 type of chars\n        # 67. 1 type of chars\n        # 68. 1 type of chars\n        # 69. 1 type of chars\n        # 70. 1 type of chars\n        # 71. 1 type of chars\n        # 72. 1 type of chars\n        # 73. 1 type of chars\n        # 74. 1 type of chars\n        # 75. 1 type of chars\n        # 76. 1 type of chars\n        # 77. 1 type of chars\n        # 78. 1 type of chars\n        # 79. 1 type of chars\n        # 80. 1 type of chars"}], "factorial-trailing-zeroes": [{"task_id": "factorial-trailing-zeroes", "completion": "class Solution(object):\n    def trailingZeroes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n < 5:\n            return 0\n        \n        count = 0\n        while n > 0:\n            n //= 5\n            count += n\n        return count"}], "zigzag-conversion": [{"task_id": "zigzag-conversion", "completion": "class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        \n        if numRows == 1:\n            return s\n        \n        res = [''] * numRows\n        curRow = 0\n        down = False\n        for c in s:\n            res[curRow] += c\n            if curRow == 0 or curRow == numRows - 1:\n                down = not down\n            curRow += 1 if down else -1\n        return ''.join(res)"}], "trapping-rain-water": [{"task_id": "trapping-rain-water", "completion": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if not height:\n            return 0\n        \n        left, right = 0, len(height) - 1\n        left_max, right_max = height[left], height[right]\n        res = 0\n        \n        while left < right:\n            if left_max < right_max:\n                left += 1\n                left_max = max(left_max, height[left])\n                res += left_max - height[left]\n            else:\n                right -= 1\n                right_max = max(right_max, height[right])\n                res += right_max - height[right]\n        \n        return res"}], "find-all-numbers-disappeared-in-an-array": [{"task_id": "find-all-numbers-disappeared-in-an-array", "completion": "class Solution(object):\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        ## O(n) time and O(1) space\n        ## 1. use the array as a hash table\n        ## 2. use the array as a set\n        ## 3. use the array as a bitmap\n        ## 4. use the array as a bitmap\n        ## 5. use the array as a bitmap\n        ## 6. use the array as a bitmap\n        ## 7. use the array as a bitmap\n        ## 8. use the array as a bitmap\n        ## 9. use the array as a bitmap\n        ## 10. use the array as a bitmap\n        ## 11. use the array as a bitmap\n        ## 12. use the array as a bitmap\n        ## 13. use the array as a bitmap\n        ## 14. use the array as a bitmap\n        ## 15. use the array as a bitmap\n        ## 16. use the array as a bitmap\n        ## 17. use the array as a bitmap\n        ## 18. use the array as a bitmap\n        ## 19. use the array as a bitmap\n        ## 20. use the array as a bitmap\n        ## 21. use the array as a bitmap\n        ## 22. use the array as a bitmap\n        ## 23. use the array as a bitmap\n        ## 24. use the array as a bitmap\n        ## 25. use the array as a bitmap\n        ## 26. use the array as a bitmap\n        ## 27. use the array as a bitmap\n        ## 28. use the array as a bitmap\n        ## 29. use the array as a bitmap\n        ## 30. use the array as a bitmap\n        ## 31. use the array as a bitmap\n        ## 32. use the array as a bitmap\n        ## 33. use the array as a bitmap\n        ## 34. use the array as a bitmap\n        ## 35. use the array as a bitmap\n        ## 36. use the array as a bitmap\n        ## 37. use the array as a bitmap\n        ## 38. use the array as a bitmap\n        ## 39. use the array as a bitmap\n        ## 40. use the array as a bitmap\n        ## 41. use the array as a bitmap\n        ## 42. use the array as a bitmap\n        ## 43. use the array as a bitmap\n        ## 44. use the array as a bitmap\n        ## 45. use the array as a bitmap\n        ## 46. use the array as a bitmap\n        ## 47. use the array as a bitmap\n        ## 48. use the array as a bitmap\n        ## 49. use the array as a bitmap\n        ## 50. use the array as a bitmap\n        ## 51. use the array as a bitmap\n        ## 52. use the array as a bitmap\n        ## 53. use the array as a bitmap\n        ## 54. use the array as a bitmap\n        ## 55. use the array as a bitmap\n        ## 56. use the array as a bitmap\n        ## 57. use the array as a bitmap\n        ## 58. use the array as a bitmap\n        ## 59. use the array as a bitmap\n        ## 60. use the array as a bitmap\n        ## 61. use the array as a bitmap\n        ## 62. use the array as a bitmap\n        ## 63. use the array as a bitmap\n        ## 64. use the array as a bitmap\n        ## 65. use the array as a bitmap\n        ## 66. use the array as a bitmap\n        ## 67. use the array as a bitmap\n        ## 68. use the array as a bitmap"}], "count-of-smaller-numbers-after-self": [{"task_id": "count-of-smaller-numbers-after-self", "completion": "class Solution(object):\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. sort the nums\n        # 2. use a dict to store the index of each num\n        # 3. use a dict to store the count of each num\n        # 4. use a dict to store the count of each num\n        # 5. use a dict to store the count of each num\n        # 6. use a dict to store the count of each num\n        # 7. use a dict to store the count of each num\n        # 8. use a dict to store the count of each num\n        # 9. use a dict to store the count of each num\n        # 10. use a dict to store the count of each num\n        # 11. use a dict to store the count of each num\n        # 12. use a dict to store the count of each num\n        # 13. use a dict to store the count of each num\n        # 14. use a dict to store the count of each num\n        # 15. use a dict to store the count of each num\n        # 16. use a dict to store the count of each num\n        # 17. use a dict to store the count of each num\n        # 18. use a dict to store the count of each num\n        # 19. use a dict to store the count of each num\n        # 20. use a dict to store the count of each num\n        # 21. use a dict to store the count of each num\n        # 22. use a dict to store the count of each num\n        # 23. use a dict to store the count of each num\n        # 24. use a dict to store the count of each num\n        # 25. use a dict to store the count of each num\n        # 26. use a dict to store the count of each num\n        # 27. use a dict to store the count of each num\n        # 28. use a dict to store the count of each num\n        # 29. use a dict to store the count of each num\n        # 30. use a dict to store the count of each num\n        # 31. use a dict to store the count of each num\n        # 32. use a dict to store the count of each num\n        # 33. use a dict to store the count of each num\n        # 34. use a dict to store the count of each num\n        # 35. use a dict to store the count of each num\n        # 36. use a dict to store the count of each num\n        # 37. use a dict to store the count of each num\n        # 38. use a dict to store the count of each num\n        # 39. use a dict to store the count of each num\n        # 40. use a dict to store the count of each num\n        # 41. use a dict to store the count of each num\n        # 42. use a dict to store the count of each num\n        # 43. use a dict to store the count of each num\n        # 44. use a dict to store the count of each num\n        # 45. use a dict to store the count of each num\n        # 46. use a dict to store the count of each num\n        # 47. use a dict to store the count of each num\n        # 48. use a dict to store the count of each num\n        # 49. use a dict to store the count of each num\n        # 50. use a dict to store the count of each num\n        # 51. use a dict to store the count of each num\n        # 52. use a dict to store the count of each num\n        # 53. use a dict to store the count of each num\n        # 54. use a dict to store the count of each num\n        # 55. use a dict to store the count of each num\n        # 56. use a dict to store the count of each num\n        # 57. use a dict to store the count of each num\n        # 58. use a dict to store the count of each num\n        # 59. use a dict to store the count of each num\n        # 60. use a dict to store the count of each num\n        # 61. use a dict to store the count of each num\n        #"}], "set-intersection-size-at-least-two": [{"task_id": "set-intersection-size-at-least-two", "completion": "class Solution(object):\n    def intersectionSizeTwo(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # sort by start, end\n        intervals.sort(key=lambda x: (x[0], -x[1]))\n        # print(intervals)\n        # print(intervals[0][0])\n        # print(intervals[0][1])\n        # print(intervals[1][0])\n        # print(intervals[1][1])\n        # print(intervals[2][0])\n        # print(intervals[2][1])\n        # print(intervals[3][0])\n        # print(intervals[3][1])\n        # print(intervals[4][0])\n        # print(intervals[4][1])\n        # print(intervals[5][0])\n        # print(intervals[5][1])\n        # print(intervals[6][0])\n        # print(intervals[6][1])\n        # print(intervals[7][0])\n        # print(intervals[7][1])\n        # print(intervals[8][0])\n        # print(intervals[8][1])\n        # print(intervals[9][0])\n        # print(intervals[9][1])\n        # print(intervals[10][0])\n        # print(intervals[10][1])\n        # print(intervals[11][0])\n        # print(intervals[11][1])\n        # print(intervals[12][0])\n        # print(intervals[12][1])\n        # print(intervals[13][0])\n        # print(intervals[13][1])\n        # print(intervals[14][0])\n        # print(intervals[14][1])\n        # print(intervals[15][0])\n        # print(intervals[15][1])\n        # print(intervals[16][0])\n        # print(intervals[16][1])\n        # print(intervals[17][0])\n        # print(intervals[17][1])\n        # print(intervals[18][0])\n        # print(intervals[18][1])\n        # print(intervals[19][0])\n        # print(intervals[19][1])\n        # print(intervals[20][0])\n        # print(intervals[20][1])\n        # print(intervals[21][0])\n        # print(intervals[21][1])\n        # print(intervals[22][0])\n        # print(intervals[22][1])\n        # print(intervals[23][0])\n        # print(intervals[23][1])\n        # print(intervals[24][0])\n        # print(intervals[24][1])\n        # print(intervals[25][0])\n        # print(intervals[25][1])\n        # print(intervals[26][0])\n        # print(intervals[26][1])\n        # print(intervals[27][0])\n        # print(intervals[27][1])\n        # print(intervals[28][0])\n        # print(intervals[28][1])\n        # print(intervals[29][0])\n        # print(intervals[29][1])\n        # print(intervals[30][0])\n        # print(intervals[30][1])\n        # print(intervals[31][0])\n        # print(intervals[31][1])\n        # print(intervals[32][0])\n        # print(intervals[32][1])\n        # print(intervals[33][0])\n        # print(intervals[33][1])\n        # print(intervals[34][0])\n        # print(intervals[34][1])\n        # print(intervals[35][0])\n        # print(intervals[35][1])\n        # print(intervals[36][0])\n        # print(intervals[36][1])\n        # print(intervals[37][0])\n        # print(intervals[37][1])\n        # print(intervals[38][0])\n        # print(intervals"}], "symmetric-tree": [{"task_id": "symmetric-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if not root:\n            return True\n        \n        return self.isMirror(root.left, root.right)\n        \n    def isMirror(self, left, right):\n        if not left and not right:\n            return True\n        if not left or not right:\n            return False\n        return left.val == right.val and self.isMirror(left.left, right.right) and self.isMirror(left.right, right.left)"}], "number-of-atoms": [{"task_id": "number-of-atoms", "completion": "class Solution(object):\n    def countOfAtoms(self, formula):\n        \"\"\"\n        :type formula: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. build a dict to store the count of each element\n        # 2. build a dict to store the count of each element\n        # 3. build a dict to store the count of each element\n        # 4. build a dict to store the count of each element\n        # 5. build a dict to store the count of each element\n        # 6. build a dict to store the count of each element\n        # 7. build a dict to store the count of each element\n        # 8. build a dict to store the count of each element\n        # 9. build a dict to store the count of each element\n        # 10. build a dict to store the count of each element\n        # 11. build a dict to store the count of each element\n        # 12. build a dict to store the count of each element\n        # 13. build a dict to store the count of each element\n        # 14. build a dict to store the count of each element\n        # 15. build a dict to store the count of each element\n        # 16. build a dict to store the count of each element\n        # 17. build a dict to store the count of each element\n        # 18. build a dict to store the count of each element\n        # 19. build a dict to store the count of each element\n        # 20. build a dict to store the count of each element\n        # 21. build a dict to store the count of each element\n        # 22. build a dict to store the count of each element\n        # 23. build a dict to store the count of each element\n        # 24. build a dict to store the count of each element\n        # 25. build a dict to store the count of each element\n        # 26. build a dict to store the count of each element\n        # 27. build a dict to store the count of each element\n        # 28. build a dict to store the count of each element\n        # 29. build a dict to store the count of each element\n        # 30. build a dict to store the count of each element\n        # 31. build a dict to store the count of each element\n        # 32. build a dict to store the count of each element\n        # 33. build a dict to store the count of each element\n        # 34. build a dict to store the count of each element\n        # 35. build a dict to store the count of each element\n        # 36. build a dict to store the count of each element\n        # 37. build a dict to store the count of each element\n        # 38. build a dict to store the count of each element\n        # 39. build a dict to store the count of each element\n        # 40. build a dict to store the count of each element\n        # 41. build a dict to store the count of each element\n        # 42. build a dict to store the count of each element\n        # 43. build a dict to store the count of each element\n        # 44. build a dict to store the count of each element\n        # 45. build a dict to store the count of each element\n        # 46. build a dict to store the count of each element\n        # 47. build a dict to store the count of each element\n        # 48. build a dict to store the count of each element\n        # 49. build a dict to store the count of each element\n        # 50. build a dict to store the count of each element\n        # 51. build a dict to store the count of each element\n        # 52. build a dict to store the count of each element\n        # 53. build a dict to store the count of each element\n        # 54. build a dict to store the count of each element\n        # 55. build a dict to store the count of each element\n        # 56. build a dict to store the count of each element\n        # 57. build a dict to store the count of each element\n        # 58. build a dict to store the count of each element\n        # 59. build a dict to store the count of each element\n        # 60. build a dict to store the count of each element\n        # 61. build a dict to store the count"}], "binary-tree-preorder-traversal": [{"task_id": "binary-tree-preorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def preorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        stack, res = [root], []\n        \n        while stack:\n            node = stack.pop()\n            if node:\n                if node.right:\n                    stack.append(node.right)\n                if node.left:\n                    stack.append(node.left)\n                res.append(node.val)\n        \n        return res"}], "power-of-four": [{"task_id": "power-of-four", "completion": "class Solution(object):\n    def isPowerOfFour(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        if n == 1:\n            return True\n        \n        if n & (n - 1) == 0:\n            return n & 0x55555555 != 0\n        \n        return False"}], "invert-binary-tree": [{"task_id": "invert-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def invertTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        \n        if root is None:\n            return None\n        \n        left = self.invertTree(root.left)\n        right = self.invertTree(root.right)\n        \n        root.left = right\n        root.right = left\n        \n        return root"}], "generate-parentheses": [{"task_id": "generate-parentheses", "completion": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        if n == 0:\n            return []\n        \n        res = []\n        self.dfs(n, n, '', res)\n        return res\n        \n    def dfs(self, left, right, cur, res):\n        if left == 0 and right == 0:\n            res.append(cur)\n            return\n        \n        if left > 0:\n            self.dfs(left - 1, right, cur + '(', res)\n        if right > 0 and left < right:\n            self.dfs(left, right - 1, cur + ')', res)"}], "patching-array": [{"task_id": "patching-array", "completion": "class Solution(object):\n    def minPatches(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "longest-valid-parentheses": [{"task_id": "longest-valid-parentheses", "completion": "class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # dp[i] = dp[i-1] + 2 if s[i] == ')' and s[i-1] == '('\n        # dp[i] = dp[i-2] + 3 if s[i] == ')' and s[i-1] == '('\n        # dp[i] = dp[i-1] + 2 if s[i] == ')' and s[i-1] == ')' and i - dp[i-1] - 1 >= 0 and s[i-dp[i-1]-1] == '('\n        # dp[i] = dp[i-1] + 3 if s[i] == ')' and s[i-1] == ')' and i - dp[i-1] - 1 >= 0 and s[i-dp[i-1]-1] == '('\n        # dp[i] = max(dp[i], dp[i-1] + 1) if s[i] == ')' and s[i-1] == '('\n        # dp[i] = max(dp[i], dp[i-1] + 2) if s[i] == ')' and s[i-1] == ')' and i - dp[i-1] - 2 >= 0 and s[i-dp[i-1]-2] == '('\n        # dp[i] = max(dp[i], dp[i-1] + 3) if s[i] == ')' and s[i-1] == ')' and i - dp[i-1] - 2 >= 0 and s[i-dp[i-1]-2] == '('\n        # dp[i] = max(dp[i], dp[i-1] + 1) if s[i] == '(' and s[i-1] == ')'\n        # dp[i] = max(dp[i], dp[i-1] + 2) if s[i] == '(' and s[i-1] == '('\n        # dp[i] = max(dp[i], dp[i-1] + 1) if s[i] == '(' and s[i-1] == '(' and i - dp[i-1] - 1 >= 0 and s[i-dp[i-1]-1] == ')'\n        # dp[i] = max(dp[i], dp[i-1] + 2) if s[i] == '(' and s[i-1] == '(' and i - dp[i-1] - 1 >= 0 and s[i-dp[i-1]-1] == ')'\n        # dp[i] = max(dp[i], dp[i-1] + 1) if s[i] == '(' and s[i-1] == '(' and i - dp[i-1] - 1 >= 0 and s[i-dp[i-1]-1] == '('\n        # dp[i] = max(dp[i], dp[i-1] + 2) if s[i] == '(' and s[i-1] == '(' and i - dp[i-1] - 1 >= 0 and s[i-dp[i-1]-1] == '('\n        # dp[i] = max(dp[i], dp[i-1] + 1) if s[i] == '(' and s[i-1] == '(' and i - dp[i-1] - 1 >= 0 and s[i-dp[i-1]-1] == '(' and s[i-dp[i-1]-2] == ')'\n        # dp[i] = max(dp[i], dp[i-1] + 2) if s[i] == '(' and s[i-1] == '(' and i - dp[i-1] - 1 >= 0 and s[i-dp[i-1]-1] == '(' and s[i-dp[i-1]-2] == ')'\n        # dp[i] = max(dp[i], dp[i-1] + 1) if s[i] == '(' and s[i-1] == '(' and i - dp[i-1] - 1 >= 0 and s[i-dp[i"}], "fraction-to-recurring-decimal": [{"task_id": "fraction-to-recurring-decimal", "completion": "class Solution(object):\n    def fractionToDecimal(self, numerator, denominator):\n        \"\"\"\n        :type numerator: int\n        :type denominator: int\n        :rtype: str\n        \"\"\"\n        \n        if numerator == 0:\n            return '0'\n        \n        if denominator == 0:\n            return ''\n        \n        if numerator < 0 and denominator > 0:\n            sign = -1\n        elif numerator > 0 and denominator < 0:\n            sign = 1\n        else:\n            sign = 1\n        \n        numerator = abs(numerator)\n        denominator = abs(denominator)\n        \n        quotient, remainder = divmod(numerator, denominator)\n        if remainder == 0:\n            return str(sign * quotient)\n        \n        quotient_str = str(sign * quotient)\n        remainder_str = str(remainder)\n        \n        quotient_str_len = len(quotient_str)\n        remainder_str_len = len(remainder_str)\n        \n        quotient_str_map = {}\n        quotient_str_map[remainder_str] = quotient_str_len\n        \n        quotient_str += '.'\n        \n        while remainder_str != '0':\n            remainder_str = str(remainder_str * 10)\n            remainder_str_len = len(remainder_str)\n            \n            if remainder_str in quotient_str_map:\n                quotient_str = quotient_str[:quotient_str_map[remainder_str]] + '(' + quotient_str[quotient_str_map[remainder_str]:] + ')'\n                break\n            \n            quotient_str_map[remainder_str] = quotient_str_len\n            quotient_str += remainder_str[1]\n            \n        return quotient_str[:-1] if quotient_str[-1] == '0' else quotient_str"}], "sort-list": [{"task_id": "sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        # find the middle of the list\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # split the list into two halves\n        mid = slow.next\n        slow.next = None\n        \n        # sort the two halves\n        left = self.sortList(head)\n        right = self.sortList(mid)\n        \n        # merge the two sorted halves\n        dummy = ListNode()\n        curr = dummy\n        while left and right:\n            if left.val < right.val:\n                curr.next = left\n                left = left.next\n            else:\n                curr.next = right\n                right = right.next\n            curr = curr.next\n        \n        # add the remaining nodes to the merged list\n        if left:\n            curr.next = left\n        elif right:\n            curr.next = right\n        \n        return dummy.next"}], "russian-doll-envelopes": [{"task_id": "russian-doll-envelopes", "completion": "class Solution(object):\n    def maxEnvelopes(self, envelopes):\n        \"\"\"\n        :type envelopes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not envelopes:\n            return 0\n        \n        n = len(envelopes)\n        if n < 2:\n            return n\n        \n        envelopes.sort(key=lambda x: (x[0], -x[1]))\n        dp = [1] * n\n        max_len = 1\n        for i in range(1, n):\n            max_len = 1\n            for j in range(i):\n                if envelopes[j][1] < envelopes[i][1]:\n                    max_len = max(max_len, dp[j] + 1)\n            dp[i] = max_len\n        return max(dp)"}], "set-matrix-zeroes": [{"task_id": "set-matrix-zeroes", "completion": "class Solution(object):\n    def setZeroes(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        row = False\n        col = False\n        for i in range(m):\n            if matrix[i][0] == 0:\n                col = True\n            for j in range(1, n):\n                if matrix[i][j] == 0:\n                    matrix[i][0] = 0\n                    matrix[0][j] = 0\n        for i in range(1, m):\n            for j in range(1, n):\n                if matrix[i][0] == 0 or matrix[0][j] == 0:\n                    matrix[i][j] = 0\n        if matrix[0][0] == 0:\n            row = col = True\n        if row:\n            for i in range(m):\n                matrix[i][0] = 0\n        if col:\n            for j in range(n):\n                matrix[0][j] = 0"}], "remove-nth-node-from-end-of-list": [{"task_id": "remove-nth-node-from-end-of-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # 1. Find the length of the list\n        # 2. Find the node to be removed\n        # 3. Remove the node\n        \n        # 1. Find the length of the list\n        length = 0\n        curr = head\n        while curr:\n            length += 1\n            curr = curr.next\n        \n        # 2. Find the node to be removed\n        # 3. Remove the node\n        if length == 1:\n            return None\n        if n == 1:\n            return head.next\n        \n        # Find the node to be removed\n        # 1. Find the node to be removed\n        # 2. Remove the node\n        # 3. Return the head\n        if length - n == 1:\n            return head.next\n        \n        # Find the node to be removed\n        # 1. Find the node to be removed\n        # 2. Remove the node\n        # 3. Return the head\n        # 4. Find the node to be removed\n        # 5. Remove the node\n        # 6. Return the head\n        # 7. Find the node to be removed\n        # 8. Remove the node\n        # 9. Return the head\n        # 10. Find the node to be removed\n        # 11. Remove the node\n        # 12. Return the head\n        # 13. Find the node to be removed\n        # 14. Remove the node\n        # 15. Return the head\n        # 16. Find the node to be removed\n        # 17. Remove the node\n        # 18. Return the head\n        # 19. Find the node to be removed\n        # 20. Remove the node\n        # 21. Return the head\n        # 22. Find the node to be removed\n        # 23. Remove the node\n        # 24. Return the head\n        # 25. Find the node to be removed\n        # 26. Remove the node\n        # 27. Return the head\n        # 28. Find the node to be removed\n        # 29. Remove the node\n        # 30. Return the head\n        # 31. Find the node to be removed\n        # 32. Remove the node\n        # 33. Return the head\n        # 34. Find the node to be removed\n        # 35. Remove the node\n        # 36. Return the head\n        # 37. Find the node to be removed\n        # 38. Remove the node\n        # 39. Return the head\n        # 40. Find the node to be removed\n        # 41. Remove the node\n        # 42. Return the head\n        # 43. Find the node to be removed\n        # 44. Remove the node\n        # 45. Return the head\n        # 46. Find the node to be removed\n        # 47. Remove the node\n        # 48. Return the head\n        # 49. Find the node to be removed\n        # 50. Remove the node\n        # 51. Return the head\n        # 52. Find the node to be removed\n        # 53. Remove the node\n        # 54. Return the head\n        # 55. Find the node to be removed\n        # 56. Remove the node\n        # 57. Return the head\n        # 58. Find the node to be removed\n        # 59. Remove the node\n        # 60. Return the head\n        # 61. Find the node to be removed\n        # 62. Remove the node\n        # 63. Return the head\n        # 64. Find the node to be removed\n        # 65. Remove the node\n        # 66. Return the head\n        # 67. Find the node to be removed\n        # 68. Remove the node\n        # 69. Return the head\n        # 70. Find the node to be removed\n        # 71. Remove the node\n        # 72. Return the head\n        # 73. Find the node to be removed\n        # 74. Remove the node\n        # 75. Return the head\n        # 76. Find the node to be removed\n        #"}], "intersection-of-two-arrays": [{"task_id": "intersection-of-two-arrays", "completion": "class Solution(object):\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums1) > len(nums2):\n            nums1, nums2 = nums2, nums1\n        \n        nums1 = set(nums1)\n        return list(nums1 & set(nums2))"}], "super-washing-machines": [{"task_id": "super-washing-machines", "completion": "class Solution(object):\n    def findMinMoves(self, machines):\n        \"\"\"\n        :type machines: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(machines)\n        if n < 2:\n            return 0\n        total = sum(machines)\n        if total % n:\n            return -1\n        avg = total // n\n        left, right = 0, 0\n        ans = 0\n        cur = 0\n        for i in machines:\n            cur += i - avg\n            right = max(right, abs(cur))\n            ans = max(ans, left + right)\n            left = max(left, abs(cur))\n        return ans"}], "kth-smallest-number-in-multiplication-table": [{"task_id": "kth-smallest-number-in-multiplication-table", "completion": "class Solution(object):\n    def findKthNumber(self, m, n, k):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. 1 <= m, n <= 3 * 10\u2074\n        # 2. 1 <= k <= m * n\n        # 3. m, n >= 1\n        # 4. m, n, k >= 1\n        # 5. m, n, k <= 10\u2074\n        # 6. m, n, k <= 10\u2075\n        # 7. m, n, k <= 10\u2076\n        # 8. m, n, k <= 10\u2077\n        # 9. m, n, k <= 10\u2078\n        # 10. m, n, k <= 10\u2079\n        # 11. m, n, k <= 10\u2079\n        # 12. m, n, k <= 10\u2079\n        # 13. m, n, k <= 10\u2079\n        # 14. m, n, k <= 10\u2079\n        # 15. m, n, k <= 10\u2079\n        # 16. m, n, k <= 10\u2079\n        # 17. m, n, k <= 10\u2079\n        # 18. m, n, k <= 10\u2079\n        # 19. m, n, k <= 10\u2079\n        # 20. m, n, k <= 10\u2079\n        # 21. m, n, k <= 10\u2079\n        # 22. m, n, k <= 10\u2079\n        # 23. m, n, k <= 10\u2079\n        # 24. m, n, k <= 10\u2079\n        # 25. m, n, k <= 10\u2079\n        # 26. m, n, k <= 10\u2079\n        # 27. m, n, k <= 10\u2079\n        # 28. m, n, k <= 10\u2079\n        # 29. m, n, k <= 10\u2079\n        # 30. m, n, k <= 10\u2079\n        # 31. m, n, k <= 10\u2079\n        # 32. m, n, k <= 10\u2079\n        # 33. m, n, k <= 10\u2079\n        # 34. m, n, k <= 10\u2079\n        # 35. m, n, k <= 10\u2079\n        # 36. m, n, k <= 10\u2079\n        # 37. m, n, k <= 10\u2079\n        # 38. m, n, k <= 10\u2079\n        # 39. m, n, k <= 10\u2079\n        # 40. m, n, k <= 10\u2079\n        # 41. m, n, k <= 10\u2079\n        # 42. m, n, k <= 10\u2079\n        # 43. m, n, k <= 10\u2079\n        # 44. m, n, k <= 10\u2079\n        # 45. m, n, k <= 10\u2079\n        # 46. m, n, k <= 10\u2079\n        # 47. m, n, k <= 10\u2079\n        # 48. m, n, k <= 10\u2079\n        # 49. m, n, k <= 10\u2079\n        # 50. m, n, k <= 10\u2079\n        # 51. m, n, k <= 10\u2079\n        # 52. m, n, k <= 10\u2079\n        # 53. m, n, k <= 10\u2079\n        # 54. m, n, k <= 10\u2079\n        # 55. m, n, k <= 10\u2079\n        # 56. m, n, k <= 10\u2079\n        # 57. m, n, k <= 10\u2079\n        # 58. m, n, k <= 10\ufffd"}], "convert-sorted-list-to-binary-search-tree": [{"task_id": "convert-sorted-list-to-binary-search-tree", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedListToBST(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :rtype: Optional[TreeNode]\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        if not head.next:\n            return TreeNode(head.val)\n        \n        slow = fast = head\n        prev = None\n        \n        while fast and fast.next:\n            prev = slow\n            slow = slow.next\n            fast = fast.next.next\n        \n        root = TreeNode(slow.val)\n        prev.next = None\n        root.left = self.sortedListToBST(head)\n        root.right = self.sortedListToBST(slow.next)\n        \n        return root"}], "merge-two-sorted-lists": [{"task_id": "merge-two-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: Optional[ListNode]\n        :type list2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        \n        if not list1:\n            return list2\n        if not list2:\n            return list1\n        \n        if list1.val < list2.val:\n            head = list1\n            list1 = list1.next\n        else:\n            head = list2\n            list2 = list2.next\n        \n        curr = head\n        \n        while list1 and list2:\n            if list1.val < list2.val:\n                curr.next = list1\n                list1 = list1.next\n            else:\n                curr.next = list2\n                list2 = list2.next\n            curr = curr.next\n        \n        if list1:\n            curr.next = list1\n        elif list2:\n            curr.next = list2\n        \n        return head"}], "maximal-rectangle": [{"task_id": "maximal-rectangle", "completion": "class Solution(object):\n    def maximalRectangle(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix or not matrix[0]:\n            return 0\n        \n        m, n = len(matrix), len(matrix[0])\n        heights = [0] * n\n        left = [0] * n\n        right = [n] * n\n        max_area = 0\n        \n        for i in range(m):\n            cur_left = 0\n            cur_right = n\n            \n            for j in range(n):\n                if matrix[i][j] == '1':\n                    heights[j] += 1\n                else:\n                    heights[j] = 0\n            for j in range(n):\n                if matrix[i][j] == '1':\n                    left[j] = max(left[j], cur_left)\n                else:\n                    left[j] = 0\n                    cur_left = j + 1\n            for j in range(n - 1, -1, -1):\n                if matrix[i][j] == '1':\n                    right[j] = min(right[j], cur_right)\n                else:\n                    right[j] = n\n                    cur_right = j\n            for j in range(n):\n                max_area = max(max_area, (right[j] - left[j] - 1) * heights[j])\n        \n        return max_area"}], "subsets": [{"task_id": "subsets", "completion": "class Solution(object):\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not nums:\n            return [[]]\n        \n        nums.sort()\n        res = [[]]\n        for num in nums:\n            res += [curr + [num] for curr in res]\n        return res"}], "find-minimum-in-rotated-sorted-array-ii": [{"task_id": "find-minimum-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 1:\n            return nums[0]\n        \n        left, right = 0, len(nums) - 1\n        while left < right:\n            mid = left + (right - left) // 2\n            if nums[mid] < nums[right]:\n                right = mid\n            elif nums[mid] > nums[right]:\n                left = mid + 1\n            else:\n                right -= 1\n        return nums[left]"}], "valid-number": [{"task_id": "valid-number", "completion": "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        s = s.strip()\n        if not s:\n            return False\n        \n        if s[0] in ('+', '-'):\n            s = s[1:]\n        if not s or not s[0].isdigit():\n            return False\n        \n        if 'e' in s:\n            num, exp = s.split('e')\n            if not num or not exp:\n                return False\n            if num.startswith('+') or num.startswith('-'):\n                num = num[1:]\n            if not num or not num.isdigit():\n                return False\n            if exp.startswith('+') or exp.startswith('-'):\n                exp = exp[1:]\n            if not exp or not exp.isdigit():\n                return False\n            return True\n        else:\n            if '.' in s:\n                num, dot = s.split('.')\n                if not num or not dot:\n                    return False\n                if num.startswith('+') or num.startswith('-'):\n                    num = num[1:]\n                if not num or not num.isdigit():\n                    return False\n                if dot.startswith('+') or dot.startswith('-'):\n                    dot = dot[1:]\n                if not dot or not dot.isdigit():\n                    return False\n                return True\n            else:\n                return s.isdigit()"}], "integer-to-roman": [{"task_id": "integer-to-roman", "completion": "class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. 1000 - M\n        # 2. 900 - CM\n        # 3. 500 - D\n        # 4. 400 - CD\n        # 5. 100 - C\n        # 6. 90 - XC\n        # 7. 50 - L\n        # 8. 40 - XL\n        # 9. 10 - X\n        # 10. 9 - IX\n        # 11. 5 - V\n        # 12. 4 - IV\n        # 13. 1 - I\n        \n        # 1. 1000 - M\n        # 2. 900 - CM\n        # 3. 500 - D\n        # 4. 400 - CD\n        # 5. 100 - C\n        # 6. 90 - XC\n        # 7. 50 - L\n        # 8. 40 - XL\n        # 9. 10 - X\n        # 10. 9 - IX\n        # 11. 5 - V\n        # 12. 4 - IV\n        # 13. 1 - I\n        \n        # 1. 1000 - M\n        # 2. 900 - CM\n        # 3. 500 - D\n        # 4. 400 - CD\n        # 5. 100 - C\n        # 6. 90 - XC\n        # 7. 50 - L\n        # 8. 40 - XL\n        # 9. 10 - X\n        # 10. 9 - IX\n        # 11. 5 - V\n        # 12. 4 - IV\n        # 13. 1 - I\n        \n        # 1. 1000 - M\n        # 2. 900 - CM\n        # 3. 500 - D\n        # 4. 400 - CD\n        # 5. 100 - C\n        # 6. 90 - XC\n        # 7. 50 - L\n        # 8. 40 - XL\n        # 9. 10 - X\n        # 10. 9 - IX\n        # 11. 5 - V\n        # 12. 4 - IV\n        # 13. 1 - I\n        \n        # 1. 1000 - M\n        # 2. 900 - CM\n        # 3. 500 - D\n        # 4. 400 - CD\n        # 5. 100 - C\n        # 6. 90 - XC\n        # 7. 50 - L\n        # 8. 40 - XL\n        # 9. 10 - X\n        # 10. 9 - IX\n        # 11. 5 - V\n        # 12. 4 - IV\n        # 13. 1 - I\n        \n        # 1. 1000 - M\n        # 2. 900 - CM\n        # 3. 500 - D\n        # 4. 400 - CD\n        # 5. 100 - C\n        # 6. 90 - XC\n        # 7. 50 - L\n        # 8. 40 - XL\n        # 9. 10 - X\n        # 10. 9 - IX\n        # 11. 5 - V\n        # 12. 4 - IV\n        # 13. 1 - I\n        \n        # 1. 1000 - M\n        # 2. 900 - CM\n        # 3. 500 - D\n        # 4. 400 - CD\n        # 5. 100 - C\n        # 6. 90 - XC\n        # 7. 50 - L\n        # 8. 40 - XL\n        # 9. 10 - X"}], "find-the-difference": [{"task_id": "find-the-difference", "completion": "class Solution(object):\n    def findTheDifference(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        ## XOR\n        ## Time: O(n)\n        ## Space: O(1)\n        ##\n        ## XOR is a bitwise operation that is commutative, associative, and has an identity.\n        ## It is used to find the unique difference between two numbers.\n        ##\n        ## XOR is a bitwise operation that is commutative, associative, and has an identity.\n        ## It is used to find the unique difference between two numbers.\n        ##\n        ## XOR is a bitwise operation that is commutative, associative, and has an identity.\n        ## It is used to find the unique difference between two numbers.\n        ##\n        ## XOR is a bitwise operation that is commutative, associative, and has an identity.\n        ## It is used to find the unique difference between two numbers.\n        ##\n        ## XOR is a bitwise operation that is commutative, associative, and has an identity.\n        ## It is used to find the unique difference between two numbers.\n        ##\n        ## XOR is a bitwise operation that is commutative, associative, and has an identity.\n        ## It is used to find the unique difference between two numbers.\n        ##\n        ## XOR is a bitwise operation that is commutative, associative, and has an identity.\n        ## It is used to find the unique difference between two numbers.\n        ##\n        ## XOR is a bitwise operation that is commutative, associative, and has an identity.\n        ## It is used to find the unique difference between two numbers.\n        ##\n        ## XOR is a bitwise operation that is commutative, associative, and has an identity.\n        ## It is used to find the unique difference between two numbers.\n        ##\n        ## XOR is a bitwise operation that is commutative, associative, and has an identity.\n        ## It is used to find the unique difference between two numbers.\n        ##\n        ## XOR is a bitwise operation that is commutative, associative, and has an identity.\n        ## It is used to find the unique difference between two numbers.\n        ##\n        ## XOR is a bitwise operation that is commutative, associative, and has an identity.\n        ## It is used to find the unique difference between two numbers.\n        ##\n        ## XOR is a bitwise operation that is commutative, associative, and has an identity.\n        ## It is used to find the unique difference between two numbers.\n        ##\n        ## XOR is a bitwise operation that is commutative, associative, and has an identity.\n        ## It is used to find the unique difference between two numbers.\n        ##\n        ## XOR is a bitwise operation that is commutative, associative, and has an identity.\n        ## It is used to find the unique difference between two numbers.\n        ##\n        ## XOR is a bitwise operation that is commutative, associative, and has an identity.\n        ## It is used to find the unique difference between two numbers.\n        ##\n        ## XOR is a bitwise operation that is commutative, associative, and has an identity.\n        ## It is used to find the unique difference between two numbers.\n        ##\n        ## XOR is a bitwise operation that is commutative, associative, and has an identity.\n        ## It is used to find the unique difference between two numbers.\n        ##\n        ## XOR is a bitwise operation that is commutative, associative, and has an identity.\n        ## It is used to find the unique difference between two numbers.\n        ##\n        ## XOR is a bitwise operation that is commutative, associative, and has an identity.\n        ## It is used to find the unique difference between two numbers.\n        ##\n        ## XOR is a bitwise operation that is commutative, associative, and has an identity.\n        ## It is used to find the unique difference between two numbers.\n        ##\n        ## XOR is a bitwise operation that is commutative, associative, and has an identity.\n        ## It is used to find the unique difference between two numbers.\n        ##\n        ## XOR is a bitwise operation that is commutative, associative, and has an identity.\n        #"}], "sudoku-solver": [{"task_id": "sudoku-solver", "completion": "class Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        def find_empty_location(board, l):\n            for row in range(9):\n                for col in range(9):\n                    if board[row][col] == '.':\n                        l[0] = row\n                        l[1] = col\n                        return True\n            return False\n        \n        def used_in_row(board, row, num):\n            for col in range(9):\n                if board[row][col] == num:\n                    return True\n            return False\n        \n        def used_in_col(board, col, num):\n            for row in range(9):\n                if board[row][col] == num:\n                    return True\n            return False\n        \n        def used_in_box(board, row, col, num):\n            box_row = row // 3 * 3\n            box_col = col // 3 * 3\n            \n            for r in range(box_row, box_row + 3):\n                for c in range(box_col, box_col + 3):\n                    if board[r][c] == num:\n                        return True\n            return False\n        \n        def is_valid(board, row, col, num):\n            return not used_in_row(board, row, num) and not used_in_col(board, col, num) and not used_in_box(board, row, col, num)\n        \n        def solve_sudoku(board):\n            l = [0, 0]\n            if not find_empty_location(board, l):\n                return True\n            \n            row = l[0]\n            col = l[1]\n            \n            for num in range(1, 10):\n                if is_valid(board, row, col, num):\n                    board[row][col] = str(num)\n                    \n                    if solve_sudoku(board):\n                        return True\n                    \n                    board[row][col] = '.'\n            return False\n        \n        solve_sudoku(board)"}], "recover-binary-search-tree": [{"task_id": "recover-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        # find the two nodes that are swapped\n        # find the first node that is smaller than the second node\n        # find the second node that is larger than the first node\n        # swap the values of the two nodes\n        \n        # find the two nodes that are swapped\n        # find the first node that is smaller than the second node\n        # find the second node that is larger than the first node\n        # swap the values of the two nodes\n        \n        # find the two nodes that are swapped\n        # find the first node that is smaller than the second node\n        # find the second node that is larger than the first node\n        # swap the values of the two nodes\n        \n        # find the two nodes that are swapped\n        # find the first node that is smaller than the second node\n        # find the second node that is larger than the first node\n        # swap the values of the two nodes\n        \n        # find the two nodes that are swapped\n        # find the first node that is smaller than the second node\n        # find the second node that is larger than the first node\n        # swap the values of the two nodes\n        \n        # find the two nodes that are swapped\n        # find the first node that is smaller than the second node\n        # find the second node that is larger than the first node\n        # swap the values of the two nodes\n        \n        # find the two nodes that are swapped\n        # find the first node that is smaller than the second node\n        # find the second node that is larger than the first node\n        # swap the values of the two nodes\n        \n        # find the two nodes that are swapped\n        # find the first node that is smaller than the second node\n        # find the second node that is larger than the first node\n        # swap the values of the two nodes\n        \n        # find the two nodes that are swapped\n        # find the first node that is smaller than the second node\n        # find the second node that is larger than the first node\n        # swap the values of the two nodes\n        \n        # find the two nodes that are swapped\n        # find the first node that is smaller than the second node\n        # find the second node that is larger than the first node\n        # swap the values of the two nodes\n        \n        # find the two nodes that are swapped\n        # find the first node that is smaller than the second node\n        # find the second node that is larger than the first node\n        # swap the values of the two nodes\n        \n        # find the two nodes that are swapped\n        # find the first node that is smaller than the second node\n        # find the second node that is larger than the first node\n        # swap the values of the two nodes\n        \n        # find the two nodes that are swapped\n        # find the first node that is smaller than the second node\n        # find the second node that is larger than the first node\n        # swap the values of the two nodes\n        \n        # find the two nodes that are swapped\n        # find the first node that is smaller than the second node\n        # find the second node that is larger than the first node\n        # swap the values of the two nodes\n        \n        # find the two nodes that are swapped\n        # find the first node that is smaller than the second node\n        # find the second node that is larger than the first node\n        # swap the values of the two nodes\n        \n        # find the two nodes that are swapped\n        # find the first node that is smaller than the second node\n        # find the second node that is larger than the first node\n        # swap the values of the two nodes\n        \n        # find the two nodes that are swapped\n        # find the first node that is smaller than the second node\n        # find the second node that is larger than the first node\n        # swap the values of the two nodes\n        \n        # find the two nodes that are swapped\n        # find the first node that is smaller than the second node\n        # find the second node that is larger than the first node\n        # swap the values of the two nodes\n        \n        # find the two nodes that are swapped\n        # find the first node that is smaller than the second node\n        # find the second node that is larger than the first node\n        # swap the values of the two nodes\n        \n        # find the two nodes that are swapped\n        # find the first node that is smaller than the second node\n        # find the second node that is larger than the first node\n        # swap the values of the two nodes\n        \n        # find the"}], "palindrome-linked-list": [{"task_id": "palindrome-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        \n        # find the middle of the list\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # reverse the second half of the list\n        prev = None\n        while slow:\n            nxt = slow.next\n            slow.next = prev\n            prev = slow\n            slow = nxt\n        \n        # compare the first half and the second half\n        while prev:\n            if prev.val != head.val:\n                return False\n            prev = prev.next\n            head = head.next\n        \n        return True"}], "valid-perfect-square": [{"task_id": "valid-perfect-square", "completion": "class Solution(object):\n    def isPerfectSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return True\n        \n        left, right = 0, num\n        while left <= right:\n            mid = left + (right - left) // 2\n            if mid * mid == num:\n                return True\n            elif mid * mid < num:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return False"}], "counting-bits": [{"task_id": "counting-bits", "completion": "class Solution(object):\n    def countBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if n == 0:\n            return [0]\n        \n        ans = [0]\n        last_one_idx = 0\n        for i in range(1, n + 1):\n            if i & 1 == 1:\n                ans.append(ans[last_one_idx] + 1)\n                last_one_idx += 1\n            else:\n                ans.append(ans[i >> 1])\n        return ans"}], "remove-linked-list-elements": [{"task_id": "remove-linked-list-elements", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        curr = dummy\n        \n        while curr.next:\n            if curr.next.val == val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        \n        return dummy.next"}], "scramble-string": [{"task_id": "scramble-string", "completion": "class Solution(object):\n    def isScramble(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) != len(s2):\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if sorted(s1) != sorted(s2):\n            return False\n        \n        d = collections.defaultdict(int)\n        for c in s1:\n            d[c] += 1\n        \n        for c in s2:\n            d[c] -= 1\n            if d[c] < 0:\n                return False\n        \n        n = len(s1)\n        dp = [[[False] * n for _ in range(n)] for _ in range(n)]\n        \n        for i in range(n):\n            dp[i][i][d[s1[i]]] = True\n        \n        for i in range(n - 1, -1, -1):\n            for j in range(i + 1, n):\n                for k in range(1, n - j):\n                    dp[i][j][d[s1[i]]] |= dp[i + 1][j][d[s1[i + 1]]]\n                    dp[i][j][d[s1[i]]] |= dp[i][j - 1][d[s1[j]]]\n                    \n                    if s1[i] == s1[j]:\n                        continue\n                    \n                    dp[i][j][d[s1[i]]] |= dp[i + 1][j - 1][d[s1[i + 1]]]\n                    dp[i][j][d[s1[i]]] |= dp[i][j - 1][d[s1[j]]]\n                    \n                    if dp[i][j][d[s1[i]]]:\n                        break\n                    \n                    dp[i][j][d[s1[i]]] |= dp[i + 1][j - 1][d[s1[j]]]\n                    dp[i][j][d[s1[i]]] |= dp[i][j - 1][d[s1[j]]]\n                    \n                    if dp[i][j][d[s1[i]]]:\n                        break\n                    \n                    dp[i][j][d[s1[i]]] |= dp[i + 1][j][d[s1[j]]]\n                    dp[i][j][d[s1[i]]] |= dp[i][j - 1][d[s1[j]]]\n                    \n                    if dp[i][j][d[s1[i]]]:\n                        break\n                    \n                    dp[i][j][d[s1[i]]] |= dp[i + 1][j][d[s1[j]]]\n                    dp[i][j][d[s1[i]]] |= dp[i][j - 1][d[s1[j]]]\n                    \n                    if dp[i][j][d[s1[i]]]:\n                        break\n                    \n                    dp[i][j][d[s1[i]]] |= dp[i + 1][j][d[s1[j]]]\n                    dp[i][j][d[s1[i]]] |= dp[i][j - 1][d[s1[j]]]\n                    \n                    if dp[i][j][d[s1[i]]]:\n                        break\n                    \n                    dp[i][j][d[s1[i]]] |= dp[i + 1][j][d[s1[j]]]\n                    dp[i][j][d[s1[i]]] |= dp[i][j - 1][d[s1[j]]]\n                    \n                    if dp[i][j][d[s1[i]]]:\n                        break\n                    \n                    dp[i][j][d[s1[i]]] |= dp[i + 1][j][d[s1[j]]]\n                    dp[i][j][d[s1[i]]] |= dp[i][j - 1][d[s1[j]]]\n                    \n                    if dp[i][j][d[s1[i]]]:\n                        break\n                    \n                    dp[i][j][d[s1[i]]] |= dp[i"}], "simplify-path": [{"task_id": "simplify-path", "completion": "class Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        \n        stack = []\n        path = path.split('/')\n        for p in path:\n            if p == '..':\n                if stack:\n                    stack.pop()\n            elif p and p != '.':\n                stack.append(p)\n        return '/' + '/'.join(stack)"}], "word-search-ii": [{"task_id": "word-search-ii", "completion": "class Solution(object):\n    def findWords(self, board, words):\n        \"\"\"\n        :type board: List[List[str]]\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        trie = {}\n        for word in words:\n            node = trie\n            for c in word:\n                if c not in node:\n                    node[c] = {}\n                node = node[c]\n            node['#'] = '#'\n        \n        m, n = len(board), len(board[0])\n        res = set()\n        seen = set()\n        dirs = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n        \n        def dfs(i, j, node):\n            c = board[i][j]\n            if c not in node:\n                return\n            word = node.get('#')\n            if word:\n                res.add(word)\n            seen.add((i, j))\n            for di, dj in dirs:\n                ni, nj = i + di, j + dj\n                if 0 <= ni < m and 0 <= nj < n and (ni, nj) not in seen:\n                    dfs(ni, nj, node[c])\n            seen.remove((i, j))\n        \n        for i in range(m):\n            for j in range(n):\n                dfs(i, j, trie)\n        \n        return list(res)"}], "valid-anagram": [{"task_id": "valid-anagram", "completion": "class Solution(object):\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_dict = {}\n        t_dict = {}\n        \n        for i in range(len(s)):\n            s_dict[s[i]] = s_dict.get(s[i], 0) + 1\n            t_dict[t[i]] = t_dict.get(t[i], 0) + 1\n        \n        for key in s_dict:\n            if s_dict[key] != t_dict.get(key, 0):\n                return False\n        \n        return True"}], "valid-sudoku": [{"task_id": "valid-sudoku", "completion": "class Solution(object):\n    def isValidSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. check rows\n        # 2. check cols\n        # 3. check 3x3 boxes\n        \n        # 1. check rows\n        rows = [set() for _ in range(9)]\n        cols = [set() for _ in range(9)]\n        boxes = [set() for _ in range(9)]\n        \n        for i in range(9):\n            for j in range(9):\n                if board[i][j] != '.':\n                    num = int(board[i][j])\n                    box_idx = (i // 3) * 3 + j // 3\n                    if rows[i].add(num) or cols[j].add(num) or boxes[box_idx].add(num):\n                        return False\n        \n        return True"}], "fizz-buzz": [{"task_id": "fizz-buzz", "completion": "class Solution(object):\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        ans = []\n        for i in range(1, n + 1):\n            if i % 3 == 0 and i % 5 == 0:\n                ans.append(\"FizzBuzz\")\n            elif i % 3 == 0:\n                ans.append(\"Fizz\")\n            elif i % 5 == 0:\n                ans.append(\"Buzz\")\n            else:\n                ans.append(str(i))\n        return ans"}], "reverse-words-in-a-string": [{"task_id": "reverse-words-in-a-string", "completion": "class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # split the string into words\n        words = s.split()\n        \n        # reverse the order of words\n        words.reverse()\n        \n        # join the words with a single space\n        return ' '.join(words)"}], "excel-sheet-column-number": [{"task_id": "excel-sheet-column-number", "completion": "class Solution(object):\n    def titleToNumber(self, columnTitle):\n        \"\"\"\n        :type columnTitle: str\n        :rtype: int\n        \"\"\"\n        \n        res = 0\n        for i, c in enumerate(columnTitle[::-1]):\n            res += (ord(c) - ord('A') + 1) * 26 ** i\n        return res"}], "candy": [{"task_id": "candy", "completion": "class Solution(object):\n    def candy(self, ratings):\n        \"\"\"\n        :type ratings: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(ratings)\n        if n < 2:\n            return n\n        \n        candies = [1] * n\n        for i in range(1, n):\n            if ratings[i] > ratings[i - 1]:\n                candies[i] = candies[i - 1] + 1\n        \n        for i in range(n - 1, 0, -1):\n            if ratings[i] < ratings[i - 1]:\n                candies[i - 1] = max(candies[i - 1], candies[i] + 1)\n        \n        return sum(candies)"}], "same-tree": [{"task_id": "same-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if not p and not q:\n            return True\n        if not p or not q:\n            return False\n        if p.val != q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"}], "reorder-list": [{"task_id": "reorder-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reorderList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: None Do not return anything, modify head in-place instead.\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        # find the middle node\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # reverse the second half\n        prev = None\n        curr = slow\n        while curr:\n            curr.next, prev, curr = prev, curr, curr.next\n        \n        # merge the two halves\n        left, right = head, prev\n        while right.next:\n            left, right = left.next, right.next\n            left.next, right.next = right, left.next\n        \n        return head"}], "word-pattern": [{"task_id": "word-pattern", "completion": "class Solution(object):\n    def wordPattern(self, pattern, s):\n        \"\"\"\n        :type pattern: str\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. split the string into words\n        words = s.split()\n        if len(words) != len(pattern):\n            return False\n        \n        # 2. build a map from pattern to words\n        p2w = {}\n        w2p = {}\n        for p, w in zip(pattern, words):\n            if p in p2w and w2p.get(w, p) != p:\n                return False\n            if w in w2p and p2w.get(p, w) != w:\n                return False\n            p2w[p] = w\n            w2p[w] = p\n        \n        return True"}], "permutations": [{"task_id": "permutations", "completion": "class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if len(nums) == 1:\n            return [nums]\n        \n        res = []\n        for i in range(len(nums)):\n            num = nums[i]\n            nums.pop(i)\n            perms = self.permute(nums)\n            for perm in perms:\n                perm.append(num)\n            res.extend(perms)\n            nums.insert(i, num)\n        return res"}], "search-a-2d-matrix": [{"task_id": "search-a-2d-matrix", "completion": "class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        m, n = len(matrix), len(matrix[0])\n        if target < matrix[0][0] or target > matrix[-1][-1]:\n            return False\n        \n        row, col = m - 1, 0\n        while row >= 0 and col < n:\n            if matrix[row][col] == target:\n                return True\n            elif matrix[row][col] < target:\n                col += 1\n            else:\n                row -= 1\n        \n        return False"}], "add-two-numbers": [{"task_id": "add-two-numbers", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        carry = 0\n        dummy = ListNode(0)\n        curr = dummy\n        while l1 or l2 or carry:\n            val1 = l1.val if l1 else 0\n            val2 = l2.val if l2 else 0\n            carry, val = divmod(val1 + val2 + carry, 10)\n            curr.next = ListNode(val)\n            curr = curr.next\n            l1 = l1.next if l1 else None\n            l2 = l2.next if l2 else None\n        return dummy.next"}], "number-complement": [{"task_id": "number-complement", "completion": "class Solution(object):\n    def findComplement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. get the binary representation of num\n        # 2. get the complement of the binary representation\n        # 3. convert the complement to decimal\n        \n        # 1. get the binary representation of num\n        binary = bin(num)[2:]\n        # 2. get the complement of the binary representation\n        complement = ''.join('1' if c == '0' else '0' for c in binary)\n        # 3. convert the complement to decimal\n        return int(complement, 2)"}], "arithmetic-slices-ii-subsequence": [{"task_id": "arithmetic-slices-ii-subsequence", "completion": "class Solution(object):\n    def numberOfArithmeticSlices(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 3:\n            return 0\n        \n        dp = [0] * len(nums)\n        if nums[1] - nums[0] == nums[2] - nums[1]:\n            dp[2] = 1\n        else:\n            dp[2] = 0\n        ans = dp[2]\n        \n        for i in range(3, len(nums)):\n            if nums[i] - nums[i - 1] == nums[i - 1] - nums[i - 2]:\n                dp[i] = dp[i - 1] + 1\n            else:\n                dp[i] = 0\n            ans += dp[i]\n        \n        return ans"}], "text-justification": [{"task_id": "text-justification", "completion": "class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "binary-tree-postorder-traversal": [{"task_id": "binary-tree-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def postorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        stack, res, prev = [root], [], root\n        \n        while stack:\n            curr = stack.pop()\n            if curr.left:\n                stack.append(curr.left)\n            if curr.right:\n                stack.append(curr.right)\n            if not curr.left and not curr.right:\n                res.append(curr.val)\n                prev = curr\n        \n        return res[::-1]"}], "container-with-most-water": [{"task_id": "container-with-most-water", "completion": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # two pointers\n        # left, right = 0, len(height) - 1\n        # max_area = 0\n        # while left < right:\n        #     area = min(height[left], height[right]) * (right - left)\n        #     max_area = max(max_area, area)\n        #     if height[left] < height[right]:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return max_area\n        \n        # two pointers\n        # left, right = 0, len(height) - 1\n        # max_area = 0\n        # while left < right:\n        #     area = min(height[left], height[right]) * (right - left)\n        #     max_area = max(max_area, area)\n        #     if height[left] < height[right]:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return max_area\n        \n        # two pointers\n        # left, right = 0, len(height) - 1\n        # max_area = 0\n        # while left < right:\n        #     area = min(height[left], height[right]) * (right - left)\n        #     max_area = max(max_area, area)\n        #     if height[left] < height[right]:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return max_area\n        \n        # two pointers\n        # left, right = 0, len(height) - 1\n        # max_area = 0\n        # while left < right:\n        #     area = min(height[left], height[right]) * (right - left)\n        #     max_area = max(max_area, area)\n        #     if height[left] < height[right]:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return max_area\n        \n        # two pointers\n        # left, right = 0, len(height) - 1\n        # max_area = 0\n        # while left < right:\n        #     area = min(height[left], height[right]) * (right - left)\n        #     max_area = max(max_area, area)\n        #     if height[left] < height[right]:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return max_area\n        \n        # two pointers\n        # left, right = 0, len(height) - 1\n        # max_area = 0\n        # while left < right:\n        #     area = min(height[left], height[right]) * (right - left)\n        #     max_area = max(max_area, area)\n        #     if height[left] < height[right]:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return max_area\n        \n        # two pointers\n        # left, right = 0, len(height) - 1\n        # max_area = 0\n        # while left < right:\n        #     area = min(height[left], height[right]) * (right - left)\n        #     max_area = max(max_area, area)\n        #     if height[left] < height[right]:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return max_area\n        \n        # two pointers\n        # left, right = 0, len(height) - 1\n        # max_area = 0\n        # while left < right:\n        #     area = min(height[left], height[right]) * (right - left)\n        #     max_area = max(max_area, area)\n        #     if height[left] < height[right]:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return max_area\n        \n        # two pointers\n        # left, right = 0, len(height) - 1\n        # max_area = 0\n        # while left < right:\n        #     area = min(height[left], height[right]) * ("}], "concatenated-words": [{"task_id": "concatenated-words", "completion": "class Solution(object):\n    def findAllConcatenatedWordsInADict(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # Time: O(N * L^2)\n        # Space: O(N)\n        # Trie + DFS\n        # https://leetcode.com/problems/concatenated-words-ii/discuss/102592/Python-Trie-DFS-solution-with-explanation\n        # https://leetcode.com/problems/concatenated-words-ii/discuss/102592/Python-Trie-DFS-solution-with-explanation/102601\n        # https://leetcode.com/problems/concatenated-words-ii/discuss/102592/Python-Trie-DFS-solution-with-explanation/102601#\n        # https://leetcode.com/problems/concatenated-words-ii/discuss/102592/Python-Trie-DFS-solution-with-explanation/102601#\n        # https://leetcode.com/problems/concatenated-words-ii/discuss/102592/Python-Trie-DFS-solution-with-explanation/102601#\n        # https://leetcode.com/problems/concatenated-words-ii/discuss/102592/Python-Trie-DFS-solution-with-explanation/102601#\n        # https://leetcode.com/problems/concatenated-words-ii/discuss/102592/Python-Trie-DFS-solution-with-explanation/102601#\n        # https://leetcode.com/problems/concatenated-words-ii/discuss/102592/Python-Trie-DFS-solution-with-explanation/102601#\n        # https://leetcode.com/problems/concatenated-words-ii/discuss/102592/Python-Trie-DFS-solution-with-explanation/102601#\n        # https://leetcode.com/problems/concatenated-words-ii/discuss/102592/Python-Trie-DFS-solution-with-explanation/102601#\n        # https://leetcode.com/problems/concatenated-words-ii/discuss/102592/Python-Trie-DFS-solution-with-explanation/102601#\n        # https://leetcode.com/problems/concatenated-words-ii/discuss/102592/Python-Trie-DFS-solution-with-explanation/102601#\n        # https://leetcode.com/problems/concatenated-words-ii/discuss/102592/Python-Trie-DFS-solution-with-explanation/102601#\n        # https://leetcode.com/problems/concatenated-words-ii/discuss/102592/Python-Trie-DFS-solution-with-explanation/102601#\n        # https://leetcode.com/problems/concatenated-words-ii/discuss/102592/Python-Trie-DFS-solution-with-explanation/102601#\n        # https://leetcode.com/problems/concatenated-words-ii/discuss/102592/Python-Trie-DFS-solution-with-explanation/102601#\n        # https://leetcode.com/problems/concatenated-words-ii/discuss/102592/Python-Trie-DFS-solution-with-explanation/102601#\n        # https://leetcode.com/problems/concatenated-words-ii/discuss/102592/Python-Trie-DFS-solution-with-explanation/102"}], "base-7": [{"task_id": "base-7", "completion": "class Solution(object):\n    def convertToBase7(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return '0'\n        \n        if num < 0:\n            num = -num\n            sign = -1\n        else:\n            sign = 1\n        \n        res = ''\n        while num:\n            res = str(num % 7) + res\n            num //= 7\n        \n        return res if sign == 1 else '-' + res"}], "nim-game": [{"task_id": "nim-game", "completion": "class Solution(object):\n    def canWinNim(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        return n % 4 != 0"}], "n-queens-ii": [{"task_id": "n-queens-ii", "completion": "class Solution(object):\n    def totalNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. 1 queen\n        # 2. 2 queens\n        # 3. 3 queens\n        # 4. 4 queens\n        # 5. 5 queens\n        # 6. 6 queens\n        # 7. 7 queens\n        # 8. 8 queens\n        # 9. 9 queens\n        # 10. 10 queens\n        # 11. 11 queens\n        # 12. 12 queens\n        # 13. 13 queens\n        # 14. 14 queens\n        # 15. 15 queens\n        # 16. 16 queens\n        # 17. 17 queens\n        # 18. 18 queens\n        # 19. 19 queens\n        # 20. 20 queens\n        # 21. 21 queens\n        # 22. 22 queens\n        # 23. 23 queens\n        # 24. 24 queens\n        # 25. 25 queens\n        # 26. 26 queens\n        # 27. 27 queens\n        # 28. 28 queens\n        # 29. 29 queens\n        # 30. 30 queens\n        # 31. 31 queens\n        # 32. 32 queens\n        # 33. 33 queens\n        # 34. 34 queens\n        # 35. 35 queens\n        # 36. 36 queens\n        # 37. 37 queens\n        # 38. 38 queens\n        # 39. 39 queens\n        # 40. 40 queens\n        # 41. 41 queens\n        # 42. 42 queens\n        # 43. 43 queens\n        # 44. 44 queens\n        # 45. 45 queens\n        # 46. 46 queens\n        # 47. 47 queens\n        # 48. 48 queens\n        # 49. 49 queens\n        # 50. 50 queens\n        # 51. 51 queens\n        # 52. 52 queens\n        # 53. 53 queens\n        # 54. 54 queens\n        # 55. 55 queens\n        # 56. 56 queens\n        # 57. 57 queens\n        # 58. 58 queens\n        # 59. 59 queens\n        # 60. 60 queens\n        # 61. 61 queens\n        # 62. 62 queens\n        # 63. 63 queens\n        # 64. 64 queens\n        # 65. 65 queens\n        # 66. 66 queens\n        # 67. 67 queens\n        # 68. 68 queens\n        # 69. 69 queens\n        # 70. 70 queens\n        # 71. 71 queens\n        # 72. 72 queens\n        # 73. 73 queens\n        # 74. 74 queens\n        # 75. 75 queens\n        # 76. 76 queens\n        # 77. 77 queens\n        # 78. 78 queens\n        # 79. 79 queens\n        # 80. 80 queens\n        # 81. 81 queens\n        # 82. 82 queens\n        # 83. 83 queens\n        # 84. 84 queens\n        # 85. 85 queens\n        # 86. 86 queens\n        # 87. 87 queens"}], "n-queens": [{"task_id": "n-queens", "completion": "class Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def isValid(board, row, col):\n            for i in range(row):\n                if board[i][col] == 'Q':\n                    return False\n            i, j = row - 1, col - 1\n            while i >= 0 and j >= 0:\n                if board[i][j] == 'Q':\n                    return False\n                i -= 1\n                j -= 1\n            i, j = row - 1, col + 1\n            while i >= 0 and j < n:\n                if board[i][j] == 'Q':\n                    return False\n                i -= 1\n                j += 1\n            return True\n        \n        def dfs(board, row):\n            if row == n:\n                return [[''.join(board[i]) for i in range(n)]]\n            res = []\n            for col in range(n):\n                if not isValid(board, row, col):\n                    continue\n                board[row][col] = 'Q'\n                res.extend(dfs(board, row + 1))\n                board[row][col] = '.'\n            return res\n        \n        board = [['.'] * n for _ in range(n)]\n        return dfs(board, 0)"}], "word-search": [{"task_id": "word-search", "completion": "class Solution(object):\n    def exist(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if not board or not word:\n            return False\n        \n        m, n = len(board), len(board[0])\n        visited = [[False] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == word[0]:\n                    if self.dfs(board, word, i, j, visited):\n                        return True\n        return False\n        \n    def dfs(self, board, word, i, j, visited):\n        if len(word) == 0:\n            return True\n        \n        m, n = len(board), len(board[0])\n        if i < 0 or i >= m or j < 0 or j >= n or visited[i][j] or board[i][j] != word[0]:\n            return False\n        \n        visited[i][j] = True\n        res = self.dfs(board, word[1:], i + 1, j, visited) or \\\n            self.dfs(board, word[1:], i - 1, j, visited) or \\\n            self.dfs(board, word[1:], i, j + 1, visited) or \\\n            self.dfs(board, word[1:], i, j - 1, visited)\n        visited[i][j] = False\n        return res"}], "merge-sorted-array": [{"task_id": "merge-sorted-array", "completion": "class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        \n        # 2 pointers\n        # 1. nums1 is sorted\n        # 2. nums2 is sorted\n        # 3. nums1 is empty\n        # 4. nums2 is empty\n        # 5. nums1 is full\n        # 6. nums2 is full\n        # 7. nums1 is full and nums2 is empty\n        # 8. nums1 is empty and nums2 is full\n        # 9. nums1 is full and nums2 is full\n        \n        # 1. nums1 is empty\n        if m == 0:\n            nums1[:] = nums2[:]\n            return\n        \n        # 2. nums2 is empty\n        if n == 0:\n            return\n        \n        # 3. nums1 is full\n        if m + n == len(nums1):\n            nums1[:] = nums1[:m] + nums2[:]\n            return\n        \n        # 4. nums2 is full\n        if m + n == len(nums2):\n            return\n        \n        # 5. nums1 is full and nums2 is empty\n        if m + n == len(nums1) - 1:\n            nums1[:] = nums1[:m] + [0]\n            return\n        \n        # 6. nums1 is empty and nums2 is full\n        if m + n == len(nums2) - 1:\n            nums1[:] = nums2[:]\n            return\n        \n        # 7. nums1 is full and nums2 is full\n        # 8. nums1 is empty and nums2 is full\n        # 9. nums1 is full and nums2 is full\n        i = m - 1\n        j = n - 1\n        k = m + n - 1\n        while i >= 0 and j >= 0:\n            if nums1[i] < nums2[j]:\n                nums1[k] = nums2[j]\n                j -= 1\n            else:\n                nums1[k] = nums1[i]\n                i -= 1\n            k -= 1\n        \n        while j >= 0:\n            nums1[k] = nums2[j]\n            j -= 1\n            k -= 1\n        \n        return"}], "third-maximum-number": [{"task_id": "third-maximum-number", "completion": "class Solution(object):\n    def thirdMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. sort the array\n        # 2. find the third max\n        # 3. if the third max is not in the array, return the last max\n        # 4. if the third max is in the array, return the third max\n        \n        nums = sorted(set(nums))\n        return nums[-1] if len(nums) < 3 else nums[-3]"}]}