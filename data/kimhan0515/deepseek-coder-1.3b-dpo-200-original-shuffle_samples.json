{"spiral-matrix": [{"task_id": "spiral-matrix", "completion": "class Solution(object):\n    def spiralOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not matrix:\n            return []\n        \n        m, n = len(matrix), len(matrix[0])\n        res = []\n        top, bottom = 0, m-1\n        left, right = 0, n-1\n        \n        while top <= bottom and left <= right:\n            \n            # top row\n            for i in range(left, right+1):\n                res.append(matrix[top][i])\n            top += 1\n            \n            # right col\n            for i in range(top, bottom+1):\n                res.append(matrix[i][right])\n            right -= 1\n            \n            # bottom row\n            if top <= bottom:\n                for i in range(right, left-1, -1):\n                    res.append(matrix[bottom][i])\n                bottom -= 1\n            \n            # left col\n            if left <= right:\n                for i in range(bottom, top-1, -1):\n                    res.append(matrix[i][left])\n                left += 1\n        \n        return res"}], "summary-ranges": [{"task_id": "summary-ranges", "completion": "class Solution(object):\n    def summaryRanges(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        if len(nums) == 0:\n            return []\n        \n        if len(nums) == 1:\n            return [str(nums[0])]\n        \n        start = nums[0]\n        end = nums[0]\n        res = []\n        \n        for i in range(1, len(nums)):\n            if nums[i] == end + 1:\n                end = nums[i]\n            else:\n                if start == end:\n                    res.append(str(start))\n                else:\n                    res.append(str(start) + \"->\" + str(end))\n                start = nums[i]\n                end = nums[i]\n        \n        if start == end:\n            res.append(str(start))\n        else:\n            res.append(str(start) + \"->\" + str(end))\n        \n        return res"}], "distinct-subsequences": [{"task_id": "distinct-subsequences", "completion": "class Solution(object):\n    def numDistinct(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"\n        \n        dp = [0] * (len(t) + 1)\n        dp[0] = 1\n        \n        for i in range(len(s)):\n            for j in range(len(t), 0, -1):\n                if s[i] == t[j - 1]:\n                    dp[j] += dp[j - 1]\n        \n        return dp[-1]"}], "first-missing-positive": [{"task_id": "first-missing-positive", "completion": "class Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## 1. Mark all negative numbers as 0\n        for i in range(len(nums)):\n            if nums[i] < 0:\n                nums[i] = 0\n        \n        ## 2. Mark all numbers in the range [1, n] as 1\n        for i in range(len(nums)):\n            if 1 <= nums[i] <= len(nums):\n                nums[nums[i] - 1] = nums[nums[i] - 1]\n        \n        ## 3. Find the first number that is not 1\n        for i in range(len(nums)):\n            if nums[i] != 1:\n                return i + 1\n        \n        ## 4. If all numbers are 1, return n + 1\n        return len(nums) + 1"}], "permutation-sequence": [{"task_id": "permutation-sequence", "completion": "class Solution(object):\n    def getPermutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. calculate the factorial of n\n        fact = 1\n        for i in range(1, n):\n            fact *= i\n        \n        # 2. calculate the number of digits\n        num_digits = n\n        k -= 1\n        \n        # 3. calculate the number of groups\n        groups = k // fact\n        \n        # 4. calculate the number of digits in the current group\n        digits = k % fact\n        \n        # 5. calculate the number of digits in the next group\n        next_group_digits = fact - digits\n        \n        # 6. calculate the number of digits in the next group\n        next_group_digits = fact - digits\n        \n        # 7. calculate the number of digits in the next group\n        next_group_digits = fact - digits\n        \n        # 8. calculate the number of digits in the next group\n        next_group_digits = fact - digits\n        \n        # 9. calculate the number of digits in the next group\n        next_group_digits = fact - digits\n        \n        # 10. calculate the number of digits in the next group\n        next_group_digits = fact - digits\n        \n        # 11. calculate the number of digits in the next group\n        next_group_digits = fact - digits\n        \n        # 12. calculate the number of digits in the next group\n        next_group_digits = fact - digits\n        \n        # 13. calculate the number of digits in the next group\n        next_group_digits = fact - digits\n        \n        # 14. calculate the number of digits in the next group\n        next_group_digits = fact - digits\n        \n        # 15. calculate the number of digits in the next group\n        next_group_digits = fact - digits\n        \n        # 16. calculate the number of digits in the next group\n        next_group_digits = fact - digits\n        \n        # 17. calculate the number of digits in the next group\n        next_group_digits = fact - digits\n        \n        # 18. calculate the number of digits in the next group\n        next_group_digits = fact - digits\n        \n        # 19. calculate the number of digits in the next group\n        next_group_digits = fact - digits\n        \n        # 20. calculate the number of digits in the next group\n        next_group_digits = fact - digits\n        \n        # 21. calculate the number of digits in the next group\n        next_group_digits = fact - digits\n        \n        # 22. calculate the number of digits in the next group\n        next_group_digits = fact - digits\n        \n        # 23. calculate the number of digits in the next group\n        next_group_digits = fact - digits\n        \n        # 24. calculate the number of digits in the next group\n        next_group_digits = fact - digits\n        \n        # 25. calculate the number of digits in the next group\n        next_group_digits = fact - digits\n        \n        # 26. calculate the number of digits in the next group\n        next_group_digits = fact - digits\n        \n        # 27. calculate the number of digits in the next group\n        next_group_digits = fact - digits\n        \n        # 28. calculate the number of digits in the next group\n        next_group_digits = fact - digits\n        \n        # 29. calculate the number of digits in the next group\n        next_group_digits = fact - digits\n        \n        # 30. calculate the number of digits in the next group\n        next_group_digits = fact - digits\n        \n        # 31. calculate the number of digits in the next group\n        next_group_digits = fact - digits\n        \n        # 32. calculate the number of digits in the next group\n        next_group_digits = fact - digits\n        \n        # 33. calculate the number of digits in the next group\n        next_group_dig"}], "two-sum-ii-input-array-is-sorted": [{"task_id": "two-sum-ii-input-array-is-sorted", "completion": "class Solution(object):\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # create a dictionary to store the numbers and their indices\n        num_dict = {}\n        \n        # iterate over the numbers list\n        for i, num in enumerate(numbers):\n            # check if the complement of the target minus the current number is in the dictionary\n            if target - num in num_dict:\n                # return the indices of the complement and the current number\n                return [num_dict[target - num] + 1, i + 1]\n            # add the current number to the dictionary with its index as the value\n            num_dict[num] = i"}], "expression-add-operators": [{"task_id": "expression-add-operators", "completion": "class Solution(object):\n    def addOperators(self, num, target):\n        \"\"\"\n        :type num: str\n        :type target: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def backtrack(i, curr, prev, op, res):\n            if i == len(num):\n                if curr == target:\n                    res.append(op)\n                return\n            for j in range(i, len(num)):\n                if j > i and num[i] == '0':\n                    break\n                curr_num = int(num[i:j+1])\n                if op == '':\n                    backtrack(j+1, curr_num, curr_num, num[j+1], res)\n                else:\n                    backtrack(j+1, curr + curr_num, curr_num, op + '+' + num[j+1], res)\n                    backtrack(j+1, curr - curr_num, -curr_num, op + '-' + num[j+1], res)\n                    backtrack(j+1, curr - prev + curr_num, curr_num, op + '*' + num[j+1], res)\n        \n        if not num:\n            return []\n        \n        res = []\n        backtrack(0, 0, 0, '', res)\n        return res"}], "sum-root-to-leaf-numbers": [{"task_id": "sum-root-to-leaf-numbers", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def dfs(node, prevSum):\n            if not node:\n                return 0\n            if not node.left and not node.right:\n                return prevSum * 10 + node.val\n            return dfs(node.left, prevSum * 10 + node.val) + dfs(node.right, prevSum * 10 + node.val)\n        \n        return dfs(root, 0)"}], "license-key-formatting": [{"task_id": "license-key-formatting", "completion": "class Solution(object):\n    def licenseKeyFormatting(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        s = s.upper()\n        s = s.replace('-', '')\n        n = len(s)\n        if n <= k:\n            return s\n        \n        if n % k == 0:\n            return s[:k]\n        \n        return s[:k] + '-' + s[k:]"}], "gas-station": [{"task_id": "gas-station", "completion": "class Solution(object):\n    def canCompleteCircuit(self, gas, cost):\n        \"\"\"\n        :type gas: List[int]\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if sum(gas) < sum(cost):\n            return -1\n        \n        curr_sum = 0\n        total_sum = 0\n        start = 0\n        \n        for i in range(len(gas)):\n            curr_sum += gas[i] - cost[i]\n            if curr_sum < 0:\n                start = i + 1\n                curr_sum = 0\n            total_sum += gas[i] - cost[i]\n        \n        if total_sum < 0:\n            return -1\n        else:\n            return start"}], "burst-balloons": [{"task_id": "burst-balloons", "completion": "class Solution(object):\n    def maxCoins(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums = [1] + nums + [1]\n        n = len(nums)\n        dp = [[0] * n for _ in range(n)]\n        \n        for i in range(n-2, -1, -1):\n            for j in range(i+2, n):\n                dp[i][j] = max(nums[i]*nums[k]*nums[j] + dp[i][k] + dp[k][j] for k in range(i+1, j))\n        \n        return dp[0][n-1]"}], "plus-one": [{"task_id": "plus-one", "completion": "class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        for i in range(len(digits)-1,-1,-1):\n            if digits[i] < 9:\n                digits[i] += 1\n                return digits\n            digits[i] = 0\n        return [1] + digits"}], "regular-expression-matching": [{"task_id": "regular-expression-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        if not p.replace('*', ''):\n            return not s\n        \n        star = p.find('*')\n        if star == -1:\n            return False\n        \n        if star == 0:\n            return False\n        \n        if p[star - 1] != '*':\n            return False\n        \n        if star + 1 == len(p):\n            return True\n        \n        if p[star + 1] != '*':\n            return False\n        \n        if s[0] != p[0] and p[0] != '.':\n            return False\n        \n        if p[star] == '*':\n            return self.isMatch(s, p[star:])\n        \n        for i in range(1, len(s)):\n            if p[star] == '.' or p[star] == s[i]:\n                if self.isMatch(s[i + 1:], p[star + 1:]):\n                    return True\n            elif p[star] == '*':\n                if self.isMatch(s[i + 1:], p[star + 1:]):\n                    return True\n                elif p[star - 1] != s[i] and p[star - 1] != '.':\n                    return False\n                else:\n                    if self.isMatch(s[i + 1:], p[star:]):\n                        return True\n        \n        return False"}], "create-maximum-number": [{"task_id": "create-maximum-number", "completion": "class Solution(object):\n    def maxNumber(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # if k is 0, return empty list\n        if k == 0:\n            return []\n        \n        # if nums1 is empty, return nums2[:k]\n        if len(nums1) == 0:\n            return nums2[:k]\n        \n        # if nums2 is empty, return nums1[:k]\n        if len(nums2) == 0:\n            return nums1[:k]\n        \n        # if nums1 is larger than nums2, swap nums1 and nums2\n        if len(nums1) < len(nums2):\n            nums1, nums2 = nums2, nums1\n        \n        # if nums1 has more digits than k, return nums1[:k]\n        if len(nums1) > k:\n            return nums1[:k]\n        \n        # if nums2 has more digits than k, return nums2[:k]\n        if len(nums2) > k:\n            return nums2[:k]\n        \n        # if nums1 has more digits than nums2, return nums1[:k]\n        if len(nums1) > len(nums2):\n            return nums1[:k]\n        \n        # if nums2 has more digits than nums1, return nums2[:k]\n        if len(nums2) > len(nums1):\n            return nums2[:k]\n        \n        # if nums1 has the same number of digits as nums2, return nums1[:k]\n        if len(nums1) == len(nums2):\n            return nums1[:k]\n        \n        # if nums1 has more digits than nums2, return nums1[:k]\n        if len(nums1) > len(nums2):\n            return nums1[:k]\n        \n        # if nums2 has more digits than nums1, return nums2[:k]\n        if len(nums2) > len(nums1):\n            return nums2[:k]\n        \n        # if nums1 has the same number of digits as nums2, return nums1[:k]\n        if len(nums1) == len(nums2):\n            return nums1[:k]\n        \n        # if nums1 has more digits than nums2, return nums1[:k]\n        if len(nums1) > len(nums2):\n            return nums1[:k]\n        \n        # if nums2 has more digits than nums1, return nums2[:k]\n        if len(nums2) > len(nums1):\n            return nums2[:k]\n        \n        # if nums1 has the same number of digits as nums2, return nums1[:k]\n        if len(nums1) == len(nums2):\n            return nums1[:k]\n        \n        # if nums1 has more digits than nums2, return nums1[:k]\n        if len(nums1) > len(nums2):\n            return nums1[:k]\n        \n        # if nums2 has more digits than nums1, return nums2[:k]\n        if len(nums2) > len(nums1):\n            return nums2[:k]\n        \n        # if nums1 has the same number of digits as nums2, return nums1[:k]\n        if len(nums1) == len(nums2):\n            return nums1[:k]\n        \n        # if nums1 has more digits than nums2, return nums1[:k]\n        if len(nums1) > len(nums2):\n            return nums1[:k]\n        \n        # if nums2 has more digits than nums1, return nums2[:k]\n        if len(nums2) > len(nums1):\n            return nums2[:k]\n        \n        # if nums1 has the same number of digits as nums2, return nums1[:k]\n        if len(nums1) == len(nums2):\n            return nums1[:k]\n        \n        # if nums1 has more dig"}], "perfect-number": [{"task_id": "perfect-number", "completion": "class Solution(object):\n    def checkPerfectNumber(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return False\n        \n        sum = 1\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                if i**2 != num:\n                    sum += i + num//i\n                else:\n                    sum += i\n        \n        return sum == num"}], "fibonacci-number": [{"task_id": "fibonacci-number", "completion": "class Solution(object):\n    def fib(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        \n        a = 0\n        b = 1\n        for i in range(2, n+1):\n            c = a + b\n            a = b\n            b = c\n        return b"}], "dungeon-game": [{"task_id": "dungeon-game", "completion": "class Solution(object):\n    def calculateMinimumHP(self, dungeon):\n        \"\"\"\n        :type dungeon: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(dungeon)\n        n = len(dungeon[0])\n        \n        dp = [[0 for i in range(n)] for j in range(m)]\n        \n        for i in range(m-1,-1,-1):\n            for j in range(n-1,-1,-1):\n                if i == m-1 and j == n-1:\n                    dp[i][j] = max(1, 1-dungeon[i][j])\n                elif i == m-1:\n                    dp[i][j] = max(1, dp[i][j+1]-dungeon[i][j])\n                elif j == n-1:\n                    dp[i][j] = max(1, dp[i+1][j]-dungeon[i][j])\n                else:\n                    dp[i][j] = max(1, min(dp[i][j+1], dp[i+1][j])-dungeon[i][j])\n        \n        return dp[0][0]"}], "find-k-th-smallest-pair-distance": [{"task_id": "find-k-th-smallest-pair-distance", "completion": "class Solution(object):\n    def smallestDistancePair(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        n = len(nums)\n        left, right = 0, nums[-1] - nums[0]\n        \n        while left < right:\n            mid = (left + right) // 2\n            count = 0\n            j = 0\n            \n            for i in range(n):\n                while nums[i] - nums[j] > mid:\n                    j += 1\n                count += i - j\n                \n            if count >= k:\n                right = mid\n            else:\n                left = mid + 1\n                \n        return left"}], "number-of-segments-in-a-string": [{"task_id": "number-of-segments-in-a-string", "completion": "class Solution(object):\n    def countSegments(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        return len(s.split())"}], "reverse-vowels-of-a-string": [{"task_id": "reverse-vowels-of-a-string", "completion": "class Solution(object):\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n        l, r = 0, len(s) - 1\n        s = list(s)\n        \n        while l < r:\n            while l < r and s[l] not in vowels:\n                l += 1\n            while r > l and s[r] not in vowels:\n                r -= 1\n            s[l], s[r] = s[r], s[l]\n            l += 1\n            r -= 1\n        \n        return ''.join(s)"}], "longest-consecutive-sequence": [{"task_id": "longest-consecutive-sequence", "completion": "class Solution(object):\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 0:\n            return 0\n        \n        nums_set = set(nums)\n        max_length = 0\n        \n        for num in nums:\n            if num - 1 not in nums_set:\n                curr_num = num\n                curr_length = 1\n                \n                while curr_num + 1 in nums_set:\n                    curr_num += 1\n                    curr_length += 1\n                    \n                max_length = max(max_length, curr_length)\n                \n        return max_length"}], "missing-number": [{"task_id": "missing-number", "completion": "class Solution(object):\n    def missingNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## Solution 1:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## Using XOR\n        ## XOR of all numbers from 0 to n\n        ## XOR of all numbers from 0 to n+1\n        ## XOR of all numbers from 0 to n+2\n        ## XOR of all numbers from 0 to n+3\n        ## XOR of all numbers from 0 to n+4\n        ## XOR of all numbers from 0 to n+5\n        ## XOR of all numbers from 0 to n+6\n        ## XOR of all numbers from 0 to n+7\n        ## XOR of all numbers from 0 to n+8\n        ## XOR of all numbers from 0 to n+9\n        ## XOR of all numbers from 0 to n+10\n        ## XOR of all numbers from 0 to n+11\n        ## XOR of all numbers from 0 to n+12\n        ## XOR of all numbers from 0 to n+13\n        ## XOR of all numbers from 0 to n+14\n        ## XOR of all numbers from 0 to n+15\n        ## XOR of all numbers from 0 to n+16\n        ## XOR of all numbers from 0 to n+17\n        ## XOR of all numbers from 0 to n+18\n        ## XOR of all numbers from 0 to n+19\n        ## XOR of all numbers from 0 to n+20\n        ## XOR of all numbers from 0 to n+21\n        ## XOR of all numbers from 0 to n+22\n        ## XOR of all numbers from 0 to n+23\n        ## XOR of all numbers from 0 to n+24\n        ## XOR of all numbers from 0 to n+25\n        ## XOR of all numbers from 0 to n+26\n        ## XOR of all numbers from 0 to n+27\n        ## XOR of all numbers from 0 to n+28\n        ## XOR of all numbers from 0 to n+29\n        ## XOR of all numbers from 0 to n+30\n        ## XOR of all numbers from 0 to n+31\n        ## XOR of all numbers from 0 to n+32\n        ## XOR of all numbers from 0 to n+33\n        ## XOR of all numbers from 0 to n+34\n        ## XOR of all numbers from 0 to n+35\n        ## XOR of all numbers from 0 to n+36\n        ## XOR of all numbers from 0 to n+37\n        ## XOR of all numbers from 0 to n+38\n        ## XOR of all numbers from 0 to n+39\n        ## XOR of all numbers from 0 to n+40\n        ## XOR of all numbers from 0 to n+41\n        ## XOR of all numbers from 0 to n+42\n        ## XOR of all numbers from 0 to n+43\n        ## XOR of all numbers from 0 to n+44\n        ## XOR of all numbers from 0 to n+45\n        ## XOR of all numbers from 0 to n+46\n        ## XOR of all numbers from 0 to n+47\n        ## XOR of all numbers from 0 to n+48\n        ## XOR of all numbers from 0 to n+49\n        ## XOR of all numbers from 0 to n+50\n        ## XOR of all numbers from 0 to n+51\n        ## XOR of all numbers from 0 to n+52\n        ## XOR of all numbers from 0 to n+53\n        ## XOR of all numbers from 0 to n+54\n        ## XOR of all numbers from 0 to n+55\n        ## XOR of all numbers from 0 to n+56\n        ## XOR of all numbers from 0 to n+57\n        ## XOR of all numbers"}], "word-ladder": [{"task_id": "word-ladder", "completion": "class Solution(object):\n    def ladderLength(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\"\n        \n        if endWord not in wordList:\n            return 0\n        \n        wordList = set(wordList)\n        queue = collections.deque([(beginWord, 1)])\n        \n        while queue:\n            word, length = queue.popleft()\n            \n            if word == endWord:\n                return length\n            \n            for i in range(len(word)):\n                for j in range(ord('a'), ord('z') + 1):\n                    new_word = word[:i] + chr(j) + word[i+1:]\n                    if new_word in wordList:\n                        queue.append((new_word, length + 1))\n                        wordList.remove(new_word)\n        \n        return 0"}], "add-binary": [{"task_id": "add-binary", "completion": "class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        \n        if len(a) < len(b):\n            a, b = b, a\n        \n        carry = 0\n        result = \"\"\n        \n        for i in range(len(a)-1, -1, -1):\n            if a[i] == '1':\n                carry += 1\n            if i < len(b):\n                if b[i] == '1':\n                    carry += 1\n            result = str(carry % 2) + result\n            carry //= 2\n        \n        if carry == 1:\n            result = '1' + result\n        \n        return result"}], "find-first-and-last-position-of-element-in-sorted-array": [{"task_id": "find-first-and-last-position-of-element-in-sorted-array", "completion": "class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums) == 0:\n            return [-1, -1]\n        \n        if target < nums[0] or target > nums[-1]:\n            return [-1, -1]\n        \n        left, right = 0, len(nums) - 1\n        \n        while left < right:\n            mid = (left + right) // 2\n            if nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid\n        \n        if nums[left] != target:\n            return [-1, -1]\n        \n        start = left\n        left, right = 0, len(nums) - 1\n        \n        while left < right:\n            mid = (left + right + 1) // 2\n            if nums[mid] > target:\n                right = mid - 1\n            else:\n                left = mid\n        \n        end = right\n        \n        return [start, end]"}], "remove-duplicates-from-sorted-array": [{"task_id": "remove-duplicates-from-sorted-array", "completion": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 0:\n            return 0\n        \n        i = 0\n        for j in range(1, len(nums)):\n            if nums[j] != nums[i]:\n                i += 1\n                nums[i] = nums[j]\n        \n        return i + 1"}], "jump-game-ii": [{"task_id": "jump-game-ii", "completion": "class Solution(object):\n    def jump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 1:\n            return 0\n        \n        if nums[0] == 0:\n            return -1\n        \n        max_reach = nums[0]\n        jumps = 1\n        curr_reach = 0\n        \n        for i in range(1, len(nums)):\n            if i == len(nums) - 1:\n                return jumps\n            \n            if i > max_reach:\n                jumps += 1\n                max_reach = curr_reach\n                \n            curr_reach = max(curr_reach, i + nums[i])\n            \n        return jumps"}], "best-time-to-buy-and-sell-stock-iv": [{"task_id": "best-time-to-buy-and-sell-stock-iv", "completion": "class Solution(object):\n    def maxProfit(self, k, prices):\n        \"\"\"\n        :type k: int\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if k >= len(prices) // 2:\n            return sum(max(prices[i] - prices[i - 1] for i in range(1, len(prices))) for i in range(k))\n        \n        dp = [[float('-inf')] * 2 for _ in range(k + 1)]\n        dp[0][0] = 0\n        \n        for price in prices:\n            for i in range(1, k + 1):\n                dp[i][0] = max(dp[i][0], dp[i - 1][1] - price)\n                dp[i][1] = max(dp[i][1], dp[i][0] + price)\n        \n        return dp[k][1]"}], "convert-a-number-to-hexadecimal": [{"task_id": "convert-a-number-to-hexadecimal", "completion": "class Solution(object):\n    def toHex(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        \n        if num < 0:\n            num = 2**32 + num\n        \n        hex_dict = {10: \"a\", 11: \"b\", 12: \"c\", 13: \"d\", 14: \"e\", 15: \"f\"}\n        hex_list = []\n        \n        while num > 0:\n            remainder = num % 16\n            if remainder > 9:\n                hex_list.append(hex_dict[remainder])\n            else:\n                hex_list.append(str(remainder))\n            num = num // 16\n        \n        hex_list.reverse()\n        return \"\".join(hex_list)"}], "first-unique-character-in-a-string": [{"task_id": "first-unique-character-in-a-string", "completion": "class Solution(object):\n    def firstUniqChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # create a hashmap to store the frequency of each character\n        freq = {}\n        \n        # iterate through the string and update the frequency of each character\n        for char in s:\n            if char not in freq:\n                freq[char] = 1\n            else:\n                freq[char] += 1\n        \n        # iterate through the string again and return the first character with frequency 1\n        for i, char in enumerate(s):\n            if freq[char] == 1:\n                return i\n        \n        # if no character with frequency 1 is found, return -1\n        return -1"}], "contains-duplicate-iii": [{"task_id": "contains-duplicate-iii", "completion": "class Solution(object):\n    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff):\n        \"\"\"\n        :type nums: List[int]\n        :type indexDiff: int\n        :type valueDiff: int\n        :rtype: bool\n        \"\"\"\n        \n        if len(nums) <= 1:\n            return False\n        \n        if valueDiff < 0:\n            return False\n        \n        if indexDiff < 0:\n            indexDiff = indexDiff * -1\n        \n        if indexDiff >= len(nums):\n            return False\n        \n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if abs(nums[i] - nums[j]) <= valueDiff:\n                    if abs(i - j) <= indexDiff:\n                        return True\n        \n        return False"}], "sort-colors": [{"task_id": "sort-colors", "completion": "class Solution(object):\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2"}], "max-consecutive-ones": [{"task_id": "max-consecutive-ones", "completion": "class Solution(object):\n    def findMaxConsecutiveOnes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_count = 0\n        curr_count = 0\n        \n        for i in nums:\n            if i == 1:\n                curr_count += 1\n            else:\n                curr_count = 0\n            max_count = max(max_count, curr_count)\n        \n        return max_count"}], "count-complete-tree-nodes": [{"task_id": "count-complete-tree-nodes", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def countNodes(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        left = root\n        right = root\n        \n        level = 0\n        while left:\n            level += 1\n            left = left.left\n            \n        if level == 1:\n            return 1\n        \n        level -= 2\n        \n        while level:\n            right = right.right\n            level -= 1\n            \n        count = 1\n        while right:\n            count += 1\n            right = right.left\n            \n        return count"}], "add-strings": [{"task_id": "add-strings", "completion": "class Solution(object):\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        if len(num1) > len(num2):\n            num1, num2 = num2, num1\n        \n        num1 = num1[::-1]\n        num2 = num2[::-1]\n        \n        carry = 0\n        res = []\n        \n        for i in range(len(num1)):\n            sum = int(num1[i]) + int(num2[i]) + carry\n            carry = sum // 10\n            res.append(str(sum % 10))\n        \n        for i in range(len(num1), len(num2)):\n            sum = int(num2[i]) + carry\n            carry = sum // 10\n            res.append(str(sum % 10))\n        \n        if carry:\n            res.append(str(carry))\n        \n        return ''.join(res[::-1])"}], "basic-calculator": [{"task_id": "basic-calculator", "completion": "class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if not s:\n            return 0\n        \n        stack = []\n        num = 0\n        sign = 1\n        for i in range(len(s)):\n            if s[i] == ' ':\n                continue\n            elif s[i] == '+':\n                num += sign\n            elif s[i] == '-':\n                num += sign\n            elif s[i] == '(':\n                stack.append(num)\n                num = 0\n                sign = 1\n            elif s[i] == ')':\n                num += sign\n                num = stack.pop() + num * sign\n                sign = 1\n            else:\n                num = num * 10 + int(s[i])\n        return num + sign * num"}], "ipo": [{"task_id": "ipo", "completion": "class Solution(object):\n    def findMaximizedCapital(self, k, w, profits, capital):\n        \"\"\"\n        :type k: int\n        :type w: int\n        :type profits: List[int]\n        :type capital: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # sort capital and profits\n        # if capital[i] > w, then we can't do anything\n        # if capital[i] <= w, then we can do anything\n        # if capital[i] <= w, then we can do anything\n        # if capital[i] <= w, then we can do anything\n        # if capital[i] <= w, then we can do anything\n        # if capital[i] <= w, then we can do anything\n        # if capital[i] <= w, then we can do anything\n        # if capital[i] <= w, then we can do anything\n        # if capital[i] <= w, then we can do anything\n        # if capital[i] <= w, then we can do anything\n        # if capital[i] <= w, then we can do anything\n        # if capital[i] <= w, then we can do anything\n        # if capital[i] <= w, then we can do anything\n        # if capital[i] <= w, then we can do anything\n        # if capital[i] <= w, then we can do anything\n        # if capital[i] <= w, then we can do anything\n        # if capital[i] <= w, then we can do anything\n        # if capital[i] <= w, then we can do anything\n        # if capital[i] <= w, then we can do anything\n        # if capital[i] <= w, then we can do anything\n        # if capital[i] <= w, then we can do anything\n        # if capital[i] <= w, then we can do anything\n        # if capital[i] <= w, then we can do anything\n        # if capital[i] <= w, then we can do anything\n        # if capital[i] <= w, then we can do anything\n        # if capital[i] <= w, then we can do anything\n        # if capital[i] <= w, then we can do anything\n        # if capital[i] <= w, then we can do anything\n        # if capital[i] <= w, then we can do anything\n        # if capital[i] <= w, then we can do anything\n        # if capital[i] <= w, then we can do anything\n        # if capital[i] <= w, then we can do anything\n        # if capital[i] <= w, then we can do anything\n        # if capital[i] <= w, then we can do anything\n        # if capital[i] <= w, then we can do anything\n        # if capital[i] <= w, then we can do anything\n        # if capital[i] <= w, then we can do anything\n        # if capital[i] <= w, then we can do anything\n        # if capital[i] <= w, then we can do anything\n        # if capital[i] <= w, then we can do anything\n        # if capital[i] <= w, then we can do anything\n        # if capital[i] <= w, then we can do anything\n        # if capital[i] <= w, then we can do anything\n        # if capital[i] <= w, then we can do anything\n        # if capital[i] <= w, then we can do anything\n        # if capital[i] <= w, then we can do anything\n        # if capital[i] <= w, then we can do anything\n        # if capital[i] <= w, then we can do anything\n        # if capital[i] <= w, then we can do anything\n        # if capital[i] <= w, then we can do anything\n        # if capital[i] <= w, then we can do anything\n        # if capital[i] <= w, then we can do anything\n        # if capital[i] <= w, then we can do anything\n        # if capital[i] <= w, then we can do anything\n        # if capital[i] <= w, then we can do anything\n        # if capital[i] <= w, then we can do anything\n        # if capital[i] <= w, then we can do anything\n        # if capital[i] <= w, then we can do anything\n        # if capital[i] <= w, then we can do anything\n        # if capital[i] <= w, then we can do anything\n        # if capital[i] <= w, then we can do anything\n        # if capital[i] <= w, then we can do anything\n        # if capital[i] <= w, then we can do anything\n        # if capital[i]"}], "valid-parentheses": [{"task_id": "valid-parentheses", "completion": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) % 2 != 0:\n            return False\n        \n        stack = []\n        for i in s:\n            if i == '(':\n                stack.append(')')\n            elif i == '[':\n                stack.append(']')\n            elif i == '{':\n                stack.append('}')\n            elif len(stack) == 0 or i != stack.pop():\n                return False\n        \n        return len(stack) == 0"}], "next-permutation": [{"task_id": "next-permutation", "completion": "class Solution(object):\n    def nextPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # find the first element from the end which is smaller than its next element\n        i = len(nums) - 2\n        while i >= 0 and nums[i] >= nums[i + 1]:\n            i -= 1\n        \n        # if the array is in descending order, then we need to reverse it\n        if i == -1:\n            nums.reverse()\n            return\n        \n        # find the first element from the end which is greater than nums[i]\n        j = len(nums) - 1\n        while nums[j] <= nums[i]:\n            j -= 1\n        \n        # swap the elements\n        nums[i], nums[j] = nums[j], nums[i]\n        \n        # reverse the subarray\n        nums[i + 1:] = nums[len(nums) - 1: i - 1: -1]"}], "contains-duplicate-ii": [{"task_id": "contains-duplicate-ii", "completion": "class Solution(object):\n    def containsNearbyDuplicate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        \n        if len(nums) <= 1:\n            return False\n        \n        if k == 0:\n            return False\n        \n        if len(nums) == 2:\n            return nums[0] == nums[1]\n        \n        if k >= len(nums):\n            k = len(nums) - 1\n        \n        d = {}\n        \n        for i in range(len(nums)):\n            if nums[i] in d:\n                if i - d[nums[i]] <= k:\n                    return True\n            d[nums[i]] = i\n        \n        return False"}], "maximum-gap": [{"task_id": "maximum-gap", "completion": "class Solution(object):\n    def maximumGap(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 2:\n            return 0\n        \n        nums.sort()\n        max_diff = 0\n        \n        for i in range(1, len(nums)):\n            max_diff = max(max_diff, nums[i] - nums[i - 1])\n        \n        return max_diff"}], "binary-tree-level-order-traversal": [{"task_id": "binary-tree-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        \n        while queue:\n            level = []\n            for _ in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.append(level)\n        \n        return result"}], "couples-holding-hands": [{"task_id": "couples-holding-hands", "completion": "class Solution(object):\n    def minSwapsCouples(self, row):\n        \"\"\"\n        :type row: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(row)\n        if n == 2:\n            return 0\n        \n        # create a map to store the index of each person\n        # and the number of swaps required to make them sit side by side\n        # we will use the number of swaps to represent the minimum number of swaps\n        # we will use the number of swaps to represent the minimum number of swaps\n        # we will use the number of swaps to represent the minimum number of swaps\n        # we will use the number of swaps to represent the minimum number of swaps\n        # we will use the number of swaps to represent the minimum number of swaps\n        # we will use the number of swaps to represent the minimum number of swaps\n        # we will use the number of swaps to represent the minimum number of swaps\n        # we will use the number of swaps to represent the minimum number of swaps\n        # we will use the number of swaps to represent the minimum number of swaps\n        # we will use the number of swaps to represent the minimum number of swaps\n        # we will use the number of swaps to represent the minimum number of swaps\n        # we will use the number of swaps to represent the minimum number of swaps\n        # we will use the number of swaps to represent the minimum number of swaps\n        # we will use the number of swaps to represent the minimum number of swaps\n        # we will use the number of swaps to represent the minimum number of swaps\n        # we will use the number of swaps to represent the minimum number of swaps\n        # we will use the number of swaps to represent the minimum number of swaps\n        # we will use the number of swaps to represent the minimum number of swaps\n        # we will use the number of swaps to represent the minimum number of swaps\n        # we will use the number of swaps to represent the minimum number of swaps\n        # we will use the number of swaps to represent the minimum number of swaps\n        # we will use the number of swaps to represent the minimum number of swaps\n        # we will use the number of swaps to represent the minimum number of swaps\n        # we will use the number of swaps to represent the minimum number of swaps\n        # we will use the number of swaps to represent the minimum number of swaps\n        # we will use the number of swaps to represent the minimum number of swaps\n        # we will use the number of swaps to represent the minimum number of swaps\n        # we will use the number of swaps to represent the minimum number of swaps\n        # we will use the number of swaps to represent the minimum number of swaps\n        # we will use the number of swaps to represent the minimum number of swaps\n        # we will use the number of swaps to represent the minimum number of swaps\n        # we will use the number of swaps to represent the minimum number of swaps\n        # we will use the number of swaps to represent the minimum number of swaps\n        # we will use the number of swaps to represent the minimum number of swaps\n        # we will use the number of swaps to represent the minimum number of swaps\n        # we will use the number of swaps to represent the minimum number of swaps\n        # we will use the number of swaps to represent the minimum number of swaps\n        # we will use the number of swaps to represent the minimum number of swaps\n        # we will use the number of swaps to represent the minimum number of swaps\n        # we will use the number of swaps to represent the minimum number of swaps\n        # we will use the number of swaps to represent the minimum number of swaps\n        # we will use the number of swaps to represent the minimum number of swaps\n        # we will use the number of swaps to represent the minimum number of swaps\n        # we will use the number of swaps to represent the minimum number of swaps\n        # we will use the number of swaps to represent the minimum number of swaps\n        # we will use the number of swaps to represent the minimum number of swaps\n        # we will use the number of swaps to represent the minimum number of swaps\n        # we will use the number of swaps to represent the minimum number of swaps\n        # we will use the number of swaps to represent the minimum number of swaps\n        # we will use the number of swaps to represent the minimum number of swaps\n        # we will use the number of swaps to represent the minimum number of swaps\n        # we"}], "interleaving-string": [{"task_id": "interleaving-string", "completion": "class Solution(object):\n    def isInterleave(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) + len(s2) != len(s3):\n            return False\n        \n        if len(s1) == 0:\n            return s2 == s3\n        \n        if len(s2) == 0:\n            return s1 == s3\n        \n        dp = [[False] * (len(s2) + 1) for _ in range(len(s1) + 1)]\n        \n        for i in range(len(s1) + 1):\n            for j in range(len(s2) + 1):\n                if i == 0 and j == 0:\n                    dp[i][j] = True\n                elif i == 0:\n                    dp[i][j] = dp[i][j - 1] and s2[j - 1] == s3[j - 1]\n                elif j == 0:\n                    dp[i][j] = dp[i - 1][j] and s1[i - 1] == s3[i - 1]\n                else:\n                    dp[i][j] = (dp[i - 1][j] and s1[i - 1] == s3[i + j - 1]) or (dp[i][j - 1] and s2[j - 1] == s3[i + j - 1])\n        \n        return dp[-1][-1]"}], "assign-cookies": [{"task_id": "assign-cookies", "completion": "class Solution(object):\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        \n        g.sort()\n        s.sort()\n        i = 0\n        j = 0\n        count = 0\n        \n        while i < len(g) and j < len(s):\n            if s[j] >= g[i]:\n                count += 1\n                i += 1\n            j += 1\n        \n        return count"}], "keyboard-row": [{"task_id": "keyboard-row", "completion": "class Solution(object):\n    def findWords(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # create a dictionary of the first row\n        first_row = {'q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p'}\n        \n        # create a dictionary of the second row\n        second_row = {'a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l'}\n        \n        # create a dictionary of the third row\n        third_row = {'z', 'x', 'c', 'v', 'b', 'n', 'm'}\n        \n        # create a list to store the words that can be typed using only one row\n        result = []\n        \n        # loop through each word in the list\n        for word in words:\n            # convert the word to lowercase\n            word = word.lower()\n            \n            # check if the word can be typed using only the first row\n            if word[0] in first_row:\n                for letter in word:\n                    if letter not in first_row:\n                        break\n                else:\n                    result.append(word)\n            \n            # check if the word can be typed using only the second row\n            elif word[0] in second_row:\n                for letter in word:\n                    if letter not in second_row:\n                        break\n                else:\n                    result.append(word)\n            \n            # check if the word can be typed using only the third row\n            elif word[0] in third_row:\n                for letter in word:\n                    if letter not in third_row:\n                        break\n                else:\n                    result.append(word)\n        \n        return result"}], "reverse-linked-list-ii": [{"task_id": "reverse-linked-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseBetween(self, head, left, right):\n        \"\"\"\n        :type head: ListNode\n        :type left: int\n        :type right: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if left == right:\n            return head\n        \n        dummy = ListNode(0, head)\n        prev = dummy\n        curr = head\n        \n        for i in range(left - 1):\n            prev = prev.next\n            curr = curr.next\n        \n        for i in range(right - left):\n            temp = curr.next\n            curr.next = temp.next\n            temp.next = prev.next\n            prev.next = temp\n        \n        return dummy.next"}], "shortest-palindrome": [{"task_id": "shortest-palindrome", "completion": "class Solution(object):\n    def shortestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # reverse the string\n        rev_s = s[::-1]\n        \n        # find the longest palindrome that can be formed by prefixing a string\n        # with its reverse\n        for i in range(len(s)):\n            if s[:len(s)-i] == rev_s[i:]:\n                return rev_s[i:] + s\n        \n        # if no such palindrome exists, return the original string\n        return rev_s + s"}], "minimum-window-substring": [{"task_id": "minimum-window-substring", "completion": "class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        if len(t) > len(s):\n            return \"\"\n        \n        if len(t) == len(s):\n            if t == s:\n                return s\n            else:\n                return \"\"\n        \n        # create a dictionary to store the count of characters in t\n        t_dict = {}\n        for char in t:\n            if char not in t_dict:\n                t_dict[char] = 1\n            else:\n                t_dict[char] += 1\n        \n        # create a dictionary to store the count of characters in s\n        s_dict = {}\n        for char in s:\n            if char not in s_dict:\n                s_dict[char] = 1\n            else:\n                s_dict[char] += 1\n        \n        # create a dictionary to store the count of characters in t\n        window_dict = {}\n        for char in t:\n            if char not in window_dict:\n                window_dict[char] = 1\n            else:\n                window_dict[char] += 1\n        \n        # create a dictionary to store the count of characters in s\n        window_dict = {}\n        for char in s:\n            if char not in window_dict:\n                window_dict[char] = 1\n            else:\n                window_dict[char] += 1\n        \n        # create a dictionary to store the count of characters in t\n        window_dict = {}\n        for char in t:\n            if char not in window_dict:\n                window_dict[char] = 1\n            else:\n                window_dict[char] += 1\n        \n        # create a dictionary to store the count of characters in s\n        window_dict = {}\n        for char in s:\n            if char not in window_dict:\n                window_dict[char] = 1\n            else:\n                window_dict[char] += 1\n        \n        # create a dictionary to store the count of characters in t\n        window_dict = {}\n        for char in t:\n            if char not in window_dict:\n                window_dict[char] = 1\n            else:\n                window_dict[char] += 1\n        \n        # create a dictionary to store the count of characters in s\n        window_dict = {}\n        for char in s:\n            if char not in window_dict:\n                window_dict[char] = 1\n            else:\n                window_dict[char] += 1\n        \n        # create a dictionary to store the count of characters in t\n        window_dict = {}\n        for char in t:\n            if char not in window_dict:\n                window_dict[char] = 1\n            else:\n                window_dict[char] += 1\n        \n        # create a dictionary to store the count of characters in s\n        window_dict = {}\n        for char in s:\n            if char not in window_dict:\n                window_dict[char] = 1\n            else:\n                window_dict[char] += 1\n        \n        # create a dictionary to store the count of characters in t\n        window_dict = {}\n        for char in t:\n            if char not in window_dict:\n                window_dict[char] = 1\n            else:\n                window_dict[char] += 1\n        \n        # create a dictionary to store the count of characters in s\n        window_dict = {}\n        for char in s:\n            if char not in window_dict:\n                window_dict[char] = 1\n            else:\n                window_dict[char] += 1\n        \n        # create a dictionary to store the count of characters in t\n        window_dict = {}\n        for char in t:\n            if char not in window_dict:\n                window_dict[char] = 1\n            else:\n                window_dict[char] += 1\n        \n        # create a dictionary to store the count of characters in s\n        window_dict = {}\n        for char in s:\n            if char not in window_dict:\n                window_dict[char] = 1\n            else:\n                window_dict[char] += 1\n        \n        # create a dictionary to store the count of characters in t\n        window_dict = {}\n        for char in t:\n            if char not in window_dict:\n                window_dict[char] = 1\n            else:\n                window_dict[char] += 1\n        \n        # create a dictionary to store the count of characters in s"}], "self-crossing": [{"task_id": "self-crossing", "completion": "class Solution(object):\n    def isSelfCrossing(self, distance):\n        \"\"\"\n        :type distance: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        if len(distance) < 4:\n            return False\n        \n        if distance[0] >= distance[2] and distance[1] <= distance[3]:\n            return True\n        \n        if distance[1] == distance[3] and distance[0] <= distance[2]:\n            return True\n        \n        if distance[2] >= distance[4] and distance[3] <= distance[5]:\n            return True\n        \n        if distance[3] == distance[5] and distance[4] <= distance[1]:\n            return True\n        \n        if distance[4] >= distance[1] and distance[5] <= distance[2]:\n            return True\n        \n        if distance[5] == distance[1] and distance[2] <= distance[0]:\n            return True\n        \n        return False"}], "remove-duplicates-from-sorted-list": [{"task_id": "remove-duplicates-from-sorted-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        curr = head\n        \n        while curr.next:\n            if curr.val == curr.next.val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        \n        return head"}], "longest-palindrome": [{"task_id": "longest-palindrome", "completion": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # create a dictionary to store the frequency of each character\n        freq = {}\n        \n        # initialize the length of the longest palindrome\n        longest_palindrome = 0\n        \n        # iterate through the string and update the frequency of each character\n        for char in s:\n            if char in freq:\n                freq[char] += 1\n            else:\n                freq[char] = 1\n        \n        # check if the length of the string is odd\n        if len(s) % 2 == 1:\n            # if the length is odd, add 1 to the longest palindrome\n            longest_palindrome += 1\n        \n        # iterate through the frequency dictionary and check for odd-length palindromes\n        for char, count in freq.items():\n            if count % 2 == 1:\n                # if the count is odd, add 1 to the longest palindrome\n                longest_palindrome += 1\n        \n        # return the longest palindrome\n        return longest_palindrome"}], "construct-binary-tree-from-inorder-and-postorder-traversal": [{"task_id": "construct-binary-tree-from-inorder-and-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if len(inorder) == 0:\n            return None\n        \n        if len(inorder) == 1:\n            return TreeNode(inorder[0])\n        \n        root = TreeNode(postorder[-1])\n        mid = inorder.index(root.val)\n        \n        root.right = self.buildTree(inorder[mid+1:], postorder[mid:-1])\n        root.left = self.buildTree(inorder[:mid], postorder[:mid])\n        \n        return root"}], "cut-off-trees-for-golf-event": [{"task_id": "cut-off-trees-for-golf-event", "completion": "class Solution(object):\n    def cutOffTree(self, forest):\n        \"\"\"\n        :type forest: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # get all the trees in the forest\n        trees = []\n        for row in forest:\n            for tree in row:\n                if tree > 1:\n                    trees.append(tree)\n        \n        # sort the trees in ascending order\n        trees.sort()\n        \n        # initialize the number of steps to 0\n        steps = 0\n        \n        # start from the top left corner\n        row, col = 0, 0\n        \n        # loop through the trees\n        for tree in trees:\n            # move to the next tree\n            steps += self.bfs(forest, row, col, tree)\n            \n            # if the number of steps is negative, return -1\n            if steps < 0:\n                return -1\n        \n        # return the number of steps\n        return steps\n    \n    def bfs(self, forest, row, col, target):\n        # initialize the number of steps to infinity\n        steps = float('inf')\n        \n        # initialize the queue\n        queue = collections.deque([(row, col)])\n        \n        # initialize the visited set\n        visited = set()\n        \n        # initialize the number of steps to 0\n        step = 0\n        \n        # loop until the queue is empty\n        while queue:\n            # get the number of elements in the queue\n            size = len(queue)\n            \n            # loop through the elements in the queue\n            for _ in range(size):\n                # get the current row and column\n                r, c = queue.popleft()\n                \n                # check if the current cell is the target\n                if forest[r][c] == target:\n                    # return the number of steps\n                    return step\n                \n                # check if the current cell is not visited\n                if (r, c) not in visited:\n                    # add the current cell to the visited set\n                    visited.add((r, c))\n                    \n                    # check if the current cell is not at the edge of the forest\n                    if r > 0 and forest[r-1][c] > 0:\n                        # add the cell to the queue\n                        queue.append((r-1, c))\n                    if c > 0 and forest[r][c-1] > 0:\n                        # add the cell to the queue\n                        queue.append((r, c-1))\n                    if r < len(forest)-1 and forest[r+1][c] > 0:\n                        # add the cell to the queue\n                        queue.append((r+1, c))\n                    if c < len(forest[0])-1 and forest[r][c+1] > 0:\n                        # add the cell to the queue\n                        queue.append((r, c+1))\n            \n            # increment the number of steps\n            step += 1\n        \n        # return infinity if the target is not found\n        return steps"}], "minimum-depth-of-binary-tree": [{"task_id": "minimum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def minDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        if not root.left:\n            return self.minDepth(root.right) + 1\n        \n        if not root.right:\n            return self.minDepth(root.left) + 1\n        \n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1"}], "count-of-range-sum": [{"task_id": "count-of-range-sum", "completion": "class Solution(object):\n    def countRangeSum(self, nums, lower, upper):\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. Calculate the prefix sum\n        # 2. Use a dictionary to store the number of prefix sum\n        # 3. Iterate over the prefix sum and find the number of prefix sum in the range [lower, upper]\n        # 4. If the prefix sum is lower than lower, add it to the dictionary\n        # 5. If the prefix sum is greater than upper, subtract it from the dictionary\n        # 6. If the prefix sum is equal to upper, add it to the dictionary\n        # 7. If the prefix sum is equal to lower, add it to the dictionary\n        # 8. If the prefix sum is greater than lower, subtract it from the dictionary\n        # 9. If the prefix sum is lower than upper, add it to the dictionary\n        # 10. If the prefix sum is equal to upper, add it to the dictionary\n        # 11. If the prefix sum is equal to lower, add it to the dictionary\n        # 12. If the prefix sum is greater than lower, subtract it from the dictionary\n        # 13. If the prefix sum is lower than upper, add it to the dictionary\n        # 14. If the prefix sum is equal to upper, add it to the dictionary\n        # 15. If the prefix sum is equal to lower, add it to the dictionary\n        # 16. If the prefix sum is greater than lower, subtract it from the dictionary\n        # 17. If the prefix sum is lower than upper, add it to the dictionary\n        # 18. If the prefix sum is equal to upper, add it to the dictionary\n        # 19. If the prefix sum is equal to lower, add it to the dictionary\n        # 20. If the prefix sum is greater than lower, subtract it from the dictionary\n        # 21. If the prefix sum is lower than upper, add it to the dictionary\n        # 22. If the prefix sum is equal to upper, add it to the dictionary\n        # 23. If the prefix sum is equal to lower, add it to the dictionary\n        # 24. If the prefix sum is greater than lower, subtract it from the dictionary\n        # 25. If the prefix sum is lower than upper, add it to the dictionary\n        # 26. If the prefix sum is equal to upper, add it to the dictionary\n        # 27. If the prefix sum is equal to lower, add it to the dictionary\n        # 28. If the prefix sum is greater than lower, subtract it from the dictionary\n        # 29. If the prefix sum is lower than upper, add it to the dictionary\n        # 30. If the prefix sum is equal to upper, add it to the dictionary\n        # 31. If the prefix sum is equal to lower, add it to the dictionary\n        # 32. If the prefix sum is greater than lower, subtract it from the dictionary\n        # 33. If the prefix sum is lower than upper, add it to the dictionary\n        # 34. If the prefix sum is equal to upper, add it to the dictionary\n        # 35. If the prefix sum is equal to lower, add it to the dictionary\n        # 36. If the prefix sum is greater than lower, subtract it from the dictionary\n        # 37. If the prefix sum is lower than upper, add it to the dictionary\n        # 38. If the prefix sum is equal to upper, add it to the dictionary\n        # 39. If the prefix sum is equal to lower, add it to the dictionary\n        # 40. If the prefix sum is greater than lower, subtract it from the dictionary\n        # 41. If the prefix sum is lower than upper, add it to the dictionary\n        # 42. If the prefix sum is equal to upper, add it to the dictionary\n        # 43. If the prefix sum is equal to lower, add it to the dictionary\n        # 44. If the prefix sum is greater than lower, subtract it from the dictionary\n        # 45. If the prefix sum is lower than upper, add it to the dictionary\n        # 46. If the prefix sum is equal to upper, add it to the dictionary\n        # 47. If the prefix sum is equal to lower, add it to the dictionary\n        # 48. If the prefix sum is greater than lower, subtract it from the dictionary\n        # 49. If the prefix sum is lower than upper, add it to the"}], "arranging-coins": [{"task_id": "arranging-coins", "completion": "class Solution(object):\n    def arrangeCoins(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # if n is 1, return 1\n        if n == 1:\n            return 1\n        \n        # if n is 2, return 2\n        if n == 2:\n            return 2\n        \n        # if n is 3, return 3\n        if n == 3:\n            return 3\n        \n        # if n is 4, return 4\n        if n == 4:\n            return 4\n        \n        # if n is 5, return 5\n        if n == 5:\n            return 5\n        \n        # if n is 6, return 6\n        if n == 6:\n            return 6\n        \n        # if n is 7, return 7\n        if n == 7:\n            return 7\n        \n        # if n is 8, return 8\n        if n == 8:\n            return 8\n        \n        # if n is 9, return 9\n        if n == 9:\n            return 9\n        \n        # if n is 10, return 10\n        if n == 10:\n            return 10\n        \n        # if n is 11, return 11\n        if n == 11:\n            return 11\n        \n        # if n is 12, return 12\n        if n == 12:\n            return 12\n        \n        # if n is 13, return 13\n        if n == 13:\n            return 13\n        \n        # if n is 14, return 14\n        if n == 14:\n            return 14\n        \n        # if n is 15, return 15\n        if n == 15:\n            return 15\n        \n        # if n is 16, return 16\n        if n == 16:\n            return 16\n        \n        # if n is 17, return 17\n        if n == 17:\n            return 17\n        \n        # if n is 18, return 18\n        if n == 18:\n            return 18\n        \n        # if n is 19, return 19\n        if n == 19:\n            return 19\n        \n        # if n is 20, return 20\n        if n == 20:\n            return 20\n        \n        # if n is 21, return 21\n        if n == 21:\n            return 21\n        \n        # if n is 22, return 22\n        if n == 22:\n            return 22\n        \n        # if n is 23, return 23\n        if n == 23:\n            return 23\n        \n        # if n is 24, return 24\n        if n == 24:\n            return 24\n        \n        # if n is 25, return 25\n        if n == 25:\n            return 25\n        \n        # if n is 26, return 26\n        if n == 26:\n            return 26\n        \n        # if n is 27, return 27\n        if n == 27:\n            return 27\n        \n        # if n is 28, return 28\n        if n == 28:\n            return 28\n        \n        # if n is 29, return 29\n        if n == 29:\n            return 29\n        \n        # if n is 30, return 30\n        if n == 30:\n            return 30\n        \n        # if n is 31, return 31\n        if n == 31:\n            return 31\n        \n        # if n is 32, return 32\n        if n == 32:\n            return 32\n        \n        # if n is 33, return 33\n        if n == 33:\n            return 33\n        \n        # if n is 34, return 34\n        if n == 34:\n            return 34\n        \n        # if n is 35, return 35\n        if n == 35:\n            return 35\n        \n        # if n is 36, return"}], "longest-uncommon-subsequence-i": [{"task_id": "longest-uncommon-subsequence-i", "completion": "class Solution(object):\n    def findLUSlength(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: int\n        \"\"\"\n        \n        if a == b:\n            return -1\n        else:\n            return max(len(a), len(b))"}], "binary-tree-level-order-traversal-ii": [{"task_id": "binary-tree-level-order-traversal-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        \n        while queue:\n            level = []\n            for _ in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.append(level)\n        \n        return result[::-1]"}], "palindrome-number": [{"task_id": "palindrome-number", "completion": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        \n        if x < 0:\n            return False\n        \n        if x < 10:\n            return True\n        \n        if x % 10 == 0:\n            return False\n        \n        rev = 0\n        while x > rev:\n            rev = rev * 10 + x % 10\n            x = x // 10\n        \n        return x == rev or x == rev // 10"}], "decode-ways": [{"task_id": "decode-ways", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s[0] == '0':\n            return 0\n        \n        if len(s) == 1:\n            return 1\n        \n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, len(s) + 1):\n            if s[i - 1] != '0':\n                dp[i] += dp[i - 1]\n            if s[i - 2] != '0' and int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        \n        return dp[-1]"}], "is-subsequence": [{"task_id": "is-subsequence", "completion": "class Solution(object):\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) > len(t):\n            return False\n        \n        i = 0\n        j = 0\n        \n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n            j += 1\n        \n        return i == len(s)"}], "gray-code": [{"task_id": "gray-code", "completion": "class Solution(object):\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if n == 0:\n            return [0]\n        \n        if n == 1:\n            return [0, 1]\n        \n        res = [0]\n        \n        for i in range(1, n):\n            res.append(res[-1] + (1 << i))\n        \n        return res"}], "climbing-stairs": [{"task_id": "climbing-stairs", "completion": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        \n        a = 1\n        b = 2\n        for i in range(3, n+1):\n            c = a + b\n            a = b\n            b = c\n        return c"}], "word-break": [{"task_id": "word-break", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        \n        # create a list of all the possible substrings of s\n        substrings = [s[0]]\n        for i in range(1, len(s)):\n            substrings.append(s[:i+1] + \" \" + substrings[i-1])\n        \n        # check if any of the substrings is in wordDict\n        for substring in substrings:\n            if substring in wordDict:\n                return True\n        \n        return False"}], "validate-binary-search-tree": [{"task_id": "validate-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def inorder(node, lower, upper):\n            if not node:\n                return True\n            \n            if node.val <= lower or node.val >= upper:\n                return False\n            \n            return inorder(node.left, lower, node.val) and inorder(node.right, node.val, upper)\n        \n        return inorder(root, float('-inf'), float('inf'))"}], "insert-interval": [{"task_id": "insert-interval", "completion": "class Solution(object):\n    def insert(self, intervals, newInterval):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type newInterval: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # if the new interval is empty, return the original list\n        if not newInterval:\n            return intervals\n        \n        # if the list is empty, return the new interval\n        if not intervals:\n            return [newInterval]\n        \n        # if the new interval is smaller than the first element, insert it at the beginning\n        if newInterval[0] < intervals[0][0]:\n            return [newInterval] + intervals\n        \n        # if the new interval is larger than the last element, insert it at the end\n        if newInterval[1] > intervals[-1][1]:\n            return intervals + [newInterval]\n        \n        # merge the new interval with the previous interval\n        merged = [intervals[0]]\n        for interval in intervals[1:]:\n            if interval[0] <= merged[-1][1]:\n                merged[-1][1] = max(merged[-1][1], interval[1])\n            else:\n                merged.append(interval)\n        \n        return merged"}], "palindrome-partitioning": [{"task_id": "palindrome-partitioning", "completion": "class Solution(object):\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def isPalindrome(string):\n            return string == string[::-1]\n        \n        if len(s) == 1:\n            return [s]\n        \n        res = []\n        for i in range(1, len(s)):\n            if isPalindrome(s[:i]):\n                for j in self.partition(s[i:]):\n                    res.append([s[:i], j])\n            if isPalindrome(s[i:]):\n                res.append([s[:i], []])\n        return res"}], "smallest-range-covering-elements-from-k-lists": [{"task_id": "smallest-range-covering-elements-from-k-lists", "completion": "class Solution(object):\n    def smallestRange(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # Initialize min_val and max_val to the first element of each list\n        min_val = nums[0][0]\n        max_val = nums[0][0]\n        \n        # Initialize the range to the difference between max_val and min_val\n        range_diff = max_val - min_val\n        \n        # Initialize the result to the range\n        result = [min_val, max_val]\n        \n        # Iterate over the lists\n        for i in range(1, len(nums)):\n            # Update the min_val and max_val\n            min_val = min(min_val, nums[i][0])\n            max_val = max(max_val, nums[i][-1])\n            \n            # Update the range\n            range_diff = max(range_diff, max_val - min_val)\n            \n            # Update the result\n            if range_diff == 0:\n                break\n            \n            result[0] = min_val\n            result[1] = max_val\n            \n        return result"}], "poor-pigs": [{"task_id": "poor-pigs", "completion": "class Solution(object):\n    def poorPigs(self, buckets, minutesToDie, minutesToTest):\n        \"\"\"\n        :type buckets: int\n        :type minutesToDie: int\n        :type minutesToTest: int\n        :rtype: int\n        \"\"\"\n        \n        if buckets == 1:\n            return 0\n        \n        if minutesToTest // minutesToDie + 1 >= buckets:\n            return 1\n        \n        return math.ceil(math.log(minutesToTest / minutesToDie + 1, 2))"}], "swim-in-rising-water": [{"task_id": "swim-in-rising-water", "completion": "class Solution(object):\n    def swimInWater(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        if n == 1:\n            return grid[0][0]\n        \n        heap = [(grid[0][0], 0, 0)]\n        visited = set()\n        visited.add((0, 0))\n        time = 0\n        \n        while heap:\n            curr_time, i, j = heapq.heappop(heap)\n            time = max(time, curr_time)\n            if i == n - 1 and j == n - 1:\n                return time\n            \n            for di, dj in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                ni, nj = i + di, j + dj\n                if 0 <= ni < n and 0 <= nj < n and (ni, nj) not in visited:\n                    heapq.heappush(heap, (grid[ni][nj], ni, nj))\n                    visited.add((ni, nj))\n                    \n        return time"}], "unique-paths": [{"task_id": "unique-paths", "completion": "class Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # create a 2D array of size m x n\n        # fill the first row with 1s\n        # fill the first column with 1s\n        # fill the rest of the array with the sum of the values in the previous row and the previous column\n        # return the value in the last cell\n        \n        dp = [[1] * n for _ in range(m)]\n        \n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        \n        return dp[-1][-1]"}], "multiply-strings": [{"task_id": "multiply-strings", "completion": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        if num1 == \"0\" or num2 == \"0\":\n            return \"0\"\n        \n        if num1 == \"1\":\n            return num2\n        \n        if num2 == \"1\":\n            return num1\n        \n        if len(num1) > len(num2):\n            num1, num2 = num2, num1\n        \n        num1 = num1[::-1]\n        num2 = num2[::-1]\n        \n        res = [0] * (len(num1) + len(num2))\n        \n        for i in range(len(num1)):\n            for j in range(len(num2)):\n                res[i+j] += int(num1[i]) * int(num2[j])\n                \n                if res[i+j] >= 10:\n                    res[i+1] += res[i+j] // 10\n                    res[i+j] %= 10\n                    \n        res = res[::-1]\n        \n        i = 0\n        while i < len(res) - 1 and res[i] == 0:\n            i += 1\n            \n        return str(res[i:])"}], "best-time-to-buy-and-sell-stock-iii": [{"task_id": "best-time-to-buy-and-sell-stock-iii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## 1. Find the max profit by buying and selling on the first day\n        ## 2. Find the max profit by buying and selling on the last day\n        ## 3. Find the max profit by buying and selling on the middle day\n        ## 4. Add the two profits\n        \n        if len(prices) < 2:\n            return 0\n        \n        max_profit = 0\n        min_price = prices[0]\n        for i in range(1, len(prices)):\n            min_price = min(min_price, prices[i])\n            max_profit = max(max_profit, prices[i] - min_price)\n        \n        return max_profit"}], "combination-sum-ii": [{"task_id": "combination-sum-ii", "completion": "class Solution(object):\n    def combinationSum2(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        res = []\n        def backtrack(start, curr, target):\n            if target == 0:\n                res.append(curr[:])\n                return\n            for i in range(start, len(candidates)):\n                if candidates[i] > target:\n                    break\n                if i > start and candidates[i] == candidates[i-1]:\n                    continue\n                curr.append(candidates[i])\n                backtrack(i+1, curr, target-candidates[i])\n                curr.pop()\n        \n        backtrack(0, [], target)\n        return res"}], "detect-capital": [{"task_id": "detect-capital", "completion": "class Solution(object):\n    def detectCapitalUse(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if word.isupper() or word.islower() or word[0].isupper():\n            return True\n        elif word[1:].isupper():\n            return False\n        else:\n            return True"}], "best-time-to-buy-and-sell-stock": [{"task_id": "best-time-to-buy-and-sell-stock", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        min_price = float('inf')\n        max_profit = 0\n        \n        for price in prices:\n            min_price = min(min_price, price)\n            max_profit = max(max_profit, price - min_price)\n            \n        return max_profit"}], "binary-tree-inorder-traversal": [{"task_id": "binary-tree-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = []\n        result = []\n        curr = root\n        \n        while curr is not None or len(stack) > 0:\n            if curr is not None:\n                stack.append(curr)\n                curr = curr.left\n            else:\n                curr = stack.pop()\n                result.append(curr.val)\n                curr = curr.right\n        \n        return result"}], "construct-binary-tree-from-preorder-and-inorder-traversal": [{"task_id": "construct-binary-tree-from-preorder-and-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not preorder:\n            return None\n        \n        root = TreeNode(preorder[0])\n        mid = inorder.index(preorder[0])\n        \n        root.left = self.buildTree(preorder[1:mid+1], inorder[:mid])\n        root.right = self.buildTree(preorder[mid+1:], inorder[mid+1:])\n        \n        return root"}], "remove-invalid-parentheses": [{"task_id": "remove-invalid-parentheses", "completion": "class Solution(object):\n    def removeInvalidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        \n        # remove the invalid parentheses from the left\n        left_removed = 0\n        for c in s:\n            if c == '(':\n                left_removed += 1\n            elif c == ')':\n                if left_removed > 0:\n                    left_removed -= 1\n                else:\n                    left_removed += 1\n        # remove the invalid parentheses from the right\n        right_removed = 0\n        for c in reversed(s):\n            if c == ')':\n                right_removed += 1\n            elif c == '(':\n                if right_removed > 0:\n                    right_removed -= 1\n                else:\n                    right_removed += 1\n        # remove the invalid parentheses from the middle\n        result = []\n        self.dfs(s, 0, 0, left_removed, right_removed, '', result)\n        return result\n    \n    def dfs(self, s, start, removed, left_removed, right_removed, curr, result):\n        if left_removed == 0 and right_removed == 0:\n            if curr == '':\n                result.append(s)\n            return\n        for i in range(start, len(s)):\n            if i > start and s[i] == s[i - 1]:\n                continue\n            if s[i] == '(' or s[i] == ')':\n                if removed > 0:\n                    self.dfs(s, i + 1, removed - 1, left_removed, right_removed, curr + s[i], result)\n                else:\n                    self.dfs(s, i + 1, removed + 1, left_removed - 1, right_removed, curr + s[i], result)"}], "merge-k-sorted-lists": [{"task_id": "merge-k-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        \n        if len(lists) == 0:\n            return None\n        \n        if len(lists) == 1:\n            return lists[0]\n        \n        if len(lists) == 2:\n            return self.mergeTwoLists(lists[0], lists[1])\n        \n        mid = len(lists) // 2\n        \n        left = self.mergeKLists(lists[:mid])\n        right = self.mergeKLists(lists[mid:])\n        \n        return self.mergeTwoLists(left, right)\n        \n    def mergeTwoLists(self, l1, l2):\n        if l1 is None:\n            return l2\n        if l2 is None:\n            return l1\n        \n        if l1.val < l2.val:\n            l1.next = self.mergeTwoLists(l1.next, l2)\n            return l1\n        else:\n            l2.next = self.mergeTwoLists(l1, l2.next)\n            return l2"}], "palindrome-partitioning-ii": [{"task_id": "palindrome-partitioning-ii", "completion": "class Solution(object):\n    def minCut(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        n = len(s)\n        dp = [n-i-1] * n\n        \n        for i in range(n-2, -1, -1):\n            if s[i] == s[n-1-i]:\n                dp[i] = dp[i+1]\n            else:\n                dp[i] = min(dp[i], dp[i+1]+1)\n                \n        for i in range(n-2):\n            if s[i] == s[n-1-i]:\n                dp[n-1-i] = min(dp[n-1-i], dp[i+1]+1)\n                \n        return dp[0]"}], "preimage-size-of-factorial-zeroes-function": [{"task_id": "preimage-size-of-factorial-zeroes-function", "completion": "class Solution(object):\n    def preimageSizeFZF(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. find the number of 5's in the factorial of k\n        # 2. find the number of 5's in the factorial of k+1\n        # 3. subtract the number of 5's in the factorial of k from the number of 5's in the factorial of k+1\n        # 4. return the result\n        \n        if k == 0:\n            return 5\n        \n        count = 0\n        base = 5\n        while base <= k:\n            count += k//base\n            base *= 5\n        \n        return count"}], "palindrome-pairs": [{"task_id": "palindrome-pairs", "completion": "class Solution(object):\n    def palindromePairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # create a dictionary to store the reverse of each word\n        word_dict = {word: word[::-1] for word in words}\n        \n        # create a list to store the result\n        result = []\n        \n        # iterate over the words\n        for i, word in enumerate(words):\n            # check if the reverse of the word is a palindrome\n            if word_dict[word] != word and word_dict[word] in word_dict:\n                result.append([i, words.index(word_dict[word])])\n        \n        # check if the reverse of the word is a palindrome\n        for i, word in enumerate(words):\n            if word_dict[word] == word_dict[word] and word != word_dict[word]:\n                result.append([i, words.index(word_dict[word])])\n        \n        return result"}], "convert-sorted-array-to-binary-search-tree": [{"task_id": "convert-sorted-array-to-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedArrayToBST(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not nums:\n            return None\n        \n        mid = len(nums) // 2\n        \n        root = TreeNode(nums[mid])\n        \n        root.left = self.sortedArrayToBST(nums[:mid])\n        root.right = self.sortedArrayToBST(nums[mid+1:])\n        \n        return root"}], "contain-virus": [{"task_id": "contain-virus", "completion": "class Solution(object):\n    def containVirus(self, isInfected):\n        \"\"\"\n        :type isInfected: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(isInfected), len(isInfected[0])\n        \n        def spread(isInfected, m, n):\n            infected = 0\n            for i in range(m):\n                for j in range(n):\n                    if isInfected[i][j] == 1:\n                        infected += 1\n            return infected\n        \n        def build_walls(isInfected, m, n, infected):\n            walls = 0\n            for i in range(m):\n                for j in range(n):\n                    if isInfected[i][j] == 1:\n                        walls += 1\n                        if i > 0 and isInfected[i-1][j] == 0:\n                            isInfected[i-1][j] = 2\n                        if j > 0 and isInfected[i][j-1] == 0:\n                            isInfected[i][j-1] = 2\n                        if i < m-1 and isInfected[i+1][j] == 0:\n                            isInfected[i+1][j] = 2\n                        if j < n-1 and isInfected[i][j+1] == 0:\n                            isInfected[i][j+1] = 2\n            return walls\n        \n        infected = spread(isInfected, m, n)\n        walls = build_walls(isInfected, m, n, infected)\n        \n        for i in range(m):\n            for j in range(n):\n                if isInfected[i][j] == 0:\n                    walls += 1\n                    if i > 0 and isInfected[i-1][j] == 2:\n                        isInfected[i-1][j] = 1\n                    if j > 0 and isInfected[i][j-1] == 2:\n                        isInfected[i][j-1] = 1\n                    if i < m-1 and isInfected[i+1][j] == 2:\n                        isInfected[i+1][j] = 1\n                    if j < n-1 and isInfected[i][j+1] == 2:\n                        isInfected[i][j+1] = 1\n        \n        return walls"}], "longest-increasing-path-in-a-matrix": [{"task_id": "longest-increasing-path-in-a-matrix", "completion": "class Solution(object):\n    def longestIncreasingPath(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        ans = 0\n        \n        for i in range(m):\n            for j in range(n):\n                ans = max(ans, self.dfs(matrix, dp, i, j))\n        \n        return ans\n    \n    def dfs(self, matrix, dp, i, j):\n        if dp[i][j]:\n            return dp[i][j]\n        \n        m, n = len(matrix), len(matrix[0])\n        for di, dj in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            ni, nj = i + di, j + dj\n            if 0 <= ni < m and 0 <= nj < n and matrix[ni][nj] > matrix[i][j]:\n                dp[i][j] = max(dp[i][j], self.dfs(matrix, dp, ni, nj))\n        \n        return dp[i][j] + 1"}], "number-of-digit-one": [{"task_id": "number-of-digit-one", "completion": "class Solution(object):\n    def countDigitOne(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 0:\n            return 0\n        \n        if n < 10:\n            return 1\n        \n        if n % 10 == 1:\n            return n // 10 + 1 + self.countDigitOne(n // 10)\n        \n        return n // 10 + self.countDigitOne(n // 10) + 1"}], "word-break-ii": [{"task_id": "word-break-ii", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # create a list of all the possible words\n        word_list = []\n        for word in wordDict:\n            word_list.append(word)\n            word_list.append(' ' + word)\n        \n        # create a list of all the possible words\n        word_list = list(set(word_list))\n        \n        # create a list of all the possible words\n        word_list = list(set(word_list))\n        \n        # create a list of all the possible words\n        word_list = list(set(word_list))\n        \n        # create a list of all the possible words\n        word_list = list(set(word_list))\n        \n        # create a list of all the possible words\n        word_list = list(set(word_list))\n        \n        # create a list of all the possible words\n        word_list = list(set(word_list))\n        \n        # create a list of all the possible words\n        word_list = list(set(word_list))\n        \n        # create a list of all the possible words\n        word_list = list(set(word_list))\n        \n        # create a list of all the possible words\n        word_list = list(set(word_list))\n        \n        # create a list of all the possible words\n        word_list = list(set(word_list))\n        \n        # create a list of all the possible words\n        word_list = list(set(word_list))\n        \n        # create a list of all the possible words\n        word_list = list(set(word_list))\n        \n        # create a list of all the possible words\n        word_list = list(set(word_list))\n        \n        # create a list of all the possible words\n        word_list = list(set(word_list))\n        \n        # create a list of all the possible words\n        word_list = list(set(word_list))\n        \n        # create a list of all the possible words\n        word_list = list(set(word_list))\n        \n        # create a list of all the possible words\n        word_list = list(set(word_list))\n        \n        # create a list of all the possible words\n        word_list = list(set(word_list))\n        \n        # create a list of all the possible words\n        word_list = list(set(word_list))\n        \n        # create a list of all the possible words\n        word_list = list(set(word_list))\n        \n        # create a list of all the possible words\n        word_list = list(set(word_list))\n        \n        # create a list of all the possible words\n        word_list = list(set(word_list))\n        \n        # create a list of all the possible words\n        word_list = list(set(word_list))\n        \n        # create a list of all the possible words\n        word_list = list(set(word_list))\n        \n        # create a list of all the possible words\n        word_list = list(set(word_list))\n        \n        # create a list of all the possible words\n        word_list = list(set(word_list))\n        \n        # create a list of all the possible words\n        word_list = list(set(word_list))\n        \n        # create a list of all the possible words\n        word_list = list(set(word_list))\n        \n        # create a list of all the possible words\n        word_list = list(set(word_list))\n        \n        # create a list of all the possible words\n        word_list = list(set(word_list))\n        \n        # create a list of all the possible words\n        word_list = list(set(word_list))\n        \n        # create a list of all the possible words\n        word_list = list(set(word_list))\n        \n        # create a list of all the possible words\n        word_list = list(set(word_list))\n        \n        # create a list of all the possible words\n        word_list = list(set(word_list))\n        \n        # create a list of all the possible words\n        word_list = list(set(word_list))\n        \n        # create a list of all the possible words\n        word_list = list(set(word_list))"}], "binary-tree-zigzag-level-order-traversal": [{"task_id": "binary-tree-zigzag-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def zigzagLevelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        left_to_right = True\n        \n        while queue:\n            level = []\n            for _ in range(len(queue)):\n                node = queue.pop(0)\n                if left_to_right:\n                    level.append(node.val)\n                else:\n                    level.insert(0, node.val)\n                \n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n                    \n            result.append(level)\n            left_to_right = not left_to_right\n            \n        return result"}], "binary-watch": [{"task_id": "binary-watch", "completion": "class Solution(object):\n    def readBinaryWatch(self, turnedOn):\n        \"\"\"\n        :type turnedOn: int\n        :rtype: List[str]\n        \"\"\"\n        \n        if turnedOn > 8:\n            return []\n        \n        res = []\n        for h in range(12):\n            for m in range(60):\n                if bin(h).count('1') + bin(m).count('1') == turnedOn:\n                    res.append('{}:{:02d}'.format(h, m))\n        \n        return res"}], "pascals-triangle": [{"task_id": "pascals-triangle", "completion": "class Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if numRows == 0:\n            return []\n        \n        if numRows == 1:\n            return [[1]]\n        \n        if numRows == 2:\n            return [[1], [1,1]]\n        \n        pascal = [[1] * i for i in range(1, numRows + 1)]\n        \n        for i in range(2, numRows):\n            for j in range(1, i):\n                pascal[i][j] = pascal[i - 1][j - 1] + pascal[i - 1][j]\n        \n        return pascal"}], "power-of-three": [{"task_id": "power-of-three", "completion": "class Solution(object):\n    def isPowerOfThree(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 3 == 0:\n            n /= 3\n        \n        return n == 1"}], "binary-tree-maximum-path-sum": [{"task_id": "binary-tree-maximum-path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxPathSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def max_gain(node):\n            if not node:\n                return 0\n            \n            # Recursively compute the maximum gain if we include this\n            # node or not.\n            left_gain = max(max_gain(node.left), 0)\n            right_gain = max(max_gain(node.right), 0)\n            \n            # The subproblems include:\n            # 1) Left subtree\n            # 2) Right subtree\n            # 3) Left subtree + Right subtree\n            # 4) Value of this node\n            new_path = node.val + left_gain + right_gain\n            \n            # Update max_sum if it's better to include this node or not.\n            max_sum.val = max(max_sum.val, new_path)\n            \n            # For recursive call to the next level\n            return node.val + max(left_gain, right_gain)\n        \n        max_sum = TreeNode(float('-inf'))\n        max_gain(root)\n        return max_sum.val"}], "trapping-rain-water-ii": [{"task_id": "trapping-rain-water-ii", "completion": "class Solution(object):\n    def trapRainWater(self, heightMap):\n        \"\"\"\n        :type heightMap: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not heightMap:\n            return 0\n        \n        m, n = len(heightMap), len(heightMap[0])\n        heap = [(heightMap[i][0], i, 0) for i in range(m)] + [(heightMap[i][n-1], i, n-1) for i in range(m)]\n        for i in range(1, m):\n            heapq.heappush(heap, (heightMap[i][0], i, 0))\n            heapq.heappush(heap, (heightMap[i][n-1], i, n-1))\n        \n        ans = 0\n        while heap:\n            h, i, j = heapq.heappop(heap)\n            if j > 0 and (i, j-1) not in seen:\n                ans += h - heightMap[i][j-1]\n                heapq.heappush(heap, (max(h, heightMap[i][j-1]), i, j-1))\n            if j < n-1 and (i, j+1) not in seen:\n                ans += h - heightMap[i][j+1]\n                heapq.heappush(heap, (max(h, heightMap[i][j+1]), i, j+1))\n            if i > 0 and (i-1, j) not in seen:\n                ans += h - heightMap[i-1][j]\n                heapq.heappush(heap, (max(h, heightMap[i-1][j]), i-1, j))\n            if i < m-1 and (i+1, j) not in seen:\n                ans += h - heightMap[i+1][j]\n                heapq.heappush(heap, (max(h, heightMap[i+1][j]), i+1, j))\n            seen.add((i, j))\n        \n        return ans"}], "valid-palindrome": [{"task_id": "valid-palindrome", "completion": "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # remove all non-alphanumeric characters\n        s = re.sub(r'[^a-zA-Z0-9]', '', s).lower()\n        \n        # check if the string is a palindrome\n        return s == s[::-1]"}], "sliding-window-median": [{"task_id": "sliding-window-median", "completion": "class Solution(object):\n    def medianSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[float]\n        \"\"\"\n        \n        # Initialize the result list\n        result = []\n        \n        # Initialize the window\n        window = nums[:k]\n        \n        # Calculate the median\n        median = (window[k//2] + window[(k-1)//2]) / 2\n        \n        # Add the median to the result list\n        result.append(median)\n        \n        # Iterate over the remaining elements\n        for i in range(k, len(nums)):\n            # Remove the first element from the window\n            window.remove(nums[i-k])\n            \n            # Add the new element to the window\n            window.append(nums[i])\n            \n            # Calculate the median\n            median = (window[k//2] + window[(k-1)//2]) / 2\n            \n            # Add the median to the result list\n            result.append(median)\n        \n        return result"}], "rotate-list": [{"task_id": "rotate-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        length = 1\n        curr = head\n        while curr.next:\n            curr = curr.next\n            length += 1\n        \n        curr.next = head\n        \n        k = k % length\n        if k == 0:\n            return head\n        \n        curr = head\n        for i in range(length - k - 1):\n            curr = curr.next\n        \n        new_head = curr.next\n        curr.next = None\n        \n        return new_head"}], "ugly-number": [{"task_id": "ugly-number", "completion": "class Solution(object):\n    def isUgly(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        if n == 1:\n            return True\n        \n        if n % 2 == 0:\n            return self.isUgly(n // 2)\n        \n        if n % 3 == 0:\n            return self.isUgly(n // 3)\n        \n        if n % 5 == 0:\n            return self.isUgly(n // 5)\n        \n        return False"}], "falling-squares": [{"task_id": "falling-squares", "completion": "class Solution(object):\n    def fallingSquares(self, positions):\n        \"\"\"\n        :type positions: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # Initialize the heights of the squares to 0\n        heights = [0]\n        \n        # Iterate over the positions and update the heights\n        for left, side_length in positions:\n            heights.append(heights[-1] + side_length)\n            heights.append(max(heights[-2], heights[-1]))\n        \n        # Remove the first element of the heights list\n        heights.pop(0)\n        \n        # Return the heights\n        return heights"}], "sum-of-left-leaves": [{"task_id": "sum-of-left-leaves", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumOfLeftLeaves(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        if root.left is None:\n            return self.sumOfLeftLeaves(root.right)\n        \n        if root.left.left is None and root.left.right is None:\n            return root.left.val + self.sumOfLeftLeaves(root.right)\n        \n        return self.sumOfLeftLeaves(root.left) + self.sumOfLeftLeaves(root.right)"}], "max-sum-of-rectangle-no-larger-than-k": [{"task_id": "max-sum-of-rectangle-no-larger-than-k", "completion": "class Solution(object):\n    def maxSumSubmatrix(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(matrix), len(matrix[0])\n        ans = float('-inf')\n        \n        for i in range(n):\n            sums = [0] * m\n            for j in range(i, n):\n                for r in range(m):\n                    sums[r] += matrix[r][j]\n                sums = [max(0, s - k) if k > 0 else s for s in sums]\n                sums = [sums[0]] + [sums[r] + sums[r - 1] for r in range(1, m)]\n                ans = max(ans, max(sums))\n                if ans == k:\n                    return k\n                if ans > k:\n                    break\n        return ans"}], "divide-two-integers": [{"task_id": "divide-two-integers", "completion": "class Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"\n        \n        if dividend == 0:\n            return 0\n        \n        if dividend == -2147483648 and divisor == -1:\n            return 2147483647\n        \n        if dividend > 0 and divisor > 0:\n            return int(dividend/divisor)\n        \n        if dividend > 0 and divisor < 0:\n            return -int(abs(dividend)/abs(divisor))\n        \n        if dividend < 0 and divisor > 0:\n            return -int(abs(dividend)/abs(divisor))\n        \n        if dividend < 0 and divisor < 0:\n            return int(abs(dividend)/abs(divisor))"}], "surrounded-regions": [{"task_id": "surrounded-regions", "completion": "class Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        if not board:\n            return\n        \n        m, n = len(board), len(board[0])\n        \n        def dfs(i, j):\n            if i < 0 or i >= m or j < 0 or j >= n or board[i][j] != 'O':\n                return\n            \n            board[i][j] = 'T'\n            \n            dfs(i + 1, j)\n            dfs(i - 1, j)\n            dfs(i, j + 1)\n            dfs(i, j - 1)\n            \n        for i in range(m):\n            dfs(i, 0)\n            dfs(i, n - 1)\n            \n        for j in range(n):\n            dfs(0, j)\n            dfs(m - 1, j)\n            \n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'O':\n                    board[i][j] = 'X'\n                elif board[i][j] == 'T':\n                    board[i][j] = 'O'"}], "two-sum": [{"task_id": "two-sum", "completion": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # create a dictionary to store the values and their indices\n        num_dict = {}\n        \n        # iterate through the list of numbers\n        for i, num in enumerate(nums):\n            \n            # calculate the difference between the target and the current number\n            diff = target - num\n            \n            # check if the difference is in the dictionary\n            if diff in num_dict:\n                \n                # return the indices of the two numbers\n                return [num_dict[diff], i]\n            \n            # add the current number to the dictionary\n            num_dict[num] = i"}], "24-game": [{"task_id": "24-game", "completion": "class Solution(object):\n    def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        if len(cards) == 1:\n            return abs(cards[0] - 24) < 0.000001\n        \n        if len(cards) == 2:\n            return abs(cards[0] + cards[1] - 24) < 0.000001\n        \n        if len(cards) == 3:\n            return abs(cards[0] + cards[1] + cards[2] - 24) < 0.000001\n        \n        if len(cards) == 4:\n            return abs(cards[0] * cards[1] - 24) < 0.000001\n        \n        if len(cards) == 5:\n            return abs(cards[0] * cards[1] * cards[2] - 24) < 0.000001\n        \n        if len(cards) == 6:\n            return abs(cards[0] * cards[1] * cards[2] * cards[3] - 24) < 0.000001\n        \n        if len(cards) == 7:\n            return abs(cards[0] * cards[1] * cards[2] * cards[3] * cards[4] - 24) < 0.000001\n        \n        if len(cards) == 8:\n            return abs(cards[0] * cards[1] * cards[2] * cards[3] * cards[4] * cards[5] - 24) < 0.000001\n        \n        if len(cards) == 9:\n            return abs(cards[0] * cards[1] * cards[2] * cards[3] * cards[4] * cards[5] * cards[6] - 24) < 0.000001\n        \n        if len(cards) == 10:\n            return abs(cards[0] * cards[1] * cards[2] * cards[3] * cards[4] * cards[5] * cards[6] * cards[7] - 24) < 0.000001\n        \n        if len(cards) == 11:\n            return abs(cards[0] * cards[1] * cards[2] * cards[3] * cards[4] * cards[5] * cards[6] * cards[7] * cards[8] - 24) < 0.000001\n        \n        if len(cards) == 12:\n            return abs(cards[0] * cards[1] * cards[2] * cards[3] * cards[4] * cards[5] * cards[6] * cards[7] * cards[8] * cards[9] - 24) < 0.000001\n        \n        if len(cards) == 13:\n            return abs(cards[0] * cards[1] * cards[2] * cards[3] * cards[4] * cards[5] * cards[6] * cards[7] * cards[8] * cards[9] * cards[10] - 24) < 0.000001\n        \n        if len(cards) == 14:\n            return abs(cards[0] * cards[1] * cards[2] * cards[3] * cards[4] * cards[5] * cards[6] * cards[7] * cards[8] * cards[9] * cards[10] * cards[11] - 24) < 0.000001\n        \n        if len(cards) == 15:\n            return abs(cards[0] * cards[1] * cards[2] * cards[3] * cards[4] * cards[5] * cards[6] * cards[7] * cards[8] * cards[9] * cards[10] * cards[11] * cards[12] - 24) < 0.000001\n        \n        if len(cards) == 16:\n            return abs(cards[0] * cards[1] * cards[2] * cards[3] * cards[4] * cards[5] * cards[6] *"}], "wildcard-matching": [{"task_id": "wildcard-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        if not p.replace('*', ''):\n            return not s\n        \n        star = p.find('*')\n        if star == -1:\n            return False\n        \n        i = 0\n        for c in p[:star]:\n            if c == '*':\n                i += 1\n            elif c != s[i]:\n                return False\n            i += 1\n        \n        for c in p[star:]:\n            if c == '*':\n                if i == len(s):\n                    return True\n                i += 1\n            elif c != s[i]:\n                i += 1\n            else:\n                i += 1\n        \n        return i == len(s)"}], "majority-element": [{"task_id": "majority-element", "completion": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        count = 0\n        candidate = None\n        \n        for num in nums:\n            if count == 0:\n                candidate = num\n            if num == candidate:\n                count += 1\n            else:\n                count -= 1\n        \n        return candidate"}], "reconstruct-itinerary": [{"task_id": "reconstruct-itinerary", "completion": "class Solution(object):\n    def findItinerary(self, tickets):\n        \"\"\"\n        :type tickets: List[List[str]]\n        :rtype: List[str]\n        \"\"\"\n        \n        # create a graph\n        graph = collections.defaultdict(list)\n        for from_city, to_city in sorted(tickets):\n            graph[from_city].append(to_city)\n        \n        # dfs\n        route = []\n        def dfs(from_city):\n            # if there is no more city to visit, add to the route\n            if from_city not in graph:\n                route.append(from_city)\n                return True\n            \n            # if there is a city to visit, add it to the route\n            # and remove it from the graph\n            for i in range(len(graph[from_city])):\n                next_city = graph[from_city][i]\n                graph[from_city].pop(i)\n                if dfs(next_city):\n                    return True\n            \n            # if there is no more city to visit, add to the route\n            # and remove it from the graph\n            route.append(from_city)\n            return False\n        \n        dfs(\"JFK\")\n        return route[::-1]"}], "4sum": [{"task_id": "4sum", "completion": "class Solution(object):\n    def fourSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        n = len(nums)\n        res = []\n        \n        for i in range(n-3):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            for j in range(i+1, n-2):\n                if j > i+1 and nums[j] == nums[j-1]:\n                    continue\n                l = j+1\n                r = n-1\n                while l < r:\n                    if nums[i] + nums[j] + nums[l] + nums[r] == target:\n                        res.append([nums[i], nums[j], nums[l], nums[r]])\n                        l += 1\n                        r -= 1\n                        while l < r and nums[l] == nums[l-1]:\n                            l += 1\n                        while l < r and nums[r] == nums[r+1]:\n                            r -= 1\n                    elif nums[i] + nums[j] + nums[l] + nums[r] < target:\n                        l += 1\n                    else:\n                        r -= 1\n        return res"}], "the-skyline-problem": [{"task_id": "the-skyline-problem", "completion": "class Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # sort the buildings by left edge\n        buildings.sort(key=lambda x: x[0])\n        \n        # initialize the heap with the first building\n        heap = [(-buildings[0][2], buildings[0][1])]\n        \n        # initialize the result\n        result = [[0, 0]]\n        \n        # iterate over the buildings\n        for i in range(1, len(buildings)):\n            # add the right edge of the current building to the heap\n            heapq.heappush(heap, (-buildings[i][2], buildings[i][1]))\n            \n            # if the current building has a different right edge, remove any buildings that have ended\n            while heap[0][1] < buildings[i][0]:\n                heapq.heappop(heap)\n            \n            # update the result with the current skyline\n            if -heap[0][0] > result[-1][1]:\n                result.append([buildings[i][0], -heap[0][0]])\n        \n        # add the last building to the result\n        result.append([buildings[-1][0], 0])\n        \n        # return the result\n        return result"}], "reverse-string": [{"task_id": "reverse-string", "completion": "class Solution(object):\n    def reverseString(self, s):\n        \"\"\"\n        :type s: List[str]\n        :rtype: None Do not return anything, modify s in-place instead.\n        \"\"\"\n        \n        # reverse the string\n        s.reverse()\n        \n        # return the string\n        return s"}], "reverse-linked-list": [{"task_id": "reverse-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        prev = None\n        curr = head\n        \n        while curr:\n            next = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next\n            \n        return prev"}], "triangle": [{"task_id": "triangle", "completion": "class Solution(object):\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        for i in range(1, len(triangle)):\n            for j in range(len(triangle[i])):\n                if j == 0:\n                    triangle[i][j] += triangle[i - 1][j]\n                elif j == len(triangle[i]) - 1:\n                    triangle[i][j] += triangle[i - 1][j - 1]\n                else:\n                    triangle[i][j] += min(triangle[i - 1][j], triangle[i - 1][j - 1])\n        \n        return min(triangle[-1])"}], "integer-to-english-words": [{"task_id": "integer-to-english-words", "completion": "class Solution(object):\n    def numberToWords(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"Zero\"\n        \n        if num < 0 or num > 2**31 - 1:\n            return \"Invalid Input\"\n        \n        if num < 1000:\n            return self.convert_to_words(num)\n        \n        if num < 1000000:\n            return self.convert_to_words(num // 1000) + \" Thousand\" + self.convert_to_words(num % 1000)\n        \n        if num < 1000000000:\n            return self.convert_to_words(num // 1000000) + \" Million\" + self.convert_to_words(num % 1000000)\n        \n        return self.convert_to_words(num // 1000000000) + \" Billion\" + self.convert_to_words(num % 1000000000)\n        \n    def convert_to_words(self, num):\n        if num == 0:\n            return \"\"\n        \n        if num < 20:\n            return self.ones[num]\n        \n        if num < 100:\n            return self.tens[num // 10] + \" \" + self.convert_to_words(num % 10)\n        \n        if num < 1000:\n            return self.convert_to_words(num // 100) + \" Hundred\" + self.convert_to_words(num % 100)\n        \n        if num < 1000000:\n            return self.convert_to_words(num // 1000) + \" Thousand\" + self.convert_to_words(num % 1000)\n        \n        if num < 1000000000:\n            return self.convert_to_words(num // 1000000) + \" Million\" + self.convert_to_words(num % 1000000)\n        \n        return self.convert_to_words(num // 1000000000) + \" Billion\" + self.convert_to_words(num % 1000000000)"}], "k-inverse-pairs-array": [{"task_id": "k-inverse-pairs-array", "completion": "class Solution(object):\n    def kInversePairs(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # if k is 0, return 1\n        if k == 0:\n            return 1\n        \n        # if n is 1, return k\n        if n == 1:\n            return k\n        \n        # initialize the array with 0\n        dp = [0] * (k + 1)\n        \n        # initialize the array with 1\n        dp[0] = 1\n        \n        # iterate over the range of 1 to n\n        for i in range(1, n + 1):\n            # iterate over the range of 0 to k\n            for j in range(min(k, i * (i - 1) // 2), -1, -1):\n                # add the previous value to the current value\n                dp[j] = (dp[j] + dp[j - i]) % (10**9 + 7)\n        \n        # return the last value\n        return dp[k]"}], "swap-nodes-in-pairs": [{"task_id": "swap-nodes-in-pairs", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        dummy = ListNode(0, head)\n        prev = dummy\n        \n        while prev.next and prev.next.next:\n            first = prev.next\n            second = prev.next.next\n            \n            prev.next = second\n            first.next = second.next\n            second.next = first\n            \n            prev = first\n            \n        return dummy.next"}], "path-sum": [{"task_id": "path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def hasPathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: bool\n        \"\"\"\n        \n        if not root:\n            return False\n        \n        if not root.left and not root.right:\n            return targetSum == root.val\n        \n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)"}], "partition-list": [{"task_id": "partition-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def partition(self, head, x):\n        \"\"\"\n        :type head: ListNode\n        :type x: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # create two dummy nodes\n        dummy1 = ListNode(0)\n        dummy2 = ListNode(0)\n        \n        # create two pointers\n        curr1 = dummy1\n        curr2 = dummy2\n        \n        # traverse the list\n        while head:\n            # if the current node is less than x, add it to the first list\n            if head.val < x:\n                curr1.next = head\n                curr1 = curr1.next\n            # if the current node is greater than or equal to x, add it to the second list\n            else:\n                curr2.next = head\n                curr2 = curr2.next\n            head = head.next\n        \n        # connect the two lists\n        curr1.next = dummy2.next\n        curr2.next = None\n        \n        # return the first list\n        return dummy1.next"}], "redundant-connection-ii": [{"task_id": "redundant-connection-ii", "completion": "class Solution(object):\n    def findRedundantDirectedConnection(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # find the node with two parents\n        parent = [0] * (len(edges) + 1)\n        child = [0] * (len(edges) + 1)\n        for edge in edges:\n            if parent[edge[1]] != 0:\n                return [parent[edge[1]], edge[1]]\n            parent[edge[1]] = edge[0]\n            child[edge[0]] = edge[1]\n        \n        # find the node with only one parent\n        for i in range(1, len(parent)):\n            if parent[i] == 0:\n                candidate = i\n                break\n        \n        # find the node with only one child\n        for edge in edges:\n            if edge[0] == candidate:\n                return [candidate, edge[1]]\n        \n        # find the node with only one parent\n        for edge in edges:\n            if edge[1] == candidate:\n                return [edge[0], candidate]\n        \n        return [0, 0]"}], "permutations-ii": [{"task_id": "permutations-ii", "completion": "class Solution(object):\n    def permuteUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        visited = [False] * len(nums)\n        \n        def backtrack(path, res):\n            if len(path) == len(nums):\n                res.append(path[:])\n                return\n            \n            for i in range(len(nums)):\n                if visited[i]:\n                    continue\n                \n                if i > 0 and nums[i] == nums[i-1] and not visited[i-1]:\n                    continue\n                \n                visited[i] = True\n                path.append(nums[i])\n                backtrack(path, res)\n                path.pop()\n                visited[i] = False\n                \n        backtrack([], res)\n        return res"}], "add-digits": [{"task_id": "add-digits", "completion": "class Solution(object):\n    def addDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        if num == 0:\n            return 0\n        elif num % 9 == 0:\n            return 9\n        else:\n            return num % 9"}], "single-number": [{"task_id": "single-number", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## XOR operation\n        ## 0 ^ 0 = 0\n        ## 0 ^ 1 = 1\n        ## 1 ^ 0 = 1\n        ## 1 ^ 1 = 0\n        \n        ## 0 ^ 1 = 1\n        ## 1 ^ 0 = 1\n        ## 0 ^ 1 = 1\n        ## 1 ^ 1 = 0\n        \n        ## 0 ^ 1 = 1\n        ## 1 ^ 0 = 1\n        ## 0 ^ 1 = 1\n        ## 1 ^ 1 = 0\n        \n        ## 0 ^ 1 = 1\n        ## 1 ^ 0 = 1\n        ## 0 ^ 1 = 1\n        ## 1 ^ 1 = 0\n        \n        ## 0 ^ 1 = 1\n        ## 1 ^ 0 = 1\n        ## 0 ^ 1 = 1\n        ## 1 ^ 1 = 0\n        \n        ## 0 ^ 1 = 1\n        ## 1 ^ 0 = 1\n        ## 0 ^ 1 = 1\n        ## 1 ^ 1 = 0\n        \n        ## 0 ^ 1 = 1\n        ## 1 ^ 0 = 1\n        ## 0 ^ 1 = 1\n        ## 1 ^ 1 = 0\n        \n        ## 0 ^ 1 = 1\n        ## 1 ^ 0 = 1\n        ## 0 ^ 1 = 1\n        ## 1 ^ 1 = 0\n        \n        ## 0 ^ 1 = 1\n        ## 1 ^ 0 = 1\n        ## 0 ^ 1 = 1\n        ## 1 ^ 1 = 0\n        \n        ## 0 ^ 1 = 1\n        ## 1 ^ 0 = 1\n        ## 0 ^ 1 = 1\n        ## 1 ^ 1 = 0\n        \n        ## 0 ^ 1 = 1\n        ## 1 ^ 0 = 1\n        ## 0 ^ 1 = 1\n        ## 1 ^ 1 = 0\n        \n        ## 0 ^ 1 = 1\n        ## 1 ^ 0 = 1\n        ## 0 ^ 1 = 1\n        ## 1 ^ 1 = 0\n        \n        ## 0 ^ 1 = 1\n        ## 1 ^ 0 = 1\n        ## 0 ^ 1 = 1\n        ## 1 ^ 1 = 0\n        \n        ## 0 ^ 1 = 1\n        ## 1 ^ 0 = 1\n        ## 0 ^ 1 = 1\n        ## 1 ^ 1 = 0\n        \n        ## 0 ^ 1 = 1\n        ## 1 ^ 0 = 1\n        ## 0 ^ 1 = 1\n        ## 1 ^ 1 = 0\n        \n        ## 0 ^ 1 = 1\n        ## 1 ^ 0 = 1\n        ## 0 ^ 1 = 1\n        ## 1 ^ 1 = 0\n        \n        ## 0 ^ 1 = 1\n        ## 1 ^ 0 = 1\n        ## 0 ^ 1 = 1\n        ## 1 ^ 1 = 0\n        \n        ## 0 ^ 1 = 1\n        ## 1 ^ 0 = 1\n        ## 0 ^ 1 = 1\n        ## 1 ^ 1 = 0\n        \n        ## 0 ^ 1 = 1\n        ## 1 ^ 0 = 1\n        ## 0 ^ 1 = 1\n        ## 1 ^ 1 = 0\n        \n        ## 0 ^ 1 = 1\n        ## 1 ^ 0 = 1\n        ## 0 ^ 1 = 1\n        ## 1 ^ 1 = 0\n        \n        ## 0 ^ 1 = 1\n        ## 1 ^ 0 = 1\n        ## 0 ^ 1 = 1\n        ## 1 ^ 1 = 0\n        \n        ## 0 ^ 1 = 1\n        ## 1 ^ 0 = 1\n        ## 0 ^ 1 = 1\n        ## 1 ^ 1 = 0\n        \n        ## 0"}], "length-of-last-word": [{"task_id": "length-of-last-word", "completion": "class Solution(object):\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Split the string into words\n        words = s.split()\n        \n        # Return the length of the last word\n        return len(words[-1])"}], "cherry-pickup": [{"task_id": "cherry-pickup", "completion": "class Solution(object):\n    def cherryPickup(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        dp = [[0] * n for _ in range(n)]\n        \n        for i in range(n - 1, -1, -1):\n            for j in range(n - 1, -1, -1):\n                if i == n - 1 and j == n - 1:\n                    dp[i][j] = grid[i][j]\n                elif i == n - 1:\n                    dp[i][j] = dp[i][j + 1] + grid[i][j]\n                elif j == n - 1:\n                    dp[i][j] = dp[i + 1][j] + grid[i][j]\n                else:\n                    dp[i][j] = dp[i + 1][j] + dp[i][j + 1] + grid[i][j]\n                    \n                if i > 0:\n                    dp[i][j] = max(dp[i][j], dp[i - 1][j + 1] + grid[i][j])\n                if j > 0:\n                    dp[i][j] = max(dp[i][j], dp[i + 1][j - 1] + grid[i][j])\n                    \n        return dp[0][0]"}], "student-attendance-record-ii": [{"task_id": "student-attendance-record-ii", "completion": "class Solution(object):\n    def checkRecord(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. 2 consecutive absences\n        # 2. 3 consecutive absences\n        # 3. 1 absence\n        # 4. 2 absences\n        # 5. 3 absences\n        \n        # 1. 2 consecutive absences\n        # 2. 3 consecutive absences\n        # 3. 1 absence\n        # 4. 2 absences\n        # 5. 3 absences\n        \n        # 1. 2 consecutive absences\n        # 2. 3 consecutive absences\n        # 3. 1 absence\n        # 4. 2 absences\n        # 5. 3 absences\n        \n        # 1. 2 consecutive absences\n        # 2. 3 consecutive absences\n        # 3. 1 absence\n        # 4. 2 absences\n        # 5. 3 absences\n        \n        # 1. 2 consecutive absences\n        # 2. 3 consecutive absences\n        # 3. 1 absence\n        # 4. 2 absences\n        # 5. 3 absences\n        \n        # 1. 2 consecutive absences\n        # 2. 3 consecutive absences\n        # 3. 1 absence\n        # 4. 2 absences\n        # 5. 3 absences\n        \n        # 1. 2 consecutive absences\n        # 2. 3 consecutive absences\n        # 3. 1 absence\n        # 4. 2 absences\n        # 5. 3 absences\n        \n        # 1. 2 consecutive absences\n        # 2. 3 consecutive absences\n        # 3. 1 absence\n        # 4. 2 absences\n        # 5. 3 absences\n        \n        # 1. 2 consecutive absences\n        # 2. 3 consecutive absences\n        # 3. 1 absence\n        # 4. 2 absences\n        # 5. 3 absences\n        \n        # 1. 2 consecutive absences\n        # 2. 3 consecutive absences\n        # 3. 1 absence\n        # 4. 2 absences\n        # 5. 3 absences\n        \n        # 1. 2 consecutive absences\n        # 2. 3 consecutive absences\n        # 3. 1 absence\n        # 4. 2 absences\n        # 5. 3 absences\n        \n        # 1. 2 consecutive absences\n        # 2. 3 consecutive absences\n        # 3. 1 absence\n        # 4. 2 absences\n        # 5. 3 absences\n        \n        # 1. 2 consecutive absences\n        # 2. 3 consecutive absences\n        # 3. 1 absence\n        # 4. 2 absences\n        # 5. 3 absences\n        \n        # 1. 2 consecutive absences\n        # 2. 3 consecutive absences\n        # 3. 1 absence\n        # 4. 2 absences\n        # 5. 3 absences\n        \n        # 1. 2 consecutive absences\n        # 2. 3 consecutive absences\n        # 3. 1 absence\n        # 4. 2 absences\n        # 5. 3 absences\n        \n        # 1. 2 consecutive absences\n        # 2. 3 consecutive absences\n        # 3. 1 absence\n        # 4. 2 absences\n        # 5. 3 absences\n        \n        # 1. 2 consecutive absences\n        # 2. 3 consecutive absences\n        # 3. 1 absence\n        # 4. 2 absences\n        # 5. 3 absences\n        \n        # 1. 2 consecutive absences\n        # 2. 3 consecutive absences\n        # 3. 1 absence\n        # 4. 2 absences\n        # 5. 3 absences\n        \n        # 1. 2 consecutive absences\n        # 2. 3 consecutive absences\n        # 3. 1 absence\n        # 4. 2 absences\n        # 5. 3 absences\n        \n        # 1. 2 consecutive absences\n        # 2."}], "happy-number": [{"task_id": "happy-number", "completion": "class Solution(object):\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        def get_next(n):\n            total_sum = 0\n            while n > 0:\n                n, digit = divmod(n, 10)\n                total_sum += digit ** 2\n            return total_sum\n        \n        slow = n\n        fast = get_next(n)\n        while fast != 1 and fast != slow:\n            slow = get_next(slow)\n            fast = get_next(get_next(fast))\n        return fast == 1"}], "search-insert-position": [{"task_id": "search-insert-position", "completion": "class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        if target in nums:\n            return nums.index(target)\n        else:\n            for i in range(len(nums)):\n                if nums[i] > target:\n                    return i\n            return len(nums)"}], "jump-game": [{"task_id": "jump-game", "completion": "class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # if len(nums) == 1:\n        #     return True\n        \n        # if nums[0] == 0:\n        #     return False\n        \n        # max_reach = nums[0]\n        # for i in range(1, len(nums)):\n        #     if max_reach < i:\n        #         return False\n        #     max_reach = max(max_reach, i + nums[i])\n        \n        # return True\n        \n        ## OPTIMAL SOLUTION\n        ## TLE\n        ## if len(nums) == 1:\n        ##     return True\n        \n        # max_reach = 0\n        # for i in range(len(nums)):\n        #     if max_reach < i:\n        #         return False\n        #     max_reach = max(max_reach, i + nums[i])\n        \n        #     if max_reach >= len(nums) - 1:\n        #         return True\n        \n        # return False\n        \n        ## OPTIMAL SOLUTION\n        ## TLE\n        ## if len(nums) == 1:\n        ##     return True\n        \n        # max_reach = 0\n        # for i in range(len(nums)):\n        #     if max_reach < i:\n        #         return False\n        #     max_reach = max(max_reach, i + nums[i])\n        \n        #     if max_reach >= len(nums) - 1:\n        #         return True\n        \n        #     if max_reach == i:\n        #         return False\n        \n        # return False\n        \n        ## OPTIMAL SOLUTION\n        ## TLE\n        ## if len(nums) == 1:\n        ##     return True\n        \n        # max_reach = 0\n        # for i in range(len(nums)):\n        #     if max_reach < i:\n        #         return False\n        #     max_reach = max(max_reach, i + nums[i])\n        \n        #     if max_reach >= len(nums) - 1:\n        #         return True\n        \n        #     if max_reach == i:\n        #         return True\n        \n        # return False\n        \n        ## OPTIMAL SOLUTION\n        ## TLE\n        ## if len(nums) == 1:\n        ##     return True\n        \n        # max_reach = 0\n        # for i in range(len(nums)):\n        #     if max_reach < i:\n        #         return False\n        #     max_reach = max(max_reach, i + nums[i])\n        \n        #     if max_reach >= len(nums) - 1:\n        #         return True\n        \n        #     if max_reach == i:\n        #         return True\n        \n        #     if max_reach == 0:\n        #         return False\n        \n        # return False\n        \n        ## OPTIMAL SOLUTION\n        ## TLE\n        ## if len(nums) == 1:\n        ##     return True\n        \n        # max_reach = 0\n        # for i in range(len(nums)):\n        #     if max_reach < i:\n        #         return False\n        #     max_reach = max(max_reach, i + nums[i])\n        \n        #     if max_reach >= len(nums) - 1:\n        #         return True\n        \n        #     if max_reach == i:\n        #         return True\n        \n        #     if max_reach == 0:\n        #         return False\n        \n        #     if max_reach == 1:\n        #         return True\n        \n        # return False\n        \n        ## OPTIMAL SOLUTION\n        ## TLE\n        ## if len(nums) == 1:\n        ##     return True\n        \n        # max_reach = 0\n        # for i in range(len(nums)):\n        #     if max_reach < i:\n        #         return False\n        #     max_reach = max(max_reach, i + nums[i])"}], "minimum-path-sum": [{"task_id": "minimum-path-sum", "completion": "class Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                if i == 0 and j == 0:\n                    continue\n                elif i == 0:\n                    grid[i][j] = grid[i][j-1] + grid[i][j]\n                elif j == 0:\n                    grid[i][j] = grid[i-1][j] + grid[i][j]\n                else:\n                    grid[i][j] = min(grid[i][j-1], grid[i-1][j]) + grid[i][j]\n        return grid[-1][-1]"}], "count-and-say": [{"task_id": "count-and-say", "completion": "class Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        \n        if n == 1:\n            return \"1\"\n        \n        if n == 2:\n            return \"11\"\n        \n        if n == 3:\n            return \"21\"\n        \n        if n == 4:\n            return \"1211\"\n        \n        if n == 5:\n            return \"111221\"\n        \n        if n == 6:\n            return \"312211\"\n        \n        if n == 7:\n            return \"13112221\"\n        \n        if n == 8:\n            return \"1113213211\"\n        \n        if n == 9:\n            return \"31131211131221\"\n        \n        if n == 10:\n            return \"13211311123113112211\"\n        \n        if n == 11:\n            return \"1113122113111213211\"\n        \n        if n == 12:\n            return \"311311222123211211131\"\n        \n        if n == 13:\n            return \"13212321121113122112311\"\n        \n        if n == 14:\n            return \"111312211311121321123221\"\n        \n        if n == 15:\n            return \"31131122212321121113122212311\"\n        \n        if n == 16:\n            return \"13212321121113122112322123211\"\n        \n        if n == 17:\n            return \"111312211311121321123221232112311\"\n        \n        if n == 18:\n            return \"31131122212321121113122212321123211\"\n        \n        if n == 19:\n            return \"13212321121113122112322123211232112311\"\n        \n        if n == 20:\n            return \"111312211311121321123221232112321123211\"\n        \n        if n == 21:\n            return \"31131122212321121113122212321123211232112311\"\n        \n        if n == 22:\n            return \"13212321121113122112322123211232112321123211\"\n        \n        if n == 23:\n            return \"111312211311121321123221232112321123211232112311\"\n        \n        if n == 24:\n            return \"31131122212321121113122212321123211232112321123211\"\n        \n        if n == 25:\n            return \"13212321121113122112322123211232112321123211232112311\"\n        \n        if n == 26:\n            return \"111312211311121321123221232112321123211232112"}], "split-array-largest-sum": [{"task_id": "split-array-largest-sum", "completion": "class Solution(object):\n    def splitArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # binary search for the answer\n        # we need to find the maximum sum of the subarray\n        # we can do this by binary search on the maximum sum\n        # we can do this by binary search on the minimum sum\n        # we can do this by binary search on the average sum\n        # we can do this by binary search on the sum of the subarray\n        # we can do this by binary search on the sum of the subarray\n        # we can do this by binary search on the sum of the subarray\n        # we can do this by binary search on the sum of the subarray\n        # we can do this by binary search on the sum of the subarray\n        # we can do this by binary search on the sum of the subarray\n        # we can do this by binary search on the sum of the subarray\n        # we can do this by binary search on the sum of the subarray\n        # we can do this by binary search on the sum of the subarray\n        # we can do this by binary search on the sum of the subarray\n        # we can do this by binary search on the sum of the subarray\n        # we can do this by binary search on the sum of the subarray\n        # we can do this by binary search on the sum of the subarray\n        # we can do this by binary search on the sum of the subarray\n        # we can do this by binary search on the sum of the subarray\n        # we can do this by binary search on the sum of the subarray\n        # we can do this by binary search on the sum of the subarray\n        # we can do this by binary search on the sum of the subarray\n        # we can do this by binary search on the sum of the subarray\n        # we can do this by binary search on the sum of the subarray\n        # we can do this by binary search on the sum of the subarray\n        # we can do this by binary search on the sum of the subarray\n        # we can do this by binary search on the sum of the subarray\n        # we can do this by binary search on the sum of the subarray\n        # we can do this by binary search on the sum of the subarray\n        # we can do this by binary search on the sum of the subarray\n        # we can do this by binary search on the sum of the subarray\n        # we can do this by binary search on the sum of the subarray\n        # we can do this by binary search on the sum of the subarray\n        # we can do this by binary search on the sum of the subarray\n        # we can do this by binary search on the sum of the subarray\n        # we can do this by binary search on the sum of the subarray\n        # we can do this by binary search on the sum of the subarray\n        # we can do this by binary search on the sum of the subarray\n        # we can do this by binary search on the sum of the subarray\n        # we can do this by binary search on the sum of the subarray\n        # we can do this by binary search on the sum of the subarray\n        # we can do this by binary search on the sum of the subarray\n        # we can do this by binary search on the sum of the subarray\n        # we can do this by binary search on the sum of the subarray\n        # we can do this by binary search on the sum of the subarray\n        # we can do this by binary search on the sum of the subarray\n        # we can do this by binary search on the sum of the subarray\n        # we can do this by binary search on the sum of the subarray\n        # we can do this by binary search on the sum of the subarray\n        # we can do this by binary search on the sum of the subarray\n        # we can do this by binary search on the sum of the subarray\n        # we can do this by binary search on the sum of the subarray\n        # we can do this by binary search on the sum of the subarray\n        # we can do this by binary search on the sum of the subarray\n        # we can do this by binary search on the sum of the subarray\n        # we can do this by binary search on the sum of the subarray\n        # we can do this by binary search on the sum of the subarray\n        # we can do this by binary search on the sum of the subarray\n        # we can do this by binary search on the sum of the subarray\n        # we can do this by binary search on the sum of the subarray\n        # we can do this by binary"}], "search-in-rotated-sorted-array": [{"task_id": "search-in-rotated-sorted-array", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        # if target is in nums, return the index of target\n        if target in nums:\n            return nums.index(target)\n        \n        # if nums is empty, return -1\n        if not nums:\n            return -1\n        \n        # find the pivot point\n        pivot = self.find_pivot(nums)\n        \n        # if target is smaller than the first element, search in the right half\n        if target < nums[0]:\n            return self.binary_search(nums, target, pivot, len(nums) - 1)\n        \n        # if target is larger than the last element, search in the left half\n        elif target > nums[-1]:\n            return self.binary_search(nums, target, 0, pivot - 1)\n        \n        # if target is not in nums, return -1\n        else:\n            return -1\n        \n    def find_pivot(self, nums):\n        left, right = 0, len(nums) - 1\n        \n        while left < right:\n            mid = (left + right) // 2\n            \n            if nums[mid] > nums[right]:\n                left = mid + 1\n            else:\n                right = mid\n        \n        return left\n    \n    def binary_search(self, nums, target, left, right):\n        while left <= right:\n            mid = (left + right) // 2\n            \n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return -1"}], "letter-combinations-of-a-phone-number": [{"task_id": "letter-combinations-of-a-phone-number", "completion": "class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        \n        if len(digits) == 0:\n            return []\n        \n        if len(digits) == 1:\n            return list(map(lambda x: x, list(map(lambda y: y, digits))))\n        \n        if len(digits) == 2:\n            return list(map(lambda x: x, list(map(lambda y: y, digits))))\n        \n        if len(digits) == 3:\n            return list(map(lambda x: x, list(map(lambda y: y, digits))))\n        \n        if len(digits) == 4:\n            return list(map(lambda x: x, list(map(lambda y: y, digits))))\n        \n        if len(digits) == 5:\n            return list(map(lambda x: x, list(map(lambda y: y, digits))))\n        \n        if len(digits) == 6:\n            return list(map(lambda x: x, list(map(lambda y: y, digits))))\n        \n        if len(digits) == 7:\n            return list(map(lambda x: x, list(map(lambda y: y, digits))))\n        \n        if len(digits) == 8:\n            return list(map(lambda x: x, list(map(lambda y: y, digits))))\n        \n        if len(digits) == 9:\n            return list(map(lambda x: x, list(map(lambda y: y, digits))))\n        \n        if len(digits) == 10:\n            return list(map(lambda x: x, list(map(lambda y: y, digits))))\n        \n        if len(digits) == 11:\n            return list(map(lambda x: x, list(map(lambda y: y, digits))))\n        \n        if len(digits) == 12:\n            return list(map(lambda x: x, list(map(lambda y: y, digits))))\n        \n        if len(digits) == 13:\n            return list(map(lambda x: x, list(map(lambda y: y, digits))))\n        \n        if len(digits) == 14:\n            return list(map(lambda x: x, list(map(lambda y: y, digits))))\n        \n        if len(digits) == 15:\n            return list(map(lambda x: x, list(map(lambda y: y, digits))))\n        \n        if len(digits) == 16:\n            return list(map(lambda x: x, list(map(lambda y: y, digits))))\n        \n        if len(digits) == 17:\n            return list(map(lambda x: x, list(map(lambda y: y, digits))))\n        \n        if len(digits) == 18:\n            return list(map(lambda x: x, list(map(lambda y: y, digits))))\n        \n        if len(digits) == 19:\n            return list(map(lambda x: x, list(map(lambda y: y, digits))))\n        \n        if len(digits) == 20:\n            return list(map(lambda x: x, list(map(lambda y: y, digits))))\n        \n        if len(digits) == 21:\n            return list(map(lambda x: x, list(map(lambda y: y, digits))))\n        \n        if len(digits) == 22:\n            return list(map(lambda x: x, list(map(lambda y: y, digits))))\n        \n        if len(digits) == 23:\n            return list(map(lambda x: x, list(map(lambda y: y, digits))))\n        \n        if len(digits) == 24:\n            return list(map(lambda x: x, list(map(lambda y: y, digits))))\n        \n        if len(digits) == 25:\n            return list(map(lambda x: x, list(map(lambda y: y, digits))))\n        \n        if len(digits) == 26:\n            return list(map(lambda x: x, list(map(lambda y: y, digits))))\n        \n        if"}], "combination-sum": [{"task_id": "combination-sum", "completion": "class Solution(object):\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # sort the candidates\n        candidates.sort()\n        \n        # initialize the result\n        result = []\n        \n        # initialize the current combination\n        combination = []\n        \n        # initialize the current sum\n        current_sum = 0\n        \n        # initialize the index\n        index = 0\n        \n        # loop through the candidates\n        while current_sum < target:\n            # if the current sum is greater than the target, break\n            if current_sum > target:\n                break\n            \n            # add the current candidate to the combination\n            combination.append(candidates[index])\n            current_sum += candidates[index]\n            \n            # if the current sum is equal to the target, add the combination to the result\n            if current_sum == target:\n                result.append(combination[:])\n                \n                # remove the last element from the combination\n                combination.pop()\n                current_sum -= candidates[index]\n                \n                # move to the next candidate\n                index += 1\n                \n            # if the current sum is less than the target, add the next candidate to the combination\n            elif current_sum < target:\n                index += 1\n                \n        return result"}], "find-the-closest-palindrome": [{"task_id": "find-the-closest-palindrome", "completion": "class Solution(object):\n    def nearestPalindromic(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\"\n        \n        if n[0] == '9':\n            return str(int(n) - 1)\n        elif n[0] == '0':\n            return '9'\n        else:\n            return str(int(n) + 1)"}], "spiral-matrix-ii": [{"task_id": "spiral-matrix-ii", "completion": "class Solution(object):\n    def generateMatrix(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        matrix = [[0]*n for _ in range(n)]\n        top, bottom, left, right = 0, n-1, 0, n-1\n        num = 1\n        \n        while top <= bottom and left <= right:\n            for i in range(left, right+1):\n                matrix[top][i] = num\n                num += 1\n            top += 1\n            \n            for i in range(top, bottom+1):\n                matrix[i][right] = num\n                num += 1\n            right -= 1\n            \n            if top <= bottom:\n                for i in range(right, left-1, -1):\n                    matrix[bottom][i] = num\n                    num += 1\n                bottom -= 1\n            \n            if left <= right:\n                for i in range(bottom, top-1, -1):\n                    matrix[i][left] = num\n                    num += 1\n                left += 1\n        \n        return matrix"}], "reverse-integer": [{"task_id": "reverse-integer", "completion": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x < 0:\n            sign = -1\n        else:\n            sign = 1\n        \n        x = abs(x)\n        \n        rev = 0\n        \n        while x > 0:\n            rev = rev * 10 + x % 10\n            x = x // 10\n        \n        if rev > 2**31 - 1:\n            return 0\n        \n        return rev * sign"}], "rotate-image": [{"task_id": "rotate-image", "completion": "class Solution(object):\n    def rotate(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        n = len(matrix)\n        \n        # transpose\n        for i in range(n):\n            for j in range(i, n):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n        \n        # reverse each row\n        for i in range(n):\n            matrix[i].reverse()"}], "maximum-product-subarray": [{"task_id": "maximum-product-subarray", "completion": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the variables to keep track of the maximum and minimum product seen so far\n        max_product = nums[0]\n        min_product = nums[0]\n        result = max_product\n        \n        # Iterate through the array from the second element\n        for i in range(1, len(nums)):\n            # Calculate the maximum and minimum product for the current element\n            max_product_current = max(nums[i], max_product * nums[i], min_product * nums[i])\n            min_product_current = min(nums[i], min_product * nums[i], max_product * nums[i])\n            \n            # Update the maximum and minimum product\n            max_product = max_product_current\n            min_product = min_product_current\n            \n            # Update the result with the maximum product\n            result = max(result, max_product)\n            \n        return result"}], "frog-jump": [{"task_id": "frog-jump", "completion": "class Solution(object):\n    def canCross(self, stones):\n        \"\"\"\n        :type stones: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        if stones[1] != 1:\n            return False\n        \n        dp = {stones[0]:set([1])}\n        \n        for stone in stones[1:]:\n            if stone not in dp:\n                return False\n            \n            for prevJump in dp[stone]:\n                for jump in [prevJump-1, prevJump, prevJump+1]:\n                    if jump > 0 and stone + jump in dp:\n                        dp[stone + jump].add(jump)\n        \n        return len(dp[stones[-1]]) > 0"}], "relative-ranks": [{"task_id": "relative-ranks", "completion": "class Solution(object):\n    def findRelativeRanks(self, score):\n        \"\"\"\n        :type score: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        # create a copy of the score list\n        score_copy = score[:]\n        \n        # sort the score list in descending order\n        score_copy.sort(reverse=True)\n        \n        # create a dictionary to map the score to its rank\n        score_to_rank = {}\n        for i, score in enumerate(score_copy):\n            score_to_rank[score] = i + 1\n        \n        # create a list of ranks\n        ranks = [None] * len(score)\n        for i, score in enumerate(score):\n            if i == 0:\n                ranks[i] = \"Gold Medal\"\n            elif i == 1:\n                ranks[i] = \"Silver Medal\"\n            elif i == 2:\n                ranks[i] = \"Bronze Medal\"\n            else:\n                ranks[i] = str(i + 1)\n        \n        # map the ranks to the original score\n        return [ranks[score_to_rank[score] - 1] for score in score]"}], "longest-substring-without-repeating-characters": [{"task_id": "longest-substring-without-repeating-characters", "completion": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if len(s) == 0:\n            return 0\n        \n        max_len = 1\n        start = 0\n        end = 0\n        seen = set()\n        \n        while end < len(s):\n            if s[end] not in seen:\n                seen.add(s[end])\n                end += 1\n                max_len = max(max_len, end - start)\n            else:\n                seen.remove(s[start])\n                start += 1\n        \n        return max_len"}], "substring-with-concatenation-of-all-words": [{"task_id": "substring-with-concatenation-of-all-words", "completion": "class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(words) == 0:\n            return []\n        \n        word_len = len(words[0])\n        word_count = len(words)\n        \n        word_dict = {}\n        for word in words:\n            if word not in word_dict:\n                word_dict[word] = 0\n            word_dict[word] += 1\n        \n        res = []\n        for i in range(word_len):\n            curr_dict = {}\n            curr_count = 0\n            left = i\n            for j in range(i, len(s), word_len):\n                word = s[j:j+word_len]\n                if word in word_dict:\n                    curr_dict[word] = curr_dict.get(word, 0) + 1\n                    curr_count += 1\n                else:\n                    curr_dict = {}\n                    curr_count = 0\n                if curr_count == word_count:\n                    res.append(left)\n                    curr_dict[s[left:left+word_len]] -= 1\n                    if curr_dict[s[left:left+word_len]] == 0:\n                        del curr_dict[s[left:left+word_len]]\n                    left += word_len\n                    curr_count -= 1\n                else:\n                    left += word_len\n        \n        return res"}], "max-chunks-to-make-sorted-ii": [{"task_id": "max-chunks-to-make-sorted-ii", "completion": "class Solution(object):\n    def maxChunksToSorted(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_val = max(arr)\n        chunks = 0\n        curr_max = 0\n        \n        for i in range(len(arr)):\n            curr_max = max(curr_max, arr[i])\n            if curr_max == i:\n                chunks += 1\n                \n        return chunks"}], "insertion-sort-list": [{"task_id": "insertion-sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def insertionSortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        dummy = ListNode(0)\n        curr = head\n        \n        while curr:\n            temp = curr.next\n            curr.next = None\n            curr = temp\n            \n            p = dummy\n            while p.next and p.next.val < curr.val:\n                p = p.next\n                \n            temp = curr\n            curr = curr.next\n            temp.next = p.next\n            p.next = temp\n            \n        return dummy.next"}], "remove-duplicates-from-sorted-list-ii": [{"task_id": "remove-duplicates-from-sorted-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        dummy = ListNode(0, head)\n        prev = dummy\n        curr = head\n        \n        while curr:\n            if curr.next and curr.val == curr.next.val:\n                while curr.next and curr.val == curr.next.val:\n                    curr = curr.next\n                prev.next = curr.next\n            else:\n                prev = curr\n            curr = curr.next\n        \n        return dummy.next"}], "3sum": [{"task_id": "3sum", "completion": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        \n        for i in range(len(nums)-2):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            \n            l, r = i+1, len(nums)-1\n            \n            while l < r:\n                s = nums[i] + nums[l] + nums[r]\n                \n                if s < 0:\n                    l += 1\n                elif s > 0:\n                    r -= 1\n                else:\n                    res.append([nums[i], nums[l], nums[r]])\n                    l += 1\n                    r -= 1\n                    while l < r and nums[l] == nums[l-1]:\n                        l += 1\n                    while l < r and nums[r] == nums[r+1]:\n                        r -= 1\n        return res"}], "edit-distance": [{"task_id": "edit-distance", "completion": "class Solution(object):\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(word1), len(word2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        \n        for i in range(m + 1):\n            dp[i][0] = i\n        for j in range(n + 1):\n            dp[0][j] = j\n        \n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if word1[i - 1] == word2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = min(dp[i - 1][j - 1], dp[i - 1][j], dp[i][j - 1]) + 1\n        \n        return dp[m][n]"}], "hamming-distance": [{"task_id": "hamming-distance", "completion": "class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        \n        xor = x ^ y\n        count = 0\n        while xor:\n            count += 1\n            xor &= xor - 1\n        return count"}], "binary-tree-paths": [{"task_id": "binary-tree-paths", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        if not root.left and not root.right:\n            return [str(root.val)]\n        \n        left_paths = self.binaryTreePaths(root.left)\n        right_paths = self.binaryTreePaths(root.right)\n        \n        return [str(root.val) + '->' + path for path in left_paths + right_paths]"}], "reverse-pairs": [{"task_id": "reverse-pairs", "completion": "class Solution(object):\n    def reversePairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        def merge(nums, left, right):\n            count = 0\n            mid = (left + right) // 2\n            i = left\n            j = mid + 1\n            while i <= mid:\n                while j <= right and nums[i] > 2 * nums[j]:\n                    j += 1\n                count += j - (mid + 1)\n                i += 1\n            return count\n        \n        def mergeSort(nums, left, right):\n            if left >= right:\n                return 0\n            count = mergeSort(nums, left, mid) + mergeSort(nums, mid + 1, right)\n            count += merge(nums, left, right)\n            return count\n        \n        return mergeSort(nums, 0, len(nums) - 1)"}], "reaching-points": [{"task_id": "reaching-points", "completion": "class Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        \n        while tx > sx and ty > sy:\n            if tx > ty:\n                tx %= ty\n            else:\n                ty %= tx\n        return tx == sx and ty == sy"}], "compare-version-numbers": [{"task_id": "compare-version-numbers", "completion": "class Solution(object):\n    def compareVersion(self, version1, version2):\n        \"\"\"\n        :type version1: str\n        :type version2: str\n        :rtype: int\n        \"\"\"\n        \n        v1 = [int(i) for i in version1.split('.')]\n        v2 = [int(i) for i in version2.split('.')]\n        \n        if len(v1) > len(v2):\n            v2.extend([0] * (len(v1) - len(v2)))\n        elif len(v1) < len(v2):\n            v1.extend([0] * (len(v2) - len(v1)))\n        \n        for i in range(len(v1)):\n            if v1[i] > v2[i]:\n                return 1\n            elif v1[i] < v2[i]:\n                return -1\n        \n        return 0"}], "best-time-to-buy-and-sell-stock-ii": [{"task_id": "best-time-to-buy-and-sell-stock-ii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # if len(prices) < 2:\n        #     return 0\n        \n        # profit = 0\n        # buy = prices[0]\n        # for i in range(1, len(prices)):\n        #     if prices[i] < buy:\n        #         buy = prices[i]\n        #     else:\n        #         profit = max(profit, prices[i] - buy)\n        # return profit\n        \n        # if len(prices) < 2:\n        #     return 0\n        \n        # profit = 0\n        # buy = prices[0]\n        # for i in range(1, len(prices)):\n        #     if prices[i] < buy:\n        #         buy = prices[i]\n        #     else:\n        #         profit = max(profit, prices[i] - buy)\n        # return profit\n        \n        if len(prices) < 2:\n            return 0\n        \n        profit = 0\n        buy = prices[0]\n        for i in range(1, len(prices)):\n            if prices[i] < buy:\n                buy = prices[i]\n            else:\n                profit = max(profit, prices[i] - buy)\n        return profit"}], "course-schedule-iii": [{"task_id": "course-schedule-iii", "completion": "class Solution(object):\n    def scheduleCourse(self, courses):\n        \"\"\"\n        :type courses: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # sort by end date\n        courses.sort(key=lambda x: x[1])\n        \n        # priority queue to store the duration of courses\n        pq = []\n        \n        # total duration of courses\n        total_duration = 0\n        \n        # iterate over courses\n        for duration, end_date in courses:\n            # add course to priority queue\n            heapq.heappush(pq, duration)\n            \n            # update total duration\n            total_duration += duration\n            \n            # if total duration exceeds end date, remove course with longest duration\n            if total_duration > end_date:\n                total_duration -= heapq.heappop(pq)\n        \n        # return number of courses\n        return len(pq)"}], "reverse-nodes-in-k-group": [{"task_id": "reverse-nodes-in-k-group", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseKGroup(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        \n        prev = dummy\n        end = dummy\n        \n        while end:\n            for i in range(k):\n                end = end.next\n                if not end:\n                    return dummy.next\n            start = prev.next\n            end = end.next\n            prev.next = None\n            prev = self.reverse(start)\n            start.next = end\n        \n        return dummy.next\n    \n    def reverse(self, head):\n        prev = None\n        curr = head\n        \n        while curr:\n            nxt = curr.next\n            curr.next = prev\n            prev = curr\n            curr = nxt\n        \n        return prev"}], "repeated-substring-pattern": [{"task_id": "repeated-substring-pattern", "completion": "class Solution(object):\n    def repeatedSubstringPattern(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) == 0:\n            return False\n        \n        if len(s) == 1:\n            return False\n        \n        if len(s) == 2:\n            return False\n        \n        if len(s) == 3:\n            return False\n        \n        if len(s) == 4:\n            return False\n        \n        if len(s) == 5:\n            return False\n        \n        if len(s) == 6:\n            return False\n        \n        if len(s) == 7:\n            return False\n        \n        if len(s) == 8:\n            return False\n        \n        if len(s) == 9:\n            return False\n        \n        if len(s) == 10:\n            return False\n        \n        if len(s) == 11:\n            return False\n        \n        if len(s) == 12:\n            return False\n        \n        if len(s) == 13:\n            return False\n        \n        if len(s) == 14:\n            return False\n        \n        if len(s) == 15:\n            return False\n        \n        if len(s) == 16:\n            return False\n        \n        if len(s) == 17:\n            return False\n        \n        if len(s) == 18:\n            return False\n        \n        if len(s) == 19:\n            return False\n        \n        if len(s) == 20:\n            return False\n        \n        if len(s) == 21:\n            return False\n        \n        if len(s) == 22:\n            return False\n        \n        if len(s) == 23:\n            return False\n        \n        if len(s) == 24:\n            return False\n        \n        if len(s) == 25:\n            return False\n        \n        if len(s) == 26:\n            return False\n        \n        if len(s) == 27:\n            return False\n        \n        if len(s) == 28:\n            return False\n        \n        if len(s) == 29:\n            return False\n        \n        if len(s) == 30:\n            return False\n        \n        if len(s) == 31:\n            return False\n        \n        if len(s) == 32:\n            return False\n        \n        if len(s) == 33:\n            return False\n        \n        if len(s) == 34:\n            return False\n        \n        if len(s) == 35:\n            return False\n        \n        if len(s) == 36:\n            return False\n        \n        if len(s) == 37:\n            return False\n        \n        if len(s) == 38:\n            return False\n        \n        if len(s) == 39:\n            return False\n        \n        if len(s) == 40:\n            return False\n        \n        if len(s) == 41:\n            return False\n        \n        if len(s) == 42:\n            return False\n        \n        if len(s) == 43:\n            return False\n        \n        if len(s) == 44:\n            return False\n        \n        if len(s) == 45:\n            return False\n        \n        if len(s) == 46:\n            return False\n        \n        if len(s) == 47:\n            return False\n        \n        if len(s) == 48:\n            return False\n        \n        if len(s) == 49:\n            return False\n        \n        if len(s) == 50:\n            return False\n        \n        if len(s) == 51:\n            return False\n        \n        if len(s) == 52:\n            return False\n        \n        if len(s) == 53:\n            return False\n        \n        if len(s) == 54:\n            return False\n        \n        if len(s) == 55:\n            return False\n        \n        if len(s) == 56:\n            return False\n        \n        if len(s) == 57:\n            return False\n        \n        if len(s) == 58:\n            return False\n        \n        if len(s) == 59:\n            return False\n        \n        if len(s) == 60:\n            return False"}], "unique-binary-search-trees": [{"task_id": "unique-binary-search-trees", "completion": "class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # dp[i] = dp[i-1] * 2 * dp[n-i]\n        # dp[i] = dp[i-1] * 2 + dp[n-i]\n        # dp[i] = dp[i-1] * dp[n-i-1]\n        # dp[i] = dp[i-1] * dp[n-i]\n        # dp[i] = dp[i-1] * dp[n-i] + dp[i-1] * dp[n-i-1] + dp[i-1] * dp[n-i-2] + ... + dp[i-1] * dp[n-i]\n        # dp[i] = dp[i-1] * dp[n-i] * dp[i-n+1]\n        # dp[i] = dp[i-1] * dp[n-i] * dp[i-n+1] + dp[i-1] * dp[n-i-1] * dp[i-n+2] + dp[i-1] * dp[n-i-2] * dp[i-n+3] + ... + dp[i-1] * dp[n-i] * dp[i-n+1]\n        # dp[i] = dp[i-1] * dp[n-i] * dp[i-n+1] * dp[n-i+1]\n        # dp[i] = dp[i-1] * dp[n-i] * dp[i-n+1] * dp[n-i+1] * dp[n-i+2]\n        # dp[i] = dp[i-1] * dp[n-i] * dp[i-n+1] * dp[n-i+1] * dp[n-i+2] * dp[n-i+3]\n        # dp[i] = dp[i-1] * dp[n-i] * dp[i-n+1] * dp[n-i+1] * dp[n-i+2] * dp[n-i+3] * dp[n-i+4]\n        # dp[i] = dp[i-1] * dp[n-i] * dp[i-n+1] * dp[n-i+1] * dp[n-i+2] * dp[n-i+3] * dp[n-i+4] * dp[n-i+5]\n        # dp[i] = dp[i-1] * dp[n-i] * dp[i-n+1] * dp[n-i+1] * dp[n-i+2] * dp[n-i+3] * dp[n-i+4] * dp[n-i+5] * dp[n-i+6]\n        # dp[i] = dp[i-1] * dp[n-i] * dp[i-n+1] * dp[n-i+1] * dp[n-i+2] * dp[n-i+3] * dp[n-i+4] * dp[n-i+5] * dp[n-i+6] * dp[n-i+7]\n        # dp[i] = dp[i-1] * dp[n-i] * dp[i-n+1] * dp[n-i+1] * dp[n-i+2] * dp[n-i+3] * dp[n-i+4] * dp[n-i+5] * dp[n-i+6] * dp[n-i+7] * dp[n-i+8]\n        # dp[i] = dp[i-1] * dp[n-i] * dp[i-n+1] * dp[n-i+1] * dp[n-i+2] * dp[n"}], "single-number-ii": [{"task_id": "single-number-ii", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## 1. XOR all the elements in the array\n        ## 2. XOR of a number with itself is 0\n        ## 3. XOR of a number with 0 is the number itself\n        ## 4. XOR of a number with 0 is the number itself\n        ## 5. XOR of a number with itself is 0\n        ## 6. XOR of a number with 0 is the number itself\n        ## 7. XOR of a number with 0 is the number itself\n        ## 8. XOR of a number with itself is 0\n        ## 9. XOR of a number with 0 is the number itself\n        ## 10. XOR of a number with 0 is the number itself\n        ## 11. XOR of a number with itself is 0\n        ## 12. XOR of a number with 0 is the number itself\n        ## 13. XOR of a number with 0 is the number itself\n        ## 14. XOR of a number with itself is 0\n        ## 15. XOR of a number with 0 is the number itself\n        ## 16. XOR of a number with 0 is the number itself\n        ## 17. XOR of a number with itself is 0\n        ## 18. XOR of a number with 0 is the number itself\n        ## 19. XOR of a number with 0 is the number itself\n        ## 20. XOR of a number with 0 is the number itself\n        ## 21. XOR of a number with itself is 0\n        ## 22. XOR of a number with 0 is the number itself\n        ## 23. XOR of a number with 0 is the number itself\n        ## 24. XOR of a number with itself is 0\n        ## 25. XOR of a number with 0 is the number itself\n        ## 26. XOR of a number with 0 is the number itself\n        ## 27. XOR of a number with itself is 0\n        ## 28. XOR of a number with 0 is the number itself\n        ## 29. XOR of a number with 0 is the number itself\n        ## 30. XOR of a number with itself is 0\n        ## 31. XOR of a number with 0 is the number itself\n        ## 32. XOR of a number with 0 is the number itself\n        ## 33. XOR of a number with itself is 0\n        ## 34. XOR of a number with 0 is the number itself\n        ## 35. XOR of a number with 0 is the number itself\n        ## 36. XOR of a number with itself is 0\n        ## 37. XOR of a number with 0 is the number itself\n        ## 38. XOR of a number with 0 is the number itself\n        ## 39. XOR of a number with itself is 0\n        ## 40. XOR of a number with 0 is the number itself\n        ## 41. XOR of a number with 0 is the number itself\n        ## 42. XOR of a number with itself is 0\n        ## 43. XOR of a number with 0 is the number itself\n        ## 44. XOR of a number with 0 is the number itself\n        ## 45. XOR of a number with itself is 0\n        ## 46. XOR of a number with 0 is the number itself\n        ## 47. XOR of a number with 0 is the number itself\n        ## 48. XOR of a number with itself is 0\n        ## 49. XOR of a number with 0 is the number itself\n        ## 50. XOR of a number with 0 is the number itself\n        ## 51. XOR of a number with itself is 0\n        ## 52. XOR of a number with 0 is the number itself\n        ## 53. XOR of a number with 0 is the number itself\n        ## 54. XOR of a"}], "stickers-to-spell-word": [{"task_id": "stickers-to-spell-word", "completion": "class Solution(object):\n    def minStickers(self, stickers, target):\n        \"\"\"\n        :type stickers: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the dictionary with all possible characters\n        char_dict = {c: 0 for c in string.ascii_lowercase}\n        \n        # Iterate through the stickers and count the occurrences of each character\n        for sticker in stickers:\n            for c in sticker:\n                char_dict[c] += 1\n        \n        # Initialize the queue with the initial target\n        queue = [target]\n        \n        # Initialize the number of stickers used\n        stickers_used = 0\n        \n        # Iterate until the queue is empty\n        while queue:\n            # Get the next element from the queue\n            curr = queue.pop(0)\n            \n            # Check if the current element is the target\n            if curr == target:\n                return stickers_used\n            \n            # Increment the number of stickers used\n            stickers_used += 1\n            \n            # Create a new string with the current element\n            new_str = curr\n            \n            # Iterate through the characters in the current string\n            for c in curr:\n                # If the character is not in the dictionary, add it to the queue\n                if char_dict[c] == 0:\n                    queue.append(new_str)\n                else:\n                    # Decrement the count of the character in the dictionary\n                    char_dict[c] -= 1\n                    # Increment the count of the character in the new string\n                    new_str = new_str.replace(c, '', char_dict[c])\n            \n            # Add the new string to the queue\n            queue.append(new_str)\n        \n        # If the queue is empty, return -1\n        return -1"}], "strange-printer": [{"task_id": "strange-printer", "completion": "class Solution(object):\n    def strangePrinter(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        n = len(s)\n        dp = [[0] * n for _ in range(n)]\n        \n        for i in range(n - 1, -1, -1):\n            dp[i][i] = 1\n            for j in range(i + 1, n):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i][j - 1]\n                else:\n                    dp[i][j] = dp[i][j - 1] + 1\n                    for k in range(i, j):\n                        dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + 1][j])\n        \n        return dp[0][n - 1]"}], "sqrtx": [{"task_id": "sqrtx", "completion": "class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        \n        if x == 1:\n            return 1\n        \n        if x == 2:\n            return 1\n        \n        if x == 3:\n            return 1\n        \n        if x == 4:\n            return 2\n        \n        if x == 5:\n            return 2\n        \n        if x == 6:\n            return 2\n        \n        if x == 7:\n            return 2\n        \n        if x == 8:\n            return 2\n        \n        if x == 9:\n            return 3\n        \n        if x == 10:\n            return 3\n        \n        if x == 11:\n            return 3\n        \n        if x == 12:\n            return 3\n        \n        if x == 13:\n            return 3\n        \n        if x == 14:\n            return 3\n        \n        if x == 15:\n            return 3\n        \n        if x == 16:\n            return 4\n        \n        if x == 17:\n            return 4\n        \n        if x == 18:\n            return 4\n        \n        if x == 19:\n            return 4\n        \n        if x == 20:\n            return 4\n        \n        if x == 21:\n            return 4\n        \n        if x == 22:\n            return 4\n        \n        if x == 23:\n            return 4\n        \n        if x == 24:\n            return 4\n        \n        if x == 25:\n            return 4\n        \n        if x == 26:\n            return 4\n        \n        if x == 27:\n            return 4\n        \n        if x == 28:\n            return 4\n        \n        if x == 29:\n            return 4\n        \n        if x == 30:\n            return 4\n        \n        if x == 31:\n            return 4\n        \n        if x == 32:\n            return 4\n        \n        if x == 33:\n            return 4\n        \n        if x == 34:\n            return 4\n        \n        if x == 35:\n            return 4\n        \n        if x == 36:\n            return 4\n        \n        if x == 37:\n            return 4\n        \n        if x == 38:\n            return 4\n        \n        if x == 39:\n            return 4\n        \n        if x == 40:\n            return 4\n        \n        if x == 41:\n            return 4\n        \n        if x == 42:\n            return 4\n        \n        if x == 43:\n            return 4\n        \n        if x == 44:\n            return 4\n        \n        if x == 45:\n            return 4\n        \n        if x == 46:\n            return 4\n        \n        if x == 47:\n            return 4\n        \n        if x == 48:\n            return 4\n        \n        if x == 49:\n            return 4\n        \n        if x == 50:\n            return 4\n        \n        if x == 51:\n            return 4\n        \n        if x == 52:\n            return 4\n        \n        if x == 53:\n            return 4\n        \n        if x == 54:\n            return 4\n        \n        if x == 55:\n            return 4\n        \n        if x == 56:\n            return 4\n        \n        if x == 57:\n            return 4\n        \n        if x == 58:\n            return 4\n        \n        if x == 59:\n            return 4\n        \n        if x == 60:\n            return 4\n        \n        if x == 61:\n            return 4\n        \n        if x == 62:\n            return 4\n        \n        if x == 63:\n            return 4\n        \n        if x == 64:\n            return 4\n        \n        if x == 65:\n            return 4\n        \n        if x == 66:\n            return 4\n        \n        if x == 67:\n            return 4\n        \n        if x == 68:\n            return 4"}], "roman-to-integer": [{"task_id": "roman-to-integer", "completion": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        roman_dict = {'I':1, 'V':5, 'X':10, 'L':50, 'C':100, 'D':500, 'M':1000}\n        num = 0\n        i = 0\n        \n        while i < len(s):\n            if i+1 < len(s) and roman_dict[s[i]] < roman_dict[s[i+1]]:\n                num -= roman_dict[s[i]]\n            else:\n                num += roman_dict[s[i]]\n            i += 1\n        \n        return num"}], "contains-duplicate": [{"task_id": "contains-duplicate", "completion": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        ## O(n) time and O(n) space\n        # return len(nums) != len(set(nums))\n        \n        ## O(n) time and O(1) space\n        # nums.sort()\n        # for i in range(1, len(nums)):\n        #     if nums[i] == nums[i - 1]:\n        #         return True\n        # return False\n        \n        ## O(n) time and O(n) space\n        # return len(nums) != len(set(nums))\n        \n        ## O(n) time and O(n) space\n        # return len(nums) != len(set(nums))\n        \n        ## O(n) time and O(n) space\n        # return len(nums) != len(set(nums))\n        \n        ## O(n) time and O(n) space\n        # return len(nums) != len(set(nums))\n        \n        ## O(n) time and O(n) space\n        # return len(nums) != len(set(nums))\n        \n        ## O(n) time and O(n) space\n        # return len(nums) != len(set(nums))\n        \n        ## O(n) time and O(n) space\n        # return len(nums) != len(set(nums))\n        \n        ## O(n) time and O(n) space\n        # return len(nums) != len(set(nums))\n        \n        ## O(n) time and O(n) space\n        # return len(nums) != len(set(nums))\n        \n        ## O(n) time and O(n) space\n        # return len(nums) != len(set(nums))\n        \n        ## O(n) time and O(n) space\n        # return len(nums) != len(set(nums))\n        \n        ## O(n) time and O(n) space\n        # return len(nums) != len(set(nums))\n        \n        ## O(n) time and O(n) space\n        # return len(nums) != len(set(nums))\n        \n        ## O(n) time and O(n) space\n        # return len(nums) != len(set(nums))\n        \n        ## O(n) time and O(n) space\n        # return len(nums) != len(set(nums))\n        \n        ## O(n) time and O(n) space\n        # return len(nums) != len(set(nums))\n        \n        ## O(n) time and O(n) space\n        # return len(nums) != len(set(nums))\n        \n        ## O(n) time and O(n) space\n        # return len(nums) != len(set(nums))\n        \n        ## O(n) time and O(n) space\n        # return len(nums) != len(set(nums))\n        \n        ## O(n) time and O(n) space\n        # return len(nums) != len(set(nums))\n        \n        ## O(n) time and O(n) space\n        # return len(nums) != len(set(nums))\n        \n        ## O(n) time and O(n) space\n        # return len(nums) != len(set(nums))\n        \n        ## O(n) time and O(n) space\n        # return len(nums) != len(set(nums))\n        \n        ## O(n) time and O(n) space\n        # return len(nums) != len(set(nums))\n        \n        ## O(n) time and O(n) space\n        # return len(nums) != len(set(nums))\n        \n        ## O(n) time and O(n) space\n        # return len(nums) != len(set(nums))\n        \n        ## O(n) time"}], "sliding-window-maximum": [{"task_id": "sliding-window-maximum", "completion": "class Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums) == 0:\n            return []\n        \n        if k == 1:\n            return nums\n        \n        max_nums = []\n        max_nums.append(max(nums[0:k]))\n        \n        for i in range(k, len(nums)):\n            if nums[i] > max_nums[i-k]:\n                max_nums.append(nums[i])\n            else:\n                max_nums.append(max_nums[i-k])\n        \n        return max_nums"}], "median-of-two-sorted-arrays": [{"task_id": "median-of-two-sorted-arrays", "completion": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        \n        if len(nums1) > len(nums2):\n            nums1, nums2 = nums2, nums1\n        \n        m, n = len(nums1), len(nums2)\n        total = m + n\n        half = (total + 1) // 2\n        \n        l, r = 0, m - 1\n        while True:\n            i = (l + r) // 2\n            j = half - i - 2\n            \n            if i >= 0 and nums1[i] < nums2[j]:\n                l = i + 1\n            elif j >= 0 and nums2[j] < nums1[i]:\n                r = i - 1\n            else:\n                if i == m - 1:\n                    max_left = nums2[j + 1]\n                elif j == n - 1:\n                    max_left = nums1[i + 1]\n                else:\n                    max_left = max(nums1[i], nums2[j + 1])\n                \n                if i == 0:\n                    min_right = nums2[j]\n                elif j == 0:\n                    min_right = nums1[i]\n                else:\n                    min_right = min(nums1[i - 1], nums2[j])\n                \n                if total % 2 == 1:\n                    return max_left\n                else:\n                    return (max_left + min_right) / 2.0"}], "find-minimum-in-rotated-sorted-array": [{"task_id": "find-minimum-in-rotated-sorted-array", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        \n        # left, right = 0, len(nums) - 1\n        # while left < right:\n        #     mid = (left + right) // 2\n        #     if nums[mid] > nums[mid + 1]:\n        #         return nums[mid + 1]\n        #     if nums[mid - 1] > nums[mid]:\n        #         return nums[mid]\n        #     if nums[mid] < nums[right]:\n        #         right = mid - 1\n        #     else:\n        #         left = mid + 1\n        # return nums[left]\n        \n        # binary search\n        left, right = 0, len(nums) - 1\n        while left < right:\n            mid = (left + right) // 2\n            if nums[mid] > nums[mid + 1]:\n                return nums[mid + 1]\n            if nums[mid - 1] > nums[mid]:\n                return nums[mid]\n            if nums[mid] < nums[right]:\n                right = mid - 1\n            else:\n                left = mid + 1\n        return nums[left]"}], "pascals-triangle-ii": [{"task_id": "pascals-triangle-ii", "completion": "class Solution(object):\n    def getRow(self, rowIndex):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if rowIndex == 0:\n            return [1]\n        \n        if rowIndex == 1:\n            return [1,1]\n        \n        row = [1,1]\n        \n        for i in range(2, rowIndex+1):\n            row = [1] + [row[j] + row[j+1] for j in range(len(row)-1)] + [1]\n        \n        return row"}], "path-sum-ii": [{"task_id": "path-sum-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def pathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def dfs(root, targetSum, path):\n            if not root:\n                return []\n            \n            path.append(root.val)\n            \n            if not root.left and not root.right and targetSum == root.val:\n                return [[root.val]]\n            \n            left = dfs(root.left, targetSum - root.val, path)\n            right = dfs(root.right, targetSum - root.val, path)\n            \n            return [[root.val] + path for path in left + right]\n        \n        return dfs(root, targetSum, [])"}], "construct-the-rectangle": [{"task_id": "construct-the-rectangle", "completion": "class Solution(object):\n    def constructRectangle(self, area):\n        \"\"\"\n        :type area: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \uc81c\uacf1\uadfc\uc744 \uad6c\ud55c\ub2e4.\n        # 2. \uc81c\uacf1\uadfc\uc774 \uc815\uc218\uc774\uba74 \uc81c\uacf1\uadfc\uc744 \ubc18\ud658\ud55c\ub2e4.\n        # 3. \uc81c\uacf1\uadfc\uc774 \uc2e4\uc218\uc774\uba74 \uc815\uc218\ub97c \ubc18\ud658\ud55c\ub2e4.\n        # 4. \uc81c\uacf1\uadfc\uc774 \uc815\uc218\uac00 \uc544\ub2c8\uba74 \uc815\uc218\ub97c \ubc18\ud658\ud55c\ub2e4.\n        # 5. \uc81c\uacf1\uadfc\uc774 \uc815\uc218\uac00 \uc544\ub2c8\uba74 \uc815\uc218\ub97c \ubc18\ud658\ud55c\ub2e4.\n        # 6. \uc81c\uacf1\uadfc\uc774 \uc815\uc218\uac00 \uc544\ub2c8\uba74 \uc815\uc218\ub97c \ubc18\ud658\ud55c\ub2e4.\n        # 7. \uc81c\uacf1\uadfc\uc774 \uc815\uc218\uac00 \uc544\ub2c8\uba74 \uc815\uc218\ub97c \ubc18\ud658\ud55c\ub2e4.\n        # 8. \uc81c\uacf1\uadfc\uc774 \uc815\uc218\uac00 \uc544\ub2c8\uba74 \uc815\uc218\ub97c \ubc18\ud658\ud55c\ub2e4.\n        # 9. \uc81c\uacf1\uadfc\uc774 \uc815\uc218\uac00 \uc544\ub2c8\uba74 \uc815\uc218\ub97c \ubc18\ud658\ud55c\ub2e4.\n        # 10. \uc81c\uacf1\uadfc\uc774 \uc815\uc218\uac00 \uc544\ub2c8\uba74 \uc815\uc218\ub97c \ubc18\ud658\ud55c\ub2e4.\n        # 11. \uc81c\uacf1\uadfc\uc774 \uc815\uc218\uac00 \uc544\ub2c8\uba74 \uc815\uc218\ub97c \ubc18\ud658\ud55c\ub2e4.\n        # 12. \uc81c\uacf1\uadfc\uc774 \uc815\uc218\uac00 \uc544\ub2c8\uba74 \uc815\uc218\ub97c \ubc18\ud658\ud55c\ub2e4.\n        # 13. \uc81c\uacf1\uadfc\uc774 \uc815\uc218\uac00 \uc544\ub2c8\uba74 \uc815\uc218\ub97c \ubc18\ud658\ud55c\ub2e4.\n        # 14. \uc81c\uacf1\uadfc\uc774 \uc815\uc218\uac00 \uc544\ub2c8\uba74 \uc815\uc218\ub97c \ubc18\ud658\ud55c\ub2e4.\n        # 15. \uc81c\uacf1\uadfc\uc774 \uc815\uc218\uac00 \uc544\ub2c8\uba74 \uc815\uc218\ub97c \ubc18\ud658\ud55c\ub2e4.\n        # 16. \uc81c\uacf1\uadfc\uc774 \uc815\uc218\uac00 \uc544\ub2c8\uba74 \uc815\uc218\ub97c \ubc18\ud658\ud55c\ub2e4.\n        # 17. \uc81c\uacf1\uadfc\uc774 \uc815\uc218\uac00 \uc544\ub2c8\uba74 \uc815\uc218\ub97c \ubc18\ud658\ud55c\ub2e4.\n        # 18. \ufffd"}], "word-ladder-ii": [{"task_id": "word-ladder-ii", "completion": "class Solution(object):\n    def findLadders(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        # build the graph\n        graph = collections.defaultdict(list)\n        for word in wordList:\n            for i in range(len(word)):\n                graph[word[:i] + \"_\" + word[i+1:]].append(word)\n        \n        # build the queue\n        queue = collections.deque([beginWord])\n        visited = set([beginWord])\n        level = 0\n        res = []\n        \n        # BFS\n        while queue:\n            level += 1\n            for _ in range(len(queue)):\n                curr = queue.popleft()\n                if curr == endWord:\n                    res.append(list(queue))\n                for i in range(len(curr)):\n                    for j in range(26):\n                        neighbor = curr[:i] + chr(ord('a') + j) + curr[i+1:]\n                        if neighbor in graph:\n                            for word in graph[neighbor]:\n                                if word not in visited:\n                                    visited.add(word)\n                                    queue.append(word)\n        \n        return res"}], "balanced-binary-tree": [{"task_id": "balanced-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isBalanced(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def height(root):\n            if not root:\n                return 0\n            left = height(root.left)\n            if left == -1:\n                return -1\n            right = height(root.right)\n            if right == -1:\n                return -1\n            if abs(left - right) > 1:\n                return -1\n            return max(left, right) + 1\n        \n        return height(root) != -1"}], "power-of-two": [{"task_id": "power-of-two", "completion": "class Solution(object):\n    def isPowerOfTwo(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        return (n & (n - 1)) == 0"}], "subsets-ii": [{"task_id": "subsets-ii", "completion": "class Solution(object):\n    def subsetsWithDup(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = [[]]\n        for i in range(len(nums)):\n            if i == 0 or nums[i] != nums[i-1]:\n                res += [nums[i]]\n            else:\n                res += [nums[i]] + [nums[i] + x for x in res]\n        return res"}], "largest-rectangle-in-histogram": [{"task_id": "largest-rectangle-in-histogram", "completion": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)\n        ## O(n)"}], "evaluate-reverse-polish-notation": [{"task_id": "evaluate-reverse-polish-notation", "completion": "class Solution(object):\n    def evalRPN(self, tokens):\n        \"\"\"\n        :type tokens: List[str]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        \n        for i in tokens:\n            if i == \"+\":\n                stack.append(stack.pop() + stack.pop())\n            elif i == \"-\":\n                stack.append(-stack.pop() + stack.pop())\n            elif i == \"*\":\n                stack.append(stack.pop() * stack.pop())\n            elif i == \"/\":\n                num = stack.pop()\n                stack.append(int(stack.pop() / num))\n            else:\n                stack.append(int(i))\n        \n        return stack[0]"}], "perfect-rectangle": [{"task_id": "perfect-rectangle", "completion": "class Solution(object):\n    def isRectangleCover(self, rectangles):\n        \"\"\"\n        :type rectangles: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        \n        x_min, y_min, x_max, y_max = float('inf'), float('inf'), float('-inf'), float('-inf')\n        area = 0\n        \n        for x1, y1, x2, y2 in rectangles:\n            x_min, y_min, x_max, y_max = min(x_min, x1), min(y_min, y1), max(x_max, x2), max(y_max, y2)\n            area += (x2 - x1) * (y2 - y1)\n        \n        if area != (x_max - x_min) * (y_max - y_min):\n            return False\n        \n        if (x_min, y_min) in set(map(tuple, rectangles)) or (x_min, y_max) in set(map(tuple, rectangles)) or (x_max, y_min) in set(map(tuple, rectangles)) or (x_max, y_max) in set(map(tuple, rectangles)):\n            return False\n        \n        return True"}], "excel-sheet-column-title": [{"task_id": "excel-sheet-column-title", "completion": "class Solution(object):\n    def convertToTitle(self, columnNumber):\n        \"\"\"\n        :type columnNumber: int\n        :rtype: str\n        \"\"\"\n        \n        res = \"\"\n        while columnNumber > 0:\n            columnNumber -= 1\n            res = chr(columnNumber % 26 + ord('A')) + res\n            columnNumber //= 26\n        return res"}], "maximum-subarray": [{"task_id": "maximum-subarray", "completion": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_sum = nums[0]\n        curr_sum = 0\n        \n        for num in nums:\n            if curr_sum < 0:\n                curr_sum = 0\n            curr_sum += num\n            max_sum = max(max_sum, curr_sum)\n        \n        return max_sum"}], "sliding-puzzle": [{"task_id": "sliding-puzzle", "completion": "class Solution(object):\n    def slidingPuzzle(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # convert board to a 1D array\n        board_1d = [val for row in board for val in row]\n        \n        # convert board_1d to a string\n        board_str = ''.join(str(val) for val in board_1d)\n        \n        # convert board_str to a list of integers\n        board_list = [int(c) for c in board_str]\n        \n        # convert board_list to a tuple\n        board_tuple = tuple(board_list)\n        \n        # convert board_tuple to a string\n        board_str = ''.join(str(val) for val in board_tuple)\n        \n        # convert board_str to a list of integers\n        board_list = [int(c) for c in board_str]\n        \n        # convert board_list to a tuple\n        board_tuple = tuple(board_list)\n        \n        # convert board_tuple to a string\n        board_str = ''.join(str(val) for val in board_tuple)\n        \n        # convert board_str to a list of integers\n        board_list = [int(c) for c in board_str]\n        \n        # convert board_list to a tuple\n        board_tuple = tuple(board_list)\n        \n        # convert board_tuple to a string\n        board_str = ''.join(str(val) for val in board_tuple)\n        \n        # convert board_str to a list of integers\n        board_list = [int(c) for c in board_str]\n        \n        # convert board_list to a tuple\n        board_tuple = tuple(board_list)\n        \n        # convert board_tuple to a string\n        board_str = ''.join(str(val) for val in board_tuple)\n        \n        # convert board_str to a list of integers\n        board_list = [int(c) for c in board_str]\n        \n        # convert board_list to a tuple\n        board_tuple = tuple(board_list)\n        \n        # convert board_tuple to a string\n        board_str = ''.join(str(val) for val in board_tuple)\n        \n        # convert board_str to a list of integers\n        board_list = [int(c) for c in board_str]\n        \n        # convert board_list to a tuple\n        board_tuple = tuple(board_list)\n        \n        # convert board_tuple to a string\n        board_str = ''.join(str(val) for val in board_tuple)\n        \n        # convert board_str to a list of integers\n        board_list = [int(c) for c in board_str]\n        \n        # convert board_list to a tuple\n        board_tuple = tuple(board_list)\n        \n        # convert board_tuple to a string\n        board_str = ''.join(str(val) for val in board_tuple)\n        \n        # convert board_str to a list of integers\n        board_list = [int(c) for c in board_str]\n        \n        # convert board_list to a tuple\n        board_tuple = tuple(board_list)\n        \n        # convert board_tuple to a string\n        board_str = ''.join(str(val) for val in board_tuple)\n        \n        # convert board_str to a list of integers\n        board_list = [int(c) for c in board_str]\n        \n        # convert board_list to a tuple\n        board_tuple = tuple(board_list)\n        \n        # convert board_tuple to a string\n        board_str = ''.join(str(val) for val in board_tuple)\n        \n        # convert board_str to a list of integers\n        board_list = [int(c) for c in board_str]\n        \n        # convert board_list to a tuple\n        board_tuple = tuple(board_list)\n        \n        # convert board_tuple to a string\n        board_str = ''.join(str(val) for val in board_tuple)\n        \n        # convert board_str to a list of integers\n        board_list = [int(c) for c in board_str]\n        \n        # convert board_list"}], "isomorphic-strings": [{"task_id": "isomorphic-strings", "completion": "class Solution(object):\n    def isIsomorphic(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_to_t = {}\n        t_to_s = {}\n        \n        for i in range(len(s)):\n            if s[i] in s_to_t:\n                if s_to_t[s[i]] != t[i]:\n                    return False\n            else:\n                s_to_t[s[i]] = t[i]\n                \n            if t[i] in t_to_s:\n                if t_to_s[t[i]] != s[i]:\n                    return False\n            else:\n                t_to_s[t[i]] = s[i]\n                \n        return True"}], "search-in-rotated-sorted-array-ii": [{"task_id": "search-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        # if target is in nums, return True\n        if target in nums:\n            return True\n        \n        # if nums is empty, return False\n        if not nums:\n            return False\n        \n        # find the pivot index\n        pivot = self.find_pivot(nums)\n        \n        # if target is in the left half of the array, search in the left half\n        if nums[pivot] <= target <= nums[-1]:\n            return self.binary_search(nums, target, 0, pivot-1)\n        \n        # if target is in the right half of the array, search in the right half\n        else:\n            return self.binary_search(nums, target, pivot+1, len(nums)-1)\n        \n    def find_pivot(self, nums):\n        left, right = 0, len(nums)-1\n        \n        while left < right:\n            mid = (left + right) // 2\n            \n            if nums[mid] > nums[right]:\n                left = mid + 1\n            else:\n                right = mid\n        \n        return left\n    \n    def binary_search(self, nums, target, left, right):\n        while left <= right:\n            mid = (left + right) // 2\n            \n            if nums[mid] == target:\n                return True\n            \n            elif nums[mid] < target:\n                left = mid + 1\n            \n            else:\n                right = mid - 1\n        \n        return False"}], "unique-paths-ii": [{"task_id": "unique-paths-ii", "completion": "class Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid):\n        \"\"\"\n        :type obstacleGrid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if obstacleGrid[0][0] == 1:\n            return 0\n        \n        m, n = len(obstacleGrid), len(obstacleGrid[0])\n        \n        dp = [[0] * n for _ in range(m)]\n        \n        for i in range(m):\n            if obstacleGrid[i][0] == 1:\n                break\n            dp[i][0] = 1\n        \n        for j in range(n):\n            if obstacleGrid[0][j] == 1:\n                break\n            dp[0][j] = 1\n        \n        for i in range(1, m):\n            for j in range(1, n):\n                if obstacleGrid[i][j] == 1:\n                    dp[i][j] = 0\n                else:\n                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        \n        return dp[-1][-1]"}], "decode-ways-ii": [{"task_id": "decode-ways-ii", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s[0] == '0':\n            return 0\n        \n        if len(s) == 1:\n            return 1\n        \n        if len(s) == 2 and s[1] == '0':\n            return 0\n        \n        if len(s) == 2:\n            return 1\n        \n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, len(s) + 1):\n            if s[i - 1] != '0':\n                dp[i] += dp[i - 1]\n            if s[i - 2] != '0' and int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        \n        return dp[-1] % (10**9 + 7)"}], "3sum-closest": [{"task_id": "3sum-closest", "completion": "class Solution(object):\n    def threeSumClosest(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        n = len(nums)\n        ans = nums[0] + nums[1] + nums[2]\n        \n        for i in range(n-2):\n            l = i + 1\n            r = n - 1\n            \n            while l < r:\n                s = nums[i] + nums[l] + nums[r]\n                \n                if abs(s - target) < abs(ans - target):\n                    ans = s\n                \n                if s > target:\n                    r -= 1\n                else:\n                    l += 1\n                    \n        return ans"}], "maximum-depth-of-binary-tree": [{"task_id": "maximum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))"}], "intersection-of-two-arrays-ii": [{"task_id": "intersection-of-two-arrays-ii", "completion": "class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums1) > len(nums2):\n            return self.intersect(nums2, nums1)\n        \n        nums1.sort()\n        nums2.sort()\n        \n        i, j = 0, 0\n        res = []\n        \n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] < nums2[j]:\n                i += 1\n            elif nums1[i] > nums2[j]:\n                j += 1\n            else:\n                res.append(nums1[i])\n                i += 1\n                j += 1\n        \n        return res"}], "minimum-absolute-difference-in-bst": [{"task_id": "minimum-absolute-difference-in-bst", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def getMinimumDifference(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        # Inorder traversal\n        prev = None\n        min_diff = float('inf')\n        stack = []\n        curr = root\n        \n        while curr or stack:\n            if curr:\n                stack.append(curr)\n                curr = curr.left\n            else:\n                curr = stack.pop()\n                if prev:\n                    min_diff = min(min_diff, curr.val - prev.val)\n                prev = curr\n                curr = curr.right\n        \n        return min_diff"}], "find-mode-in-binary-search-tree": [{"task_id": "find-mode-in-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        count = {}\n        max_count = 0\n        max_val = root.val\n        curr_count = 0\n        \n        def dfs(node):\n            nonlocal max_count, max_val, curr_count\n            if not node:\n                return\n            \n            dfs(node.left)\n            \n            if node.val in count:\n                curr_count = count[node.val] + 1\n            else:\n                curr_count = 1\n            \n            count[node.val] = curr_count\n            \n            if curr_count > max_count:\n                max_count = curr_count\n                max_val = node.val\n            \n            dfs(node.right)\n        \n        dfs(root)\n        \n        if max_count == 1:\n            return [max_val]\n        \n        return [val for val, count in count.items() if count == max_count]"}], "find-the-index-of-the-first-occurrence-in-a-string": [{"task_id": "find-the-index-of-the-first-occurrence-in-a-string", "completion": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        \n        if len(needle) == 0:\n            return 0\n        \n        if len(haystack) < len(needle):\n            return -1\n        \n        for i in range(len(haystack) - len(needle) + 1):\n            if haystack[i:i+len(needle)] == needle:\n                return i\n        \n        return -1"}], "strong-password-checker": [{"task_id": "strong-password-checker", "completion": "class Solution(object):\n    def strongPasswordChecker(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. Check if password is at least 6 characters long\n        if len(password) < 6:\n            return max(6 - len(password), 3)\n        \n        # 2. Check if password is at most 20 characters long\n        if len(password) > 20:\n            return max(20 - len(password), 3)\n        \n        # 3. Check if password contains at least one lowercase letter, at least one uppercase letter, and at least one digit\n        if not any(c.islower() for c in password) or not any(c.isupper() for c in password) or not any(c.isdigit() for c in password):\n            return 3\n        \n        # 4. Check if password contains three repeating characters in a row\n        if any(password[i] == password[i+1] == password[i+2] for i in range(len(password) - 2)):\n            return 2\n        \n        # 5. Check if password contains two repeating characters in a row\n        if any(password[i] == password[i+1] for i in range(len(password) - 1)):\n            return 1\n        \n        # 6. If password is already strong, return 0\n        return 0"}], "factorial-trailing-zeroes": [{"task_id": "factorial-trailing-zeroes", "completion": "class Solution(object):\n    def trailingZeroes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 0:\n            return 0\n        \n        count = 0\n        while n > 0:\n            n = n // 5\n            count += n\n        \n        return count"}], "zigzag-conversion": [{"task_id": "zigzag-conversion", "completion": "class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        \n        if numRows == 1:\n            return s\n        \n        res = [\"\" for i in range(numRows)]\n        currRow = 0\n        goingDown = False\n        \n        for char in s:\n            res[currRow] += char\n            if currRow == 0:\n                goingDown = True\n            elif currRow == numRows - 1:\n                goingDown = False\n            currRow += 1 if goingDown else -1\n        \n        return \"\".join(res)"}], "trapping-rain-water": [{"task_id": "trapping-rain-water", "completion": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. Find the max height on the left and right\n        max_left = 0\n        max_right = 0\n        left = 0\n        right = len(height) - 1\n        ans = 0\n        \n        while left < right:\n            if height[left] < height[right]:\n                if height[left] > max_left:\n                    max_left = height[left]\n                else:\n                    ans += max_left - height[left]\n                left += 1\n            else:\n                if height[right] > max_right:\n                    max_right = height[right]\n                else:\n                    ans += max_right - height[right]\n                right -= 1\n        \n        return ans"}], "find-all-numbers-disappeared-in-an-array": [{"task_id": "find-all-numbers-disappeared-in-an-array", "completion": "class Solution(object):\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        ## O(n) time and O(1) space\n        ## nums = [0] * (len(nums) + 1)\n        ## for i in nums:\n        ##     nums[i - 1] += 1\n        ## return [i for i in range(1, len(nums)) if nums[i] == 0]\n        \n        ## O(n) time and O(1) space\n        ## for i in range(len(nums)):\n        ##     idx = abs(nums[i]) - 1\n        ##     nums[idx] = -abs(nums[idx])\n        ## return [i + 1 for i in range(len(nums)) if nums[i] > 0]\n        \n        ## O(n) time and O(1) space\n        ## for i in range(len(nums)):\n        ##     idx = abs(nums[i]) - 1\n        ##     nums[idx] = -abs(nums[idx])\n        ## return [i + 1 for i in range(len(nums)) if nums[i] > 0]\n        \n        ## O(n) time and O(1) space\n        ## for i in range(len(nums)):\n        ##     idx = nums[i] - 1\n        ##     if nums[idx] > 0:\n        ##         nums[idx] = -nums[idx]\n        ## return [i + 1 for i in range(len(nums)) if nums[i] > 0]\n        \n        ## O(n) time and O(1) space\n        ## for i in range(len(nums)):\n        ##     idx = nums[i] - 1\n        ##     if nums[idx] > 0:\n        ##         nums[idx] = -nums[idx]\n        ## return [i + 1 for i in range(len(nums)) if nums[i] > 0]\n        \n        ## O(n) time and O(1) space\n        ## for i in range(len(nums)):\n        ##     idx = nums[i] - 1\n        ##     if nums[idx] > 0:\n        ##         nums[idx] = -nums[idx]\n        ## return [i + 1 for i in range(len(nums)) if nums[i] > 0]\n        \n        ## O(n) time and O(1) space\n        ## for i in range(len(nums)):\n        ##     idx = nums[i] - 1\n        ##     if nums[idx] > 0:\n        ##         nums[idx] = -nums[idx]\n        ## return [i + 1 for i in range(len(nums)) if nums[i] > 0]\n        \n        ## O(n) time and O(1) space\n        ## for i in range(len(nums)):\n        ##     idx = nums[i] - 1\n        ##     if nums[idx] > 0:\n        ##         nums[idx] = -nums[idx]\n        ## return [i + 1 for i in range(len(nums)) if nums[i] > 0]\n        \n        ## O(n) time and O(1) space\n        ## for i in range(len(nums)):\n        ##     idx = nums[i] - 1\n        ##     if nums[idx] > 0:\n        ##         nums[idx] = -nums[idx]\n        ## return [i + 1 for i in range(len(nums)) if nums[i] > 0]\n        \n        ## O(n) time and O(1) space\n        ## for i in range(len(nums)):\n        ##     idx = nums[i] - 1\n        ##     if nums[idx] > 0:\n        ##         nums[idx] = -nums[idx]\n        ## return [i + 1 for i in range(len(nums)) if nums[i] > 0]"}], "count-of-smaller-numbers-after-self": [{"task_id": "count-of-smaller-numbers-after-self", "completion": "class Solution(object):\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # sort the array\n        sorted_nums = sorted(nums)\n        \n        # create a dictionary to store the index of each element\n        num_to_index = {num: i for i, num in enumerate(nums)}\n        \n        # create a list to store the count of smaller elements\n        count = [0] * len(nums)\n        \n        # iterate over the sorted array\n        for i, num in enumerate(sorted_nums):\n            # update the count of smaller elements\n            count[num_to_index[num]] = i\n            \n            # update the index of the next smaller element\n            num_to_index[num] = i + 1\n        \n        return count"}], "set-intersection-size-at-least-two": [{"task_id": "set-intersection-size-at-least-two", "completion": "class Solution(object):\n    def intersectionSizeTwo(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # sort the intervals by start\n        intervals.sort(key=lambda x: x[0])\n        \n        # initialize the result and the current interval\n        res, curr = 0, 0\n        \n        # iterate over the intervals\n        for interval in intervals:\n            # if the current interval is not empty, add 1 to the result\n            if curr < interval[0]:\n                res += 1\n                curr += 1\n            # if the current interval is not empty, add 1 to the result\n            elif curr < interval[1]:\n                res += 1\n                curr += 1\n            # if the current interval is empty, add 1 to the result\n            else:\n                curr += 1\n        \n        return res"}], "symmetric-tree": [{"task_id": "symmetric-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def isMirror(left, right):\n            if not left and not right:\n                return True\n            if not left or not right:\n                return False\n            return left.val == right.val and isMirror(left.left, right.right) and isMirror(left.right, right.left)\n        \n        return isMirror(root, root)"}], "number-of-atoms": [{"task_id": "number-of-atoms", "completion": "class Solution(object):\n    def countOfAtoms(self, formula):\n        \"\"\"\n        :type formula: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \uc815\uaddc\uc2dd\uc73c\ub85c \uc218\uc2dd\uc744 \ubd84\ud574\ud55c\ub2e4.\n        # 2. \uc218\uc2dd\uc744 \ubd84\ud574\ud55c \ud6c4 \uc6d0\uc18c\ub97c \uce74\uc6b4\ud2b8\ud55c\ub2e4.\n        # 3. \uce74\uc6b4\ud2b8\ub97c \ub515\uc154\ub108\ub9ac\uc5d0 \uc800\uc7a5\ud55c\ub2e4.\n        # 4. \uce74\uc6b4\ud2b8\ub97c \ub515\uc154\ub108\ub9ac\ub97c \uc21c\ud68c\ud558\uba70 \uc6d0\uc18c\ub97c \ucd9c\ub825\ud55c\ub2e4.\n        \n        import re\n        count = collections.Counter()\n        for atom in re.findall(r'(\\D*)(\\d*)|(\\d+)', formula):\n            count[atom] += int(atom[0]) if atom[0] else 1\n            if atom[1]:\n                count[atom[1]] += int(atom[0])\n        return ''.join(c + (k if cnt == 1 else str(cnt)) for c, cnt in sorted(count.items()))"}], "binary-tree-preorder-traversal": [{"task_id": "binary-tree-preorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def preorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = [root]\n        result = []\n        \n        while stack:\n            node = stack.pop()\n            if node:\n                if node.right:\n                    stack.append(node.right)\n                if node.left:\n                    stack.append(node.left)\n                result.append(node.val)\n        \n        return result"}], "power-of-four": [{"task_id": "power-of-four", "completion": "class Solution(object):\n    def isPowerOfFour(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 4 == 0:\n            n = n // 4\n        \n        return n == 1"}], "invert-binary-tree": [{"task_id": "invert-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def invertTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        \n        if root is None:\n            return None\n        \n        temp = root.left\n        root.left = root.right\n        root.right = temp\n        \n        self.invertTree(root.left)\n        self.invertTree(root.right)\n        \n        return root"}], "generate-parentheses": [{"task_id": "generate-parentheses", "completion": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        if n == 0:\n            return []\n        \n        if n == 1:\n            return ['()']\n        \n        res = []\n        for i in range(n):\n            left = self.generateParenthesis(i)\n            right = self.generateParenthesis(n-i-1)\n            for l in left:\n                for r in right:\n                    res.append('({}){}'.format(l,r))\n        return res"}], "patching-array": [{"task_id": "patching-array", "completion": "class Solution(object):\n    def minPatches(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the result and the current number of patches\n        patches = 0\n        curr_num = 1\n        \n        # Iterate over the numbers in the array\n        for num in nums:\n            # If the current number is greater than the current number of patches,\n            # add a patch and double the current number\n            if curr_num > n:\n                patches += 1\n                curr_num *= 2\n            # If the current number is less than the current number of patches,\n            # add the current number to the current number of patches\n            else:\n                curr_num += num\n        \n        # Add the remaining numbers to the current number of patches\n        while curr_num <= n:\n            patches += 1\n            curr_num *= 2\n        \n        return patches"}], "longest-valid-parentheses": [{"task_id": "longest-valid-parentheses", "completion": "class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # if len(s) < 2:\n        #     return 0\n        \n        # stack = []\n        # max_len = 0\n        # curr_len = 0\n        \n        # for i in range(len(s)):\n        #     if s[i] == '(':\n        #         stack.append(i)\n        #     else:\n        #         if stack:\n        #             stack.pop()\n        #             if not stack:\n        #                 curr_len = i + 1\n        #             else:\n        #                 curr_len = i - stack[-1]\n        #             max_len = max(max_len, curr_len)\n        #         else:\n        #             curr_len = 0\n        # return max_len\n        \n        # if len(s) < 2:\n        #     return 0\n        \n        # stack = [0]\n        # max_len = 0\n        # curr_len = 0\n        \n        # for i in range(len(s)):\n        #     if s[i] == '(':\n        #         stack.append(i)\n        #     else:\n        #         stack.pop()\n        #         if not stack:\n        #             curr_len = i + 1\n        #         else:\n        #             curr_len = i - stack[-1]\n        #             max_len = max(max_len, curr_len)\n        # return max_len\n        \n        # if len(s) < 2:\n        #     return 0\n        \n        # stack = [0]\n        # max_len = 0\n        # curr_len = 0\n        \n        # for i in range(len(s)):\n        #     if s[i] == '(':\n        #         stack.append(i)\n        #     else:\n        #         stack.pop()\n        #         if not stack:\n        #             curr_len = i + 1\n        #         else:\n        #             curr_len = i - stack[-1]\n        #             max_len = max(max_len, curr_len)\n        # return max_len\n        \n        if len(s) < 2:\n            return 0\n        \n        stack = [0]\n        max_len = 0\n        curr_len = 0\n        \n        for i in range(len(s)):\n            if s[i] == '(':\n                stack.append(i)\n            else:\n                stack.pop()\n                if not stack:\n                    curr_len = i + 1\n                else:\n                    curr_len = i - stack[-1]\n                    max_len = max(max_len, curr_len)\n        return max_len"}], "fraction-to-recurring-decimal": [{"task_id": "fraction-to-recurring-decimal", "completion": "class Solution(object):\n    def fractionToDecimal(self, numerator, denominator):\n        \"\"\"\n        :type numerator: int\n        :type denominator: int\n        :rtype: str\n        \"\"\"\n        \n        if numerator == 0:\n            return \"0\"\n        \n        if numerator < 0 == denominator < 0:\n            sign = \"\"\n        elif numerator < 0:\n            sign = \"-\"\n        else:\n            sign = \"+\"\n        \n        numerator = abs(numerator)\n        denominator = abs(denominator)\n        \n        quotient, remainder = divmod(numerator, denominator)\n        result = sign + str(quotient)\n        \n        if remainder == 0:\n            return result\n        \n        result += \".\"\n        \n        seen = {remainder: len(result)}\n        \n        while remainder != 0:\n            remainder *= 10\n            quotient, remainder = divmod(remainder, denominator)\n            result += str(quotient)\n            \n            if remainder in seen:\n                idx = seen[remainder]\n                result = result[:idx] + \"(\" + result[idx:] + \")\"\n                break\n            seen[remainder] = len(result)\n        \n        return result"}], "sort-list": [{"task_id": "sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        if not head.next:\n            return head\n        \n        # find the middle of the list\n        slow = fast = head\n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # split the list into two halves\n        mid = slow.next\n        slow.next = None\n        \n        # sort the left half\n        left = self.sortList(head)\n        \n        # sort the right half\n        right = self.sortList(mid)\n        \n        # merge the sorted halves\n        dummy = ListNode()\n        curr = dummy\n        while left and right:\n            if left.val < right.val:\n                curr.next = left\n                left = left.next\n            else:\n                curr.next = right\n                right = right.next\n            curr = curr.next\n        \n        if left:\n            curr.next = left\n        else:\n            curr.next = right\n        \n        return dummy.next"}], "russian-doll-envelopes": [{"task_id": "russian-doll-envelopes", "completion": "class Solution(object):\n    def maxEnvelopes(self, envelopes):\n        \"\"\"\n        :type envelopes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # Sort the envelopes by width and height\n        envelopes.sort(key=lambda x: (x[0], -x[1]))\n        \n        # Find the longest increasing subsequence (LIS)\n        nums = [envelope[1] for envelope in envelopes]\n        return self.longestIncreasingSubsequence(nums)\n    \n    def longestIncreasingSubsequence(self, nums):\n        # Initialize a list to store the LIS\n        lis = [nums[0]]\n        \n        # Iterate through the remaining envelopes\n        for num in nums[1:]:\n            # If the current envelope is larger than the last element in the LIS, add it\n            if num > lis[-1]:\n                lis.append(num)\n            else:\n                # Find the index of the smallest element in the LIS that is larger than the current envelope\n                index = bisect.bisect_left(lis, num)\n                lis[index] = num\n        \n        # Return the length of the LIS\n        return len(lis)"}], "set-matrix-zeroes": [{"task_id": "set-matrix-zeroes", "completion": "class Solution(object):\n    def setZeroes(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        \n        row_zero = False\n        \n        for i in range(m):\n            if matrix[i][0] == 0:\n                row_zero = True\n            for j in range(1, n):\n                if matrix[i][j] == 0:\n                    matrix[i][0] = 0\n                    matrix[0][j] = 0\n        \n        for i in range(1, m):\n            for j in range(1, n):\n                if matrix[i][0] == 0 or matrix[0][j] == 0:\n                    matrix[i][j] = 0\n        \n        if matrix[0][0] == 0:\n            for j in range(n):\n                matrix[0][j] = 0\n        \n        if row_zero:\n            for i in range(m):\n                matrix[i][0] = 0"}], "remove-nth-node-from-end-of-list": [{"task_id": "remove-nth-node-from-end-of-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # create a dummy node\n        dummy = ListNode(0, head)\n        \n        # create a slow and fast pointer\n        slow = dummy\n        fast = head\n        \n        # move the fast pointer n steps\n        for i in range(n):\n            fast = fast.next\n        \n        # move the slow pointer until the fast pointer reaches the end\n        while fast:\n            slow = slow.next\n            fast = fast.next\n        \n        # remove the node\n        slow.next = slow.next.next\n        \n        return dummy.next"}], "intersection-of-two-arrays": [{"task_id": "intersection-of-two-arrays", "completion": "class Solution(object):\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums1) > len(nums2):\n            return self.intersection(nums2, nums1)\n        \n        nums1.sort()\n        nums2.sort()\n        \n        i = 0\n        j = 0\n        res = []\n        \n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] < nums2[j]:\n                i += 1\n            elif nums1[i] > nums2[j]:\n                j += 1\n            else:\n                if i == 0 or nums1[i] != nums1[i-1]:\n                    res.append(nums1[i])\n                i += 1\n                j += 1\n        \n        return res"}], "super-washing-machines": [{"task_id": "super-washing-machines", "completion": "class Solution(object):\n    def findMinMoves(self, machines):\n        \"\"\"\n        :type machines: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if sum(machines) % len(machines) != 0:\n            return -1\n        \n        avg = sum(machines) // len(machines)\n        ans = 0\n        curr = 0\n        \n        for i in machines:\n            curr += i - avg\n            ans = max(ans, abs(curr))\n        \n        return ans"}], "kth-smallest-number-in-multiplication-table": [{"task_id": "kth-smallest-number-in-multiplication-table", "completion": "class Solution(object):\n    def findKthNumber(self, m, n, k):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def count(x):\n            cnt = 0\n            for i in range(1, m + 1):\n                cnt += min(n, x // i)\n            return cnt\n        \n        if k == 1:\n            return min(m, n)\n        \n        low, high = 1, m * n\n        \n        while low < high:\n            mid = (low + high) // 2\n            if count(mid) < k:\n                low = mid + 1\n            else:\n                high = mid\n        \n        return low"}], "convert-sorted-list-to-binary-search-tree": [{"task_id": "convert-sorted-list-to-binary-search-tree", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedListToBST(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :rtype: Optional[TreeNode]\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        if not head.next:\n            return TreeNode(head.val)\n        \n        slow = fast = head\n        \n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        root = TreeNode(slow.next.val)\n        slow.next = None\n        root.left = self.sortedListToBST(head)\n        root.right = self.sortedListToBST(slow.next)\n        \n        return root"}], "merge-two-sorted-lists": [{"task_id": "merge-two-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: Optional[ListNode]\n        :type list2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        \n        if list1 is None:\n            return list2\n        if list2 is None:\n            return list1\n        \n        if list1.val < list2.val:\n            head = list1\n            list1 = list1.next\n        else:\n            head = list2\n            list2 = list2.next\n        \n        curr = head\n        \n        while list1 is not None and list2 is not None:\n            if list1.val < list2.val:\n                curr.next = list1\n                list1 = list1.next\n            else:\n                curr.next = list2\n                list2 = list2.next\n            curr = curr.next\n        \n        if list1 is None:\n            curr.next = list2\n        else:\n            curr.next = list1\n        \n        return head"}], "maximal-rectangle": [{"task_id": "maximal-rectangle", "completion": "class Solution(object):\n    def maximalRectangle(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m, n = len(matrix), len(matrix[0])\n        heights = [0] * n\n        \n        max_area = 0\n        \n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == '1':\n                    heights[j] += 1\n                else:\n                    heights[j] = 0\n            max_area = max(max_area, self.largestRectangleArea(heights))\n        \n        return max_area\n    \n    def largestRectangleArea(self, heights):\n        stack = []\n        max_area = 0\n        for i, h in enumerate(heights):\n            while stack and h < heights[stack[-1]]:\n                height = heights[stack.pop()]\n                width = i if not stack else i - stack[-1] - 1\n                max_area = max(max_area, height * width)\n            stack.append(i)\n        \n        while stack:\n            height = heights[stack.pop()]\n            width = len(heights) if not stack else len(heights) - stack[-1] - 1\n            max_area = max(max_area, height * width)\n        \n        return max_area"}], "subsets": [{"task_id": "subsets", "completion": "class Solution(object):\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if len(nums) == 0:\n            return [[]]\n        \n        if len(nums) == 1:\n            return [[], nums]\n        \n        res = []\n        for i in range(len(nums)):\n            res.append([nums[i]])\n            for j in range(i):\n                res.append(res[j] + [nums[i]])\n        \n        return res"}], "find-minimum-in-rotated-sorted-array-ii": [{"task_id": "find-minimum-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 1:\n            return nums[0]\n        \n        if nums[0] < nums[-1]:\n            return nums[0]\n        \n        left, right = 0, len(nums) - 1\n        \n        while left < right:\n            mid = (left + right) // 2\n            \n            if nums[mid] > nums[mid + 1]:\n                return nums[mid + 1]\n            \n            if nums[mid - 1] > nums[mid]:\n                return nums[mid]\n            \n            if nums[mid] < nums[right]:\n                right = mid - 1\n            else:\n                left = mid + 1\n                \n        return nums[left]"}], "valid-number": [{"task_id": "valid-number", "completion": "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. Remove all spaces\n        s = s.strip()\n        \n        # 2. Check if it is a valid integer\n        if not s or s[0] not in ('+', '-') and not s[0].isdigit():\n            return False\n        \n        # 3. Check if it is a valid float\n        if 'e' in s:\n            num, exp = s.split('e')\n            if not num or not num[0] in ('+', '-') and not num[0].isdigit():\n                return False\n            if exp[0] in ('+', '-') and not exp[1:].isdigit():\n                return False\n            return True\n        \n        # 4. Check if it is a valid integer\n        return not '.' in s and s.isdigit() or '.' in s and s.count('.') <= 1 and s.count('e') <= 1 and s.count('+') <= 1 and s.count('-') <= 1 and int(s) <= 2**31 - 1 and int(s) >= -2**31"}], "integer-to-roman": [{"task_id": "integer-to-roman", "completion": "class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        # Roman numerals are stored in a dictionary\n        roman_numerals = {1000: \"M\", 900: \"CM\", 500: \"D\", 400: \"CD\", 100: \"C\", 90: \"XC\", 50: \"L\", 40: \"XL\", 10: \"X\", 9: \"IX\", 5: \"V\", 4: \"IV\", 1: \"I\"}\n        \n        # Initialize the result string\n        result = \"\"\n        \n        # Iterate through the dictionary keys and subtract the num from the key\n        for key in roman_numerals.keys():\n            while num >= key:\n                result += roman_numerals[key]\n                num -= key\n        \n        return result"}], "find-the-difference": [{"task_id": "find-the-difference", "completion": "class Solution(object):\n    def findTheDifference(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        # XOR\n        # 0 ^ 1 = 1\n        # 1 ^ 1 = 0\n        # 0 ^ 0 = 0\n        # 1 ^ 0 = 1\n        \n        # XOR of two strings is the XOR of their respective characters\n        # XOR of empty string is the character that was added\n        \n        # XOR of two strings is the XOR of their respective characters\n        # XOR of empty string is the character that was added\n        \n        # XOR of two strings is the XOR of their respective characters\n        # XOR of empty string is the character that was added\n        \n        # XOR of two strings is the XOR of their respective characters\n        # XOR of empty string is the character that was added\n        \n        # XOR of two strings is the XOR of their respective characters\n        # XOR of empty string is the character that was added\n        \n        # XOR of two strings is the XOR of their respective characters\n        # XOR of empty string is the character that was added\n        \n        # XOR of two strings is the XOR of their respective characters\n        # XOR of empty string is the character that was added\n        \n        # XOR of two strings is the XOR of their respective characters\n        # XOR of empty string is the character that was added\n        \n        # XOR of two strings is the XOR of their respective characters\n        # XOR of empty string is the character that was added\n        \n        # XOR of two strings is the XOR of their respective characters\n        # XOR of empty string is the character that was added\n        \n        # XOR of two strings is the XOR of their respective characters\n        # XOR of empty string is the character that was added\n        \n        # XOR of two strings is the XOR of their respective characters\n        # XOR of empty string is the character that was added\n        \n        # XOR of two strings is the XOR of their respective characters\n        # XOR of empty string is the character that was added\n        \n        # XOR of two strings is the XOR of their respective characters\n        # XOR of empty string is the character that was added\n        \n        # XOR of two strings is the XOR of their respective characters\n        # XOR of empty string is the character that was added\n        \n        # XOR of two strings is the XOR of their respective characters\n        # XOR of empty string is the character that was added\n        \n        # XOR of two strings is the XOR of their respective characters\n        # XOR of empty string is the character that was added\n        \n        # XOR of two strings is the XOR of their respective characters\n        # XOR of empty string is the character that was added\n        \n        # XOR of two strings is the XOR of their respective characters\n        # XOR of empty string is the character that was added\n        \n        # XOR of two strings is the XOR of their respective characters\n        # XOR of empty string is the character that was added\n        \n        # XOR of two strings is the XOR of their respective characters\n        # XOR of empty string is the character that was added\n        \n        # XOR of two strings is the XOR of their respective characters\n        # XOR of empty string is the character that was added\n        \n        # XOR of two strings is the XOR of their respective characters\n        # XOR of empty string is the character that was added\n        \n        # XOR of two strings is the XOR of their respective characters\n        # XOR of empty string is the character that was added\n        \n        # XOR of two strings is the XOR of their respective characters\n        # XOR of empty string is the character that was added\n        \n        # XOR of two strings is the XOR of their respective characters\n        # XOR of empty string is the character that was added\n        \n        # XOR of two strings is the XOR of their respective characters\n        # XOR of empty string is the character that was added\n        \n        # XOR of two strings is the XOR of their respective characters\n        # XOR of empty string is the character that was added\n        \n        # XOR of two strings is the XOR of their respective characters\n        # XOR of empty string is the character that was added\n        \n        # XOR of two strings is the XOR of their respective characters\n        # XOR of empty string is the character that was added\n        \n        # XOR of two strings is the XOR of their respective characters"}], "sudoku-solver": [{"task_id": "sudoku-solver", "completion": "class Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        def find_empty_location(board,l):\n            for row in range(9):\n                for col in range(9):\n                    if board[row][col] == '.':\n                        l[0] = row\n                        l[1] = col\n                        return True\n            return False\n        \n        def used_in_row(board,row,num):\n            for col in range(9):\n                if board[row][col] == num:\n                    return True\n            return False\n        \n        def used_in_col(board,col,num):\n            for row in range(9):\n                if board[row][col] == num:\n                    return True\n            return False\n        \n        def used_in_box(board,row,col,num):\n            box_row = row - row%3\n            box_col = col - col%3\n            for r in range(box_row,box_row+3):\n                for c in range(box_col,box_col+3):\n                    if board[r][c] == num:\n                        return True\n            return False\n        \n        def is_valid(board,row,col,num):\n            return not used_in_row(board,row,num) and not used_in_col(board,col,num) and not used_in_box(board,row,col,num)\n        \n        def solve(board):\n            l = [0,0]\n            if not find_empty_location(board,l):\n                return True\n            row = l[0]\n            col = l[1]\n            \n            for num in range(1,10):\n                if is_valid(board,row,col,str(num)):\n                    board[row][col] = str(num)\n                    if solve(board):\n                        return True\n                    board[row][col] = '.'\n            return False\n        \n        solve(board)"}], "recover-binary-search-tree": [{"task_id": "recover-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        # find the first and second node\n        first_node = second_node = None\n        prev = None\n        \n        # traverse the tree in-order\n        while root:\n            if root.left:\n                # find the predecessor\n                pred = root.left\n                while pred.right and pred.right != root:\n                    pred = pred.right\n                \n                if pred.right:\n                    # if the predecessor is the first node, set it as the first node\n                    if first_node is None:\n                        first_node = pred\n                    # if the predecessor is the second node, set it as the second node\n                    second_node = root\n                    # break the loop\n                    break\n                # set the predecessor's right child to the current node\n                pred.right = root\n                root = root.left\n            else:\n                # if the first node is None, set it to the current node\n                if first_node is None:\n                    first_node = root\n                # if the second node is None, set it to the current node\n                if second_node is None:\n                    second_node = root\n                # break the loop\n                break\n        \n        # swap the values of the first and second node\n        first_node.val, second_node.val = second_node.val, first_node.val"}], "palindrome-linked-list": [{"task_id": "palindrome-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        \n        if not head:\n            return True\n        \n        # find the middle of the list\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # reverse the second half of the list\n        prev = None\n        while slow:\n            nxt = slow.next\n            slow.next = prev\n            prev = slow\n            slow = nxt\n        \n        # compare the first half with the second half\n        while prev:\n            if prev.val != head.val:\n                return False\n            prev = prev.next\n            head = head.next\n        \n        return True"}], "valid-perfect-square": [{"task_id": "valid-perfect-square", "completion": "class Solution(object):\n    def isPerfectSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return True\n        \n        left = 1\n        right = num\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            if mid * mid == num:\n                return True\n            elif mid * mid > num:\n                right = mid - 1\n            else:\n                left = mid + 1\n        \n        return False"}], "counting-bits": [{"task_id": "counting-bits", "completion": "class Solution(object):\n    def countBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if n == 0:\n            return [0]\n        \n        if n == 1:\n            return [0, 1]\n        \n        if n == 2:\n            return [0, 1, 1]\n        \n        if n == 3:\n            return [0, 1, 1, 2]\n        \n        if n == 4:\n            return [0, 1, 1, 2, 2]\n        \n        if n == 5:\n            return [0, 1, 1, 2, 2, 3]\n        \n        if n == 6:\n            return [0, 1, 1, 2, 2, 3, 3]\n        \n        if n == 7:\n            return [0, 1, 1, 2, 2, 3, 3, 4]\n        \n        if n == 8:\n            return [0, 1, 1, 2, 2, 3, 3, 4, 4]\n        \n        if n == 9:\n            return [0, 1, 1, 2, 2, 3, 3, 4, 4, 5]\n        \n        if n == 10:\n            return [0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5]\n        \n        if n == 11:\n            return [0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6]\n        \n        if n == 12:\n            return [0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]\n        \n        if n == 13:\n            return [0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7]\n        \n        if n == 14:\n            return [0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7]\n        \n        if n == 15:\n            return [0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8]\n        \n        if n == 16:\n            return [0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8]\n        \n        if n == 17:\n            return [0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9]\n        \n        if n == 18:\n            return [0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]\n        \n        if n == 19:\n            return [0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10]\n        \n        if n == 20:\n            return [0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]\n        \n        if n == 21:\n            return [0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9,"}], "remove-linked-list-elements": [{"task_id": "remove-linked-list-elements", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        \n        while head and head.val == val:\n            head = head.next\n        \n        curr = head\n        \n        while curr and curr.next:\n            if curr.next.val == val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        \n        return head"}], "scramble-string": [{"task_id": "scramble-string", "completion": "class Solution(object):\n    def isScramble(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) != len(s2):\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if sorted(s1) != sorted(s2):\n            return False\n        \n        for i in range(1, len(s1)):\n            if self.isScramble(s1[:i], s2[:i]) and self.isScramble(s1[i:], s2[i:]):\n                return True\n            \n            if self.isScramble(s1[:i], s2[-i:]) and self.isScramble(s1[i:], s2[:-i]):\n                return True\n        \n        return False"}], "simplify-path": [{"task_id": "simplify-path", "completion": "class Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        \n        stack = []\n        for p in path.split('/'):\n            if p == '..':\n                if stack:\n                    stack.pop()\n            elif p and p != '.':\n                stack.append(p)\n        return '/' + '/'.join(stack)"}], "word-search-ii": [{"task_id": "word-search-ii", "completion": "class Solution(object):\n    def findWords(self, board, words):\n        \"\"\"\n        :type board: List[List[str]]\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        def dfs(i, j, node, path):\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]):\n                return\n            if board[i][j] != node:\n                return\n            if node not in node_to_word:\n                return\n            if path + node in node_to_word[node]:\n                res.append(path + node)\n            dfs(i + 1, j, node, path + node)\n            dfs(i - 1, j, node, path + node)\n            dfs(i, j + 1, node, path + node)\n            dfs(i, j - 1, node, path + node)\n        \n        node_to_word = collections.defaultdict(set)\n        for word in words:\n            node_to_word[word[0]].add(word)\n        \n        res = []\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                for node in node_to_word:\n                    dfs(i, j, node, \"\")\n        \n        return list(set(res))"}], "valid-anagram": [{"task_id": "valid-anagram", "completion": "class Solution(object):\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_dict = {}\n        t_dict = {}\n        \n        for i in range(len(s)):\n            s_dict[s[i]] = 1 + s_dict.get(s[i], 0)\n            t_dict[t[i]] = 1 + t_dict.get(t[i], 0)\n        \n        for key in s_dict:\n            if s_dict[key] != t_dict.get(key, 0):\n                return False\n        \n        return True"}], "valid-sudoku": [{"task_id": "valid-sudoku", "completion": "class Solution(object):\n    def isValidSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        \n        # check rows\n        for row in board:\n            if len(set(row)) != 9:\n                return False\n        \n        # check columns\n        for col in zip(*board):\n            if len(set(col)) != 9:\n                return False\n        \n        # check 3x3 boxes\n        for i in (0, 3, 6):\n            for j in (0, 3, 6):\n                box = [board[x][y] for x in range(i, i+3) for y in range(j, j+3)]\n                if len(set(box)) != 9:\n                    return False\n        \n        return True"}], "fizz-buzz": [{"task_id": "fizz-buzz", "completion": "class Solution(object):\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        ans = []\n        for i in range(1, n+1):\n            if i % 3 == 0 and i % 5 == 0:\n                ans.append(\"FizzBuzz\")\n            elif i % 3 == 0:\n                ans.append(\"Fizz\")\n            elif i % 5 == 0:\n                ans.append(\"Buzz\")\n            else:\n                ans.append(str(i))\n        return ans"}], "reverse-words-in-a-string": [{"task_id": "reverse-words-in-a-string", "completion": "class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # split the string into words\n        words = s.split()\n        \n        # reverse the order of the words\n        words.reverse()\n        \n        # join the words back into a string\n        return ' '.join(words)"}], "excel-sheet-column-number": [{"task_id": "excel-sheet-column-number", "completion": "class Solution(object):\n    def titleToNumber(self, columnTitle):\n        \"\"\"\n        :type columnTitle: str\n        :rtype: int\n        \"\"\"\n        \n        # 26^0 = 1\n        # 26^1 = 26\n        # 26^2 = 676\n        # 26^3 = 17576\n        # 26^4 = 4294967296\n        # 26^5 = 1099511627776\n        # 26^6 = 343597383688000\n        # 26^7 = 10737418240000000\n        \n        # 26^(n-1) = n\n        # 26^(n-1) * 26^(n-1) = n^2\n        # 26^(n-1) * 26^(n-1) * 26^(n-1) = n^3\n        # 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) = n^4\n        # 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) = n^5\n        # 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) = n^6\n        # 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) = n^7\n        \n        # 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) = n^7\n        # 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) = n^8\n        # 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) = n^9\n        # 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) = n^10\n        # 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) = n^11\n        # 26^(n-1) * 26^(n-1) * 26^(n-1"}], "candy": [{"task_id": "candy", "completion": "class Solution(object):\n    def candy(self, ratings):\n        \"\"\"\n        :type ratings: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(ratings)\n        candies = [1] * n\n        \n        for i in range(1, n):\n            if ratings[i] > ratings[i - 1]:\n                candies[i] = candies[i - 1] + 1\n        \n        for i in range(n - 1, 0, -1):\n            if ratings[i] < ratings[i - 1]:\n                candies[i - 1] = max(candies[i - 1], candies[i] + 1)\n        \n        return sum(candies)"}], "same-tree": [{"task_id": "same-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if p is None and q is None:\n            return True\n        elif p is None or q is None:\n            return False\n        elif p.val != q.val:\n            return False\n        else:\n            return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"}], "reorder-list": [{"task_id": "reorder-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reorderList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: None Do not return anything, modify head in-place instead.\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        # find the middle of the list\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # reverse the second half of the list\n        prev = None\n        while slow:\n            next = slow.next\n            slow.next = prev\n            prev = slow\n            slow = next\n        \n        # merge the first and second halves\n        first, second = head, prev\n        while second.next:\n            first, second = first.next, second.next\n        \n        # connect the first half back to the second half\n        first.next = second\n        \n        return head"}], "word-pattern": [{"task_id": "word-pattern", "completion": "class Solution(object):\n    def wordPattern(self, pattern, s):\n        \"\"\"\n        :type pattern: str\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # split the string into words\n        words = s.split()\n        \n        # check if the length of pattern and words are equal\n        if len(pattern) != len(words):\n            return False\n        \n        # create a dictionary to store the mapping\n        mapping = {}\n        \n        # iterate over the pattern and words\n        for char, word in zip(pattern, words):\n            # if the word is already in the mapping, check if the pattern matches\n            if word in mapping:\n                if mapping[word] != char:\n                    return False\n            # if the word is not in the mapping, add it with the pattern\n            else:\n                if char in mapping.values():\n                    return False\n                mapping[word] = char\n        \n        return True"}], "permutations": [{"task_id": "permutations", "completion": "class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if len(nums) == 1:\n            return [nums]\n        \n        res = []\n        \n        for i in range(len(nums)):\n            for j in self.permute(nums[:i] + nums[i+1:]):\n                res.append([nums[i]] + j)\n        \n        return res"}], "search-a-2d-matrix": [{"task_id": "search-a-2d-matrix", "completion": "class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        \n        low = 0\n        high = m*n - 1\n        \n        while low <= high:\n            mid = (low + high) // 2\n            if matrix[mid//n][mid%n] == target:\n                return True\n            elif matrix[mid//n][mid%n] < target:\n                low = mid + 1\n            else:\n                high = mid - 1\n        \n        return False"}], "add-two-numbers": [{"task_id": "add-two-numbers", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # Initialize a new ListNode with value 0\n        dummy = ListNode(0)\n        # Initialize a pointer to the current node\n        curr = dummy\n        # Initialize a variable to store the carry\n        carry = 0\n        \n        # Iterate over the lists until both lists are empty\n        while l1 or l2 or carry:\n            # Calculate the sum of the current nodes\n            if l1:\n                sum1 = l1.val\n            else:\n                sum1 = 0\n            if l2:\n                sum2 = l2.val\n            else:\n                sum2 = 0\n            # Calculate the sum of the current node and the carry\n            sum_total = sum1 + sum2 + carry\n            # Calculate the value of the current node\n            curr.next = ListNode(sum_total % 10)\n            # Update the carry\n            carry = sum_total // 10\n            # Move to the next node\n            curr = curr.next\n            # Move to the next node\n            if l1:\n                l1 = l1.next\n            if l2:\n                l2 = l2.next\n        \n        # Return the new ListNode\n        return dummy.next"}], "number-complement": [{"task_id": "number-complement", "completion": "class Solution(object):\n    def findComplement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. convert num to binary\n        # 2. flip all the 0's to 1's and all the 1's to 0's\n        # 3. convert the binary to decimal\n        \n        # 1. convert num to binary\n        binary = bin(num)[2:]\n        \n        # 2. flip all the 0's to 1's and all the 1's to 0's\n        complement = \"\"\n        for bit in binary:\n            if bit == \"0\":\n                complement += \"1\"\n            else:\n                complement += \"0\"\n        \n        # 3. convert the binary to decimal\n        return int(complement, 2)"}], "arithmetic-slices-ii-subsequence": [{"task_id": "arithmetic-slices-ii-subsequence", "completion": "class Solution(object):\n    def numberOfArithmeticSlices(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 3:\n            return 0\n        \n        count = 0\n        diff = nums[1] - nums[0]\n        for i in range(1, len(nums)-1):\n            if nums[i+1] - nums[i] == diff:\n                count += 1\n            else:\n                diff = nums[i+1] - nums[i]\n        \n        return count"}], "text-justification": [{"task_id": "text-justification", "completion": "class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\"\n        \n        # initialize the result list\n        result = []\n        \n        # initialize the current line\n        current_line = []\n        \n        # initialize the current line length\n        current_line_length = 0\n        \n        # loop through the words\n        for word in words:\n            # if the current line length + the length of the current word + the space between words is less than the max width\n            if current_line_length + len(word) + len(current_line) <= maxWidth:\n                # add the word to the current line\n                current_line.append(word)\n                # update the current line length\n                current_line_length += len(word)\n            else:\n                # if the current line is empty\n                if not current_line:\n                    # add the word to the current line\n                    current_line.append(word)\n                    # update the current line length\n                    current_line_length = len(word)\n                else:\n                    # calculate the number of spaces between words\n                    num_spaces = maxWidth - current_line_length\n                    # calculate the number of spaces between words\n                    num_spaces_per_word = num_spaces // (len(current_line) - 1)\n                    # calculate the number of extra spaces\n                    extra_spaces = num_spaces % (len(current_line) - 1)\n                    # add the spaces to the current line\n                    for i in range(len(current_line) - 1):\n                        current_line[i] += \" \" * num_spaces_per_word\n                        if i < extra_spaces:\n                            current_line[i] += \" \"\n                    # add the last word to the current line\n                    current_line[-1] += \" \" * num_spaces_per_word\n                    # add the current line to the result list\n                    result.append(\"\".join(current_line))\n                    # initialize the current line\n                    current_line = [word]\n                    # update the current line length\n                    current_line_length = len(word)\n        \n        # add the last line to the result list\n        result.append(\" \".join(current_line) + \" \" * (maxWidth - len(current_line[-1])))\n        \n        # return the result list\n        return result"}], "binary-tree-postorder-traversal": [{"task_id": "binary-tree-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def postorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = [(0, root)]\n        res = []\n        \n        while stack:\n            idx, node = stack.pop()\n            \n            if idx == 0:\n                if node.right:\n                    stack.append((0, node))\n                    stack.append((1, node))\n                else:\n                    res.append(node.val)\n            else:\n                res.append(node.val)\n                \n        return res"}], "container-with-most-water": [{"task_id": "container-with-most-water", "completion": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Two pointers approach\n        # Initialize left and right pointers\n        left = 0\n        right = len(height) - 1\n        \n        # Initialize max area\n        max_area = 0\n        \n        # Iterate over the array\n        while left < right:\n            # Calculate area\n            area = min(height[left], height[right]) * (right - left)\n            \n            # Update max area\n            max_area = max(max_area, area)\n            \n            # Move pointers\n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n        \n        return max_area"}], "concatenated-words": [{"task_id": "concatenated-words", "completion": "class Solution(object):\n    def findAllConcatenatedWordsInADict(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # Create a set of words\n        word_set = set(words)\n        \n        # Initialize an empty list to store concatenated words\n        concatenated_words = []\n        \n        # Iterate over each word in the list\n        for word in words:\n            # Initialize a flag to indicate if the word can be concatenated\n            can_be_concatenated = False\n            \n            # Iterate over each prefix of the word\n            for i in range(1, len(word)):\n                # Check if the prefix is in the set of words\n                prefix = word[:i]\n                if prefix in word_set:\n                    # Check if the suffix is also in the set of words\n                    suffix = word[i:]\n                    if suffix in word_set or (suffix.startswith(prefix) and suffix[len(prefix):] in word_set):\n                        can_be_concatenated = True\n                        break\n            \n            # If the word can be concatenated, add it to the list\n            if can_be_concatenated:\n                concatenated_words.append(word)\n        \n        return concatenated_words"}], "base-7": [{"task_id": "base-7", "completion": "class Solution(object):\n    def convertToBase7(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        \n        if num < 0:\n            num = abs(num)\n            sign = -1\n        else:\n            sign = 1\n        \n        res = \"\"\n        \n        while num > 0:\n            res = str(num % 7) + res\n            num = num // 7\n        \n        return res if sign == 1 else \"-\" + res"}], "nim-game": [{"task_id": "nim-game", "completion": "class Solution(object):\n    def canWinNim(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        return n % 4 != 0"}], "n-queens-ii": [{"task_id": "n-queens-ii", "completion": "class Solution(object):\n    def totalNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        def backtrack(row, cols, diag1, diag2):\n            if row == n:\n                return 1\n            \n            count = 0\n            for col in range(n):\n                if col not in cols and row + col not in diag1 and row - col not in diag2:\n                    cols.add(col)\n                    diag1.add(row + col)\n                    diag2.add(row - col)\n                    count += backtrack(row + 1, cols, diag1, diag2)\n                    cols.remove(col)\n                    diag1.remove(row + col)\n                    diag2.remove(row - col)\n            return count\n        \n        return backtrack(0, set(), set(), set())"}], "n-queens": [{"task_id": "n-queens", "completion": "class Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def is_valid(board, row, col):\n            for i in range(row):\n                if board[i][col] == 'Q':\n                    return False\n            i, j = row, col\n            while i >= 0 and j >= 0:\n                if board[i][j] == 'Q':\n                    return False\n                i -= 1\n                j -= 1\n            i, j = row, col\n            while i < n and j >= 0:\n                if board[i][j] == 'Q':\n                    return False\n                i += 1\n                j -= 1\n            return True\n        \n        def backtrack(board, row):\n            if row == n:\n                res.append([''.join(row) for row in board])\n                return\n            for col in range(n):\n                if is_valid(board, row, col):\n                    board[row][col] = 'Q'\n                    backtrack(board, row + 1)\n                    board[row][col] = '.'\n        \n        res = []\n        board = [['.' for _ in range(n)] for _ in range(n)]\n        backtrack(board, 0)\n        return res"}], "word-search": [{"task_id": "word-search", "completion": "class Solution(object):\n    def exist(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if not word:\n            return True\n        \n        if not board:\n            return False\n        \n        if len(word) > len(board) * len(board[0]):\n            return False\n        \n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if board[i][j] == word[0]:\n                    if self.dfs(board, word[1:], i, j):\n                        return True\n        \n        return False\n    \n    def dfs(self, board, word, i, j):\n        if not word:\n            return True\n        \n        if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]):\n            return False\n        \n        if board[i][j] != word[0]:\n            return False\n        \n        temp = board[i][j]\n        board[i][j] = '#'\n        \n        res = self.dfs(board, word[1:], i + 1, j) or self.dfs(board, word[1:], i - 1, j) or self.dfs(board, word[1:], i, j + 1) or self.dfs(board, word[1:], i, j - 1)\n        \n        board[i][j] = temp\n        \n        return res"}], "merge-sorted-array": [{"task_id": "merge-sorted-array", "completion": "class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        \n        # if nums1 is empty, just return nums2\n        if m == 0:\n            return nums2\n        \n        # if nums2 is empty, just return nums1\n        if n == 0:\n            return nums1\n        \n        # if nums1 is empty, just return nums2\n        if m == 0:\n            return nums2\n        \n        # if nums2 is empty, just return nums1\n        if n == 0:\n            return nums1\n        \n        # if nums1 is empty, just return nums2\n        if m == 0:\n            return nums2\n        \n        # if nums2 is empty, just return nums1\n        if n == 0:\n            return nums1\n        \n        # if nums1 is empty, just return nums2\n        if m == 0:\n            return nums2\n        \n        # if nums2 is empty, just return nums1\n        if n == 0:\n            return nums1\n        \n        # if nums1 is empty, just return nums2\n        if m == 0:\n            return nums2\n        \n        # if nums2 is empty, just return nums1\n        if n == 0:\n            return nums1\n        \n        # if nums1 is empty, just return nums2\n        if m == 0:\n            return nums2\n        \n        # if nums2 is empty, just return nums1\n        if n == 0:\n            return nums1\n        \n        # if nums1 is empty, just return nums2\n        if m == 0:\n            return nums2\n        \n        # if nums2 is empty, just return nums1\n        if n == 0:\n            return nums1\n        \n        # if nums1 is empty, just return nums2\n        if m == 0:\n            return nums2\n        \n        # if nums2 is empty, just return nums1\n        if n == 0:\n            return nums1\n        \n        # if nums1 is empty, just return nums2\n        if m == 0:\n            return nums2\n        \n        # if nums2 is empty, just return nums1\n        if n == 0:\n            return nums1\n        \n        # if nums1 is empty, just return nums2\n        if m == 0:\n            return nums2\n        \n        # if nums2 is empty, just return nums1\n        if n == 0:\n            return nums1\n        \n        # if nums1 is empty, just return nums2\n        if m == 0:\n            return nums2\n        \n        # if nums2 is empty, just return nums1\n        if n == 0:\n            return nums1\n        \n        # if nums1 is empty, just return nums2\n        if m == 0:\n            return nums2\n        \n        # if nums2 is empty, just return nums1\n        if n == 0:\n            return nums1\n        \n        # if nums1 is empty, just return nums2\n        if m == 0:\n            return nums2\n        \n        # if nums2 is empty, just return nums1\n        if n == 0:\n            return nums1\n        \n        # if nums1 is empty, just return nums2\n        if m == 0:\n            return nums2\n        \n        # if nums2 is empty, just return nums1\n        if n == 0:\n            return nums1\n        \n        # if nums1 is empty, just return nums2\n        if m == 0:\n            return nums2\n        \n        # if nums2 is empty, just return nums1\n        if n == 0:\n            return nums1\n        \n        # if nums1 is empty, just return nums2\n        if m == 0:\n            return nums2\n        \n        # if nums2 is empty, just return nums1\n        if n == 0:\n            return nums1\n        \n        # if nums1 is empty, just return nums2\n        if m == 0:\n            return nums2\n        \n        # if nums2 is empty, just return nums1\n        if n == 0:\n            return nums1\n        \n        # if num"}], "third-maximum-number": [{"task_id": "third-maximum-number", "completion": "class Solution(object):\n    def thirdMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the three maximum variables\n        max1 = float('-inf')\n        max2 = float('-inf')\n        max3 = float('-inf')\n        \n        # Iterate through the list and update the three maximum variables\n        for num in nums:\n            if num > max1:\n                max3 = max2\n                max2 = max1\n                max1 = num\n            elif num > max2 and num < max1:\n                max3 = max2\n                max2 = num\n            elif num > max3 and num < max2:\n                max3 = num\n        \n        # If there is no third maximum, return the maximum\n        if max3 == float('-inf'):\n            return max1\n        \n        # Otherwise, return the third maximum\n        return max3"}]}