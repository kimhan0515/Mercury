{"spiral-matrix": [{"task_id": "spiral-matrix", "completion": "class Solution(object):\n    def spiralOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not matrix:\n            return []\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        \n        top = 0\n        bottom = m - 1\n        left = 0\n        right = n - 1\n        \n        res = []\n        \n        while top <= bottom and left <= right:\n            \n            # top row\n            for i in range(left, right + 1):\n                res.append(matrix[top][i])\n            top += 1\n            \n            # right col\n            for i in range(top, bottom + 1):\n                res.append(matrix[i][right])\n            right -= 1\n            \n            # bottom row\n            if top <= bottom:\n                for i in range(right, left - 1, -1):\n                    res.append(matrix[bottom][i])\n                bottom -= 1\n            \n            # left col\n            if left <= right:\n                for i in range(bottom, top - 1, -1):\n                    res.append(matrix[i][left])\n                left += 1\n        \n        return res"}], "summary-ranges": [{"task_id": "summary-ranges", "completion": "class Solution(object):\n    def summaryRanges(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        if len(nums) == 0:\n            return []\n        \n        if len(nums) == 1:\n            return [str(nums[0])]\n        \n        start = nums[0]\n        end = nums[0]\n        res = []\n        \n        for i in range(1, len(nums)):\n            if nums[i] == end + 1:\n                end = nums[i]\n            else:\n                if start == end:\n                    res.append(str(start))\n                else:\n                    res.append(str(start) + \"->\" + str(end))\n                start = nums[i]\n                end = nums[i]\n        \n        if start == end:\n            res.append(str(start))\n        else:\n            res.append(str(start) + \"->\" + str(end))\n        \n        return res"}], "distinct-subsequences": [{"task_id": "distinct-subsequences", "completion": "class Solution(object):\n    def numDistinct(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"\n        \n        if len(s) < len(t):\n            return 0\n        \n        dp = [1] * (len(t) + 1)\n        \n        for i in range(1, len(s) + 1):\n            if s[i - 1] == t[0]:\n                dp[0] += 1\n            if i >= len(t):\n                dp[i % len(t)] += dp[(i - len(t)) % len(t)]\n        \n        return dp[-1]"}], "first-missing-positive": [{"task_id": "first-missing-positive", "completion": "class Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## 1. Mark the numbers as negative if they are not positive\n        ## 2. Mark the numbers as positive if they are not negative\n        ## 3. Find the first number that is not negative\n        ## 4. If the number is positive, then it is the first missing positive\n        ## 5. If the number is negative, then it is the first missing positive\n        ## 6. If the number is 0, then it is not a positive number\n        \n        ## 1. Mark the numbers as negative if they are not positive\n        for i in range(len(nums)):\n            if nums[i] <= 0:\n                nums[i] = float('inf')\n        \n        ## 2. Mark the numbers as positive if they are not negative\n        for i in range(len(nums)):\n            if abs(nums[i]) - 1 < len(nums):\n                nums[abs(nums[i]) - 1] = -abs(nums[abs(nums[i]) - 1])\n        \n        ## 3. Find the first number that is not negative\n        for i in range(len(nums)):\n            if nums[i] > 0:\n                return i + 1\n        \n        ## 4. If the number is positive, then it is the first missing positive\n        return len(nums) + 1"}], "permutation-sequence": [{"task_id": "permutation-sequence", "completion": "class Solution(object):\n    def getPermutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. Calculate the factorial of n\n        fact = 1\n        for i in range(1, n):\n            fact *= i\n        \n        # 2. Calculate the number of digits in the permutation\n        num_digits = n\n        k -= 1\n        \n        # 3. Calculate the permutation number\n        permutation = \"\"\n        while num_digits > 0:\n            fact //= num_digits\n            digit = k // fact\n            permutation += str(digit + 1)\n            k %= fact\n            num_digits -= 1\n        \n        return permutation"}], "two-sum-ii-input-array-is-sorted": [{"task_id": "two-sum-ii-input-array-is-sorted", "completion": "class Solution(object):\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        left = 0\n        right = len(numbers) - 1\n        \n        while left < right:\n            if numbers[left] + numbers[right] == target:\n                return [left + 1, right + 1]\n            elif numbers[left] + numbers[right] < target:\n                left += 1\n            else:\n                right -= 1\n        \n        return [-1, -1]"}], "expression-add-operators": [{"task_id": "expression-add-operators", "completion": "class Solution(object):\n    def addOperators(self, num, target):\n        \"\"\"\n        :type num: str\n        :type target: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def backtrack(num, target, op, res, curr, prev):\n            if not num:\n                if curr == target:\n                    res.append(op)\n                return\n            for i in range(1, len(num)+1):\n                if i == 1 or (num[0] != '0' and i != 1):\n                    curr = curr*10 + int(num[:i])\n                    op = op + '*' + num[:i] if op else num[:i]\n                    backtrack(num[i:], target, op, res, curr, curr)\n                    op = op[:-i]\n                    curr = curr - int(num[:i])\n                elif i == 1 and num[0] == '0':\n                    break\n                else:\n                    break\n        \n        res = []\n        backtrack(num, target, '', res, 0, 0)\n        return res"}], "sum-root-to-leaf-numbers": [{"task_id": "sum-root-to-leaf-numbers", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def dfs(root, curr_sum):\n            if not root:\n                return 0\n            \n            if not root.left and not root.right:\n                return curr_sum * 10 + root.val\n            \n            left_sum = dfs(root.left, curr_sum * 10 + root.val)\n            right_sum = dfs(root.right, curr_sum * 10 + root.val)\n            \n            return left_sum + right_sum\n        \n        return dfs(root, 0)"}], "license-key-formatting": [{"task_id": "license-key-formatting", "completion": "class Solution(object):\n    def licenseKeyFormatting(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        s = s.replace('-', '').upper()\n        n = len(s)\n        if n <= k:\n            return s\n        if n % k == 0:\n            return s[:k] + '-' + self.licenseKeyFormatting(s[k:], k)\n        else:\n            return s[:n % k] + '-' + self.licenseKeyFormatting(s[n % k:], k)"}], "gas-station": [{"task_id": "gas-station", "completion": "class Solution(object):\n    def canCompleteCircuit(self, gas, cost):\n        \"\"\"\n        :type gas: List[int]\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        \n        total_gas = sum(gas)\n        total_cost = sum(cost)\n        \n        if total_gas < total_cost:\n            return -1\n        \n        start = 0\n        curr_gas = 0\n        \n        for i in range(len(gas)):\n            curr_gas += gas[i] - cost[i]\n            if curr_gas < 0:\n                start = i + 1\n                curr_gas = 0\n        \n        return start"}], "burst-balloons": [{"task_id": "burst-balloons", "completion": "class Solution(object):\n    def maxCoins(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums = [1] + nums + [1]\n        n = len(nums)\n        dp = [[0] * n for _ in range(n)]\n        \n        for i in range(n-2, -1, -1):\n            for j in range(i+2, n):\n                dp[i][j] = max(nums[i]*nums[k]*nums[j] + dp[i][k] + dp[k][j] for k in range(i+1, j))\n        \n        return dp[0][n-1]"}], "plus-one": [{"task_id": "plus-one", "completion": "class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we"}], "regular-expression-matching": [{"task_id": "regular-expression-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        if not p.replace(\"*\",\"\"):\n            return not s\n        \n        star = p.find(\"*\")\n        if star == -1:\n            return False\n        \n        i = 0\n        j = 0\n        star_count = 0\n        while i < len(s):\n            if j < len(p) and (s[i] == p[j] or p[j] == \".\"):\n                i += 1\n                j += 1\n            elif star_count > 0:\n                star_count -= 1\n                j += 1\n            elif j < len(p) and p[j] == \"*\":\n                star_count += 1\n                j += 1\n            else:\n                return False\n        \n        if star_count > 0:\n            j += 1\n        \n        while j < len(p):\n            if p[j] != \"*\" and p[j] != \".\":\n                return False\n            j += 1\n        \n        return True"}], "create-maximum-number": [{"task_id": "create-maximum-number", "completion": "class Solution(object):\n    def maxNumber(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums1) < k or len(nums2) < k:\n            return []\n        \n        if len(nums1) > len(nums2):\n            return self.maxNumber(nums2, nums1, k)\n        \n        if len(nums1) == 0:\n            return nums2[:k]\n        \n        if k == 0:\n            return []\n        \n        if k == 1:\n            return nums1 if nums1[0] > nums2[0] else nums2\n        \n        if k == len(nums1):\n            return nums1\n        \n        if k == len(nums2):\n            return nums2\n        \n        if nums1[0] > nums2[0]:\n            return nums1\n        \n        if nums1[0] < nums2[0]:\n            return nums2\n        \n        if nums1[0] == nums2[0]:\n            return self.maxNumber(nums1[1:], nums2[1:], k-1)\n        \n        if nums1[0] == nums2[0]:\n            return nums1\n        \n        if nums1[0] == nums2[0]:\n            return nums1\n        \n        if nums1[0] == nums2[0]:\n            return nums1\n        \n        if nums1[0] == nums2[0]:\n            return nums1\n        \n        if nums1[0] == nums2[0]:\n            return nums1\n        \n        if nums1[0] == nums2[0]:\n            return nums1\n        \n        if nums1[0] == nums2[0]:\n            return nums1\n        \n        if nums1[0] == nums2[0]:\n            return nums1\n        \n        if nums1[0] == nums2[0]:\n            return nums1\n        \n        if nums1[0] == nums2[0]:\n            return nums1\n        \n        if nums1[0] == nums2[0]:\n            return nums1\n        \n        if nums1[0] == nums2[0]:\n            return nums1\n        \n        if nums1[0] == nums2[0]:\n            return nums1\n        \n        if nums1[0] == nums2[0]:\n            return nums1\n        \n        if nums1[0] == nums2[0]:\n            return nums1\n        \n        if nums1[0] == nums2[0]:\n            return nums1\n        \n        if nums1[0] == nums2[0]:\n            return nums1\n        \n        if nums1[0] == nums2[0]:\n            return nums1\n        \n        if nums1[0] == nums2[0]:\n            return nums1\n        \n        if nums1[0] == nums2[0]:\n            return nums1\n        \n        if nums1[0] == nums2[0]:\n            return nums1\n        \n        if nums1[0] == nums2[0]:\n            return nums1\n        \n        if nums1[0] == nums2[0]:\n            return nums1\n        \n        if nums1[0] == nums2[0]:\n            return nums1\n        \n        if nums1[0] == nums2[0]:\n            return nums1\n        \n        if nums1[0] == nums2[0]:\n            return nums1\n        \n        if nums1[0] == nums2[0]:\n            return nums1\n        \n        if nums1[0] == nums2[0]:\n            return nums1\n        \n        if nums1[0] == nums2[0]:\n            return nums1\n        \n        if nums1[0] == nums2[0]:\n            return nums1\n        \n        if nums1[0] == nums2[0]:\n            return nums1\n        \n        if nums1[0] == nums2[0]:\n            return"}], "perfect-number": [{"task_id": "perfect-number", "completion": "class Solution(object):\n    def checkPerfectNumber(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return False\n        \n        sum_divisors = 1\n        \n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                sum_divisors += i + num // i\n        \n        return sum_divisors == num"}], "fibonacci-number": [{"task_id": "fibonacci-number", "completion": "class Solution(object):\n    def fib(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        \n        a = 0\n        b = 1\n        for i in range(2, n+1):\n            c = a + b\n            a = b\n            b = c\n        return b"}], "dungeon-game": [{"task_id": "dungeon-game", "completion": "class Solution(object):\n    def calculateMinimumHP(self, dungeon):\n        \"\"\"\n        :type dungeon: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(dungeon)\n        n = len(dungeon[0])\n        \n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        \n        dp[m - 1][n] = max(1, 1 - dungeon[m - 1][n])\n        dp[m][n - 1] = max(1, 1 - dungeon[m][n - 1])\n        \n        for i in range(m - 1, -1, -1):\n            for j in range(n - 1, -1, -1):\n                dp[i][j] = max(1, min(dp[i + 1][j], dp[i][j + 1]) - dungeon[i][j])\n        \n        return dp[0][0]"}], "find-k-th-smallest-pair-distance": [{"task_id": "find-k-th-smallest-pair-distance", "completion": "class Solution(object):\n    def smallestDistancePair(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        left, right = 0, nums[-1] - nums[0]\n        \n        while left < right:\n            mid = (left + right) // 2\n            count = 0\n            left_idx = 0\n            \n            for right_idx in range(len(nums)):\n                while nums[right_idx] - nums[left_idx] > mid:\n                    left_idx += 1\n                count += right_idx - left_idx\n                \n            if count >= k:\n                right = mid\n            else:\n                left = mid + 1\n                \n        return left"}], "number-of-segments-in-a-string": [{"task_id": "number-of-segments-in-a-string", "completion": "class Solution(object):\n    def countSegments(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        return len(s.split())"}], "reverse-vowels-of-a-string": [{"task_id": "reverse-vowels-of-a-string", "completion": "class Solution(object):\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n        s_list = list(s)\n        left = 0\n        right = len(s_list) - 1\n        \n        while left < right:\n            if s_list[left] in vowels and s_list[right] in vowels:\n                s_list[left], s_list[right] = s_list[right], s_list[left]\n                left += 1\n                right -= 1\n            elif s_list[left] not in vowels:\n                left += 1\n            elif s_list[right] not in vowels:\n                right -= 1\n        \n        return ''.join(s_list)"}], "longest-consecutive-sequence": [{"task_id": "longest-consecutive-sequence", "completion": "class Solution(object):\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums_set = set(nums)\n        max_length = 0\n        \n        for num in nums:\n            if num - 1 not in nums_set:\n                curr_num = num\n                curr_length = 1\n                \n                while curr_num + 1 in nums_set:\n                    curr_num += 1\n                    curr_length += 1\n                    \n                max_length = max(max_length, curr_length)\n                \n        return max_length"}], "missing-number": [{"task_id": "missing-number", "completion": "class Solution(object):\n    def missingNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # XOR\n        # xor of all the numbers from 0 to n\n        # xor of all the numbers from 0 to n+1\n        # xor of all the numbers from 0 to n+2\n        # xor of all the numbers from 0 to n+3\n        # xor of all the numbers from 0 to n+4\n        # xor of all the numbers from 0 to n+5\n        # xor of all the numbers from 0 to n+6\n        # xor of all the numbers from 0 to n+7\n        # xor of all the numbers from 0 to n+8\n        # xor of all the numbers from 0 to n+9\n        # xor of all the numbers from 0 to n+10\n        # xor of all the numbers from 0 to n+11\n        # xor of all the numbers from 0 to n+12\n        # xor of all the numbers from 0 to n+13\n        # xor of all the numbers from 0 to n+14\n        # xor of all the numbers from 0 to n+15\n        # xor of all the numbers from 0 to n+16\n        # xor of all the numbers from 0 to n+17\n        # xor of all the numbers from 0 to n+18\n        # xor of all the numbers from 0 to n+19\n        # xor of all the numbers from 0 to n+20\n        # xor of all the numbers from 0 to n+21\n        # xor of all the numbers from 0 to n+22\n        # xor of all the numbers from 0 to n+23\n        # xor of all the numbers from 0 to n+24\n        # xor of all the numbers from 0 to n+25\n        # xor of all the numbers from 0 to n+26\n        # xor of all the numbers from 0 to n+27\n        # xor of all the numbers from 0 to n+28\n        # xor of all the numbers from 0 to n+29\n        # xor of all the numbers from 0 to n+30\n        # xor of all the numbers from 0 to n+31\n        # xor of all the numbers from 0 to n+32\n        # xor of all the numbers from 0 to n+33\n        # xor of all the numbers from 0 to n+34\n        # xor of all the numbers from 0 to n+35\n        # xor of all the numbers from 0 to n+36\n        # xor of all the numbers from 0 to n+37\n        # xor of all the numbers from 0 to n+38\n        # xor of all the numbers from 0 to n+39\n        # xor of all the numbers from 0 to n+40\n        # xor of all the numbers from 0 to n+41\n        # xor of all the numbers from 0 to n+42\n        # xor of all the numbers from 0 to n+43\n        # xor of all the numbers from 0 to n+44\n        # xor of all the numbers from 0 to n+45\n        # xor of all the numbers from 0 to n+46\n        # xor of all the numbers from 0 to n+47\n        # xor of all the numbers from 0 to n+48\n        # xor of all the numbers from 0 to n+49\n        # xor of all the numbers from 0 to n+50\n        # xor of all the numbers from 0 to n+51\n        # xor of all the numbers from 0 to n+52\n        # xor of all the numbers from 0 to n+53\n        # xor of all the numbers from 0 to n+54\n        # xor of all the numbers from 0 to n+55\n        # xor of all the numbers from 0 to n+56\n        # xor of all the numbers from 0 to n+57\n        # xor of all the numbers from 0 to n+58\n        # xor of all the numbers from 0 to n+59\n        # xor of all the numbers from 0"}], "word-ladder": [{"task_id": "word-ladder", "completion": "class Solution(object):\n    def ladderLength(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\"\n        \n        # Create a set of words from the wordList\n        wordSet = set(wordList)\n        \n        # If the endWord is not in the wordSet, return 0\n        if endWord not in wordSet:\n            return 0\n        \n        # Create a queue and add the beginWord\n        queue = collections.deque([beginWord])\n        \n        # Create a set to keep track of visited words\n        visited = set()\n        \n        # Initialize the number of transformations to 1\n        transformations = 1\n        \n        # While the queue is not empty\n        while queue:\n            # Get the number of words in the queue\n            numWords = len(queue)\n            \n            # Iterate through the number of words in the queue\n            for _ in range(numWords):\n                # Pop the first word from the queue\n                word = queue.popleft()\n                \n                # If the word is the endWord, return the number of transformations\n                if word == endWord:\n                    return transformations\n                \n                # Add the word to the visited set\n                visited.add(word)\n                \n                # Generate all possible words by changing one letter at a time\n                for i in range(len(word)):\n                    # Generate a new word by changing one letter at a time\n                    newWord = word[:i] + '*' + word[i+1:]\n                    \n                    # If the new word is in the wordSet, add it to the queue\n                    if newWord in wordSet:\n                        queue.append(newWord)\n                        \n                        # Remove the new word from the wordSet\n                        wordSet.remove(newWord)\n            \n            # Increment the number of transformations\n            transformations += 1\n        \n        # Return 0 if the endWord is not in the wordSet\n        return 0"}], "add-binary": [{"task_id": "add-binary", "completion": "class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        \n        if len(a) < len(b):\n            a, b = b, a\n        \n        a = a[::-1]\n        b = b[::-1]\n        \n        carry = 0\n        res = \"\"\n        \n        for i in range(len(a)):\n            if i < len(b):\n                if a[i] == \"1\" and b[i] == \"1\":\n                    if carry == 1:\n                        res += \"1\"\n                    else:\n                        res += \"0\"\n                        carry = 1\n                elif a[i] == \"1\" or b[i] == \"1\":\n                    if carry == 1:\n                        res += \"0\"\n                    else:\n                        res += \"1\"\n                else:\n                    if carry == 1:\n                        res += \"1\"\n                    else:\n                        res += \"0\"\n            else:\n                if a[i] == \"1\":\n                    if carry == 1:\n                        res += \"0\"\n                    else:\n                        res += \"1\"\n                else:\n                    if carry == 1:\n                        res += \"1\"\n                    else:\n                        res += \"0\"\n        \n        if carry == 1:\n            res += \"1\"\n        \n        return res[::-1]"}], "find-first-and-last-position-of-element-in-sorted-array": [{"task_id": "find-first-and-last-position-of-element-in-sorted-array", "completion": "class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums) == 0:\n            return [-1,-1]\n        \n        left = 0\n        right = len(nums)-1\n        \n        while left < right:\n            mid = (left + right) // 2\n            if nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid\n        \n        if nums[left] != target:\n            return [-1,-1]\n        \n        start = left\n        right = len(nums)-1\n        \n        while left < right:\n            mid = (left + right) // 2 + 1\n            if nums[mid] > target:\n                right = mid - 1\n            else:\n                left = mid\n        \n        return [start, right]"}], "remove-duplicates-from-sorted-array": [{"task_id": "remove-duplicates-from-sorted-array", "completion": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 0:\n            return 0\n        \n        i = 0\n        j = 1\n        \n        while j < len(nums):\n            if nums[i] != nums[j]:\n                i += 1\n                nums[i] = nums[j]\n            j += 1\n        \n        return i + 1"}], "jump-game-ii": [{"task_id": "jump-game-ii", "completion": "class Solution(object):\n    def jump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(nums)\n        if n == 1:\n            return 0\n        \n        max_reach = nums[0]\n        jumps = 1\n        curr_reach = 0\n        \n        for i in range(1, n):\n            if i > max_reach:\n                jumps += 1\n                max_reach = curr_reach\n            curr_reach = max(curr_reach, i + nums[i])\n        \n        return jumps"}], "best-time-to-buy-and-sell-stock-iv": [{"task_id": "best-time-to-buy-and-sell-stock-iv", "completion": "class Solution(object):\n    def maxProfit(self, k, prices):\n        \"\"\"\n        :type k: int\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if k >= len(prices)//2:\n            return sum(max(prices[i]-prices[i-1] for i in range(1, len(prices)) if prices[i] > prices[i-1]) )\n        \n        dp = [0] * (k+1)\n        for price in prices:\n            for i in range(1, k+1):\n                dp[i] = max(dp[i], dp[i-1] + price)\n                if i >= 2:\n                    dp[i] = max(dp[i], dp[i-2] - price)\n        return dp[k]"}], "convert-a-number-to-hexadecimal": [{"task_id": "convert-a-number-to-hexadecimal", "completion": "class Solution(object):\n    def toHex(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        \n        if num < 0:\n            num = 2**32 + num\n        \n        hex_dict = {10:\"a\", 11:\"b\", 12:\"c\", 13:\"d\", 14:\"e\", 15:\"f\"}\n        hex_str = \"\"\n        \n        while num > 0:\n            rem = num % 16\n            if rem < 10:\n                hex_str = str(rem) + hex_str\n            else:\n                hex_str = hex_dict[rem] + hex_str\n            num = num // 16\n        \n        return hex_str"}], "first-unique-character-in-a-string": [{"task_id": "first-unique-character-in-a-string", "completion": "class Solution(object):\n    def firstUniqChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # Create a hashmap with key as the character and value as the index\n        # Iterate through the string and update the hashmap\n        # Iterate through the hashmap again and return the index of the first character with value 1\n        \n        hashmap = {}\n        \n        for i in range(len(s)):\n            if s[i] not in hashmap:\n                hashmap[s[i]] = i\n            else:\n                hashmap[s[i]] = -1\n        \n        for i in hashmap.values():\n            if i != -1:\n                return i\n        \n        return -1"}], "contains-duplicate-iii": [{"task_id": "contains-duplicate-iii", "completion": "class Solution(object):\n    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff):\n        \"\"\"\n        :type nums: List[int]\n        :type indexDiff: int\n        :type valueDiff: int\n        :rtype: bool\n        \"\"\"\n        \n        if indexDiff < 0 or valueDiff < 0:\n            return False\n        \n        if indexDiff >= len(nums):\n            return False\n        \n        if indexDiff == 0:\n            return True\n        \n        nums.sort()\n        \n        for i in range(len(nums)-1):\n            if nums[i+1] - nums[i] <= valueDiff:\n                return True\n            \n            if i + indexDiff >= len(nums):\n                break\n            \n            if nums[i+indexDiff] - nums[i] <= valueDiff:\n                return True\n            \n        return False"}], "sort-colors": [{"task_id": "sort-colors", "completion": "class Solution(object):\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,"}], "max-consecutive-ones": [{"task_id": "max-consecutive-ones", "completion": "class Solution(object):\n    def findMaxConsecutiveOnes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_count = 0\n        count = 0\n        \n        for num in nums:\n            if num == 1:\n                count += 1\n            else:\n                count = 0\n            max_count = max(max_count, count)\n        return max_count"}], "count-complete-tree-nodes": [{"task_id": "count-complete-tree-nodes", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def countNodes(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        left = root\n        right = root\n        \n        left_height = 0\n        right_height = 0\n        \n        while left:\n            left = left.left\n            left_height += 1\n        \n        while right:\n            right = right.right\n            right_height += 1\n        \n        if left_height == right_height:\n            return (2**left_height) - 1\n        \n        return 1 + self.countNodes(root.left) + self.countNodes(root.right)"}], "add-strings": [{"task_id": "add-strings", "completion": "class Solution(object):\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        if len(num1) < len(num2):\n            num1, num2 = num2, num1\n        \n        num1 = num1[::-1]\n        num2 = num2[::-1]\n        \n        carry = 0\n        res = \"\"\n        \n        for i in range(len(num1)):\n            if i < len(num2):\n                val = int(num1[i]) + int(num2[i]) + carry\n            else:\n                val = int(num1[i]) + carry\n            \n            carry = val // 10\n            res += str(val % 10)\n        \n        if carry:\n            res += str(carry)\n        \n        return res[::-1]"}], "basic-calculator": [{"task_id": "basic-calculator", "completion": "class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        num = 0\n        sign = 1\n        for i in range(len(s)):\n            if s[i].isdigit():\n                num = num * 10 + int(s[i])\n            if s[i] in \"+-(\":\n                stack.append(num * sign)\n                num = 0\n                sign = 1 if s[i] == \"+\" else -1\n            if s[i] == \")\":\n                num = stack.pop()\n                num += stack.pop()\n                stack.append(num)\n        return sum(stack)"}], "ipo": [{"task_id": "ipo", "completion": "class Solution(object):\n    def findMaximizedCapital(self, k, w, profits, capital):\n        \"\"\"\n        :type k: int\n        :type w: int\n        :type profits: List[int]\n        :type capital: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # sort capital and profits\n        # if capital[i] <= w, then profits[i]\n        # else profits[i] = 0\n        # if k > 0, then profits[i]\n        # else profits[i] = -profits[i]\n        # if profits[i] > 0, then profits[i]\n        # else profits[i] = -profits[i]\n        # if profits[i] < 0, then profits[i]\n        # else profits[i] = profits[i]\n        # if profits[i] = 0, then profits[i] = 0\n        # if profits[i] < 0, then profits[i] = -profits[i]\n        # if profits[i] = 0, then profits[i] = 0\n        # if profits[i] > 0, then profits[i] = profits[i]\n        # if profits[i] = 0, then profits[i] = 0\n        # if profits[i] > 0, then profits[i] = profits[i]\n        # if profits[i] = 0, then profits[i] = 0\n        # if profits[i] > 0, then profits[i] = profits[i]\n        # if profits[i] = 0, then profits[i] = 0\n        # if profits[i] > 0, then profits[i] = profits[i]\n        # if profits[i] = 0, then profits[i] = 0\n        # if profits[i] > 0, then profits[i] = profits[i]\n        # if profits[i] = 0, then profits[i] = 0\n        # if profits[i] > 0, then profits[i] = profits[i]\n        # if profits[i] = 0, then profits[i] = 0\n        # if profits[i] > 0, then profits[i] = profits[i]\n        # if profits[i] = 0, then profits[i] = 0\n        # if profits[i] > 0, then profits[i] = profits[i]\n        # if profits[i] = 0, then profits[i] = 0\n        # if profits[i] > 0, then profits[i] = profits[i]\n        # if profits[i] = 0, then profits[i] = 0\n        # if profits[i] > 0, then profits[i] = profits[i]\n        # if profits[i] = 0, then profits[i] = 0\n        # if profits[i] > 0, then profits[i] = profits[i]\n        # if profits[i] = 0, then profits[i] = 0\n        # if profits[i] > 0, then profits[i] = profits[i]\n        # if profits[i] = 0, then profits[i] = 0\n        # if profits[i] > 0, then profits[i] = profits[i]\n        # if profits[i] = 0, then profits[i] = 0\n        # if profits[i] > 0, then profits[i] = profits[i]\n        # if profits[i] = 0, then profits[i] = 0\n        # if profits[i] > 0, then profits[i] = profits[i]\n        # if profits[i] = 0, then profits[i] = 0\n        # if profits[i] > 0, then profits[i] = profits[i]\n        # if profits[i] = 0, then profits[i] = 0\n        # if profits[i] > 0, then profits[i] = profits[i]\n        # if profits[i] = 0, then profits[i] = 0\n        # if profits[i] > 0, then profits[i] = profits[i]\n        # if profits[i] = 0, then profits[i] = 0\n        # if profits[i] > 0, then profits[i] = profits[i]\n        # if profits[i] = 0, then profits[i] = 0\n        # if profits[i] > 0, then profits[i] = profits[i]\n        # if profits[i] = 0, then profits[i] = 0\n        # if profits[i] > 0, then profits[i] = profits[i]\n        # if profits[i] = 0, then profits[i] = 0\n        # if profits[i] > 0, then profits[i] = profits[i]\n        # if profits"}], "valid-parentheses": [{"task_id": "valid-parentheses", "completion": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        stack = []\n        d = {\n            ')':'(',\n            ']':'[',\n            '}':'{'\n        }\n        \n        for i in s:\n            if i in d:\n                if stack and stack[-1] == d[i]:\n                    stack.pop()\n                else:\n                    return False\n            else:\n                stack.append(i)\n        \n        return True if not stack else False"}], "next-permutation": [{"task_id": "next-permutation", "completion": "class Solution(object):\n    def nextPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # find the index of the first number that is smaller than its next number\n        # if no such number exists, then the array is sorted in descending order\n        # if the array is sorted in descending order, then the next permutation is the lowest possible permutation\n        # if the array is sorted in ascending order, then the next permutation is the highest possible permutation\n        # if the array is sorted in ascending order, then the next permutation is the lowest possible permutation\n        # if the array is sorted in ascending order, then the next permutation is the highest possible permutation\n        # if the array is sorted in ascending order, then the next permutation is the lowest possible permutation\n        # if the array is sorted in ascending order, then the next permutation is the highest possible permutation\n        # if the array is sorted in ascending order, then the next permutation is the lowest possible permutation\n        # if the array is sorted in ascending order, then the next permutation is the highest possible permutation\n        # if the array is sorted in ascending order, then the next permutation is the lowest possible permutation\n        # if the array is sorted in ascending order, then the next permutation is the highest possible permutation\n        # if the array is sorted in ascending order, then the next permutation is the lowest possible permutation\n        # if the array is sorted in ascending order, then the next permutation is the highest possible permutation\n        # if the array is sorted in ascending order, then the next permutation is the lowest possible permutation\n        # if the array is sorted in ascending order, then the next permutation is the highest possible permutation\n        # if the array is sorted in ascending order, then the next permutation is the lowest possible permutation\n        # if the array is sorted in ascending order, then the next permutation is the highest possible permutation\n        # if the array is sorted in ascending order, then the next permutation is the lowest possible permutation\n        # if the array is sorted in ascending order, then the next permutation is the highest possible permutation\n        # if the array is sorted in ascending order, then the next permutation is the lowest possible permutation\n        # if the array is sorted in ascending order, then the next permutation is the highest possible permutation\n        # if the array is sorted in ascending order, then the next permutation is the lowest possible permutation\n        # if the array is sorted in ascending order, then the next permutation is the highest possible permutation\n        # if the array is sorted in ascending order, then the next permutation is the lowest possible permutation\n        # if the array is sorted in ascending order, then the next permutation is the highest possible permutation\n        # if the array is sorted in ascending order, then the next permutation is the lowest possible permutation\n        # if the array is sorted in ascending order, then the next permutation is the highest possible permutation\n        # if the array is sorted in ascending order, then the next permutation is the lowest possible permutation\n        # if the array is sorted in ascending order, then the next permutation is the highest possible permutation\n        # if the array is sorted in ascending order, then the next permutation is the lowest possible permutation\n        # if the array is sorted in ascending order, then the next permutation is the highest possible permutation\n        # if the array is sorted in ascending order, then the next permutation is the lowest possible permutation\n        # if the array is sorted in ascending order, then the next permutation is the highest possible permutation\n        # if the array is sorted in ascending order, then the next permutation is the lowest possible permutation\n        # if the array is sorted in ascending order, then the next permutation is the highest possible permutation\n        # if the array is sorted in ascending order, then the next permutation is the lowest possible permutation\n        # if the array is sorted in ascending order, then the next permutation is the highest possible permutation\n        # if the array is sorted in ascending order, then the next permutation is the lowest possible permutation\n        # if the array is sorted in ascending order, then the next permutation is the highest possible permutation\n        # if the array is sorted in ascending order, then the next permutation is the lowest possible permutation\n        # if the array is sorted in ascending order, then the next permutation is the highest possible permutation\n        # if the array is sorted in ascending order, then the next permutation is the lowest possible permutation\n        # if the array"}], "contains-duplicate-ii": [{"task_id": "contains-duplicate-ii", "completion": "class Solution(object):\n    def containsNearbyDuplicate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        \n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        \n        # Hashmap\n        # Store the index of the number in the hashmap\n        # If the number is already in the hashmap, check if the index is within the range of k\n        # If it is, return True\n        # If it is not, add the number to the hashmap\n        \n        hashmap = {}\n        \n        for i in range(len(nums)):\n            if nums[i] in hashmap:\n                if i - hashmap[nums[i]] <= k:\n                    return True\n            hashmap[nums[i]] = i\n        \n        return False"}], "maximum-gap": [{"task_id": "maximum-gap", "completion": "class Solution(object):\n    def maximumGap(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 2:\n            return 0\n        \n        nums.sort()\n        max_gap = 0\n        for i in range(1, len(nums)):\n            max_gap = max(max_gap, nums[i] - nums[i-1])\n        \n        return max_gap"}], "binary-tree-level-order-traversal": [{"task_id": "binary-tree-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        \n        while queue:\n            level = []\n            for node in queue:\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.append(level)\n            queue = queue[len(level):]\n        \n        return result"}], "couples-holding-hands": [{"task_id": "couples-holding-hands", "completion": "class Solution(object):\n    def minSwapsCouples(self, row):\n        \"\"\"\n        :type row: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(row)\n        if n == 2:\n            return 0\n        \n        couples = [(row[i], i) for i in range(n//2)]\n        couples.sort()\n        \n        swaps = 0\n        for i in range(0, n//2):\n            if couples[i][1] % 2 == 1:\n                if couples[i][0] + 1 != couples[i+1][0]:\n                    swaps += 1\n                    couples[i+1] = couples[i]\n            else:\n                if couples[i][0] + 1 != couples[i+1][0]:\n                    swaps += 1\n                    couples[i+1] = couples[i]\n        \n        return swaps"}], "interleaving-string": [{"task_id": "interleaving-string", "completion": "class Solution(object):\n    def isInterleave(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) + len(s2) != len(s3):\n            return False\n        \n        if s1 == s2 and s1 == s3:\n            return True\n        \n        if s1 == s2:\n            return s3 == s1\n        \n        if s2 == s3:\n            return s3 == s2\n        \n        dp = [[False] * (len(s2) + 1) for _ in range(len(s1) + 1)]\n        \n        dp[0][0] = True\n        \n        for i in range(1, len(s1) + 1):\n            if s1[i - 1] == s3[i - 1]:\n                dp[i][0] = True\n            else:\n                break\n        \n        for j in range(1, len(s2) + 1):\n            if s2[j - 1] == s3[j - 1]:\n                dp[0][j] = True\n            else:\n                break\n        \n        for i in range(1, len(s1) + 1):\n            for j in range(1, len(s2) + 1):\n                if s1[i - 1] == s3[i + j - 1] and dp[i - 1][j]:\n                    dp[i][j] = True\n                if s2[j - 1] == s3[i + j - 1] and dp[i][j - 1]:\n                    dp[i][j] = True\n        \n        return dp[len(s1)][len(s2)]"}], "assign-cookies": [{"task_id": "assign-cookies", "completion": "class Solution(object):\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        \n        g.sort()\n        s.sort()\n        i = 0\n        j = 0\n        while i < len(g) and j < len(s):\n            if s[j] >= g[i]:\n                i += 1\n            j += 1\n        return i"}], "keyboard-row": [{"task_id": "keyboard-row", "completion": "class Solution(object):\n    def findWords(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        row1 = set(\"qwertyuiop\")\n        row2 = set(\"asdfghjkl\")\n        row3 = set(\"zxcvbnm\")\n        \n        res = []\n        \n        for word in words:\n            if word[0] in row1:\n                r = row1\n            elif word[0] in row2:\n                r = row2\n            else:\n                r = row3\n            \n            for c in word:\n                if c not in r:\n                    break\n            else:\n                res.append(word)\n        \n        return res"}], "reverse-linked-list-ii": [{"task_id": "reverse-linked-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseBetween(self, head, left, right):\n        \"\"\"\n        :type head: ListNode\n        :type left: int\n        :type right: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if left == right:\n            return head\n        \n        dummy = ListNode(0, head)\n        prev = dummy\n        curr = head\n        count = 1\n        \n        while count < left:\n            prev = curr\n            curr = curr.next\n            count += 1\n        \n        tail = curr\n        \n        while count <= right:\n            temp = curr.next\n            curr.next = prev\n            prev = curr\n            curr = temp\n            count += 1\n        \n        tail.next = curr\n        head = dummy.next\n        prev.next = curr\n        \n        return head"}], "shortest-palindrome": [{"task_id": "shortest-palindrome", "completion": "class Solution(object):\n    def shortestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # reverse the string\n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # add the prefix to the end of the string\n        \n        # reverse the string\n        s = s[::-1]\n        \n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # add the prefix to the end of the string\n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # add the prefix to the end of the string\n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # add the prefix to the end of the string\n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # add the prefix to the end of the string\n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # add the prefix to the end of the string\n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # add the prefix to the end of the string\n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # add the prefix to the end of the string\n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # add the prefix to the end of the string\n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # add the prefix to the end of the string\n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # add the prefix to the end of the string\n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # add the prefix to the end of the string\n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # add the prefix to the end of the string\n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # add the prefix to the end of the string\n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # add the prefix to the end of the string\n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # add the prefix to the end of the string\n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # add the prefix to the end of the string\n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # add the prefix to the end of the string\n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # add the prefix to the end of the string\n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # add the prefix to the end of the string\n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # add the prefix to the end of the string\n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # add the prefix to the end of the string\n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # add the prefix to the end of the string\n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # add the prefix to the end of the string\n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # add the prefix to the end of the string\n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # add the prefix to the end of the string\n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # add the prefix to the end of the string\n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # add the prefix to the end of the string\n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # add the prefix to the end of the string\n        # find the longest palindrome that is a prefix"}], "minimum-window-substring": [{"task_id": "minimum-window-substring", "completion": "class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        if len(t) > len(s):\n            return \"\"\n        \n        t_count = {}\n        for c in t:\n            t_count[c] = t_count.get(c, 0) + 1\n        \n        left = 0\n        right = 0\n        min_window = \"\"\n        min_window_len = float('inf')\n        window_count = 0\n        \n        while right < len(s):\n            if s[right] in t_count:\n                t_count[s[right]] -= 1\n                if t_count[s[right]] >= 0:\n                    window_count += 1\n            \n            while window_count == len(t_count):\n                if right - left + 1 < min_window_len:\n                    min_window = s[left:right+1]\n                    min_window_len = right - left + 1\n                \n                if s[left] in t_count:\n                    t_count[s[left]] += 1\n                    if t_count[s[left]] > 0:\n                        window_count -= 1\n                \n                left += 1\n            \n            right += 1\n        \n        return min_window"}], "self-crossing": [{"task_id": "self-crossing", "completion": "class Solution(object):\n    def isSelfCrossing(self, distance):\n        \"\"\"\n        :type distance: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        if len(distance) < 4:\n            return False\n        \n        if distance[0] >= distance[3] and distance[1] <= distance[2]:\n            return True\n        \n        if distance[0] <= distance[3] and distance[1] >= distance[2]:\n            return True\n        \n        if distance[0] > distance[3] and distance[1] <= distance[2] and distance[4] >= distance[5]:\n            return True\n        \n        if distance[0] <= distance[3] and distance[1] > distance[2] and distance[4] <= distance[5]:\n            return True\n        \n        if distance[0] > distance[3] and distance[1] > distance[2] and distance[4] >= distance[5] and distance[6] >= distance[7]:\n            return True\n        \n        return False"}], "remove-duplicates-from-sorted-list": [{"task_id": "remove-duplicates-from-sorted-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        curr = head\n        while curr:\n            if curr.next and curr.val == curr.next.val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        return head"}], "longest-palindrome": [{"task_id": "longest-palindrome", "completion": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. Create a hashmap to store the frequency of each character in the string\n        # 2. Iterate through the hashmap and add the frequency to the result\n        # 3. If the frequency is odd, add 1 to the result\n        # 4. Return the result\n        \n        hashmap = {}\n        result = 0\n        \n        for char in s:\n            if char in hashmap:\n                hashmap[char] += 1\n            else:\n                hashmap[char] = 1\n        \n        for value in hashmap.values():\n            if value % 2 == 0:\n                result += value\n            else:\n                result += value - 1\n        \n        if result < len(s):\n            result += 1\n        \n        return result"}], "construct-binary-tree-from-inorder-and-postorder-traversal": [{"task_id": "construct-binary-tree-from-inorder-and-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not inorder:\n            return None\n        \n        root = TreeNode(postorder[-1])\n        root_index = inorder.index(root.val)\n        \n        root.left = self.buildTree(inorder[:root_index], postorder[:root_index])\n        root.right = self.buildTree(inorder[root_index+1:], postorder[root_index:-1])\n        \n        return root"}], "cut-off-trees-for-golf-event": [{"task_id": "cut-off-trees-for-golf-event", "completion": "class Solution(object):\n    def cutOffTree(self, forest):\n        \"\"\"\n        :type forest: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # get all the trees in the forest\n        trees = []\n        for row in forest:\n            for tree in row:\n                if tree > 1:\n                    trees.append(tree)\n        \n        # sort the trees in ascending order\n        trees.sort()\n        \n        # start from the top left corner\n        i = 0\n        j = 0\n        steps = 0\n        \n        # move through the forest\n        while i < len(forest) and j < len(forest[0]):\n            # if there is no tree at the current position, move to the next position\n            if forest[i][j] == 0:\n                i += 1\n                j += 1\n                continue\n            \n            # move to the next tree\n            steps += self.move(forest, i, j)\n            \n            # if we have reached the end of the forest, return the number of steps\n            if i == len(forest) - 1 and j == len(forest[0]) - 1:\n                return steps\n            \n            # move to the next tree\n            i += 1\n            \n        # if we have not reached the end of the forest, return -1\n        return -1\n        \n    def move(self, forest, i, j):\n        # move to the next tree\n        steps = 0\n        while i < len(forest) and j < len(forest[0]):\n            if forest[i][j] == 0:\n                i += 1\n                j += 1\n                continue\n            steps += 1\n            i += 1\n            j += 1\n        return steps"}], "minimum-depth-of-binary-tree": [{"task_id": "minimum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def minDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        if not root.left:\n            return self.minDepth(root.right) + 1\n        \n        if not root.right:\n            return self.minDepth(root.left) + 1\n        \n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1"}], "count-of-range-sum": [{"task_id": "count-of-range-sum", "completion": "class Solution(object):\n    def countRangeSum(self, nums, lower, upper):\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. Calculate the prefix sum\n        # 2. Sort the prefix sum\n        # 3. Use two pointers to find the range sum\n        # 4. Use a hashmap to store the frequency of prefix sum\n        # 5. Iterate the prefix sum and find the range sum\n        # 6. Return the frequency of range sum\n        \n        # 1. Calculate the prefix sum\n        n = len(nums)\n        prefix_sum = [0] * (n + 1)\n        for i in range(n):\n            prefix_sum[i + 1] = prefix_sum[i] + nums[i]\n        \n        # 2. Sort the prefix sum\n        prefix_sum.sort()\n        \n        # 3. Use two pointers to find the range sum\n        # 4. Use a hashmap to store the frequency of prefix sum\n        # 5. Iterate the prefix sum and find the range sum\n        # 6. Return the frequency of range sum\n        ans = 0\n        prefix_sum_dict = {}\n        for i in prefix_sum:\n            ans += prefix_sum_dict.get(i - lower, 0)\n            ans += prefix_sum_dict.get(i - upper, 0)\n            prefix_sum_dict[i] = prefix_sum_dict.get(i, 0) + 1\n        \n        return ans"}], "arranging-coins": [{"task_id": "arranging-coins", "completion": "class Solution(object):\n    def arrangeCoins(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # Approach 1:\n        # return int((2*n)**0.5 - 0.5)\n        \n        # Approach 2:\n        return int((8*n+1)**0.5 - 1)//2"}], "longest-uncommon-subsequence-i": [{"task_id": "longest-uncommon-subsequence-i", "completion": "class Solution(object):\n    def findLUSlength(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: int\n        \"\"\"\n        \n        if a == b:\n            return -1\n        else:\n            return max(len(a), len(b))"}], "binary-tree-level-order-traversal-ii": [{"task_id": "binary-tree-level-order-traversal-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        \n        while queue:\n            temp = []\n            for node in queue:\n                temp.append(node.val)\n                if node.left:\n                    temp.append(node.left)\n                if node.right:\n                    temp.append(node.right)\n            queue = temp\n            result.append(temp)\n        \n        return result[::-1]"}], "palindrome-number": [{"task_id": "palindrome-number", "completion": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        \n        if x < 0:\n            return False\n        \n        temp = x\n        rev = 0\n        \n        while temp > 0:\n            rev = rev * 10 + temp % 10\n            temp = temp // 10\n        \n        return rev == x"}], "decode-ways": [{"task_id": "decode-ways", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s[0] == '0':\n            return 0\n        \n        if len(s) == 1:\n            return 1\n        \n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, len(s) + 1):\n            if s[i - 1] != '0':\n                dp[i] = dp[i - 1]\n            if s[i - 2] != '0' and int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        \n        return dp[-1]"}], "is-subsequence": [{"task_id": "is-subsequence", "completion": "class Solution(object):\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        i = 0\n        j = 0\n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n            j += 1\n        return i == len(s)"}], "gray-code": [{"task_id": "gray-code", "completion": "class Solution(object):\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if n == 0:\n            return [0]\n        \n        if n == 1:\n            return [0,1]\n        \n        res = [0]\n        for i in range(1,n):\n            res.append(res[-1] | (1 << i))\n        \n        return res"}], "climbing-stairs": [{"task_id": "climbing-stairs", "completion": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        \n        a = 1\n        b = 2\n        for i in range(3, n+1):\n            c = a + b\n            a = b\n            b = c\n        return c"}], "word-break": [{"task_id": "word-break", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words\n        # dp[i] = False otherwise\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # return dp[-1]\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words\n        # dp[i] = False otherwise\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # return dp[-1]\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words\n        # dp[i] = False otherwise\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # return dp[-1]\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words\n        # dp[i] = False otherwise\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # return dp[-1]\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words\n        # dp[i] = False otherwise\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # return dp[-1]\n        \n        dp = [False] * (len(s) + 1)\n        dp[0] = True\n        \n        for i in range(1, len(s) + 1):\n            for j in range(i):\n                if dp[j] and s[j:i] in wordDict:\n                    dp[i] = True\n                    break\n        \n        return dp[-1]"}], "validate-binary-search-tree": [{"task_id": "validate-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def isValidBSTUtil(root, min_val, max_val):\n            if root is None:\n                return True\n            \n            if root.val <= min_val or root.val >= max_val:\n                return False\n            \n            return isValidBSTUtil(root.left, min_val, root.val) and isValidBSTUtil(root.right, root.val, max_val)\n        \n        return isValidBSTUtil(root, float('-inf'), float('inf'))"}], "insert-interval": [{"task_id": "insert-interval", "completion": "class Solution(object):\n    def insert(self, intervals, newInterval):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type newInterval: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # edge case\n        if not intervals:\n            return [newInterval]\n        \n        # if newInterval is empty\n        if not newInterval:\n            return intervals\n        \n        # if newInterval is not empty\n        if newInterval[0] > intervals[-1][1]:\n            intervals.append(newInterval)\n            return intervals\n        \n        # if newInterval is not empty\n        if newInterval[1] < intervals[0][0]:\n            intervals.insert(0, newInterval)\n            return intervals\n        \n        # if newInterval is not empty\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[-1][1]:\n            return intervals\n        \n        # if newInterval is not empty\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[-1][0]:\n            intervals[-1][1] = newInterval[1]\n            return intervals\n        \n        # if newInterval is not empty\n        if newInterval[0] <= intervals[0][0] and newInterval[1] < intervals[-1][1]:\n            intervals[0][0] = newInterval[0]\n            return intervals\n        \n        # if newInterval is not empty\n        if newInterval[0] > intervals[0][0] and newInterval[1] >= intervals[-1][1]:\n            intervals.append(newInterval)\n            return intervals\n        \n        # if newInterval is not empty\n        if newInterval[0] > intervals[0][0] and newInterval[1] < intervals[-1][1]:\n            intervals.insert(0, newInterval)\n            return intervals\n        \n        # if newInterval is not empty\n        if newInterval[0] > intervals[0][0] and newInterval[1] >= intervals[-1][0]:\n            intervals[-1][1] = newInterval[1]\n            return intervals\n        \n        # if newInterval is not empty\n        if newInterval[0] > intervals[0][0] and newInterval[1] < intervals[-1][0]:\n            intervals[0][0] = newInterval[0]\n            return intervals\n        \n        # if newInterval is not empty\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[-1][0]:\n            intervals[0][0] = newInterval[0]\n            return intervals\n        \n        # if newInterval is not empty\n        if newInterval[0] <= intervals[0][0] and newInterval[1] < intervals[-1][0]:\n            intervals[0][0] = newInterval[0]\n            return intervals\n        \n        # if newInterval is not empty\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[-1][0]:\n            intervals[-1][1] = newInterval[1]\n            return intervals\n        \n        # if newInterval is not empty\n        if newInterval[0] <= intervals[0][0] and newInterval[1] < intervals[-1][0]:\n            intervals[0][0] = newInterval[0]\n            return intervals\n        \n        # if newInterval is not empty\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[-1][0]:\n            intervals[0][0] = newInterval[0]\n            return intervals\n        \n        # if newInterval is not empty\n        if newInterval[0] <= intervals[0][0] and newInterval[1] < intervals[-1][0]:\n            intervals[0][0] = newInterval[0]\n            return intervals\n        \n        # if newInterval is not empty\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[-1][0]:\n            intervals[-1][1] = newInterval[1]\n            return intervals\n        \n        # if newInterval is not empty\n        if newInterval[0] <= intervals[0][0] and newInterval[1] < intervals[-1][0]:\n            intervals[0][0] = newInterval[0]\n            return intervals\n        \n        # if newInterval is not empty\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[-1][0]:\n            intervals[-1][1] = newInterval[1]\n            return intervals\n        \n        # if newInterval is not empty\n        if newInterval"}], "palindrome-partitioning": [{"task_id": "palindrome-partitioning", "completion": "class Solution(object):\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def isPalindrome(s):\n            return s == s[::-1]\n        \n        if len(s) == 0:\n            return [[]]\n        \n        if len(s) == 1:\n            return [[s]]\n        \n        res = []\n        for i in range(1, len(s)+1):\n            if isPalindrome(s[:i]):\n                for sub in self.partition(s[i:]):\n                    res.append([s[:i]] + sub)\n        \n        return res"}], "smallest-range-covering-elements-from-k-lists": [{"task_id": "smallest-range-covering-elements-from-k-lists", "completion": "class Solution(object):\n    def smallestRange(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        min_val = float('inf')\n        max_val = float('-inf')\n        min_range = float('inf')\n        max_range = float('-inf')\n        min_list = []\n        max_list = []\n        for i in range(len(nums)):\n            min_val = min(min_val, nums[i][0])\n            max_val = max(max_val, nums[i][-1])\n            min_list.append(nums[i][0])\n            max_list.append(nums[i][-1])\n        min_range = min_val\n        max_range = max_val\n        min_list.sort()\n        max_list.sort()\n        i = 0\n        j = 0\n        while i < len(nums) and j < len(nums):\n            if min_list[i] <= max_list[j]:\n                min_range = min(min_range, max_list[j] - min_list[i])\n                i += 1\n            else:\n                j += 1\n        return [min_range, max_range]"}], "poor-pigs": [{"task_id": "poor-pigs", "completion": "class Solution(object):\n    def poorPigs(self, buckets, minutesToDie, minutesToTest):\n        \"\"\"\n        :type buckets: int\n        :type minutesToDie: int\n        :type minutesToTest: int\n        :rtype: int\n        \"\"\"\n        \n        # 1000 buckets, 15 minutes, 30 minutes\n        # 1000 / 15 + 1 = 67\n        # 67 * 15 = 990\n        # 990 / 30 + 1 = 34\n        # 34 * 30 = 960\n        # 960 / 15 + 1 = 67\n        # 67 * 15 = 990\n        # 990 / 30 + 1 = 34\n        # 34 * 30 = 960\n        # 960 / 15 + 1 = 67\n        # 67 * 15 = 990\n        # 990 / 30 + 1 = 34\n        # 34 * 30 = 960\n        # 960 / 15 + 1 = 67\n        # 67 * 15 = 990\n        # 990 / 30 + 1 = 34\n        # 34 * 30 = 960\n        # 960 / 15 + 1 = 67\n        # 67 * 15 = 990\n        # 990 / 30 + 1 = 34\n        # 34 * 30 = 960\n        # 960 / 15 + 1 = 67\n        # 67 * 15 = 990\n        # 990 / 30 + 1 = 34\n        # 34 * 30 = 960\n        # 960 / 15 + 1 = 67\n        # 67 * 15 = 990\n        # 990 / 30 + 1 = 34\n        # 34 * 30 = 960\n        # 960 / 15 + 1 = 67\n        # 67 * 15 = 990\n        # 990 / 30 + 1 = 34\n        # 34 * 30 = 960\n        # 960 / 15 + 1 = 67\n        # 67 * 15 = 990\n        # 990 / 30 + 1 = 34\n        # 34 * 30 = 960\n        # 960 / 15 + 1 = 67\n        # 67 * 15 = 990\n        # 990 / 30 + 1 = 34\n        # 34 * 30 = 960\n        # 960 / 15 + 1 = 67\n        # 67 * 15 = 990\n        # 990 / 30 + 1 = 34\n        # 34 * 30 = 960\n        # 960 / 15 + 1 = 67\n        # 67 * 15 = 990\n        # 990 / 30 + 1 = 34\n        # 34 * 30 = 960\n        # 960 / 15 + 1 = 67\n        # 67 * 15 = 990\n        # 990 / 30 + 1 = 34\n        # 34 * 30 = 960\n        # 960 / 15 + 1 = 67\n        # 67 * 15 = 990\n        # 990 / 30 + 1 = 34\n        # 34 * 30 = 960\n        # 960 / 15 + 1 = 67\n        # 67 * 15 = 990\n        # 990 / 30 + 1 = 34\n        # 34 * 30 = 960\n        # 960 / 15 + 1 = 67\n        # 67 * 15 = 990\n        # 990 / 30 + 1 = 34\n        # 34 * 30 = 960\n        # 960 / 15 + 1 = 67\n        # 67 * 15 = 990\n        # 990 / 30 + 1 ="}], "swim-in-rising-water": [{"task_id": "swim-in-rising-water", "completion": "class Solution(object):\n    def swimInWater(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        if n == 1:\n            return grid[0][0]\n        \n        # min heap\n        heap = [(grid[0][0], 0, 0)]\n        visited = set()\n        visited.add((0, 0))\n        res = 0\n        \n        while heap:\n            curr_time, x, y = heapq.heappop(heap)\n            res = max(res, curr_time)\n            if x == n - 1 and y == n - 1:\n                return res\n            \n            for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                new_x, new_y = x + dx, y + dy\n                if new_x < 0 or new_x >= n or new_y < 0 or new_y >= n or (new_x, new_y) in visited:\n                    continue\n                visited.add((new_x, new_y))\n                heapq.heappush(heap, (grid[new_x][new_y], new_x, new_y))\n        \n        return res"}], "unique-paths": [{"task_id": "unique-paths", "completion": "class Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j]\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j]\n        # dp"}], "multiply-strings": [{"task_id": "multiply-strings", "completion": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        if num1 == \"0\" or num2 == \"0\":\n            return \"0\"\n        \n        num1 = num1[::-1]\n        num2 = num2[::-1]\n        \n        res = [0] * (len(num1) + len(num2))\n        \n        for i in range(len(num1)):\n            for j in range(len(num2)):\n                res[i+j] += int(num1[i]) * int(num2[j])\n                \n        for i in range(len(res)-1):\n            res[i+1] += res[i] // 10\n            res[i] = res[i] % 10\n            \n        res = res[::-1]\n        \n        i = 0\n        while i < len(res) and res[i] == 0:\n            i += 1\n            \n        return ''.join(map(str, res[i:]))"}], "best-time-to-buy-and-sell-stock-iii": [{"task_id": "best-time-to-buy-and-sell-stock-iii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # if len(prices) < 2:\n        #     return 0\n        \n        # buy1 = float('inf')\n        # buy2 = float('inf')\n        # profit1 = 0\n        # profit2 = 0\n        \n        # for price in prices:\n        #     buy1 = min(buy1, price)\n        #     profit1 = max(profit1, price - buy1)\n        #     buy2 = min(buy2, price - profit1)\n        #     profit2 = max(profit2, price - buy2)\n        # return profit2\n        \n        # if len(prices) < 2:\n        #     return 0\n        \n        # buy1 = float('inf')\n        # buy2 = float('inf')\n        # profit1 = 0\n        # profit2 = 0\n        \n        # for price in prices:\n        #     buy1 = min(buy1, price)\n        #     profit1 = max(profit1, price - buy1)\n        #     buy2 = min(buy2, price - profit1)\n        #     profit2 = max(profit2, price - buy2)\n        # return profit2\n        \n        if len(prices) < 2:\n            return 0\n        \n        buy1 = float('inf')\n        buy2 = float('inf')\n        profit1 = 0\n        profit2 = 0\n        \n        for price in prices:\n            buy1 = min(buy1, price)\n            profit1 = max(profit1, price - buy1)\n            buy2 = min(buy2, price - profit1)\n            profit2 = max(profit2, price - buy2)\n        return profit2"}], "combination-sum-ii": [{"task_id": "combination-sum-ii", "completion": "class Solution(object):\n    def combinationSum2(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        res = []\n        self.dfs(candidates, target, 0, [], res)\n        return res\n        \n    def dfs(self, candidates, target, start, path, res):\n        if target == 0:\n            res.append(path[:])\n            return\n        for i in range(start, len(candidates)):\n            if i > start and candidates[i] == candidates[i-1]:\n                continue\n            if candidates[i] > target:\n                break\n            self.dfs(candidates, target - candidates[i], i + 1, path + [candidates[i]], res)"}], "detect-capital": [{"task_id": "detect-capital", "completion": "class Solution(object):\n    def detectCapitalUse(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if word.isupper() or word.islower() or word[0].isupper():\n            return True\n        elif word[1:].isupper():\n            return False\n        else:\n            return True"}], "best-time-to-buy-and-sell-stock": [{"task_id": "best-time-to-buy-and-sell-stock", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        min_price = float('inf')\n        max_profit = 0\n        \n        for price in prices:\n            min_price = min(min_price, price)\n            max_profit = max(max_profit, price - min_price)\n            \n        return max_profit"}], "binary-tree-inorder-traversal": [{"task_id": "binary-tree-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = []\n        result = []\n        curr = root\n        \n        while curr is not None or len(stack) > 0:\n            if curr is not None:\n                stack.append(curr)\n                curr = curr.left\n            else:\n                curr = stack.pop()\n                result.append(curr.val)\n                curr = curr.right\n        \n        return result"}], "construct-binary-tree-from-preorder-and-inorder-traversal": [{"task_id": "construct-binary-tree-from-preorder-and-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not preorder:\n            return None\n        \n        root = TreeNode(preorder[0])\n        root_index = inorder.index(preorder[0])\n        \n        root.left = self.buildTree(preorder[1:root_index+1], inorder[:root_index])\n        root.right = self.buildTree(preorder[root_index+1:], inorder[root_index+1:])\n        \n        return root"}], "remove-invalid-parentheses": [{"task_id": "remove-invalid-parentheses", "completion": "class Solution(object):\n    def removeInvalidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        \n        # find the number of left and right parentheses\n        left, right = 0, 0\n        for c in s:\n            if c == '(':\n                left += 1\n            elif c == ')':\n                if left > 0:\n                    left -= 1\n                else:\n                    right += 1\n        # find the number of left and right parentheses\n        # with the minimum number of removals\n        left, right = 0, 0\n        for c in s[::-1]:\n            if c == '(':\n                left += 1\n            elif c == ')':\n                if left > 0:\n                    left -= 1\n                else:\n                    right += 1\n        # find the minimum number of removals\n        # with the minimum number of left and right parentheses\n        res = []\n        self.dfs(s, 0, left, right, 0, res)\n        return res\n        \n    def dfs(self, s, start, left, right, count, res):\n        # base case\n        if left == 0 and right == 0:\n            if count == 0:\n                res.append(s)\n            return\n        \n        # recursive case\n        for i in range(start, len(s)):\n            if i > start and s[i] == s[i-1]:\n                continue\n            if s[i] == '(':\n                if left > 0:\n                    self.dfs(s[:i] + s[i+1:], i, left-1, right, count, res)\n            elif s[i] == ')':\n                if right > 0:\n                    self.dfs(s[:i] + s[i+1:], i, left, right-1, count+1, res)\n        \n        return"}], "merge-k-sorted-lists": [{"task_id": "merge-k-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        \n        if not lists:\n            return None\n        \n        if len(lists) == 1:\n            return lists[0]\n        \n        if len(lists) == 2:\n            return self.mergeTwoLists(lists[0], lists[1])\n        \n        mid = len(lists) // 2\n        left = self.mergeKLists(lists[:mid])\n        right = self.mergeKLists(lists[mid:])\n        \n        return self.mergeTwoLists(left, right)\n        \n        \n    def mergeTwoLists(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        dummy = ListNode()\n        curr = dummy\n        \n        while l1 and l2:\n            if l1.val < l2.val:\n                curr.next = l1\n                l1 = l1.next\n            else:\n                curr.next = l2\n                l2 = l2.next\n            curr = curr.next\n        \n        if l1:\n            curr.next = l1\n        elif l2:\n            curr.next = l2\n        \n        return dummy.next"}], "palindrome-partitioning-ii": [{"task_id": "palindrome-partitioning-ii", "completion": "class Solution(object):\n    def minCut(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # if len(s) <= 1:\n        #     return 0\n        \n        # dp = [0] * (len(s) + 1)\n        # dp[0] = -1\n        # for i in range(1, len(s) + 1):\n        #     dp[i] = i - 1\n        #     for j in range(i - 1):\n        #         if s[j] == s[i - 1] and (i - j <= 2 or dp[i - j - 2] != -1):\n        #             dp[i] = min(dp[i], dp[j] + 1)\n        # return dp[-1]\n        \n        # if len(s) <= 1:\n        #     return 0\n        \n        # dp = [0] * (len(s) + 1)\n        # dp[0] = -1\n        # for i in range(1, len(s) + 1):\n        #     dp[i] = i - 1\n        #     for j in range(i - 1):\n        #         if s[j] == s[i - 1] and (i - j <= 2 or dp[i - j - 2] != -1):\n        #             dp[i] = min(dp[i], dp[j] + 1)\n        # return dp[-1]\n        \n        # if len(s) <= 1:\n        #     return 0\n        \n        # dp = [0] * (len(s) + 1)\n        # dp[0] = -1\n        # for i in range(1, len(s) + 1):\n        #     dp[i] = i - 1\n        #     for j in range(i - 1):\n        #         if s[j] == s[i - 1] and (i - j <= 2 or dp[i - j - 2] != -1):\n        #             dp[i] = min(dp[i], dp[j] + 1)\n        #     if dp[i] == -1:\n        #         dp[i] = dp[i - 1] + 1\n        # return dp[-1]\n        \n        # if len(s) <= 1:\n        #     return 0\n        \n        # dp = [0] * (len(s) + 1)\n        # dp[0] = -1\n        # for i in range(1, len(s) + 1):\n        #     dp[i] = i - 1\n        #     for j in range(i - 1):\n        #         if s[j] == s[i - 1] and (i - j <= 2 or dp[i - j - 2] != -1):\n        #             dp[i] = min(dp[i], dp[j] + 1)\n        #     if dp[i] == -1:\n        #         dp[i] = dp[i - 1] + 1\n        # return dp[-1]\n        \n        # if len(s) <= 1:\n        #     return 0\n        \n        # dp = [0] * (len(s) + 1)\n        # dp[0] = -1\n        # for i in range(1, len(s) + 1):\n        #     dp[i] = i - 1\n        #     for j in range(i - 1):\n        #         if s[j] == s[i - 1] and (i - j <= 2 or dp[i - j - 2] != -1):\n        #             dp[i] = min(dp[i], dp[j] + 1)\n        #     if dp[i] == -1:\n        #         dp[i] = dp[i - 1] + 1\n        # return dp[-1]\n        \n        # if len(s) <= 1:\n        #     return 0\n        \n        # dp = [0] * (len(s) + 1)\n        # dp[0] = -1\n        # for i in range(1, len(s) + 1):\n        #     dp[i] = i -"}], "preimage-size-of-factorial-zeroes-function": [{"task_id": "preimage-size-of-factorial-zeroes-function", "completion": "class Solution(object):\n    def preimageSizeFZF(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226,"}], "palindrome-pairs": [{"task_id": "palindrome-pairs", "completion": "class Solution(object):\n    def palindromePairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # Time Complexity: O(n^2)\n        # Space Complexity: O(n)\n        \n        # Create a hashmap to store the reverse of each word\n        # and its index\n        word_map = {word[::-1]: i for i, word in enumerate(words)}\n        \n        # Create a result list\n        result = []\n        \n        # Iterate over the words in the words list\n        for i, word in enumerate(words):\n            \n            # If the word is a palindrome\n            if word in word_map:\n                \n                # If the index of the word is not the same as the index of the reverse of the word\n                if i != word_map[word]:\n                    \n                    # Add the index of the word and its reverse to the result list\n                    result.append([i, word_map[word]])\n                    \n                # If the index of the word is the same as the index of the reverse of the word\n                else:\n                    \n                    # Add the index of the reverse of the word to the result list\n                    result.append([word_map[word], i])\n            \n            # If the word is not a palindrome\n            else:\n                \n                # Iterate over the word in reverse order\n                for j in range(len(word)):\n                    \n                    # If the reversed word is in the hashmap\n                    if word[j:] in word_map:\n                        \n                        # Add the index of the word and its reverse to the result list\n                        result.append([i, word_map[word[j:]]])\n                        \n                        # If the word is a palindrome\n                        if j == 0:\n                            \n                            # Add the index of the reverse of the word to the result list\n                            result.append([word_map[word[j:][::-1]], i])\n                            \n        return result"}], "convert-sorted-array-to-binary-search-tree": [{"task_id": "convert-sorted-array-to-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedArrayToBST(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not nums:\n            return None\n        \n        mid = len(nums)//2\n        root = TreeNode(nums[mid])\n        root.left = self.sortedArrayToBST(nums[:mid])\n        root.right = self.sortedArrayToBST(nums[mid+1:])\n        \n        return root"}], "contain-virus": [{"task_id": "contain-virus", "completion": "class Solution(object):\n    def containVirus(self, isInfected):\n        \"\"\"\n        :type isInfected: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(isInfected), len(isInfected[0])\n        # 1. Find the largest region\n        largest_region = self.largest_region(isInfected)\n        # 2. Build walls\n        walls = self.build_walls(isInfected, largest_region)\n        # 3. Return the number of walls\n        return walls\n        \n    def largest_region(self, isInfected):\n        # Find the largest region\n        m, n = len(isInfected), len(isInfected[0])\n        largest_region = 0\n        for i in range(m):\n            for j in range(n):\n                if isInfected[i][j] == 1:\n                    largest_region = max(largest_region, self.dfs(isInfected, i, j))\n        return largest_region\n    \n    def dfs(self, isInfected, i, j):\n        # DFS to find the largest region\n        m, n = len(isInfected), len(isInfected[0])\n        if i < 0 or i >= m or j < 0 or j >= n or isInfected[i][j] == 0:\n            return 0\n        isInfected[i][j] = 0\n        return 1 + self.dfs(isInfected, i-1, j) + self.dfs(isInfected, i+1, j) + self.dfs(isInfected, i, j-1) + self.dfs(isInfected, i, j+1)\n    \n    def build_walls(self, isInfected, largest_region):\n        # Build walls\n        m, n = len(isInfected), len(isInfected[0])\n        walls = 0\n        for i in range(m):\n            for j in range(n):\n                if isInfected[i][j] == 1:\n                    walls += 1\n                    self.dfs(isInfected, i, j)\n                    largest_region -= 1\n                    if largest_region == 0:\n                        return walls\n        return walls"}], "longest-increasing-path-in-a-matrix": [{"task_id": "longest-increasing-path-in-a-matrix", "completion": "class Solution(object):\n    def longestIncreasingPath(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        max_len = 0\n        \n        for i in range(m):\n            for j in range(n):\n                max_len = max(max_len, self.dfs(matrix, dp, i, j, m, n))\n        \n        return max_len\n        \n    def dfs(self, matrix, dp, i, j, m, n):\n        if dp[i][j]:\n            return dp[i][j]\n        \n        max_len = 1\n        \n        if i > 0 and matrix[i][j] < matrix[i - 1][j]:\n            max_len = max(max_len, 1 + self.dfs(matrix, dp, i - 1, j, m, n))\n        \n        if i < m - 1 and matrix[i][j] < matrix[i + 1][j]:\n            max_len = max(max_len, 1 + self.dfs(matrix, dp, i + 1, j, m, n))\n        \n        if j > 0 and matrix[i][j] < matrix[i][j - 1]:\n            max_len = max(max_len, 1 + self.dfs(matrix, dp, i, j - 1, m, n))\n        \n        if j < n - 1 and matrix[i][j] < matrix[i][j + 1]:\n            max_len = max(max_len, 1 + self.dfs(matrix, dp, i, j + 1, m, n))\n        \n        dp[i][j] = max_len\n        \n        return max_len"}], "number-of-digit-one": [{"task_id": "number-of-digit-one", "completion": "class Solution(object):\n    def countDigitOne(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        ones = 0\n        power = 1\n        \n        while n >= power:\n            ones += n / power * power\n            power *= 10\n            power += n % power\n        \n        return ones"}], "word-break-ii": [{"task_id": "word-break-ii", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words\n        # dp[i] = False otherwise\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # return dp[-1]\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words\n        # dp[i] = False otherwise\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # return dp[-1]\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words\n        # dp[i] = False otherwise\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # return dp[-1]\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words\n        # dp[i] = False otherwise\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # return dp[-1]\n        \n        dp = [False] * (len(s) + 1)\n        dp[0] = True\n        \n        for i in range(1, len(s) + 1):\n            for j in range(i):\n                if dp[j] and s[j:i] in wordDict:\n                    dp[i] = True\n                    break\n        \n        if not dp[-1]:\n            return []\n        \n        res = []\n        i = len(s)\n        while i > 0:\n            if dp[i]:\n                if i == len(s):\n                    res.append(s)\n                else:\n                    res.append(s[i:])\n                break\n            i -= 1\n        \n        res.reverse()\n        return res"}], "binary-tree-zigzag-level-order-traversal": [{"task_id": "binary-tree-zigzag-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def zigzagLevelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        leftToRight = True\n        \n        while queue:\n            level = []\n            for _ in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            if not leftToRight:\n                level = level[::-1]\n            result.append(level)\n            leftToRight = not leftToRight\n        \n        return result"}], "binary-watch": [{"task_id": "binary-watch", "completion": "class Solution(object):\n    def readBinaryWatch(self, turnedOn):\n        \"\"\"\n        :type turnedOn: int\n        :rtype: List[str]\n        \"\"\"\n        \n        if turnedOn == 0:\n            return ['0:00']\n        \n        if turnedOn > 10:\n            return []\n        \n        res = []\n        for h in range(12):\n            m = turnedOn - h\n            if m < 0:\n                continue\n            if m > 5:\n                continue\n            h_str = str(h)\n            m_str = str(m)\n            if len(h_str) == 1:\n                h_str = '0' + h_str\n            if len(m_str) == 1:\n                m_str = '0' + m_str\n            res.append(h_str + ':' + m_str)\n        return res"}], "pascals-triangle": [{"task_id": "pascals-triangle", "completion": "class Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if numRows == 0:\n            return []\n        \n        if numRows == 1:\n            return [[1]]\n        \n        if numRows == 2:\n            return [[1], [1,1]]\n        \n        res = [[1], [1,1]]\n        \n        for i in range(2, numRows):\n            temp = [1]\n            for j in range(1, i):\n                temp.append(res[i-1][j] + res[i-1][j-1])\n            temp.append(1)\n            res.append(temp)\n        \n        return res"}], "power-of-three": [{"task_id": "power-of-three", "completion": "class Solution(object):\n    def isPowerOfThree(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 3 == 0:\n            n = n // 3\n        \n        return n == 1"}], "binary-tree-maximum-path-sum": [{"task_id": "binary-tree-maximum-path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxPathSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        self.max_sum = float('-inf')\n        def max_gain(node):\n            if not node:\n                return 0\n            \n            left_gain = max(max_gain(node.left), 0)\n            right_gain = max(max_gain(node.right), 0)\n            \n            self.max_sum = max(self.max_sum, left_gain + right_gain + node.val)\n            \n            return node.val + max(left_gain, right_gain)\n        \n        max_gain(root)\n        return self.max_sum"}], "trapping-rain-water-ii": [{"task_id": "trapping-rain-water-ii", "completion": "class Solution(object):\n    def trapRainWater(self, heightMap):\n        \"\"\"\n        :type heightMap: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not heightMap or not heightMap[0]:\n            return 0\n        \n        m, n = len(heightMap), len(heightMap[0])\n        heap = []\n        visited = set()\n        for i in range(m):\n            visited.add((i, 0))\n            visited.add((i, n-1))\n            heapq.heappush(heap, (heightMap[i][0], i, 0))\n            heapq.heappush(heap, (heightMap[i][n-1], i, n-1))\n        \n        for j in range(1, n-1):\n            visited.add((0, j))\n            visited.add((m-1, j))\n            heapq.heappush(heap, (heightMap[0][j], 0, j))\n            heapq.heappush(heap, (heightMap[m-1][j], m-1, j))\n        \n        ans = 0\n        while heap:\n            h, i, j = heapq.heappop(heap)\n            for ni, nj in [(i, j+1), (i, j-1), (i+1, j), (i-1, j)]:\n                if 0 <= ni < m and 0 <= nj < n and (ni, nj) not in visited:\n                    ans += max(h - heightMap[ni][nj], 0)\n                    heapq.heappush(heap, (max(h, heightMap[ni][nj]), ni, nj))\n                    visited.add((ni, nj))\n        \n        return ans"}], "valid-palindrome": [{"task_id": "valid-palindrome", "completion": "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # convert to lowercase\n        s = s.lower()\n        \n        # remove all non-alphanumeric characters\n        s = ''.join(filter(str.isalnum, s))\n        \n        # check if the string is a palindrome\n        return s == s[::-1]"}], "sliding-window-median": [{"task_id": "sliding-window-median", "completion": "class Solution(object):\n    def medianSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[float]\n        \"\"\"\n        \n        # if k == 1:\n        #     return nums\n        \n        # nums.sort()\n        # if k % 2 == 0:\n        #     return [(nums[k//2] + nums[k//2 - 1])/2.0] * (k//2)\n        # else:\n        #     return [nums[k//2]] * (k//2 + 1)\n        \n        # if k == 1:\n        #     return nums\n        \n        # nums.sort()\n        # if k % 2 == 0:\n        #     return [(nums[k//2] + nums[k//2 - 1])/2.0] * (k//2)\n        # else:\n        #     return [nums[k//2]] * (k//2 + 1)\n        \n        # if k == 1:\n        #     return nums\n        \n        # nums.sort()\n        # if k % 2 == 0:\n        #     return [(nums[k//2] + nums[k//2 - 1])/2.0] * (k//2)\n        # else:\n        #     return [nums[k//2]] * (k//2 + 1)\n        \n        # if k == 1:\n        #     return nums\n        \n        # nums.sort()\n        # if k % 2 == 0:\n        #     return [(nums[k//2] + nums[k//2 - 1])/2.0] * (k//2)\n        # else:\n        #     return [nums[k//2]] * (k//2 + 1)\n        \n        # if k == 1:\n        #     return nums\n        \n        # nums.sort()\n        # if k % 2 == 0:\n        #     return [(nums[k//2] + nums[k//2 - 1])/2.0] * (k//2)\n        # else:\n        #     return [nums[k//2]] * (k//2 + 1)\n        \n        # if k == 1:\n        #     return nums\n        \n        # nums.sort()\n        # if k % 2 == 0:\n        #     return [(nums[k//2] + nums[k//2 - 1])/2.0] * (k//2)\n        # else:\n        #     return [nums[k//2]] * (k//2 + 1)\n        \n        # if k == 1:\n        #     return nums\n        \n        # nums.sort()\n        # if k % 2 == 0:\n        #     return [(nums[k//2] + nums[k//2 - 1])/2.0] * (k//2)\n        # else:\n        #     return [nums[k//2]] * (k//2 + 1)\n        \n        # if k == 1:\n        #     return nums\n        \n        # nums.sort()\n        # if k % 2 == 0:\n        #     return [(nums[k//2] + nums[k//2 - 1])/2.0] * (k//2)\n        # else:\n        #     return [nums[k//2]] * (k//2 + 1)\n        \n        # if k == 1:\n        #     return nums\n        \n        # nums.sort()\n        # if k % 2 == 0:\n        #     return [(nums[k//2] + nums[k//2 - 1])/2.0] * (k//2)\n        # else:\n        #     return [nums[k//2]] * (k//2 + 1)\n        \n        # if k == 1:\n        #     return nums\n        \n        # nums.sort()\n        # if k % 2 == 0:\n        #     return [(nums[k//2] + nums[k//2 - 1])/2.0] * (k//2)\n        # else:\n        #     return [nums[k//2]] * (k//2 + 1)\n        \n        # if k == 1:\n        #     return nums\n        \n        # nums.sort()"}], "rotate-list": [{"task_id": "rotate-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        # find the length of the list\n        length = 1\n        curr = head\n        while curr.next:\n            curr = curr.next\n            length += 1\n        \n        # find the new head\n        new_head = head\n        k = k % length\n        if k == 0:\n            return head\n        \n        # find the new tail\n        curr = head\n        for i in range(length - k - 1):\n            curr = curr.next\n        \n        new_tail = curr\n        \n        # connect the new tail to the new head\n        new_tail.next = head\n        \n        # cut the list\n        curr.next = None\n        \n        return new_head"}], "ugly-number": [{"task_id": "ugly-number", "completion": "class Solution(object):\n    def isUgly(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 2 == 0:\n            n = n // 2\n        \n        while n % 3 == 0:\n            n = n // 3\n        \n        while n % 5 == 0:\n            n = n // 5\n        \n        return n == 1"}], "falling-squares": [{"task_id": "falling-squares", "completion": "class Solution(object):\n    def fallingSquares(self, positions):\n        \"\"\"\n        :type positions: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # Time Complexity: O(nlogn)\n        # Space Complexity: O(n)\n        \n        # We can use a monotonic stack to keep track of the tallest square\n        # We can also use a hashmap to keep track of the height of the tallest square\n        # We can also use a hashmap to keep track of the height of the tallest square\n        # We can also use a hashmap to keep track of the height of the tallest square\n        \n        # We can use a hashmap to keep track of the height of the tallest square\n        # We can also use a hashmap to keep track of the height of the tallest square\n        # We can also use a hashmap to keep track of the height of the tallest square\n        # We can also use a hashmap to keep track of the height of the tallest square\n        \n        # We can use a hashmap to keep track of the height of the tallest square\n        # We can also use a hashmap to keep track of the height of the tallest square\n        # We can also use a hashmap to keep track of the height of the tallest square\n        # We can also use a hashmap to keep track of the height of the tallest square\n        \n        # We can use a hashmap to keep track of the height of the tallest square\n        # We can also use a hashmap to keep track of the height of the tallest square\n        # We can also use a hashmap to keep track of the height of the tallest square\n        # We can also use a hashmap to keep track of the height of the tallest square\n        \n        # We can use a hashmap to keep track of the height of the tallest square\n        # We can also use a hashmap to keep track of the height of the tallest square\n        # We can also use a hashmap to keep track of the height of the tallest square\n        # We can also use a hashmap to keep track of the height of the tallest square\n        \n        # We can use a hashmap to keep track of the height of the tallest square\n        # We can also use a hashmap to keep track of the height of the tallest square\n        # We can also use a hashmap to keep track of the height of the tallest square\n        # We can also use a hashmap to keep track of the height of the tallest square\n        \n        # We can use a hashmap to keep track of the height of the tallest square\n        # We can also use a hashmap to keep track of the height of the tallest square\n        # We can also use a hashmap to keep track of the height of the tallest square\n        # We can also use a hashmap to keep track of the height of the tallest square\n        \n        # We can use a hashmap to keep track of the height of the tallest square\n        # We can also use a hashmap to keep track of the height of the tallest square\n        # We can also use a hashmap to keep track of the height of the tallest square\n        # We can also use a hashmap to keep track of the height of the tallest square\n        \n        # We can use a hashmap to keep track of the height of the tallest square\n        # We can also use a hashmap to keep track of the height of the tallest square\n        # We can also use a hashmap to keep track of the height of the tallest square\n        # We can also use a hashmap to keep track of the height of the tallest square\n        \n        # We can use a hashmap to keep track of the height of the tallest square\n        # We can also use a hashmap to keep track of the height of the tallest square\n        # We can also use a hashmap to keep track of the height of the tallest square\n        # We can also use a hashmap to keep track of the height of the tallest square\n        \n        # We can use a hashmap to keep track of the height of the tallest square\n        # We can also use a hashmap to keep track of the height of the tallest square\n        # We can also use a hashmap to keep track of the height of the tallest square\n        # We can also use a hashmap to keep track of the height of the tallest square\n        \n        # We can use a hashmap to keep track of the height of the tallest square\n        # We can also use a hashmap to keep track of the height of the tallest square\n        # We can also use a hashmap to keep track of the height of the tallest square"}], "sum-of-left-leaves": [{"task_id": "sum-of-left-leaves", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumOfLeftLeaves(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        if root.left and not root.left.left and not root.left.right:\n            return root.left.val + self.sumOfLeftLeaves(root.right)\n        \n        return self.sumOfLeftLeaves(root.left) + self.sumOfLeftLeaves(root.right)"}], "max-sum-of-rectangle-no-larger-than-k": [{"task_id": "max-sum-of-rectangle-no-larger-than-k", "completion": "class Solution(object):\n    def maxSumSubmatrix(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        max_sum = float('-inf')\n        for l in range(n):\n            curr_sum = 0\n            prefix_sum = [0] * m\n            for r in range(l, n):\n                for i in range(m):\n                    prefix_sum[i] += matrix[i][r]\n                curr_sum = max(curr_sum, prefix_sum[0])\n                curr_sum = max(curr_sum, self.max_subarray_sum(prefix_sum, k))\n                max_sum = max(max_sum, curr_sum)\n        return max_sum\n    \n    def max_subarray_sum(self, nums, k):\n        max_sum = float('-inf')\n        curr_sum = 0\n        prefix_sum = 0\n        s = set()\n        for num in nums:\n            curr_sum += num\n            if curr_sum == k:\n                return k\n            elif curr_sum > k:\n                curr_sum -= num\n                max_sum = max(max_sum, curr_sum)\n                if max_sum == k:\n                    return k\n                elif max_sum > k:\n                    return max_sum\n            elif curr_sum in s:\n                max_sum = max(max_sum, curr_sum - prefix_sum)\n            else:\n                s.add(curr_sum)\n                prefix_sum = curr_sum\n        return max_sum"}], "divide-two-integers": [{"task_id": "divide-two-integers", "completion": "class Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"\n        \n        if dividend == 0:\n            return 0\n        \n        if dividend == -2**31 and divisor == -1:\n            return 2**31 - 1\n        \n        if dividend == -2**31 and divisor == 1:\n            return -2**31\n        \n        if dividend < 0 and divisor < 0:\n            dividend = abs(dividend)\n            divisor = abs(divisor)\n        elif dividend < 0:\n            dividend = abs(dividend)\n            divisor = abs(divisor)\n            return -divide(dividend, divisor)\n        elif divisor < 0:\n            dividend = abs(dividend)\n            divisor = abs(divisor)\n            return -divide(dividend, divisor)\n        \n        if dividend < divisor:\n            return 0\n        \n        if dividend == divisor:\n            return 1\n        \n        if dividend < divisor*2:\n            return 1\n        \n        if dividend % divisor == 0:\n            return dividend // divisor\n        \n        if dividend % divisor != 0:\n            count = 1\n            temp = divisor\n            while temp < dividend:\n                temp = temp + temp\n                count = count + count\n            return count + self.divide(dividend - temp, divisor)"}], "surrounded-regions": [{"task_id": "surrounded-regions", "completion": "class Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        if not board:\n            return\n        \n        m = len(board)\n        n = len(board[0])\n        \n        def dfs(i,j):\n            if i < 0 or i >= m or j < 0 or j >= n or board[i][j] != 'O':\n                return\n            \n            board[i][j] = 'T'\n            \n            dfs(i+1,j)\n            dfs(i-1,j)\n            dfs(i,j+1)\n            dfs(i,j-1)\n            \n        for i in range(m):\n            dfs(i,0)\n            dfs(i,n-1)\n            \n        for j in range(n):\n            dfs(0,j)\n            dfs(m-1,j)\n            \n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'O':\n                    board[i][j] = 'X'\n                if board[i][j] == 'T':\n                    board[i][j] = 'O'"}], "two-sum": [{"task_id": "two-sum", "completion": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # Create a hashmap to store the complement of each number\n        complement_map = {}\n        \n        # Iterate through the list of numbers\n        for i, num in enumerate(nums):\n            \n            # Check if the complement of the current number is already in the hashmap\n            if num in complement_map:\n                return [complement_map[num], i]\n            \n            # Otherwise, add the number to the hashmap\n            complement_map[target - num] = i\n        \n        # If no complement is found, return an empty list\n        return []"}], "24-game": [{"task_id": "24-game", "completion": "class Solution(object):\n    def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        def backtrack(cards, target):\n            if len(cards) == 1:\n                return abs(cards[0] - target) < 1e-6\n            \n            for i in range(len(cards)):\n                for j in range(i):\n                    a, b = cards[i], cards[j]\n                    new_cards = [a + b, a - b, b - a, a * b]\n                    if b != 0:\n                        new_cards.append(a / b)\n                    if a != 0:\n                        new_cards.append(b / a)\n                    if backtrack(cards[:j] + new_cards + cards[j + 1:], target):\n                        return True\n            return False\n        \n        return backtrack(cards, 24)"}], "wildcard-matching": [{"task_id": "wildcard-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        # if p is empty, then s must be empty as well\n        if not p:\n            return not s\n        \n        # if p is not empty, then s must not be empty\n        if not s:\n            return False\n        \n        # if p is a single character, then s must also be a single character\n        if len(p) == 1:\n            return s == p or p == '*'\n        \n        # if p is not a single character, then s must not be a single character\n        if p[1] != '*':\n            return s[0] == p[0] and self.isMatch(s[1:], p[1:])\n        \n        # if p is a star, then s can be empty or not\n        # if s is empty, then p must be empty as well\n        # if s is not empty, then p can be empty or not\n        # if p is not empty, then s must not be empty\n        # if p is not empty, then s must not be empty\n        # if p is not empty, then s must not be empty\n        # if p is not empty, then s must not be empty\n        # if p is not empty, then s must not be empty\n        # if p is not empty, then s must not be empty\n        # if p is not empty, then s must not be empty\n        # if p is not empty, then s must not be empty\n        # if p is not empty, then s must not be empty\n        # if p is not empty, then s must not be empty\n        # if p is not empty, then s must not be empty\n        # if p is not empty, then s must not be empty\n        # if p is not empty, then s must not be empty\n        # if p is not empty, then s must not be empty\n        # if p is not empty, then s must not be empty\n        # if p is not empty, then s must not be empty\n        # if p is not empty, then s must not be empty\n        # if p is not empty, then s must not be empty\n        # if p is not empty, then s must not be empty\n        # if p is not empty, then s must not be empty\n        # if p is not empty, then s must not be empty\n        # if p is not empty, then s must not be empty\n        # if p is not empty, then s must not be empty\n        # if p is not empty, then s must not be empty\n        # if p is not empty, then s must not be empty\n        # if p is not empty, then s must not be empty\n        # if p is not empty, then s must not be empty\n        # if p is not empty, then s must not be empty\n        # if p is not empty, then s must not be empty\n        # if p is not empty, then s must not be empty\n        # if p is not empty, then s must not be empty\n        # if p is not empty, then s must not be empty\n        # if p is not empty, then s must not be empty\n        # if p is not empty, then s must not be empty\n        # if p is not empty, then s must not be empty\n        # if p is not empty, then s must not be empty\n        # if p is not empty, then s must not be empty\n        # if p is not empty, then s must not be empty\n        # if p is not empty, then s must not be empty\n        # if p is not empty, then s must not be empty\n        # if p is not empty, then s must not be empty\n        # if p is not empty, then s must not be empty\n        # if p is not empty, then s must not be empty\n        # if p is not empty, then s must not be empty\n        # if p is not empty, then s must not be empty\n        # if p is not empty, then s must not be empty\n        # if p is not empty, then s must not be empty\n        # if p is not empty, then s must not be empty\n        # if p is not empty, then s must not be empty\n        # if p is not empty, then s must not be empty\n        # if p is not empty, then s must not be empty\n        # if p is not empty, then s must not be empty\n        # if p is not empty, then s must not be empty\n        # if p is not empty, then s must not be empty\n        # if p is not empty, then"}], "majority-element": [{"task_id": "majority-element", "completion": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        count = 0\n        candidate = None\n        \n        for num in nums:\n            if count == 0:\n                candidate = num\n            \n            if num == candidate:\n                count += 1\n            else:\n                count -= 1\n        \n        return candidate"}], "reconstruct-itinerary": [{"task_id": "reconstruct-itinerary", "completion": "class Solution(object):\n    def findItinerary(self, tickets):\n        \"\"\"\n        :type tickets: List[List[str]]\n        :rtype: List[str]\n        \"\"\"\n        \n        # Build a graph\n        graph = collections.defaultdict(list)\n        for from_city, to_city in sorted(tickets):\n            graph[from_city].append(to_city)\n        \n        # Do a DFS\n        route = []\n        def dfs(from_city):\n            # If there is no connection, add the city to the route\n            if from_city not in graph:\n                route.append(from_city)\n                return\n            \n            # Otherwise, add the next city to the route\n            route.append(from_city)\n            \n            # Go to the next city\n            for next_city in sorted(graph[from_city]):\n                graph[from_city].remove(next_city)\n                dfs(next_city)\n        \n        dfs(\"JFK\")\n        return route[::-1]"}], "4sum": [{"task_id": "4sum", "completion": "class Solution(object):\n    def fourSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        n = len(nums)\n        for i in range(n-3):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            if nums[i] + nums[i+1] + nums[i+2] + nums[i+3] > target:\n                break\n            if nums[i] + nums[n-3] + nums[n-2] + nums[n-1] < target:\n                continue\n            if nums[i] + nums[i+1] + nums[i+2] + nums[i+3] == target:\n                res.append([nums[i], nums[i+1], nums[i+2], nums[i+3]])\n                continue\n            left = i + 1\n            right = n - 1\n            while left < right:\n                if nums[i] + nums[left] + nums[right] + nums[right-1] < target:\n                    left += 1\n                elif nums[i] + nums[left] + nums[right] + nums[right-1] > target:\n                    right -= 1\n                else:\n                    res.append([nums[i], nums[left], nums[right], nums[right-1]])\n                    left += 1\n                    right -= 1\n                    while left < right and nums[left] == nums[left-1]:\n                        left += 1\n                    while left < right and nums[right] == nums[right+1]:\n                        right -= 1\n        return res"}], "the-skyline-problem": [{"task_id": "the-skyline-problem", "completion": "class Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # sort buildings by left edge\n        buildings.sort(key=lambda x: x[0])\n        \n        # initialize priority queue with first building\n        pq = [(-buildings[0][2], buildings[0][1])]\n        \n        # initialize result\n        result = [[0, 0]]\n        \n        # iterate through buildings\n        for i in range(1, len(buildings)):\n            # if building has ended, remove from priority queue\n            if buildings[i][0] > pq[0][1]:\n                pq.pop(0)\n            \n            # add building height to priority queue\n            if buildings[i][2] > pq[0][0]:\n                pq.append((buildings[i][2], buildings[i][1]))\n            \n            # update result if priority queue is empty or new max height is different\n            if not pq or pq[0][0] != result[-1][1]:\n                result.append([buildings[i][0], -pq[0][0]])\n        \n        # return result\n        return result[1:]"}], "reverse-string": [{"task_id": "reverse-string", "completion": "class Solution(object):\n    def reverseString(self, s):\n        \"\"\"\n        :type s: List[str]\n        :rtype: None Do not return anything, modify s in-place instead.\n        \"\"\"\n        \n        left = 0\n        right = len(s)-1\n        \n        while left < right:\n            s[left], s[right] = s[right], s[left]\n            left += 1\n            right -= 1\n        \n        return s"}], "reverse-linked-list": [{"task_id": "reverse-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        prev = None\n        curr = head\n        \n        while curr:\n            temp = curr.next\n            curr.next = prev\n            prev = curr\n            curr = temp\n            \n        return prev"}], "triangle": [{"task_id": "triangle", "completion": "class Solution(object):\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(triangle)\n        dp = triangle[-1]\n        \n        for i in range(n-2,-1,-1):\n            for j in range(len(triangle[i])):\n                dp[j] = triangle[i][j] + min(dp[j],dp[j+1])\n        \n        return dp[0]"}], "integer-to-english-words": [{"task_id": "integer-to-english-words", "completion": "class Solution(object):\n    def numberToWords(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"Zero\"\n        \n        ones = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n        tens = [\"\", \"Ten\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"]\n        teens = [\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"]\n        \n        def helper(num):\n            if num == 0:\n                return \"\"\n            if num < 10:\n                return ones[num]\n            if num < 20:\n                return teens[num - 10]\n            if num < 100:\n                return tens[num // 10] + \" \" + helper(num % 10)\n            if num < 1000:\n                return ones[num // 100] + \" Hundred \" + helper(num % 100)\n            if num < 1000000:\n                return helper(num // 1000) + \" Thousand \" + helper(num % 1000)\n            if num < 1000000000:\n                return helper(num // 1000000) + \" Million \" + helper(num % 1000000)\n            return helper(num // 1000000000) + \" Billion \" + helper(num % 1000000000)\n        \n        return helper(num).strip()"}], "k-inverse-pairs-array": [{"task_id": "k-inverse-pairs-array", "completion": "class Solution(object):\n    def kInversePairs(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        mod = 10**9 + 7\n        dp = [0] * (k+1)\n        dp[0] = 1\n        \n        for i in range(1, n+1):\n            new_dp = [0] * (k+1)\n            for j in range(1, k+1):\n                new_dp[j] = (dp[j] + dp[j-1]) % mod\n                if j >= i:\n                    new_dp[j] -= dp[j-i]\n                new_dp[j] %= mod\n            dp = new_dp\n        \n        return dp[k]"}], "swap-nodes-in-pairs": [{"task_id": "swap-nodes-in-pairs", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        dummy = ListNode(0, head)\n        prev = dummy\n        \n        while prev.next and prev.next.next:\n            first = prev.next\n            second = prev.next.next\n            \n            prev.next = second\n            first.next = second.next\n            second.next = first\n            \n            prev = first\n            \n        return dummy.next"}], "path-sum": [{"task_id": "path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def hasPathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: bool\n        \"\"\"\n        \n        if not root:\n            return False\n        \n        if not root.left and not root.right:\n            return targetSum == root.val\n        \n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)"}], "partition-list": [{"task_id": "partition-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def partition(self, head, x):\n        \"\"\"\n        :type head: ListNode\n        :type x: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # create two dummy nodes\n        dummy1 = ListNode(0)\n        dummy2 = ListNode(0)\n        \n        # create two pointers\n        curr1 = dummy1\n        curr2 = dummy2\n        \n        # traverse the list\n        while head:\n            # if the current node is less than x, add it to the first list\n            if head.val < x:\n                curr1.next = head\n                curr1 = curr1.next\n            # if the current node is greater than or equal to x, add it to the second list\n            else:\n                curr2.next = head\n                curr2 = curr2.next\n            # move to the next node\n            head = head.next\n        \n        # connect the two lists\n        curr1.next = dummy2.next\n        curr2.next = None\n        \n        # return the first list\n        return dummy1.next"}], "redundant-connection-ii": [{"task_id": "redundant-connection-ii", "completion": "class Solution(object):\n    def findRedundantDirectedConnection(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # edge 1: (u,v)\n        # edge 2: (u,v)\n        # edge 3: (u,v)\n        # edge 4: (u,v)\n        # edge 5: (u,v)\n        # edge 6: (u,v)\n        # edge 7: (u,v)\n        # edge 8: (u,v)\n        # edge 9: (u,v)\n        # edge 10: (u,v)\n        # edge 11: (u,v)\n        # edge 12: (u,v)\n        # edge 13: (u,v)\n        # edge 14: (u,v)\n        # edge 15: (u,v)\n        # edge 16: (u,v)\n        # edge 17: (u,v)\n        # edge 18: (u,v)\n        # edge 19: (u,v)\n        # edge 20: (u,v)\n        # edge 21: (u,v)\n        # edge 22: (u,v)\n        # edge 23: (u,v)\n        # edge 24: (u,v)\n        # edge 25: (u,v)\n        # edge 26: (u,v)\n        # edge 27: (u,v)\n        # edge 28: (u,v)\n        # edge 29: (u,v)\n        # edge 30: (u,v)\n        # edge 31: (u,v)\n        # edge 32: (u,v)\n        # edge 33: (u,v)\n        # edge 34: (u,v)\n        # edge 35: (u,v)\n        # edge 36: (u,v)\n        # edge 37: (u,v)\n        # edge 38: (u,v)\n        # edge 39: (u,v)\n        # edge 40: (u,v)\n        # edge 41: (u,v)\n        # edge 42: (u,v)\n        # edge 43: (u,v)\n        # edge 44: (u,v)\n        # edge 45: (u,v)\n        # edge 46: (u,v)\n        # edge 47: (u,v)\n        # edge 48: (u,v)\n        # edge 49: (u,v)\n        # edge 50: (u,v)\n        # edge 51: (u,v)\n        # edge 52: (u,v)\n        # edge 53: (u,v)\n        # edge 54: (u,v)\n        # edge 55: (u,v)\n        # edge 56: (u,v)\n        # edge 57: (u,v)\n        # edge 58: (u,v)\n        # edge 59: (u,v)\n        # edge 60: (u,v)\n        # edge 61: (u,v)\n        # edge 62: (u,v)\n        # edge 63: (u,v)\n        # edge 64: (u,v)\n        # edge 65: (u,v)\n        # edge 66: (u,v)\n        # edge 67: (u,v)\n        # edge 68: (u,v)\n        # edge 69: (u,v)\n        # edge 70: (u,v)\n        # edge 71: (u,v)\n        # edge 72: (u,v)\n        # edge 73: (u,v)\n        # edge 74: (u,v)\n        # edge 75: (u,v)\n        # edge 76: (u,v)\n        # edge 77: (u,v)\n        # edge 78: (u,v)\n        # edge 79: (u,v)\n        # edge 80"}], "permutations-ii": [{"task_id": "permutations-ii", "completion": "class Solution(object):\n    def permuteUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        visited = [False] * len(nums)\n        self.backtrack(nums, visited, [], res)\n        return res\n        \n    def backtrack(self, nums, visited, path, res):\n        if len(path) == len(nums):\n            res.append(path[:])\n            return\n        \n        for i in range(len(nums)):\n            if visited[i] or (i > 0 and nums[i] == nums[i-1] and not visited[i-1]):\n                continue\n            visited[i] = True\n            path.append(nums[i])\n            self.backtrack(nums, visited, path, res)\n            visited[i] = False\n            path.pop()"}], "add-digits": [{"task_id": "add-digits", "completion": "class Solution(object):\n    def addDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        if num == 0:\n            return 0\n        \n        if num % 9 == 0:\n            return 9\n        \n        return num % 9"}], "single-number": [{"task_id": "single-number", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # XOR\n        # 2^2 = 0\n        # 2^0 = 2\n        # 0^2 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        #"}], "length-of-last-word": [{"task_id": "length-of-last-word", "completion": "class Solution(object):\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Split the string into words\n        words = s.split()\n        \n        # Return the length of the last word\n        return len(words[-1])"}], "cherry-pickup": [{"task_id": "cherry-pickup", "completion": "class Solution(object):\n    def cherryPickup(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        dp = [[0] * n for _ in range(n)]\n        dp[0][0] = grid[0][0]\n        for i in range(1, n):\n            dp[i][0] = dp[i - 1][0] + grid[i][0]\n        for i in range(1, n):\n            dp[0][i] = dp[0][i - 1] + grid[0][i]\n        for i in range(1, n):\n            for j in range(1, n):\n                dp[i][j] = grid[i][j] + dp[i - 1][j - 1] + dp[i][j - 1]\n                if i != j:\n                    dp[i][j] += dp[i - 1][j]\n                dp[i][j] = max(dp[i][j], dp[i][j - 1])\n        return dp[n - 1][n - 1]"}], "student-attendance-record-ii": [{"task_id": "student-attendance-record-ii", "completion": "class Solution(object):\n    def checkRecord(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        mod = 10**9 + 7\n        dp = [1,2,4]\n        if n < 3:\n            return dp[n]\n        \n        for i in range(3,n+1):\n            dp.append((dp[i-1]+dp[i-2]+dp[i-3])%mod)\n        \n        return dp[n]"}], "happy-number": [{"task_id": "happy-number", "completion": "class Solution(object):\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        slow = n\n        fast = n\n        \n        while True:\n            slow = self.square_sum(slow)\n            fast = self.square_sum(fast)\n            fast = self.square_sum(fast)\n            \n            if slow == 1:\n                return True\n            if slow == fast:\n                return False\n        \n        return False\n        \n    def square_sum(self, n):\n        sum = 0\n        while n > 0:\n            digit = n % 10\n            sum += digit * digit\n            n = n // 10\n        return sum"}], "search-insert-position": [{"task_id": "search-insert-position", "completion": "class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            \n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return left"}], "jump-game": [{"task_id": "jump-game", "completion": "class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        max_reachable_index = 0\n        \n        for i, num in enumerate(nums):\n            if i > max_reachable_index:\n                return False\n            max_reachable_index = max(max_reachable_index, i + num)\n        \n        return True"}], "minimum-path-sum": [{"task_id": "minimum-path-sum", "completion": "class Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(grid)\n        n = len(grid[0])\n        \n        for i in range(1,m):\n            grid[i][0] += grid[i-1][0]\n        \n        for j in range(1,n):\n            grid[0][j] += grid[0][j-1]\n        \n        for i in range(1,m):\n            for j in range(1,n):\n                grid[i][j] += min(grid[i-1][j],grid[i][j-1])\n        \n        return grid[-1][-1]"}], "count-and-say": [{"task_id": "count-and-say", "completion": "class Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        \n        if n == 1:\n            return \"1\"\n        \n        prev = \"1\"\n        curr = \"\"\n        count = 1\n        \n        for i in range(2, n+1):\n            count = 1\n            curr = \"\"\n            for j in range(1, len(prev)):\n                if prev[j] == prev[j-1]:\n                    count += 1\n                else:\n                    curr += str(count) + prev[j-1]\n                    count = 1\n            curr += str(count) + prev[-1]\n            prev = curr\n            \n        return curr"}], "split-array-largest-sum": [{"task_id": "split-array-largest-sum", "completion": "class Solution(object):\n    def splitArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # binary search\n        # find the max element in the array\n        # if the max element is greater than the sum of all the elements in the array, return max element\n        # if the max element is less than the sum of all the elements in the array, return the max element\n        # if the max element is equal to the sum of all the elements in the array, return the max element - 1\n        \n        # binary search\n        # find the max element in the array\n        # if the max element is greater than the sum of all the elements in the array, return max element\n        # if the max element is less than the sum of all the elements in the array, return the max element\n        # if the max element is equal to the sum of all the elements in the array, return the max element - 1\n        \n        # binary search\n        # find the max element in the array\n        # if the max element is greater than the sum of all the elements in the array, return max element\n        # if the max element is less than the sum of all the elements in the array, return the max element\n        # if the max element is equal to the sum of all the elements in the array, return the max element - 1\n        \n        # binary search\n        # find the max element in the array\n        # if the max element is greater than the sum of all the elements in the array, return max element\n        # if the max element is less than the sum of all the elements in the array, return the max element\n        # if the max element is equal to the sum of all the elements in the array, return the max element - 1\n        \n        # binary search\n        # find the max element in the array\n        # if the max element is greater than the sum of all the elements in the array, return max element\n        # if the max element is less than the sum of all the elements in the array, return the max element\n        # if the max element is equal to the sum of all the elements in the array, return the max element - 1\n        \n        # binary search\n        # find the max element in the array\n        # if the max element is greater than the sum of all the elements in the array, return max element\n        # if the max element is less than the sum of all the elements in the array, return the max element\n        # if the max element is equal to the sum of all the elements in the array, return the max element - 1\n        \n        # binary search\n        # find the max element in the array\n        # if the max element is greater than the sum of all the elements in the array, return max element\n        # if the max element is less than the sum of all the elements in the array, return the max element\n        # if the max element is equal to the sum of all the elements in the array, return the max element - 1\n        \n        # binary search\n        # find the max element in the array\n        # if the max element is greater than the sum of all the elements in the array, return max element\n        # if the max element is less than the sum of all the elements in the array, return the max element\n        # if the max element is equal to the sum of all the elements in the array, return the max element - 1\n        \n        # binary search\n        # find the max element in the array\n        # if the max element is greater than the sum of all the elements in the array, return max element\n        # if the max element is less than the sum of all the elements in the array, return the max element\n        # if the max element is equal to the sum of all the elements in the array, return the max element - 1\n        \n        # binary search\n        # find the max element in the array\n        # if the max element is greater than the sum of all the elements in the array, return max element\n        # if the max element is less than the sum of all the elements in the array, return the max element\n        # if the max element is equal to the sum of all the elements in the array, return the max element - 1\n        \n        # binary search\n        # find the max element in the array\n        # if the max element is greater than the sum of all the elements in the array, return max element\n        # if the max element is less than the sum of all the elements in the array, return the max element\n        # if the max element is equal to the sum of all the elements in the array, return the max element - 1\n        \n        # binary search\n        # find the max element in the array\n        # if the max element is greater"}], "search-in-rotated-sorted-array": [{"task_id": "search-in-rotated-sorted-array", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            \n            if nums[mid] == target:\n                return mid\n            \n            if nums[mid] >= nums[left]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        \n        return -1"}], "letter-combinations-of-a-phone-number": [{"task_id": "letter-combinations-of-a-phone-number", "completion": "class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        \n        if not digits:\n            return []\n        \n        phone_map = {\n            '2': 'abc',\n            '3': 'def',\n            '4': 'ghi',\n            '5': 'jkl',\n            '6': 'mno',\n            '7': 'pqrs',\n            '8': 'tuv',\n            '9': 'wxyz'\n        }\n        \n        res = []\n        curr_str = []\n        self.backtrack(digits, 0, phone_map, curr_str, res)\n        return res\n        \n    def backtrack(self, digits, index, phone_map, curr_str, res):\n        if index == len(digits):\n            res.append(''.join(curr_str))\n            return\n        \n        curr_digit = digits[index]\n        letters = phone_map[curr_digit]\n        \n        for letter in letters:\n            curr_str.append(letter)\n            self.backtrack(digits, index + 1, phone_map, curr_str, res)\n            curr_str.pop()"}], "combination-sum": [{"task_id": "combination-sum", "completion": "class Solution(object):\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        res = []\n        self.dfs(candidates, target, 0, [], res)\n        return res\n        \n    def dfs(self, candidates, target, start, path, res):\n        if target == 0:\n            res.append(path[:])\n            return\n        for i in range(start, len(candidates)):\n            if candidates[i] > target:\n                break\n            if i > start and candidates[i] == candidates[i-1]:\n                continue\n            self.dfs(candidates, target - candidates[i], i, path + [candidates[i]], res)"}], "find-the-closest-palindrome": [{"task_id": "find-the-closest-palindrome", "completion": "class Solution(object):\n    def nearestPalindromic(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\"\n        \n        if n[0] == '9':\n            return str(int(n) + 1)\n        \n        if n[0] == '1':\n            if len(n) == 1:\n                return '9'\n            else:\n                return str(int(n) - 1)\n        \n        if n[0] == '0':\n            return '0'\n        \n        if n[0] == '5':\n            if len(n) == 1:\n                return '4'\n            else:\n                return str(int(n) - 1)\n        \n        if n[0] == '4':\n            if len(n) == 1:\n                return '9'\n            else:\n                return str(int(n) + 1)\n        \n        if n[0] == '6':\n            if len(n) == 1:\n                return '9'\n            else:\n                return str(int(n) + 1)\n        \n        if n[0] == '7':\n            if len(n) == 1:\n                return '9'\n            else:\n                return str(int(n) + 1)\n        \n        if n[0] == '8':\n            if len(n) == 1:\n                return '9'\n            else:\n                return str(int(n) + 1)\n        \n        if n[0] == '9':\n            if len(n) == 1:\n                return '9'\n            else:\n                return str(int(n) + 1)\n        \n        if n[0] == '2':\n            if len(n) == 1:\n                return '1'\n            else:\n                return str(int(n) + 1)\n        \n        if n[0] == '3':\n            if len(n) == 1:\n                return '1'\n            else:\n                return str(int(n) + 1)\n        \n        if n[0] == '4':\n            if len(n) == 1:\n                return '9'\n            else:\n                return str(int(n) + 1)\n        \n        if n[0] == '5':\n            if len(n) == 1:\n                return '9'\n            else:\n                return str(int(n) + 1)\n        \n        if n[0] == '6':\n            if len(n) == 1:\n                return '9'\n            else:\n                return str(int(n) + 1)\n        \n        if n[0] == '7':\n            if len(n) == 1:\n                return '9'\n            else:\n                return str(int(n) + 1)\n        \n        if n[0] == '8':\n            if len(n) == 1:\n                return '9'\n            else:\n                return str(int(n) + 1)\n        \n        if n[0] == '9':\n            if len(n) == 1:\n                return '9'\n            else:\n                return str(int(n) + 1)\n        \n        if n[0] == '1':\n            if len(n) == 1:\n                return '9'\n            else:\n                return str(int(n) - 1)\n        \n        if n[0] == '2':\n            if len(n) == 1:\n                return '1'\n            else:\n                return str(int(n) - 1)\n        \n        if n[0] == '3':\n            if len(n) == 1:\n                return '1'\n            else:\n                return str(int(n) - 1)\n        \n        if n[0] == '4':\n            if len(n) == 1:\n                return '9'\n            else:\n                return str(int(n) - 1)\n        \n        if n[0] == '5':\n            if len(n) == 1:\n                return '9'\n            else:\n                return str(int(n) - 1)\n        \n        if n[0] == '6':\n            if len(n) == 1:\n                return '9'\n            else:\n                return str(int(n) - 1)\n        \n        if n[0] == '7':\n            if len(n) == 1:\n                return '9'"}], "spiral-matrix-ii": [{"task_id": "spiral-matrix-ii", "completion": "class Solution(object):\n    def generateMatrix(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        matrix = [[0]*n for _ in range(n)]\n        top, bottom, left, right = 0, n-1, 0, n-1\n        num = 1\n        \n        while top <= bottom and left <= right:\n            for i in range(left, right+1):\n                matrix[top][i] = num\n                num += 1\n            top += 1\n            \n            for i in range(top, bottom+1):\n                matrix[i][right] = num\n                num += 1\n            right -= 1\n            \n            if top <= bottom:\n                for i in range(right, left-1, -1):\n                    matrix[bottom][i] = num\n                    num += 1\n                bottom -= 1\n            \n            if left <= right:\n                for i in range(bottom, top-1, -1):\n                    matrix[i][left] = num\n                    num += 1\n                left += 1\n        \n        return matrix"}], "reverse-integer": [{"task_id": "reverse-integer", "completion": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x < 0:\n            x = -x\n            sign = -1\n        else:\n            sign = 1\n        \n        rev = 0\n        while x > 0:\n            rev = rev * 10 + x % 10\n            x = x // 10\n        \n        if rev > 2**31 - 1:\n            return 0\n        else:\n            return rev * sign"}], "rotate-image": [{"task_id": "rotate-image", "completion": "class Solution(object):\n    def rotate(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        n = len(matrix)\n        # transpose\n        for i in range(n):\n            for j in range(i):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n        \n        # reverse each row\n        for i in range(n):\n            matrix[i].reverse()"}], "maximum-product-subarray": [{"task_id": "maximum-product-subarray", "completion": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_prod = nums[0]\n        min_prod = nums[0]\n        result = max_prod\n        \n        for i in range(1, len(nums)):\n            curr_max = max_prod * nums[i]\n            curr_min = min_prod * nums[i]\n            \n            max_prod = max(nums[i], curr_max, curr_min)\n            min_prod = min(nums[i], curr_max, curr_min)\n            \n            result = max(result, max_prod)\n            \n        return result"}], "frog-jump": [{"task_id": "frog-jump", "completion": "class Solution(object):\n    def canCross(self, stones):\n        \"\"\"\n        :type stones: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        stone_set = set(stones)\n        stone_set.add(stones[-1])\n        \n        stone_map = {stone:set() for stone in stone_set}\n        \n        for stone in stones:\n            stone_map[stone].add(stone-1)\n            stone_map[stone].add(stone+1)\n        \n        if 1 in stone_map:\n            return False\n        \n        q = deque([1])\n        while q:\n            stone = q.popleft()\n            for next_stone in stone_map[stone]:\n                if next_stone in stone_set:\n                    if next_stone == stones[-1]:\n                        return True\n                    q.append(next_stone)\n        \n        return False"}], "relative-ranks": [{"task_id": "relative-ranks", "completion": "class Solution(object):\n    def findRelativeRanks(self, score):\n        \"\"\"\n        :type score: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        score_dict = {}\n        score_sorted = sorted(score, reverse=True)\n        for i in range(len(score_sorted)):\n            score_dict[score_sorted[i]] = i + 1\n        \n        res = []\n        for i in score:\n            if score_dict[i] == 1:\n                res.append(\"Gold Medal\")\n            elif score_dict[i] == 2:\n                res.append(\"Silver Medal\")\n            elif score_dict[i] == 3:\n                res.append(\"Bronze Medal\")\n            else:\n                res.append(str(score_dict[i]))\n        \n        return res"}], "longest-substring-without-repeating-characters": [{"task_id": "longest-substring-without-repeating-characters", "completion": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if len(s) == 0:\n            return 0\n        \n        max_len = 1\n        start = 0\n        char_map = {}\n        \n        for i in range(len(s)):\n            if s[i] in char_map:\n                start = max(start, char_map[s[i]] + 1)\n            max_len = max(max_len, i - start + 1)\n            char_map[s[i]] = i\n        \n        return max_len"}], "substring-with-concatenation-of-all-words": [{"task_id": "substring-with-concatenation-of-all-words", "completion": "class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(words) == 0:\n            return []\n        \n        word_len = len(words[0])\n        word_count = len(words)\n        word_dict = {}\n        for word in words:\n            if word in word_dict:\n                word_dict[word] += 1\n            else:\n                word_dict[word] = 1\n        \n        word_dict_len = len(word_dict)\n        s_len = len(s)\n        res = []\n        for i in range(word_len):\n            left = i\n            right = i\n            word_count_left = 0\n            word_count_right = 0\n            word_dict_right = {}\n            while right + word_len <= s_len:\n                word = s[right:right+word_len]\n                if word in word_dict:\n                    word_dict_right[word] = word_dict_right.get(word, 0) + 1\n                    word_count_right += 1\n                right += word_len\n                while word_count_right > word_count:\n                    word = s[left:left+word_len]\n                    if word in word_dict:\n                        word_dict_right[word] -= 1\n                        if word_dict_right[word] == 0:\n                            del word_dict_right[word]\n                            word_count_right -= 1\n                    left += word_len\n                if word_count_right == word_count:\n                    res.append(left)\n        return res"}], "max-chunks-to-make-sorted-ii": [{"task_id": "max-chunks-to-make-sorted-ii", "completion": "class Solution(object):\n    def maxChunksToSorted(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_val = arr[0]\n        chunks = 1\n        \n        for i in range(1, len(arr)):\n            if arr[i] > max_val:\n                max_val = arr[i]\n            if max_val == i:\n                chunks += 1\n        \n        return chunks"}], "insertion-sort-list": [{"task_id": "insertion-sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def insertionSortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        curr = head\n        while curr:\n            if curr.next and curr.val > curr.next.val:\n                prev = dummy\n                while prev.next.val < curr.next.val:\n                    prev = prev.next\n                temp = curr.next\n                curr.next = temp.next\n                temp.next = prev.next\n                prev.next = temp\n            else:\n                curr = curr.next\n        return dummy.next"}], "remove-duplicates-from-sorted-list-ii": [{"task_id": "remove-duplicates-from-sorted-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        dummy = ListNode(0, head)\n        prev = dummy\n        curr = head\n        \n        while curr:\n            if curr.next and curr.val == curr.next.val:\n                while curr.next and curr.val == curr.next.val:\n                    curr = curr.next\n                prev.next = curr.next\n            else:\n                prev = curr\n            curr = curr.next\n        \n        return dummy.next"}], "3sum": [{"task_id": "3sum", "completion": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        for i in range(len(nums)-2):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            l = i+1\n            r = len(nums)-1\n            while l < r:\n                if nums[i] + nums[l] + nums[r] == 0:\n                    res.append([nums[i],nums[l],nums[r]])\n                    l += 1\n                    r -= 1\n                    while l < r and nums[l] == nums[l-1]:\n                        l += 1\n                    while l < r and nums[r] == nums[r+1]:\n                        r -= 1\n                elif nums[i] + nums[l] + nums[r] < 0:\n                    l += 1\n                else:\n                    r -= 1\n        return res"}], "edit-distance": [{"task_id": "edit-distance", "completion": "class Solution(object):\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        \n        m = len(word1)\n        n = len(word2)\n        \n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        \n        for i in range(m + 1):\n            dp[i][0] = i\n        \n        for j in range(n + 1):\n            dp[0][j] = j\n        \n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if word1[i - 1] == word2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1])\n        \n        return dp[m][n]"}], "hamming-distance": [{"task_id": "hamming-distance", "completion": "class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        \n        xor = x ^ y\n        count = 0\n        while xor:\n            count += 1\n            xor = xor & (xor - 1)\n        return count"}], "binary-tree-paths": [{"task_id": "binary-tree-paths", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        if not root.left and not root.right:\n            return [str(root.val)]\n        \n        left_paths = self.binaryTreePaths(root.left)\n        right_paths = self.binaryTreePaths(root.right)\n        \n        paths = []\n        for left_path in left_paths:\n            paths.append(str(root.val) + \"->\" + left_path)\n        \n        for right_path in right_paths:\n            paths.append(str(root.val) + \"->\" + right_path)\n        \n        return paths"}], "reverse-pairs": [{"task_id": "reverse-pairs", "completion": "class Solution(object):\n    def reversePairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        def merge(nums, left, mid, right):\n            count = 0\n            i = left\n            j = mid + 1\n            temp = []\n            while i <= mid and j <= right:\n                if nums[i] <= nums[j]:\n                    temp.append(nums[i])\n                    i += 1\n                else:\n                    count += mid - i + 1\n                    temp.append(nums[j])\n                    j += 1\n            while i <= mid:\n                temp.append(nums[i])\n                i += 1\n            while j <= right:\n                temp.append(nums[j])\n                j += 1\n            nums[left:right+1] = temp\n            return count\n        \n        def mergeSort(nums, left, right):\n            if left >= right:\n                return 0\n            mid = (left + right) // 2\n            count = mergeSort(nums, left, mid) + mergeSort(nums, mid + 1, right)\n            count += merge(nums, left, mid, right)\n            return count\n        \n        return mergeSort(nums, 0, len(nums) - 1)"}], "reaching-points": [{"task_id": "reaching-points", "completion": "class Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        \n        while tx > sx and ty > sy:\n            if tx > ty:\n                tx %= ty\n            else:\n                ty %= tx\n        return tx == sx and ty == sy"}], "compare-version-numbers": [{"task_id": "compare-version-numbers", "completion": "class Solution(object):\n    def compareVersion(self, version1, version2):\n        \"\"\"\n        :type version1: str\n        :type version2: str\n        :rtype: int\n        \"\"\"\n        \n        v1 = version1.split('.')\n        v2 = version2.split('.')\n        \n        if len(v1) > len(v2):\n            v2.extend(['0'] * (len(v1) - len(v2)))\n        elif len(v1) < len(v2):\n            v1.extend(['0'] * (len(v2) - len(v1)))\n        \n        for i in range(len(v1)):\n            if int(v1[i]) > int(v2[i]):\n                return 1\n            elif int(v1[i]) < int(v2[i]):\n                return -1\n        \n        return 0"}], "best-time-to-buy-and-sell-stock-ii": [{"task_id": "best-time-to-buy-and-sell-stock-ii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_profit = 0\n        min_price = float('inf')\n        \n        for price in prices:\n            min_price = min(min_price, price)\n            max_profit = max(max_profit, price - min_price)\n            \n        return max_profit"}], "course-schedule-iii": [{"task_id": "course-schedule-iii", "completion": "class Solution(object):\n    def scheduleCourse(self, courses):\n        \"\"\"\n        :type courses: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # sort by duration\n        courses.sort(key=lambda x: x[0])\n        \n        # priority queue\n        pq = []\n        \n        # total duration\n        total = 0\n        \n        # iterate over courses\n        for duration, lastDay in courses:\n            \n            # add course to priority queue\n            heapq.heappush(pq, (-duration, lastDay))\n            \n            # update total duration\n            total += duration\n            \n            # if total duration exceeds last day\n            if total > lastDay:\n                \n                # pop from priority queue\n                total -= heapq.heappop(pq)[0]\n                \n        return len(pq)"}], "reverse-nodes-in-k-group": [{"task_id": "reverse-nodes-in-k-group", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseKGroup(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or k == 1:\n            return head\n        \n        dummy = ListNode(0, head)\n        prev = dummy\n        curr = head\n        count = 0\n        \n        while curr:\n            count += 1\n            if count % k == 0:\n                prev = self.reverse(prev, curr)\n                curr = prev.next\n            else:\n                curr = curr.next\n        \n        return dummy.next\n    \n    def reverse(self, prev, tail):\n        curr = prev.next\n        prev.next = None\n        while curr != tail:\n            next_node = curr.next\n            curr.next = prev.next\n            prev.next = curr\n            curr = next_node\n        return prev"}], "repeated-substring-pattern": [{"task_id": "repeated-substring-pattern", "completion": "class Solution(object):\n    def repeatedSubstringPattern(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) < 2:\n            return False\n        \n        if s[0] != s[len(s)-1]:\n            return False\n        \n        if len(s) % (len(s)-1) != 0:\n            return False\n        \n        return s[0] * (len(s)-1) == s"}], "unique-binary-search-trees": [{"task_id": "unique-binary-search-trees", "completion": "class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        dp = [0] * (n+1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, n+1):\n            for j in range(1, i+1):\n                dp[i] += dp[j-1] * dp[i-j]\n        \n        return dp[n]"}], "single-number-ii": [{"task_id": "single-number-ii", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # XOR of a number with itself is 0\n        # XOR of a number with 0 is the number\n        # XOR of a number with a number is 0\n        # So we can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR to find the single number\n        # We can use XOR"}], "stickers-to-spell-word": [{"task_id": "stickers-to-spell-word", "completion": "class Solution(object):\n    def minStickers(self, stickers, target):\n        \"\"\"\n        :type stickers: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\"\n        \n        # dp[i] = min number of stickers needed to spell out target[0:i]\n        # dp[i] = min(dp[i], dp[j] + 1) if target[j] in stickers[i]\n        # dp[i] = -1 if target[j] not in stickers[i]\n        \n        # dp[i] = min(dp[i], dp[j] + 1) if target[j] in stickers[i]\n        # dp[i] = -1 if target[j] not in stickers[i]\n        \n        # dp[i] = min(dp[i], dp[j] + 1) if target[j] in stickers[i]\n        # dp[i] = -1 if target[j] not in stickers[i]\n        \n        # dp[i] = min(dp[i], dp[j] + 1) if target[j] in stickers[i]\n        # dp[i] = -1 if target[j] not in stickers[i]\n        \n        # dp[i] = min(dp[i], dp[j] + 1) if target[j] in stickers[i]\n        # dp[i] = -1 if target[j] not in stickers[i]\n        \n        # dp[i] = min(dp[i], dp[j] + 1) if target[j] in stickers[i]\n        # dp[i] = -1 if target[j] not in stickers[i]\n        \n        # dp[i] = min(dp[i], dp[j] + 1) if target[j] in stickers[i]\n        # dp[i] = -1 if target[j] not in stickers[i]\n        \n        # dp[i] = min(dp[i], dp[j] + 1) if target[j] in stickers[i]\n        # dp[i] = -1 if target[j] not in stickers[i]\n        \n        # dp[i] = min(dp[i], dp[j] + 1) if target[j] in stickers[i]\n        # dp[i] = -1 if target[j] not in stickers[i]\n        \n        # dp[i] = min(dp[i], dp[j] + 1) if target[j] in stickers[i]\n        # dp[i] = -1 if target[j] not in stickers[i]\n        \n        # dp[i] = min(dp[i], dp[j] + 1) if target[j] in stickers[i]\n        # dp[i] = -1 if target[j] not in stickers[i]\n        \n        # dp[i] = min(dp[i], dp[j] + 1) if target[j] in stickers[i]\n        # dp[i] = -1 if target[j] not in stickers[i]\n        \n        # dp[i] = min(dp[i], dp[j] + 1) if target[j] in stickers[i]\n        # dp[i] = -1 if target[j] not in stickers[i]\n        \n        # dp[i] = min(dp[i], dp[j] + 1) if target[j] in stickers[i]\n        # dp[i] = -1 if target[j] not in stickers[i]\n        \n        # dp[i] = min(dp[i], dp[j] + 1) if target[j] in stickers[i]\n        # dp[i] = -1 if target[j] not in stickers[i]\n        \n        # dp[i] = min(dp[i], dp[j] + 1) if target[j] in stickers[i]\n        # dp[i] = -1 if target[j] not in stickers[i]\n        \n        # dp[i] = min(dp[i], dp[j] + 1) if target[j] in stickers[i]\n        # dp[i] = -1 if target[j] not in stickers[i]"}], "strange-printer": [{"task_id": "strange-printer", "completion": "class Solution(object):\n    def strangePrinter(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        n = len(s)\n        dp = [[0] * n for _ in range(n)]\n        \n        for i in range(n-1,-1,-1):\n            dp[i][i] = 1\n            c = s[i]\n            for j in range(i+1,n):\n                if s[j] == c:\n                    dp[i][j] = dp[i][j-1]\n                else:\n                    dp[i][j] = dp[i][j-1] + 1\n                    for k in range(i,j):\n                        dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][j])\n        \n        return dp[0][n-1]"}], "sqrtx": [{"task_id": "sqrtx", "completion": "class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        \n        low = 1\n        high = x\n        \n        while low <= high:\n            mid = low + (high - low) // 2\n            if mid * mid == x:\n                return mid\n            elif mid * mid < x:\n                low = mid + 1\n            else:\n                high = mid - 1\n        \n        return high"}], "roman-to-integer": [{"task_id": "roman-to-integer", "completion": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        roman_dict = {'I':1, 'V':5, 'X':10, 'L':50, 'C':100, 'D':500, 'M':1000}\n        total = 0\n        i = 0\n        while i < len(s):\n            if i+1 < len(s) and roman_dict[s[i]] < roman_dict[s[i+1]]:\n                total -= roman_dict[s[i]]\n            else:\n                total += roman_dict[s[i]]\n            i += 1\n        return total"}], "contains-duplicate": [{"task_id": "contains-duplicate", "completion": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        nums.sort()\n        for i in range(1,len(nums)):\n            if nums[i] == nums[i-1]:\n                return True\n        return False"}], "sliding-window-maximum": [{"task_id": "sliding-window-maximum", "completion": "class Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # if k == 1:\n        #     return nums\n        \n        # max_num = max(nums[0:k])\n        # result = [max_num]\n        \n        # for i in range(k, len(nums)):\n        #     if nums[i] > max_num:\n        #         max_num = nums[i]\n        #     elif nums[i-k] == max_num:\n        #         max_num = max(nums[i-k+1:i+1])\n        #     result.append(max_num)\n            \n        # return result\n        \n        # using deque\n        # Time Complexity: O(n)\n        # Space Complexity: O(k)\n        from collections import deque\n        \n        if k == 1:\n            return nums\n        \n        q = deque()\n        result = []\n        \n        for i in range(len(nums)):\n            while q and q[-1] < nums[i]:\n                q.pop()\n            q.append(nums[i])\n            \n            if i >= k - 1:\n                result.append(q[0])\n                if q[0] == nums[i - k + 1]:\n                    q.popleft()\n        \n        return result"}], "median-of-two-sorted-arrays": [{"task_id": "median-of-two-sorted-arrays", "completion": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        \n        if len(nums1) > len(nums2):\n            nums1, nums2 = nums2, nums1\n        \n        m = len(nums1)\n        n = len(nums2)\n        \n        low = 0\n        high = m\n        \n        while low <= high:\n            i = (low + high) // 2\n            j = (m + n + 1) // 2 - i\n            \n            if i < m and nums2[j-1] > nums1[i]:\n                low = i + 1\n            elif i > 0 and nums1[i-1] > nums2[j]:\n                high = i - 1\n            else:\n                if i == 0:\n                    max_left = nums2[j-1]\n                elif j == 0:\n                    max_left = nums1[i-1]\n                else:\n                    max_left = max(nums1[i-1], nums2[j-1])\n                \n                if (m + n) % 2 == 1:\n                    return max_left\n                \n                if i == m:\n                    min_right = nums2[j]\n                elif j == n:\n                    min_right = nums1[i]\n                else:\n                    min_right = min(nums1[i], nums2[j])\n                \n                return (max_left + min_right) / 2.0\n        \n        return 0.0"}], "find-minimum-in-rotated-sorted-array": [{"task_id": "find-minimum-in-rotated-sorted-array", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left < right:\n            mid = left + (right - left) // 2\n            \n            if nums[mid] > nums[right]:\n                left = mid + 1\n            else:\n                right = mid\n                \n        return nums[left]"}], "pascals-triangle-ii": [{"task_id": "pascals-triangle-ii", "completion": "class Solution(object):\n    def getRow(self, rowIndex):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if rowIndex == 0:\n            return [1]\n        \n        if rowIndex == 1:\n            return [1,1]\n        \n        row = [1,1]\n        \n        for i in range(2, rowIndex+1):\n            row = [1] + [row[j] + row[j+1] for j in range(len(row)-1)] + [1]\n        \n        return row"}], "path-sum-ii": [{"task_id": "path-sum-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def pathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        res = []\n        self.dfs(root, targetSum, [], res)\n        return res\n        \n    def dfs(self, root, targetSum, path, res):\n        if not root:\n            return\n        \n        path.append(root.val)\n        \n        if root.val == targetSum and not root.left and not root.right:\n            res.append(path[:])\n        \n        self.dfs(root.left, targetSum - root.val, path, res)\n        self.dfs(root.right, targetSum - root.val, path, res)\n        \n        path.pop()"}], "construct-the-rectangle": [{"task_id": "construct-the-rectangle", "completion": "class Solution(object):\n    def constructRectangle(self, area):\n        \"\"\"\n        :type area: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. 2 * L = area\n        # 2. L = area // 2\n        # 3. L = sqrt(area)\n        # 4. L = area ** 0.5\n        # 5. L = area ** 0.5\n        # 6. L = area ** 0.5\n        # 7. L = area ** 0.5\n        # 8. L = area ** 0.5\n        # 9. L = area ** 0.5\n        # 10. L = area ** 0.5\n        # 11. L = area ** 0.5\n        # 12. L = area ** 0.5\n        # 13. L = area ** 0.5\n        # 14. L = area ** 0.5\n        # 15. L = area ** 0.5\n        # 16. L = area ** 0.5\n        # 17. L = area ** 0.5\n        # 18. L = area ** 0.5\n        # 19. L = area ** 0.5\n        # 20. L = area ** 0.5\n        # 21. L = area ** 0.5\n        # 22. L = area ** 0.5\n        # 23. L = area ** 0.5\n        # 24. L = area ** 0.5\n        # 25. L = area ** 0.5\n        # 26. L = area ** 0.5\n        # 27. L = area ** 0.5\n        # 28. L = area ** 0.5\n        # 29. L = area ** 0.5\n        # 30. L = area ** 0.5\n        # 31. L = area ** 0.5\n        # 32. L = area ** 0.5\n        # 33. L = area ** 0.5\n        # 34. L = area ** 0.5\n        # 35. L = area ** 0.5\n        # 36. L = area ** 0.5\n        # 37. L = area ** 0.5\n        # 38. L = area ** 0.5\n        # 39. L = area ** 0.5\n        # 40. L = area ** 0.5\n        # 41. L = area ** 0.5\n        # 42. L = area ** 0.5\n        # 43. L = area ** 0.5\n        # 44. L = area ** 0.5\n        # 45. L = area ** 0.5\n        # 46. L = area ** 0.5\n        # 47. L = area ** 0.5\n        # 48. L = area ** 0.5\n        # 49. L = area ** 0.5\n        # 50. L = area ** 0.5\n        # 51. L = area ** 0.5\n        # 52. L = area ** 0.5\n        # 53. L = area ** 0.5\n        # 54. L = area ** 0.5\n        # 55. L = area ** 0.5\n        # 56. L = area ** 0.5\n        # 57. L = area ** 0.5\n        # 58. L = area ** 0.5\n        # 59. L = area ** 0.5\n        # 60. L = area ** 0.5\n        # 61. L = area ** 0.5\n        # 62. L = area ** 0.5\n        # 63. L = area ** 0.5\n        # 64. L = area ** 0.5\n        # 65. L = area ** 0.5\n        # 66. L = area ** 0.5\n        # 67. L = area ** 0.5\n        # 68. L = area ** 0.5\n        # 69. L = area ** 0.5\n        #"}], "word-ladder-ii": [{"task_id": "word-ladder-ii", "completion": "class Solution(object):\n    def findLadders(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        # build the graph\n        graph = defaultdict(set)\n        for word in wordList:\n            for i in range(len(word)):\n                graph[word[:i] + \"*\" + word[i+1:]].add(word)\n        \n        # build the queue\n        queue = deque([beginWord])\n        visited = set([beginWord])\n        level = 1\n        res = []\n        \n        while queue:\n            level_size = len(queue)\n            for _ in range(level_size):\n                curr = queue.popleft()\n                if curr == endWord:\n                    res.append([curr])\n                    break\n                for i in range(len(curr)):\n                    neighbor = curr[:i] + \"*\" + curr[i+1:]\n                    for neighbor_word in graph[neighbor]:\n                        if neighbor_word not in visited:\n                            visited.add(neighbor_word)\n                            queue.append(neighbor_word)\n            level += 1\n        \n        return res"}], "balanced-binary-tree": [{"task_id": "balanced-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isBalanced(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def height(root):\n            if not root:\n                return 0\n            left = height(root.left)\n            right = height(root.right)\n            if left == -1 or right == -1 or abs(left - right) > 1:\n                return -1\n            return max(left, right) + 1\n        \n        return height(root) != -1"}], "power-of-two": [{"task_id": "power-of-two", "completion": "class Solution(object):\n    def isPowerOfTwo(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        return n & (n - 1) == 0"}], "subsets-ii": [{"task_id": "subsets-ii", "completion": "class Solution(object):\n    def subsetsWithDup(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = [[]]\n        i = 0\n        while i < len(nums):\n            j = i\n            while j < len(nums) and nums[j] == nums[i]:\n                j += 1\n            n = len(res)\n            for k in range(n):\n                res.append(res[k][:])\n                res[-1].append(nums[i])\n            i = j\n        return res"}], "largest-rectangle-in-histogram": [{"task_id": "largest-rectangle-in-histogram", "completion": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        max_area = 0\n        heights.append(0)\n        for i in range(len(heights)):\n            while stack and heights[stack[-1]] > heights[i]:\n                h = heights[stack.pop()]\n                if stack:\n                    max_area = max(max_area, h*(i-stack[-1]-1))\n                else:\n                    max_area = max(max_area, h*i)\n            stack.append(i)\n        return max_area"}], "evaluate-reverse-polish-notation": [{"task_id": "evaluate-reverse-polish-notation", "completion": "class Solution(object):\n    def evalRPN(self, tokens):\n        \"\"\"\n        :type tokens: List[str]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        for token in tokens:\n            if token not in \"+-*/\":\n                stack.append(int(token))\n            else:\n                second = stack.pop()\n                first = stack.pop()\n                if token == \"+\":\n                    stack.append(first + second)\n                elif token == \"-\":\n                    stack.append(first - second)\n                elif token == \"*\":\n                    stack.append(first * second)\n                else:\n                    stack.append(int(first / second))\n        return stack[0]"}], "perfect-rectangle": [{"task_id": "perfect-rectangle", "completion": "class Solution(object):\n    def isRectangleCover(self, rectangles):\n        \"\"\"\n        :type rectangles: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        \n        x1, y1, x2, y2 = float('inf'), float('inf'), float('-inf'), float('-inf')\n        area = 0\n        s = set()\n        \n        for x, y, a, b in rectangles:\n            x1, y1, x2, y2 = min(x1, x), min(y1, y), max(x2, a), max(y2, b)\n            area += (a - x) * (b - y)\n            s.add((x, y))\n            s.add((a, y))\n            s.add((x, b))\n            s.add((a, b))\n        \n        if (x1, y1) in s and (x2, y1) in s and (x1, y2) in s and (x2, y2) in s and (x1, y2) != (x2, y1):\n            return False\n        \n        return area == (x2 - x1) * (y2 - y1)"}], "excel-sheet-column-title": [{"task_id": "excel-sheet-column-title", "completion": "class Solution(object):\n    def convertToTitle(self, columnNumber):\n        \"\"\"\n        :type columnNumber: int\n        :rtype: str\n        \"\"\"\n        \n        res = \"\"\n        while columnNumber > 0:\n            columnNumber -= 1\n            res = chr(columnNumber % 26 + ord('A')) + res\n            columnNumber //= 26\n        return res"}], "maximum-subarray": [{"task_id": "maximum-subarray", "completion": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_sum = nums[0]\n        curr_sum = 0\n        \n        for num in nums:\n            if curr_sum < 0:\n                curr_sum = num\n            else:\n                curr_sum += num\n            max_sum = max(max_sum, curr_sum)\n        \n        return max_sum"}], "sliding-puzzle": [{"task_id": "sliding-puzzle", "completion": "class Solution(object):\n    def slidingPuzzle(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # convert board to a number\n        num = board[0][0]*10 + board[0][1]*1 + board[0][2]*100 + board[1][0]*1000\n        \n        # if the number is 12345, return 0\n        if num == 12345:\n            return 0\n        \n        # if the number is 1234, return -1\n        if num == 1234:\n            return -1\n        \n        # if the number is 123, return 1\n        if num == 123:\n            return 1\n        \n        # if the number is 12, return 2\n        if num == 12:\n            return 2\n        \n        # if the number is 1, return 3\n        if num == 1:\n            return 3\n        \n        # if the number is 23, return 4\n        if num == 23:\n            return 4\n        \n        # if the number is 34, return 5\n        if num == 34:\n            return 5\n        \n        # if the number is 45, return 6\n        if num == 45:\n            return 6\n        \n        # if the number is 56, return 7\n        if num == 56:\n            return 7\n        \n        # if the number is 67, return 8\n        if num == 67:\n            return 8\n        \n        # if the number is 78, return 9\n        if num == 78:\n            return 9\n        \n        # if the number is 89, return 10\n        if num == 89:\n            return 10\n        \n        # if the number is 910, return 11\n        if num == 910:\n            return 11\n        \n        # if the number is 1011, return 12\n        if num == 1011:\n            return 12\n        \n        # if the number is 1112, return 13\n        if num == 1112:\n            return 13\n        \n        # if the number is 1213, return 14\n        if num == 1213:\n            return 14\n        \n        # if the number is 1314, return 15\n        if num == 1314:\n            return 15\n        \n        # if the number is 1415, return 16\n        if num == 1415:\n            return 16\n        \n        # if the number is 1516, return 17\n        if num == 1516:\n            return 17\n        \n        # if the number is 1617, return 18\n        if num == 1617:\n            return 18\n        \n        # if the number is 1718, return 19\n        if num == 1718:\n            return 19\n        \n        # if the number is 1819, return 20\n        if num == 1819:\n            return 20\n        \n        # if the number is 1920, return 21\n        if num == 1920:\n            return 21\n        \n        # if the number is 2021, return 22\n        if num == 2021:\n            return 22\n        \n        # if the number is 2122, return 23\n        if num == 2122:\n            return 23\n        \n        # if the number is 2223, return 24\n        if num == 2223:\n            return 24\n        \n        # if the number is 2324, return 25\n        if num == 2324:\n            return 25\n        \n        # if the number is 2425, return 26\n        if num == 2425:\n            return 26\n        \n        # if the number is 2526, return 27\n        if num == 2526:\n            return 27\n        \n        # if the number is 2627, return 28"}], "isomorphic-strings": [{"task_id": "isomorphic-strings", "completion": "class Solution(object):\n    def isIsomorphic(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_map = {}\n        t_map = {}\n        \n        for i in range(len(s)):\n            if s[i] in s_map:\n                if s_map[s[i]] != t[i]:\n                    return False\n            else:\n                if t[i] in t_map:\n                    return False\n                s_map[s[i]] = t[i]\n                t_map[t[i]] = s[i]\n        \n        return True"}], "search-in-rotated-sorted-array-ii": [{"task_id": "search-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                return True\n            if nums[mid] == nums[left]:\n                left += 1\n            elif nums[mid] > nums[left]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return False"}], "unique-paths-ii": [{"task_id": "unique-paths-ii", "completion": "class Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid):\n        \"\"\"\n        :type obstacleGrid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        \n        if obstacleGrid[m-1][n-1] == 1:\n            return 0\n        \n        dp = [[0]*n for _ in range(m)]\n        dp[m-1][n-1] = 1\n        \n        for i in range(m-2,-1,-1):\n            if obstacleGrid[i][n-1] == 1:\n                dp[i][n-1] = 0\n            else:\n                dp[i][n-1] = dp[i+1][n-1]\n        \n        for j in range(n-2,-1,-1):\n            if obstacleGrid[m-1][j] == 1:\n                dp[m-1][j] = 0\n            else:\n                dp[m-1][j] = dp[m-1][j+1]\n        \n        for i in range(m-2,-1,-1):\n            for j in range(n-2,-1,-1):\n                if obstacleGrid[i][j] == 1:\n                    dp[i][j] = 0\n                else:\n                    dp[i][j] = dp[i+1][j] + dp[i][j+1]\n        \n        return dp[0][0]"}], "decode-ways-ii": [{"task_id": "decode-ways-ii", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s[0] == '0':\n            return 0\n        \n        if len(s) == 1:\n            return 1\n        \n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, len(s) + 1):\n            if s[i - 1] != '0':\n                dp[i] = dp[i - 1]\n            if s[i - 2] != '0' and int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        \n        return dp[-1]"}], "3sum-closest": [{"task_id": "3sum-closest", "completion": "class Solution(object):\n    def threeSumClosest(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        closest = nums[0] + nums[1] + nums[2]\n        n = len(nums)\n        for i in range(n-2):\n            left = i + 1\n            right = n - 1\n            while left < right:\n                sum = nums[i] + nums[left] + nums[right]\n                if abs(sum - target) < abs(closest - target):\n                    closest = sum\n                if sum < target:\n                    left += 1\n                else:\n                    right -= 1\n            if closest == target:\n                return closest\n        return closest"}], "maximum-depth-of-binary-tree": [{"task_id": "maximum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))"}], "intersection-of-two-arrays-ii": [{"task_id": "intersection-of-two-arrays-ii", "completion": "class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums1) > len(nums2):\n            return self.intersect(nums2, nums1)\n        \n        nums1.sort()\n        nums2.sort()\n        \n        i = 0\n        j = 0\n        res = []\n        \n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] < nums2[j]:\n                i += 1\n            elif nums1[i] > nums2[j]:\n                j += 1\n            else:\n                res.append(nums1[i])\n                i += 1\n                j += 1\n        \n        return res"}], "minimum-absolute-difference-in-bst": [{"task_id": "minimum-absolute-difference-in-bst", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def getMinimumDifference(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def inorder(root):\n            if root is None:\n                return\n            inorder(root.left)\n            self.min_diff = min(self.min_diff, root.val - self.prev)\n            self.prev = root.val\n            inorder(root.right)\n        \n        self.min_diff = float('inf')\n        self.prev = float('-inf')\n        inorder(root)\n        return self.min_diff"}], "find-mode-in-binary-search-tree": [{"task_id": "find-mode-in-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        self.max_count = 0\n        self.prev_val = None\n        self.max_val = None\n        self.curr_count = 0\n        \n        self.inorder(root)\n        \n        return [self.max_val] if self.max_count == 1 else [self.max_val, self.prev_val]\n        \n        \n    def inorder(self, root):\n        if not root:\n            return\n        \n        self.inorder(root.left)\n        \n        if self.prev_val == root.val:\n            self.curr_count += 1\n        else:\n            self.curr_count = 1\n            self.prev_val = root.val\n        \n        if self.curr_count > self.max_count:\n            self.max_count = self.curr_count\n            self.max_val = root.val\n        \n        self.inorder(root.right)"}], "find-the-index-of-the-first-occurrence-in-a-string": [{"task_id": "find-the-index-of-the-first-occurrence-in-a-string", "completion": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        \n        if needle == \"\":\n            return 0\n        \n        if needle in haystack:\n            return haystack.index(needle)\n        else:\n            return -1"}], "strong-password-checker": [{"task_id": "strong-password-checker", "completion": "class Solution(object):\n    def strongPasswordChecker(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. Check if the password is at least 6 characters long\n        if len(password) < 6:\n            return 6 - len(password)\n        \n        # 2. Check if the password is at most 20 characters long\n        if len(password) > 20:\n            return 20 - len(password)\n        \n        # 3. Check if the password contains at least one lowercase letter, at least one uppercase letter, and at least one digit\n        lowercase_count = password.count('a')\n        uppercase_count = password.count('A')\n        digit_count = password.count('0')\n        \n        if lowercase_count == 0 or uppercase_count == 0 or digit_count == 0:\n            return 3\n        \n        # 4. Check if the password contains three repeating characters in a row\n        repeating_characters = 0\n        previous_character = None\n        \n        for character in password:\n            if character == previous_character:\n                repeating_characters += 1\n            else:\n                repeating_characters = 0\n            \n            if repeating_characters == 3:\n                break\n            \n            previous_character = character\n        \n        if repeating_characters == 3:\n            return 2\n        \n        # 5. Calculate the number of additional steps required\n        additional_steps = 0\n        \n        if len(password) - repeating_characters > 20:\n            additional_steps = len(password) - 20\n        elif len(password) - repeating_characters < 6:\n            additional_steps = 6 - (len(password) - repeating_characters)\n        \n        return additional_steps"}], "factorial-trailing-zeroes": [{"task_id": "factorial-trailing-zeroes", "completion": "class Solution(object):\n    def trailingZeroes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        count = 0\n        while n > 0:\n            n = n // 5\n            count += n\n        return count"}], "zigzag-conversion": [{"task_id": "zigzag-conversion", "completion": "class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        \n        if numRows == 1:\n            return s\n        \n        res = [\"\" for _ in range(numRows)]\n        i = 0\n        down = True\n        \n        for c in s:\n            res[i] += c\n            if i == numRows - 1:\n                down = False\n            elif i == 0:\n                down = True\n            if down:\n                i += 1\n            else:\n                i -= 1\n        \n        return \"\".join(res)"}], "trapping-rain-water": [{"task_id": "trapping-rain-water", "completion": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        left, right = 0, len(height) - 1\n        left_max, right_max = 0, 0\n        res = 0\n        \n        while left < right:\n            if height[left] < height[right]:\n                if height[left] >= left_max:\n                    left_max = height[left]\n                else:\n                    res += left_max - height[left]\n                left += 1\n            else:\n                if height[right] >= right_max:\n                    right_max = height[right]\n                else:\n                    res += right_max - height[right]\n                right -= 1\n        \n        return res"}], "find-all-numbers-disappeared-in-an-array": [{"task_id": "find-all-numbers-disappeared-in-an-array", "completion": "class Solution(object):\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        ## O(n) time and O(1) space\n        ## 1. We can use the array as a hashmap to store the frequency of each number in the array\n        ## 2. We can iterate through the array and mark the frequency of each number as negative\n        ## 3. We can then iterate through the array again and return the numbers that are still positive\n        \n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## 1. We can use the array as a hashmap to store the frequency of each number in the array\n        ## 2. We can iterate through the array and mark the frequency of each number as negative\n        ## 3. We can then iterate through the array again and return the numbers that are still positive\n        \n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## 1. We can use the array as a hashmap to store the frequency of each number in the array\n        ## 2. We can iterate through the array and mark the frequency of each number as negative\n        ## 3. We can then iterate through the array again and return the numbers that are still positive\n        \n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## 1. We can use the array as a hashmap to store the frequency of each number in the array\n        ## 2. We can iterate through the array and mark the frequency of each number as negative\n        ## 3. We can then iterate through the array again and return the numbers that are still positive\n        \n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## 1. We can use the array as a hashmap to store the frequency of each number in the array\n        ## 2. We can iterate through the array and mark the frequency of each number as negative\n        ## 3. We can then iterate through the array again and return the numbers that are still positive\n        \n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## 1. We can use the array as a hashmap to store the frequency of each number in the array\n        ## 2. We can iterate through the array and mark the frequency of each number as negative\n        ## 3. We can then iterate through the array again and return the numbers that are still positive\n        \n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## 1. We can use the array as a hashmap to store the frequency of each number in the array\n        ## 2. We can iterate through the array and mark the frequency of each number as negative\n        ## 3. We can then iterate through the array again and return the numbers that are still positive\n        \n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## 1. We can use the array as a hashmap to store the frequency of each number in the array\n        ## 2. We can iterate through the array and mark the frequency of each number as negative\n        ## 3. We can then iterate through the array again and return the numbers that are still positive\n        \n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## 1. We can use the array as a hashmap to store the frequency of each number in the array\n        ## 2. We can iterate through the array and mark the frequency of each number as negative\n        ## 3. We can then iterate through the array again and return the numbers that are still positive\n        \n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## 1. We can use the array as a hashmap to store the frequency of each number in the array\n        ## 2. We can iterate through the array and mark the frequency of each number as negative\n        ## 3. We can then iterate through the array again and return the numbers that are still positive\n        \n        ## Time Complexity"}], "count-of-smaller-numbers-after-self": [{"task_id": "count-of-smaller-numbers-after-self", "completion": "class Solution(object):\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # sort the array\n        sorted_nums = sorted(nums)\n        \n        # create a hashmap to store the index of each element\n        num_to_index = {num: i for i, num in enumerate(sorted_nums)}\n        \n        # create a list to store the count of smaller elements to the right\n        count = [0] * len(nums)\n        \n        # iterate through the sorted array in reverse order\n        for i in range(len(nums) - 1, -1, -1):\n            # get the index of the current element\n            curr_index = num_to_index[nums[i]]\n            \n            # update the count of smaller elements to the right\n            count[i] = curr_index\n            \n            # update the index of the current element\n            num_to_index[nums[i]] = curr_index\n            \n        return count"}], "set-intersection-size-at-least-two": [{"task_id": "set-intersection-size-at-least-two", "completion": "class Solution(object):\n    def intersectionSizeTwo(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        intervals.sort(key=lambda x: x[1])\n        res = 0\n        max_val = -1\n        for interval in intervals:\n            if interval[0] > max_val:\n                res += 2\n                max_val = interval[1] - 1\n            elif interval[0] > max_val:\n                res += 1\n                max_val = interval[1] - 1\n        return res"}], "symmetric-tree": [{"task_id": "symmetric-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def isMirror(left, right):\n            if not left and not right:\n                return True\n            if not left or not right:\n                return False\n            return left.val == right.val and isMirror(left.left, right.right) and isMirror(left.right, right.left)\n        \n        return isMirror(root, root)"}], "number-of-atoms": [{"task_id": "number-of-atoms", "completion": "class Solution(object):\n    def countOfAtoms(self, formula):\n        \"\"\"\n        :type formula: str\n        :rtype: str\n        \"\"\"\n        \n        stack = []\n        i = 0\n        while i < len(formula):\n            if formula[i] == '(':\n                stack.append(0)\n                i += 1\n            elif formula[i] == ')':\n                num = 0\n                while stack and stack[-1] > 0:\n                    num += stack.pop()\n                if stack:\n                    if stack[-1] == 1:\n                        stack.pop()\n                    else:\n                        stack[-1] *= num\n                else:\n                    stack.append(num)\n                i += 1\n            else:\n                j = i + 1\n                while j < len(formula) and formula[j].islower():\n                    j += 1\n                num = int(formula[i:j]) if j == i + 1 or formula[j].isdigit() else 1\n                if stack:\n                    stack[-1] += num\n                else:\n                    stack.append(num)\n                i = j\n        res = []\n        while stack:\n            num = stack.pop()\n            if num == 1:\n                res.append('')\n            else:\n                res.append(stack[-1])\n                stack.pop()\n        return ''.join(res[::-1])"}], "binary-tree-preorder-traversal": [{"task_id": "binary-tree-preorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def preorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = [root]\n        result = []\n        \n        while stack:\n            node = stack.pop()\n            result.append(node.val)\n            \n            if node.right:\n                stack.append(node.right)\n            \n            if node.left:\n                stack.append(node.left)\n        \n        return result"}], "power-of-four": [{"task_id": "power-of-four", "completion": "class Solution(object):\n    def isPowerOfFour(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        if n == 1:\n            return True\n        \n        if n % 4 != 0:\n            return False\n        \n        return self.isPowerOfFour(n // 4)"}], "invert-binary-tree": [{"task_id": "invert-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def invertTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        \n        if root is None:\n            return None\n        \n        temp = root.left\n        root.left = root.right\n        root.right = temp\n        \n        self.invertTree(root.left)\n        self.invertTree(root.right)\n        \n        return root"}], "generate-parentheses": [{"task_id": "generate-parentheses", "completion": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        if n == 0:\n            return []\n        \n        if n == 1:\n            return ['()']\n        \n        res = []\n        res.append('()')\n        res.append('(())')\n        \n        for i in range(2, n):\n            temp = []\n            for j in range(i):\n                temp.append('(' + res[j] + ')')\n                temp.append('(' + res[i - 1 - j] + ')')\n                temp.append(res[j] + '()')\n                temp.append(res[i - 1 - j] + '()')\n            res = temp\n        \n        return res"}], "patching-array": [{"task_id": "patching-array", "completion": "class Solution(object):\n    def minPatches(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # edge case\n        if n <= 0:\n            return 0\n        \n        # edge case\n        if len(nums) == 0:\n            return n\n        \n        # edge case\n        if nums[0] > n:\n            return n\n        \n        # edge case\n        if nums[-1] >= n:\n            return 1\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] < n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] > n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] < n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] > n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] < n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] > n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] < n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] > n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] < n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] > n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] < n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] > n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] < n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] > n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] < n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] > n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] < n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] > n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] < n:"}], "longest-valid-parentheses": [{"task_id": "longest-valid-parentheses", "completion": "class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        stack = [-1]\n        max_len = 0\n        \n        for i in range(len(s)):\n            if s[i] == '(':\n                stack.append(i)\n            else:\n                stack.pop()\n                if not stack:\n                    stack.append(i)\n                else:\n                    max_len = max(max_len, i - stack[-1])\n        \n        return max_len"}], "fraction-to-recurring-decimal": [{"task_id": "fraction-to-recurring-decimal", "completion": "class Solution(object):\n    def fractionToDecimal(self, numerator, denominator):\n        \"\"\"\n        :type numerator: int\n        :type denominator: int\n        :rtype: str\n        \"\"\"\n        \n        if numerator == 0:\n            return \"0\"\n        \n        if numerator < 0 and denominator < 0:\n            numerator = abs(numerator)\n            denominator = abs(denominator)\n        elif numerator < 0:\n            numerator = abs(numerator)\n            denominator = abs(denominator)\n            return \"-\" + self.fractionToDecimal(numerator, denominator)\n        elif denominator < 0:\n            numerator = abs(numerator)\n            denominator = abs(denominator)\n            return \"-\" + self.fractionToDecimal(numerator, denominator)\n        \n        if numerator % denominator == 0:\n            return str(numerator // denominator)\n        \n        res = \"\"\n        res += str(numerator // denominator) + \".\"\n        numerator = numerator % denominator\n        numerator *= 10\n        seen = {}\n        \n        while numerator != 0:\n            if numerator in seen:\n                res = res[:seen[numerator]] + \"(\" + res[seen[numerator]:] + \")\"\n                break\n            seen[numerator] = res.len()\n            res += str(numerator // denominator)\n            numerator = numerator % denominator\n            numerator *= 10\n        \n        return res"}], "sort-list": [{"task_id": "sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        slow = fast = head\n        \n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        mid = slow.next\n        slow.next = None\n        \n        left = self.sortList(head)\n        right = self.sortList(mid)\n        \n        dummy = ListNode()\n        curr = dummy\n        \n        while left and right:\n            if left.val < right.val:\n                curr.next = left\n                left = left.next\n            else:\n                curr.next = right\n                right = right.next\n            curr = curr.next\n        \n        if left:\n            curr.next = left\n        elif right:\n            curr.next = right\n        \n        return dummy.next"}], "russian-doll-envelopes": [{"task_id": "russian-doll-envelopes", "completion": "class Solution(object):\n    def maxEnvelopes(self, envelopes):\n        \"\"\"\n        :type envelopes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        envelopes.sort(key=lambda x: (x[0], -x[1]))\n        # envelopes.sort(key=lambda x: (x[0], x[1]))\n        # envelopes.sort(key=lambda x: (x[1], x[0]))\n        # envelopes.sort(key=lambda x: (x[1], -x[0]))\n        # envelopes.sort(key=lambda x: (x[0], -x[1]))\n        # envelopes.sort(key=lambda x: (x[1], -x[0]))\n        # envelopes.sort(key=lambda x: (x[0], x[1]))\n        # envelopes.sort(key=lambda x: (x[1], -x[0]))\n        # envelopes.sort(key=lambda x: (x[0], -x[1]))\n        # envelopes.sort(key=lambda x: (x[1], -x[0]))\n        # envelopes.sort(key=lambda x: (x[0], -x[1]))\n        # envelopes.sort(key=lambda x: (x[1], -x[0]))\n        # envelopes.sort(key=lambda x: (x[0], -x[1]))\n        # envelopes.sort(key=lambda x: (x[1], -x[0]))\n        # envelopes.sort(key=lambda x: (x[0], -x[1]))\n        # envelopes.sort(key=lambda x: (x[1], -x[0]))\n        # envelopes.sort(key=lambda x: (x[0], -x[1]))\n        # envelopes.sort(key=lambda x: (x[1], -x[0]))\n        # envelopes.sort(key=lambda x: (x[0], -x[1]))\n        # envelopes.sort(key=lambda x: (x[1], -x[0]))\n        # envelopes.sort(key=lambda x: (x[0], -x[1]))\n        # envelopes.sort(key=lambda x: (x[1], -x[0]))\n        # envelopes.sort(key=lambda x: (x[0], -x[1]))\n        # envelopes.sort(key=lambda x: (x[1], -x[0]))\n        # envelopes.sort(key=lambda x: (x[0], -x[1]))\n        # envelopes.sort(key=lambda x: (x[1], -x[0]))\n        # envelopes.sort(key=lambda x: (x[0], -x[1]))\n        # envelopes.sort(key=lambda x: (x[1], -x[0]))\n        # envelopes.sort(key=lambda x: (x[0], -x[1]))\n        # envelopes.sort(key=lambda x: (x[1], -x[0]))\n        # envelopes.sort(key=lambda x: (x[0], -x[1]))\n        # envelopes.sort(key=lambda x: (x[1], -x[0]))\n        # envelopes.sort(key=lambda x: (x[0], -x[1]))\n        # envelopes.sort(key=lambda x: (x[1], -x[0]))\n        # envelopes.sort(key=lambda x: (x[0], -x[1]))\n        # envelopes.sort(key=lambda x: (x[1], -x[0]))\n        # envelopes.sort(key=lambda x: (x[0], -x[1]))\n        # envelopes.sort(key=lambda x: (x[1], -x[0]))\n        # envelopes.sort(key=lambda x: (x[0], -x[1]))\n        # envelopes.sort(key=lambda x: (x[1], -x[0]))\n        # envelopes.sort(key=lambda x: (x[0], -x[1]))\n        # envelopes.sort(key=lambda x: (x[1], -x[0]))\n        # envelopes.sort(key=lambda x: (x[0], -x"}], "set-matrix-zeroes": [{"task_id": "set-matrix-zeroes", "completion": "class Solution(object):\n    def setZeroes(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        rows = len(matrix)\n        cols = len(matrix[0])\n        \n        row_zero = False\n        \n        for i in range(rows):\n            if matrix[i][0] == 0:\n                row_zero = True\n            for j in range(1, cols):\n                if matrix[i][j] == 0:\n                    matrix[i][0] = 0\n                    matrix[0][j] = 0\n        \n        for i in range(1, rows):\n            for j in range(1, cols):\n                if matrix[i][0] == 0 or matrix[0][j] == 0:\n                    matrix[i][j] = 0\n        \n        if matrix[0][0] == 0:\n            row_zero = True\n        \n        if row_zero:\n            for i in range(rows):\n                matrix[i][0] = 0"}], "remove-nth-node-from-end-of-list": [{"task_id": "remove-nth-node-from-end-of-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # if the list is empty\n        if not head:\n            return None\n        \n        # if the list has only one node\n        if not head.next:\n            return None\n        \n        # if the list has two nodes\n        if not head.next.next:\n            head = head.next\n            return head\n        \n        # if the list has more than two nodes\n        slow = fast = head\n        \n        # move the fast pointer n nodes ahead\n        for i in range(n):\n            fast = fast.next\n        \n        # if the fast pointer is None, it means that the nth node is the last node\n        if not fast:\n            slow = slow.next\n            return slow\n        \n        # move the slow pointer until the fast pointer reaches the end\n        while fast.next:\n            slow = slow.next\n            fast = fast.next\n        \n        # remove the nth node\n        slow.next = slow.next.next\n        return head"}], "intersection-of-two-arrays": [{"task_id": "intersection-of-two-arrays", "completion": "class Solution(object):\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        nums1 = set(nums1)\n        nums2 = set(nums2)\n        return list(nums1 & nums2)"}], "super-washing-machines": [{"task_id": "super-washing-machines", "completion": "class Solution(object):\n    def findMinMoves(self, machines):\n        \"\"\"\n        :type machines: List[int]\n        :rtype: int\n        \"\"\"\n        \n        total = sum(machines)\n        n = len(machines)\n        if total % n:\n            return -1\n        avg = total // n\n        \n        curr = 0\n        max_moves = 0\n        for m in machines:\n            curr += m - avg\n            max_moves = max(max_moves, abs(curr))\n        return max_moves"}], "kth-smallest-number-in-multiplication-table": [{"task_id": "kth-smallest-number-in-multiplication-table", "completion": "class Solution(object):\n    def findKthNumber(self, m, n, k):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def count(x):\n            c = 0\n            for i in range(1, m+1):\n                c += min(x//i, n)\n            return c\n        \n        low = 1\n        high = m*n\n        \n        while low < high:\n            mid = low + (high - low)//2\n            if count(mid) < k:\n                low = mid + 1\n            else:\n                high = mid\n        \n        return low"}], "convert-sorted-list-to-binary-search-tree": [{"task_id": "convert-sorted-list-to-binary-search-tree", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedListToBST(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :rtype: Optional[TreeNode]\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        if not head.next:\n            return TreeNode(head.val)\n        \n        slow = head\n        fast = head\n        prev = None\n        \n        while fast and fast.next:\n            prev = slow\n            slow = slow.next\n            fast = fast.next.next\n        \n        prev.next = None\n        root = TreeNode(slow.val)\n        root.left = self.sortedListToBST(head)\n        root.right = self.sortedListToBST(slow.next)\n        \n        return root"}], "merge-two-sorted-lists": [{"task_id": "merge-two-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: Optional[ListNode]\n        :type list2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        \n        if list1 is None:\n            return list2\n        if list2 is None:\n            return list1\n        \n        if list1.val < list2.val:\n            temp = list1\n            list1 = list1.next\n            temp.next = self.mergeTwoLists(list1, list2)\n            return temp\n        else:\n            temp = list2\n            list2 = list2.next\n            temp.next = self.mergeTwoLists(list1, list2)\n            return temp"}], "maximal-rectangle": [{"task_id": "maximal-rectangle", "completion": "class Solution(object):\n    def maximalRectangle(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        rows = len(matrix)\n        cols = len(matrix[0])\n        \n        ## 1. build histogram\n        hist = [0] * cols\n        \n        max_area = 0\n        \n        for i in range(rows):\n            for j in range(cols):\n                if matrix[i][j] == '1':\n                    hist[j] += 1\n                else:\n                    hist[j] = 0\n            max_area = max(max_area, self.largestRectangleArea(hist))\n        \n        return max_area\n        \n        \n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        stack = []\n        max_area = 0\n        i = 0\n        \n        while i < len(heights):\n            if not stack or heights[stack[-1]] <= heights[i]:\n                stack.append(i)\n                i += 1\n            else:\n                top = stack.pop()\n                area = heights[top] * (i if not stack else i - stack[-1] - 1)\n                max_area = max(max_area, area)\n        \n        while stack:\n            top = stack.pop()\n            area = heights[top] * (i if not stack else i - stack[-1] - 1)\n            max_area = max(max_area, area)\n        \n        return max_area"}], "subsets": [{"task_id": "subsets", "completion": "class Solution(object):\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 2^n - 1\n        # 2^n - 2\n        # 2^n - 3\n        # 2^n - 4\n        # 2^n - 5\n        # 2^n - 6\n        # 2^n - 7\n        # 2^n - 8\n        # 2^n - 9\n        # 2^n - 10\n        # 2^n - 11\n        # 2^n - 12\n        # 2^n - 13\n        # 2^n - 14\n        # 2^n - 15\n        # 2^n - 16\n        # 2^n - 17\n        # 2^n - 18\n        # 2^n - 19\n        # 2^n - 20\n        # 2^n - 21\n        # 2^n - 22\n        # 2^n - 23\n        # 2^n - 24\n        # 2^n - 25\n        # 2^n - 26\n        # 2^n - 27\n        # 2^n - 28\n        # 2^n - 29\n        # 2^n - 30\n        # 2^n - 31\n        # 2^n - 32\n        # 2^n - 33\n        # 2^n - 34\n        # 2^n - 35\n        # 2^n - 36\n        # 2^n - 37\n        # 2^n - 38\n        # 2^n - 39\n        # 2^n - 40\n        # 2^n - 41\n        # 2^n - 42\n        # 2^n - 43\n        # 2^n - 44\n        # 2^n - 45\n        # 2^n - 46\n        # 2^n - 47\n        # 2^n - 48\n        # 2^n - 49\n        # 2^n - 50\n        # 2^n - 51\n        # 2^n - 52\n        # 2^n - 53\n        # 2^n - 54\n        # 2^n - 55\n        # 2^n - 56\n        # 2^n - 57\n        # 2^n - 58\n        # 2^n - 59\n        # 2^n - 60\n        # 2^n - 61\n        # 2^n - 62\n        # 2^n - 63\n        # 2^n - 64\n        # 2^n - 65\n        # 2^n - 66\n        # 2^n - 67\n        # 2^n - 68\n        # 2^n - 69\n        # 2^n - 70\n        # 2^n - 71\n        # 2^n - 72\n        # 2^n - 73\n        # 2^n - 74\n        # 2^n - 75\n        # 2^n - 76\n        # 2^n - 77\n        # 2^n - 78\n        # 2^n - 79\n        # 2^n - 80\n        # 2^n - 81\n        # 2^n - 82\n        # 2^n - 83\n        # 2^n - 84\n        # 2^n - 85\n        # 2^n - 86\n        # 2^n - 87\n        # 2^n - 88\n        # 2^n - 89\n        # 2^n - 90\n        # 2^n - 91\n        # 2^n - 92\n        # 2^n - 93\n        # 2^n - 94"}], "find-minimum-in-rotated-sorted-array-ii": [{"task_id": "find-minimum-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        l, r = 0, len(nums)-1\n        while l < r:\n            mid = (l + r) // 2\n            if nums[mid] < nums[r]:\n                r = mid\n            elif nums[mid] > nums[r]:\n                l = mid + 1\n            else:\n                r -= 1\n        return nums[l]"}], "valid-number": [{"task_id": "valid-number", "completion": "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        s = s.strip()\n        if not s:\n            return False\n        \n        if s[0] in ['+','-']:\n            s = s[1:]\n        \n        if not s:\n            return False\n        \n        if s[-1] in ['+','-']:\n            s = s[:-1]\n        \n        if 'e' in s:\n            s1,s2 = s.split('e')\n            if not s1.isdigit() or not s2.isdigit():\n                return False\n            if s1 == '' or s2 == '':\n                return False\n            return True\n        \n        if '.' in s:\n            s1,s2 = s.split('.')\n            if s1 == '' or s2 == '':\n                return False\n            if s1.isdigit() and s2.isdigit():\n                return True\n            if s1 == '' or s2 == '':\n                return False\n            return True\n        \n        if s.isdigit():\n            return True\n        \n        return False"}], "integer-to-roman": [{"task_id": "integer-to-roman", "completion": "class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        roman_dict = {\n            1000: 'M',\n            900: 'CM',\n            500: 'D',\n            400: 'CD',\n            100: 'C',\n            90: 'XC',\n            50: 'L',\n            40: 'XL',\n            10: 'X',\n            9: 'IX',\n            5: 'V',\n            4: 'IV',\n            1: 'I'\n        }\n        \n        roman_num = ''\n        \n        for key in roman_dict.keys():\n            roman_num += roman_dict[key] * (num // key)\n            num %= key\n        \n        return roman_num"}], "find-the-difference": [{"task_id": "find-the-difference", "completion": "class Solution(object):\n    def findTheDifference(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        #"}], "sudoku-solver": [{"task_id": "sudoku-solver", "completion": "class Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        def isValid(row, col, num):\n            # check row\n            for i in range(9):\n                if board[row][i] == num:\n                    return False\n            # check col\n            for i in range(9):\n                if board[i][col] == num:\n                    return False\n            # check 3x3 box\n            box_row = row // 3\n            box_col = col // 3\n            for i in range(box_row * 3, box_row * 3 + 3):\n                for j in range(box_col * 3, box_col * 3 + 3):\n                    if board[i][j] == num:\n                        return False\n            return True\n        \n        def solve(board):\n            for i in range(9):\n                for j in range(9):\n                    if board[i][j] == '.':\n                        for num in range(1, 10):\n                            if isValid(i, j, str(num)):\n                                board[i][j] = str(num)\n                                if solve(board):\n                                    return True\n                                board[i][j] = '.'\n                        return False\n            return True\n        \n        solve(board)"}], "recover-binary-search-tree": [{"task_id": "recover-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        # inorder traversal\n        # find the first node that is smaller than its previous node\n        # find the second node that is larger than its previous node\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its previous node\n        # find the second node that is larger than its previous node\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its previous node\n        # find the second node that is larger than its previous node\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its previous node\n        # find the second node that is larger than its previous node\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its previous node\n        # find the second node that is larger than its previous node\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its previous node\n        # find the second node that is larger than its previous node\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its previous node\n        # find the second node that is larger than its previous node\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its previous node\n        # find the second node that is larger than its previous node\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its previous node\n        # find the second node that is larger than its previous node\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its previous node\n        # find the second node that is larger than its previous node\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its previous node\n        # find the second node that is larger than its previous node\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its previous node\n        # find the second node that is larger than its previous node\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its previous node\n        # find the second node that is larger than its previous node\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its previous node\n        # find the second node that is larger than its previous node\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its previous node\n        # find the second node that is larger than its previous node\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its previous node\n        # find the second node that is larger than its previous node\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its previous node\n        # find the second node that is larger than its previous node\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its previous node\n        # find the second node that is larger than its previous node\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its previous node\n        # find the second node that is larger than its previous node\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its previous node\n        # find the second node that is larger than its previous node\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its previous node\n        # find the second node that is larger than its previous node\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is"}], "palindrome-linked-list": [{"task_id": "palindrome-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        \n        # find the middle of the linked list\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # reverse the second half of the linked list\n        prev = None\n        while slow:\n            temp = slow.next\n            slow.next = prev\n            prev = slow\n            slow = temp\n        \n        # compare the first half and the second half\n        while prev:\n            if prev.val != head.val:\n                return False\n            prev = prev.next\n            head = head.next\n        \n        return True"}], "valid-perfect-square": [{"task_id": "valid-perfect-square", "completion": "class Solution(object):\n    def isPerfectSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        l = 0\n        r = num\n        \n        while l <= r:\n            mid = (l + r) // 2\n            if mid * mid == num:\n                return True\n            elif mid * mid < num:\n                l = mid + 1\n            else:\n                r = mid - 1\n        \n        return False"}], "counting-bits": [{"task_id": "counting-bits", "completion": "class Solution(object):\n    def countBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if n == 0:\n            return [0]\n        \n        if n == 1:\n            return [0,1]\n        \n        ans = [0,1]\n        i = 2\n        while i <= n:\n            ans.append(ans[i//2] + i%2)\n            i += 1\n        \n        return ans"}], "remove-linked-list-elements": [{"task_id": "remove-linked-list-elements", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        while head and head.val == val:\n            head = head.next\n        \n        curr = head\n        \n        while curr and curr.next:\n            if curr.next.val == val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        \n        return head"}], "scramble-string": [{"task_id": "scramble-string", "completion": "class Solution(object):\n    def isScramble(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        \n        if s1 == s2:\n            return True\n        \n        if sorted(s1) != sorted(s2):\n            return False\n        \n        if len(s1) == 1:\n            return True\n        \n        if len(s1) == 2:\n            return s1[0] == s2[1] and s1[1] == s2[0]\n        \n        for i in range(1, len(s1) - 1):\n            if (self.isScramble(s1[:i], s2[:i]) and self.isScramble(s1[i:], s2[i:])) or (self.isScramble(s1[:i], s2[-i:]) and self.isScramble(s1[i:], s2[:-i])):\n                return True\n        \n        return False"}], "simplify-path": [{"task_id": "simplify-path", "completion": "class Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        \n        stack = []\n        path = path.split('/')\n        for p in path:\n            if p == '' or p == '.':\n                continue\n            elif p == '..':\n                if stack:\n                    stack.pop()\n            else:\n                stack.append(p)\n        return '/' + '/'.join(stack)"}], "word-search-ii": [{"task_id": "word-search-ii", "completion": "class Solution(object):\n    def findWords(self, board, words):\n        \"\"\"\n        :type board: List[List[str]]\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        trie = {}\n        for word in words:\n            node = trie\n            for char in word:\n                if char not in node:\n                    node[char] = {}\n                node = node[char]\n            node['$'] = True\n        \n        m = len(board)\n        n = len(board[0])\n        visited = set()\n        res = []\n        \n        def dfs(i, j, node):\n            if '$' in node:\n                res.append(word)\n                node.pop('$')\n            if i < 0 or i >= m or j < 0 or j >= n:\n                return\n            if (i, j) in visited:\n                return\n            visited.add((i, j))\n            char = board[i][j]\n            if char not in node:\n                return\n            dfs(i + 1, j, node[char])\n            dfs(i - 1, j, node[char])\n            dfs(i, j + 1, node[char])\n            dfs(i, j - 1, node[char])\n            visited.remove((i, j))\n        \n        for i in range(m):\n            for j in range(n):\n                dfs(i, j, trie)\n        \n        return res"}], "valid-anagram": [{"task_id": "valid-anagram", "completion": "class Solution(object):\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_dict = {}\n        t_dict = {}\n        \n        for i in range(len(s)):\n            s_dict[s[i]] = 1 + s_dict.get(s[i], 0)\n            t_dict[t[i]] = 1 + t_dict.get(t[i], 0)\n        \n        for key in s_dict:\n            if s_dict[key] != t_dict.get(key, 0):\n                return False\n        \n        return True"}], "valid-sudoku": [{"task_id": "valid-sudoku", "completion": "class Solution(object):\n    def isValidSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        \n        rows = [set() for _ in range(9)]\n        cols = [set() for _ in range(9)]\n        squares = [set() for _ in range(9)]\n        \n        for i in range(9):\n            for j in range(9):\n                if board[i][j] != '.':\n                    num = int(board[i][j])\n                    if num in rows[i] or num in cols[j] or num in squares[(i//3)*3 + j//3]:\n                        return False\n                    rows[i].add(num)\n                    cols[j].add(num)\n                    squares[(i//3)*3 + j//3].add(num)\n        \n        return True"}], "fizz-buzz": [{"task_id": "fizz-buzz", "completion": "class Solution(object):\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        answer = []\n        for i in range(1, n+1):\n            if i % 3 == 0 and i % 5 == 0:\n                answer.append(\"FizzBuzz\")\n            elif i % 3 == 0:\n                answer.append(\"Fizz\")\n            elif i % 5 == 0:\n                answer.append(\"Buzz\")\n            else:\n                answer.append(str(i))\n        return answer"}], "reverse-words-in-a-string": [{"task_id": "reverse-words-in-a-string", "completion": "class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # split the string into words\n        words = s.split()\n        \n        # reverse the words\n        words.reverse()\n        \n        # join the words back into a string\n        return ' '.join(words)"}], "excel-sheet-column-number": [{"task_id": "excel-sheet-column-number", "completion": "class Solution(object):\n    def titleToNumber(self, columnTitle):\n        \"\"\"\n        :type columnTitle: str\n        :rtype: int\n        \"\"\"\n        \n        result = 0\n        for i in range(len(columnTitle)):\n            result = result * 26 + (ord(columnTitle[i]) - ord('A') + 1)\n        return result"}], "candy": [{"task_id": "candy", "completion": "class Solution(object):\n    def candy(self, ratings):\n        \"\"\"\n        :type ratings: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(ratings)\n        candies = [1] * n\n        \n        for i in range(1, n):\n            if ratings[i] > ratings[i-1]:\n                candies[i] = candies[i-1] + 1\n        \n        for i in range(n-2, -1, -1):\n            if ratings[i] > ratings[i+1]:\n                candies[i] = max(candies[i], candies[i+1] + 1)\n        \n        return sum(candies)"}], "same-tree": [{"task_id": "same-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val != q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"}], "reorder-list": [{"task_id": "reorder-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reorderList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: None Do not return anything, modify head in-place instead.\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        slow = head\n        fast = head.next\n        \n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        second = slow.next\n        slow.next = None\n        second = self.reverse(second)\n        \n        first = head\n        \n        while second:\n            temp = first.next\n            first.next = second\n            second = second.next\n            first.next.next = temp\n            first = temp\n        \n        return head\n        \n    def reverse(self, head):\n        prev = None\n        curr = head\n        \n        while curr:\n            temp = curr.next\n            curr.next = prev\n            prev = curr\n            curr = temp\n        \n        return prev"}], "word-pattern": [{"task_id": "word-pattern", "completion": "class Solution(object):\n    def wordPattern(self, pattern, s):\n        \"\"\"\n        :type pattern: str\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        s = s.split()\n        if len(pattern) != len(s):\n            return False\n        \n        d = {}\n        d2 = {}\n        for i in range(len(pattern)):\n            if pattern[i] not in d:\n                if s[i] in d2:\n                    return False\n                d[pattern[i]] = s[i]\n                d2[s[i]] = pattern[i]\n            elif d[pattern[i]] != s[i]:\n                return False\n        return True"}], "permutations": [{"task_id": "permutations", "completion": "class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if len(nums) == 1:\n            return [nums]\n        \n        res = []\n        for i in range(len(nums)):\n            temp = nums[:i] + nums[i+1:]\n            temp_perm = self.permute(temp)\n            for j in temp_perm:\n                res.append([nums[i]] + j)\n        \n        return res"}], "search-a-2d-matrix": [{"task_id": "search-a-2d-matrix", "completion": "class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        \n        low = 0\n        high = m*n - 1\n        \n        while low <= high:\n            mid = (low + high) // 2\n            if matrix[mid//n][mid%n] == target:\n                return True\n            elif matrix[mid//n][mid%n] < target:\n                low = mid + 1\n            else:\n                high = mid - 1\n        \n        return False"}], "add-two-numbers": [{"task_id": "add-two-numbers", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # Initialize a new linked list\n        head = ListNode()\n        # Initialize a pointer to the new linked list\n        curr = head\n        # Initialize a variable to keep track of the carry\n        carry = 0\n        \n        # Iterate through the two linked lists\n        while l1 or l2 or carry:\n            # Calculate the sum of the current nodes\n            sum = carry\n            if l1:\n                sum += l1.val\n            if l2:\n                sum += l2.val\n            # Calculate the new carry\n            carry = sum // 10\n            # Calculate the new node value\n            val = sum % 10\n            # Create a new node with the calculated value\n            curr.next = ListNode(val)\n            # Move to the next node\n            curr = curr.next\n            # Move to the next node\n            if l1:\n                l1 = l1.next\n            if l2:\n                l2 = l2.next\n        \n        # Return the new linked list\n        return head.next"}], "number-complement": [{"task_id": "number-complement", "completion": "class Solution(object):\n    def findComplement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. 2's complement\n        # 2. 2's complement + 1\n        # 3. 2's complement + 1\n        # 4. 2's complement + 1\n        # 5. 2's complement + 1\n        # 6. 2's complement + 1\n        # 7. 2's complement + 1\n        # 8. 2's complement + 1\n        # 9. 2's complement + 1\n        # 10. 2's complement + 1\n        # 11. 2's complement + 1\n        # 12. 2's complement + 1\n        # 13. 2's complement + 1\n        # 14. 2's complement + 1\n        # 15. 2's complement + 1\n        # 16. 2's complement + 1\n        # 17. 2's complement + 1\n        # 18. 2's complement + 1\n        # 19. 2's complement + 1\n        # 20. 2's complement + 1\n        # 21. 2's complement + 1\n        # 22. 2's complement + 1\n        # 23. 2's complement + 1\n        # 24. 2's complement + 1\n        # 25. 2's complement + 1\n        # 26. 2's complement + 1\n        # 27. 2's complement + 1\n        # 28. 2's complement + 1\n        # 29. 2's complement + 1\n        # 30. 2's complement + 1\n        # 31. 2's complement + 1\n        # 32. 2's complement + 1\n        # 33. 2's complement + 1\n        # 34. 2's complement + 1\n        # 35. 2's complement + 1\n        # 36. 2's complement + 1\n        # 37. 2's complement + 1\n        # 38. 2's complement + 1\n        # 39. 2's complement + 1\n        # 40. 2's complement + 1\n        # 41. 2's complement + 1\n        # 42. 2's complement + 1\n        # 43. 2's complement + 1\n        # 44. 2's complement + 1\n        # 45. 2's complement + 1\n        # 46. 2's complement + 1\n        # 47. 2's complement + 1\n        # 48. 2's complement + 1\n        # 49. 2's complement + 1\n        # 50. 2's complement + 1\n        # 51. 2's complement + 1\n        # 52. 2's complement + 1\n        # 53. 2's complement + 1\n        # 54. 2's complement + 1\n        # 55. 2's complement + 1\n        # 56. 2's complement + 1\n        # 57. 2's complement + 1\n        # 58. 2's complement + 1\n        # 59. 2's complement + 1\n        # 60. 2's complement + 1\n        # 61. 2's complement + 1\n        # 62. 2's complement + 1\n        # 63. 2's complement + 1\n        # 64. 2's complement + 1\n        # 65. 2's complement + 1\n        # 66. 2's complement + 1\n        # 67. 2's complement + 1\n        # 68. 2's complement + 1\n        # 69. 2's complement + 1\n        # 70. 2's complement + 1\n        # 71. 2's complement + 1\n        # 72. 2's complement + 1\n        # 73. 2's complement + 1\n        # 74. 2's complement + 1"}], "arithmetic-slices-ii-subsequence": [{"task_id": "arithmetic-slices-ii-subsequence", "completion": "class Solution(object):\n    def numberOfArithmeticSlices(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 3:\n            return 0\n        \n        count = 0\n        diff = nums[1] - nums[0]\n        i = 2\n        \n        while i < len(nums):\n            if nums[i] - nums[i-1] == diff:\n                count += i - 1\n                i += 1\n            else:\n                diff = nums[i] - nums[i-1]\n                i += 1\n        \n        return count"}], "text-justification": [{"task_id": "text-justification", "completion": "class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\"\n        \n        res = []\n        curr_len = 0\n        curr_words = []\n        for word in words:\n            if curr_len + len(word) + len(curr_words) > maxWidth:\n                if len(curr_words) == 1:\n                    res.append(curr_words[0] + ' ' * (maxWidth - curr_len))\n                else:\n                    num_spaces = (maxWidth - curr_len) // (len(curr_words) - 1)\n                    extra_spaces = (maxWidth - curr_len) % (len(curr_words) - 1)\n                    res.append(''.join(curr_words[i] + ' ' * num_spaces + (' ' if i < extra_spaces else '') for i in range(len(curr_words))))\n                curr_len = 0\n                curr_words = []\n            curr_len += len(word)\n            curr_words.append(word)\n        if curr_words:\n            res.append(' '.join(curr_words) + ' ' * (maxWidth - curr_len - len(curr_words) + 1))\n        return res"}], "binary-tree-postorder-traversal": [{"task_id": "binary-tree-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def postorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        stack = [root]\n        result = []\n        \n        while stack:\n            node = stack.pop()\n            result.append(node.val)\n            if node.left:\n                stack.append(node.left)\n            if node.right:\n                stack.append(node.right)\n                \n        return result[::-1]"}], "container-with-most-water": [{"task_id": "container-with-most-water", "completion": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        left = 0\n        right = len(height) - 1\n        max_area = 0\n        \n        while left < right:\n            area = min(height[left], height[right]) * (right - left)\n            max_area = max(max_area, area)\n            \n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n        \n        return max_area"}], "concatenated-words": [{"task_id": "concatenated-words", "completion": "class Solution(object):\n    def findAllConcatenatedWordsInADict(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        word_set = set(words)\n        res = []\n        for word in words:\n            if self.dfs(word, word_set):\n                res.append(word)\n        return res\n        \n    def dfs(self, word, word_set):\n        for i in range(1, len(word)):\n            prefix = word[:i]\n            suffix = word[i:]\n            if prefix in word_set and (suffix in word_set or self.dfs(suffix, word_set)):\n                return True\n        return False"}], "base-7": [{"task_id": "base-7", "completion": "class Solution(object):\n    def convertToBase7(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        \n        if num < 0:\n            num = abs(num)\n            sign = -1\n        else:\n            sign = 1\n        \n        res = \"\"\n        while num:\n            res = str(num % 7) + res\n            num = num // 7\n        \n        return res if sign == 1 else \"-\" + res"}], "nim-game": [{"task_id": "nim-game", "completion": "class Solution(object):\n    def canWinNim(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        return n%4 != 0"}], "n-queens-ii": [{"task_id": "n-queens-ii", "completion": "class Solution(object):\n    def totalNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. 1 queen\n        # 2. 2 queens\n        # 3. 3 queens\n        # 4. 4 queens\n        # 5. 5 queens\n        # 6. 6 queens\n        # 7. 7 queens\n        # 8. 8 queens\n        # 9. 9 queens\n        # 10. 10 queens\n        # 11. 11 queens\n        # 12. 12 queens\n        # 13. 13 queens\n        # 14. 14 queens\n        # 15. 15 queens\n        # 16. 16 queens\n        # 17. 17 queens\n        # 18. 18 queens\n        # 19. 19 queens\n        # 20. 20 queens\n        # 21. 21 queens\n        # 22. 22 queens\n        # 23. 23 queens\n        # 24. 24 queens\n        # 25. 25 queens\n        # 26. 26 queens\n        # 27. 27 queens\n        # 28. 28 queens\n        # 29. 29 queens\n        # 30. 30 queens\n        # 31. 31 queens\n        # 32. 32 queens\n        # 33. 33 queens\n        # 34. 34 queens\n        # 35. 35 queens\n        # 36. 36 queens\n        # 37. 37 queens\n        # 38. 38 queens\n        # 39. 39 queens\n        # 40. 40 queens\n        # 41. 41 queens\n        # 42. 42 queens\n        # 43. 43 queens\n        # 44. 44 queens\n        # 45. 45 queens\n        # 46. 46 queens\n        # 47. 47 queens\n        # 48. 48 queens\n        # 49. 49 queens\n        # 50. 50 queens\n        # 51. 51 queens\n        # 52. 52 queens\n        # 53. 53 queens\n        # 54. 54 queens\n        # 55. 55 queens\n        # 56. 56 queens\n        # 57. 57 queens\n        # 58. 58 queens\n        # 59. 59 queens\n        # 60. 60 queens\n        # 61. 61 queens\n        # 62. 62 queens\n        # 63. 63 queens\n        # 64. 64 queens\n        # 65. 65 queens\n        # 66. 66 queens\n        # 67. 67 queens\n        # 68. 68 queens\n        # 69. 69 queens\n        # 70. 70 queens\n        # 71. 71 queens\n        # 72. 72 queens\n        # 73. 73 queens\n        # 74. 74 queens\n        # 75. 75 queens\n        # 76. 76 queens\n        # 77. 77 queens\n        # 78. 78 queens\n        # 79. 79 queens\n        # 80. 80 queens\n        # 81. 81 queens\n        # 82. 82 queens\n        # 83. 83 queens\n        # 84. 84 queens\n        # 85. 85 queens\n        # 86. 86 queens\n        # 87. 87 queens"}], "n-queens": [{"task_id": "n-queens", "completion": "class Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def is_valid(board, row, col):\n            for i in range(row):\n                if board[i][col] == 'Q':\n                    return False\n            i, j = row - 1, col - 1\n            while i >= 0 and j >= 0:\n                if board[i][j] == 'Q':\n                    return False\n                i -= 1\n                j -= 1\n            i, j = row - 1, col + 1\n            while i >= 0 and j < n:\n                if board[i][j] == 'Q':\n                    return False\n                i -= 1\n                j += 1\n            return True\n        \n        def backtrack(board, row):\n            if row == n:\n                res.append([''.join(row) for row in board])\n                return\n            for col in range(n):\n                if is_valid(board, row, col):\n                    board[row][col] = 'Q'\n                    backtrack(board, row + 1)\n                    board[row][col] = '.'\n        \n        res = []\n        board = [['.' for _ in range(n)] for _ in range(n)]\n        backtrack(board, 0)\n        return res"}], "word-search": [{"task_id": "word-search", "completion": "class Solution(object):\n    def exist(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if not word:\n            return True\n        \n        if not board:\n            return False\n        \n        m = len(board)\n        n = len(board[0])\n        \n        for i in range(m):\n            for j in range(n):\n                if self.dfs(board, word, i, j, 0):\n                    return True\n        \n        return False\n        \n    def dfs(self, board, word, i, j, k):\n        if k == len(word):\n            return True\n        \n        if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != word[k]:\n            return False\n        \n        temp = board[i][j]\n        board[i][j] = '#'\n        \n        res = self.dfs(board, word, i+1, j, k+1) or self.dfs(board, word, i-1, j, k+1) or self.dfs(board, word, i, j+1, k+1) or self.dfs(board, word, i, j-1, k+1)\n        \n        board[i][j] = temp\n        \n        return res"}], "merge-sorted-array": [{"task_id": "merge-sorted-array", "completion": "class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        \n        # nums1[m:m+n] = nums2[:n]\n        # nums1.sort()\n        \n        # Time Complexity: O(m+n)\n        # Space Complexity: O(1)\n        \n        # Two Pointers\n        # m -= 1\n        # n -= 1\n        # p = m + n + 1\n        # while m >= 0 and n >= 0:\n        #     if nums1[m] > nums2[n]:\n        #         nums1[p] = nums1[m]\n        #         m -= 1\n        #     else:\n        #         nums1[p] = nums2[n]\n        #         n -= 1\n        #     p -= 1\n        # if n >= 0:\n        #     nums1[:p+1] = nums2[:n+1]\n        \n        # Time Complexity: O(m+n)\n        # Space Complexity: O(1)\n        \n        # Two Pointers\n        # m -= 1\n        # n -= 1\n        # p = m + n + 1\n        # while m >= 0 and n >= 0:\n        #     if nums1[m] > nums2[n]:\n        #         nums1[p] = nums1[m]\n        #         m -= 1\n        #     else:\n        #         nums1[p] = nums2[n]\n        #         n -= 1\n        #     p -= 1\n        # if n >= 0:\n        #     nums1[:p+1] = nums2[:n+1]\n        \n        # Time Complexity: O(m+n)\n        # Space Complexity: O(1)\n        \n        # Two Pointers\n        # m -= 1\n        # n -= 1\n        # p = m + n + 1\n        # while m >= 0 and n >= 0:\n        #     if nums1[m] > nums2[n]:\n        #         nums1[p] = nums1[m]\n        #         m -= 1\n        #     else:\n        #         nums1[p] = nums2[n]\n        #         n -= 1\n        #     p -= 1\n        # if n >= 0:\n        #     nums1[:p+1] = nums2[:n+1]\n        \n        # Time Complexity: O(m+n)\n        # Space Complexity: O(1)\n        \n        # Two Pointers\n        # m -= 1\n        # n -= 1\n        # p = m + n + 1\n        # while m >= 0 and n >= 0:\n        #     if nums1[m] > nums2[n]:\n        #         nums1[p] = nums1[m]\n        #         m -= 1\n        #     else:\n        #         nums1[p] = nums2[n]\n        #         n -= 1\n        #     p -= 1\n        # if n >= 0:\n        #     nums1[:p+1] = nums2[:n+1]\n        \n        # Time Complexity: O(m+n)\n        # Space Complexity: O(1)\n        \n        # Two Pointers\n        # m -= 1\n        # n -= 1\n        # p = m + n + 1\n        # while m >= 0 and n >= 0:\n        #     if nums1[m] > nums2[n]:\n        #         nums1[p] = nums1[m]\n        #         m -= 1\n        #     else:\n        #         nums1[p] = nums2[n]\n        #         n -= 1\n        #     p -= 1\n        # if n >= 0:\n        #     nums1[:p+1] = nums2[:n+1]\n        \n        # Time Complexity: O(m+n)\n        # Space Complexity: O(1)\n        \n        # Two Pointers\n        # m -= 1\n        # n -= 1\n        # p = m + n + 1\n        # while m >= 0 and n >= 0:\n        #"}], "third-maximum-number": [{"task_id": "third-maximum-number", "completion": "class Solution(object):\n    def thirdMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max1 = float('-inf')\n        max2 = float('-inf')\n        max3 = float('-inf')\n        \n        for num in nums:\n            if num > max1:\n                max3 = max2\n                max2 = max1\n                max1 = num\n            elif num > max2 and num < max1:\n                max3 = max2\n                max2 = num\n            elif num > max3 and num < max2:\n                max3 = num\n            \n        if max3 == float('-inf'):\n            return max1\n        else:\n            return max3"}]}