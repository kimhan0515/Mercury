{"spiral-matrix": [{"task_id": "spiral-matrix", "completion": "class Solution(object):\n    def spiralOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not matrix:\n            return []\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        res = []\n        i = 0\n        j = 0\n        while i < m and j < n:\n            for k in range(j, n):\n                res.append(matrix[i][k])\n            i += 1\n            for k in range(i, m):\n                res.append(matrix[k][n-1])\n            n -= 1\n            if i < m:\n                for k in range(n-1, j, -1):\n                    res.append(matrix[m-1][k])\n            m -= 1\n            if j < n:\n                for k in range(m-1, i, -1):\n                    res.append(matrix[k][j])\n            j += 1\n        return res"}, {"task_id": "spiral-matrix", "completion": "class Solution(object):\n    def spiralOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not matrix:\n            return []\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        res = []\n        i = 0\n        j = 0\n        while i < m and j < n:\n            for k in range(j, n):\n                res.append(matrix[i][k])\n            i += 1\n            for k in range(i, m):\n                res.append(matrix[k][n-1])\n            n -= 1\n            if i < m:\n                for k in range(n-1, j, -1):\n                    res.append(matrix[m-1][k])\n            m -= 1\n            if j < n:\n                for k in range(m-1, i, -1):\n                    res.append(matrix[k][j])\n            j += 1\n        return res"}, {"task_id": "spiral-matrix", "completion": "class Solution(object):\n    def spiralOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not matrix:\n            return []\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        res = []\n        i = 0\n        j = 0\n        while i < m and j < n:\n            for k in range(j, n):\n                res.append(matrix[i][k])\n            i += 1\n            for k in range(i, m):\n                res.append(matrix[k][n-1])\n            n -= 1\n            if i < m:\n                for k in range(n-1, j, -1):\n                    res.append(matrix[m-1][k])\n            m -= 1\n            if j < n:\n                for k in range(m-1, i, -1):\n                    res.append(matrix[k][j])\n            j += 1\n        return res"}, {"task_id": "spiral-matrix", "completion": "class Solution(object):\n    def spiralOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not matrix:\n            return []\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        \n        res = []\n        left, right, top, bottom = 0, n-1, 0, m-1\n        \n        while left <= right and top <= bottom:\n            for i in range(left, right+1):\n                res.append(matrix[top][i])\n            top += 1\n            for i in range(top, bottom+1):\n                res.append(matrix[i][right])\n            right -= 1\n            for i in range(right, left-1, -1):\n                res.append(matrix[bottom][i])\n            bottom -= 1\n            for i in range(bottom, top-1, -1):\n                res.append(matrix[i][left])\n            left += 1\n        \n        return res"}, {"task_id": "spiral-matrix", "completion": "class Solution(object):\n    def spiralOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not matrix:\n            return []\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        \n        res = []\n        i = 0\n        j = 0\n        di = 0\n        dj = 1\n        \n        while i < m and j < n:\n            res.append(matrix[i][j])\n            matrix[i][j] = -1\n            \n            if di == 0:\n                j += 1\n            elif di == 1:\n                i += 1\n            elif di == 2:\n                j -= 1\n            else:\n                i -= 1\n            \n            if matrix[i][j] == -1:\n                di += 1\n                dj *= -1\n                \n        return res"}], "summary-ranges": [{"task_id": "summary-ranges", "completion": "class Solution(object):\n    def summaryRanges(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        if not nums:\n            return []\n        \n        res = []\n        start = nums[0]\n        end = nums[0]\n        \n        for i in range(1, len(nums)):\n            if nums[i] == end + 1:\n                end = nums[i]\n            else:\n                if start == end:\n                    res.append(str(start))\n                else:\n                    res.append(str(start) + '->' + str(end))\n                start = nums[i]\n                end = nums[i]\n        \n        if start == end:\n            res.append(str(start))\n        else:\n            res.append(str(start) + '->' + str(end))\n        \n        return res"}, {"task_id": "summary-ranges", "completion": "class Solution(object):\n    def summaryRanges(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        if not nums:\n            return []\n        \n        res = []\n        start = nums[0]\n        end = nums[0]\n        \n        for i in range(1, len(nums)):\n            if nums[i] == end + 1:\n                end = nums[i]\n            else:\n                if start == end:\n                    res.append(str(start))\n                else:\n                    res.append(str(start) + '->' + str(end))\n                start = nums[i]\n                end = nums[i]\n        \n        if start == end:\n            res.append(str(start))\n        else:\n            res.append(str(start) + '->' + str(end))\n        \n        return res"}, {"task_id": "summary-ranges", "completion": "class Solution(object):\n    def summaryRanges(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        if not nums:\n            return []\n        \n        res = []\n        start = nums[0]\n        end = nums[0]\n        \n        for i in range(1, len(nums)):\n            if nums[i] == end + 1:\n                end = nums[i]\n            else:\n                if start == end:\n                    res.append(str(start))\n                else:\n                    res.append(str(start) + '->' + str(end))\n                start = nums[i]\n                end = nums[i]\n        \n        if start == end:\n            res.append(str(start))\n        else:\n            res.append(str(start) + '->' + str(end))\n        \n        return res"}, {"task_id": "summary-ranges", "completion": "class Solution(object):\n    def summaryRanges(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        if not nums:\n            return []\n        \n        res = []\n        start = nums[0]\n        end = nums[0]\n        \n        for i in range(1, len(nums)):\n            if nums[i] == end + 1:\n                end = nums[i]\n            else:\n                if start == end:\n                    res.append(str(start))\n                else:\n                    res.append(str(start) + '->' + str(end))\n                start = nums[i]\n                end = nums[i]\n        \n        if start == end:\n            res.append(str(start))\n        else:\n            res.append(str(start) + '->' + str(end))\n        \n        return res"}, {"task_id": "summary-ranges", "completion": "class Solution(object):\n    def summaryRanges(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        if not nums:\n            return []\n        \n        res = []\n        start = nums[0]\n        end = nums[0]\n        \n        for i in range(1, len(nums)):\n            if nums[i] == end + 1:\n                end = nums[i]\n            else:\n                if start == end:\n                    res.append(str(start))\n                else:\n                    res.append(str(start) + '->' + str(end))\n                start = nums[i]\n                end = nums[i]\n        \n        if start == end:\n            res.append(str(start))\n        else:\n            res.append(str(start) + '->' + str(end))\n        \n        return res"}], "distinct-subsequences": [{"task_id": "distinct-subsequences", "completion": "class Solution(object):\n    def numDistinct(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"\n        \n        # dp[i][j] = number of distinct subsequences of s[0:i] that equals t[0:j]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ..."}, {"task_id": "distinct-subsequences", "completion": "class Solution(object):\n    def numDistinct(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"\n        \n        # dp[i][j] = number of distinct subsequences of s[:i] that equals t[:j]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp["}, {"task_id": "distinct-subsequences", "completion": "class Solution(object):\n    def numDistinct(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"\n        \n        # dp[i][j] = number of distinct subsequences of s[:i] that equals t[:j]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        #           if s[i] == t[j]\n        #           = dp[i-1][j] if s[i] != t[j]\n        #           = 0 if i == 0 or j == 0\n        # dp[i][j] = dp[i-1][j] if s[i] != t[j]\n        #           = dp[i-1][j-1] + dp[i-1][j-2] + ... + dp[i-1][j-s[i]]\n        #           if s[i] == t[j]\n        #           = 0 if i == 0 or j == 0\n        # dp[i][j] = dp[i-1][j] if s[i] != t[j]\n        #           = dp[i-1][j-1] + dp[i-1][j-2] + ... + dp[i-1][j-s[i]]\n        #           if s[i] == t[j]\n        #           = 0 if i == 0 or j == 0\n        # dp[i][j] = dp[i-1][j] if s[i] != t[j]\n        #           = dp[i-1][j-1] + dp[i-1][j-2] + ... + dp[i-1][j-s[i]]\n        #           if s[i] == t[j]\n        #           = 0 if i == 0 or j == 0\n        # dp[i][j] = dp[i-1][j] if s[i] != t[j]\n        #           = dp[i-1][j-1] + dp[i-1][j-2] + ... + dp[i-1][j-s[i]]\n        #           if s[i] == t[j]\n        #           = 0 if i == 0 or j == 0\n        # dp[i][j] = dp[i-1][j] if s[i] != t[j]\n        #           = dp[i-1][j-1] + dp[i-1][j-2] + ... + dp[i-1][j-s[i]]\n        #           if s[i] == t[j]\n        #           = 0 if i == 0 or j == 0\n        # dp[i][j] = dp[i-1][j] if s[i] != t[j]\n        #           = dp[i-1][j-1] + dp[i-1][j-2] + ... + dp[i-1][j-s[i]]\n        #           if s[i] == t[j]\n        #           = 0 if i == 0 or j == 0\n        # dp[i][j] = dp[i-1][j] if s[i] != t[j]\n        #           = dp[i-1][j-1] + dp[i-1][j-2] + ... + dp[i-1][j-s[i]]\n        #           if s[i] == t[j]\n        #           = 0 if i == 0 or j == 0\n        # dp[i][j] = dp[i-1][j] if s[i] != t[j]\n        #           = dp[i-1][j-1] + dp[i-1][j-2] + ... + dp[i-1][j-s[i]]\n        #           if s[i] == t[j]\n        #           = 0 if i == 0 or j == 0\n        # dp[i][j] = dp[i-1][j] if s[i] != t[j]\n        #           = dp[i-1][j-1] + dp[i-1][j"}, {"task_id": "distinct-subsequences", "completion": "class Solution(object):\n    def numDistinct(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"\n        \n        # dp[i][j] = number of distinct subsequences of s[0:i] that equals t[0:j]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ..."}, {"task_id": "distinct-subsequences", "completion": "class Solution(object):\n    def numDistinct(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"\n        \n        # dp[i][j] = number of distinct subsequences of s[0:i] that equals t[0:j]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-s[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ..."}], "first-missing-positive": [{"task_id": "first-missing-positive", "completion": "class Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5c0f\u7684\u6b63\u6574\u6570\n        # 2. \u627e\u5230\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\n        # 3. \u627e\u5230\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\n        # 4. \u627e\u5230\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\u7684\u4e0b\u4e00\u4e2a\u503c\n        # 5. \u5982\u679c\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\u7684\u4e0b\u4e00\u4e2a\u503c\u4e0d\u7b49\u4e8e\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\uff0c\u5219\u8fd4\u56de\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\u7684\u4e0b\u4e00\u4e2a\u503c\n        # 6. \u5982\u679c\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\u7684\u4e0b\u4e00\u4e2a\u503c\u7b49\u4e8e\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\uff0c\u5219\u8fd4\u56de\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c + 1\n        \n        # 1. \u627e\u5230\u6700\u5c0f\u7684\u6b63\u6574\u6570\n        min_positive_num = 1\n        for num in nums:\n            if num > 0 and num < min_positive_num:\n                min_positive_num = num\n        \n        # 2. \u627e\u5230\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\n        min_positive_num_index = 0\n        for i in range(len(nums)):\n            if nums[i] == min_positive_num:\n                min_positive_num_index = i\n                break\n        \n        # 3. \u627e\u5230\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\n        min_positive_num_value = nums[min_positive_num_index]\n        \n        # 4. \u627e\u5230\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\u7684\u4e0b\u4e00\u4e2a\u503c\n        min_positive_num_next_value = nums[min_positive_num_index + 1]\n        \n        # 5. \u5982\u679c\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\u7684\u4e0b\u4e00\u4e2a\u503c\u4e0d\u7b49\u4e8e\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\uff0c\u5219\u8fd4\u56de\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\u7684\u4e0b\u4e00\u4e2a\u503c\n        if min_positive_num_next_value != min_positive_num_value:\n            return min_positive_num_next_value\n        \n        # 6. \u5982\u679c\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\u7684\u4e0b\u4e00\u4e2a\u503c\u7b49\u4e8e\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\uff0c\u5219\u8fd4\u56de\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c + 1\n        return min_positive_num_value + 1"}, {"task_id": "first-missing-positive", "completion": "class Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5c0f\u7684\u6b63\u6574\u6570\n        # 2. \u627e\u5230\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\n        # 3. \u627e\u5230\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\n        # 4. \u627e\u5230\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\u7684\u4e0b\u4e00\u4e2a\u503c\n        # 5. \u5982\u679c\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\u7684\u4e0b\u4e00\u4e2a\u503c\u4e0d\u7b49\u4e8e\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\uff0c\u5219\u8fd4\u56de\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\u7684\u4e0b\u4e00\u4e2a\u503c\n        # 6. \u5982\u679c\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\u7684\u4e0b\u4e00\u4e2a\u503c\u7b49\u4e8e\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\uff0c\u5219\u8fd4\u56de\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c + 1\n        \n        # 1. \u627e\u5230\u6700\u5c0f\u7684\u6b63\u6574\u6570\n        min_positive = 1\n        for num in nums:\n            if num > 0 and num < min_positive:\n                min_positive = num\n        \n        # 2. \u627e\u5230\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\n        min_positive_index = 0\n        for i in range(len(nums)):\n            if nums[i] == min_positive:\n                min_positive_index = i\n        \n        # 3. \u627e\u5230\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\n        min_positive_value = nums[min_positive_index]\n        \n        # 4. \u627e\u5230\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\u7684\u4e0b\u4e00\u4e2a\u503c\n        min_positive_next_value = nums[min_positive_index + 1]\n        \n        # 5. \u5982\u679c\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\u7684\u4e0b\u4e00\u4e2a\u503c\u4e0d\u7b49\u4e8e\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\uff0c\u5219\u8fd4\u56de\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\u7684\u4e0b\u4e00\u4e2a\u503c\n        if min_positive_next_value != min_positive_value:\n            return min_positive_next_value\n        \n        # 6. \u5982\u679c\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\u7684\u4e0b\u4e00\u4e2a\u503c\u7b49\u4e8e\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\uff0c\u5219\u8fd4\u56de\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c + 1\n        return min_positive_value + 1"}, {"task_id": "first-missing-positive", "completion": "class Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5c0f\u7684\u6b63\u6574\u6570\n        # 2. \u627e\u5230\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\n        # 3. \u627e\u5230\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\n        # 4. \u627e\u5230\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\u7684\u4e0b\u4e00\u4e2a\u503c\n        # 5. \u5982\u679c\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\u7684\u4e0b\u4e00\u4e2a\u503c\u4e0d\u7b49\u4e8e\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\uff0c\u5219\u8fd4\u56de\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\u7684\u4e0b\u4e00\u4e2a\u503c\n        # 6. \u5982\u679c\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\u7684\u4e0b\u4e00\u4e2a\u503c\u7b49\u4e8e\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\uff0c\u5219\u8fd4\u56de\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c + 1\n        \n        # 1. \u627e\u5230\u6700\u5c0f\u7684\u6b63\u6574\u6570\n        min_positive_num = 1\n        for num in nums:\n            if num > 0 and num < min_positive_num:\n                min_positive_num = num\n        \n        # 2. \u627e\u5230\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\n        min_positive_num_index = 0\n        for i in range(len(nums)):\n            if nums[i] == min_positive_num:\n                min_positive_num_index = i\n        \n        # 3. \u627e\u5230\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\n        min_positive_num_value = nums[min_positive_num_index]\n        \n        # 4. \u627e\u5230\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\u7684\u4e0b\u4e00\u4e2a\u503c\n        min_positive_num_value_next = nums[min_positive_num_index + 1]\n        \n        # 5. \u5982\u679c\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\u7684\u4e0b\u4e00\u4e2a\u503c\u4e0d\u7b49\u4e8e\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\uff0c\u5219\u8fd4\u56de\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\u7684\u4e0b\u4e00\u4e2a\u503c\n        if min_positive_num_value_next != min_positive_num_value:\n            return min_positive_num_value_next\n        \n        # 6. \u5982\u679c\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\u7684\u4e0b\u4e00\u4e2a\u503c\u7b49\u4e8e\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\uff0c\u5219\u8fd4\u56de\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c + 1\n        return min_positive_num_value + 1"}, {"task_id": "first-missing-positive", "completion": "class Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5c0f\u7684\u6b63\u6574\u6570\n        # 2. \u627e\u5230\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\n        # 3. \u627e\u5230\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\n        # 4. \u627e\u5230\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\u7684\u4e0b\u4e00\u4e2a\u503c\n        # 5. \u5982\u679c\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\u7684\u4e0b\u4e00\u4e2a\u503c\u4e0d\u7b49\u4e8e\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\uff0c\u5219\u8fd4\u56de\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\u7684\u4e0b\u4e00\u4e2a\u503c\n        # 6. \u5982\u679c\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\u7684\u4e0b\u4e00\u4e2a\u503c\u7b49\u4e8e\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\uff0c\u5219\u8fd4\u56de\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c + 1\n        \n        # 1. \u627e\u5230\u6700\u5c0f\u7684\u6b63\u6574\u6570\n        min_positive_num = 1\n        for num in nums:\n            if num > 0 and num < min_positive_num:\n                min_positive_num = num\n        \n        # 2. \u627e\u5230\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\n        min_positive_num_index = 0\n        for i in range(len(nums)):\n            if nums[i] == min_positive_num:\n                min_positive_num_index = i\n        \n        # 3. \u627e\u5230\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\n        min_positive_num_value = nums[min_positive_num_index]\n        \n        # 4. \u627e\u5230\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\u7684\u4e0b\u4e00\u4e2a\u503c\n        min_positive_num_next_value = nums[min_positive_num_index + 1]\n        \n        # 5. \u5982\u679c\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\u7684\u4e0b\u4e00\u4e2a\u503c\u4e0d\u7b49\u4e8e\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\uff0c\u5219\u8fd4\u56de\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\u7684\u4e0b\u4e00\u4e2a\u503c\n        if min_positive_num_next_value != min_positive_num_value:\n            return min_positive_num_next_value\n        \n        # 6. \u5982\u679c\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\u7684\u4e0b\u4e00\u4e2a\u503c\u7b49\u4e8e\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\uff0c\u5219\u8fd4\u56de\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c + 1\n        return min_positive_num_value + 1"}, {"task_id": "first-missing-positive", "completion": "class Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5c0f\u7684\u6b63\u6574\u6570\n        # 2. \u627e\u5230\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\n        # 3. \u627e\u5230\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\n        # 4. \u627e\u5230\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\u7684\u4e0b\u4e00\u4e2a\u503c\n        # 5. \u5982\u679c\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\u7684\u4e0b\u4e00\u4e2a\u503c\u4e0d\u7b49\u4e8e\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\uff0c\u5219\u8fd4\u56de\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\u7684\u4e0b\u4e00\u4e2a\u503c\n        # 6. \u5982\u679c\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\u7684\u4e0b\u4e00\u4e2a\u503c\u7b49\u4e8e\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\uff0c\u5219\u8fd4\u56de\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c + 1\n        \n        # 1. \u627e\u5230\u6700\u5c0f\u7684\u6b63\u6574\u6570\n        min_positive = 1\n        for num in nums:\n            if num > 0 and num < min_positive:\n                min_positive = num\n        \n        # 2. \u627e\u5230\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\n        min_positive_index = 0\n        for i in range(len(nums)):\n            if nums[i] == min_positive:\n                min_positive_index = i\n        \n        # 3. \u627e\u5230\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\n        min_positive_value = nums[min_positive_index]\n        \n        # 4. \u627e\u5230\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\u7684\u4e0b\u4e00\u4e2a\u503c\n        min_positive_value_next = nums[min_positive_index + 1]\n        \n        # 5. \u5982\u679c\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\u7684\u4e0b\u4e00\u4e2a\u503c\u4e0d\u7b49\u4e8e\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\uff0c\u5219\u8fd4\u56de\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\u7684\u4e0b\u4e00\u4e2a\u503c\n        if min_positive_value_next != min_positive_value:\n            return min_positive_value_next\n        \n        # 6. \u5982\u679c\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\u7684\u4e0b\u4e00\u4e2a\u503c\u7b49\u4e8e\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c\uff0c\u5219\u8fd4\u56de\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u6807\u7684\u503c + 1\n        return min_positive_value + 1"}], "permutation-sequence": [{"task_id": "permutation-sequence", "completion": "class Solution(object):\n    def getPermutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u6392\u5217\u7ec4\u5408\n        # 2. \u6392\u5217\u7ec4\u5408\u7684\u9012\u5f52\u5b9e\u73b0\n        # 3. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b0\n        # 4. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b02\n        # 5. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b03\n        # 6. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b04\n        # 7. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b05\n        # 8. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b06\n        # 9. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b07\n        # 10. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b08\n        # 11. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b09\n        # 12. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b010\n        # 13. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b011\n        # 14. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b012\n        # 15. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b013\n        # 16. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b014\n        # 17. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b015\n        # 18. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b016\n        # 19. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b017\n        # 20. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b018\n        # 21. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b019\n        # 22. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b020\n        # 23. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b021\n        # 24. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b022\n        # 25. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b023\n        # 26. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b024\n        # 27. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b025\n        # 28. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b026\n        # 29. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b027\n        # 30. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b028\n        # 31. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b029\n        # 32. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b030\n        # 33. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b031\n        # 34. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b032\n        # 35. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b033\n        # 36. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b034\n        # 37. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b035\n        # 38. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b036\n        # 39. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b037\n        # 40. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b038\n        # 41. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b039\n        # 42. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b040\n        # 43. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b041\n        # 44. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b042\n        # 45. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b043\n        # 46. \u6392\u5217\u7ec4\u5408\u7684\u8fed"}, {"task_id": "permutation-sequence", "completion": "class Solution(object):\n    def getPermutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u6392\u5217\u7ec4\u5408\n        # 2. \u6392\u5217\u7ec4\u5408\u7684\u9006\u5e8f\n        # 3. \u6392\u5217\u7ec4\u5408\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 4. \u6392\u5217\u7ec4\u5408\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 5. \u6392\u5217\u7ec4\u5408\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 6. \u6392\u5217\u7ec4\u5408\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 7. \u6392\u5217\u7ec4\u5408\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 8. \u6392\u5217\u7ec4\u5408\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 9. \u6392\u5217\u7ec4\u5408\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 10. \u6392\u5217\u7ec4\u5408\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 11. \u6392\u5217\u7ec4\u5408\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 12. \u6392\u5217\u7ec4\u5408\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 13. \u6392\u5217\u7ec4\u5408\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 14. \u6392\u5217\u7ec4\u5408\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 15. \u6392\u5217\u7ec4\u5408\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 16. \u6392\u5217\u7ec4\u5408\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 17. \u6392\u5217\u7ec4\u5408\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 18. \u6392\u5217\u7ec4\u5408\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 19. \u6392\u5217\u7ec4\u5408\u7684\ufffd\ufffd"}, {"task_id": "permutation-sequence", "completion": "class Solution(object):\n    def getPermutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u6392\u5217\u7ec4\u5408\n        # 2. \u6392\u5217\u7ec4\u5408\u7684\u9006\u5e8f\n        # 3. \u6392\u5217\u7ec4\u5408\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 4. \u6392\u5217\u7ec4\u5408\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 5. \u6392\u5217\u7ec4\u5408\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 6. \u6392\u5217\u7ec4\u5408\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 7. \u6392\u5217\u7ec4\u5408\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 8. \u6392\u5217\u7ec4\u5408\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 9. \u6392\u5217\u7ec4\u5408\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 10. \u6392\u5217\u7ec4\u5408\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 11. \u6392\u5217\u7ec4\u5408\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 12. \u6392\u5217\u7ec4\u5408\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 13. \u6392\u5217\u7ec4\u5408\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 14. \u6392\u5217\u7ec4\u5408\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 15. \u6392\u5217\u7ec4\u5408\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 16. \u6392\u5217\u7ec4\u5408\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 17. \u6392\u5217\u7ec4\u5408\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 18. \u6392\u5217\u7ec4\u5408\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 19. \u6392\u5217\u7ec4\u5408\u7684\ufffd\ufffd"}, {"task_id": "permutation-sequence", "completion": "class Solution(object):\n    def getPermutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u6392\u5217\u7ec4\u5408\n        # 2. \u6392\u5217\u7ec4\u5408\u7684\u9012\u5f52\u5b9e\u73b0\n        # 3. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b0\n        # 4. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b02\n        # 5. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b03\n        # 6. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b04\n        # 7. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b05\n        # 8. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b06\n        # 9. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b07\n        # 10. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b08\n        # 11. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b09\n        # 12. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b010\n        # 13. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b011\n        # 14. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b012\n        # 15. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b013\n        # 16. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b014\n        # 17. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b015\n        # 18. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b016\n        # 19. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b017\n        # 20. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b018\n        # 21. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b019\n        # 22. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b020\n        # 23. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b021\n        # 24. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b022\n        # 25. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b023\n        # 26. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b024\n        # 27. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b025\n        # 28. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b026\n        # 29. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b027\n        # 30. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b028\n        # 31. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b029\n        # 32. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b030\n        # 33. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b031\n        # 34. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b032\n        # 35. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b033\n        # 36. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b034\n        # 37. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b035\n        # 38. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b036\n        # 39. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b037\n        # 40. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b038\n        # 41. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b039\n        # 42. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b040\n        # 43. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b041\n        # 44. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b042\n        # 45. \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\u5b9e\u73b043\n        # 46. \u6392\u5217\u7ec4\u5408\u7684\u8fed"}, {"task_id": "permutation-sequence", "completion": "class Solution(object):\n    def getPermutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u6392\u5217\u7ec4\u5408\n        # 2. \u6392\u5217\u7ec4\u5408\u7684\u9006\u5e8f\n        # 3. \u6392\u5217\u7ec4\u5408\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 4. \u6392\u5217\u7ec4\u5408\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 5. \u6392\u5217\u7ec4\u5408\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 6. \u6392\u5217\u7ec4\u5408\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 7. \u6392\u5217\u7ec4\u5408\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 8. \u6392\u5217\u7ec4\u5408\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 9. \u6392\u5217\u7ec4\u5408\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 10. \u6392\u5217\u7ec4\u5408\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 11. \u6392\u5217\u7ec4\u5408\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 12. \u6392\u5217\u7ec4\u5408\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 13. \u6392\u5217\u7ec4\u5408\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 14. \u6392\u5217\u7ec4\u5408\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 15. \u6392\u5217\u7ec4\u5408\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 16. \u6392\u5217\u7ec4\u5408\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 17. \u6392\u5217\u7ec4\u5408\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 18. \u6392\u5217\u7ec4\u5408\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 19. \u6392\u5217\u7ec4\u5408\u7684\ufffd\ufffd"}], "two-sum-ii-input-array-is-sorted": [{"task_id": "two-sum-ii-input-array-is-sorted", "completion": "class Solution(object):\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u4e24\u4e2a\u6570\u4e4b\u548c\u7b49\u4e8e target \u7684\u4e0b\u6807\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u4e24\u4e2a\u6570\u4e4b\u548c\u7b49\u4e8e target \u7684\u4e0b\u6807\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u627e\u5230\u4e24\u4e2a\u6570\u4e4b\u548c\u7b49\u4e8e target \u7684\u4e0b\u6807\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u4e24\u4e2a\u6570\u4e4b\u548c\u7b49\u4e8e target \u7684\u4e0b\u6807\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u4e24\u4e2a\u6570\u4e4b\u548c\u7b49\u4e8e target \u7684\u4e0b\u6807\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u4e24\u4e2a\u6570\u4e4b\u548c\u7b49\u4e8e target \u7684\u4e0b\u6807\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u4e24\u4e2a\u6570\u4e4b\u548c\u7b49\u4e8e target \u7684\u4e0b\u6807\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u4e24\u4e2a\u6570\u4e4b\u548c\u7b49\u4e8e target \u7684\u4e0b\u6807\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u4e24\u4e2a\u6570\u4e4b\u548c\u7b49\u4e8e target \u7684\u4e0b\u6807\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u4e24\u4e2a\u6570\u4e4b\u548c\u7b49\u4e8e target \u7684\u4e0b\u6807\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u4e24\u4e2a\u6570\u4e4b\u548c\u7b49\u4e8e target \u7684\u4e0b\u6807\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u4e24\u4e2a\u6570\u4e4b\u548c\u7b49\u4e8e target \u7684\u4e0b\u6807\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u4e24\u4e2a\u6570\u4e4b\u548c\u7b49\u4e8e target \u7684\u4e0b\u6807\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u4e24\u4e2a\u6570\u4e4b\u548c\u7b49\u4e8e target \u7684\u4e0b\u6807\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u4e24\u4e2a\u6570\u4e4b\u548c\u7b49\u4e8e target \u7684\u4e0b\u6807\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u4e24\u4e2a\u6570\u4e4b\u548c\u7b49\u4e8e target \u7684\u4e0b\u6807\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u4e24\u4e2a\u6570\u4e4b\u548c\u7b49\u4e8e target \u7684\u4e0b\u6807\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u4e24\u4e2a\u6570\u4e4b\u548c\u7b49\u4e8e target \u7684\u4e0b\u6807\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u4e24\u4e2a\u6570\u4e4b\u548c\u7b49\u4e8e target \u7684\u4e0b\u6807\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        #"}, {"task_id": "two-sum-ii-input-array-is-sorted", "completion": "class Solution(object):\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u4e24\u4e2a\u6570\u4e4b\u548c\u7b49\u4e8e target \u7684\u4e0b\u6807\n        # \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230 target - numbers[i] \u7684\u4e0b\u6807\n        # \u5982\u679c\u4e0b\u6807\u5728 i \u4e4b\u540e\uff0c\u5219\u8df3\u8fc7\n        # \u5982\u679c\u4e0b\u6807\u5728 i \u4e4b\u524d\uff0c\u5219\u8fd4\u56de [i, j]\n        # \u5982\u679c\u4e0b\u6807\u76f8\u540c\uff0c\u5219\u8fd4\u56de [i, i]\n        # \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u5219\u8fd4\u56de [-1, -1]\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u4e24\u4e2a\u6570\u4e4b\u548c\u7b49\u4e8e target \u7684\u4e0b\u6807\n        # \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230 target - numbers[i] \u7684\u4e0b\u6807\n        # \u5982\u679c\u4e0b\u6807\u5728 i \u4e4b\u540e\uff0c\u5219\u8df3\u8fc7\n        # \u5982\u679c\u4e0b\u6807\u5728 i \u4e4b\u524d\uff0c\u5219\u8fd4\u56de [i, j]\n        # \u5982\u679c\u4e0b\u6807\u76f8\u540c\uff0c\u5219\u8fd4\u56de [i, i]\n        # \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u5219\u8fd4\u56de [-1, -1]\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u4e24\u4e2a\u6570\u4e4b\u548c\u7b49\u4e8e target \u7684\u4e0b\u6807\n        # \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230 target - numbers[i] \u7684\u4e0b\u6807\n        # \u5982\u679c\u4e0b\u6807\u5728 i \u4e4b\u540e\uff0c\u5219\u8df3\u8fc7\n        # \u5982\u679c\u4e0b\u6807\u5728 i \u4e4b\u524d\uff0c\u5219\u8fd4\u56de [i, j]\n        # \u5982\u679c\u4e0b\u6807\u76f8\u540c\uff0c\u5219\u8fd4\u56de [i, i]\n        # \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u5219\u8fd4\u56de [-1, -1]\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u4e24\u4e2a\u6570\u4e4b\u548c\u7b49\u4e8e target \u7684\u4e0b\u6807\n        # \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230 target - numbers[i] \u7684\u4e0b\u6807\n        # \u5982\u679c\u4e0b\u6807\u5728 i \u4e4b\u540e\uff0c\u5219\u8df3\u8fc7\n        # \u5982\u679c\u4e0b\u6807\u5728 i \u4e4b\u524d\uff0c\u5219\u8fd4\u56de [i, j]\n        # \u5982\u679c\u4e0b\u6807\u76f8\u540c\uff0c\u5219\u8fd4\u56de [i, i]\n        # \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u5219\u8fd4\u56de [-1, -1]\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u4e24\u4e2a\u6570\u4e4b\u548c\u7b49\u4e8e target \u7684\u4e0b\u6807\n        # \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230 target - numbers[i] \u7684\u4e0b\u6807\n        # \u5982\u679c\u4e0b\u6807\u5728 i \u4e4b\u540e\uff0c\u5219\u8df3\u8fc7\n        # \u5982\u679c\u4e0b\u6807\u5728 i \u4e4b\u524d\uff0c\u5219\u8fd4\u56de [i, j]\n        # \u5982\u679c\u4e0b\u6807\u76f8\u540c\uff0c\u5219\u8fd4\u56de [i, i]\n        # \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u5219\u8fd4\u56de [-1, -1]\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u4e24\u4e2a\u6570\u4e4b\u548c\u7b49\u4e8e target \u7684\u4e0b\u6807\n        # \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230 target - numbers[i] \u7684\u4e0b\u6807\n        # \u5982\u679c\u4e0b\u6807\u5728 i \u4e4b\u540e\uff0c\u5219\u8df3\u8fc7\n        # \u5982\u679c\u4e0b\u6807\u5728 i \u4e4b\u524d\uff0c\u5219\u8fd4\u56de [i, j]\n        # \u5982\u679c\u4e0b\u6807\u76f8\u540c\uff0c\u5219\u8fd4\u56de [i, i]\n        # \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u5219\u8fd4\u56de [-1, -1]\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)"}, {"task_id": "two-sum-ii-input-array-is-sorted", "completion": "class Solution(object):\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u4e24\u4e2a\u6570\u4e4b\u548c\u7b49\u4e8e target \u7684\u4e0b\u6807\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u4e24\u4e2a\u6570\u4e4b\u548c\u7b49\u4e8e target \u7684\u4e0b\u6807\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u627e\u5230\u4e24\u4e2a\u6570\u4e4b\u548c\u7b49\u4e8e target \u7684\u4e0b\u6807\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u4e24\u4e2a\u6570\u4e4b\u548c\u7b49\u4e8e target \u7684\u4e0b\u6807\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u4e24\u4e2a\u6570\u4e4b\u548c\u7b49\u4e8e target \u7684\u4e0b\u6807\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u4e24\u4e2a\u6570\u4e4b\u548c\u7b49\u4e8e target \u7684\u4e0b\u6807\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u4e24\u4e2a\u6570\u4e4b\u548c\u7b49\u4e8e target \u7684\u4e0b\u6807\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u4e24\u4e2a\u6570\u4e4b\u548c\u7b49\u4e8e target \u7684\u4e0b\u6807\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u4e24\u4e2a\u6570\u4e4b\u548c\u7b49\u4e8e target \u7684\u4e0b\u6807\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u4e24\u4e2a\u6570\u4e4b\u548c\u7b49\u4e8e target \u7684\u4e0b\u6807\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u4e24\u4e2a\u6570\u4e4b\u548c\u7b49\u4e8e target \u7684\u4e0b\u6807\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u4e24\u4e2a\u6570\u4e4b\u548c\u7b49\u4e8e target \u7684\u4e0b\u6807\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u4e24\u4e2a\u6570\u4e4b\u548c\u7b49\u4e8e target \u7684\u4e0b\u6807\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u4e24\u4e2a\u6570\u4e4b\u548c\u7b49\u4e8e target \u7684\u4e0b\u6807\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u4e24\u4e2a\u6570\u4e4b\u548c\u7b49\u4e8e target \u7684\u4e0b\u6807\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u4e24\u4e2a\u6570\u4e4b\u548c\u7b49\u4e8e target \u7684\u4e0b\u6807\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u4e24\u4e2a\u6570\u4e4b\u548c\u7b49\u4e8e target \u7684\u4e0b\u6807\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u4e24\u4e2a\u6570\u4e4b\u548c\u7b49\u4e8e target \u7684\u4e0b\u6807\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u4e24\u4e2a\u6570\u4e4b\u548c\u7b49\u4e8e target \u7684\u4e0b\u6807\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        #"}, {"task_id": "two-sum-ii-input-array-is-sorted", "completion": "class Solution(object):\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u4e24\u4e2a\u6570\u4e4b\u548c\u7b49\u4e8e target \u7684\u4e0b\u6807\n        # \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230 target - numbers[i] \u7684\u4e0b\u6807\n        # \u5982\u679c\u4e0b\u6807\u5728 i \u4e4b\u540e\uff0c\u5219\u8df3\u8fc7\n        # \u5982\u679c\u4e0b\u6807\u5728 i \u4e4b\u524d\uff0c\u5219\u8fd4\u56de [i, j]\n        # \u5982\u679c\u4e0b\u6807\u5728 i \u4e4b\u540e\uff0c\u5219\u8df3\u8fc7\n        # \u5982\u679c\u4e0b\u6807\u5728 i \u4e4b\u524d\uff0c\u5219\u8fd4\u56de [i, j]\n        # \u5982\u679c\u4e0b\u6807\u5728 i \u4e4b\u540e\uff0c\u5219\u8df3\u8fc7\n        # \u5982\u679c\u4e0b\u6807\u5728 i \u4e4b\u524d\uff0c\u5219\u8fd4\u56de [i, j]\n        # \u5982\u679c\u4e0b\u6807\u5728 i \u4e4b\u540e\uff0c\u5219\u8df3\u8fc7\n        # \u5982\u679c\u4e0b\u6807\u5728 i \u4e4b\u524d\uff0c\u5219\u8fd4\u56de [i, j]\n        # \u5982\u679c\u4e0b\u6807\u5728 i \u4e4b\u540e\uff0c\u5219\u8df3\u8fc7\n        # \u5982\u679c\u4e0b\u6807\u5728 i \u4e4b\u524d\uff0c\u5219\u8fd4\u56de [i, j]\n        # \u5982\u679c\u4e0b\u6807\u5728 i \u4e4b\u540e\uff0c\u5219\u8df3\u8fc7\n        # \u5982\u679c\u4e0b\u6807\u5728 i \u4e4b\u524d\uff0c\u5219\u8fd4\u56de [i, j]\n        # \u5982\u679c\u4e0b\u6807\u5728 i \u4e4b\u540e\uff0c\u5219\u8df3\u8fc7\n        # \u5982\u679c\u4e0b\u6807\u5728 i \u4e4b\u524d\uff0c\u5219\u8fd4\u56de [i, j]\n        # \u5982\u679c\u4e0b\u6807\u5728 i \u4e4b\u540e\uff0c\u5219\u8df3\u8fc7\n        # \u5982\u679c\u4e0b\u6807\u5728 i \u4e4b\u524d\uff0c\u5219\u8fd4\u56de [i, j]\n        # \u5982\u679c\u4e0b\u6807\u5728 i \u4e4b\u540e\uff0c\u5219\u8df3\u8fc7\n        # \u5982\u679c\u4e0b\u6807\u5728 i \u4e4b\u524d\uff0c\u5219\u8fd4\u56de [i, j]\n        # \u5982\u679c\u4e0b\u6807\u5728 i \u4e4b\u540e\uff0c\u5219\u8df3\u8fc7\n        # \u5982\u679c\u4e0b\u6807\u5728 i \u4e4b\u524d\uff0c\u5219\u8fd4\u56de [i, j]\n        # \u5982\u679c\u4e0b\u6807\u5728 i \u4e4b\u540e\uff0c\u5219\u8df3\u8fc7\n        # \u5982\u679c\u4e0b\u6807\u5728 i \u4e4b\u524d\uff0c\u5219\u8fd4\u56de [i, j]\n        # \u5982\u679c\u4e0b\u6807\u5728 i \u4e4b\u540e\uff0c\u5219\u8df3\u8fc7\n        # \u5982\u679c\u4e0b\u6807\u5728 i \u4e4b\u524d\uff0c\u5219\u8fd4\u56de [i, j]\n        # \u5982\u679c\u4e0b\u6807\u5728 i \u4e4b\u540e\uff0c\u5219\u8df3\u8fc7\n        # \u5982\u679c\u4e0b\u6807\u5728 i \u4e4b\u524d\uff0c\u5219\u8fd4\u56de [i, j]\n        # \u5982\u679c\u4e0b\u6807\u5728 i \u4e4b\u540e\uff0c\u5219\u8df3\u8fc7\n        # \u5982\u679c\u4e0b\u6807\u5728 i \u4e4b\u524d\uff0c\u5219\u8fd4\u56de [i, j]\n        # \u5982\u679c\u4e0b\u6807\u5728 i \u4e4b\u540e\uff0c\u5219\u8df3\u8fc7\n        # \u5982\u679c\u4e0b\u6807\u5728 i \u4e4b\u524d\uff0c\u5219\u8fd4\u56de [i, j]\n        # \u5982\u679c\u4e0b\u6807\u5728 i \u4e4b\u540e\uff0c\u5219\u8df3\u8fc7\n        # \u5982\u679c\u4e0b\u6807\u5728 i \u4e4b\u524d\uff0c\u5219\u8fd4\u56de [i, j]\n        # \u5982\u679c\u4e0b\u6807\u5728 i \u4e4b\u540e\uff0c\u5219\u8df3\u8fc7\n        # \u5982\u679c\u4e0b\u6807\u5728 i \u4e4b\u524d\uff0c\u5219\u8fd4\u56de [i, j]\n        # \u5982\u679c\u4e0b\u6807\u5728 i \u4e4b\u540e\uff0c\u5219\u8df3\u8fc7\n        # \u5982\u679c\u4e0b\u6807\u5728 i \u4e4b\u524d\uff0c\u5219\u8fd4\u56de [i, j]\n        # \u5982\u679c\u4e0b\u6807\u5728 i \u4e4b\u540e\uff0c\u5219\u8df3\u8fc7\n        # \u5982\u679c\u4e0b\u6807\u5728 i \u4e4b\u524d\uff0c\u5219\u8fd4\u56de [i, j]\n        # \u5982\u679c\u4e0b\u6807\u5728 i \u4e4b\u540e\uff0c\u5219\u8df3\u8fc7\n        # \u5982\u679c\u4e0b\u6807\u5728 i \u4e4b\u524d\uff0c\u5219\u8fd4\u56de [i, j]\n        # \u5982\u679c\u4e0b\u6807\u5728 i \u4e4b\u540e\uff0c\u5219\u8df3\u8fc7\n        # \u5982\u679c\u4e0b\u6807\u5728 i \u4e4b\u524d\uff0c\u5219\u8fd4\u56de [i, j]\n        # \u5982\u679c\u4e0b\u6807\u5728 i \u4e4b\u540e\uff0c\u5219\u8df3\u8fc7\n        # \u5982\u679c\u4e0b\u6807\u5728 i \u4e4b\u524d\uff0c\u5219\u8fd4\u56de [i, j]\n        # \u5982\u679c\u4e0b\u6807\u5728 i \u4e4b\u540e\uff0c\u5219\u8df3\u8fc7\n        # \u5982\u679c\u4e0b\u6807\u5728 i"}, {"task_id": "two-sum-ii-input-array-is-sorted", "completion": "class Solution(object):\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u4e24\u4e2a\u6570\u4e4b\u548c\u7b49\u4e8e target \u7684\u4e0b\u6807\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u4e24\u4e2a\u6570\u4e4b\u548c\u7b49\u4e8e target \u7684\u4e0b\u6807\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u627e\u5230\u4e24\u4e2a\u6570\u4e4b\u548c\u7b49\u4e8e target \u7684\u4e0b\u6807\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u4e24\u4e2a\u6570\u4e4b\u548c\u7b49\u4e8e target \u7684\u4e0b\u6807\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u4e24\u4e2a\u6570\u4e4b\u548c\u7b49\u4e8e target \u7684\u4e0b\u6807\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u4e24\u4e2a\u6570\u4e4b\u548c\u7b49\u4e8e target \u7684\u4e0b\u6807\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u4e24\u4e2a\u6570\u4e4b\u548c\u7b49\u4e8e target \u7684\u4e0b\u6807\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u4e24\u4e2a\u6570\u4e4b\u548c\u7b49\u4e8e target \u7684\u4e0b\u6807\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u4e24\u4e2a\u6570\u4e4b\u548c\u7b49\u4e8e target \u7684\u4e0b\u6807\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u4e24\u4e2a\u6570\u4e4b\u548c\u7b49\u4e8e target \u7684\u4e0b\u6807\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u4e24\u4e2a\u6570\u4e4b\u548c\u7b49\u4e8e target \u7684\u4e0b\u6807\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u4e24\u4e2a\u6570\u4e4b\u548c\u7b49\u4e8e target \u7684\u4e0b\u6807\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u4e24\u4e2a\u6570\u4e4b\u548c\u7b49\u4e8e target \u7684\u4e0b\u6807\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u4e24\u4e2a\u6570\u4e4b\u548c\u7b49\u4e8e target \u7684\u4e0b\u6807\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u4e24\u4e2a\u6570\u4e4b\u548c\u7b49\u4e8e target \u7684\u4e0b\u6807\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u4e24\u4e2a\u6570\u4e4b\u548c\u7b49\u4e8e target \u7684\u4e0b\u6807\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u4e24\u4e2a\u6570\u4e4b\u548c\u7b49\u4e8e target \u7684\u4e0b\u6807\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u4e24\u4e2a\u6570\u4e4b\u548c\u7b49\u4e8e target \u7684\u4e0b\u6807\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u4e24\u4e2a\u6570\u4e4b\u548c\u7b49\u4e8e target \u7684\u4e0b\u6807\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        #"}], "expression-add-operators": [{"task_id": "expression-add-operators", "completion": "class Solution(object):\n    def addOperators(self, num, target):\n        \"\"\"\n        :type num: str\n        :type target: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def dfs(num, target, start, cur, res):\n            if start == len(num):\n                if cur == target:\n                    res.append(cur)\n                return\n            for i in range(start, len(num)):\n                if i > start and num[start] == '0':\n                    break\n                dfs(num, target, i + 1, cur + int(num[start:i + 1]), res)\n                dfs(num, target, i + 1, cur - int(num[start:i + 1]), res)\n                dfs(num, target, i + 1, cur * int(num[start:i + 1]), res)\n                \n        res = []\n        dfs(num, target, 0, 0, res)\n        return res"}, {"task_id": "expression-add-operators", "completion": "class Solution(object):\n    def addOperators(self, num, target):\n        \"\"\"\n        :type num: str\n        :type target: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def dfs(num, target, start, cur_str, cur_val, ops):\n            if start == len(num):\n                if cur_val == target:\n                    ops.append(cur_str)\n                return\n            dfs(num, target, start + 1, cur_str, cur_val, ops)\n            dfs(num, target, start + 1, cur_str + '+' + num[start], cur_val + int(num[start]), ops)\n            dfs(num, target, start + 1, cur_str + '-' + num[start], cur_val - int(num[start]), ops)\n            dfs(num, target, start + 1, cur_str + '*' + num[start], cur_val - int(num[start]) + int(num[start]) * cur_val, ops)\n            \n        ops = []\n        dfs(num, target, 0, '', 0, ops)\n        return ops"}, {"task_id": "expression-add-operators", "completion": "class Solution(object):\n    def addOperators(self, num, target):\n        \"\"\"\n        :type num: str\n        :type target: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def dfs(num, target, start, cur_val, cur_str, res):\n            if start == len(num):\n                if cur_val == target:\n                    res.append(cur_str)\n                return\n            \n            dfs(num, target, start + 1, cur_val, cur_str, res)\n            \n            cur_val *= 10\n            cur_val += int(num[start])\n            cur_str += num[start]\n            \n            dfs(num, target, start + 1, cur_val, cur_str, res)\n            \n            cur_val /= 10\n            cur_str = cur_str[:-1]\n            \n            dfs(num, target, start + 1, cur_val, cur_str, res)\n            \n        res = []\n        dfs(num, target, 0, 0, \"\", res)\n        return res"}, {"task_id": "expression-add-operators", "completion": "class Solution(object):\n    def addOperators(self, num, target):\n        \"\"\"\n        :type num: str\n        :type target: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def dfs(num, target, start, cur, res):\n            if start == len(num):\n                if cur == target:\n                    res.append(cur)\n                return\n            for i in range(start, len(num)):\n                if i > start and num[start] == '0':\n                    break\n                dfs(num, target, i + 1, cur + int(num[start:i + 1]), res)\n                dfs(num, target, i + 1, cur - int(num[start:i + 1]), res)\n                dfs(num, target, i + 1, cur * int(num[start:i + 1]), res)\n        \n        res = []\n        dfs(num, target, 0, 0, res)\n        return res"}, {"task_id": "expression-add-operators", "completion": "class Solution(object):\n    def addOperators(self, num, target):\n        \"\"\"\n        :type num: str\n        :type target: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def dfs(num, target, start, cur_val, cur_str, res):\n            if start == len(num):\n                if cur_val == target:\n                    res.append(cur_str)\n                return\n            \n            dfs(num, target, start + 1, cur_val, cur_str, res)\n            \n            cur_val *= 10\n            cur_val += int(num[start])\n            cur_str += num[start]\n            \n            dfs(num, target, start + 1, cur_val, cur_str, res)\n            \n            cur_val /= 10\n            cur_str = cur_str[:-1]\n            \n            dfs(num, target, start + 1, cur_val, cur_str, res)\n            \n        res = []\n        dfs(num, target, 0, 0, \"\", res)\n        return res"}], "sum-root-to-leaf-numbers": [{"task_id": "sum-root-to-leaf-numbers", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def dfs(root, num):\n            if not root:\n                return 0\n            num = num*10 + root.val\n            if not root.left and not root.right:\n                return num\n            return dfs(root.left, num) + dfs(root.right, num)\n        \n        return dfs(root, 0)"}, {"task_id": "sum-root-to-leaf-numbers", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def dfs(node, path):\n            if not node:\n                return 0\n            path = path * 10 + node.val\n            if not node.left and not node.right:\n                return path\n            return dfs(node.left, path) + dfs(node.right, path)\n        \n        return dfs(root, 0)"}, {"task_id": "sum-root-to-leaf-numbers", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def dfs(node, path):\n            if not node:\n                return 0\n            path = path * 10 + node.val\n            if not node.left and not node.right:\n                return path\n            return dfs(node.left, path) + dfs(node.right, path)\n        \n        return dfs(root, 0)"}, {"task_id": "sum-root-to-leaf-numbers", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def dfs(node, path):\n            if not node:\n                return 0\n            path = path * 10 + node.val\n            if not node.left and not node.right:\n                return path\n            return dfs(node.left, path) + dfs(node.right, path)\n        \n        return dfs(root, 0)"}, {"task_id": "sum-root-to-leaf-numbers", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def dfs(root, num):\n            if not root:\n                return 0\n            num = num * 10 + root.val\n            if not root.left and not root.right:\n                return num\n            return dfs(root.left, num) + dfs(root.right, num)\n        \n        return dfs(root, 0)"}], "license-key-formatting": [{"task_id": "license-key-formatting", "completion": "class Solution(object):\n    def licenseKeyFormatting(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. split the string into groups\n        # 2. convert the groups to uppercase\n        # 3. join the groups with dashes\n        # 4. remove the dashes at the beginning and end of the string\n        # 5. return the string\n        \n        # split the string into groups\n        groups = s.split('-')\n        \n        # convert the groups to uppercase\n        groups = [group.upper() for group in groups]\n        \n        # join the groups with dashes\n        groups = '-'.join(groups)\n        \n        # remove the dashes at the beginning and end of the string\n        groups = groups.strip('-')\n        \n        # return the string\n        return groups"}, {"task_id": "license-key-formatting", "completion": "class Solution(object):\n    def licenseKeyFormatting(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. split the string into groups\n        # 2. convert the groups to uppercase\n        # 3. join the groups with dashes\n        # 4. remove the dashes at the beginning and end\n        # 5. return the string\n        \n        # split the string into groups\n        groups = s.split('-')\n        \n        # convert the groups to uppercase\n        groups = [group.upper() for group in groups]\n        \n        # join the groups with dashes\n        groups = '-'.join(groups)\n        \n        # remove the dashes at the beginning and end\n        groups = groups.strip('-')\n        \n        # return the string\n        return groups"}, {"task_id": "license-key-formatting", "completion": "class Solution(object):\n    def licenseKeyFormatting(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. split the string into groups\n        # 2. convert the groups to uppercase\n        # 3. join the groups with dashes\n        # 4. remove the dashes at the beginning\n        # 5. remove the dashes at the end\n        # 6. return the string\n        \n        # split the string into groups\n        groups = s.split('-')\n        \n        # convert the groups to uppercase\n        groups = [group.upper() for group in groups]\n        \n        # join the groups with dashes\n        groups = '-'.join(groups)\n        \n        # remove the dashes at the beginning\n        groups = groups[1:]\n        \n        # remove the dashes at the end\n        groups = groups[:-1]\n        \n        # return the string\n        return groups"}, {"task_id": "license-key-formatting", "completion": "class Solution(object):\n    def licenseKeyFormatting(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. split the string into groups\n        # 2. convert the groups to uppercase\n        # 3. join the groups with dashes\n        # 4. remove the dashes at the beginning and end of the string\n        # 5. return the string\n        \n        # split the string into groups\n        groups = s.split('-')\n        \n        # convert the groups to uppercase\n        groups = [group.upper() for group in groups]\n        \n        # join the groups with dashes\n        groups = '-'.join(groups)\n        \n        # remove the dashes at the beginning and end of the string\n        groups = groups.strip('-')\n        \n        # return the string\n        return groups"}, {"task_id": "license-key-formatting", "completion": "class Solution(object):\n    def licenseKeyFormatting(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. split the string into groups\n        # 2. convert the string to uppercase\n        # 3. join the string with dashes\n        # 4. remove the dashes at the start\n        # 5. return the string\n        \n        # split the string into groups\n        groups = s.split('-')\n        \n        # convert the string to uppercase\n        groups = [group.upper() for group in groups]\n        \n        # join the string with dashes\n        groups = '-'.join(groups)\n        \n        # remove the dashes at the start\n        groups = groups[1:]\n        \n        # return the string\n        return groups"}], "gas-station": [{"task_id": "gas-station", "completion": "class Solution(object):\n    def canCompleteCircuit(self, gas, cost):\n        \"\"\"\n        :type gas: List[int]\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5c0f\u7684\u8d77\u70b9\n        # 2. \u4ece\u6700\u5c0f\u7684\u8d77\u70b9\u5f00\u59cb\uff0c\u627e\u5230\u6700\u5927\u7684\u7ec8\u70b9\n        # 3. \u5982\u679c\u6700\u5927\u7684\u7ec8\u70b9\u5c0f\u4e8e\u6700\u5c0f\u7684\u8d77\u70b9\uff0c\u8bf4\u660e\u4e0d\u80fd\u5faa\u73af\n        # 4. \u5982\u679c\u6700\u5927\u7684\u7ec8\u70b9\u5927\u4e8e\u7b49\u4e8e\u6700\u5c0f\u7684\u8d77\u70b9\uff0c\u8bf4\u660e\u53ef\u4ee5\u5faa\u73af\n        # 5. \u5982\u679c\u6700\u5927\u7684\u7ec8\u70b9\u7b49\u4e8e\u6700\u5c0f\u7684\u8d77\u70b9\uff0c\u8bf4\u660e\u53ef\u4ee5\u5faa\u73af\uff0c\u4f46\u662f\u4e0d\u80fd\u4ece\u6700\u5c0f\u7684\u8d77\u70b9\u5f00\u59cb\n        # 6. \u5982\u679c\u6700\u5927\u7684\u7ec8\u70b9\u5927\u4e8e\u6700\u5c0f\u7684\u8d77\u70b9\uff0c\u8bf4\u660e\u53ef\u4ee5\u5faa\u73af\uff0c\u4f46\u662f\u4e0d\u80fd\u4ece\u6700\u5c0f\u7684\u8d77\u70b9\u5f00\u59cb\n        # 7. \u5982\u679c\u6700\u5927\u7684\u7ec8\u70b9\u5c0f\u4e8e\u6700\u5c0f\u7684\u8d77\u70b9\uff0c\u8bf4\u660e\u4e0d\u80fd\u5faa\u73af\n        # 8. \u5982\u679c\u6700\u5927\u7684\u7ec8\u70b9\u7b49\u4e8e\u6700\u5c0f\u7684\u8d77\u70b9\uff0c\u8bf4\u660e\u53ef\u4ee5\u5faa\u73af\uff0c\u4f46\u662f\u4e0d\u80fd\u4ece\u6700\u5c0f\u7684\u8d77\u70b9\u5f00\u59cb\n        # 9. \u5982\u679c\u6700\u5927\u7684\u7ec8\u70b9\u5927\u4e8e\u7b49\u4e8e\u6700\u5c0f\u7684\u8d77\u70b9\uff0c\u8bf4\u660e\u53ef\u4ee5\u5faa\u73af\n        # 10. \u5982\u679c\u6700\u5927\u7684\u7ec8\u70b9\u5c0f\u4e8e\u6700\u5c0f\u7684\u8d77\u70b9\uff0c\u8bf4\u660e\u4e0d\u80fd\u5faa\u73af\n        # 11. \u5982\u679c\u6700\u5927\u7684\u7ec8\u70b9\u7b49\u4e8e\u6700\u5c0f\u7684\u8d77\u70b9\uff0c\u8bf4\u660e\u53ef\u4ee5\u5faa\u73af\uff0c\u4f46\u662f\u4e0d\u80fd\u4ece\u6700\u5c0f\u7684\u8d77\u70b9\u5f00\u59cb\n        # 12. \u5982\u679c\u6700\u5927\u7684\u7ec8\u70b9\u5927\u4e8e\u7b49\u4e8e\u6700\u5c0f\u7684\u8d77\u70b9\uff0c\u8bf4\u660e\u53ef\u4ee5\u5faa\u73af\n        # 13. \u5982\u679c\u6700\u5927\u7684\u7ec8\u70b9\u5c0f\u4e8e\u6700\u5c0f\u7684\u8d77\u70b9\uff0c\u8bf4\u660e\u4e0d\u80fd\u5faa\u73af\n        # 14. \u5982\u679c\u6700\u5927\u7684\u7ec8\u70b9\u7b49\u4e8e\u6700\u5c0f\u7684\u8d77\u70b9\uff0c\u8bf4\u660e\u53ef\u4ee5\u5faa\u73af\uff0c\u4f46\u662f\u4e0d\u80fd\u4ece\u6700\u5c0f\u7684\u8d77\u70b9\u5f00\u59cb\n        # 15. \u5982\u679c\u6700\u5927\u7684\u7ec8\u70b9\u5927\u4e8e\u7b49\u4e8e\u6700\u5c0f\u7684\u8d77\u70b9\uff0c\u8bf4\u660e\u53ef\u4ee5\u5faa\u73af\n        # 16. \u5982\u679c\u6700\u5927\u7684\u7ec8\u70b9\u5c0f\u4e8e\u6700\u5c0f\u7684\u8d77\u70b9\uff0c\u8bf4\u660e\u4e0d\u80fd\u5faa\u73af\n        # 17. \u5982\u679c\u6700\u5927\u7684\u7ec8\u70b9\u7b49\u4e8e\u6700\u5c0f\u7684\u8d77\u70b9\uff0c\u8bf4\u660e\u53ef\u4ee5\u5faa\u73af\uff0c\u4f46\u662f\u4e0d\u80fd\u4ece\u6700\u5c0f\u7684\u8d77\u70b9\u5f00\u59cb\n        # 18. \u5982\u679c\u6700\u5927\u7684\u7ec8\u70b9\u5927\u4e8e\u7b49\u4e8e\u6700\u5c0f\u7684\u8d77\u70b9\uff0c\u8bf4\u660e\u53ef\u4ee5\u5faa\u73af\n        # 19. \u5982\u679c\u6700\u5927\u7684\u7ec8\u70b9\u5c0f\u4e8e\u6700\u5c0f\u7684\u8d77\u70b9\uff0c\u8bf4\u660e\u4e0d\u80fd\u5faa\u73af\n        # 20. \u5982\u679c\u6700\u5927\u7684\u7ec8\u70b9\u7b49\u4e8e\u6700\u5c0f\u7684\u8d77\u70b9\uff0c\u8bf4\u660e\u53ef\u4ee5\u5faa\u73af\uff0c\u4f46\u662f\u4e0d\u80fd\u4ece\u6700\u5c0f\u7684\u8d77\u70b9\u5f00\u59cb\n        # 21. \u5982\u679c\u6700\u5927\u7684\u7ec8\u70b9\u5927\u4e8e\u7b49\u4e8e\u6700\u5c0f\u7684\u8d77\u70b9\uff0c\u8bf4\u660e\u53ef\u4ee5\u5faa\u73af\n        # 22. \u5982\u679c\u6700\u5927\u7684\u7ec8\u70b9\u5c0f\u4e8e\u6700\u5c0f\u7684\u8d77\u70b9\uff0c\u8bf4\u660e\u4e0d\u80fd\u5faa\u73af\n        # 23. \u5982\u679c\u6700\u5927\u7684\u7ec8\u70b9\u7b49\u4e8e\u6700\u5c0f\u7684\u8d77\u70b9\uff0c\u8bf4\u660e\u53ef\u4ee5\u5faa\u73af\uff0c\u4f46\u662f\u4e0d\u80fd\u4ece\u6700\u5c0f\u7684\u8d77\u70b9\u5f00\u59cb\n        # 24. \u5982\u679c\u6700\u5927\u7684\u7ec8\u70b9\u5927\u4e8e\u7b49\u4e8e\u6700\u5c0f\u7684\u8d77\u70b9\uff0c\u8bf4\u660e\u53ef\u4ee5\u5faa\u73af\n        # 25. \u5982\u679c\u6700\u5927\u7684\u7ec8\u70b9\u5c0f\u4e8e\u6700\u5c0f\u7684\u8d77\u70b9\uff0c\u8bf4\u660e\u4e0d\u80fd\u5faa\u73af\n        # 26. \u5982\u679c\u6700\u5927\u7684\u7ec8\u70b9\u7b49\u4e8e\u6700\u5c0f\u7684\u8d77\u70b9\uff0c\u8bf4\u660e\u53ef\u4ee5\u5faa\u73af\uff0c\u4f46\u662f\u4e0d\u80fd\u4ece\u6700\u5c0f\u7684\u8d77\u70b9\u5f00\u59cb"}, {"task_id": "gas-station", "completion": "class Solution(object):\n    def canCompleteCircuit(self, gas, cost):\n        \"\"\"\n        :type gas: List[int]\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5c0f\u7684gas[i]\n        # 2. \u627e\u5230\u6700\u5c0f\u7684cost[i]\n        # 3. \u5982\u679c\u6700\u5c0f\u7684gas[i] >= \u6700\u5c0f\u7684cost[i]\uff0c\u90a3\u4e48\u4ece\u6700\u5c0f\u7684gas[i]\u5f00\u59cb\uff0c\u5982\u679c\u627e\u5230\u4e00\u4e2agas[i] - cost[i] >= 0\uff0c\u90a3\u4e48\u5c31\u662f\u7b54\u6848\n        # 4. \u5982\u679c\u6700\u5c0f\u7684gas[i] < \u6700\u5c0f\u7684cost[i]\uff0c\u90a3\u4e48\u4ece\u6700\u5c0f\u7684gas[i]\u5f00\u59cb\uff0c\u5982\u679c\u627e\u5230\u4e00\u4e2agas[i] - cost[i] < 0\uff0c\u90a3\u4e48\u5c31\u662f\u7b54\u6848\n        # 5. \u5982\u679c\u627e\u4e0d\u5230\uff0c\u90a3\u4e48\u8fd4\u56de-1\n        \n        # 1. \u627e\u5230\u6700\u5c0f\u7684gas[i]\n        min_gas = min(gas)\n        # 2. \u627e\u5230\u6700\u5c0f\u7684cost[i]\n        min_cost = min(cost)\n        # 3. \u5982\u679c\u6700\u5c0f\u7684gas[i] >= \u6700\u5c0f\u7684cost[i]\uff0c\u90a3\u4e48\u4ece\u6700\u5c0f\u7684gas[i]\u5f00\u59cb\uff0c\u5982\u679c\u627e\u5230\u4e00\u4e2agas[i] - cost[i] >= 0\uff0c\u90a3\u4e48\u5c31\u662f\u7b54\u6848\n        if min_gas >= min_cost:\n            for i in range(len(gas)):\n                if gas[i] - cost[i] >= 0:\n                    return i\n        # 4. \u5982\u679c\u6700\u5c0f\u7684gas[i] < \u6700\u5c0f\u7684cost[i]\uff0c\u90a3\u4e48\u4ece\u6700\u5c0f\u7684gas[i]\u5f00\u59cb\uff0c\u5982\u679c\u627e\u5230\u4e00\u4e2agas[i] - cost[i] < 0\uff0c\u90a3\u4e48\u5c31\u662f\u7b54\u6848\n        else:\n            for i in range(len(gas)):\n                if gas[i] - cost[i] < 0:\n                    return i\n        # 5. \u5982\u679c\u627e\u4e0d\u5230\uff0c\u90a3\u4e48\u8fd4\u56de-1\n        return -1"}, {"task_id": "gas-station", "completion": "class Solution(object):\n    def canCompleteCircuit(self, gas, cost):\n        \"\"\"\n        :type gas: List[int]\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5927\u7684\u51cf\u6cd5\n        # 2. \u627e\u5230\u6700\u5927\u7684\u52a0\u6cd5\n        # 3. \u5982\u679c\u6700\u5927\u7684\u52a0\u6cd5\u5927\u4e8e\u6700\u5927\u7684\u51cf\u6cd5\uff0c\u5219\u8bf4\u660e\u53ef\u4ee5\u505a\u4e00\u5708\n        # 4. \u5982\u679c\u6700\u5927\u7684\u52a0\u6cd5\u5c0f\u4e8e\u7b49\u4e8e\u6700\u5927\u7684\u51cf\u6cd5\uff0c\u5219\u8bf4\u660e\u4e0d\u80fd\u505a\u4e00\u5708\n        # 5. \u5982\u679c\u6700\u5927\u7684\u52a0\u6cd5\u7b49\u4e8e\u6700\u5927\u7684\u51cf\u6cd5\uff0c\u5219\u8bf4\u660e\u53ef\u4ee5\u505a\u4e00\u5708\uff0c\u4f46\u662f\u4e0d\u80fd\u4ece\u7b2c\u4e00\u4e2a\u7ad9\u70b9\u51fa\u53d1\n        # 6. \u5982\u679c\u6700\u5927\u7684\u52a0\u6cd5\u5927\u4e8e\u6700\u5927\u7684\u51cf\u6cd5\uff0c\u5219\u8bf4\u660e\u53ef\u4ee5\u505a\u4e00\u5708\uff0c\u4f46\u662f\u4e0d\u80fd\u4ece\u7b2c\u4e00\u4e2a\u7ad9\u70b9\u51fa\u53d1\n        # 7. \u5982\u679c\u6700\u5927\u7684\u52a0\u6cd5\u5c0f\u4e8e\u7b49\u4e8e\u6700\u5927\u7684\u51cf\u6cd5\uff0c\u5219\u8bf4\u660e\u4e0d\u80fd\u505a\u4e00\u5708\uff0c\u4f46\u662f\u53ef\u4ee5\u4ece\u7b2c\u4e00\u4e2a\u7ad9\u70b9\u51fa\u53d1\n        # 8. \u5982\u679c\u6700\u5927\u7684\u52a0\u6cd5\u5c0f\u4e8e\u6700\u5927\u7684\u51cf\u6cd5\uff0c\u5219\u8bf4\u660e\u4e0d\u80fd\u505a\u4e00\u5708\uff0c\u4f46\u662f\u53ef\u4ee5\u4ece\u7b2c\u4e00\u4e2a\u7ad9\u70b9\u51fa\u53d1\n        # 9. \u5982\u679c\u6700\u5927\u7684\u52a0\u6cd5\u7b49\u4e8e\u6700\u5927\u7684\u51cf\u6cd5\uff0c\u5219\u8bf4\u660e\u53ef\u4ee5\u505a\u4e00\u5708\uff0c\u4f46\u662f\u4e0d\u80fd\u4ece\u7b2c\u4e00\u4e2a\u7ad9\u70b9\u51fa\u53d1\n        # 10. \u5982\u679c\u6700\u5927\u7684\u52a0\u6cd5\u5927\u4e8e\u6700\u5927\u7684\u51cf\u6cd5\uff0c\u5219\u8bf4\u660e\u53ef\u4ee5\u505a\u4e00\u5708\uff0c\u4f46\u662f\u4e0d\u80fd\u4ece\u7b2c\u4e00\u4e2a\u7ad9\u70b9\u51fa\u53d1\n        # 11. \u5982\u679c\u6700\u5927\u7684\u52a0\u6cd5\u5c0f\u4e8e\u7b49\u4e8e\u6700\u5927\u7684\u51cf\u6cd5\uff0c\u5219\u8bf4\u660e\u4e0d\u80fd\u505a\u4e00\u5708\uff0c\u4f46\u662f\u53ef\u4ee5\u4ece\u7b2c\u4e00\u4e2a\u7ad9\u70b9\u51fa\u53d1\n        # 12. \u5982\u679c\u6700\u5927\u7684\u52a0\u6cd5\u5c0f\u4e8e\u6700\u5927\u7684\u51cf\u6cd5\uff0c\u5219\u8bf4\u660e\u4e0d\u80fd\u505a\u4e00\u5708\uff0c\u4f46\u662f\u53ef\u4ee5\u4ece\u7b2c\u4e00\u4e2a\u7ad9\u70b9\u51fa\u53d1\n        # 13. \u5982\u679c\u6700\u5927\u7684\u52a0\u6cd5\u7b49\u4e8e\u6700\u5927\u7684\u51cf\u6cd5\uff0c\u5219\u8bf4\u660e\u53ef\u4ee5\u505a\u4e00\u5708\uff0c\u4f46\u662f\u4e0d\u80fd\u4ece\u7b2c\u4e00\u4e2a\u7ad9\u70b9\u51fa\u53d1\n        # 14. \u5982\u679c\u6700\u5927\u7684\u52a0\u6cd5\u5927\u4e8e\u6700\u5927\u7684\u51cf\u6cd5\uff0c\u5219\u8bf4\u660e\u53ef\u4ee5\u505a\u4e00\u5708\uff0c\u4f46\u662f\u4e0d\u80fd\u4ece\u7b2c\u4e00\u4e2a\u7ad9\u70b9\u51fa\u53d1\n        # 15. \u5982\u679c\u6700\u5927\u7684\u52a0\u6cd5\u5c0f\u4e8e\u7b49\u4e8e\u6700\u5927\u7684\u51cf\u6cd5\uff0c\u5219\u8bf4\u660e\u4e0d\u80fd\u505a\u4e00\u5708\uff0c\u4f46\u662f\u53ef\u4ee5\u4ece\u7b2c\u4e00\u4e2a\u7ad9\u70b9\u51fa\u53d1\n        # 16. \u5982\u679c\u6700\u5927\u7684\u52a0\u6cd5\u5c0f\u4e8e\u6700\u5927\u7684\u51cf\u6cd5\uff0c\u5219\u8bf4\u660e\u4e0d\u80fd\u505a\u4e00\u5708\uff0c\u4f46\u662f\u53ef\u4ee5\u4ece\u7b2c\u4e00\u4e2a\u7ad9\u70b9\u51fa\u53d1\n        # 17. \u5982\u679c\u6700\u5927\u7684\u52a0\u6cd5\u7b49\u4e8e\u6700\u5927\u7684\u51cf\u6cd5\uff0c\u5219\u8bf4\u660e\u53ef\u4ee5\u505a\u4e00\u5708\uff0c\u4f46\u662f\u4e0d\u80fd\u4ece\u7b2c\u4e00\u4e2a\u7ad9\u70b9\u51fa\u53d1\n        # 18. \u5982\u679c\u6700\u5927\u7684\u52a0\u6cd5\u5927\u4e8e\u6700\u5927\u7684\u51cf\u6cd5\uff0c\u5219\u8bf4\u660e\u53ef\u4ee5\u505a\u4e00\u5708\uff0c\u4f46\u662f\u4e0d\u80fd\u4ece\u7b2c\u4e00\u4e2a\u7ad9\u70b9\u51fa\u53d1\n        # 19. \u5982\u679c\u6700\u5927\u7684\u52a0\u6cd5\u5c0f\u4e8e\u7b49\u4e8e\u6700\u5927\u7684\u51cf\u6cd5\uff0c\u5219\u8bf4\u660e\u4e0d\u80fd\u505a\u4e00\u5708\uff0c\u4f46\u662f\u53ef\u4ee5\u4ece\u7b2c\u4e00\u4e2a\u7ad9\u70b9\u51fa\u53d1\n        # 20. \u5982\u679c\u6700\u5927\u7684\u52a0\u6cd5\u5c0f\u4e8e\u6700\u5927\u7684\u51cf\u6cd5\uff0c\u5219\u8bf4\u660e\u4e0d\u80fd\u505a\u4e00\u5708\uff0c\u4f46\u662f\u53ef\u4ee5\u4ece\u7b2c\u4e00\u4e2a\u7ad9\u70b9\u51fa\u53d1\n        # 21. \u5982\u679c\u6700\u5927\u7684\u52a0\u6cd5\u7b49\u4e8e\u6700\u5927\u7684\u51cf\u6cd5\uff0c\u5219\u8bf4\u660e\u53ef\u4ee5\u505a\u4e00\u5708\uff0c\u4f46\u662f\u4e0d\u80fd\u4ece\u7b2c\u4e00\u4e2a\u7ad9\u70b9\u51fa\u53d1\n        # 22. \u5982\u679c\u6700\u5927\u7684\u52a0\u6cd5\u5927\u4e8e\u6700\u5927\u7684\u51cf\u6cd5\uff0c\u5219\u8bf4\u660e\u53ef\u4ee5"}, {"task_id": "gas-station", "completion": "class Solution(object):\n    def canCompleteCircuit(self, gas, cost):\n        \"\"\"\n        :type gas: List[int]\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5c0f\u7684\u8d77\u70b9\n        # 2. \u4ece\u6700\u5c0f\u7684\u8d77\u70b9\u5f00\u59cb\uff0c\u627e\u5230\u6700\u5927\u7684\u7ec8\u70b9\n        # 3. \u5982\u679c\u6700\u5927\u7684\u7ec8\u70b9\u5c0f\u4e8e\u6700\u5c0f\u7684\u8d77\u70b9\uff0c\u8bf4\u660e\u4e0d\u80fd\u5faa\u73af\n        # 4. \u5982\u679c\u6700\u5927\u7684\u7ec8\u70b9\u5927\u4e8e\u7b49\u4e8e\u6700\u5c0f\u7684\u8d77\u70b9\uff0c\u8bf4\u660e\u53ef\u4ee5\u5faa\u73af\n        # 5. \u5982\u679c\u6700\u5927\u7684\u7ec8\u70b9\u7b49\u4e8e\u6700\u5c0f\u7684\u8d77\u70b9\uff0c\u8bf4\u660e\u53ef\u4ee5\u5faa\u73af\uff0c\u4f46\u662f\u6700\u5927\u7684\u7ec8\u70b9\u662f\u6700\u5c0f\u7684\u8d77\u70b9\n        # 6. \u5982\u679c\u6700\u5927\u7684\u7ec8\u70b9\u5927\u4e8e\u6700\u5c0f\u7684\u8d77\u70b9\uff0c\u8bf4\u660e\u53ef\u4ee5\u5faa\u73af\uff0c\u4f46\u662f\u6700\u5927\u7684\u7ec8\u70b9\u4e0d\u662f\u6700\u5c0f\u7684\u8d77\u70b9\n        # 7. \u5982\u679c\u6700\u5927\u7684\u7ec8\u70b9\u5c0f\u4e8e\u6700\u5c0f\u7684\u8d77\u70b9\uff0c\u8bf4\u660e\u53ef\u4ee5\u5faa\u73af\uff0c\u4f46\u662f\u6700\u5927\u7684\u7ec8\u70b9\u4e0d\u662f\u6700\u5c0f\u7684\u8d77\u70b9\n        # 8. \u5982\u679c\u6700\u5927\u7684\u7ec8\u70b9\u7b49\u4e8e\u6700\u5c0f\u7684\u8d77\u70b9\uff0c\u8bf4\u660e\u53ef\u4ee5\u5faa\u73af\uff0c\u4f46\u662f\u6700\u5927\u7684\u7ec8\u70b9\u4e0d\u662f\u6700\u5c0f\u7684\u8d77\u70b9\n        # 9. \u5982\u679c\u6700\u5927\u7684\u7ec8\u70b9\u5927\u4e8e\u6700\u5c0f\u7684\u8d77\u70b9\uff0c\u8bf4\u660e\u53ef\u4ee5\u5faa\u73af\uff0c\u4f46\u662f\u6700\u5927\u7684\u7ec8\u70b9\u4e0d\u662f\u6700\u5c0f\u7684\u8d77\u70b9\n        # 10. \u5982\u679c\u6700\u5927\u7684\u7ec8\u70b9\u5c0f\u4e8e\u6700\u5c0f\u7684\u8d77\u70b9\uff0c\u8bf4\u660e\u53ef\u4ee5\u5faa\u73af\uff0c\u4f46\u662f\u6700\u5927\u7684\u7ec8\u70b9\u4e0d\u662f\u6700\u5c0f\u7684\u8d77\u70b9\n        # 11. \u5982\u679c\u6700\u5927\u7684\u7ec8\u70b9\u7b49\u4e8e\u6700\u5c0f\u7684\u8d77\u70b9\uff0c\u8bf4\u660e\u53ef\u4ee5\u5faa\u73af\uff0c\u4f46\u662f\u6700\u5927\u7684\u7ec8\u70b9\u4e0d\u662f\u6700\u5c0f\u7684\u8d77\u70b9\n        # 12. \u5982\u679c\u6700\u5927\u7684\u7ec8\u70b9\u5927\u4e8e\u6700\u5c0f\u7684\u8d77\u70b9\uff0c\u8bf4\u660e\u53ef\u4ee5\u5faa\u73af\uff0c\u4f46\u662f\u6700\u5927\u7684\u7ec8\u70b9\u4e0d\u662f\u6700\u5c0f\u7684\u8d77\u70b9\n        # 13. \u5982\u679c\u6700\u5927\u7684\u7ec8\u70b9\u5c0f\u4e8e\u6700\u5c0f\u7684\u8d77\u70b9\uff0c\u8bf4\u660e\u53ef\u4ee5\u5faa\u73af\uff0c\u4f46\u662f\u6700\u5927\u7684\u7ec8\u70b9\u4e0d\u662f\u6700\u5c0f\u7684\u8d77\u70b9\n        # 14. \u5982\u679c\u6700\u5927\u7684\u7ec8\u70b9\u7b49\u4e8e\u6700\u5c0f\u7684\u8d77\u70b9\uff0c\u8bf4\u660e\u53ef\u4ee5\u5faa\u73af\uff0c\u4f46\u662f\u6700\u5927\u7684\u7ec8\u70b9\u4e0d\u662f\u6700\u5c0f\u7684\u8d77\u70b9\n        # 15. \u5982\u679c\u6700\u5927\u7684\u7ec8\u70b9\u5927\u4e8e\u6700\u5c0f\u7684\u8d77\u70b9\uff0c\u8bf4\u660e\u53ef\u4ee5\u5faa\u73af\uff0c\u4f46\u662f\u6700\u5927\u7684\u7ec8\u70b9\u4e0d\u662f\u6700\u5c0f\u7684\u8d77\u70b9\n        # 16. \u5982\u679c\u6700\u5927\u7684\u7ec8\u70b9\u5c0f\u4e8e\u6700\u5c0f\u7684\u8d77\u70b9\uff0c\u8bf4\u660e\u53ef\u4ee5\u5faa\u73af\uff0c\u4f46\u662f\u6700\u5927\u7684\u7ec8\u70b9\u4e0d\u662f\u6700\u5c0f\u7684\u8d77\u70b9\n        # 17. \u5982\u679c\u6700\u5927\u7684\u7ec8\u70b9\u7b49\u4e8e\u6700\u5c0f\u7684\u8d77\u70b9\uff0c\u8bf4\u660e\u53ef\u4ee5\u5faa\u73af\uff0c\u4f46\u662f\u6700\u5927\u7684\u7ec8\u70b9\u4e0d\u662f\u6700\u5c0f\u7684\u8d77\u70b9\n        # 18. \u5982\u679c\u6700\u5927\u7684\u7ec8\u70b9\u5927\u4e8e\u6700\u5c0f\u7684\u8d77\u70b9\uff0c\u8bf4\u660e\u53ef\u4ee5\u5faa\u73af\uff0c\u4f46\u662f\u6700\u5927\u7684\u7ec8\u70b9\u4e0d\u662f\u6700\u5c0f\u7684\u8d77\u70b9\n        # 19. \u5982\u679c\u6700\u5927\u7684\u7ec8\u70b9\u5c0f\u4e8e\u6700\u5c0f\u7684\u8d77\u70b9\uff0c\u8bf4\u660e\u53ef\u4ee5\u5faa\u73af\uff0c\u4f46\u662f\u6700\u5927\u7684\u7ec8\u70b9\u4e0d\u662f\u6700\u5c0f\u7684\u8d77\u70b9\n        # 20. \u5982\u679c\u6700\u5927\u7684\u7ec8\u70b9\u7b49\u4e8e\u6700\u5c0f\u7684\u8d77\u70b9\uff0c\u8bf4\u660e\u53ef\u4ee5\u5faa\u73af\uff0c\u4f46\u662f\u6700\u5927\u7684\u7ec8\u70b9\u4e0d\u662f\u6700\u5c0f\u7684\u8d77\u70b9\n        # 21. \u5982\u679c\u6700\u5927\u7684\u7ec8\u70b9\u5927\u4e8e\u6700\u5c0f\u7684\u8d77\u70b9\uff0c\u8bf4\u660e\u53ef\u4ee5\u5faa\u73af\uff0c\u4f46\u662f\u6700\u5927\u7684\u7ec8\u70b9\u4e0d\u662f\u6700\u5c0f\u7684\u8d77\u70b9"}, {"task_id": "gas-station", "completion": "class Solution(object):\n    def canCompleteCircuit(self, gas, cost):\n        \"\"\"\n        :type gas: List[int]\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5927\u7684\u50a8\u6c34\u6c60\n        # 2. \u627e\u5230\u6700\u5c0f\u7684\u50a8\u6c34\u6c60\n        # 3. \u5982\u679c\u6700\u5927\u7684\u50a8\u6c34\u6c60\u5927\u4e8e\u7b49\u4e8e\u6700\u5c0f\u7684\u50a8\u6c34\u6c60\uff0c\u5219\u8bf4\u660e\u53ef\u4ee5\u5faa\u73af\n        # 4. \u5982\u679c\u6700\u5927\u7684\u50a8\u6c34\u6c60\u5c0f\u4e8e\u6700\u5c0f\u7684\u50a8\u6c34\u6c60\uff0c\u5219\u8bf4\u660e\u4e0d\u80fd\u5faa\u73af\n        # 5. \u5982\u679c\u6700\u5927\u7684\u50a8\u6c34\u6c60\u7b49\u4e8e\u6700\u5c0f\u7684\u50a8\u6c34\u6c60\uff0c\u5219\u8bf4\u660e\u53ef\u4ee5\u5faa\u73af\uff0c\u4f46\u662f\u4e0d\u80fd\u4ece\u6700\u5c0f\u7684\u50a8\u6c34\u6c60\u5f00\u59cb\n        # 6. \u5982\u679c\u6700\u5927\u7684\u50a8\u6c34\u6c60\u5927\u4e8e\u6700\u5c0f\u7684\u50a8\u6c34\u6c60\uff0c\u5219\u8bf4\u660e\u53ef\u4ee5\u5faa\u73af\uff0c\u4f46\u662f\u4e0d\u80fd\u4ece\u6700\u5c0f\u7684\u50a8\u6c34\u6c60\u5f00\u59cb\n        # 7. \u5982\u679c\u6700\u5927\u7684\u50a8\u6c34\u6c60\u5c0f\u4e8e\u6700\u5c0f\u7684\u50a8\u6c34\u6c60\uff0c\u5219\u8bf4\u660e\u4e0d\u80fd\u5faa\u73af\uff0c\u4f46\u662f\u53ef\u4ee5\u4ece\u6700\u5c0f\u7684\u50a8\u6c34\u6c60\u5f00\u59cb\n        # 8. \u5982\u679c\u6700\u5927\u7684\u50a8\u6c34\u6c60\u7b49\u4e8e\u6700\u5c0f\u7684\u50a8\u6c34\u6c60\uff0c\u5219\u8bf4\u660e\u53ef\u4ee5\u5faa\u73af\uff0c\u4f46\u662f\u4e0d\u80fd\u4ece\u6700\u5c0f\u7684\u50a8\u6c34\u6c60\u5f00\u59cb\n        # 9. \u5982\u679c\u6700\u5927\u7684\u50a8\u6c34\u6c60\u5927\u4e8e\u6700\u5c0f\u7684\u50a8\u6c34\u6c60\uff0c\u5219\u8bf4\u660e\u53ef\u4ee5\u5faa\u73af\uff0c\u4f46\u662f\u4e0d\u80fd\u4ece\u6700\u5c0f\u7684\u50a8\u6c34\u6c60\u5f00\u59cb\n        # 10. \u5982\u679c\u6700\u5927\u7684\u50a8\u6c34\u6c60\u5c0f\u4e8e\u6700\u5c0f\u7684\u50a8\u6c34\u6c60\uff0c\u5219\u8bf4\u660e\u4e0d\u80fd\u5faa\u73af\uff0c\u4f46\u662f\u53ef\u4ee5\u4ece\u6700\u5c0f\u7684\u50a8\u6c34\u6c60\u5f00\u59cb\n        # 11. \u5982\u679c\u6700\u5927\u7684\u50a8\u6c34\u6c60\u7b49\u4e8e\u6700\u5c0f\u7684\u50a8\u6c34\u6c60\uff0c\u5219\u8bf4\u660e\u53ef\u4ee5\u5faa\u73af\uff0c\u4f46\u662f\u4e0d\u80fd\u4ece\u6700\u5c0f\u7684\u50a8\u6c34\u6c60\u5f00\u59cb\n        # 12. \u5982\u679c\u6700\u5927\u7684\u50a8\u6c34\u6c60\u5927\u4e8e\u6700\u5c0f\u7684\u50a8\u6c34\u6c60\uff0c\u5219\u8bf4\u660e\u53ef\u4ee5\u5faa\u73af\uff0c\u4f46\u662f\u4e0d\u80fd\u4ece\u6700\u5c0f\u7684\u50a8\u6c34\u6c60\u5f00\u59cb\n        # 13. \u5982\u679c\u6700\u5927\u7684\u50a8\u6c34\u6c60\u5c0f\u4e8e\u6700\u5c0f\u7684\u50a8\u6c34\u6c60\uff0c\u5219\u8bf4\u660e\u4e0d\u80fd\u5faa\u73af\uff0c\u4f46\u662f\u53ef\u4ee5\u4ece\u6700\u5c0f\u7684\u50a8\u6c34\u6c60\u5f00\u59cb\n        # 14. \u5982\u679c\u6700\u5927\u7684\u50a8\u6c34\u6c60\u7b49\u4e8e\u6700\u5c0f\u7684\u50a8\u6c34\u6c60\uff0c\u5219\u8bf4\u660e\u53ef\u4ee5\u5faa\u73af\uff0c\u4f46\u662f\u4e0d\u80fd\u4ece\u6700\u5c0f\u7684\u50a8\u6c34\u6c60\u5f00\u59cb\n        # 15. \u5982\u679c\u6700\u5927\u7684\u50a8\u6c34\u6c60\u5927\u4e8e\u6700\u5c0f\u7684\u50a8\u6c34\u6c60\uff0c\u5219\u8bf4\u660e\u53ef\u4ee5\u5faa\u73af\uff0c\u4f46\u662f\u4e0d\u80fd\u4ece\u6700\u5c0f\u7684\u50a8\u6c34\u6c60\u5f00\u59cb\n        # 16. \u5982\u679c\u6700\u5927\u7684\u50a8\u6c34\u6c60\u5c0f\u4e8e\u6700\u5c0f\u7684\u50a8\u6c34\u6c60\uff0c\u5219\u8bf4\u660e\u4e0d\u80fd\u5faa\u73af\uff0c\u4f46\u662f\u53ef\u4ee5\u4ece\u6700\u5c0f\u7684\u50a8\u6c34\u6c60\u5f00\u59cb\n        # 17. \u5982\u679c\u6700\u5927\u7684\u50a8\u6c34\u6c60\u7b49\u4e8e\u6700\u5c0f\u7684\u50a8\u6c34\u6c60\uff0c\u5219\u8bf4\u660e\u53ef\u4ee5\u5faa\u73af\uff0c\u4f46\u662f\u4e0d\u80fd\u4ece\u6700\u5c0f\u7684\u50a8\u6c34\u6c60\u5f00\u59cb\n        # 18. \u5982\u679c\u6700\u5927\u7684\u50a8\u6c34\u6c60\u5927\u4e8e\u6700\u5c0f\u7684\u50a8\u6c34\u6c60\uff0c\u5219\u8bf4\u660e\u53ef\u4ee5\u5faa\u73af\uff0c\u4f46\u662f\u4e0d\u80fd\u4ece\u6700\u5c0f\u7684\u50a8\u6c34\u6c60\u5f00\u59cb\n        # 19. \u5982\u679c\u6700\u5927\u7684\u50a8\u6c34\u6c60\u5c0f\u4e8e\u6700\u5c0f\u7684\u50a8\u6c34\u6c60\uff0c\u5219\u8bf4\u660e\u4e0d\u80fd\u5faa\u73af\uff0c\u4f46\u662f\u53ef\u4ee5\u4ece\u6700\u5c0f\u7684\u50a8\u6c34\u6c60\u5f00\u59cb\n        # 20. \u5982\u679c\u6700\u5927\u7684\u50a8\u6c34\u6c60\u7b49\u4e8e\u6700\u5c0f\u7684\u50a8\u6c34\u6c60\uff0c\u5219\u8bf4\u660e\u53ef\u4ee5\u5faa\u73af\uff0c\ufffd"}], "burst-balloons": [{"task_id": "burst-balloons", "completion": "class Solution(object):\n    def maxCoins(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u540e\n        # 2. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 3. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 4. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 5. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 6. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 7. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 8. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 9. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 10. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 11. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 12. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 13. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 14. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 15. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 16. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 17. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 18. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 19. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 20. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 21. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 22. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 23. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a"}, {"task_id": "burst-balloons", "completion": "class Solution(object):\n    def maxCoins(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u540e\n        # 2. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 3. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 4. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 5. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 6. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 7. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 8. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 9. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 10. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 11. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 12. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 13. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 14. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 15. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 16. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 17. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 18. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 19. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 20. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 21. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 22. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 23. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a"}, {"task_id": "burst-balloons", "completion": "class Solution(object):\n    def maxCoins(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u540e\n        # 2. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 3. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 4. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 5. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 6. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 7. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 8. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 9. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 10. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 11. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 12. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 13. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 14. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 15. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 16. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 17. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 18. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 19. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 20. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 21. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 22. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 23. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a"}, {"task_id": "burst-balloons", "completion": "class Solution(object):\n    def maxCoins(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u540e\n        # 2. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 3. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 4. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 5. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 6. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 7. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 8. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 9. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 10. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 11. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 12. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 13. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 14. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 15. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 16. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 17. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 18. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 19. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 20. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 21. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 22. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 23. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a"}, {"task_id": "burst-balloons", "completion": "class Solution(object):\n    def maxCoins(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u540e\n        # 2. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 3. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 4. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 5. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 6. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 7. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 8. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 9. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 10. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 11. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 12. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 13. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 14. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 15. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 16. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 17. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 18. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 19. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 20. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 21. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 22. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u5b83\u653e\u5728\u6700\u524d\u9762\n        # 23. \u628a\u6700\u5927\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a"}], "plus-one": [{"task_id": "plus-one", "completion": "class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u672b\u5c3e\u52a01\n        # 2. \u672b\u5c3e\u52a01\u540e\uff0c\u8fdb\u4f4d\n        # 3. \u672b\u5c3e\u52a01\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\n        # 4. \u672b\u5c3e\u52a01\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\n        # 5. \u672b\u5c3e\u52a01\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\n        # 6. \u672b\u5c3e\u52a01\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\n        # 7. \u672b\u5c3e\u52a01\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\n        # 8. \u672b\u5c3e\u52a01\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\n        # 9. \u672b\u5c3e\u52a01\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\n        # 10. \u672b\u5c3e\u52a01\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\n        # 11. \u672b\u5c3e\u52a01\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\n        # 12. \u672b\u5c3e\u52a01\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\n        # 13. \u672b\u5c3e\u52a01\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\n        # 14. \u672b\u5c3e\u52a01\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\n        # 15. \u672b\u5c3e\u52a01\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\n        # 16. \u672b\u5c3e\u52a01\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\n        # 17. \u672b\u5c3e\u52a01\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\n        # 18. \u672b\u5c3e\u52a01\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\n        # 19. \u672b\u5c3e\u52a01\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\n        # 20. \u672b\u5c3e\u52a01\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c"}, {"task_id": "plus-one", "completion": "class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u672b\u5c3e\u52a01\n        # digits[-1] += 1\n        # return digits\n        \n        # 2. \u4ece\u540e\u5f80\u524d\u904d\u5386\uff0c\u5982\u679c\u4e0d\u662f9\uff0c\u76f4\u63a5\u52a01\uff0c\u5982\u679c\u662f9\uff0c\u5219\u5c06\u8be5\u4f4d\u7f6e\u7f6e0\uff0c\u5e76\u5c06\u4e0b\u4e00\u4f4d\u7f6e\u52a01\n        # \u5982\u679c\u904d\u5386\u5b8c\uff0c\u4ecd\u7136\u662f9\uff0c\u5219\u5c06\u6700\u9ad8\u4f4d\u7f6e0\uff0c\u5e76\u5c06\u4e0b\u4e00\u4f4d\u7f6e\u52a01\n        # \u5982\u679c\u904d\u5386\u5b8c\uff0c\u4ecd\u7136\u662f9\uff0c\u5219\u5c06\u6700\u9ad8\u4f4d\u7f6e\u7f6e0\uff0c\u5e76\u5c06\u4e0b\u4e00\u4f4d\u7f6e\u52a01\n        # \u5982\u679c\u904d\u5386\u5b8c\uff0c\u4ecd\u7136\u662f9\uff0c\u5219\u5c06\u6700\u9ad8\u4f4d\u7f6e\u7f6e0\uff0c\u5e76\u5c06\u4e0b\u4e00\u4f4d\u7f6e\u52a01\n        # \u5982\u679c\u904d\u5386\u5b8c\uff0c\u4ecd\u7136\u662f9\uff0c\u5219\u5c06\u6700\u9ad8\u4f4d\u7f6e\u7f6e0\uff0c\u5e76\u5c06\u4e0b\u4e00\u4f4d\u7f6e\u52a01\n        # \u5982\u679c\u904d\u5386\u5b8c\uff0c\u4ecd\u7136\u662f9\uff0c\u5219\u5c06\u6700\u9ad8\u4f4d\u7f6e\u7f6e0\uff0c\u5e76\u5c06\u4e0b\u4e00\u4f4d\u7f6e\u52a01\n        # \u5982\u679c\u904d\u5386\u5b8c\uff0c\u4ecd\u7136\u662f9\uff0c\u5219\u5c06\u6700\u9ad8\u4f4d\u7f6e\u7f6e0\uff0c\u5e76\u5c06\u4e0b\u4e00\u4f4d\u7f6e\u52a01\n        # \u5982\u679c\u904d\u5386\u5b8c\uff0c\u4ecd\u7136\u662f9\uff0c\u5219\u5c06\u6700\u9ad8\u4f4d\u7f6e\u7f6e0\uff0c\u5e76\u5c06\u4e0b\u4e00\u4f4d\u7f6e\u52a01\n        # \u5982\u679c\u904d\u5386\u5b8c\uff0c\u4ecd\u7136\u662f9\uff0c\u5219\u5c06\u6700\u9ad8\u4f4d\u7f6e\u7f6e0\uff0c\u5e76\u5c06\u4e0b\u4e00\u4f4d\u7f6e\u52a01\n        # \u5982\u679c\u904d\u5386\u5b8c\uff0c\u4ecd\u7136\u662f9\uff0c\u5219\u5c06\u6700\u9ad8\u4f4d\u7f6e\u7f6e0\uff0c\u5e76\u5c06\u4e0b\u4e00\u4f4d\u7f6e\u52a01\n        # \u5982\u679c\u904d\u5386\u5b8c\uff0c\u4ecd\u7136\u662f9\uff0c\u5219\u5c06\u6700\u9ad8\u4f4d\u7f6e\u7f6e0\uff0c\u5e76\u5c06\u4e0b\u4e00\u4f4d\u7f6e\u52a01\n        # \u5982\u679c\u904d\u5386\u5b8c\uff0c\u4ecd\u7136\u662f9\uff0c\u5219\u5c06\u6700\u9ad8\u4f4d\u7f6e\u7f6e0\uff0c\u5e76\u5c06\u4e0b\u4e00\u4f4d\u7f6e\u52a01\n        # \u5982\u679c\u904d\u5386\u5b8c\uff0c\u4ecd\u7136\u662f9\uff0c\u5219\u5c06\u6700\u9ad8\u4f4d\u7f6e\u7f6e0\uff0c\u5e76\u5c06\u4e0b\u4e00\u4f4d\u7f6e\u52a01\n        # \u5982\u679c\u904d\u5386\u5b8c\uff0c\u4ecd\u7136\u662f9\uff0c\u5219\u5c06\u6700\u9ad8\u4f4d\u7f6e\u7f6e0\uff0c\u5e76\u5c06\u4e0b\u4e00\u4f4d\u7f6e\u52a01\n        # \u5982\u679c\u904d\u5386\u5b8c\uff0c\u4ecd\u7136\u662f9\uff0c\u5219\u5c06\u6700\u9ad8\u4f4d\u7f6e\u7f6e0\uff0c\u5e76\u5c06\u4e0b\u4e00\u4f4d\u7f6e\u52a01\n        # \u5982\u679c\u904d\u5386\u5b8c\uff0c\u4ecd\u7136\u662f9\uff0c\u5219\u5c06\u6700\u9ad8\u4f4d\u7f6e\u7f6e0\uff0c\u5e76\u5c06\u4e0b\u4e00\u4f4d\u7f6e\u52a01\n        # \u5982\u679c\u904d\u5386\u5b8c\uff0c\u4ecd\u7136\u662f9\uff0c\u5219\u5c06\u6700\u9ad8\u4f4d\u7f6e\u7f6e0\uff0c\u5e76\u5c06\u4e0b\u4e00\u4f4d\u7f6e\u52a01\n        # \u5982\u679c\u904d\u5386\u5b8c\uff0c\u4ecd\u7136\u662f9\uff0c\u5219\u5c06\u6700\u9ad8\u4f4d\u7f6e\u7f6e0\uff0c\u5e76\u5c06\u4e0b\u4e00\u4f4d\u7f6e\u52a01\n        # \u5982\u679c\u904d\u5386\u5b8c\uff0c\u4ecd\u7136\u662f9\uff0c\u5219\u5c06\u6700\u9ad8\u4f4d\u7f6e\u7f6e0\uff0c\u5e76\u5c06\u4e0b\u4e00\u4f4d\u7f6e\u52a01\n        # \u5982\u679c\u904d\u5386\u5b8c\uff0c\u4ecd\u7136\u662f9\uff0c\u5219\u5c06\u6700\u9ad8\u4f4d\u7f6e\u7f6e0\uff0c\u5e76\u5c06\u4e0b\u4e00\u4f4d\u7f6e\u52a01\n        # \u5982\u679c\u904d\u5386\u5b8c\uff0c\u4ecd\u7136\u662f9\uff0c\u5219\u5c06\u6700\u9ad8\u4f4d\u7f6e\u7f6e0\uff0c\u5e76\u5c06\u4e0b\u4e00\u4f4d\u7f6e\u52a01\n        # \u5982\u679c\u904d\u5386\u5b8c\uff0c\u4ecd\u7136\u662f9\uff0c\u5219\u5c06\u6700\u9ad8\u4f4d\u7f6e\u7f6e0\uff0c\u5e76\u5c06\u4e0b\u4e00\u4f4d\u7f6e\u52a01\n        # \u5982\u679c\u904d\u5386\u5b8c\uff0c\u4ecd\u7136\u662f9\uff0c\u5219\u5c06\u6700\u9ad8\u4f4d\u7f6e\u7f6e0\uff0c\u5e76\u5c06\u4e0b\u4e00\u4f4d\u7f6e\u52a01\n        # \u5982\u679c\u904d\u5386\u5b8c\uff0c\u4ecd\u7136\u662f9\uff0c\u5219\u5c06\u6700\u9ad8\u4f4d\u7f6e\u7f6e0\uff0c\u5e76\u5c06\u4e0b\u4e00\u4f4d\u7f6e\u52a01\n        # \u5982\u679c\u904d\u5386\u5b8c\uff0c\u4ecd\u7136\u662f9\uff0c\u5219\u5c06\u6700\u9ad8\u4f4d\u7f6e\u7f6e0\uff0c\u5e76\u5c06\u4e0b\u4e00\u4f4d\u7f6e\u52a01\n        # \u5982\u679c\u904d\u5386\u5b8c\uff0c\u4ecd\u7136\u662f9\uff0c\u5219\u5c06\u6700\u9ad8\u4f4d\u7f6e\u7f6e0\uff0c\u5e76\u5c06"}, {"task_id": "plus-one", "completion": "class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u672b\u5c3e\u52a01\n        # 2. \u672b\u5c3e\u52a00\n        # 3. \u672b\u5c3e\u52a01\uff0c\u524d\u9762\u52a01\n        # 4. \u672b\u5c3e\u52a00\uff0c\u524d\u9762\u52a01\n        # 5. \u672b\u5c3e\u52a01\uff0c\u524d\u9762\u52a00\n        # 6. \u672b\u5c3e\u52a00\uff0c\u524d\u9762\u52a00\n        # 7. \u672b\u5c3e\u52a01\uff0c\u524d\u9762\u52a00\n        # 8. \u672b\u5c3e\u52a00\uff0c\u524d\u9762\u52a00\n        # 9. \u672b\u5c3e\u52a01\uff0c\u524d\u9762\u52a01\n        # 10. \u672b\u5c3e\u52a00\uff0c\u524d\u9762\u52a01\n        # 11. \u672b\u5c3e\u52a01\uff0c\u524d\u9762\u52a00\n        # 12. \u672b\u5c3e\u52a00\uff0c\u524d\u9762\u52a00\n        # 13. \u672b\u5c3e\u52a01\uff0c\u524d\u9762\u52a00\n        # 14. \u672b\u5c3e\u52a00\uff0c\u524d\u9762\u52a00\n        # 15. \u672b\u5c3e\u52a01\uff0c\u524d\u9762\u52a01\n        # 16. \u672b\u5c3e\u52a00\uff0c\u524d\u9762\u52a01\n        # 17. \u672b\u5c3e\u52a01\uff0c\u524d\u9762\u52a00\n        # 18. \u672b\u5c3e\u52a00\uff0c\u524d\u9762\u52a00\n        # 19. \u672b\u5c3e\u52a01\uff0c\u524d\u9762\u52a01\n        # 20. \u672b\u5c3e\u52a00\uff0c\u524d\u9762\u52a01\n        # 21. \u672b\u5c3e\u52a01\uff0c\u524d\u9762\u52a00\n        # 22. \u672b\u5c3e\u52a00\uff0c\u524d\u9762\u52a00\n        # 23. \u672b\u5c3e\u52a01\uff0c\u524d\u9762\u52a00\n        # 24. \u672b\u5c3e\u52a00\uff0c\u524d\u9762\u52a00\n        # 25. \u672b\u5c3e\u52a01\uff0c\u524d\u9762\u52a01\n        # 26. \u672b\u5c3e\u52a00\uff0c\u524d\u9762\u52a01\n        # 27. \u672b\u5c3e\u52a01\uff0c\u524d\u9762\u52a00\n        # 28. \u672b\u5c3e\u52a00\uff0c\u524d\u9762\u52a00\n        # 29. \u672b\u5c3e\u52a01\uff0c\u524d\u9762\u52a01\n        # 30. \u672b\u5c3e\u52a00\uff0c\u524d\u9762\u52a01\n        # 31. \u672b\u5c3e\u52a01\uff0c\u524d\u9762\u52a00\n        # 32. \u672b\u5c3e\u52a00\uff0c\u524d\u9762\u52a00\n        # 33. \u672b\u5c3e\u52a01\uff0c\u524d\u9762\u52a01\n        # 34. \u672b\u5c3e\u52a00\uff0c\u524d\u9762\u52a01\n        # 35. \u672b\u5c3e\u52a01\uff0c\u524d\u9762\u52a00\n        # 36. \u672b\u5c3e\u52a00\uff0c\u524d\u9762\u52a00\n        # 37. \u672b\u5c3e\u52a01\uff0c\u524d\u9762\u52a01\n        # 38. \u672b\u5c3e\u52a00\uff0c\u524d\u9762\u52a01\n        # 39. \u672b\u5c3e\u52a01\uff0c\u524d\u9762\u52a00\n        # 40. \u672b\u5c3e\u52a00\uff0c\u524d\u9762\u52a00\n        # 41. \u672b\u5c3e\u52a01\uff0c\u524d\u9762\u52a01\n        # 42. \u672b\u5c3e\u52a00\uff0c\u524d\u9762\u52a01\n        # 43. \u672b\u5c3e\u52a01\uff0c\u524d\u9762\u52a00\n        # 44. \u672b\u5c3e\u52a00\uff0c\u524d\u9762\u52a00\n        # 45. \u672b\u5c3e\u52a01\uff0c\u524d\u9762\u52a01\n        # 46. \u672b\u5c3e\u52a00\uff0c\u524d\u9762\u52a01\n        # 47. \u672b\u5c3e\u52a01\uff0c\u524d\u9762\u52a00\n        # 48. \u672b\u5c3e\u52a00\uff0c\u524d\u9762\u52a00\n        # 49. \u672b\u5c3e\u52a01\uff0c\u524d\u9762\u52a01\n        # 50. \u672b\u5c3e\u52a00\uff0c\u524d\u9762\u52a01\n        # 51. \u672b\u5c3e\u52a01\uff0c\u524d\u9762\u52a00\n        # 52. \u672b\u5c3e\u52a00\uff0c\u524d\u9762\u52a00\n        # 53. \u672b\u5c3e\u52a01\uff0c\u524d\u9762\u52a01\n        # 54. \u672b\u5c3e\u52a00\uff0c\u524d\u9762\u52a01\n        # 55. \u672b\u5c3e\u52a01\uff0c\u524d\u9762\u52a0"}, {"task_id": "plus-one", "completion": "class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u672b\u5c3e\u52a01\n        # 2. \u672b\u5c3e\u52a01\u540e\uff0c\u8fdb\u4f4d\n        # 3. \u672b\u5c3e\u52a01\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\n        # 4. \u672b\u5c3e\u52a01\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\n        # 5. \u672b\u5c3e\u52a01\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\n        # 6. \u672b\u5c3e\u52a01\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\n        # 7. \u672b\u5c3e\u52a01\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\n        # 8. \u672b\u5c3e\u52a01\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\n        # 9. \u672b\u5c3e\u52a01\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\n        # 10. \u672b\u5c3e\u52a01\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\n        # 11. \u672b\u5c3e\u52a01\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\n        # 12. \u672b\u5c3e\u52a01\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\n        # 13. \u672b\u5c3e\u52a01\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\n        # 14. \u672b\u5c3e\u52a01\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\n        # 15. \u672b\u5c3e\u52a01\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\n        # 16. \u672b\u5c3e\u52a01\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\n        # 17. \u672b\u5c3e\u52a01\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\n        # 18. \u672b\u5c3e\u52a01\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\n        # 19. \u672b\u5c3e\u52a01\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\n        # 20. \u672b\u5c3e\u52a01\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c"}, {"task_id": "plus-one", "completion": "class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u672b\u5c3e\u52a01\n        # 2. \u672b\u5c3e\u52a01\u540e\uff0c\u8fdb\u4f4d\n        # 3. \u672b\u5c3e\u52a01\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\n        # 4. \u672b\u5c3e\u52a01\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\n        # 5. \u672b\u5c3e\u52a01\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\n        # 6. \u672b\u5c3e\u52a01\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\n        # 7. \u672b\u5c3e\u52a01\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\n        # 8. \u672b\u5c3e\u52a01\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\n        # 9. \u672b\u5c3e\u52a01\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\n        # 10. \u672b\u5c3e\u52a01\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\n        # 11. \u672b\u5c3e\u52a01\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\n        # 12. \u672b\u5c3e\u52a01\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\n        # 13. \u672b\u5c3e\u52a01\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\n        # 14. \u672b\u5c3e\u52a01\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\n        # 15. \u672b\u5c3e\u52a01\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\n        # 16. \u672b\u5c3e\u52a01\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\n        # 17. \u672b\u5c3e\u52a01\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\n        # 18. \u672b\u5c3e\u52a01\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\n        # 19. \u672b\u5c3e\u52a01\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\n        # 20. \u672b\u5c3e\u52a01\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c\u8fdb\u4f4d\u540e\uff0c"}], "regular-expression-matching": [{"task_id": "regular-expression-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u9012\u5f52\n        # 2. \u52a8\u6001\u89c4\u5212\n        # 3. \u8d2a\u5fc3\u7b97\u6cd5\n        # 4. \u56de\u6eaf\u7b97\u6cd5\n        # 5. \u9012\u5f52 + \u5907\u5fd8\u5f55\n        # 6. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55\n        # 7. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u526a\u679d\n        # 8. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u526a\u679d + \u62c6\u5206\n        # 9. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u526a\u679d + \u62c6\u5206 + \u5907\u5fd8\u5f55\n        # 10. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u526a\u679d + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206\n        # 11. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u526a\u679d + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55\n        # 12. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u526a\u679d + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206\n        # 13. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u526a\u679d + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55\n        # 14. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u526a\u679d + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206\n        # 15. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u526a\u679d + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55\n        # 16. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u526a\u679d + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206\n        # 17. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u526a\u679d + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55\n        # 18. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u526a\u679d + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55"}, {"task_id": "regular-expression-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u9012\u5f52\n        # 2. \u52a8\u6001\u89c4\u5212\n        # 3. \u8d2a\u5fc3\u7b97\u6cd5\n        # 4. \u56de\u6eaf\u7b97\u6cd5\n        # 5. \u9012\u5f52 + \u5907\u5fd8\u5f55\n        # 6. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55\n        # 7. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u62c6\u5206\n        # 8. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u62c6\u5206 + \u6eda\u52a8\u6570\u7ec4\n        # 9. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u62c6\u5206 + \u6eda\u52a8\u6570\u7ec4 + \u6eda\u52a8\u6570\u7ec4\n        # 10. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u62c6\u5206 + \u6eda\u52a8\u6570\u7ec4 + \u6eda\u52a8\u6570\u7ec4 + \u6eda\u52a8\u6570\u7ec4\n        # 11. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u62c6\u5206 + \u6eda\u52a8\u6570\u7ec4 + \u6eda\u52a8\u6570\u7ec4 + \u6eda\u52a8\u6570\u7ec4 + \u6eda\u52a8\u6570\u7ec4\n        # 12. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u62c6\u5206 + \u6eda\u52a8\u6570\u7ec4 + \u6eda\u52a8\u6570\u7ec4 + \u6eda\u52a8\u6570\u7ec4 + \u6eda\u52a8\u6570\u7ec4 + \u6eda\u52a8\u6570\u7ec4\n        # 13. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u62c6\u5206 + \u6eda\u52a8\u6570\u7ec4 + \u6eda\u52a8\u6570\u7ec4 + \u6eda\u52a8\u6570\u7ec4 + \u6eda\u52a8\u6570\u7ec4 + \u6eda\u52a8\u6570\u7ec4 + \u6eda\u52a8\u6570\u7ec4\n        # 14. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u62c6\u5206 + \u6eda\u52a8\u6570\u7ec4 + \u6eda\u52a8\u6570\u7ec4 + \u6eda\u52a8\u6570\u7ec4 + \u6eda\u52a8\u6570\u7ec4 + \u6eda\u52a8\u6570\u7ec4 + \u6eda\u52a8\u6570\u7ec4 + \u6eda\u52a8\u6570\u7ec4\n        # 15. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u62c6\u5206 + \u6eda\u52a8\u6570\u7ec4 + \u6eda\u52a8\u6570\u7ec4 + \u6eda\u52a8\u6570\u7ec4 + \u6eda\u52a8\u6570\u7ec4 + \u6eda\u52a8\u6570\u7ec4 + \u6eda\u52a8\u6570\u7ec4 + \u6eda\u52a8\u6570\u7ec4 + \u6eda\u52a8\u6570\u7ec4\n        # 16. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u62c6\u5206 + \u6eda\u52a8\u6570\u7ec4 + \u6eda\u52a8\u6570\u7ec4 + \u6eda\u52a8\u6570\u7ec4 + \u6eda\u52a8\u6570\u7ec4 + \u6eda\u52a8\u6570\u7ec4 + \u6eda\u52a8\u6570\u7ec4 + \u6eda\u52a8\u6570\u7ec4 + \u6eda\u52a8\u6570\u7ec4 + \u6eda\u52a8\u6570\u7ec4\n        # 17. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u62c6\u5206 + \u6eda\u52a8\u6570\u7ec4 + \u6eda\u52a8\u6570\u7ec4 + \u6eda\u52a8\u6570\u7ec4 + \u6eda\u52a8\u6570\u7ec4 + \u6eda\u52a8\u6570\u7ec4 + \u6eda\u52a8\u6570\u7ec4 + \u6eda\u52a8\u6570\u7ec4 + \u6eda\u52a8\u6570\u7ec4 + \u6eda\u52a8\u6570\u7ec4 + \u6eda\u52a8\u6570\u7ec4\n        # 18. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u62c6\u5206 + \u6eda\u52a8\u6570\u7ec4 + \u6eda\u52a8\u6570\u7ec4 + \u6eda\u52a8\u6570\u7ec4 + \u6eda\u52a8\u6570\u7ec4 + \u6eda\u52a8\u6570\u7ec4 + \u6eda\u52a8\u6570\u7ec4 + \u6eda\u52a8\u6570\u7ec4 + \u6eda\u52a8\u6570\u7ec4"}, {"task_id": "regular-expression-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u9012\u5f52\n        # 2. \u52a8\u6001\u89c4\u5212\n        # 3. \u8d2a\u5fc3\u7b97\u6cd5\n        # 4. \u56de\u6eaf\u7b97\u6cd5\n        # 5. \u66b4\u529b\u7b97\u6cd5\n        # 6. \u5206\u6cbb\u7b97\u6cd5\n        # 7. \u6781\u5c0f\u5316\u6781\u5927\u7b97\u6cd5\n        # 8. \u8d2a\u5fc3+\u4e8c\u5206\u67e5\u627e\n        # 9. \u641c\u7d22+\u526a\u679d\n        # 10. \u5e76\u67e5\u96c6\n        # 11. \u6808\n        # 12. \u961f\u5217\n        # 13. \u53cc\u7aef\u961f\u5217\n        # 14. \u961f\u5217+\u5806\uff08\u4f18\u5148\u961f\u5217\uff09\n        # 15. \u961f\u5217+\u5806\uff08\u6700\u5c0f\u5806\uff09\n        # 16. \u961f\u5217+\u5806\uff08\u6700\u5927\u5806\uff09\n        # 17. \u5e76\u67e5\u96c6\n        # 18. \u6811\u72b6\u6570\u7ec4\n        # 19. \u6811\n        # 20. \u54c8\u5e0c\u8868\n        # 21. \u54c8\u5e0c\u8868+\u94fe\u8868\n        # 22. \u54c8\u5e0c\u8868+\u5e73\u8861\u6811\n        # 23. \u54c8\u5e0c\u8868+\u6811\n        # 24. \u54c8\u5e0c\u8868+\u5b57\u5178\u6811\n        # 25. \u54c8\u5e0c\u8868+\u6563\u5217\u8868\n        # 26. \u54c8\u5e0c\u8868+\u6563\u5217\u8868+\u5e73\u8861\u6811\n        # 27. \u54c8\u5e0c\u8868+\u6563\u5217\u8868+\u6811\n        # 28. \u54c8\u5e0c\u8868+\u6563\u5217\u8868+\u5b57\u5178\u6811\n        # 29. \u54c8\u5e0c\u8868+\u6563\u5217\u8868+\u5b57\u5178\u6811+\u5e73\u8861\u6811\n        # 30. \u54c8\u5e0c\u8868+\u6563\u5217\u8868+\u5b57\u5178\u6811+\u6811\n        # 31. \u54c8\u5e0c\u8868+\u6563\u5217\u8868+\u5b57\u5178\u6811+\u6811+\u5e73\u8861\u6811\n        # 32. \u54c8\u5e0c\u8868+\u6563\u5217\u8868+\u5b57\u5178\u6811+\u6811+\u5e73\u8861\u6811+\u5806\n        # 33. \u54c8\u5e0c\u8868+\u6563\u5217\u8868+\u5b57\u5178\u6811+\u6811+\u5e73\u8861\u6811+\u5806+\u53cc\u7aef\u961f\u5217\n        # 34. \u54c8\u5e0c\u8868+\u6563\u5217\u8868+\u5b57\u5178\u6811+\u6811+\u5e73\u8861\u6811+\u5806+\u53cc\u7aef\u961f\u5217+\u4f18\u5148\u961f\u5217\n        # 35. \u54c8\u5e0c\u8868+\u6563\u5217\u8868+\u5b57\u5178\u6811+\u6811+\u5e73\u8861\u6811+\u5806+\u53cc\u7aef\u961f\u5217+\u4f18\u5148\u961f\u5217+\u6700\u5c0f\u5806\n        # 36. \u54c8\u5e0c\u8868+\u6563\u5217\u8868+\u5b57\u5178\u6811+\u6811+\u5e73\u8861\u6811+\u5806+\u53cc\u7aef\u961f\u5217+\u4f18\u5148\u961f\u5217+\u6700\u5c0f\u5806+\u6700\u5927\u5806\n        # 37. \u54c8\u5e0c\u8868+\u6563\u5217\u8868+\u5b57\u5178\u6811+\u6811+\u5e73\u8861\u6811+\u5806+\u53cc\u7aef\u961f\u5217+\u4f18\u5148\u961f\u5217+\u6700\u5c0f\u5806+\u6700\u5927\u5806+\u5806\u6392\u5e8f\n        # 38. \u54c8\u5e0c\u8868+\u6563\u5217\u8868+\u5b57\u5178\u6811+\u6811+\u5e73\u8861\u6811+\u5806+\u53cc\u7aef\u961f\u5217+\u4f18\u5148\u961f\u5217+\u6700\u5c0f\u5806+\u6700\u5927\u5806+\u5806\u6392\u5e8f+\u5f52\u5e76\u6392\u5e8f"}, {"task_id": "regular-expression-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u9012\u5f52\n        # 2. \u52a8\u6001\u89c4\u5212\n        # 3. \u8d2a\u5fc3\u7b97\u6cd5\n        # 4. \u56de\u6eaf\u7b97\u6cd5\n        # 5. \u9012\u5f52 + \u5907\u5fd8\u5f55\n        # 6. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55\n        # 7. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u526a\u679d\n        # 8. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u526a\u679d + \u62c6\u5206\n        # 9. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u526a\u679d + \u62c6\u5206 + \u5907\u5fd8\u5f55\n        # 10. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u526a\u679d + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206\n        # 11. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u526a\u679d + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55\n        # 12. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u526a\u679d + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206\n        # 13. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u526a\u679d + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55\n        # 14. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u526a\u679d + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206\n        # 15. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u526a\u679d + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55\n        # 16. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u526a\u679d + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206\n        # 17. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u526a\u679d + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55\n        # 18. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u526a\u679d + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55"}, {"task_id": "regular-expression-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u9012\u5f52\n        # 2. \u52a8\u6001\u89c4\u5212\n        # 3. \u8d2a\u5fc3\u7b97\u6cd5\n        # 4. \u56de\u6eaf\u7b97\u6cd5\n        # 5. \u9012\u63a8\u516c\u5f0f\n        # 6. \u6eda\u52a8\u6570\u7ec4\n        # 7. \u641c\u7d22\n        # 8. \u5206\u6cbb\n        # 9. \u6808\n        # 10. \u54c8\u5e0c\u8868\n        # 11. \u4e8c\u5206\u67e5\u627e\n        # 12. \u8d2a\u5fc3\u7b97\u6cd5\n        # 13. \u6a21\u62df\n        # 14. \u5206\u6cbb\n        # 15. \u9012\u5f52\n        # 16. \u9012\u63a8\u516c\u5f0f\n        # 17. \u641c\u7d22\n        # 18. \u6eda\u52a8\u6570\u7ec4\n        # 19. \u4e8c\u5206\u67e5\u627e\n        # 20. \u8d2a\u5fc3\u7b97\u6cd5\n        # 21. \u6a21\u62df\n        # 22. \u5206\u6cbb\n        # 23. \u6808\n        # 24. \u54c8\u5e0c\u8868\n        # 25. \u9012\u5f52\n        # 26. \u9012\u63a8\u516c\u5f0f\n        # 27. \u641c\u7d22\n        # 28. \u6eda\u52a8\u6570\u7ec4\n        # 29. \u4e8c\u5206\u67e5\u627e\n        # 30. \u8d2a\u5fc3\u7b97\u6cd5\n        # 31. \u6a21\u62df\n        # 32. \u5206\u6cbb\n        # 33. \u6808\n        # 34. \u54c8\u5e0c\u8868\n        # 35. \u9012\u5f52\n        # 36. \u9012\u63a8\u516c\u5f0f\n        # 37. \u641c\u7d22\n        # 38. \u6eda\u52a8\u6570\u7ec4\n        # 39. \u4e8c\u5206\u67e5\u627e\n        # 40. \u8d2a\u5fc3\u7b97\u6cd5\n        # 41. \u6a21\u62df\n        # 42. \u5206\u6cbb\n        # 43. \u6808\n        # 44. \u54c8\u5e0c\u8868\n        # 45. \u9012\u5f52\n        # 46. \u9012\u63a8\u516c\u5f0f\n        # 47. \u641c\u7d22\n        # 48. \u6eda\u52a8\u6570\u7ec4\n        # 49. \u4e8c\u5206\u67e5\u627e\n        # 50. \u8d2a\u5fc3\u7b97\u6cd5\n        # 51. \u6a21\u62df\n        # 52. \u5206\u6cbb\n        # 53. \u6808\n        # 54. \u54c8\u5e0c\u8868\n        # 55. \u9012\u5f52\n        # 56. \u9012\u63a8\u516c\u5f0f\n        # 57. \u641c\u7d22\n        # 58. \u6eda\u52a8\u6570\u7ec4\n        # 59. \u4e8c\u5206\u67e5\u627e\n        # 60. \u8d2a\u5fc3\u7b97\u6cd5\n        # 61. \u6a21\u62df\n        # 62. \u5206\u6cbb\n        # 63. \u6808\n        # 64. \u54c8\u5e0c\u8868\n        # 65. \u9012\u5f52\n        # 66. \u9012\u63a8\u516c\u5f0f\n        # 67. \u641c\u7d22\n        # 68. \u6eda\u52a8\u6570\u7ec4\n        # 69. \u4e8c\u5206\u67e5\u627e\n        # 70. \u8d2a\u5fc3\u7b97\u6cd5\n        # 71. \u6a21\u62df\n        # 72. \u5206\u6cbb\n        # 73. \u6808\n        # 74. \u54c8\u5e0c\u8868\n        # 75. \u9012\u5f52\n        # 76. \u9012\u63a8\u516c\u5f0f\n        # 77. \u641c\u7d22\n        # 78. \u6eda\u52a8\u6570\u7ec4\n        # 79. \u4e8c\u5206\u67e5\u627e"}], "create-maximum-number": [{"task_id": "create-maximum-number", "completion": "class Solution(object):\n    def maxNumber(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\n        # 2. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u503c\n        # 3. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\n        # 4. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u6700\u5927\u503c\n        # 5. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 6. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 7. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 8. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 9. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 10. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 11. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 12. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 13. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 14. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 15. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 16. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 17. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 18. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 19. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u6700"}, {"task_id": "create-maximum-number", "completion": "class Solution(object):\n    def maxNumber(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u5148\u628a\u4e24\u4e2a\u6570\u7ec4\u5408\u5e76\u6210\u4e00\u4e2a\u6570\u7ec4\n        # 2. \u6392\u5e8f\n        # 3. \u53d6\u524dk\u4e2a\n        # 4. \u8fd4\u56de\n        nums = nums1 + nums2\n        nums.sort()\n        return nums[:k]"}, {"task_id": "create-maximum-number", "completion": "class Solution(object):\n    def maxNumber(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\n        # 2. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u503c\n        # 3. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\n        # 4. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u6700\u5927\u503c\n        # 5. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 6. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 7. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 8. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 9. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 10. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 11. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 12. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 13. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 14. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 15. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 16. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 17. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 18. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 19. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u6700"}, {"task_id": "create-maximum-number", "completion": "class Solution(object):\n    def maxNumber(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        # 2. \u4ece\u540e\u5f80\u524d\u627e\n        # 3. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u5c0f\u4e8ek\u7684\u6570\u5b57\n        # 4. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u5c0f\u4e8ek\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\n        # 5. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u5c0f\u4e8ek\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\n        # 6. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u5c0f\u4e8ek\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\n        # 7. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u5c0f\u4e8ek\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\n        # 8. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u5c0f\u4e8ek\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\n        # 9. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u5c0f\u4e8ek\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\n        # 10. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u5c0f\u4e8ek\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\n        # 11. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u5c0f\u4e8ek\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\n        # 12. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u5c0f\u4e8ek\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\n        # 13. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u5c0f\u4e8ek\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\n        # 14. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u5c0f\u4e8ek\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\n        # 15. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u5c0f\u4e8ek\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\n        # 16. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u5c0f\u4e8ek\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\n        # 17. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u5c0f\u4e8ek\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\n        # 18. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u5c0f\u4e8ek\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\n        # 19. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u5c0f\u4e8ek\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\n        # 20. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u5c0f\u4e8ek\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\u7684\u6570\u5b57"}, {"task_id": "create-maximum-number", "completion": "class Solution(object):\n    def maxNumber(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\n        # 2. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u503c\n        # 3. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\n        # 4. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u6700\u5927\u503c\n        # 5. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 6. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 7. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 8. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 9. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 10. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 11. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 12. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 13. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 14. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 15. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 16. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 17. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 18. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 19. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u6700"}], "perfect-number": [{"task_id": "perfect-number", "completion": "class Solution(object):\n    def checkPerfectNumber(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 2. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 3. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 4. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 5. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 6. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 7. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 8. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 9. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 10. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 11. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 12. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 13. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 14. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 15. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 16. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 17. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 18. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 19. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 20. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 21. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 22. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 23. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 24. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 25. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 26. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 27. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 28. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 29. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 30. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 31. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 32. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 33. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 34. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 35. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 36. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 37. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 38. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 39. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 40. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 41. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 42. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 43. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 44. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 45. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 46. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 47. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 48. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 49. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 50. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 51. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 52. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 53. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 54. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 55."}, {"task_id": "perfect-number", "completion": "class Solution(object):\n    def checkPerfectNumber(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 2. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 3. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 4. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 5. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 6. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 7. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 8. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 9. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 10. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 11. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 12. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 13. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 14. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 15. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 16. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 17. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 18. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 19. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 20. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 21. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 22. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 23. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 24. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 25. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 26. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 27. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 28. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 29. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 30. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 31. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 32. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 33. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 34. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 35. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 36. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 37. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 38. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 39. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 40. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 41. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 42. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 43. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 44. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 45. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 46. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 47. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 48. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 49. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 50. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 51. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 52. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 53. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 54. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 55."}, {"task_id": "perfect-number", "completion": "class Solution(object):\n    def checkPerfectNumber(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 2. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 3. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 4. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 5. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 6. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 7. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 8. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 9. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 10. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 11. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 12. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 13. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 14. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 15. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 16. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 17. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 18. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 19. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 20. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 21. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 22. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 23. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 24. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 25. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 26. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 27. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 28. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 29. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 30. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 31. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 32. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 33. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 34. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 35. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 36. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 37. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 38. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 39. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 40. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 41. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 42. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 43. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 44. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 45. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 46. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 47. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 48. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 49. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 50. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 51. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 52. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 53. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 54. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 55."}, {"task_id": "perfect-number", "completion": "class Solution(object):\n    def checkPerfectNumber(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 2. \u68c0\u67e5\u662f\u5426\u662f\u5b8c\u7f8e\u6570\n        # 3. \u5982\u679c\u662f\u5b8c\u7f8e\u6570\uff0c\u8fd4\u56deTrue\n        # 4. \u5982\u679c\u4e0d\u662f\u5b8c\u7f8e\u6570\uff0c\u8fd4\u56deFalse\n        \n        # 1. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 2. \u68c0\u67e5\u662f\u5426\u662f\u5b8c\u7f8e\u6570\n        # 3. \u5982\u679c\u662f\u5b8c\u7f8e\u6570\uff0c\u8fd4\u56deTrue\n        # 4. \u5982\u679c\u4e0d\u662f\u5b8c\u7f8e\u6570\uff0c\u8fd4\u56deFalse\n        \n        # 1. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 2. \u68c0\u67e5\u662f\u5426\u662f\u5b8c\u7f8e\u6570\n        # 3. \u5982\u679c\u662f\u5b8c\u7f8e\u6570\uff0c\u8fd4\u56deTrue\n        # 4. \u5982\u679c\u4e0d\u662f\u5b8c\u7f8e\u6570\uff0c\u8fd4\u56deFalse\n        \n        # 1. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 2. \u68c0\u67e5\u662f\u5426\u662f\u5b8c\u7f8e\u6570\n        # 3. \u5982\u679c\u662f\u5b8c\u7f8e\u6570\uff0c\u8fd4\u56deTrue\n        # 4. \u5982\u679c\u4e0d\u662f\u5b8c\u7f8e\u6570\uff0c\u8fd4\u56deFalse\n        \n        # 1. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 2. \u68c0\u67e5\u662f\u5426\u662f\u5b8c\u7f8e\u6570\n        # 3. \u5982\u679c\u662f\u5b8c\u7f8e\u6570\uff0c\u8fd4\u56deTrue\n        # 4. \u5982\u679c\u4e0d\u662f\u5b8c\u7f8e\u6570\uff0c\u8fd4\u56deFalse\n        \n        # 1. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 2. \u68c0\u67e5\u662f\u5426\u662f\u5b8c\u7f8e\u6570\n        # 3. \u5982\u679c\u662f\u5b8c\u7f8e\u6570\uff0c\u8fd4\u56deTrue\n        # 4. \u5982\u679c\u4e0d\u662f\u5b8c\u7f8e\u6570\uff0c\u8fd4\u56deFalse\n        \n        # 1. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 2. \u68c0\u67e5\u662f\u5426\u662f\u5b8c\u7f8e\u6570\n        # 3. \u5982\u679c\u662f\u5b8c\u7f8e\u6570\uff0c\u8fd4\u56deTrue\n        # 4. \u5982\u679c\u4e0d\u662f\u5b8c\u7f8e\u6570\uff0c\u8fd4\u56deFalse\n        \n        # 1. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 2. \u68c0\u67e5\u662f\u5426\u662f\u5b8c\u7f8e\u6570\n        # 3. \u5982\u679c\u662f\u5b8c\u7f8e\u6570\uff0c\u8fd4\u56deTrue\n        # 4. \u5982\u679c\u4e0d\u662f\u5b8c\u7f8e\u6570\uff0c\u8fd4\u56deFalse\n        \n        # 1. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 2. \u68c0\u67e5\u662f\u5426\u662f\u5b8c\u7f8e\u6570\n        # 3. \u5982\u679c\u662f\u5b8c\u7f8e\u6570\uff0c\u8fd4\u56deTrue\n        # 4. \u5982\u679c\u4e0d\u662f\u5b8c\u7f8e\u6570\uff0c\u8fd4\u56deFalse\n        \n        # 1. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 2. \u68c0\u67e5\u662f\u5426\u662f\u5b8c\u7f8e\u6570\n        # 3. \u5982\u679c\u662f\u5b8c\u7f8e\u6570\uff0c\u8fd4\u56deTrue\n        # 4. \u5982\u679c\u4e0d\u662f\u5b8c\u7f8e\u6570\uff0c\u8fd4\u56deFalse\n        \n        # 1. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 2. \u68c0\u67e5\u662f\u5426\u662f\u5b8c\u7f8e\u6570\n        # 3. \u5982\u679c\u662f\u5b8c\u7f8e\u6570\uff0c\u8fd4\u56deTrue\n        # 4. \u5982\u679c\u4e0d\u662f\u5b8c\u7f8e\u6570\uff0c\u8fd4\u56deFalse\n        \n        # 1. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 2. \u68c0\u67e5\u662f\u5426\u662f\u5b8c\u7f8e\u6570\n        # 3. \u5982\u679c\u662f\u5b8c\u7f8e\u6570\uff0c\u8fd4\u56deTrue\n        # 4. \u5982\u679c\u4e0d\u662f\u5b8c\u7f8e\u6570\uff0c\u8fd4\u56deFalse\n        \n        # 1. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 2. \u68c0\u67e5\u662f\u5426\u662f\u5b8c\u7f8e\u6570\n        # 3. \u5982\u679c\u662f\u5b8c\u7f8e\u6570\uff0c\u8fd4\u56deTrue\n        # 4. \u5982\u679c\u4e0d\u662f\u5b8c\u7f8e\u6570\uff0c\u8fd4\u56deFalse\n        \n        # 1. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 2. \u68c0\u67e5\u662f\u5426\u662f\u5b8c\u7f8e\u6570\n        # 3. \u5982\u679c\u662f\u5b8c\u7f8e\u6570\uff0c\u8fd4\u56deTrue\n        # 4. \u5982\u679c\u4e0d\u662f\u5b8c\u7f8e\u6570\uff0c\u8fd4\u56deFalse\n        \n        # 1. \u679a\u4e3e\u6240\u6709\u7684\u56e0"}, {"task_id": "perfect-number", "completion": "class Solution(object):\n    def checkPerfectNumber(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 2. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 3. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 4. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 5. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 6. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 7. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 8. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 9. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 10. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 11. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 12. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 13. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 14. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 15. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 16. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 17. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 18. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 19. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 20. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 21. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 22. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 23. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 24. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 25. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 26. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 27. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 28. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 29. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 30. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 31. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 32. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 33. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 34. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 35. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 36. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 37. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 38. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 39. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 40. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 41. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 42. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 43. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 44. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 45. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 46. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 47. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 48. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 49. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 50. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 51. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 52. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 53. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 54. \u679a\u4e3e\u6240\u6709\u7684\u56e0\u5b50\n        # 55."}], "fibonacci-number": [{"task_id": "fibonacci-number", "completion": "class Solution(object):\n    def fib(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        return self.fib(n-1) + self.fib(n-2)"}, {"task_id": "fibonacci-number", "completion": "class Solution(object):\n    def fib(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return self.fib(n-1) + self.fib(n-2)"}, {"task_id": "fibonacci-number", "completion": "class Solution(object):\n    def fib(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return self.fib(n-1) + self.fib(n-2)"}, {"task_id": "fibonacci-number", "completion": "class Solution(object):\n    def fib(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        return self.fib(n-1) + self.fib(n-2)"}, {"task_id": "fibonacci-number", "completion": "class Solution(object):\n    def fib(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        return self.fib(n-1) + self.fib(n-2)"}], "dungeon-game": [{"task_id": "dungeon-game", "completion": "class Solution(object):\n    def calculateMinimumHP(self, dungeon):\n        \"\"\"\n        :type dungeon: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(dungeon)\n        n = len(dungeon[0])\n        \n        dp = [[0 for _ in range(n)] for _ in range(m)]\n        \n        for i in range(m):\n            for j in range(n):\n                if i == 0 and j == 0:\n                    dp[i][j] = max(1, 1-dungeon[i][j])\n                elif i == 0:\n                    dp[i][j] = max(1, dp[i][j-1]-dungeon[i][j])\n                elif j == 0:\n                    dp[i][j] = max(1, dp[i-1][j]-dungeon[i][j])\n                else:\n                    dp[i][j] = max(1, min(dp[i-1][j], dp[i][j-1])-dungeon[i][j])\n                    \n        return dp[m-1][n-1]"}, {"task_id": "dungeon-game", "completion": "class Solution(object):\n    def calculateMinimumHP(self, dungeon):\n        \"\"\"\n        :type dungeon: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(dungeon)\n        n = len(dungeon[0])\n        \n        dp = [[0 for _ in range(n)] for _ in range(m)]\n        \n        for i in range(m):\n            for j in range(n):\n                if i == 0 and j == 0:\n                    dp[i][j] = max(1, 1-dungeon[i][j])\n                elif i == 0:\n                    dp[i][j] = max(1, dp[i][j-1]-dungeon[i][j])\n                elif j == 0:\n                    dp[i][j] = max(1, dp[i-1][j]-dungeon[i][j])\n                else:\n                    dp[i][j] = max(1, min(dp[i-1][j], dp[i][j-1])-dungeon[i][j])\n                    \n        return dp[m-1][n-1]"}, {"task_id": "dungeon-game", "completion": "class Solution(object):\n    def calculateMinimumHP(self, dungeon):\n        \"\"\"\n        :type dungeon: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + dungeon[i][j]\n        # dp[m-1][n-1] = max(1, 1 - dungeon[m-1][n-1])\n        \n        m = len(dungeon)\n        n = len(dungeon[0])\n        dp = [[0] * n for _ in range(m)]\n        \n        for i in range(m):\n            for j in range(n):\n                if i == 0 and j == 0:\n                    dp[i][j] = max(1, 1 - dungeon[i][j])\n                elif i == 0:\n                    dp[i][j] = dp[i][j-1] + dungeon[i][j]\n                elif j == 0:\n                    dp[i][j] = dp[i-1][j] + dungeon[i][j]\n                else:\n                    dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + dungeon[i][j]\n        \n        return dp[m-1][n-1]"}, {"task_id": "dungeon-game", "completion": "class Solution(object):\n    def calculateMinimumHP(self, dungeon):\n        \"\"\"\n        :type dungeon: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(dungeon)\n        n = len(dungeon[0])\n        \n        dp = [[0]*n for _ in range(m)]\n        \n        for i in range(m):\n            for j in range(n):\n                if i == 0 and j == 0:\n                    dp[i][j] = max(1, 1-dungeon[i][j])\n                elif i == 0:\n                    dp[i][j] = max(1, dp[i][j-1]-dungeon[i][j])\n                elif j == 0:\n                    dp[i][j] = max(1, dp[i-1][j]-dungeon[i][j])\n                else:\n                    dp[i][j] = max(1, min(dp[i-1][j], dp[i][j-1])-dungeon[i][j])\n                    \n        return dp[m-1][n-1]"}, {"task_id": "dungeon-game", "completion": "class Solution(object):\n    def calculateMinimumHP(self, dungeon):\n        \"\"\"\n        :type dungeon: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(dungeon)\n        n = len(dungeon[0])\n        \n        dp = [[0]*n for _ in range(m)]\n        \n        dp[m-1][n-1] = max(1, 1-dungeon[m-1][n-1])\n        \n        for i in range(m-2, -1, -1):\n            for j in range(n-1, -1, -1):\n                dp[i][j] = max(1, dp[i+1][j] - dungeon[i][j])\n                \n        for i in range(m-1):\n            for j in range(n-2, -1, -1):\n                dp[i][j] = max(1, dp[i][j+1] - dungeon[i][j])\n                \n        for i in range(m-1):\n            for j in range(n-1):\n                dp[i][j] = max(1, dp[i][j] - dungeon[i][j])\n                \n        return dp[0][0]"}], "find-k-th-smallest-pair-distance": [{"task_id": "find-k-th-smallest-pair-distance", "completion": "class Solution(object):\n    def smallestDistancePair(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        n = len(nums)\n        ans = float('inf')\n        for i in range(n-1):\n            for j in range(i+1, n):\n                ans = min(ans, abs(nums[i]-nums[j]))\n                if ans == 0:\n                    return 0\n                k -= 1\n                if k == 0:\n                    return ans\n        return ans"}, {"task_id": "find-k-th-smallest-pair-distance", "completion": "class Solution(object):\n    def smallestDistancePair(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        n = len(nums)\n        ans = float('inf')\n        for i in range(n-1):\n            for j in range(i+1, n):\n                ans = min(ans, abs(nums[i]-nums[j]))\n                if ans == 0:\n                    return 0\n        return ans"}, {"task_id": "find-k-th-smallest-pair-distance", "completion": "class Solution(object):\n    def smallestDistancePair(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        n = len(nums)\n        ans = float('inf')\n        for i in range(n-1):\n            for j in range(i+1, n):\n                ans = min(ans, abs(nums[i]-nums[j]))\n                if ans == 0:\n                    return 0\n                k -= 1\n                if k == 0:\n                    return ans\n        return ans"}, {"task_id": "find-k-th-smallest-pair-distance", "completion": "class Solution(object):\n    def smallestDistancePair(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        n = len(nums)\n        ans = float('inf')\n        for i in range(n):\n            for j in range(i+1, n):\n                ans = min(ans, abs(nums[i] - nums[j]))\n                if ans == 0:\n                    return 0\n                k -= 1\n                if k == 0:\n                    return ans\n        return ans"}, {"task_id": "find-k-th-smallest-pair-distance", "completion": "class Solution(object):\n    def smallestDistancePair(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        n = len(nums)\n        ans = float('inf')\n        for i in range(n):\n            for j in range(i+1, n):\n                ans = min(ans, abs(nums[i] - nums[j]))\n                if ans == 0:\n                    return 0\n                k -= 1\n                if k == 0:\n                    return ans\n        return ans"}], "number-of-segments-in-a-string": [{"task_id": "number-of-segments-in-a-string", "completion": "class Solution(object):\n    def countSegments(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u7a7a\u683c\n        # 2. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\n        # 3. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 4. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 5. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 6. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 7. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 8. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 9. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 10. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 11. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 12. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 13. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 14. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 15. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 16. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 17. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 18. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 19. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 20. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 21. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 22. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 23. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 24. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 25. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 26. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 27. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 28. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 29. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 30. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 31. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 32. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 33. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 34. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 35. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 3"}, {"task_id": "number-of-segments-in-a-string", "completion": "class Solution(object):\n    def countSegments(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u7a7a\u683c\n        # 2. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\n        # 3. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 4. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 5. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 6. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 7. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 8. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 9. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 10. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 11. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 12. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 13. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 14. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 15. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 16. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 17. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 18. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 19. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 20. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 21. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 22. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 23. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 24. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 25. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 26. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 27. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 28. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 29. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 30. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 31. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 32. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 33. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 34. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 35. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 3"}, {"task_id": "number-of-segments-in-a-string", "completion": "class Solution(object):\n    def countSegments(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u7a7a\u683c\n        # 2. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\n        # 3. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 4. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 5. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 6. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 7. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 8. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 9. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 10. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 11. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 12. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 13. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 14. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 15. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 16. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 17. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 18. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 19. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 20. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 21. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 22. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 23. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 24. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 25. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 26. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 27. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 28. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 29. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 30. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 31. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 32. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 33. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 34. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 35. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 3"}, {"task_id": "number-of-segments-in-a-string", "completion": "class Solution(object):\n    def countSegments(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u7a7a\u683c\n        # 2. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\n        # 3. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 4. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 5. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 6. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 7. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 8. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 9. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 10. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 11. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 12. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 13. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 14. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 15. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 16. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 17. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 18. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 19. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 20. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 21. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 22. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 23. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 24. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 25. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 26. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 27. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 28. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 29. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 30. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 31. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 32. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 33. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 34. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 35. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 3"}, {"task_id": "number-of-segments-in-a-string", "completion": "class Solution(object):\n    def countSegments(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u7a7a\u683c\n        # 2. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\n        # 3. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 4. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 5. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 6. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 7. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 8. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 9. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 10. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 11. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 12. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 13. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 14. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 15. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 16. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 17. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 18. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 19. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 20. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 21. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 22. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 23. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 24. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 25. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 26. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 27. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 28. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 29. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 30. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 31. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 32. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 33. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 34. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 35. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u7a7a\u683c\u548c\u7a7a\u683c\u4e4b\u95f4\u7684\u533a\u522b\n        # 3"}], "reverse-vowels-of-a-string": [{"task_id": "reverse-vowels-of-a-string", "completion": "class Solution(object):\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        vowels = set('aeiouAEIOU')\n        s = list(s)\n        i = 0\n        j = len(s) - 1\n        while i < j:\n            while i < j and s[i] not in vowels:\n                i += 1\n            while i < j and s[j] not in vowels:\n                j -= 1\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n        return ''.join(s)"}, {"task_id": "reverse-vowels-of-a-string", "completion": "class Solution(object):\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n        s = list(s)\n        i = 0\n        j = len(s) - 1\n        while i < j:\n            while i < j and s[i] not in vowels:\n                i += 1\n            while i < j and s[j] not in vowels:\n                j -= 1\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n        return ''.join(s)"}, {"task_id": "reverse-vowels-of-a-string", "completion": "class Solution(object):\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        vowels = set('aeiouAEIOU')\n        s = list(s)\n        i = 0\n        j = len(s) - 1\n        while i < j:\n            while i < j and s[i] not in vowels:\n                i += 1\n            while i < j and s[j] not in vowels:\n                j -= 1\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n        return ''.join(s)"}, {"task_id": "reverse-vowels-of-a-string", "completion": "class Solution(object):\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n        s = list(s)\n        i = 0\n        j = len(s) - 1\n        while i < j:\n            while i < j and s[i] not in vowels:\n                i += 1\n            while i < j and s[j] not in vowels:\n                j -= 1\n            if i < j:\n                s[i], s[j] = s[j], s[i]\n                i += 1\n                j -= 1\n        return ''.join(s)"}, {"task_id": "reverse-vowels-of-a-string", "completion": "class Solution(object):\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        vowels = set('aeiouAEIOU')\n        s = list(s)\n        i = 0\n        j = len(s) - 1\n        while i < j:\n            while i < j and s[i] not in vowels:\n                i += 1\n            while i < j and s[j] not in vowels:\n                j -= 1\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n        return ''.join(s)"}], "longest-consecutive-sequence": [{"task_id": "longest-consecutive-sequence", "completion": "class Solution(object):\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # M1. \u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u6267\u884c\u7528\u65f6 : 108 ms\n        # \u5185\u5b58\u6d88\u8017 : 14.9 MB\n        nums = set(nums)\n        max_len = 0\n        for num in nums:\n            if num - 1 not in nums:\n                cur_len = 1\n                while num + 1 in nums:\n                    num += 1\n                    cur_len += 1\n                max_len = max(max_len, cur_len)\n        return max_len"}, {"task_id": "longest-consecutive-sequence", "completion": "class Solution(object):\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # M1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u51fa\u6700\u957f\u7684\u8fde\u7eed\u5e8f\u5217\uff0c\u904d\u5386\u6570\u7ec4\uff0c\u5224\u65ad\u6bcf\u4e2a\u6570\u662f\u5426\u5728\u8fde\u7eed\u5e8f\u5217\u4e2d\uff0c\u5982\u679c\u5728\uff0c\u5219\u66f4\u65b0\u6700\u957f\u8fde\u7eed\u5e8f\u5217\u957f\u5ea6\n        # \u5982\u679c\u4e0d\u5728\uff0c\u5219\u5224\u65ad\u8be5\u6570\u662f\u5426\u4e3a\u8fde\u7eed\u5e8f\u5217\u7684\u8d77\u70b9\uff0c\u5982\u679c\u662f\uff0c\u5219\u66f4\u65b0\u6700\u957f\u8fde\u7eed\u5e8f\u5217\u957f\u5ea6\n        # \u5982\u679c\u4e0d\u662f\uff0c\u5219\u5224\u65ad\u8be5\u6570\u662f\u5426\u4e3a\u8fde\u7eed\u5e8f\u5217\u7684\u7ec8\u70b9\uff0c\u5982\u679c\u662f\uff0c\u5219\u66f4\u65b0\u6700\u957f\u8fde\u7eed\u5e8f\u5217\u957f\u5ea6\n        # \u5982\u679c\u4e0d\u662f\uff0c\u5219\u5224\u65ad\u8be5\u6570\u662f\u5426\u4e3a\u8fde\u7eed\u5e8f\u5217\u7684\u4e2d\u95f4\u6570\uff0c\u5982\u679c\u662f\uff0c\u5219\u66f4\u65b0\u6700\u957f\u8fde\u7eed\u5e8f\u5217\u957f\u5ea6\n        # \u5982\u679c\u4e0d\u662f\uff0c\u5219\u5224\u65ad\u8be5\u6570\u662f\u5426\u4e3a\u8fde\u7eed\u5e8f\u5217\u7684\u8d77\u70b9\uff0c\u5982\u679c\u662f\uff0c\u5219\u66f4\u65b0\u6700\u957f\u8fde\u7eed\u5e8f\u5217\u957f\u5ea6\n        # \u5982\u679c\u4e0d\u662f\uff0c\u5219\u5224\u65ad\u8be5\u6570\u662f\u5426\u4e3a\u8fde\u7eed\u5e8f\u5217\u7684\u7ec8\u70b9\uff0c\u5982\u679c\u662f\uff0c\u5219\u66f4\u65b0\u6700\u957f\u8fde\u7eed\u5e8f\u5217\u957f\u5ea6\n        # \u5982\u679c\u4e0d\u662f\uff0c\u5219\u5224\u65ad\u8be5\u6570\u662f\u5426\u4e3a\u8fde\u7eed\u5e8f\u5217\u7684\u4e2d\u95f4\u6570\uff0c\u5982\u679c\u662f\uff0c\u5219\u66f4\u65b0\u6700\u957f\u8fde\u7eed\u5e8f\u5217\u957f\u5ea6\n        # \u5982\u679c\u4e0d\u662f\uff0c\u5219\u5224\u65ad\u8be5\u6570\u662f\u5426\u4e3a\u8fde\u7eed\u5e8f\u5217\u7684\u8d77\u70b9\uff0c\u5982\u679c\u662f\uff0c\u5219\u66f4\u65b0\u6700\u957f\u8fde\u7eed\u5e8f\u5217\u957f\u5ea6\n        # \u5982\u679c\u4e0d\u662f\uff0c\u5219\u5224\u65ad\u8be5\u6570\u662f\u5426\u4e3a\u8fde\u7eed\u5e8f\u5217\u7684\u7ec8\u70b9\uff0c\u5982\u679c\u662f\uff0c\u5219\u66f4\u65b0\u6700\u957f\u8fde\u7eed\u5e8f\u5217\u957f\u5ea6\n        # \u5982\u679c\u4e0d\u662f\uff0c\u5219\u5224\u65ad\u8be5\u6570\u662f\u5426\u4e3a\u8fde\u7eed\u5e8f\u5217\u7684\u4e2d\u95f4\u6570\uff0c\u5982\u679c\u662f\uff0c\u5219\u66f4\u65b0\u6700\u957f\u8fde\u7eed\u5e8f\u5217\u957f\u5ea6\n        # \u5982\u679c\u4e0d\u662f\uff0c\u5219\u5224\u65ad\u8be5\u6570\u662f\u5426\u4e3a\u8fde\u7eed\u5e8f\u5217\u7684\u8d77\u70b9\uff0c\u5982\u679c\u662f\uff0c\u5219\u66f4\u65b0\u6700\u957f\u8fde\u7eed\u5e8f\u5217\u957f\u5ea6\n        # \u5982\u679c\u4e0d\u662f\uff0c\u5219\u5224\u65ad\u8be5\u6570\u662f\u5426\u4e3a\u8fde\u7eed\u5e8f\u5217\u7684\u7ec8\u70b9\uff0c\u5982\u679c\u662f\uff0c\u5219\u66f4\u65b0\u6700\u957f\u8fde\u7eed\u5e8f\u5217\u957f\u5ea6\n        # \u5982\u679c\u4e0d\u662f\uff0c\u5219\u5224\u65ad\u8be5\u6570\u662f\u5426\u4e3a\u8fde\u7eed\u5e8f\u5217\u7684\u4e2d\u95f4\u6570\uff0c\u5982\u679c\u662f\uff0c\u5219\u66f4\u65b0\u6700\u957f\u8fde\u7eed\u5e8f\u5217\u957f\u5ea6\n        # \u5982\u679c\u4e0d\u662f\uff0c\u5219\u5224\u65ad\u8be5\u6570\u662f\u5426\u4e3a\u8fde\u7eed\u5e8f\u5217\u7684\u8d77\u70b9\uff0c\u5982\u679c\u662f\uff0c\u5219\u66f4\u65b0\u6700\u957f\u8fde\u7eed\u5e8f\u5217\u957f\u5ea6\n        # \u5982\u679c\u4e0d\u662f\uff0c\u5219\u5224\u65ad\u8be5\u6570\u662f\u5426\u4e3a\u8fde\u7eed\u5e8f\u5217\u7684\u7ec8\u70b9\uff0c\u5982\u679c\u662f\uff0c\u5219\u66f4\u65b0\u6700\u957f\u8fde\u7eed\u5e8f\u5217\u957f\u5ea6\n        # \u5982\u679c\u4e0d\u662f\uff0c\u5219\u5224\u65ad\u8be5\u6570\u662f\u5426\u4e3a\u8fde\u7eed\u5e8f\u5217\u7684\u4e2d\u95f4\u6570\uff0c\u5982\u679c\u662f\uff0c\u5219\u66f4\u65b0\u6700\u957f\u8fde\u7eed\u5e8f\u5217\u957f\u5ea6\n        # \u5982\u679c\u4e0d\u662f\uff0c\u5219\u5224\u65ad\u8be5\u6570\u662f\u5426\u4e3a\u8fde\u7eed\u5e8f\u5217\u7684\u8d77\u70b9\uff0c\u5982\u679c\u662f\uff0c\u5219\u66f4\u65b0\u6700\u957f\u8fde\u7eed\u5e8f\u5217\u957f\u5ea6\n        # \u5982\u679c\u4e0d\u662f\uff0c\u5219\u5224\u65ad\u8be5\u6570\u662f\u5426\u4e3a\u8fde\u7eed\u5e8f\u5217\u7684\u7ec8\u70b9\uff0c\u5982\u679c\u662f\uff0c\u5219\u66f4\u65b0\u6700\u957f\u8fde\u7eed\u5e8f\u5217\u957f\u5ea6\n        # \u5982\u679c\u4e0d\u662f\uff0c\u5219\u5224\u65ad\u8be5\u6570\u662f\u5426\u4e3a\u8fde\u7eed\u5e8f\u5217\u7684\u4e2d\u95f4\u6570\uff0c\u5982\u679c\u662f\uff0c\u5219\u66f4\u65b0\u6700\u957f\u8fde\u7eed\u5e8f\u5217\u957f\u5ea6\n        # \u5982\u679c\u4e0d\u662f\uff0c\u5219\u5224\u65ad\u8be5\u6570\u662f\u5426\u4e3a\u8fde\u7eed\u5e8f\u5217\u7684\u8d77\u70b9\uff0c\u5982\u679c\u662f\uff0c\u5219\u66f4\u65b0\u6700\u957f\u8fde\u7eed\u5e8f\u5217\u957f\u5ea6\n        # \u5982\u679c\u4e0d\u662f\uff0c\u5219\u5224\u65ad\u8be5\u6570\u662f\u5426\u4e3a\u8fde\u7eed\u5e8f\u5217\u7684\u7ec8\u70b9\uff0c\u5982\u679c\u662f\uff0c\u5219\u66f4\u65b0\u6700\u957f\u8fde\u7eed\u5e8f\u5217\u957f\u5ea6\n        # \u5982\u679c\u4e0d\u662f\uff0c\u5219\u5224\u65ad\u8be5\u6570\u662f\u5426\u4e3a\u8fde"}, {"task_id": "longest-consecutive-sequence", "completion": "class Solution(object):\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # M1. \u66b4\u529b\u89e3\u6cd5\n        # \u679a\u4e3e\u6bcf\u4e2a\u6570\u5b57\uff0c\u627e\u51fa\u5176\u8fde\u7eed\u7684\u6700\u957f\u5e8f\u5217\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a124 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237\n        # \n        # \u6267\u884c\u7528\u65f6\uff1a124 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237\n\n        # res = 0\n        # for i in range(len(nums)):\n        #     cur = nums[i]\n        #     left = cur - 1\n        #     right = cur + 1\n        #     while left in nums:\n        #         cur += 1\n        #         left -= 1\n        #     while right in nums:\n        #         cur += 1\n        #         right += 1\n        #     res = max(res, cur - nums[i])\n        # return res\n\n        # M2. \u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6267\u884c\u7528\u65f6\uff1a124 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237\n\n        # \u54c8\u5e0c\u8868\u5b58\u50a8\u6bcf\u4e2a\u6570\u5b57\u7684\u524d\u9a71\u548c\u540e\u7ee7\n        # \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u524d\u9a71\u6216\u540e\u7ee7\u4e0d\u5b58\u5728\uff0c\u5219\u5c06\u5176\u52a0\u5165\u54c8\u5e0c\u8868\n        # \u5982\u679c\u524d\u9a71\u6216\u540e\u7ee7\u5b58\u5728\uff0c\u5219\u5c06\u5176\u503c\u52a01\n        # \u6700\u540e\u904d\u5386\u54c8\u5e0c\u8868\uff0c\u627e\u51fa\u6700\u5927\u503c\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6267\u884c\u7528\u65f6\uff1a124 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237\n\n        # \u54c8\u5e0c\u8868\u5b58\u50a8\u6bcf\u4e2a\u6570\u5b57\u7684\u524d\u9a71\u548c\u540e\u7ee7\n        # \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u524d\u9a71\u6216\u540e\u7ee7\u4e0d\u5b58\u5728\uff0c\u5219\u5c06\u5176\u52a0\u5165\u54c8\u5e0c\u8868\n        # \u5982\u679c\u524d\u9a71\u6216\u540e\u7ee7\u5b58\u5728\uff0c\u5219\u5c06\u5176\u503c\u52a01\n        # \u6700\u540e\u904d\u5386\u54c8\u5e0c\u8868\uff0c\u627e\u51fa\u6700\u5927\u503c\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6267\u884c\u7528\u65f6\uff1a124 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237\n\n        # \u54c8\u5e0c\u8868\u5b58\u50a8\u6bcf\u4e2a\u6570\u5b57\u7684\u524d\u9a71\u548c\u540e\u7ee7\n        # \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u524d\u9a71\u6216\u540e\u7ee7\u4e0d\u5b58\u5728\uff0c\u5219\u5c06\u5176\u52a0\u5165\u54c8\u5e0c\u8868\n        # \u5982\u679c\u524d\u9a71\u6216\u540e\u7ee7\u5b58\u5728\uff0c\u5219"}, {"task_id": "longest-consecutive-sequence", "completion": "class Solution(object):\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # M1. \u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 14.9 MB\n        nums = set(nums)\n        max_len = 0\n        for num in nums:\n            if num - 1 not in nums:\n                cur_len = 1\n                while num + 1 in nums:\n                    cur_len += 1\n                    num += 1\n                max_len = max(max_len, cur_len)\n        return max_len\n        \n        # M2. \u54c8\u5e0c\u8868 + \u53cc\u6307\u9488\n        # \u65f6\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6: O(1)\n        # \u6267\u884c\u7528\u65f6 : 64 ms\n        # \u5185\u5b58\u6d88\u8017 : 14.8 MB\n        nums = set(nums)\n        max_len = 0\n        for num in nums:\n            if num - 1 not in nums:\n                cur_len = 1\n                while num + 1 in nums:\n                    cur_len += 1\n                    num += 1\n                max_len = max(max_len, cur_len)\n        return max_len\n        \n        # M3. \u54c8\u5e0c\u8868 + \u53cc\u6307\u9488\n        # \u65f6\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6: O(1)\n        # \u6267\u884c\u7528\u65f6 : 64 ms\n        # \u5185\u5b58\u6d88\u8017 : 14.8 MB\n        nums = set(nums)\n        max_len = 0\n        for num in nums:\n            if num - 1 not in nums:\n                cur_len = 1\n                while num + 1 in nums:\n                    cur_len += 1\n                    num += 1\n                max_len = max(max_len, cur_len)\n        return max_len\n        \n        # M4. \u54c8\u5e0c\u8868 + \u53cc\u6307\u9488\n        # \u65f6\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6: O(1)\n        # \u6267\u884c\u7528\u65f6 : 64 ms\n        # \u5185\u5b58\u6d88\u8017 : 14.8 MB\n        nums = set(nums)\n        max_len = 0\n        for num in nums:\n            if num - 1 not in nums:\n                cur_len = 1\n                while num + 1 in nums:\n                    cur_len += 1\n                    num += 1\n                max_len = max(max_len, cur_len)\n        return max_len\n        \n        # M5. \u54c8\u5e0c\u8868 + \u53cc\u6307\u9488\n        # \u65f6\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6: O(1)\n        # \u6267\u884c\u7528\u65f6 : 64 ms\n        # \u5185\u5b58\u6d88\u8017 : 14.8 MB\n        nums = set(nums)\n        max_len = 0\n        for num in nums:\n            if num - 1 not in nums:\n                cur_len = 1\n                while num + 1 in nums:\n                    cur_len += 1\n                    num += 1\n                max_len = max(max_len, cur_len)\n        return max_len\n        \n        # M6. \u54c8\u5e0c\u8868 + \u53cc\u6307\u9488\n        # \u65f6\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6: O(1)\n        # \u6267\u884c\u7528\u65f6 : 64 ms\n        # \u5185\u5b58\u6d88\u8017 : 14.8 MB\n        nums = set(nums)\n        max_len = 0\n        for num in nums:\n            if num - 1 not in nums:\n                cur_len = 1"}, {"task_id": "longest-consecutive-sequence", "completion": "class Solution(object):\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # M1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u51fa\u6700\u957f\u7684\u8fde\u7eed\u5e8f\u5217\uff0c\u66b4\u529b\u89e3\u6cd5\u662f\u679a\u4e3e\u6bcf\u4e2a\u6570\u5b57\uff0c\u7136\u540e\u627e\u51fa\u5b83\u7684\u8fde\u7eed\u5e8f\u5217\uff0c\u6700\u540e\u627e\u51fa\u6700\u957f\u7684\u8fde\u7eed\u5e8f\u5217\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u66f4\u65b0\u6700\u957f\u8fde\u7eed\u5e8f\u5217\u7684\u957f\u5ea6\n        # \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u5c31\u7ee7\u7eed\u679a\u4e3e\u4e0b\u4e00\u4e2a\u6570\u5b57\n        # \u6700\u540e\u8fd4\u56de\u6700\u957f\u8fde\u7eed\u5e8f\u5217\u7684\u957f\u5ea6\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^2)\uff0c\u56e0\u4e3a\u679a\u4e3e\u6bcf\u4e2a\u6570\u5b57\u90fd\u8981\u627e\u51fa\u5b83\u7684\u8fde\u7eed\u5e8f\u5217\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n)\uff0c\u627e\u51fa\u6700\u957f\u8fde\u7eed\u5e8f\u5217\u7684\u957f\u5ea6\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n)\n        # \u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u53ea\u9700\u8981\u4e00\u4e2a\u53d8\u91cf\u6765\u8bb0\u5f55\u6700\u957f\u8fde\u7eed\u5e8f\u5217\u7684\u957f\u5ea6\n        # \u56e0\u4e3a\u53ea\u9700\u8981\u4e00\u4e2a\u53d8\u91cf\uff0c\u6240\u4ee5\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(1)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(1)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^2)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(1)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^2)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(1)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^2)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(1)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^2)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(1)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^2)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(1)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^2)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(1)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^2)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(1)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^2)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(1)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^2)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(1)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^2)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(1)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^2)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(1)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^2)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(1)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^2)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(1)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^2)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(1)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d"}], "missing-number": [{"task_id": "missing-number", "completion": "class Solution(object):\n    def missingNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        # 2. \u904d\u5386\n        # 3. \u5f02\u6216\n        # 4. \u5f02\u6216\u7684\u6027\u8d28\n        # 5. \u5f02\u6216\u7684\u6027\u8d28\n        # 6. \u5f02\u6216\u7684\u6027\u8d28\n        # 7. \u5f02\u6216\u7684\u6027\u8d28\n        # 8. \u5f02\u6216\u7684\u6027\u8d28\n        # 9. \u5f02\u6216\u7684\u6027\u8d28\n        # 10. \u5f02\u6216\u7684\u6027\u8d28\n        # 11. \u5f02\u6216\u7684\u6027\u8d28\n        # 12. \u5f02\u6216\u7684\u6027\u8d28\n        # 13. \u5f02\u6216\u7684\u6027\u8d28\n        # 14. \u5f02\u6216\u7684\u6027\u8d28\n        # 15. \u5f02\u6216\u7684\u6027\u8d28\n        # 16. \u5f02\u6216\u7684\u6027\u8d28\n        # 17. \u5f02\u6216\u7684\u6027\u8d28\n        # 18. \u5f02\u6216\u7684\u6027\u8d28\n        # 19. \u5f02\u6216\u7684\u6027\u8d28\n        # 20. \u5f02\u6216\u7684\u6027\u8d28\n        # 21. \u5f02\u6216\u7684\u6027\u8d28\n        # 22. \u5f02\u6216\u7684\u6027\u8d28\n        # 23. \u5f02\u6216\u7684\u6027\u8d28\n        # 24. \u5f02\u6216\u7684\u6027\u8d28\n        # 25. \u5f02\u6216\u7684\u6027\u8d28\n        # 26. \u5f02\u6216\u7684\u6027\u8d28\n        # 27. \u5f02\u6216\u7684\u6027\u8d28\n        # 28. \u5f02\u6216\u7684\u6027\u8d28\n        # 29. \u5f02\u6216\u7684\u6027\u8d28\n        # 30. \u5f02\u6216\u7684\u6027\u8d28\n        # 31. \u5f02\u6216\u7684\u6027\u8d28\n        # 32. \u5f02\u6216\u7684\u6027\u8d28\n        # 33. \u5f02\u6216\u7684\u6027\u8d28\n        # 34. \u5f02\u6216\u7684\u6027\u8d28\n        # 35. \u5f02\u6216\u7684\u6027\u8d28\n        # 36. \u5f02\u6216\u7684\u6027\u8d28\n        # 37. \u5f02\u6216\u7684\u6027\u8d28\n        # 38. \u5f02\u6216\u7684\u6027\u8d28\n        # 39. \u5f02\u6216\u7684\u6027\u8d28\n        # 40. \u5f02\u6216\u7684\u6027\u8d28\n        # 41. \u5f02\u6216\u7684\u6027\u8d28\n        # 42. \u5f02\u6216\u7684\u6027\u8d28\n        # 43. \u5f02\u6216\u7684\u6027\u8d28\n        # 44. \u5f02\u6216\u7684\u6027\u8d28\n        # 45. \u5f02\u6216\u7684\u6027\u8d28\n        # 46. \u5f02\u6216\u7684\u6027\u8d28\n        # 47. \u5f02\u6216\u7684\u6027\u8d28\n        # 48. \u5f02\u6216\u7684\u6027\u8d28\n        # 49. \u5f02\u6216\u7684\u6027\u8d28\n        # 50. \u5f02\u6216\u7684\u6027\u8d28\n        # 51. \u5f02\u6216\u7684\u6027\u8d28\n        # 52. \u5f02\u6216\u7684\u6027\u8d28\n        # 53. \u5f02\u6216\u7684\u6027\u8d28\n        # 54. \u5f02\u6216\u7684\u6027\u8d28\n        # 55. \u5f02\u6216\u7684\u6027\u8d28\n        # 56. \u5f02\u6216\u7684\u6027\u8d28\n        # 57. \u5f02\u6216\u7684\u6027\u8d28\n        # 58. \u5f02\u6216\u7684\u6027\u8d28\n        # 59. \u5f02\u6216\u7684\u6027\u8d28\n        # 60. \u5f02\u6216\u7684\u6027\u8d28\n        # 61. \u5f02\u6216\u7684\u6027\u8d28\n        # 62. \ufffd\ufffd"}, {"task_id": "missing-number", "completion": "class Solution(object):\n    def missingNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        # 2. \u904d\u5386\n        # 3. \u5f02\u6216\n        # 4. \u5f02\u6216\u7684\u6027\u8d28\n        # 5. \u5f02\u6216\u7684\u6027\u8d28\n        # 6. \u5f02\u6216\u7684\u6027\u8d28\n        # 7. \u5f02\u6216\u7684\u6027\u8d28\n        # 8. \u5f02\u6216\u7684\u6027\u8d28\n        # 9. \u5f02\u6216\u7684\u6027\u8d28\n        # 10. \u5f02\u6216\u7684\u6027\u8d28\n        # 11. \u5f02\u6216\u7684\u6027\u8d28\n        # 12. \u5f02\u6216\u7684\u6027\u8d28\n        # 13. \u5f02\u6216\u7684\u6027\u8d28\n        # 14. \u5f02\u6216\u7684\u6027\u8d28\n        # 15. \u5f02\u6216\u7684\u6027\u8d28\n        # 16. \u5f02\u6216\u7684\u6027\u8d28\n        # 17. \u5f02\u6216\u7684\u6027\u8d28\n        # 18. \u5f02\u6216\u7684\u6027\u8d28\n        # 19. \u5f02\u6216\u7684\u6027\u8d28\n        # 20. \u5f02\u6216\u7684\u6027\u8d28\n        # 21. \u5f02\u6216\u7684\u6027\u8d28\n        # 22. \u5f02\u6216\u7684\u6027\u8d28\n        # 23. \u5f02\u6216\u7684\u6027\u8d28\n        # 24. \u5f02\u6216\u7684\u6027\u8d28\n        # 25. \u5f02\u6216\u7684\u6027\u8d28\n        # 26. \u5f02\u6216\u7684\u6027\u8d28\n        # 27. \u5f02\u6216\u7684\u6027\u8d28\n        # 28. \u5f02\u6216\u7684\u6027\u8d28\n        # 29. \u5f02\u6216\u7684\u6027\u8d28\n        # 30. \u5f02\u6216\u7684\u6027\u8d28\n        # 31. \u5f02\u6216\u7684\u6027\u8d28\n        # 32. \u5f02\u6216\u7684\u6027\u8d28\n        # 33. \u5f02\u6216\u7684\u6027\u8d28\n        # 34. \u5f02\u6216\u7684\u6027\u8d28\n        # 35. \u5f02\u6216\u7684\u6027\u8d28\n        # 36. \u5f02\u6216\u7684\u6027\u8d28\n        # 37. \u5f02\u6216\u7684\u6027\u8d28\n        # 38. \u5f02\u6216\u7684\u6027\u8d28\n        # 39. \u5f02\u6216\u7684\u6027\u8d28\n        # 40. \u5f02\u6216\u7684\u6027\u8d28\n        # 41. \u5f02\u6216\u7684\u6027\u8d28\n        # 42. \u5f02\u6216\u7684\u6027\u8d28\n        # 43. \u5f02\u6216\u7684\u6027\u8d28\n        # 44. \u5f02\u6216\u7684\u6027\u8d28\n        # 45. \u5f02\u6216\u7684\u6027\u8d28\n        # 46. \u5f02\u6216\u7684\u6027\u8d28\n        # 47. \u5f02\u6216\u7684\u6027\u8d28\n        # 48. \u5f02\u6216\u7684\u6027\u8d28\n        # 49. \u5f02\u6216\u7684\u6027\u8d28\n        # 50. \u5f02\u6216\u7684\u6027\u8d28\n        # 51. \u5f02\u6216\u7684\u6027\u8d28\n        # 52. \u5f02\u6216\u7684\u6027\u8d28\n        # 53. \u5f02\u6216\u7684\u6027\u8d28\n        # 54. \u5f02\u6216\u7684\u6027\u8d28\n        # 55. \u5f02\u6216\u7684\u6027\u8d28\n        # 56. \u5f02\u6216\u7684\u6027\u8d28\n        # 57. \u5f02\u6216\u7684\u6027\u8d28\n        # 58. \u5f02\u6216\u7684\u6027\u8d28\n        # 59. \u5f02\u6216\u7684\u6027\u8d28\n        # 60. \u5f02\u6216\u7684\u6027\u8d28\n        # 61. \u5f02\u6216\u7684\u6027\u8d28\n        # 62. \ufffd\ufffd"}, {"task_id": "missing-number", "completion": "class Solution(object):\n    def missingNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        # 2. \u904d\u5386\n        # 3. \u5f02\u6216\n        # 4. \u5f02\u6216\u7684\u6027\u8d28\n        # 5. \u5f02\u6216\u7684\u6027\u8d28\n        # 6. \u5f02\u6216\u7684\u6027\u8d28\n        # 7. \u5f02\u6216\u7684\u6027\u8d28\n        # 8. \u5f02\u6216\u7684\u6027\u8d28\n        # 9. \u5f02\u6216\u7684\u6027\u8d28\n        # 10. \u5f02\u6216\u7684\u6027\u8d28\n        # 11. \u5f02\u6216\u7684\u6027\u8d28\n        # 12. \u5f02\u6216\u7684\u6027\u8d28\n        # 13. \u5f02\u6216\u7684\u6027\u8d28\n        # 14. \u5f02\u6216\u7684\u6027\u8d28\n        # 15. \u5f02\u6216\u7684\u6027\u8d28\n        # 16. \u5f02\u6216\u7684\u6027\u8d28\n        # 17. \u5f02\u6216\u7684\u6027\u8d28\n        # 18. \u5f02\u6216\u7684\u6027\u8d28\n        # 19. \u5f02\u6216\u7684\u6027\u8d28\n        # 20. \u5f02\u6216\u7684\u6027\u8d28\n        # 21. \u5f02\u6216\u7684\u6027\u8d28\n        # 22. \u5f02\u6216\u7684\u6027\u8d28\n        # 23. \u5f02\u6216\u7684\u6027\u8d28\n        # 24. \u5f02\u6216\u7684\u6027\u8d28\n        # 25. \u5f02\u6216\u7684\u6027\u8d28\n        # 26. \u5f02\u6216\u7684\u6027\u8d28\n        # 27. \u5f02\u6216\u7684\u6027\u8d28\n        # 28. \u5f02\u6216\u7684\u6027\u8d28\n        # 29. \u5f02\u6216\u7684\u6027\u8d28\n        # 30. \u5f02\u6216\u7684\u6027\u8d28\n        # 31. \u5f02\u6216\u7684\u6027\u8d28\n        # 32. \u5f02\u6216\u7684\u6027\u8d28\n        # 33. \u5f02\u6216\u7684\u6027\u8d28\n        # 34. \u5f02\u6216\u7684\u6027\u8d28\n        # 35. \u5f02\u6216\u7684\u6027\u8d28\n        # 36. \u5f02\u6216\u7684\u6027\u8d28\n        # 37. \u5f02\u6216\u7684\u6027\u8d28\n        # 38. \u5f02\u6216\u7684\u6027\u8d28\n        # 39. \u5f02\u6216\u7684\u6027\u8d28\n        # 40. \u5f02\u6216\u7684\u6027\u8d28\n        # 41. \u5f02\u6216\u7684\u6027\u8d28\n        # 42. \u5f02\u6216\u7684\u6027\u8d28\n        # 43. \u5f02\u6216\u7684\u6027\u8d28\n        # 44. \u5f02\u6216\u7684\u6027\u8d28\n        # 45. \u5f02\u6216\u7684\u6027\u8d28\n        # 46. \u5f02\u6216\u7684\u6027\u8d28\n        # 47. \u5f02\u6216\u7684\u6027\u8d28\n        # 48. \u5f02\u6216\u7684\u6027\u8d28\n        # 49. \u5f02\u6216\u7684\u6027\u8d28\n        # 50. \u5f02\u6216\u7684\u6027\u8d28\n        # 51. \u5f02\u6216\u7684\u6027\u8d28\n        # 52. \u5f02\u6216\u7684\u6027\u8d28\n        # 53. \u5f02\u6216\u7684\u6027\u8d28\n        # 54. \u5f02\u6216\u7684\u6027\u8d28\n        # 55. \u5f02\u6216\u7684\u6027\u8d28\n        # 56. \u5f02\u6216\u7684\u6027\u8d28\n        # 57. \u5f02\u6216\u7684\u6027\u8d28\n        # 58. \u5f02\u6216\u7684\u6027\u8d28\n        # 59. \u5f02\u6216\u7684\u6027\u8d28\n        # 60. \u5f02\u6216\u7684\u6027\u8d28\n        # 61. \u5f02\u6216\u7684\u6027\u8d28\n        # 62. \ufffd\ufffd"}, {"task_id": "missing-number", "completion": "class Solution(object):\n    def missingNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        # 2. \u904d\u5386\n        # 3. \u5f02\u6216\n        # 4. \u5f02\u6216\n        # 5. \u5f02\u6216\n        # 6. \u5f02\u6216\n        # 7. \u5f02\u6216\n        # 8. \u5f02\u6216\n        # 9. \u5f02\u6216\n        # 10. \u5f02\u6216\n        # 11. \u5f02\u6216\n        # 12. \u5f02\u6216\n        # 13. \u5f02\u6216\n        # 14. \u5f02\u6216\n        # 15. \u5f02\u6216\n        # 16. \u5f02\u6216\n        # 17. \u5f02\u6216\n        # 18. \u5f02\u6216\n        # 19. \u5f02\u6216\n        # 20. \u5f02\u6216\n        # 21. \u5f02\u6216\n        # 22. \u5f02\u6216\n        # 23. \u5f02\u6216\n        # 24. \u5f02\u6216\n        # 25. \u5f02\u6216\n        # 26. \u5f02\u6216\n        # 27. \u5f02\u6216\n        # 28. \u5f02\u6216\n        # 29. \u5f02\u6216\n        # 30. \u5f02\u6216\n        # 31. \u5f02\u6216\n        # 32. \u5f02\u6216\n        # 33. \u5f02\u6216\n        # 34. \u5f02\u6216\n        # 35. \u5f02\u6216\n        # 36. \u5f02\u6216\n        # 37. \u5f02\u6216\n        # 38. \u5f02\u6216\n        # 39. \u5f02\u6216\n        # 40. \u5f02\u6216\n        # 41. \u5f02\u6216\n        # 42. \u5f02\u6216\n        # 43. \u5f02\u6216\n        # 44. \u5f02\u6216\n        # 45. \u5f02\u6216\n        # 46. \u5f02\u6216\n        # 47. \u5f02\u6216\n        # 48. \u5f02\u6216\n        # 49. \u5f02\u6216\n        # 50. \u5f02\u6216\n        # 51. \u5f02\u6216\n        # 52. \u5f02\u6216\n        # 53. \u5f02\u6216\n        # 54. \u5f02\u6216\n        # 55. \u5f02\u6216\n        # 56. \u5f02\u6216\n        # 57. \u5f02\u6216\n        # 58. \u5f02\u6216\n        # 59. \u5f02\u6216\n        # 60. \u5f02\u6216\n        # 61. \u5f02\u6216\n        # 62. \u5f02\u6216\n        # 63. \u5f02\u6216\n        # 64. \u5f02\u6216\n        # 65. \u5f02\u6216\n        # 66. \u5f02\u6216\n        # 67. \u5f02\u6216\n        # 68. \u5f02\u6216\n        # 69. \u5f02\u6216\n        # 70. \u5f02\u6216\n        # 71. \u5f02\u6216\n        # 72. \u5f02\u6216\n        # 73. \u5f02\u6216\n        # 74. \u5f02\u6216\n        # 75. \u5f02\u6216\n        # 76. \u5f02\u6216\n        # 77. \u5f02\u6216\n        # 78. \u5f02\u6216\n        # 79. \u5f02\u6216\n        # 80. \u5f02\u6216\n        # 81. \u5f02\u6216\n        # 82. \u5f02\u6216\n        # 83. \u5f02\u6216\n        # 84. \u5f02\u6216\n        # 85. \u5f02\u6216\n        # 86. \u5f02\u6216"}, {"task_id": "missing-number", "completion": "class Solution(object):\n    def missingNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        # 2. \u904d\u5386\n        # 3. \u5f02\u6216\n        # 4. \u5f02\u6216\u7684\u6027\u8d28\n        # 5. \u5f02\u6216\u7684\u6027\u8d28\n        # 6. \u5f02\u6216\u7684\u6027\u8d28\n        # 7. \u5f02\u6216\u7684\u6027\u8d28\n        # 8. \u5f02\u6216\u7684\u6027\u8d28\n        # 9. \u5f02\u6216\u7684\u6027\u8d28\n        # 10. \u5f02\u6216\u7684\u6027\u8d28\n        # 11. \u5f02\u6216\u7684\u6027\u8d28\n        # 12. \u5f02\u6216\u7684\u6027\u8d28\n        # 13. \u5f02\u6216\u7684\u6027\u8d28\n        # 14. \u5f02\u6216\u7684\u6027\u8d28\n        # 15. \u5f02\u6216\u7684\u6027\u8d28\n        # 16. \u5f02\u6216\u7684\u6027\u8d28\n        # 17. \u5f02\u6216\u7684\u6027\u8d28\n        # 18. \u5f02\u6216\u7684\u6027\u8d28\n        # 19. \u5f02\u6216\u7684\u6027\u8d28\n        # 20. \u5f02\u6216\u7684\u6027\u8d28\n        # 21. \u5f02\u6216\u7684\u6027\u8d28\n        # 22. \u5f02\u6216\u7684\u6027\u8d28\n        # 23. \u5f02\u6216\u7684\u6027\u8d28\n        # 24. \u5f02\u6216\u7684\u6027\u8d28\n        # 25. \u5f02\u6216\u7684\u6027\u8d28\n        # 26. \u5f02\u6216\u7684\u6027\u8d28\n        # 27. \u5f02\u6216\u7684\u6027\u8d28\n        # 28. \u5f02\u6216\u7684\u6027\u8d28\n        # 29. \u5f02\u6216\u7684\u6027\u8d28\n        # 30. \u5f02\u6216\u7684\u6027\u8d28\n        # 31. \u5f02\u6216\u7684\u6027\u8d28\n        # 32. \u5f02\u6216\u7684\u6027\u8d28\n        # 33. \u5f02\u6216\u7684\u6027\u8d28\n        # 34. \u5f02\u6216\u7684\u6027\u8d28\n        # 35. \u5f02\u6216\u7684\u6027\u8d28\n        # 36. \u5f02\u6216\u7684\u6027\u8d28\n        # 37. \u5f02\u6216\u7684\u6027\u8d28\n        # 38. \u5f02\u6216\u7684\u6027\u8d28\n        # 39. \u5f02\u6216\u7684\u6027\u8d28\n        # 40. \u5f02\u6216\u7684\u6027\u8d28\n        # 41. \u5f02\u6216\u7684\u6027\u8d28\n        # 42. \u5f02\u6216\u7684\u6027\u8d28\n        # 43. \u5f02\u6216\u7684\u6027\u8d28\n        # 44. \u5f02\u6216\u7684\u6027\u8d28\n        # 45. \u5f02\u6216\u7684\u6027\u8d28\n        # 46. \u5f02\u6216\u7684\u6027\u8d28\n        # 47. \u5f02\u6216\u7684\u6027\u8d28\n        # 48. \u5f02\u6216\u7684\u6027\u8d28\n        # 49. \u5f02\u6216\u7684\u6027\u8d28\n        # 50. \u5f02\u6216\u7684\u6027\u8d28\n        # 51. \u5f02\u6216\u7684\u6027\u8d28\n        # 52. \u5f02\u6216\u7684\u6027\u8d28\n        # 53. \u5f02\u6216\u7684\u6027\u8d28\n        # 54. \u5f02\u6216\u7684\u6027\u8d28\n        # 55. \u5f02\u6216\u7684\u6027\u8d28\n        # 56. \u5f02\u6216\u7684\u6027\u8d28\n        # 57. \u5f02\u6216\u7684\u6027\u8d28\n        # 58. \u5f02\u6216\u7684\u6027\u8d28\n        # 59. \u5f02\u6216\u7684\u6027\u8d28\n        # 60. \u5f02\u6216\u7684\u6027\u8d28\n        # 61. \u5f02\u6216\u7684\u6027\u8d28\n        # 62. \ufffd\ufffd"}], "word-ladder": [{"task_id": "word-ladder", "completion": "class Solution(object):\n    def ladderLength(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6784\u5efa\u5b57\u5178\n        word_dict = {}\n        for word in wordList:\n            word_dict[word] = 1\n        \n        # 2. \u6784\u5efa\u961f\u5217\n        queue = []\n        queue.append(beginWord)\n        \n        # 3. \u6784\u5efa\u5b57\u5178\n        visited = {}\n        visited[beginWord] = 1\n        \n        # 4. \u6784\u5efa\u5b57\u5178\n        step = 1\n        while queue:\n            size = len(queue)\n            for i in range(size):\n                word = queue.pop(0)\n                for j in range(len(word)):\n                    for k in range(ord('a'), ord('z')+1):\n                        new_word = word[:j] + chr(k) + word[j+1:]\n                        if new_word == endWord:\n                            return step + 1\n                        if new_word in word_dict:\n                            if new_word not in visited:\n                                queue.append(new_word)\n                                visited[new_word] = 1\n                            else:\n                                continue\n            step += 1\n        return 0"}, {"task_id": "word-ladder", "completion": "class Solution(object):\n    def ladderLength(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u521d\u59cb\u5316\n        wordList = set(wordList)\n        if endWord not in wordList:\n            return 0\n        wordList.add(beginWord)\n        queue = collections.deque([beginWord])\n        visited = set()\n        visited.add(beginWord)\n        step = 1\n        \n        # 2. \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\n        while queue:\n            size = len(queue)\n            for _ in range(size):\n                word = queue.popleft()\n                for i in range(len(word)):\n                    for j in range(26):\n                        new_word = word[:i] + chr(ord('a') + j) + word[i+1:]\n                        if new_word == endWord:\n                            return step + 1\n                        if new_word in wordList and new_word not in visited:\n                            queue.append(new_word)\n                            visited.add(new_word)\n            step += 1\n        \n        return 0"}, {"task_id": "word-ladder", "completion": "class Solution(object):\n    def ladderLength(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u521d\u59cb\u5316\n        wordList = set(wordList)\n        if endWord not in wordList:\n            return 0\n        wordList.remove(beginWord)\n        queue = collections.deque([(beginWord, 1)])\n        visited = set([beginWord])\n        \n        # 2. \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\n        while queue:\n            word, level = queue.popleft()\n            for i in range(len(word)):\n                for j in range(ord('a'), ord('z')+1):\n                    new_word = word[:i] + chr(j) + word[i+1:]\n                    if new_word == endWord:\n                        return level + 1\n                    if new_word in wordList:\n                        queue.append((new_word, level+1))\n                        wordList.remove(new_word)\n                        visited.add(new_word)\n        \n        return 0"}, {"task_id": "word-ladder", "completion": "class Solution(object):\n    def ladderLength(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u521d\u59cb\u5316\n        wordList = set(wordList)\n        if endWord not in wordList:\n            return 0\n        wordList.add(beginWord)\n        queue = collections.deque([beginWord])\n        visited = set()\n        visited.add(beginWord)\n        step = 1\n        \n        # 2. \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\n        while queue:\n            size = len(queue)\n            for _ in range(size):\n                word = queue.popleft()\n                for i in range(len(word)):\n                    for j in range(26):\n                        new_word = word[:i] + chr(ord('a') + j) + word[i + 1:]\n                        if new_word == endWord:\n                            return step + 1\n                        if new_word in wordList and new_word not in visited:\n                            queue.append(new_word)\n                            visited.add(new_word)\n            step += 1\n        \n        return 0"}, {"task_id": "word-ladder", "completion": "class Solution(object):\n    def ladderLength(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u521d\u59cb\u5316\n        wordList = set(wordList)\n        if endWord not in wordList:\n            return 0\n        wordList.remove(beginWord)\n        wordList.add(endWord)\n        queue = collections.deque([beginWord])\n        visited = set([beginWord])\n        step = 1\n        \n        # 2. \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\n        while queue:\n            size = len(queue)\n            for _ in range(size):\n                word = queue.popleft()\n                for i in range(len(word)):\n                    for j in range(26):\n                        new_word = word[:i] + chr(ord('a') + j) + word[i + 1:]\n                        if new_word == endWord:\n                            return step + 1\n                        if new_word in wordList:\n                            queue.append(new_word)\n                            visited.add(new_word)\n                            wordList.remove(new_word)\n            step += 1\n        \n        # 3. \u7ed3\u679c\n        return 0"}], "add-binary": [{"task_id": "add-binary", "completion": "class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u5148\u8f6c\u6362\u6210\u6574\u6570\n        a = int(a, 2)\n        b = int(b, 2)\n        \n        # 2. \u6c42\u548c\n        sum = a + b\n        \n        # 3. \u8f6c\u6362\u6210\u4e8c\u8fdb\u5236\n        return bin(sum)[2:]"}, {"task_id": "add-binary", "completion": "class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u5148\u8f6c\u6362\u6210int\n        # 2. \u518d\u8f6c\u6362\u6210str\n        # 3. \u518d\u8f6c\u6362\u6210\u4e8c\u8fdb\u5236\n        # 4. \u518d\u8f6c\u6362\u6210str\n        # 5. \u518d\u8f6c\u6362\u6210int\n        # 6. \u518d\u8f6c\u6362\u6210str\n        # 7. \u518d\u8f6c\u6362\u6210\u4e8c\u8fdb\u5236\n        # 8. \u518d\u8f6c\u6362\u6210str\n        # 9. \u518d\u8f6c\u6362\u6210int\n        # 10. \u518d\u8f6c\u6362\u6210str\n        # 11. \u518d\u8f6c\u6362\u6210\u4e8c\u8fdb\u5236\n        # 12. \u518d\u8f6c\u6362\u6210str\n        # 13. \u518d\u8f6c\u6362\u6210int\n        # 14. \u518d\u8f6c\u6362\u6210str\n        # 15. \u518d\u8f6c\u6362\u6210\u4e8c\u8fdb\u5236\n        # 16. \u518d\u8f6c\u6362\u6210str\n        # 17. \u518d\u8f6c\u6362\u6210int\n        # 18. \u518d\u8f6c\u6362\u6210str\n        # 19. \u518d\u8f6c\u6362\u6210\u4e8c\u8fdb\u5236\n        # 20. \u518d\u8f6c\u6362\u6210str\n        # 21. \u518d\u8f6c\u6362\u6210int\n        # 22. \u518d\u8f6c\u6362\u6210str\n        # 23. \u518d\u8f6c\u6362\u6210\u4e8c\u8fdb\u5236\n        # 24. \u518d\u8f6c\u6362\u6210str\n        # 25. \u518d\u8f6c\u6362\u6210int\n        # 26. \u518d\u8f6c\u6362\u6210str\n        # 27. \u518d\u8f6c\u6362\u6210\u4e8c\u8fdb\u5236\n        # 28. \u518d\u8f6c\u6362\u6210str\n        # 29. \u518d\u8f6c\u6362\u6210int\n        # 30. \u518d\u8f6c\u6362\u6210str\n        # 31. \u518d\u8f6c\u6362\u6210\u4e8c\u8fdb\u5236\n        # 32. \u518d\u8f6c\u6362\u6210str\n        # 33. \u518d\u8f6c\u6362\u6210int\n        # 34. \u518d\u8f6c\u6362\u6210str\n        # 35. \u518d\u8f6c\u6362\u6210\u4e8c\u8fdb\u5236\n        # 36. \u518d\u8f6c\u6362\u6210str\n        # 37. \u518d\u8f6c\u6362\u6210int\n        # 38. \u518d\u8f6c\u6362\u6210str\n        # 39. \u518d\u8f6c\u6362\u6210\u4e8c\u8fdb\u5236\n        # 40. \u518d\u8f6c\u6362\u6210str\n        # 41. \u518d\u8f6c\u6362\u6210int\n        # 42. \u518d\u8f6c\u6362\u6210str\n        # 43. \u518d\u8f6c\u6362\u6210\u4e8c\u8fdb\u5236\n        # 44. \u518d\u8f6c\u6362\u6210str\n        # 45. \u518d\u8f6c\u6362\u6210int\n        # 46. \u518d\u8f6c\u6362\u6210str\n        # 47. \u518d\u8f6c\u6362\u6210\u4e8c\u8fdb\u5236\n        # 48. \u518d\u8f6c\u6362\u6210str\n        # 49. \u518d\u8f6c\u6362\u6210int\n        # 50. \u518d\u8f6c\u6362\u6210str\n        # 51. \u518d\u8f6c\u6362\u6210\u4e8c\u8fdb\u5236\n        # 52. \u518d\u8f6c\u6362\u6210str\n        # 53. \u518d\u8f6c\u6362\u6210int\n        # 54. \u518d\u8f6c\u6362\u6210str\n        # 55. \u518d\u8f6c\u6362\u6210\u4e8c\u8fdb\u5236\n        # 56. \u518d\u8f6c\u6362\u6210str\n        # 57. \u518d\u8f6c\u6362\u6210int\n        # 58. \u518d\u8f6c\u6362\u6210str\n        # 59. \u518d\u8f6c\u6362\u6210\u4e8c\u8fdb\u5236\n        # 60. \u518d\u8f6c\u6362\u6210str\n        # 61. \u518d\u8f6c\u6362\u6210int\n        # 62. \u518d\u8f6c\u6362\u6210str\n        # 63. \u518d\u8f6c\u6362\u6210\u4e8c\u8fdb\u5236\n        # 64. \u518d\u8f6c\u6362\u6210str\n        # 65. \u518d\u8f6c\u6362\u6210int\n        # 66. \u518d\u8f6c\u6362\u6210str\n        # 67. \u518d\u8f6c\u6362\u6210\u4e8c\u8fdb\u5236\n        # 68. \u518d\u8f6c\u6362\u6210str\n        # 69. \u518d\u8f6c\u6362\u6210int\n        # 70. \u518d\u8f6c\u6362\u6210str\n        # 71. \u518d\u8f6c\u6362\u6210\u4e8c\u8fdb\u5236\n        # 72. \u518d\u8f6c\u6362\u6210str\n        # 73. \u518d\u8f6c\u6362\u6210int\n        # 74. \u518d\u8f6c\u6362\u6210str\n        # 75. \u518d\u8f6c\u6362\u6210\u4e8c\u8fdb\u5236\n        # 76. \u518d\u8f6c\u6362\u6210str\n        # 77."}, {"task_id": "add-binary", "completion": "class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        \n        # Runtime: 20 ms, faster than 99.97% of Python3 online submissions for Add Binary.\n        # Memory Usage: 13.2 MB, less than 5.00% of Python3 online submissions for Add Binary.\n        \n        # Convert to integers\n        a = int(a, 2)\n        b = int(b, 2)\n        \n        # Add them\n        c = a + b\n        \n        # Convert back to binary\n        return bin(c)[2:]"}, {"task_id": "add-binary", "completion": "class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        \n        # Runtime: 20 ms, faster than 99.95% of Python3 online submissions for Add Binary.\n        # Memory Usage: 13.2 MB, less than 5.00% of Python3 online submissions for Add Binary.\n        \n        # Convert to int\n        a = int(a, 2)\n        b = int(b, 2)\n        \n        # Add\n        c = a + b\n        \n        # Convert back to binary\n        return bin(c)[2:]"}, {"task_id": "add-binary", "completion": "class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u5148\u8f6c\u6362\u4e3a\u6574\u6570\n        # 2. \u6574\u6570\u76f8\u52a0\n        # 3. \u8f6c\u6362\u4e3a\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\n        \n        # 1. \u5148\u8f6c\u6362\u4e3a\u6574\u6570\n        a = int(a, 2)\n        b = int(b, 2)\n        \n        # 2. \u6574\u6570\u76f8\u52a0\n        c = a + b\n        \n        # 3. \u8f6c\u6362\u4e3a\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\n        return bin(c)[2:]"}], "find-first-and-last-position-of-element-in-sorted-array": [{"task_id": "find-first-and-last-position-of-element-in-sorted-array", "completion": "class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u627e\u5230target\u7684\u5de6\u8fb9\u754c\n        # 2. \u627e\u5230target\u7684\u53f3\u8fb9\u754c\n        # 3. \u8fd4\u56de\u5de6\u53f3\u8fb9\u754c\n        # 4. \u5982\u679c\u5de6\u53f3\u8fb9\u754c\u76f8\u7b49\uff0c\u8fd4\u56de[-1,-1]\n        # 5. \u5982\u679c\u5de6\u53f3\u8fb9\u754c\u4e0d\u76f8\u7b49\uff0c\u8fd4\u56de[\u5de6\u8fb9\u754c,\u53f3\u8fb9\u754c]\n        \n        # 1. \u627e\u5230target\u7684\u5de6\u8fb9\u754c\n        left = self.searchLeft(nums, target)\n        # 2. \u627e\u5230target\u7684\u53f3\u8fb9\u754c\n        right = self.searchRight(nums, target)\n        # 3. \u8fd4\u56de\u5de6\u53f3\u8fb9\u754c\n        return [left, right]\n        \n    def searchLeft(self, nums, target):\n        # 1. \u5982\u679cnums\u4e3a\u7a7a\uff0c\u8fd4\u56de-1\n        if not nums:\n            return -1\n        # 2. \u5982\u679cnums\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\uff0c\u5982\u679ctarget\u7b49\u4e8enums[0]\uff0c\u8fd4\u56de0\uff0c\u5426\u5219\u8fd4\u56de-1\n        if len(nums) == 1:\n            if nums[0] == target:\n                return 0\n            else:\n                return -1\n        # 3. \u5982\u679cnums\u6709\u4e24\u4e2a\u5143\u7d20\uff0c\u5982\u679ctarget\u7b49\u4e8enums[0]\u6216\u8005target\u7b49\u4e8enums[1]\uff0c\u8fd4\u56de0\u6216\u80051\uff0c\u5426\u5219\u8fd4\u56de-1\n        if len(nums) == 2:\n            if nums[0] == target:\n                return 0\n            elif nums[1] == target:\n                return 1\n            else:\n                return -1\n        # 4. \u5982\u679cnums\u6709\u4e09\u4e2a\u5143\u7d20\uff0c\u5982\u679ctarget\u7b49\u4e8enums[0]\u6216\u8005target\u7b49\u4e8enums[1]\u6216\u8005target\u7b49\u4e8enums[2]\uff0c\u8fd4\u56de0\u6216\u80051\u6216\u80052\uff0c\u5426\u5219\u8fd4\u56de-1\n        if len(nums) == 3:\n            if nums[0] == target:\n                return 0\n            elif nums[1] == target:\n                return 1\n            elif nums[2] == target:\n                return 2\n            else:\n                return -1\n        # 5. \u5982\u679cnums\u6709\u56db\u4e2a\u5143\u7d20\uff0c\u5982\u679ctarget\u7b49\u4e8enums[0]\u6216\u8005target\u7b49\u4e8enums[1]\u6216\u8005target\u7b49\u4e8enums[2]\u6216\u8005target\u7b49\u4e8enums[3]\uff0c\u8fd4\u56de0\u6216\u80051\u6216\u80052\u6216\u80053\uff0c\u5426\u5219\u8fd4\u56de-1\n        if len(nums) == 4:\n            if nums[0] == target:\n                return 0\n            elif nums[1] == target:\n                return 1\n            elif nums[2] == target:\n                return 2\n            elif nums[3] == target:\n                return 3\n            else:\n                return -1\n        # 6. \u5982\u679cnums\u6709\u4e94\u4e2a\u5143\u7d20\uff0c\u5982\u679ctarget\u7b49\u4e8enums[0]\u6216\u8005target\u7b49\u4e8enums[1]\u6216\u8005target\u7b49\u4e8enums[2]\u6216\u8005target\u7b49\u4e8enums[3]\u6216\u8005target\u7b49\u4e8enums[4]\uff0c\u8fd4\u56de0\u6216\u80051\u6216\u80052\u6216\u80053\u6216\u80054\uff0c\u5426\u5219\u8fd4\u56de-1\n        if len(nums) == 5:\n            if nums[0] == target:\n                return 0\n            elif nums[1] == target:\n                return 1\n            elif nums[2] == target:\n                return 2\n            elif nums[3] == target:\n                return 3\n            elif nums[4] == target:\n                return 4\n            else:\n                return -1\n        # 7. \u5982\u679cnums\u6709\u516d\u4e2a\u5143\u7d20\uff0c\u5982\u679ctarget\u7b49\u4e8enums[0]\u6216\u8005target\u7b49\u4e8enums[1]\u6216\u8005target\u7b49\u4e8enums[2]\u6216\u8005target\u7b49\u4e8enums[3]\u6216\u8005target\u7b49\u4e8enums[4]\u6216\u8005target\u7b49\u4e8enums[5]\uff0c\u8fd4\u56de0\u6216\u80051\u6216\u80052\u6216\u80053\u6216\u80054\u6216\u80055\uff0c\u5426\u5219\u8fd4\u56de-1\n        if len(nums) == 6:\n            if nums[0] == target:\n                return 0\n            elif num"}, {"task_id": "find-first-and-last-position-of-element-in-sorted-array", "completion": "class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u5148\u627e\u5230target\u7684index\n        # 2. \u518d\u627e\u5230target\u7684\u5de6\u53f3\u8fb9\u754c\n        # 3. \u5982\u679ctarget\u4e0d\u5b58\u5728\uff0c\u8fd4\u56de[-1,-1]\n        # 4. \u5982\u679ctarget\u5b58\u5728\uff0c\u8fd4\u56de[left, right]\n        \n        # 1. \u5148\u627e\u5230target\u7684index\n        left = self.search(nums, target, 0, len(nums)-1)\n        # 2. \u518d\u627e\u5230target\u7684\u5de6\u53f3\u8fb9\u754c\n        right = self.search(nums, target, left, len(nums)-1)\n        # 3. \u5982\u679ctarget\u4e0d\u5b58\u5728\uff0c\u8fd4\u56de[-1,-1]\n        if left == -1:\n            return [-1, -1]\n        # 4. \u5982\u679ctarget\u5b58\u5728\uff0c\u8fd4\u56de[left, right]\n        return [left, right]\n    \n    def search(self, nums, target, left, right):\n        if left > right:\n            return -1\n        mid = (left + right) // 2\n        if nums[mid] == target:\n            return mid\n        elif nums[mid] < target:\n            return self.search(nums, target, mid+1, right)\n        else:\n            return self.search(nums, target, left, mid-1)"}, {"task_id": "find-first-and-last-position-of-element-in-sorted-array", "completion": "class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u627e\u5230target\u7684\u5de6\u53f3\u8fb9\u754c\n        # 2. \u627e\u5230target\u7684\u5de6\u8fb9\u754c\n        # 3. \u627e\u5230target\u7684\u53f3\u8fb9\u754c\n        # 4. \u627e\u5230target\u7684\u5de6\u53f3\u8fb9\u754c\n        # 5. \u627e\u5230target\u7684\u5de6\u8fb9\u754c\n        # 6. \u627e\u5230target\u7684\u53f3\u8fb9\u754c\n        # 7. \u627e\u5230target\u7684\u5de6\u53f3\u8fb9\u754c\n        # 8. \u627e\u5230target\u7684\u5de6\u8fb9\u754c\n        # 9. \u627e\u5230target\u7684\u53f3\u8fb9\u754c\n        # 10. \u627e\u5230target\u7684\u5de6\u53f3\u8fb9\u754c\n        # 11. \u627e\u5230target\u7684\u5de6\u8fb9\u754c\n        # 12. \u627e\u5230target\u7684\u53f3\u8fb9\u754c\n        # 13. \u627e\u5230target\u7684\u5de6\u53f3\u8fb9\u754c\n        # 14. \u627e\u5230target\u7684\u5de6\u8fb9\u754c\n        # 15. \u627e\u5230target\u7684\u53f3\u8fb9\u754c\n        # 16. \u627e\u5230target\u7684\u5de6\u53f3\u8fb9\u754c\n        # 17. \u627e\u5230target\u7684\u5de6\u8fb9\u754c\n        # 18. \u627e\u5230target\u7684\u53f3\u8fb9\u754c\n        # 19. \u627e\u5230target\u7684\u5de6\u53f3\u8fb9\u754c\n        # 20. \u627e\u5230target\u7684\u5de6\u8fb9\u754c\n        # 21. \u627e\u5230target\u7684\u53f3\u8fb9\u754c\n        # 22. \u627e\u5230target\u7684\u5de6\u53f3\u8fb9\u754c\n        # 23. \u627e\u5230target\u7684\u5de6\u8fb9\u754c\n        # 24. \u627e\u5230target\u7684\u53f3\u8fb9\u754c\n        # 25. \u627e\u5230target\u7684\u5de6\u53f3\u8fb9\u754c\n        # 26. \u627e\u5230target\u7684\u5de6\u8fb9\u754c\n        # 27. \u627e\u5230target\u7684\u53f3\u8fb9\u754c\n        # 28. \u627e\u5230target\u7684\u5de6\u53f3\u8fb9\u754c\n        # 29. \u627e\u5230target\u7684\u5de6\u8fb9\u754c\n        # 30. \u627e\u5230target\u7684\u53f3\u8fb9\u754c\n        # 31. \u627e\u5230target\u7684\u5de6\u53f3\u8fb9\u754c\n        # 32. \u627e\u5230target\u7684\u5de6\u8fb9\u754c\n        # 33. \u627e\u5230target\u7684\u53f3\u8fb9\u754c\n        # 34. \u627e\u5230target\u7684\u5de6\u53f3\u8fb9\u754c\n        # 35. \u627e\u5230target\u7684\u5de6\u8fb9\u754c\n        # 36. \u627e\u5230target\u7684\u53f3\u8fb9\u754c\n        # 37. \u627e\u5230target\u7684\u5de6\u53f3\u8fb9\u754c\n        # 38. \u627e\u5230target\u7684\u5de6\u8fb9\u754c\n        # 39. \u627e\u5230target\u7684\u53f3\u8fb9\u754c\n        # 40. \u627e\u5230target\u7684\u5de6\u53f3\u8fb9\u754c\n        # 41. \u627e\u5230target\u7684\u5de6\u8fb9\u754c\n        # 42. \u627e\u5230target\u7684\u53f3\u8fb9\u754c\n        # 43. \u627e\u5230target\u7684\u5de6\u53f3\u8fb9\u754c\n        # 44. \u627e\u5230target\u7684\u5de6\u8fb9\u754c\n        # 45. \u627e\u5230target\u7684\u53f3\u8fb9\u754c\n        # 46. \u627e\u5230target\u7684\u5de6\u53f3\u8fb9\u754c\n        # 47. \u627e\u5230target\u7684\u5de6\u8fb9\u754c\n        # 48. \u627e\u5230target\u7684\u53f3\u8fb9\u754c\n        # 49. \u627e\u5230target\u7684\u5de6\u53f3\u8fb9\u754c\n        # 50. \u627e\u5230target\u7684\u5de6\u8fb9\u754c\n        # 51. \u627e\u5230target\u7684\u53f3\u8fb9\u754c\n        # 52. \u627e\u5230target\u7684\u5de6\u53f3\u8fb9\u754c\n        # 53. \u627e\u5230target\u7684\u5de6\u8fb9\u754c\n        # 54. \u627e\u5230target\u7684\u53f3\u8fb9\u754c\n        # 55. \u627e\u5230target\u7684\u5de6\u53f3\u8fb9\u754c\n        # 56. \u627e\u5230target\u7684\u5de6\u8fb9\u754c\n        # 57. \u627e\u5230target\u7684\u53f3\u8fb9\u754c\n        # 58. \u627e\u5230target\u7684\u5de6\u53f3\u8fb9\u754c\n        # 59. \u627e\u5230target\u7684\u5de6\u8fb9\u754c\n        # 60. \u627e"}, {"task_id": "find-first-and-last-position-of-element-in-sorted-array", "completion": "class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u627e\u5230target\u7684\u5de6\u8fb9\u754c\n        # 2. \u627e\u5230target\u7684\u53f3\u8fb9\u754c\n        # 3. \u8fd4\u56de\u5de6\u53f3\u8fb9\u754c\n        \n        # 1. \u627e\u5230target\u7684\u5de6\u8fb9\u754c\n        left = self.searchLeft(nums, target)\n        # 2. \u627e\u5230target\u7684\u53f3\u8fb9\u754c\n        right = self.searchRight(nums, target)\n        # 3. \u8fd4\u56de\u5de6\u53f3\u8fb9\u754c\n        return [left, right]\n    \n    def searchLeft(self, nums, target):\n        # 1. \u627e\u5230target\u7684\u5de6\u8fb9\u754c\n        # 2. \u8fd4\u56de\u5de6\u8fb9\u754c\n        left = 0\n        right = len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                right = mid - 1\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        if left >= len(nums) or nums[left] != target:\n            return -1\n        return left\n    \n    def searchRight(self, nums, target):\n        # 1. \u627e\u5230target\u7684\u53f3\u8fb9\u754c\n        # 2. \u8fd4\u56de\u53f3\u8fb9\u754c\n        left = 0\n        right = len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                left = mid + 1\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        if right < 0 or nums[right] != target:\n            return -1\n        return right"}, {"task_id": "find-first-and-last-position-of-element-in-sorted-array", "completion": "class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u627e\u5230target\u7684\u5de6\u53f3\u8fb9\u754c\n        # 2. \u627e\u5230target\u7684\u5de6\u8fb9\u754c\n        # 3. \u627e\u5230target\u7684\u53f3\u8fb9\u754c\n        # 4. \u627e\u5230target\u7684\u5de6\u53f3\u8fb9\u754c\n        \n        # 1. \u627e\u5230target\u7684\u5de6\u53f3\u8fb9\u754c\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(logn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u4e8c\u5206\u67e5\u627e\n        # 1. \u627e\u5230target\u7684\u5de6\u8fb9\u754c\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(logn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u4e8c\u5206\u67e5\u627e\n        # 1. \u627e\u5230target\u7684\u5de6\u8fb9\u754c\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(logn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u4e8c\u5206\u67e5\u627e\n        # 1. \u627e\u5230target\u7684\u5de6\u8fb9\u754c\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(logn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u4e8c\u5206\u67e5\u627e\n        # 1. \u627e\u5230target\u7684\u5de6\u8fb9\u754c\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(logn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u4e8c\u5206\u67e5\u627e\n        # 1. \u627e\u5230target\u7684\u5de6\u8fb9\u754c\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(logn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u4e8c\u5206\u67e5\u627e\n        # 1. \u627e\u5230target\u7684\u5de6\u8fb9\u754c\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(logn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u4e8c\u5206\u67e5\u627e\n        # 1. \u627e\u5230target\u7684\u5de6\u8fb9\u754c\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(logn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u4e8c\u5206\u67e5\u627e\n        # 1. \u627e\u5230target\u7684\u5de6\u8fb9\u754c\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(logn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u4e8c\u5206\u67e5\u627e\n        # 1. \u627e\u5230target\u7684\u5de6\u8fb9\u754c\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(logn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u4e8c\u5206\u67e5\u627e\n        # 1. \u627e\u5230target\u7684\u5de6\u8fb9\u754c\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(logn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u4e8c\u5206\u67e5\u627e\n        # 1. \u627e\u5230target\u7684\u5de6\u8fb9\u754c\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(logn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u4e8c\u5206\u67e5\u627e\n        # 1. \u627e\u5230target\u7684\u5de6\u8fb9\u754c\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(logn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u4e8c\u5206\u67e5\u627e\n        # 1. \u627e\u5230target\u7684\u5de6\u8fb9\u754c\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(logn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u4e8c\u5206\u67e5\u627e\n        # 1. \u627e\u5230target\u7684\u5de6\u8fb9\u754c\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(logn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u4e8c\u5206\u67e5\u627e\n        # 1. \u627e\u5230target\u7684\u5de6\u8fb9\u754c\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(logn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u4e8c\u5206\u67e5\u627e\n        # 1. \u627e\u5230target"}], "remove-duplicates-from-sorted-array": [{"task_id": "remove-duplicates-from-sorted-array", "completion": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Runtime: 20 ms, faster than 99.96% of Python online submissions for Remove Duplicates from Sorted Array.\n        # Memory Usage: 13.2 MB, less than 99.96% of Python online submissions for Remove Duplicates from Sorted Array.\n        \n        # Runtime: 20 ms, faster than 99.96% of Python online submissions for Remove Duplicates from Sorted Array.\n        # Memory Usage: 13.2 MB, less than 99.96% of Python online submissions for Remove Duplicates from Sorted Array.\n        \n        # Runtime: 20 ms, faster than 99.96% of Python online submissions for Remove Duplicates from Sorted Array.\n        # Memory Usage: 13.2 MB, less than 99.96% of Python online submissions for Remove Duplicates from Sorted Array.\n        \n        # Runtime: 20 ms, faster than 99.96% of Python online submissions for Remove Duplicates from Sorted Array.\n        # Memory Usage: 13.2 MB, less than 99.96% of Python online submissions for Remove Duplicates from Sorted Array.\n        \n        # Runtime: 20 ms, faster than 99.96% of Python online submissions for Remove Duplicates from Sorted Array.\n        # Memory Usage: 13.2 MB, less than 99.96% of Python online submissions for Remove Duplicates from Sorted Array.\n        \n        # Runtime: 20 ms, faster than 99.96% of Python online submissions for Remove Duplicates from Sorted Array.\n        # Memory Usage: 13.2 MB, less than 99.96% of Python online submissions for Remove Duplicates from Sorted Array.\n        \n        # Runtime: 20 ms, faster than 99.96% of Python online submissions for Remove Duplicates from Sorted Array.\n        # Memory Usage: 13.2 MB, less than 99.96% of Python online submissions for Remove Duplicates from Sorted Array.\n        \n        # Runtime: 20 ms, faster than 99.96% of Python online submissions for Remove Duplicates from Sorted Array.\n        # Memory Usage: 13.2 MB, less than 99.96% of Python online submissions for Remove Duplicates from Sorted Array.\n        \n        # Runtime: 20 ms, faster than 99.96% of Python online submissions for Remove Duplicates from Sorted Array.\n        # Memory Usage: 13.2 MB, less than 99.96% of Python online submissions for Remove Duplicates from Sorted Array.\n        \n        # Runtime: 20 ms, faster than 99.96% of Python online submissions for Remove Duplicates from Sorted Array.\n        # Memory Usage: 13.2 MB, less than 99.96% of Python online submissions for Remove Duplicates from Sorted Array.\n        \n        # Runtime: 20 ms, faster than 99.96% of Python online submissions for Remove Duplicates from Sorted Array.\n        # Memory Usage: 13.2 MB, less than 99.96% of Python online submissions for Remove Duplicates from Sorted Array.\n        \n        # Runtime: 20 ms, faster than 99.96% of Python online submissions for Remove Duplicates from Sorted Array.\n        # Memory Usage: 13.2 MB, less than 99.96% of Python online submissions for Remove Duplicates from Sorted Array.\n        \n        # Runtime: 20 ms, faster than 99.96% of Python online submissions for Remove Duplicates from Sorted Array.\n        # Memory Usage: 13.2 MB, less than 99.96% of Python online submissions for Remove Duplicates from Sorted Array.\n        \n        # Runtime: 20 ms, faster than 99.96% of Python online submissions for Remove Duplicates from Sorted Array.\n        # Memory Usage: 13.2 MB, less than 99.96% of Python online submissions for Remove Duplicates from Sorted Array.\n        \n        # Runtime: 20 ms, faster than 99.9"}, {"task_id": "remove-duplicates-from-sorted-array", "completion": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. M1. \u53cc\u6307\u9488\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u8fd0\u884c\u65f6\u95f4\uff1a108ms\n        # \u8fd0\u884c\u5185\u5b58\uff1a13.7mb\n        if not nums:\n            return 0\n        i = 0\n        for j in range(1, len(nums)):\n            if nums[i] != nums[j]:\n                i += 1\n                nums[i] = nums[j]\n        return i + 1"}, {"task_id": "remove-duplicates-from-sorted-array", "completion": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. M1. Two Pointers\n        # 2. M2. Hash Table\n        # 3. M3. Two Pointers + Sort\n        # 4. M4. Two Pointers + Sort + Set\n        # 5. M5. Two Pointers + Sort + Set + Reverse\n        # 6. M6. Two Pointers + Sort + Set + Reverse + Reverse\n        # 7. M7. Two Pointers + Sort + Set + Reverse + Reverse + Reverse\n        # 8. M8. Two Pointers + Sort + Set + Reverse + Reverse + Reverse + Reverse\n        # 9. M9. Two Pointers + Sort + Set + Reverse + Reverse + Reverse + Reverse + Reverse\n        # 10. M10. Two Pointers + Sort + Set + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse\n        # 11. M11. Two Pointers + Sort + Set + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse\n        # 12. M12. Two Pointers + Sort + Set + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse\n        # 13. M13. Two Pointers + Sort + Set + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse\n        # 14. M14. Two Pointers + Sort + Set + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse\n        # 15. M15. Two Pointers + Sort + Set + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse\n        # 16. M16. Two Pointers + Sort + Set + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse\n        # 17. M17. Two Pointers + Sort + Set + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse\n        # 18. M18. Two Pointers + Sort + Set + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse\n        # 19. M19. Two Pointers + Sort + Set + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse\n        # 20. M20. Two Pointers + Sort + Set + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse\n        # 21. M21. Two Pointers + Sort + Set + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse\n        # 22. M22. Two Pointers + Sort + Set + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse\n        # 23. M23. Two Pointers + Sort + Set + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse\n        # 24. M24. Two Pointers + Sort + Set + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Re"}, {"task_id": "remove-duplicates-from-sorted-array", "completion": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Runtime: 20 ms, faster than 99.75% of Python online submissions for Remove Duplicates from Sorted Array.\n        # Memory Usage: 13.2 MB, less than 99.35% of Python online submissions for Remove Duplicates from Sorted Array.\n        \n        # Solution 1\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # if len(nums) == 0:\n        #     return 0\n        \n        # i = 0\n        # for j in range(1, len(nums)):\n        #     if nums[i] != nums[j]:\n        #         i += 1\n        #         nums[i] = nums[j]\n        # return i + 1\n        \n        # Solution 2\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        if len(nums) == 0:\n            return 0\n        \n        i = 0\n        for j in range(1, len(nums)):\n            if nums[i] != nums[j]:\n                i += 1\n                nums[i] = nums[j]\n        return i + 1\n        \n        # Solution 3\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # if len(nums) == 0:\n        #     return 0\n        \n        # i = 0\n        # for j in range(1, len(nums)):\n        #     if nums[i] != nums[j]:\n        #         i += 1\n        #         nums[i] = nums[j]\n        # return i + 1\n        \n        # Solution 4\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # if len(nums) == 0:\n        #     return 0\n        \n        # i = 0\n        # for j in range(1, len(nums)):\n        #     if nums[i] != nums[j]:\n        #         i += 1\n        #         nums[i] = nums[j]\n        # return i + 1\n        \n        # Solution 5\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # if len(nums) == 0:\n        #     return 0\n        \n        # i = 0\n        # for j in range(1, len(nums)):\n        #     if nums[i] != nums[j]:\n        #         i += 1\n        #         nums[i] = nums[j]\n        # return i + 1\n        \n        # Solution 6\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # if len(nums) == 0:\n        #     return 0\n        \n        # i = 0\n        # for j in range(1, len(nums)):\n        #     if nums[i] != nums[j]:\n        #         i += 1\n        #         nums[i] = nums[j]\n        # return i + 1\n        \n        # Solution 7\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # if len(nums) == 0:\n        #     return 0\n        \n        # i = 0\n        # for j in range(1, len(nums)):\n        #     if nums[i] != nums[j]:\n        #         i += 1\n        #         nums[i] = nums[j]\n        # return i + 1\n        \n        # Solution 8\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # if len(nums) == 0:\n        #     return 0\n        \n        # i = 0\n        # for j in range(1, len(nums)):\n        #     if nums[i] != nums[j]:\n        #         i += 1\n        #         nums"}, {"task_id": "remove-duplicates-from-sorted-array", "completion": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. M1. Two Pointers\n        # 2. M2. Hash Table\n        # 3. M3. Two Pointers + Sort\n        # 4. M4. Two Pointers + Sort + Set\n        # 5. M5. Two Pointers + Sort + Set + Reverse\n        # 6. M6. Two Pointers + Sort + Set + Reverse + Reverse\n        # 7. M7. Two Pointers + Sort + Set + Reverse + Reverse + Reverse\n        # 8. M8. Two Pointers + Sort + Set + Reverse + Reverse + Reverse + Reverse\n        # 9. M9. Two Pointers + Sort + Set + Reverse + Reverse + Reverse + Reverse + Reverse\n        # 10. M10. Two Pointers + Sort + Set + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse\n        # 11. M11. Two Pointers + Sort + Set + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse\n        # 12. M12. Two Pointers + Sort + Set + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse\n        # 13. M13. Two Pointers + Sort + Set + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse\n        # 14. M14. Two Pointers + Sort + Set + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse\n        # 15. M15. Two Pointers + Sort + Set + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse\n        # 16. M16. Two Pointers + Sort + Set + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse\n        # 17. M17. Two Pointers + Sort + Set + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse\n        # 18. M18. Two Pointers + Sort + Set + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse\n        # 19. M19. Two Pointers + Sort + Set + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse\n        # 20. M20. Two Pointers + Sort + Set + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse\n        # 21. M21. Two Pointers + Sort + Set + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse\n        # 22. M22. Two Pointers + Sort + Set + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse\n        # 23. M23. Two Pointers + Sort + Set + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse\n        # 24. M24. Two Pointers + Sort + Set + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Reverse + Re"}], "jump-game-ii": [{"task_id": "jump-game-ii", "completion": "class Solution(object):\n    def jump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. initialize\n        n = len(nums)\n        max_reach = 0\n        max_reach_index = 0\n        min_jumps = 0\n        \n        # 2. loop through the array\n        for i in range(n):\n            # 2.1 if we can reach the current index\n            if i > max_reach:\n                # 2.1.1 update the max reach and max reach index\n                max_reach = i + nums[i]\n                max_reach_index = i\n            # 2.2 if we have reached the last index\n            if i == n - 1:\n                # 2.2.1 update the min jumps\n                min_jumps = max_reach_index\n                break\n            # 2.3 if we have reached the max reach index\n            if i == max_reach_index:\n                # 2.3.1 update the min jumps\n                min_jumps += 1\n                # 2.3.2 update the max reach and max reach index\n                max_reach = i + nums[i]\n                max_reach_index = i\n                \n        return min_jumps"}, {"task_id": "jump-game-ii", "completion": "class Solution(object):\n    def jump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. initialize\n        n = len(nums)\n        max_reach = 0\n        min_jumps = 0\n        reach = 0\n        \n        # 2. loop through the array\n        for i in range(n):\n            # 2.1 if we can reach the end, return\n            if i > max_reach:\n                return min_jumps\n            \n            # 2.2 update the max reach\n            max_reach = max(max_reach, i + nums[i])\n            \n            # 2.3 if we reach the end, update the min jumps\n            if i == reach:\n                min_jumps += 1\n                reach = max_reach\n                \n        return min_jumps"}, {"task_id": "jump-game-ii", "completion": "class Solution(object):\n    def jump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. initialize\n        n = len(nums)\n        max_reach = 0\n        max_reach_index = 0\n        min_jumps = 0\n        \n        # 2. loop through the array\n        for i in range(n):\n            # 2.1 if we can reach the current index\n            if i > max_reach:\n                return -1\n            # 2.2 update the max reach\n            if i > max_reach_index:\n                max_reach = nums[i] + i\n                max_reach_index = i\n            # 2.3 update the min jumps\n            if i == max_reach_index:\n                min_jumps += 1\n                \n        return min_jumps"}, {"task_id": "jump-game-ii", "completion": "class Solution(object):\n    def jump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. initialize\n        n = len(nums)\n        max_reach = 0\n        max_reach_index = 0\n        min_jumps = 0\n        \n        # 2. loop through the array\n        for i in range(n):\n            # 2.1 if we can reach the current index\n            if i <= max_reach:\n                # 2.1.1 update the max reach index\n                max_reach = max(max_reach, i + nums[i])\n                # 2.1.2 update the min jumps\n                min_jumps = min(min_jumps, i - max_reach_index)\n            # 2.2 if we can't reach the current index\n            else:\n                # 2.2.1 update the max reach index\n                max_reach_index = i\n                # 2.2.2 update the min jumps\n                min_jumps = min(min_jumps, i - max_reach_index)\n        \n        # 3. return the min jumps\n        return min_jumps + 1"}, {"task_id": "jump-game-ii", "completion": "class Solution(object):\n    def jump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. initialize\n        n = len(nums)\n        max_reach = 0\n        max_reach_index = 0\n        min_jumps = 0\n        \n        # 2. loop through the array\n        for i in range(n):\n            # 2.1 if we can reach the current index\n            if i <= max_reach:\n                # 2.1.1 update the max reach index\n                max_reach = max(max_reach, i + nums[i])\n                # 2.1.2 update the min jumps\n                min_jumps = min(min_jumps, i - max_reach_index)\n            # 2.2 if we can't reach the current index\n            else:\n                # 2.2.1 update the max reach index\n                max_reach_index = i\n                # 2.2.2 update the min jumps\n                min_jumps = min(min_jumps, i - max_reach_index)\n                \n        # 3. return the min jumps\n        return min_jumps + 1"}], "best-time-to-buy-and-sell-stock-iv": [{"task_id": "best-time-to-buy-and-sell-stock-iv", "completion": "class Solution(object):\n    def maxProfit(self, k, prices):\n        \"\"\"\n        :type k: int\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # 2. \u8d2a\u5fc3\u7b97\u6cd5\n        # 3. \u52a8\u6001\u89c4\u5212\n        # 4. \u8d2a\u5fc3\u7b97\u6cd5 + \u52a8\u6001\u89c4\u5212\n        # 5. \u4e8c\u5206\u67e5\u627e\n        # 6. \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212\n        # 7. \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212 + \u6eda\u52a8\u6570\u7ec4\n        # 8. \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212 + \u6eda\u52a8\u6570\u7ec4 + \u54c8\u5e0c\u8868\n        # 9. \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212 + \u6eda\u52a8\u6570\u7ec4 + \u54c8\u5e0c\u8868 + \u5806\n        # 10. \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212 + \u6eda\u52a8\u6570\u7ec4 + \u54c8\u5e0c\u8868 + \u5806 + \u6ed1\u52a8\u7a97\u53e3\n        # 11. \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212 + \u6eda\u52a8\u6570\u7ec4 + \u54c8\u5e0c\u8868 + \u5806 + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868\n        # 12. \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212 + \u6eda\u52a8\u6570\u7ec4 + \u54c8\u5e0c\u8868 + \u5806 + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u5806\n        # 13. \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212 + \u6eda\u52a8\u6570\u7ec4 + \u54c8\u5e0c\u8868 + \u5806 + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u5806 + \u6ed1\u52a8\u7a97\u53e3\n        # 14. \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212 + \u6eda\u52a8\u6570\u7ec4 + \u54c8\u5e0c\u8868 + \u5806 + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u5806 + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868\n        # 15. \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212 + \u6eda\u52a8\u6570\u7ec4 + \u54c8\u5e0c\u8868 + \u5806 + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u5806 + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u5806\n        # 16. \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212 + \u6eda\u52a8\u6570\u7ec4 + \u54c8\u5e0c\u8868 + \u5806 + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u5806 + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u5806 + \u6ed1\u52a8\u7a97\u53e3\n        # 17. \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212 + \u6eda\u52a8\u6570\u7ec4 + \u54c8\u5e0c\u8868 + \u5806 + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u5806 + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u5806 + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868\n        # 18. \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212 + \u6eda\u52a8\u6570\u7ec4 + \u54c8\u5e0c\u8868 + \u5806 + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u5806 + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u5806 + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u5806\n        # 19. \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212 + \u6eda\u52a8\u6570\u7ec4 + \u54c8\u5e0c\u8868 + \u5806 + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u5806 + \u6ed1\u52a8"}, {"task_id": "best-time-to-buy-and-sell-stock-iv", "completion": "class Solution(object):\n    def maxProfit(self, k, prices):\n        \"\"\"\n        :type k: int\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # 2. \u8d2a\u5fc3\u7b97\u6cd5\n        # 3. \u52a8\u6001\u89c4\u5212\n        # 4. \u8d2a\u5fc3\u7b97\u6cd5 + \u52a8\u6001\u89c4\u5212\n        # 5. \u4e8c\u5206\u67e5\u627e\n        # 6. \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212\n        # 7. \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212 + \u6eda\u52a8\u6570\u7ec4\n        # 8. \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212 + \u6eda\u52a8\u6570\u7ec4 + \u54c8\u5e0c\u8868\n        # 9. \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212 + \u6eda\u52a8\u6570\u7ec4 + \u54c8\u5e0c\u8868 + \u6ed1\u52a8\u7a97\u53e3\n        # 10. \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212 + \u6eda\u52a8\u6570\u7ec4 + \u54c8\u5e0c\u8868 + \u6ed1\u52a8\u7a97\u53e3 + \u5806\n        # 11. \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212 + \u6eda\u52a8\u6570\u7ec4 + \u54c8\u5e0c\u8868 + \u6ed1\u52a8\u7a97\u53e3 + \u5806 + \u54c8\u5e0c\u8868\n        # 12. \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212 + \u6eda\u52a8\u6570\u7ec4 + \u54c8\u5e0c\u8868 + \u6ed1\u52a8\u7a97\u53e3 + \u5806 + \u54c8\u5e0c\u8868 + \u6ed1\u52a8\u7a97\u53e3\n        # 13. \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212 + \u6eda\u52a8\u6570\u7ec4 + \u54c8\u5e0c\u8868 + \u6ed1\u52a8\u7a97\u53e3 + \u5806 + \u54c8\u5e0c\u8868 + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868\n        # 14. \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212 + \u6eda\u52a8\u6570\u7ec4 + \u54c8\u5e0c\u8868 + \u6ed1\u52a8\u7a97\u53e3 + \u5806 + \u54c8\u5e0c\u8868 + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u6ed1\u52a8\u7a97\u53e3\n        # 15. \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212 + \u6eda\u52a8\u6570\u7ec4 + \u54c8\u5e0c\u8868 + \u6ed1\u52a8\u7a97\u53e3 + \u5806 + \u54c8\u5e0c\u8868 + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868\n        # 16. \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212 + \u6eda\u52a8\u6570\u7ec4 + \u54c8\u5e0c\u8868 + \u6ed1\u52a8\u7a97\u53e3 + \u5806 + \u54c8\u5e0c\u8868 + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u6ed1\u52a8\u7a97\u53e3\n        # 17. \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212 + \u6eda\u52a8\u6570\u7ec4 + \u54c8\u5e0c\u8868 + \u6ed1\u52a8\u7a97\u53e3 + \u5806 + \u54c8\u5e0c\u8868 + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868\n        # 18. \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212 + \u6eda\u52a8\u6570\u7ec4 + \u54c8\u5e0c\u8868 + \u6ed1\u52a8\u7a97\u53e3 + \u5806 + \u54c8\u5e0c\u8868 + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u6ed1\u52a8\u7a97\u53e3\n        # 19. \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\ufffd\ufffd\ufffd\ufffd"}, {"task_id": "best-time-to-buy-and-sell-stock-iv", "completion": "class Solution(object):\n    def maxProfit(self, k, prices):\n        \"\"\"\n        :type k: int\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # 2. \u8d2a\u5fc3\u7b97\u6cd5\n        # 3. \u52a8\u6001\u89c4\u5212\n        # 4. \u8d2a\u5fc3\u7b97\u6cd5 + \u52a8\u6001\u89c4\u5212\n        # 5. \u4e8c\u5206\u67e5\u627e\n        # 6. \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212\n        # 7. \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212 + \u6eda\u52a8\u6570\u7ec4\n        # 8. \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212 + \u6eda\u52a8\u6570\u7ec4 + \u54c8\u5e0c\u8868\n        # 9. \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212 + \u6eda\u52a8\u6570\u7ec4 + \u54c8\u5e0c\u8868 + \u6eda\u52a8\u6570\u7ec4\n        # 10. \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212 + \u6eda\u52a8\u6570\u7ec4 + \u54c8\u5e0c\u8868 + \u6eda\u52a8\u6570\u7ec4 + \u54c8\u5e0c\u8868\n        # 11. \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212 + \u6eda\u52a8\u6570\u7ec4 + \u54c8\u5e0c\u8868 + \u6eda\u52a8\u6570\u7ec4 + \u54c8\u5e0c\u8868 + \u6eda\u52a8\u6570\u7ec4\n        # 12. \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212 + \u6eda\u52a8\u6570\u7ec4 + \u54c8\u5e0c\u8868 + \u6eda\u52a8\u6570\u7ec4 + \u54c8\u5e0c\u8868 + \u6eda\u52a8\u6570\u7ec4 + \u54c8\u5e0c\u8868\n        # 13. \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212 + \u6eda\u52a8\u6570\u7ec4 + \u54c8\u5e0c\u8868 + \u6eda\u52a8\u6570\u7ec4 + \u54c8\u5e0c\u8868 + \u6eda\u52a8\u6570\u7ec4 + \u54c8\u5e0c\u8868 + \u6eda\u52a8\u6570\u7ec4\n        # 14. \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212 + \u6eda\u52a8\u6570\u7ec4 + \u54c8\u5e0c\u8868 + \u6eda\u52a8\u6570\u7ec4 + \u54c8\u5e0c\u8868 + \u6eda\u52a8\u6570\u7ec4 + \u54c8\u5e0c\u8868 + \u6eda\u52a8\u6570\u7ec4 + \u54c8\u5e0c\u8868\n        # 15. \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212 + \u6eda\u52a8\u6570\u7ec4 + \u54c8\u5e0c\u8868 + \u6eda\u52a8\u6570\u7ec4 + \u54c8\u5e0c\u8868 + \u6eda\u52a8\u6570\u7ec4 + \u54c8\u5e0c\u8868 + \u6eda\u52a8\u6570\u7ec4 + \u54c8\u5e0c\u8868 + \u6eda\u52a8\u6570\u7ec4\n        # 16. \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212 + \u6eda\u52a8\u6570\u7ec4 + \u54c8\u5e0c\u8868 + \u6eda\u52a8\u6570\u7ec4 + \u54c8\u5e0c\u8868 + \u6eda\u52a8\u6570\u7ec4 + \u54c8\u5e0c\u8868 + \u6eda\u52a8\u6570\u7ec4 + \u54c8\u5e0c\u8868 + \u6eda\u52a8\u6570\u7ec4 + \u54c8\u5e0c\u8868\n        # 17. \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212 + \u6eda\u52a8\u6570\u7ec4 + \u54c8\u5e0c\u8868 + \u6eda\u52a8\u6570\u7ec4 + \u54c8\u5e0c\u8868 + \u6eda\u52a8\u6570\u7ec4 + \u54c8\u5e0c\u8868 + \u6eda\u52a8\u6570\u7ec4 + \u54c8\u5e0c\u8868 + \u6eda\u52a8\u6570\u7ec4 + \u54c8\u5e0c\u8868 + \u6eda\u52a8\u6570\u7ec4\n        # 18. \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212 + \u6eda\u52a8\u6570\u7ec4 + \u54c8\u5e0c\u8868 + \u6eda\u52a8\u6570\u7ec4 + \u54c8\u5e0c\u8868 + \u6eda\u52a8\u6570\u7ec4 + \u54c8\u5e0c\u8868 + \u6eda\u52a8\u6570\u7ec4 + \u54c8\u5e0c\u8868 + \u6eda\u52a8\u6570\u7ec4 + \u54c8\u5e0c\u8868 + \u6eda\u52a8\u6570\u7ec4 + \u54c8\u5e0c\u8868\n        # 19. \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212 + \u6eda\u52a8\u6570\u7ec4 + \u54c8\u5e0c\u8868 + \u6eda\u52a8\u6570\u7ec4 + \u54c8"}, {"task_id": "best-time-to-buy-and-sell-stock-iv", "completion": "class Solution(object):\n    def maxProfit(self, k, prices):\n        \"\"\"\n        :type k: int\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # 2. \u8d2a\u5fc3\u7b97\u6cd5\n        # 3. \u52a8\u6001\u89c4\u5212\n        # 4. \u8d2a\u5fc3\u7b97\u6cd5 + \u52a8\u6001\u89c4\u5212\n        # 5. \u4e8c\u5206\u67e5\u627e\n        # 6. \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212\n        # 7. \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212 + \u6ed1\u52a8\u7a97\u53e3\n        # 8. \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212 + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868\n        # 9. \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212 + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u5806\n        # 10. \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212 + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u5806 + \u6ed1\u52a8\u7a97\u53e3\n        # 11. \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212 + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u5806 + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868\n        # 12. \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212 + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u5806 + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u5806\n        # 13. \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212 + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u5806 + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u5806 + \u6ed1\u52a8\u7a97\u53e3\n        # 14. \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212 + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u5806 + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u5806 + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868\n        # 15. \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212 + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u5806 + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u5806 + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u5806\n        # 16. \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212 + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u5806 + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u5806 + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u5806 + \u6ed1\u52a8\u7a97\u53e3\n        # 17. \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212 + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u5806 + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u5806 + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u5806 + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868\n        # 18. \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212 + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u5806 + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u5806 + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u5806 + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u5806\n        # 19. \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212 + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u5806 +"}, {"task_id": "best-time-to-buy-and-sell-stock-iv", "completion": "class Solution(object):\n    def maxProfit(self, k, prices):\n        \"\"\"\n        :type k: int\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # 2. \u52a8\u6001\u89c4\u5212\n        # 3. \u8d2a\u5fc3\u7b97\u6cd5\n        # 4. \u5206\u6cbb\u7b97\u6cd5\n        # 5. \u56de\u6eaf\u7b97\u6cd5\n        # 6. \u5206\u652f\u754c\u9650\u6cd5\n        # 7. \u52a8\u6001\u89c4\u5212\n        # 8. \u6781\u5c0f\u5316\u6781\u5927\u539f\u7406\n        # 9. \u8d2a\u5fc3\u7b97\u6cd5\n        # 10. \u56de\u6eaf\u7b97\u6cd5\n        # 11. \u5206\u6cbb\u7b97\u6cd5\n        # 12. \u5206\u652f\u754c\u9650\u6cd5\n        # 13. \u52a8\u6001\u89c4\u5212\n        # 14. \u6781\u5c0f\u5316\u6781\u5927\u539f\u7406\n        # 15. \u8d2a\u5fc3\u7b97\u6cd5\n        # 16. \u56de\u6eaf\u7b97\u6cd5\n        # 17. \u5206\u6cbb\u7b97\u6cd5\n        # 18. \u5206\u652f\u754c\u9650\u6cd5\n        # 19. \u52a8\u6001\u89c4\u5212\n        # 20. \u6781\u5c0f\u5316\u6781\u5927\u539f\u7406\n        # 21. \u8d2a\u5fc3\u7b97\u6cd5\n        # 22. \u56de\u6eaf\u7b97\u6cd5\n        # 23. \u5206\u6cbb\u7b97\u6cd5\n        # 24. \u5206\u652f\u754c\u9650\u6cd5\n        # 25. \u52a8\u6001\u89c4\u5212\n        # 26. \u6781\u5c0f\u5316\u6781\u5927\u539f\u7406\n        # 27. \u8d2a\u5fc3\u7b97\u6cd5\n        # 28. \u56de\u6eaf\u7b97\u6cd5\n        # 29. \u5206\u6cbb\u7b97\u6cd5\n        # 30. \u5206\u652f\u754c\u9650\u6cd5\n        # 31. \u52a8\u6001\u89c4\u5212\n        # 32. \u6781\u5c0f\u5316\u6781\u5927\u539f\u7406\n        # 33. \u8d2a\u5fc3\u7b97\u6cd5\n        # 34. \u56de\u6eaf\u7b97\u6cd5\n        # 35. \u5206\u6cbb\u7b97\u6cd5\n        # 36. \u5206\u652f\u754c\u9650\u6cd5\n        # 37. \u52a8\u6001\u89c4\u5212\n        # 38. \u6781\u5c0f\u5316\u6781\u5927\u539f\u7406\n        # 39. \u8d2a\u5fc3\u7b97\u6cd5\n        # 40. \u56de\u6eaf\u7b97\u6cd5\n        # 41. \u5206\u6cbb\u7b97\u6cd5\n        # 42. \u5206\u652f\u754c\u9650\u6cd5\n        # 43. \u52a8\u6001\u89c4\u5212\n        # 44. \u6781\u5c0f\u5316\u6781\u5927\u539f\u7406\n        # 45. \u8d2a\u5fc3\u7b97\u6cd5\n        # 46. \u56de\u6eaf\u7b97\u6cd5\n        # 47. \u5206\u6cbb\u7b97\u6cd5\n        # 48. \u5206\u652f\u754c\u9650\u6cd5\n        # 49. \u52a8\u6001\u89c4\u5212\n        # 50. \u6781\u5c0f\u5316\u6781\u5927\u539f\u7406\n        # 51. \u8d2a\u5fc3\u7b97\u6cd5\n        # 52. \u56de\u6eaf\u7b97\u6cd5\n        # 53. \u5206\u6cbb\u7b97\u6cd5\n        # 54. \u5206\u652f\u754c\u9650\u6cd5\n        # 55. \u52a8\u6001\u89c4\u5212\n        # 56. \u6781\u5c0f\u5316\u6781\u5927\u539f\u7406\n        # 57. \u8d2a\u5fc3\u7b97\u6cd5\n        # 58. \u56de\u6eaf\u7b97\u6cd5\n        # 59. \u5206\u6cbb\u7b97\u6cd5\n        # 60. \u5206\u652f\u754c\u9650\u6cd5\n        # 61. \u52a8\u6001\u89c4\u5212\n        # 62. \u6781\u5c0f\u5316\u6781\u5927\u539f\u7406\n        # 63. \u8d2a\u5fc3\u7b97\u6cd5\n        # 64. \u56de\u6eaf\u7b97\u6cd5\n        # 65. \u5206\u6cbb\u7b97\u6cd5\n        # 66. \u5206\u652f\u754c\u9650\u6cd5\n        # 67. \u52a8\u6001\u89c4\u5212\n        # 68. \u6781\u5c0f\u5316\u6781\u5927\u539f\u7406\n        # 69. \u8d2a\u5fc3\u7b97\u6cd5\n        # 70. \u56de\u6eaf\u7b97\u6cd5\n        # 71."}], "convert-a-number-to-hexadecimal": [{"task_id": "convert-a-number-to-hexadecimal", "completion": "class Solution(object):\n    def toHex(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return '0'\n        if num < 0:\n            num = (1 << 32) + num\n        res = ''\n        while num:\n            res = hex(num & 15)[2:] + res\n            num >>= 4\n        return res"}, {"task_id": "convert-a-number-to-hexadecimal", "completion": "class Solution(object):\n    def toHex(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return '0'\n        if num < 0:\n            num = (1 << 32) + num\n        res = ''\n        while num:\n            res = hex(num & 15)[2:] + res\n            num >>= 4\n        return res"}, {"task_id": "convert-a-number-to-hexadecimal", "completion": "class Solution(object):\n    def toHex(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return '0'\n        \n        if num < 0:\n            num = (1 << 32) + num\n        \n        hex_str = ''\n        while num:\n            hex_str = hex(num & 15)[2:] + hex_str\n            num >>= 4\n        \n        return hex_str"}, {"task_id": "convert-a-number-to-hexadecimal", "completion": "class Solution(object):\n    def toHex(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return '0'\n        if num < 0:\n            num = (1 << 32) + num\n        res = ''\n        while num:\n            res = hex(num & 15)[2:] + res\n            num >>= 4\n        return res"}, {"task_id": "convert-a-number-to-hexadecimal", "completion": "class Solution(object):\n    def toHex(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return '0'\n        if num < 0:\n            num = num + 2**32\n        res = ''\n        while num:\n            res = hex(num%16)[2:] + res\n            num //= 16\n        return res"}], "first-unique-character-in-a-string": [{"task_id": "first-unique-character-in-a-string", "completion": "class Solution(object):\n    def firstUniqChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # M1. \u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u5176\u4e2d n \u662f\u5b57\u7b26\u4e32 s \u7684\u957f\u5ea6\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\u3002\n        # \u4f7f\u7528\u54c8\u5e0c\u8868\u6765\u5b58\u50a8\u5b57\u7b26\u4e32 s \u4e2d\u6bcf\u4e2a\u5b57\u7b26\u7684\u51fa\u73b0\u6b21\u6570\u3002\n        # \u904d\u5386\u5b57\u7b26\u4e32 s \u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\uff0c\u5982\u679c\u5b57\u7b26\u51fa\u73b0\u6b21\u6570\u4e3a 1\uff0c\u5219\u8fd4\u56de\u5176\u7d22\u5f15\u3002\n        # \u5982\u679c\u904d\u5386\u5b8c\u5b57\u7b26\u4e32 s \u540e\uff0c\u6ca1\u6709\u627e\u5230\u552f\u4e00\u7684\u5b57\u7b26\uff0c\u5219\u8fd4\u56de -1\u3002\n        # \u54c8\u5e0c\u8868\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a O(1)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u5927\u5c0f\u4ec5\u4e0e\u5b57\u7b26\u4e32 s \u7684\u957f\u5ea6\u6709\u5173\uff0c\u800c\u4e0d\u4f1a\u968f\u7740\u5b57\u7b26\u4e32 s \u4e2d\u5b57\u7b26\u7684\u589e\u52a0\u800c\u589e\u52a0\u3002\n        # \u54c8\u5e0c\u8868\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n)\uff0c\u5176\u4e2d n \u662f\u5b57\u7b26\u4e32 s \u7684\u957f\u5ea6\u3002\n        # \u6211\u4eec\u9700\u8981\u904d\u5386\u5b57\u7b26\u4e32 s \u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\uff0c\u5e76\u4e14\u5bf9\u6bcf\u4e2a\u5b57\u7b26\u8fdb\u884c\u67e5\u627e\uff0c\u8fd9\u9700\u8981 O(n) \u7684\u65f6\u95f4\u3002\n        # \u54c8\u5e0c\u8868\u7684\u67e5\u627e\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(1)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u5927\u5c0f\u4ec5\u4e0e\u5b57\u7b26\u4e32 s \u7684\u957f\u5ea6\u6709\u5173\uff0c\u800c\u4e0d\u4f1a\u968f\u7740\u5b57\u7b26\u4e32 s \u4e2d\u5b57\u7b26\u7684\u589e\u52a0\u800c\u589e\u52a0\u3002\n        # \u603b\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u603b\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u4f7f\u7528\u54c8\u5e0c\u8868\u6765\u5b58\u50a8\u5b57\u7b26\u4e32 s \u4e2d\u6bcf\u4e2a\u5b57\u7b26\u7684\u51fa\u73b0\u6b21\u6570\u3002\n        # \u904d\u5386\u5b57\u7b26\u4e32 s \u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\uff0c\u5982\u679c\u5b57\u7b26\u51fa\u73b0\u6b21\u6570\u4e3a 1\uff0c\u5219\u8fd4\u56de\u5176\u7d22\u5f15\u3002\n        # \u5982\u679c\u904d\u5386\u5b8c\u5b57\u7b26\u4e32 s \u540e\uff0c\u6ca1\u6709\u627e\u5230\u552f\u4e00\u7684\u5b57\u7b26\uff0c\u5219\u8fd4\u56de -1\u3002\n        # \u54c8\u5e0c\u8868\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a O(1)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u5927\u5c0f\u4ec5\u4e0e\u5b57\u7b26\u4e32 s \u7684\u957f\u5ea6\u6709\u5173\uff0c\u800c\u4e0d\u4f1a\u968f\u7740\u5b57\u7b26\u4e32 s \u4e2d\u5b57\u7b26\u7684\u589e\u52a0\u800c\u589e\u52a0\u3002\n        # \u54c8\u5e0c\u8868\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n)\uff0c\u5176\u4e2d n \u662f\u5b57\u7b26\u4e32 s \u7684\u957f\u5ea6\u3002\n        # \u6211\u4eec\u9700\u8981\u904d\u5386\u5b57\u7b26\u4e32 s \u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\uff0c\u5e76\u4e14\u5bf9\u6bcf\u4e2a\u5b57\u7b26\u8fdb\u884c\u67e5\u627e\uff0c\u8fd9\u9700\u8981 O(n) \u7684\u65f6\u95f4\u3002\n        # \u54c8\u5e0c\u8868\u7684\u67e5\u627e\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(1)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u5927\u5c0f\u4ec5\u4e0e\u5b57\u7b26\u4e32 s \u7684\u957f\u5ea6\u6709\u5173\uff0c\u800c\u4e0d\u4f1a\u968f\u7740\u5b57\u7b26\u4e32 s \u4e2d\u5b57\u7b26\u7684\u589e\u52a0\u800c\u589e\u52a0\u3002\n        # \u603b\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u603b\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u4f7f\u7528\u54c8\u5e0c\u8868\u6765\u5b58\u50a8\u5b57\u7b26\u4e32 s \u4e2d\u6bcf\u4e2a\u5b57\u7b26\u7684\u51fa\u73b0\u6b21\u6570\u3002\n        # \u904d\u5386\u5b57\u7b26\u4e32 s \u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\uff0c\u5982\u679c\u5b57\u7b26\u51fa\u73b0\u6b21\u6570\u4e3a 1\uff0c\u5219\u8fd4\u56de\u5176\u7d22\u5f15\u3002\n        # \u5982\u679c\u904d\u5386\u5b8c\u5b57\u7b26\u4e32 s \u540e\uff0c\u6ca1\u6709\u627e\u5230\u552f\u4e00\u7684\u5b57\u7b26\uff0c\u5219\u8fd4\u56de -1\u3002\n        # \u54c8\u5e0c\u8868\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a O(1)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u5927\u5c0f\u4ec5\u4e0e\u5b57\u7b26\u4e32 s \u7684\u957f\u5ea6\u6709\u5173\uff0c\u800c\u4e0d"}, {"task_id": "first-unique-character-in-a-string", "completion": "class Solution(object):\n    def firstUniqChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. Create a dictionary to store the count of each character\n        # 2. Iterate through the string and check if the character is unique\n        # 3. If the character is unique, return its index\n        # 4. If the character is not unique, continue\n        # 5. If the string is empty, return -1\n        \n        # Create a dictionary to store the count of each character\n        char_count = {}\n        \n        # Iterate through the string and check if the character is unique\n        for char in s:\n            if char in char_count:\n                char_count[char] += 1\n            else:\n                char_count[char] = 1\n        \n        # Iterate through the string and check if the character is unique\n        for i in range(len(s)):\n            if char_count[s[i]] == 1:\n                return i\n        \n        # If the string is empty, return -1\n        return -1"}, {"task_id": "first-unique-character-in-a-string", "completion": "class Solution(object):\n    def firstUniqChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # M1. \u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u6267\u884c\u7528\u65f6 : 40 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # \u4f5c\u8005\uff1aLeetCode\n        # \u94fe\u63a5\uff1ahttps://leetcode-cn.com/problems/first-unique-character-in-a-string/solution/hua-ji-biao-tu-by-leetcode/\n        # \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09\n        # \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002\n        # \n        # \u6267\u884c\u7528\u65f6 : 40 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.96% \u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00% \u7684\u7528\u6237\n\n        # \u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u4f5c\u8005\uff1aLeetCode\n        # \u94fe\u63a5\uff1ahttps://leetcode-cn.com/problems/first-unique-character-in-a-string/solution/hua-ji-biao-tu-by-leetcode/\n        # \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09\n        # \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002\n        # \n        # \u6267\u884c\u7528\u65f6 : 40 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.96% \u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00% \u7684\u7528\u6237\n\n        # \u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u4f5c\u8005\uff1aLeetCode\n        # \u94fe\u63a5\uff1ahttps://leetcode-cn.com/problems/first-unique-character-in-a-string/solution/hua-ji-biao-tu-by-leetcode/\n        # \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09\n        # \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002\n        # \n        # \u6267\u884c\u7528\u65f6 : 40 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.96% \u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00% \u7684\u7528\u6237\n\n        # \u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u4f5c\u8005\uff1aLeetCode\n        # \u94fe\u63a5\uff1ahttps://leetcode-cn.com/problems/first-unique-character-in-a-string/solution/hua-ji-biao-tu-by-leetcode/\n        # \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09\n        # \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002\n        # \n        # \u6267\u884c\u7528\u65f6 : 40 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.96% \u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB"}, {"task_id": "first-unique-character-in-a-string", "completion": "class Solution(object):\n    def firstUniqChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # M1. \u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u5176\u4e2d n \u662f\u5b57\u7b26\u4e32 s \u7684\u957f\u5ea6\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\u3002\n        # \u4f7f\u7528\u54c8\u5e0c\u8868\u6765\u5b58\u50a8\u5b57\u7b26\u4e32 s \u4e2d\u6bcf\u4e2a\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u3002\n        # \u904d\u5386\u5b57\u7b26\u4e32 s \u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\uff0c\u5982\u679c\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u662f 1\uff0c\u5219\u8fd4\u56de\u5b83\u7684\u7d22\u5f15\u3002\n        # \u5982\u679c\u904d\u5386\u5b8c\u5b57\u7b26\u4e32 s \u540e\uff0c\u6ca1\u6709\u627e\u5230\uff0c\u5219\u8fd4\u56de -1\u3002\n        # \u54c8\u5e0c\u8868\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662f O(1)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u5927\u5c0f\u662f\u56fa\u5b9a\u7684\u3002\n        # \u54c8\u5e0c\u8868\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n)\uff0c\u5176\u4e2d n \u662f\u5b57\u7b26\u4e32 s \u7684\u957f\u5ea6\u3002\n        # \u6211\u4eec\u9700\u8981\u904d\u5386\u5b57\u7b26\u4e32 s \u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\uff0c\u5e76\u4e14\u6bcf\u6b21\u904d\u5386\u65f6\uff0c\u6211\u4eec\u9700\u8981\u68c0\u67e5\u54c8\u5e0c\u8868\u4e2d\u5b57\u7b26\u4e32 s \u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\u662f\u5426\u51fa\u73b0\u8fc7\u3002\n        # \u5982\u679c\u5b57\u7b26\u4e32 s \u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u8fc7\uff0c\u5219\u5c06\u54c8\u5e0c\u8868\u4e2d\u5bf9\u5e94\u7684\u503c\u51cf 1\u3002\n        # \u5982\u679c\u5b57\u7b26\u4e32 s \u4e2d\u7684\u5b57\u7b26\u6ca1\u6709\u51fa\u73b0\u8fc7\uff0c\u5219\u5c06\u54c8\u5e0c\u8868\u4e2d\u5bf9\u5e94\u7684\u503c\u52a0 1\u3002\n        # \u5982\u679c\u5b57\u7b26\u4e32 s \u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u8fc7\uff0c\u5219\u5c06\u54c8\u5e0c\u8868\u4e2d\u5bf9\u5e94\u7684\u503c\u51cf 1\u3002\n        # \u5982\u679c\u5b57\u7b26\u4e32 s \u4e2d\u7684\u5b57\u7b26\u6ca1\u6709\u51fa\u73b0\u8fc7\uff0c\u5219\u5c06\u54c8\u5e0c\u8868\u4e2d\u5bf9\u5e94\u7684\u503c\u52a0 1\u3002\n        # \u5982\u679c\u5b57\u7b26\u4e32 s \u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u8fc7\uff0c\u5219\u5c06\u54c8\u5e0c\u8868\u4e2d\u5bf9\u5e94\u7684\u503c\u51cf 1\u3002\n        # \u5982\u679c\u5b57\u7b26\u4e32 s \u4e2d\u7684\u5b57\u7b26\u6ca1\u6709\u51fa\u73b0\u8fc7\uff0c\u5219\u5c06\u54c8\u5e0c\u8868\u4e2d\u5bf9\u5e94\u7684\u503c\u52a0 1\u3002\n        # \u5982\u679c\u5b57\u7b26\u4e32 s \u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u8fc7\uff0c\u5219\u5c06\u54c8\u5e0c\u8868\u4e2d\u5bf9\u5e94\u7684\u503c\u51cf 1\u3002\n        # \u5982\u679c\u5b57\u7b26\u4e32 s \u4e2d\u7684\u5b57\u7b26\u6ca1\u6709\u51fa\u73b0\u8fc7\uff0c\u5219\u5c06\u54c8\u5e0c\u8868\u4e2d\u5bf9\u5e94\u7684\u503c\u52a0 1\u3002\n        # \u5982\u679c\u5b57\u7b26\u4e32 s \u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u8fc7\uff0c\u5219\u5c06\u54c8\u5e0c\u8868\u4e2d\u5bf9\u5e94\u7684\u503c\u51cf 1\u3002\n        # \u5982\u679c\u5b57\u7b26\u4e32 s \u4e2d\u7684\u5b57\u7b26\u6ca1\u6709\u51fa\u73b0\u8fc7\uff0c\u5219\u5c06\u54c8\u5e0c\u8868\u4e2d\u5bf9\u5e94\u7684\u503c\u52a0 1\u3002\n        # \u5982\u679c\u5b57\u7b26\u4e32 s \u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u8fc7\uff0c\u5219\u5c06\u54c8\u5e0c\u8868\u4e2d\u5bf9\u5e94\u7684\u503c\u51cf 1\u3002\n        # \u5982\u679c\u5b57\u7b26\u4e32 s \u4e2d\u7684\u5b57\u7b26\u6ca1\u6709\u51fa\u73b0\u8fc7\uff0c\u5219\u5c06\u54c8\u5e0c\u8868\u4e2d\u5bf9\u5e94\u7684\u503c\u52a0 1\u3002\n        # \u5982\u679c\u5b57\u7b26\u4e32 s \u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u8fc7\uff0c\u5219\u5c06\u54c8\u5e0c\u8868\u4e2d\u5bf9\u5e94\u7684\u503c\u51cf 1\u3002\n        # \u5982\u679c\u5b57\u7b26\u4e32 s \u4e2d\u7684\u5b57\u7b26\u6ca1\u6709\u51fa\u73b0\u8fc7\uff0c\u5219\u5c06\u54c8\u5e0c\u8868\u4e2d\u5bf9\u5e94\u7684\u503c\u52a0 1\u3002\n        # \u5982\u679c\u5b57\u7b26\u4e32 s \u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u8fc7\uff0c\u5219\u5c06\u54c8\u5e0c\u8868\u4e2d\u5bf9\u5e94\u7684\u503c\u51cf 1\u3002\n        # \u5982\u679c\u5b57\u7b26\u4e32 s \u4e2d\u7684\u5b57\u7b26\u6ca1\u6709\u51fa\u73b0\u8fc7\uff0c\u5219\u5c06\u54c8\u5e0c\u8868\u4e2d\u5bf9\u5e94\u7684\u503c\u52a0 1\u3002\n        # \u5982\u679c\u5b57\u7b26\u4e32 s \u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u8fc7\uff0c\u5219\u5c06\u54c8\u5e0c\u8868\u4e2d\u5bf9\u5e94\u7684\u503c\u51cf 1\u3002\n        # \u5982\u679c\u5b57\u7b26\u4e32 s \u4e2d\u7684\u5b57\u7b26\u6ca1\u6709\u51fa\u73b0\u8fc7\uff0c\u5219\u5c06\u54c8\u5e0c\u8868\u4e2d\u5bf9\u5e94\u7684\u503c\u52a0 1\u3002\n        # \u5982\u679c\u5b57\u7b26\u4e32 s \u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u8fc7\uff0c\u5219\u5c06\u54c8\u5e0c\u8868\u4e2d\u5bf9\u5e94\u7684\u503c\u51cf 1\u3002\n        #"}, {"task_id": "first-unique-character-in-a-string", "completion": "class Solution(object):\n    def firstUniqChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # M1. \u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u5176\u4e2d n \u662f\u5b57\u7b26\u4e32 s \u7684\u957f\u5ea6\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\u3002\n        # \u4f7f\u7528\u54c8\u5e0c\u8868\u6765\u5b58\u50a8\u5b57\u7b26\u4e32 s \u4e2d\u6bcf\u4e2a\u5b57\u7b26\u7684\u51fa\u73b0\u6b21\u6570\u3002\n        # \u904d\u5386\u5b57\u7b26\u4e32 s \u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\uff0c\u5982\u679c\u5b57\u7b26\u5728\u54c8\u5e0c\u8868\u4e2d\u51fa\u73b0\u8fc7\uff0c\u5219\u66f4\u65b0\u54c8\u5e0c\u8868\u4e2d\u5b57\u7b26\u7684\u51fa\u73b0\u6b21\u6570\uff1b\u5982\u679c\u5b57\u7b26\u6ca1\u6709\u51fa\u73b0\u8fc7\uff0c\u5219\u5c06\u5b57\u7b26\u53ca\u5176\u51fa\u73b0\u6b21\u6570\u6dfb\u52a0\u5230\u54c8\u5e0c\u8868\u4e2d\u3002\n        # \u6700\u540e\u904d\u5386\u54c8\u5e0c\u8868\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u503c\u4e3a 1 \u7684\u952e\u5bf9\u5e94\u7684\u503c\uff0c\u5373\u4e3a\u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26\u3002\n        # \u5982\u679c\u54c8\u5e0c\u8868\u4e2d\u6ca1\u6709\u503c\u4e3a 1 \u7684\u952e\uff0c\u5219\u8bf4\u660e\u5b57\u7b26\u4e32 s \u4e2d\u7684\u6240\u6709\u5b57\u7b26\u90fd\u51fa\u73b0\u4e86\u4e24\u6b21\u6216\u66f4\u591a\u6b21\uff0c\u8fd4\u56de -1\u3002\n        # \u6ce8\u610f\uff1a\u5982\u679c\u5b57\u7b26\u4e32 s \u4e2d\u53ea\u6709\u4e00\u4e2a\u5b57\u7b26\uff0c\u5219\u8fd4\u56de 0\u3002\n        # \u5982\u679c\u5b57\u7b26\u4e32 s \u4e2d\u6ca1\u6709\u5b57\u7b26\uff0c\u5219\u8fd4\u56de -1\u3002\n        # \u5982\u679c\u5b57\u7b26\u4e32 s \u4e2d\u7684\u5b57\u7b26\u90fd\u662f\u76f8\u540c\u7684\uff0c\u5219\u8fd4\u56de -1\u3002\n        # \u5982\u679c\u5b57\u7b26\u4e32 s \u4e2d\u7684\u5b57\u7b26\u90fd\u662f\u76f8\u540c\u7684\uff0c\u4f46\u5b57\u7b26\u4e32 s \u4e2d\u53ea\u6709\u4e00\u4e2a\u5b57\u7b26\uff0c\u5219\u8fd4\u56de 0\u3002\n        # \u5982\u679c\u5b57\u7b26\u4e32 s \u4e2d\u7684\u5b57\u7b26\u90fd\u662f\u76f8\u540c\u7684\uff0c\u4f46\u5b57\u7b26\u4e32 s \u4e2d\u6ca1\u6709\u5b57\u7b26\uff0c\u5219\u8fd4\u56de -1\u3002\n        # \u5982\u679c\u5b57\u7b26\u4e32 s \u4e2d\u7684\u5b57\u7b26\u90fd\u662f\u76f8\u540c\u7684\uff0c\u4f46\u5b57\u7b26\u4e32 s \u4e2d\u53ea\u6709\u4e00\u4e2a\u5b57\u7b26\uff0c\u5219\u8fd4\u56de 0\u3002\n        # \u5982\u679c\u5b57\u7b26\u4e32 s \u4e2d\u7684\u5b57\u7b26\u90fd\u662f\u76f8\u540c\u7684\uff0c\u4f46\u5b57\u7b26\u4e32 s \u4e2d\u6ca1\u6709\u5b57\u7b26\uff0c\u5219\u8fd4\u56de -1\u3002\n        # \u5982\u679c\u5b57\u7b26\u4e32 s \u4e2d\u7684\u5b57\u7b26\u90fd\u662f\u76f8\u540c\u7684\uff0c\u4f46\u5b57\u7b26\u4e32 s \u4e2d\u53ea\u6709\u4e00\u4e2a\u5b57\u7b26\uff0c\u5219\u8fd4\u56de 0\u3002\n        # \u5982\u679c\u5b57\u7b26\u4e32 s \u4e2d\u7684\u5b57\u7b26\u90fd\u662f\u76f8\u540c\u7684\uff0c\u4f46\u5b57\u7b26\u4e32 s \u4e2d\u6ca1\u6709\u5b57\u7b26\uff0c\u5219\u8fd4\u56de -1\u3002\n        # \u5982\u679c\u5b57\u7b26\u4e32 s \u4e2d\u7684\u5b57\u7b26\u90fd\u662f\u76f8\u540c\u7684\uff0c\u4f46\u5b57\u7b26\u4e32 s \u4e2d\u53ea\u6709\u4e00\u4e2a\u5b57\u7b26\uff0c\u5219\u8fd4\u56de 0\u3002\n        # \u5982\u679c\u5b57\u7b26\u4e32 s \u4e2d\u7684\u5b57\u7b26\u90fd\u662f\u76f8\u540c\u7684\uff0c\u4f46\u5b57\u7b26\u4e32 s \u4e2d\u6ca1\u6709\u5b57\u7b26\uff0c\u5219\u8fd4\u56de -1\u3002\n        # \u5982\u679c\u5b57\u7b26\u4e32 s \u4e2d\u7684\u5b57\u7b26\u90fd\u662f\u76f8\u540c\u7684\uff0c\u4f46\u5b57\u7b26\u4e32 s \u4e2d\u53ea\u6709\u4e00\u4e2a\u5b57\u7b26\uff0c\u5219\u8fd4\u56de 0\u3002\n        # \u5982\u679c\u5b57\u7b26\u4e32 s \u4e2d\u7684\u5b57\u7b26\u90fd\u662f\u76f8\u540c\u7684\uff0c\u4f46\u5b57\u7b26\u4e32 s \u4e2d\u6ca1\u6709\u5b57\u7b26\uff0c\u5219\u8fd4\u56de -1\u3002\n        # \u5982\u679c\u5b57\u7b26\u4e32 s \u4e2d\u7684\u5b57\u7b26\u90fd\u662f\u76f8\u540c\u7684\uff0c\u4f46\u5b57\u7b26\u4e32 s \u4e2d\u53ea\u6709\u4e00\u4e2a\u5b57\u7b26\uff0c\u5219\u8fd4\u56de 0\u3002\n        # \u5982\u679c\u5b57\u7b26\u4e32 s \u4e2d\u7684\u5b57\u7b26\u90fd\u662f\u76f8\u540c\u7684\uff0c\u4f46\u5b57\u7b26\u4e32 s \u4e2d\u6ca1\u6709\u5b57\u7b26\uff0c\u5219\u8fd4\u56de -1\u3002\n        # \u5982\u679c\u5b57\u7b26\u4e32 s \u4e2d\u7684\u5b57\u7b26\u90fd\u662f\u76f8\u540c\u7684\uff0c\u4f46\u5b57\u7b26\u4e32 s \u4e2d\u53ea\u6709\u4e00\u4e2a\u5b57\u7b26\uff0c\u5219\u8fd4\u56de 0\u3002\n        # \u5982\u679c\u5b57\u7b26\u4e32 s \u4e2d\u7684\u5b57\u7b26\u90fd\u662f\u76f8\u540c\u7684\uff0c\u4f46\u5b57\u7b26\u4e32 s \u4e2d\u6ca1\u6709\u5b57\u7b26\uff0c\u5219\u8fd4\u56de -1\u3002\n        # \u5982\u679c\u5b57\u7b26\u4e32 s \u4e2d\u7684\u5b57\u7b26\u90fd\u662f\u76f8\u540c\u7684\uff0c\u4f46\u5b57\u7b26\u4e32 s \u4e2d\u53ea\u6709\u4e00\u4e2a\u5b57\u7b26\uff0c\u5219\u8fd4\u56de 0\u3002\n        # \u5982\u679c\u5b57\u7b26\u4e32 s \u4e2d\u7684\u5b57\u7b26\u90fd\u662f\u76f8\u540c\u7684\uff0c\u4f46\u5b57\u7b26\u4e32 s \u4e2d\u6ca1"}], "contains-duplicate-iii": [{"task_id": "contains-duplicate-iii", "completion": "class Solution(object):\n    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff):\n        \"\"\"\n        :type nums: List[int]\n        :type indexDiff: int\n        :type valueDiff: int\n        :rtype: bool\n        \"\"\"\n        \n        # M1. \u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u5176\u4e2d n \u662f\u6570\u7ec4 nums \u7684\u957f\u5ea6\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u5176\u4e2d n \u662f\u6570\u7ec4 nums \u7684\u957f\u5ea6\u3002\n        # \u54c8\u5e0c\u8868\u7684\u5927\u5c0f\u4e3a n\uff0c\u54c8\u5e0c\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u957f\u5ea6\u4e3a 2 \u7684\u5217\u8868\u3002\n        # \u54c8\u5e0c\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u957f\u5ea6\u4e3a 2 \u7684\u5217\u8868\uff0c\u5206\u522b\u5b58\u50a8\u4e86\u8be5\u5143\u7d20\u7684\u503c\u548c\u7d22\u5f15\u3002\n        # \u56e0\u6b64\uff0c\u54c8\u5e0c\u8868\u7684\u5927\u5c0f\u4e3a O(n)\uff0c\u54c8\u5e0c\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u7684\u5927\u5c0f\u4e3a O(2)\uff0c\u56e0\u6b64\u603b\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a O(n)\u3002\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u5176\u4e2d n \u662f\u6570\u7ec4 nums \u7684\u957f\u5ea6\u3002\n        # \u6211\u4eec\u626b\u63cf\u6570\u7ec4 nums \u4e00\u6b21\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u7d22\u5f15 i\uff0c\u6211\u4eec\u68c0\u67e5 nums[i] \u662f\u5426\u5728\u7a97\u53e3 [i - indexDiff, i + indexDiff] \u4e2d\u3002\n        # \u5982\u679c\u5728\uff0c\u6211\u4eec\u68c0\u67e5 nums[i] \u548c\u7a97\u53e3\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u7684\u5dee\u503c\u662f\u5426\u5c0f\u4e8e\u7b49\u4e8e valueDiff\u3002\n        # \u5982\u679c\u6ee1\u8db3\uff0c\u6211\u4eec\u8fd4\u56de true\uff0c\u5426\u5219\u7ee7\u7eed\u626b\u63cf\u3002\n        # \u5982\u679c\u626b\u63cf\u5b8c\u6bd5\uff0c\u6211\u4eec\u8fd4\u56de false\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u5176\u4e2d n \u662f\u6570\u7ec4 nums \u7684\u957f\u5ea6\u3002\n        # \u6211\u4eec\u9700\u8981\u4e00\u4e2a\u54c8\u5e0c\u8868\u6765\u5b58\u50a8\u7a97\u53e3\u4e2d\u7684\u5143\u7d20\u3002\n        # \u54c8\u5e0c\u8868\u7684\u5927\u5c0f\u4e3a O(n)\uff0c\u54c8\u5e0c\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u957f\u5ea6\u4e3a 2 \u7684\u5217\u8868\u3002\n        # \u54c8\u5e0c\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u957f\u5ea6\u4e3a 2 \u7684\u5217\u8868\uff0c\u5206\u522b\u5b58\u50a8\u4e86\u8be5\u5143\u7d20\u7684\u503c\u548c\u7d22\u5f15\u3002\n        # \u56e0\u6b64\uff0c\u54c8\u5e0c\u8868\u7684\u5927\u5c0f\u4e3a O(n)\uff0c\u54c8\u5e0c\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u7684\u5927\u5c0f\u4e3a O(2)\uff0c\u56e0\u6b64\u603b\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a O(n)\u3002\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u5176\u4e2d n \u662f\u6570\u7ec4 nums \u7684\u957f\u5ea6\u3002\n        # \u6211\u4eec\u626b\u63cf\u6570\u7ec4 nums \u4e00\u6b21\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u7d22\u5f15 i\uff0c\u6211\u4eec\u68c0\u67e5 nums[i] \u662f\u5426\u5728\u7a97\u53e3 [i - indexDiff, i + indexDiff] \u4e2d\u3002\n        # \u5982\u679c\u5728\uff0c\u6211\u4eec\u68c0\u67e5 nums[i] \u548c\u7a97\u53e3\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u7684\u5dee\u503c\u662f\u5426\u5c0f\u4e8e\u7b49\u4e8e valueDiff\u3002\n        # \u5982\u679c\u6ee1\u8db3\uff0c\u6211\u4eec\u8fd4\u56de true\uff0c\u5426\u5219\u7ee7\u7eed\u626b\u63cf\u3002\n        # \u5982\u679c\u626b\u63cf\u5b8c\u6bd5\uff0c\u6211\u4eec\u8fd4\u56de false\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u5176\u4e2d n \u662f\u6570\u7ec4 nums \u7684\u957f\u5ea6\u3002\n        # \u6211\u4eec\u9700\u8981\u4e00\u4e2a\u54c8\u5e0c\u8868\u6765\u5b58\u50a8\u7a97\u53e3\u4e2d\u7684\u5143\u7d20\u3002\n        # \u54c8\u5e0c\u8868\u7684\u5927\u5c0f\u4e3a O(n)\uff0c\u54c8\u5e0c\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u957f\u5ea6\u4e3a 2 \u7684\u5217\u8868\u3002\n        # \u54c8\u5e0c\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u957f\u5ea6\u4e3a 2 \u7684\u5217\u8868\uff0c\u5206\u522b\u5b58\u50a8\u4e86\u8be5\u5143\u7d20\u7684\u503c\u548c\u7d22\u5f15\u3002\n        # \u56e0\u6b64\uff0c\u54c8\u5e0c\u8868\u7684\u5927\u5c0f\u4e3a O(n)\uff0c\u54c8\u5e0c\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u7684\u5927\u5c0f\u4e3a O(2)\uff0c\u56e0\u6b64\u603b\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a O(n)\u3002"}, {"task_id": "contains-duplicate-iii", "completion": "class Solution(object):\n    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff):\n        \"\"\"\n        :type nums: List[int]\n        :type indexDiff: int\n        :type valueDiff: int\n        :rtype: bool\n        \"\"\"\n        \n        # M1. \u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u5176\u4e2d n \u662f\u6570\u7ec4 nums \u7684\u957f\u5ea6\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u5176\u4e2d n \u662f\u6570\u7ec4 nums \u7684\u957f\u5ea6\u3002\n        # \u54c8\u5e0c\u8868\u7684\u5927\u5c0f\u4e3a n\uff0c\u54c8\u5e0c\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u9700\u8981\u5b58\u50a8\u4e00\u4e2a\u503c\uff0c\u56e0\u6b64\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a O(n)\u3002\n        # \n        # \u5bf9\u4e8e\u6bcf\u4e2a\u5143\u7d20\uff0c\u6211\u4eec\u9700\u8981\u68c0\u67e5\u5176\u662f\u5426\u5728\u7a97\u53e3\u5185\uff0c\u5e76\u4e14\u662f\u5426\u4e0e\u5176\u4ed6\u5143\u7d20\u76f8\u7b49\u3002\n        # \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u54c8\u5e0c\u8868\u6765\u7ef4\u62a4\u7a97\u53e3\uff0c\u5e76\u4e14\u5728\u7a97\u53e3\u4e2d\u68c0\u67e5\u6bcf\u4e2a\u5143\u7d20\u662f\u5426\u5b58\u5728\u3002\n        # \u5982\u679c\u5b58\u5728\uff0c\u6211\u4eec\u9700\u8981\u68c0\u67e5\u5176\u503c\u662f\u5426\u5728 valueDiff \u8303\u56f4\u5185\u3002\n        # \u5982\u679c\u5b58\u5728\uff0c\u6211\u4eec\u9700\u8981\u68c0\u67e5\u5176\u7d22\u5f15\u662f\u5426\u5728 indexDiff \u8303\u56f4\u5185\u3002\n        # \u5982\u679c\u5b58\u5728\uff0c\u6211\u4eec\u9700\u8981\u68c0\u67e5\u5176\u7d22\u5f15\u662f\u5426\u4e0d\u7b49\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u7d22\u5f15\u3002\n        # \u5982\u679c\u5b58\u5728\uff0c\u6211\u4eec\u9700\u8981\u68c0\u67e5\u5176\u503c\u662f\u5426\u7b49\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u503c\u3002\n        # \u5982\u679c\u5b58\u5728\uff0c\u6211\u4eec\u9700\u8981\u68c0\u67e5\u5176\u7d22\u5f15\u662f\u5426\u4e0d\u7b49\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u7d22\u5f15\u3002\n        # \u5982\u679c\u5b58\u5728\uff0c\u6211\u4eec\u9700\u8981\u68c0\u67e5\u5176\u503c\u662f\u5426\u7b49\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u503c\u3002\n        # \u5982\u679c\u5b58\u5728\uff0c\u6211\u4eec\u9700\u8981\u68c0\u67e5\u5176\u7d22\u5f15\u662f\u5426\u4e0d\u7b49\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u7d22\u5f15\u3002\n        # \u5982\u679c\u5b58\u5728\uff0c\u6211\u4eec\u9700\u8981\u68c0\u67e5\u5176\u503c\u662f\u5426\u7b49\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u503c\u3002\n        # \u5982\u679c\u5b58\u5728\uff0c\u6211\u4eec\u9700\u8981\u68c0\u67e5\u5176\u7d22\u5f15\u662f\u5426\u4e0d\u7b49\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u7d22\u5f15\u3002\n        # \u5982\u679c\u5b58\u5728\uff0c\u6211\u4eec\u9700\u8981\u68c0\u67e5\u5176\u503c\u662f\u5426\u7b49\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u503c\u3002\n        # \u5982\u679c\u5b58\u5728\uff0c\u6211\u4eec\u9700\u8981\u68c0\u67e5\u5176\u7d22\u5f15\u662f\u5426\u4e0d\u7b49\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u7d22\u5f15\u3002\n        # \u5982\u679c\u5b58\u5728\uff0c\u6211\u4eec\u9700\u8981\u68c0\u67e5\u5176\u503c\u662f\u5426\u7b49\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u503c\u3002\n        # \u5982\u679c\u5b58\u5728\uff0c\u6211\u4eec\u9700\u8981\u68c0\u67e5\u5176\u7d22\u5f15\u662f\u5426\u4e0d\u7b49\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u7d22\u5f15\u3002\n        # \u5982\u679c\u5b58\u5728\uff0c\u6211\u4eec\u9700\u8981\u68c0\u67e5\u5176\u503c\u662f\u5426\u7b49\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u503c\u3002\n        # \u5982\u679c\u5b58\u5728\uff0c\u6211\u4eec\u9700\u8981\u68c0\u67e5\u5176\u7d22\u5f15\u662f\u5426\u4e0d\u7b49\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u7d22\u5f15\u3002\n        # \u5982\u679c\u5b58\u5728\uff0c\u6211\u4eec\u9700\u8981\u68c0\u67e5\u5176\u503c\u662f\u5426\u7b49\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u503c\u3002\n        # \u5982\u679c\u5b58\u5728\uff0c\u6211\u4eec\u9700\u8981\u68c0\u67e5\u5176\u7d22\u5f15\u662f\u5426\u4e0d\u7b49\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u7d22\u5f15\u3002\n        # \u5982\u679c\u5b58\u5728\uff0c\u6211\u4eec\u9700\u8981\u68c0\u67e5\u5176\u503c\u662f\u5426\u7b49\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u503c\u3002\n        # \u5982\u679c\u5b58\u5728\uff0c\u6211\u4eec\u9700\u8981\u68c0\u67e5\u5176\u7d22\u5f15\u662f\u5426\u4e0d\u7b49\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u7d22\u5f15\u3002\n        # \u5982\u679c\u5b58\u5728\uff0c\u6211\u4eec\u9700\u8981\u68c0\u67e5\u5176\u503c\u662f\u5426\u7b49\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u503c\u3002\n        # \u5982\u679c\u5b58\u5728\uff0c\u6211\u4eec\u9700\u8981\u68c0\u67e5\u5176\u7d22\u5f15\u662f\u5426\u4e0d\u7b49\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u7d22\u5f15\u3002\n        # \u5982\u679c\u5b58\u5728\uff0c\u6211\u4eec\u9700\u8981\u68c0\u67e5\u5176\u503c\u662f\u5426\u7b49\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u503c\u3002\n        # \u5982\u679c\u5b58\u5728\uff0c\u6211\u4eec\u9700\u8981\u68c0\u67e5\u5176\u7d22\u5f15\u662f\u5426\u4e0d\u7b49\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u7d22\u5f15\u3002\n        # \u5982\u679c\u5b58\u5728\uff0c\u6211\u4eec\u9700\u8981\u68c0\u67e5\u5176\u503c\u662f\u5426\u7b49\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u503c\u3002\n        # \u5982\u679c\u5b58\u5728\uff0c\u6211\u4eec\u9700\u8981\u68c0\u67e5\u5176\u7d22\u5f15\u662f\u5426\u4e0d\u7b49\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u7d22\u5f15\u3002\n        # \u5982\u679c\u5b58\u5728\uff0c"}, {"task_id": "contains-duplicate-iii", "completion": "class Solution(object):\n    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff):\n        \"\"\"\n        :type nums: List[int]\n        :type indexDiff: int\n        :type valueDiff: int\n        :rtype: bool\n        \"\"\"\n        \n        # M1. \u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u5176\u4e2d n \u662f\u6570\u7ec4 nums \u7684\u957f\u5ea6\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u5176\u4e2d n \u662f\u6570\u7ec4 nums \u7684\u957f\u5ea6\u3002\n        # \n        # \u6211\u4eec\u4f7f\u7528\u54c8\u5e0c\u8868\u5b58\u50a8\u6bcf\u4e2a\u5143\u7d20\u53ca\u5176\u6700\u8fd1\u7684\u4e00\u4e2a\u51fa\u73b0\u4f4d\u7f6e\u3002\n        # \u5982\u679c\u5b58\u5728\u4e00\u4e2a\u4f4d\u7f6e i \u6ee1\u8db3 abs(nums[i] - nums[j]) <= valueDiff \u4e14 abs(i - j) <= indexDiff\uff0c\n        # \u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u8fd4\u56de true \u3002\n        # \u5982\u679c\u6211\u4eec\u904d\u5386\u5b8c\u6574\u4e2a\u6570\u7ec4\uff0c\u4ecd\u7136\u6ca1\u6709\u627e\u5230\u6ee1\u8db3\u6761\u4ef6\u7684\u5143\u7d20\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u8fd4\u56de false \u3002\n        # \n        # \u8fd9\u91cc\u7684\u54c8\u5e0c\u8868\u7684 key \u662f nums[i] \uff0cvalue \u662f i \u3002\n        # \u5982\u679c\u6211\u4eec\u9047\u5230 nums[i] \u5df2\u7ecf\u5728\u54c8\u5e0c\u8868\u4e2d\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u68c0\u67e5 nums[i] \u548c nums[j] \u4e4b\u95f4\u7684\u8ddd\u79bb\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\u3002\n        # \u5982\u679c\u6ee1\u8db3\u6761\u4ef6\uff0c\u6211\u4eec\u5c31\u8fd4\u56de true \u3002\n        # \u5982\u679c\u4e0d\u6ee1\u8db3\u6761\u4ef6\uff0c\u6211\u4eec\u5c31\u66f4\u65b0\u54c8\u5e0c\u8868\u4e2d\u7684 value \u4e3a i \u3002\n        # \n        # \u5982\u679c\u6211\u4eec\u904d\u5386\u5b8c\u6574\u4e2a\u6570\u7ec4\uff0c\u4ecd\u7136\u6ca1\u6709\u627e\u5230\u6ee1\u8db3\u6761\u4ef6\u7684\u5143\u7d20\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u8fd4\u56de false \u3002\n        # \n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u5176\u4e2d n \u662f\u6570\u7ec4 nums \u7684\u957f\u5ea6\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u5176\u4e2d n \u662f\u6570\u7ec4 nums \u7684\u957f\u5ea6\u3002\n        # \n        # \u6211\u4eec\u4f7f\u7528\u54c8\u5e0c\u8868\u5b58\u50a8\u6bcf\u4e2a\u5143\u7d20\u53ca\u5176\u6700\u8fd1\u7684\u4e00\u4e2a\u51fa\u73b0\u4f4d\u7f6e\u3002\n        # \u5982\u679c\u5b58\u5728\u4e00\u4e2a\u4f4d\u7f6e i \u6ee1\u8db3 abs(nums[i] - nums[j]) <= valueDiff \u4e14 abs(i - j) <= indexDiff\uff0c\n        # \u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u8fd4\u56de true \u3002\n        # \u5982\u679c\u6211\u4eec\u904d\u5386\u5b8c\u6574\u4e2a\u6570\u7ec4\uff0c\u4ecd\u7136\u6ca1\u6709\u627e\u5230\u6ee1\u8db3\u6761\u4ef6\u7684\u5143\u7d20\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u8fd4\u56de false \u3002\n        # \n        # \u8fd9\u91cc\u7684\u54c8\u5e0c\u8868\u7684 key \u662f nums[i] \uff0cvalue \u662f i \u3002\n        # \u5982\u679c\u6211\u4eec\u9047\u5230 nums[i] \u5df2\u7ecf\u5728\u54c8\u5e0c\u8868\u4e2d\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u68c0\u67e5 nums[i] \u548c nums[j] \u4e4b\u95f4\u7684\u8ddd\u79bb\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\u3002\n        # \u5982\u679c\u6ee1\u8db3\u6761\u4ef6\uff0c\u6211\u4eec\u5c31\u8fd4\u56de true \u3002\n        # \u5982\u679c\u4e0d\u6ee1\u8db3\u6761\u4ef6\uff0c\u6211\u4eec\u5c31\u66f4\u65b0\u54c8\u5e0c\u8868\u4e2d\u7684 value \u4e3a i \u3002\n        # \n        # \u5982\u679c\u6211\u4eec\u904d\u5386\u5b8c\u6574\u4e2a\u6570\u7ec4\uff0c\u4ecd\u7136\u6ca1\u6709\u627e\u5230\u6ee1\u8db3\u6761\u4ef6\u7684\u5143\u7d20\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u8fd4\u56de false \u3002\n        # \n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u5176\u4e2d n \u662f\u6570\u7ec4 nums \u7684\u957f\u5ea6\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u5176\u4e2d n \u662f\u6570\u7ec4 nums \u7684\u957f\u5ea6\u3002\n        # \n        # \u6211\u4eec\u4f7f\u7528\u54c8\u5e0c\u8868\u5b58\u50a8\u6bcf\u4e2a\u5143\u7d20\u53ca\u5176\u6700\u8fd1\u7684\u4e00\u4e2a\u51fa\u73b0\u4f4d\u7f6e\u3002\n        # \u5982\u679c\u5b58\u5728\u4e00\u4e2a\u4f4d\u7f6e i \u6ee1\u8db3 abs(nums[i] - nums[j]) <= valueDiff \u4e14 abs(i - j) <= indexDiff\uff0c\n        # \u90a3\u4e48\u6211\u4eec"}, {"task_id": "contains-duplicate-iii", "completion": "class Solution(object):\n    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff):\n        \"\"\"\n        :type nums: List[int]\n        :type indexDiff: int\n        :type valueDiff: int\n        :rtype: bool\n        \"\"\"\n        \n        # M1. \u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u5176\u4e2d n \u662f\u6570\u7ec4 nums \u7684\u957f\u5ea6\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u5176\u4e2d n \u662f\u6570\u7ec4 nums \u7684\u957f\u5ea6\u3002\n        # \u54c8\u5e0c\u8868\u7684\u5927\u5c0f\u4e3a n\uff0c\u54c8\u5e0c\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u957f\u5ea6\u4e3a 2 \u7684\u5217\u8868\u3002\n        # \u54c8\u5e0c\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u957f\u5ea6\u4e3a 2 \u7684\u5217\u8868\uff0c\u5206\u522b\u5b58\u50a8\u4e86\u8be5\u5143\u7d20\u7684\u503c\u548c\u7d22\u5f15\u3002\n        # \u54c8\u5e0c\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u957f\u5ea6\u4e3a 2 \u7684\u5217\u8868\uff0c\u5206\u522b\u5b58\u50a8\u4e86\u8be5\u5143\u7d20\u7684\u503c\u548c\u7d22\u5f15\u3002\n        # \u54c8\u5e0c\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u957f\u5ea6\u4e3a 2 \u7684\u5217\u8868\uff0c\u5206\u522b\u5b58\u50a8\u4e86\u8be5\u5143\u7d20\u7684\u503c\u548c\u7d22\u5f15\u3002\n        # \u54c8\u5e0c\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u957f\u5ea6\u4e3a 2 \u7684\u5217\u8868\uff0c\u5206\u522b\u5b58\u50a8\u4e86\u8be5\u5143\u7d20\u7684\u503c\u548c\u7d22\u5f15\u3002\n        # \u54c8\u5e0c\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u957f\u5ea6\u4e3a 2 \u7684\u5217\u8868\uff0c\u5206\u522b\u5b58\u50a8\u4e86\u8be5\u5143\u7d20\u7684\u503c\u548c\u7d22\u5f15\u3002\n        # \u54c8\u5e0c\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u957f\u5ea6\u4e3a 2 \u7684\u5217\u8868\uff0c\u5206\u522b\u5b58\u50a8\u4e86\u8be5\u5143\u7d20\u7684\u503c\u548c\u7d22\u5f15\u3002\n        # \u54c8\u5e0c\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u957f\u5ea6\u4e3a 2 \u7684\u5217\u8868\uff0c\u5206\u522b\u5b58\u50a8\u4e86\u8be5\u5143\u7d20\u7684\u503c\u548c\u7d22\u5f15\u3002\n        # \u54c8\u5e0c\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u957f\u5ea6\u4e3a 2 \u7684\u5217\u8868\uff0c\u5206\u522b\u5b58\u50a8\u4e86\u8be5\u5143\u7d20\u7684\u503c\u548c\u7d22\u5f15\u3002\n        # \u54c8\u5e0c\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u957f\u5ea6\u4e3a 2 \u7684\u5217\u8868\uff0c\u5206\u522b\u5b58\u50a8\u4e86\u8be5\u5143\u7d20\u7684\u503c\u548c\u7d22\u5f15\u3002\n        # \u54c8\u5e0c\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u957f\u5ea6\u4e3a 2 \u7684\u5217\u8868\uff0c\u5206\u522b\u5b58\u50a8\u4e86\u8be5\u5143\u7d20\u7684\u503c\u548c\u7d22\u5f15\u3002\n        # \u54c8\u5e0c\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u957f\u5ea6\u4e3a 2 \u7684\u5217\u8868\uff0c\u5206\u522b\u5b58\u50a8\u4e86\u8be5\u5143\u7d20\u7684\u503c\u548c\u7d22\u5f15\u3002\n        # \u54c8\u5e0c\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u957f\u5ea6\u4e3a 2 \u7684\u5217\u8868\uff0c\u5206\u522b\u5b58\u50a8\u4e86\u8be5\u5143\u7d20\u7684\u503c\u548c\u7d22\u5f15\u3002\n        # \u54c8\u5e0c\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u957f\u5ea6\u4e3a 2 \u7684\u5217\u8868\uff0c\u5206\u522b\u5b58\u50a8\u4e86\u8be5\u5143\u7d20\u7684\u503c\u548c\u7d22\u5f15\u3002\n        # \u54c8\u5e0c\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u957f\u5ea6\u4e3a 2 \u7684\u5217\u8868\uff0c\u5206\u522b\u5b58\u50a8\u4e86\u8be5\u5143\u7d20\u7684\u503c\u548c\u7d22\u5f15\u3002\n        # \u54c8\u5e0c\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u957f\u5ea6\u4e3a 2 \u7684\u5217\u8868\uff0c\u5206\u522b\u5b58\u50a8\u4e86\u8be5\u5143\u7d20\u7684\u503c\u548c\u7d22\u5f15\u3002\n        # \u54c8\u5e0c\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u957f\u5ea6\u4e3a 2 \u7684\u5217\u8868\uff0c\u5206\u522b\u5b58\u50a8\u4e86\u8be5\u5143\u7d20\u7684\u503c\u548c\u7d22\u5f15\u3002\n        # \u54c8\u5e0c\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u957f\u5ea6\u4e3a 2 \u7684\u5217\u8868\uff0c\u5206\u522b\u5b58\u50a8\u4e86\u8be5\u5143\u7d20\u7684\u503c\u548c\u7d22\u5f15\u3002\n        # \u54c8\u5e0c\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u957f\u5ea6\u4e3a 2 \u7684\u5217\u8868\uff0c\u5206\u522b\u5b58\u50a8\u4e86\u8be5\u5143\u7d20\u7684\u503c\u548c\u7d22\u5f15\u3002\n        # \u54c8\u5e0c\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u957f\u5ea6\u4e3a 2 \u7684\u5217\u8868\uff0c\u5206\u522b\u5b58\u50a8\u4e86\u8be5\u5143\u7d20\u7684\u503c\u548c\u7d22\u5f15\u3002\n        # \u54c8\u5e0c\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00"}, {"task_id": "contains-duplicate-iii", "completion": "class Solution(object):\n    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff):\n        \"\"\"\n        :type nums: List[int]\n        :type indexDiff: int\n        :type valueDiff: int\n        :rtype: bool\n        \"\"\"\n        \n        # M1. \u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u627e\u5230\u4e00\u4e2a\u6570\u5b57\uff0c\u7136\u540e\u68c0\u67e5\u5176\u4ed6\u6570\u5b57\u662f\u5426\u5728valueDiff\u8303\u56f4\u5185\n        # \u5982\u679c\u627e\u5230\uff0c\u5219\u8fd4\u56deTrue\n        # \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u5219\u5c06\u8be5\u6570\u5b57\u52a0\u5165\u54c8\u5e0c\u8868\n        # \u5982\u679c\u54c8\u5e0c\u8868\u5df2\u6ee1\uff0c\u5219\u5220\u9664\u6700\u65e9\u7684\u6570\u5b57\n        # \u5982\u679c\u54c8\u5e0c\u8868\u4e2d\u6ca1\u6709\u6570\u5b57\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u54c8\u5e0c\u8868\u4e2d\u6709\u6570\u5b57\uff0c\u5219\u8fd4\u56deTrue\n        # \u5982\u679c\u54c8\u5e0c\u8868\u4e2d\u6709\u6570\u5b57\uff0c\u5219\u8fd4\u56deTrue\n        # \u5982\u679c\u54c8\u5e0c\u8868\u4e2d\u6ca1\u6709\u6570\u5b57\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u54c8\u5e0c\u8868\u4e2d\u6ca1\u6709\u6570\u5b57\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u54c8\u5e0c\u8868\u4e2d\u6ca1\u6709\u6570\u5b57\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u54c8\u5e0c\u8868\u4e2d\u6ca1\u6709\u6570\u5b57\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u54c8\u5e0c\u8868\u4e2d\u6ca1\u6709\u6570\u5b57\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u54c8\u5e0c\u8868\u4e2d\u6ca1\u6709\u6570\u5b57\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u54c8\u5e0c\u8868\u4e2d\u6ca1\u6709\u6570\u5b57\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u54c8\u5e0c\u8868\u4e2d\u6ca1\u6709\u6570\u5b57\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u54c8\u5e0c\u8868\u4e2d\u6ca1\u6709\u6570\u5b57\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u54c8\u5e0c\u8868\u4e2d\u6ca1\u6709\u6570\u5b57\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u54c8\u5e0c\u8868\u4e2d\u6ca1\u6709\u6570\u5b57\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u54c8\u5e0c\u8868\u4e2d\u6ca1\u6709\u6570\u5b57\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u54c8\u5e0c\u8868\u4e2d\u6ca1\u6709\u6570\u5b57\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u54c8\u5e0c\u8868\u4e2d\u6ca1\u6709\u6570\u5b57\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u54c8\u5e0c\u8868\u4e2d\u6ca1\u6709\u6570\u5b57\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u54c8\u5e0c\u8868\u4e2d\u6ca1\u6709\u6570\u5b57\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u54c8\u5e0c\u8868\u4e2d\u6ca1\u6709\u6570\u5b57\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u54c8\u5e0c\u8868\u4e2d\u6ca1\u6709\u6570\u5b57\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u54c8\u5e0c\u8868\u4e2d\u6ca1\u6709\u6570\u5b57\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u54c8\u5e0c\u8868\u4e2d\u6ca1\u6709\u6570\u5b57\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u54c8\u5e0c\u8868\u4e2d\u6ca1\u6709\u6570\u5b57\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u54c8\u5e0c\u8868\u4e2d\u6ca1\u6709\u6570\u5b57\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u54c8\u5e0c\u8868\u4e2d\u6ca1\u6709\u6570\u5b57\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u54c8\u5e0c\u8868\u4e2d\u6ca1\u6709\u6570\u5b57\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u54c8\u5e0c\u8868\u4e2d\u6ca1\u6709\u6570\u5b57\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u54c8\u5e0c\u8868\u4e2d\u6ca1\u6709\u6570\u5b57\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u54c8\u5e0c\u8868\u4e2d\u6ca1\u6709\u6570\u5b57\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u54c8\u5e0c\u8868\u4e2d\u6ca1\u6709\u6570\u5b57\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u54c8\u5e0c\u8868\u4e2d\u6ca1\u6709\u6570\u5b57\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u54c8\u5e0c\u8868\u4e2d\u6ca1\u6709\u6570\u5b57\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u54c8\u5e0c\u8868\u4e2d\u6ca1\u6709\u6570\u5b57\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u54c8\u5e0c\u8868\u4e2d\u6ca1\u6709\u6570\u5b57\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u54c8\u5e0c\u8868\u4e2d\u6ca1\u6709\u6570\u5b57\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u54c8\u5e0c\u8868\u4e2d\u6ca1\u6709\u6570\u5b57\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u54c8\u5e0c\u8868\u4e2d\u6ca1\u6709\u6570\u5b57\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u54c8\u5e0c\u8868\u4e2d\u6ca1\u6709\u6570\u5b57\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u54c8\u5e0c\u8868\u4e2d\u6ca1\u6709\u6570\u5b57\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u54c8\u5e0c\u8868\u4e2d\u6ca1\u6709\u6570\u5b57\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u54c8\u5e0c\u8868\u4e2d\u6ca1\u6709\u6570\u5b57\uff0c\u5219\u8fd4\u56deFalse"}], "sort-colors": [{"task_id": "sort-colors", "completion": "class Solution(object):\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2"}, {"task_id": "sort-colors", "completion": "class Solution(object):\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2"}, {"task_id": "sort-colors", "completion": "class Solution(object):\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2"}, {"task_id": "sort-colors", "completion": "class Solution(object):\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2"}, {"task_id": "sort-colors", "completion": "class Solution(object):\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2"}], "max-consecutive-ones": [{"task_id": "max-consecutive-ones", "completion": "class Solution(object):\n    def findMaxConsecutiveOnes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # M1. \u66b4\u529b\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u6700\u957f\u7684\u8fde\u7eed1\u7684\u957f\u5ea6\n        # \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u957f\u7684\u8fde\u7eed1\u7684\u957f\u5ea6\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u4e3a1\uff0c\u5219\u7d2f\u52a0\u957f\u5ea6\uff0c\u5426\u5219\u91cd\u7f6e\u957f\u5ea6\n        # \u6700\u540e\u8fd4\u56de\u6700\u957f\u7684\u8fde\u7eed1\u7684\u957f\u5ea6\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\uff0c\u5176\u4e2d n \u662f\u6570\u7ec4\u7684\u957f\u5ea6\u3002\n        # \u6211\u4eec\u9700\u8981\u904d\u5386\u6570\u7ec4\u4e24\u6b21\uff0c\u7b2c\u4e00\u6b21\u904d\u5386\u627e\u5230\u6700\u957f\u7684\u8fde\u7eed1\u7684\u957f\u5ea6\uff0c\u7b2c\u4e8c\u6b21\u904d\u5386\u627e\u5230\u6700\u77ed\u7684\u8fde\u7eed0\u7684\u957f\u5ea6\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5e38\u6570\u7684\u7a7a\u95f4\u5b58\u653e\u82e5\u5e72\u53d8\u91cf\u3002\n        # \u627e\u5230\u6700\u957f\u7684\u8fde\u7eed1\u7684\u957f\u5ea6\n        # \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u957f\u7684\u8fde\u7eed1\u7684\u957f\u5ea6\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u4e3a1\uff0c\u5219\u7d2f\u52a0\u957f\u5ea6\uff0c\u5426\u5219\u91cd\u7f6e\u957f\u5ea6\n        # \u6700\u540e\u8fd4\u56de\u6700\u957f\u7684\u8fde\u7eed1\u7684\u957f\u5ea6\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\uff0c\u5176\u4e2d n \u662f\u6570\u7ec4\u7684\u957f\u5ea6\u3002\n        # \u6211\u4eec\u9700\u8981\u904d\u5386\u6570\u7ec4\u4e24\u6b21\uff0c\u7b2c\u4e00\u6b21\u904d\u5386\u627e\u5230\u6700\u957f\u7684\u8fde\u7eed1\u7684\u957f\u5ea6\uff0c\u7b2c\u4e8c\u6b21\u904d\u5386\u627e\u5230\u6700\u77ed\u7684\u8fde\u7eed0\u7684\u957f\u5ea6\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5e38\u6570\u7684\u7a7a\u95f4\u5b58\u653e\u82e5\u5e72\u53d8\u91cf\u3002\n        # \u627e\u5230\u6700\u957f\u7684\u8fde\u7eed1\u7684\u957f\u5ea6\n        # \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u957f\u7684\u8fde\u7eed1\u7684\u957f\u5ea6\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u4e3a1\uff0c\u5219\u7d2f\u52a0\u957f\u5ea6\uff0c\u5426\u5219\u91cd\u7f6e\u957f\u5ea6\n        # \u6700\u540e\u8fd4\u56de\u6700\u957f\u7684\u8fde\u7eed1\u7684\u957f\u5ea6\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\uff0c\u5176\u4e2d n \u662f\u6570\u7ec4\u7684\u957f\u5ea6\u3002\n        # \u6211\u4eec\u9700\u8981\u904d\u5386\u6570\u7ec4\u4e24\u6b21\uff0c\u7b2c\u4e00\u6b21\u904d\u5386\u627e\u5230\u6700\u957f\u7684\u8fde\u7eed1\u7684\u957f\u5ea6\uff0c\u7b2c\u4e8c\u6b21\u904d\u5386\u627e\u5230\u6700\u77ed\u7684\u8fde\u7eed0\u7684\u957f\u5ea6\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5e38\u6570\u7684\u7a7a\u95f4\u5b58\u653e\u82e5\u5e72\u53d8\u91cf\u3002\n        # \u627e\u5230\u6700\u957f\u7684\u8fde\u7eed1\u7684\u957f\u5ea6\n        # \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u957f\u7684\u8fde\u7eed1\u7684\u957f\u5ea6\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u4e3a1\uff0c\u5219\u7d2f\u52a0\u957f\u5ea6\uff0c\u5426\u5219\u91cd\u7f6e\u957f\u5ea6\n        # \u6700\u540e\u8fd4\u56de\u6700\u957f\u7684\u8fde\u7eed1\u7684\u957f\u5ea6\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\uff0c\u5176\u4e2d n \u662f\u6570\u7ec4\u7684\u957f\u5ea6\u3002\n        # \u6211\u4eec\u9700\u8981\u904d\u5386\u6570\u7ec4\u4e24\u6b21\uff0c\u7b2c\u4e00\u6b21\u904d\u5386\u627e\u5230\u6700\u957f\u7684\u8fde\u7eed1\u7684\u957f\u5ea6\uff0c\u7b2c\u4e8c\u6b21\u904d\u5386\u627e\u5230\u6700\u77ed\u7684\u8fde\u7eed0\u7684\u957f\u5ea6\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5e38\u6570\u7684\u7a7a\u95f4\u5b58\u653e\u82e5\u5e72\u53d8\u91cf\u3002\n        # \u627e\u5230\u6700\u957f\u7684\u8fde\u7eed1\u7684\u957f\u5ea6\n        # \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u957f\u7684\u8fde\u7eed1\u7684\u957f\u5ea6\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u4e3a1"}, {"task_id": "max-consecutive-ones", "completion": "class Solution(object):\n    def findMaxConsecutiveOnes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Runtime: 28 ms, faster than 99.57% of Python3 online submissions for Max Consecutive Ones.\n        # Memory Usage: 13.5 MB, less than 5.00% of Python3 online submissions for Max Consecutive Ones.\n        \n        # M1. \u66b4\u529b\u89e3\u6cd5\n        # \u904d\u5386\u6570\u7ec4\uff0c\u7edf\u8ba1\u8fde\u7eed1\u7684\u4e2a\u6570\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u5176\u4e2d n \u662f\u6570\u7ec4\u7684\u957f\u5ea6\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\u3002\n        # \n        # \u6267\u884c\u7528\u65f6\uff1a40 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.57%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.5 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n\n        # res = 0\n        # for i in range(len(nums)):\n        #     count = 0\n        #     for j in range(i, len(nums)):\n        #         if nums[j] == 1:\n        #             count += 1\n        #         else:\n        #             break\n        #     res = max(res, count)\n        # return res\n\n        # M2. \u53cc\u6307\u9488\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u5176\u4e2d n \u662f\u6570\u7ec4\u7684\u957f\u5ea6\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\u3002\n        # \n        # \u6267\u884c\u7528\u65f6\uff1a40 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.57%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.5 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n\n        # res = 0\n        # left = 0\n        # for right in range(len(nums)):\n        #     if nums[right] == 0:\n        #         res = max(res, right - left)\n        #         left = right + 1\n        # res = max(res, len(nums) - left)\n        # return res\n\n        # M3. \u53cc\u6307\u9488\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u5176\u4e2d n \u662f\u6570\u7ec4\u7684\u957f\u5ea6\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\u3002\n        # \n        # \u6267\u884c\u7528\u65f6\uff1a40 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.57%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.5 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n\n        # res = 0\n        # left = 0\n        # for right in range(len(nums)):\n        #     if nums[right] == 0:\n        #         res = max(res, right - left)\n        #         left = right + 1\n        # res = max(res, len(nums) - left)\n        # return res\n\n        # M4. \u53cc\u6307\u9488\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u5176\u4e2d n \u662f\u6570\u7ec4\u7684\u957f\u5ea6\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\u3002\n        # \n        # \u6267\u884c\u7528\u65f6\uff1a40 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.57%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.5 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n\n        # res = 0\n        # left = 0\n        # for right in range(len(nums)):\n        #     if nums[right] == 0:\n        #         res = max(res, right - left)\n        #         left = right + 1\n        # res = max(res, len(nums) - left)\n        # return res\n\n        # M5. \u53cc\u6307\u9488\n        # \u65f6\u95f4\u590d\u6742\u5ea6"}, {"task_id": "max-consecutive-ones", "completion": "class Solution(object):\n    def findMaxConsecutiveOnes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Runtime: 20 ms, faster than 99.97% of Python3 online submissions for Max Consecutive Ones.\n        # Memory Usage: 13.5 MB, less than 5.00% of Python3 online submissions for Max Consecutive Ones.\n        \n        # Maintain a counter for the number of consecutive 1s.\n        # If the current element is 1, increment the counter.\n        # If the current element is 0, reset the counter to 0.\n        # If the current element is 1, increment the counter.\n        # If the current element is 0, reset the counter to 0.\n        # If the current element is 1, increment the counter.\n        # If the current element is 0, reset the counter to 0.\n        # If the current element is 1, increment the counter.\n        # If the current element is 0, reset the counter to 0.\n        # If the current element is 1, increment the counter.\n        # If the current element is 0, reset the counter to 0.\n        # If the current element is 1, increment the counter.\n        # If the current element is 0, reset the counter to 0.\n        # If the current element is 1, increment the counter.\n        # If the current element is 0, reset the counter to 0.\n        # If the current element is 1, increment the counter.\n        # If the current element is 0, reset the counter to 0.\n        # If the current element is 1, increment the counter.\n        # If the current element is 0, reset the counter to 0.\n        # If the current element is 1, increment the counter.\n        # If the current element is 0, reset the counter to 0.\n        # If the current element is 1, increment the counter.\n        # If the current element is 0, reset the counter to 0.\n        # If the current element is 1, increment the counter.\n        # If the current element is 0, reset the counter to 0.\n        # If the current element is 1, increment the counter.\n        # If the current element is 0, reset the counter to 0.\n        # If the current element is 1, increment the counter.\n        # If the current element is 0, reset the counter to 0.\n        # If the current element is 1, increment the counter.\n        # If the current element is 0, reset the counter to 0.\n        # If the current element is 1, increment the counter.\n        # If the current element is 0, reset the counter to 0.\n        # If the current element is 1, increment the counter.\n        # If the current element is 0, reset the counter to 0.\n        # If the current element is 1, increment the counter.\n        # If the current element is 0, reset the counter to 0.\n        # If the current element is 1, increment the counter.\n        # If the current element is 0, reset the counter to 0.\n        # If the current element is 1, increment the counter.\n        # If the current element is 0, reset the counter to 0.\n        # If the current element is 1, increment the counter.\n        # If the current element is 0, reset the counter to 0.\n        # If the current element is 1, increment the counter.\n        # If the current element is 0, reset the counter to 0.\n        # If the current element is 1, increment the counter.\n        # If the current element is 0, reset the counter to 0.\n        # If the current element is 1, increment the counter.\n        # If the current element is 0, reset the counter to 0.\n        # If the current element is 1, increment the counter.\n        # If the current element is 0, reset the counter to 0.\n        # If the current element is 1, increment the counter.\n        # If the current element is 0, reset the counter to 0.\n        # If the current element is 1, increment the counter.\n        # If the current element is 0, reset the counter to 0.\n        # If the current element is 1, increment the counter.\n        # If the current element is 0, reset the counter to 0.\n        # If the current element is 1, increment the"}, {"task_id": "max-consecutive-ones", "completion": "class Solution(object):\n    def findMaxConsecutiveOnes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # M1. \u66b4\u529b\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\uff0c\u5176\u4e2d n \u662f\u6570\u7ec4 nums \u7684\u957f\u5ea6\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\u3002\n        # \u627e\u5230\u6700\u957f\u7684\u8fde\u7eed 1 \u7684\u957f\u5ea6\u3002\n        # \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6bcf\u4e2a\u5143\u7d20\u7684\u5de6\u8fb9\u548c\u53f3\u8fb9\u7684\u5143\u7d20\uff0c\u5982\u679c\u5de6\u8fb9\u548c\u53f3\u8fb9\u7684\u5143\u7d20\u90fd\u662f 1\uff0c\u5219\u7d2f\u52a0\u957f\u5ea6\u3002\n        # \u6700\u540e\u8fd4\u56de\u6700\u5927\u503c\u3002\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n^2)\uff0c\u56e0\u4e3a\u9700\u8981\u904d\u5386\u6570\u7ec4\u4e24\u6b21\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\u662f O(1)\uff0c\u53ea\u9700\u8981\u5e38\u6570\u7684\u7a7a\u95f4\u3002\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n^2)\uff0c\u56e0\u4e3a\u9700\u8981\u904d\u5386\u6570\u7ec4\u4e24\u6b21\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\u662f O(1)\uff0c\u53ea\u9700\u8981\u5e38\u6570\u7684\u7a7a\u95f4\u3002\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n^2)\uff0c\u56e0\u4e3a\u9700\u8981\u904d\u5386\u6570\u7ec4\u4e24\u6b21\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\u662f O(1)\uff0c\u53ea\u9700\u8981\u5e38\u6570\u7684\u7a7a\u95f4\u3002\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n^2)\uff0c\u56e0\u4e3a\u9700\u8981\u904d\u5386\u6570\u7ec4\u4e24\u6b21\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\u662f O(1)\uff0c\u53ea\u9700\u8981\u5e38\u6570\u7684\u7a7a\u95f4\u3002\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n^2)\uff0c\u56e0\u4e3a\u9700\u8981\u904d\u5386\u6570\u7ec4\u4e24\u6b21\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\u662f O(1)\uff0c\u53ea\u9700\u8981\u5e38\u6570\u7684\u7a7a\u95f4\u3002\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n^2)\uff0c\u56e0\u4e3a\u9700\u8981\u904d\u5386\u6570\u7ec4\u4e24\u6b21\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\u662f O(1)\uff0c\u53ea\u9700\u8981\u5e38\u6570\u7684\u7a7a\u95f4\u3002\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n^2)\uff0c\u56e0\u4e3a\u9700\u8981\u904d\u5386\u6570\u7ec4\u4e24\u6b21\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\u662f O(1)\uff0c\u53ea\u9700\u8981\u5e38\u6570\u7684\u7a7a\u95f4\u3002\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n^2)\uff0c\u56e0\u4e3a\u9700\u8981\u904d\u5386\u6570\u7ec4\u4e24\u6b21\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\u662f O(1)\uff0c\u53ea\u9700\u8981\u5e38\u6570\u7684\u7a7a\u95f4\u3002\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n^2)\uff0c\u56e0\u4e3a\u9700\u8981\u904d\u5386\u6570\u7ec4\u4e24\u6b21\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\u662f O(1)\uff0c\u53ea\u9700\u8981\u5e38\u6570\u7684\u7a7a\u95f4\u3002\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n^2)\uff0c\u56e0\u4e3a\u9700\u8981\u904d\u5386\u6570\u7ec4\u4e24\u6b21\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\u662f O(1)\uff0c\u53ea\u9700\u8981\u5e38\u6570\u7684\u7a7a\u95f4\u3002\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n^2)\uff0c\u56e0\u4e3a\u9700\u8981\u904d\u5386\u6570\u7ec4\u4e24\u6b21\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\u662f O(1)\uff0c\u53ea\u9700\u8981\u5e38\u6570\u7684\u7a7a\u95f4\u3002\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n^2)\uff0c\u56e0\u4e3a\u9700\u8981\u904d\u5386\u6570\u7ec4\u4e24\u6b21\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\u662f O(1)\uff0c\u53ea\u9700\u8981\u5e38\u6570\u7684\u7a7a\u95f4\u3002\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n^2)\uff0c\u56e0\u4e3a\u9700\u8981\u904d\u5386\u6570\u7ec4\u4e24\u6b21\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\u662f O(1)\uff0c\u53ea\u9700\u8981\u5e38\u6570\u7684\u7a7a\u95f4\u3002\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n^2)\uff0c\u56e0\u4e3a\u9700\u8981\ufffd\ufffd"}, {"task_id": "max-consecutive-ones", "completion": "class Solution(object):\n    def findMaxConsecutiveOnes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # M1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6: O(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6: O(1)\n        # \u8fd0\u884c\u65f6\u95f4: 48ms\n        # \u5360\u7528\u5185\u5b58: 14.7MB\n        max_ones = 0\n        for i in range(len(nums)):\n            count = 0\n            for j in range(i, len(nums)):\n                if nums[j] == 1:\n                    count += 1\n                else:\n                    break\n            max_ones = max(max_ones, count)\n        return max_ones\n        \n        # M2. \u6ed1\u52a8\u7a97\u53e3\n        # \u65f6\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6: O(1)\n        # \u8fd0\u884c\u65f6\u95f4: 48ms\n        # \u5360\u7528\u5185\u5b58: 14.7MB\n        max_ones = 0\n        count = 0\n        for i in range(len(nums)):\n            if nums[i] == 1:\n                count += 1\n            else:\n                max_ones = max(max_ones, count)\n                count = 0\n        return max(max_ones, count)\n        \n        # M3. \u53cc\u6307\u9488\n        # \u65f6\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6: O(1)\n        # \u8fd0\u884c\u65f6\u95f4: 48ms\n        # \u5360\u7528\u5185\u5b58: 14.7MB\n        max_ones = 0\n        left = 0\n        for right in range(len(nums)):\n            if nums[right] == 1:\n                max_ones = max(max_ones, right - left + 1)\n            else:\n                left = right + 1\n        return max_ones\n        \n        # M4. \u53cc\u6307\u9488\n        # \u65f6\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6: O(1)\n        # \u8fd0\u884c\u65f6\u95f4: 48ms\n        # \u5360\u7528\u5185\u5b58: 14.7MB\n        max_ones = 0\n        left = 0\n        for right in range(len(nums)):\n            if nums[right] == 1:\n                max_ones = max(max_ones, right - left + 1)\n            else:\n                left = right + 1\n        return max_ones\n        \n        # M5. \u53cc\u6307\u9488\n        # \u65f6\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6: O(1)\n        # \u8fd0\u884c\u65f6\u95f4: 48ms\n        # \u5360\u7528\u5185\u5b58: 14.7MB\n        max_ones = 0\n        left = 0\n        for right in range(len(nums)):\n            if nums[right] == 1:\n                max_ones = max(max_ones, right - left + 1)\n            else:\n                left = right + 1\n        return max_ones\n        \n        # M6. \u53cc\u6307\u9488\n        # \u65f6\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6: O(1)\n        # \u8fd0\u884c\u65f6\u95f4: 48ms\n        # \u5360\u7528\u5185\u5b58: 14.7MB\n        max_ones = 0\n        left = 0\n        for right in range(len(nums)):\n            if nums[right] == 1:\n                max_ones = max(max_ones, right - left + 1)\n            else:\n                left = right + 1\n        return max_ones\n        \n        # M7. \u53cc\u6307\u9488\n        # \u65f6\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6: O(1)\n        # \u8fd0\u884c\u65f6\u95f4: 48ms\n        # \u5360\u7528\u5185\u5b58: 14.7MB\n        max_ones = 0\n        left = 0\n        for right in range(len("}], "count-complete-tree-nodes": [{"task_id": "count-complete-tree-nodes", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def countNodes(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        def count(root):\n            if not root:\n                return 0\n            return 1 + count(root.left) + count(root.right)\n        \n        left = count(root.left)\n        right = count(root.right)\n        \n        if left == right:\n            return 2 ** left - 1\n        else:\n            return 1 + countNodes(root.left) + countNodes(root.right)"}, {"task_id": "count-complete-tree-nodes", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def countNodes(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        if not root.left and not root.right:\n            return 1\n        \n        if not root.left:\n            return 1 + self.countNodes(root.right)\n        \n        if not root.right:\n            return 1 + self.countNodes(root.left)\n        \n        return 1 + self.countNodes(root.left) + self.countNodes(root.right)"}, {"task_id": "count-complete-tree-nodes", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def countNodes(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        def get_height(root):\n            if not root:\n                return 0\n            return 1 + max(get_height(root.left), get_height(root.right))\n        \n        def get_nodes(root):\n            if not root:\n                return 0\n            return 1 + get_nodes(root.left) + get_nodes(root.right)\n        \n        height = get_height(root)\n        nodes = get_nodes(root)\n        \n        if height == 0:\n            return 0\n        if height == 1:\n            return nodes\n        \n        left_nodes = get_nodes(root.left)\n        right_nodes = get_nodes(root.right)\n        \n        if left_nodes == right_nodes:\n            return 2 ** height - 1\n        else:\n            return left_nodes + right_nodes"}, {"task_id": "count-complete-tree-nodes", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def countNodes(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        def count(root):\n            if not root:\n                return 0\n            return 1 + count(root.left) + count(root.right)\n        \n        left = count(root.left)\n        right = count(root.right)\n        \n        if left == right:\n            return 2 ** left - 1\n        else:\n            return 1 + countNodes(root.left) + countNodes(root.right)"}, {"task_id": "count-complete-tree-nodes", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def countNodes(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        def get_height(root):\n            if not root:\n                return 0\n            return 1 + max(get_height(root.left), get_height(root.right))\n        \n        def get_nodes(root):\n            if not root:\n                return 0\n            return 1 + get_nodes(root.left) + get_nodes(root.right)\n        \n        h = get_height(root)\n        if h == 0:\n            return 0\n        if h == 1:\n            return get_nodes(root)\n        \n        left_nodes = get_nodes(root.left)\n        right_nodes = get_nodes(root.right)\n        if left_nodes == right_nodes:\n            return 2 ** h - 1\n        else:\n            return left_nodes + right_nodes + 1"}], "add-strings": [{"task_id": "add-strings", "completion": "class Solution(object):\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. convert to int\n        # 2. add\n        # 3. convert to str\n        \n        # 1. convert to int\n        num1 = int(num1)\n        num2 = int(num2)\n        \n        # 2. add\n        sum = num1 + num2\n        \n        # 3. convert to str\n        sum = str(sum)\n        \n        return sum"}, {"task_id": "add-strings", "completion": "class Solution(object):\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. convert to int\n        # 2. add\n        # 3. convert to str\n        \n        # 1. convert to int\n        num1 = int(num1)\n        num2 = int(num2)\n        \n        # 2. add\n        sum = num1 + num2\n        \n        # 3. convert to str\n        sum = str(sum)\n        \n        return sum"}, {"task_id": "add-strings", "completion": "class Solution(object):\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u5148\u628a\u4e24\u4e2a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 2. \u628a\u4e24\u4e2a\u6570\u5b57\u76f8\u52a0\n        # 3. \u628a\u7ed3\u679c\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\n        \n        # 1. \u5148\u628a\u4e24\u4e2a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        num1 = int(num1)\n        num2 = int(num2)\n        \n        # 2. \u628a\u4e24\u4e2a\u6570\u5b57\u76f8\u52a0\n        result = num1 + num2\n        \n        # 3. \u628a\u7ed3\u679c\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\n        result = str(result)\n        \n        return result"}, {"task_id": "add-strings", "completion": "class Solution(object):\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u5148\u628a\u4e24\u4e2a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 2. \u628a\u4e24\u4e2a\u6570\u5b57\u76f8\u52a0\n        # 3. \u628a\u7ed3\u679c\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\n        \n        num1 = int(num1)\n        num2 = int(num2)\n        \n        return str(num1 + num2)"}, {"task_id": "add-strings", "completion": "class Solution(object):\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. convert to int\n        # 2. add\n        # 3. convert to str\n        \n        # 1. convert to int\n        num1 = int(num1)\n        num2 = int(num2)\n        \n        # 2. add\n        sum = num1 + num2\n        \n        # 3. convert to str\n        sum = str(sum)\n        \n        return sum"}], "basic-calculator": [{"task_id": "basic-calculator", "completion": "class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6808\n        # 2. \u9012\u5f52\n        # 3. \u6808+\u9012\u5f52\n        # 4. \u6808+\u9012\u5f52+\u5faa\u73af\n        # 5. \u6808+\u9012\u5f52+\u5faa\u73af+\u5907\u5fd8\u5f55\n        # 6. \u6808+\u9012\u5f52+\u5faa\u73af+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55\n        # 7. \u6808+\u9012\u5f52+\u5faa\u73af+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55\n        # 8. \u6808+\u9012\u5f52+\u5faa\u73af+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55\n        # 9. \u6808+\u9012\u5f52+\u5faa\u73af+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55\n        # 10. \u6808+\u9012\u5f52+\u5faa\u73af+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55\n        # 11. \u6808+\u9012\u5f52+\u5faa\u73af+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55\n        # 12. \u6808+\u9012\u5f52+\u5faa\u73af+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55\n        # 13. \u6808+\u9012\u5f52+\u5faa\u73af+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55\n        # 14. \u6808+\u9012\u5f52+\u5faa\u73af+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55\n        # 15. \u6808+\u9012\u5f52+\u5faa\u73af+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55\n        # 16. \u6808+\u9012\u5f52+\u5faa\u73af+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55\n        # 17. \u6808+\u9012\u5f52+\u5faa\u73af+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+"}, {"task_id": "basic-calculator", "completion": "class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        num = 0\n        sign = 1\n        for c in s:\n            if c == ' ':\n                continue\n            if c == '+':\n                stack.append(sign * num)\n                num = 0\n                sign = 1\n            elif c == '-':\n                stack.append(sign * num)\n                num = 0\n                sign = -1\n            elif c == '(':\n                stack.append(sign)\n                sign = 1\n            elif c == ')':\n                num += sign * stack.pop()\n            elif c.isdigit():\n                num = num * 10 + int(c)\n        stack.append(sign * num)\n        return sum(stack)"}, {"task_id": "basic-calculator", "completion": "class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6808\n        # 2. \u9012\u5f52\n        # 3. \u6808 + \u9012\u5f52\n        # 4. \u6808 + \u9012\u5f52 + \u9012\u5f52\u7ed3\u679c\u7f13\u5b58\n        # 5. \u6808 + \u9012\u5f52 + \u9012\u5f52\u7ed3\u679c\u7f13\u5b58 + \u9012\u5f52\u7ed3\u679c\u7f13\u5b58\n        # 6. \u6808 + \u9012\u5f52 + \u9012\u5f52\u7ed3\u679c\u7f13\u5b58 + \u9012\u5f52\u7ed3\u679c\u7f13\u5b58 + \u9012\u5f52\u7ed3\u679c\u7f13\u5b58\n        # 7. \u6808 + \u9012\u5f52 + \u9012\u5f52\u7ed3\u679c\u7f13\u5b58 + \u9012\u5f52\u7ed3\u679c\u7f13\u5b58 + \u9012\u5f52\u7ed3\u679c\u7f13\u5b58 + \u9012\u5f52\u7ed3\u679c\u7f13\u5b58\n        # 8. \u6808 + \u9012\u5f52 + \u9012\u5f52\u7ed3\u679c\u7f13\u5b58 + \u9012\u5f52\u7ed3\u679c\u7f13\u5b58 + \u9012\u5f52\u7ed3\u679c\u7f13\u5b58 + \u9012\u5f52\u7ed3\u679c\u7f13\u5b58 + \u9012\u5f52\u7ed3\u679c\u7f13\u5b58\n        # 9. \u6808 + \u9012\u5f52 + \u9012\u5f52\u7ed3\u679c\u7f13\u5b58 + \u9012\u5f52\u7ed3\u679c\u7f13\u5b58 + \u9012\u5f52\u7ed3\u679c\u7f13\u5b58 + \u9012\u5f52\u7ed3\u679c\u7f13\u5b58 + \u9012\u5f52\u7ed3\u679c\u7f13\u5b58 + \u9012\u5f52\u7ed3\u679c\u7f13\u5b58\n        # 10. \u6808 + \u9012\u5f52 + \u9012\u5f52\u7ed3\u679c\u7f13\u5b58 + \u9012\u5f52\u7ed3\u679c\u7f13\u5b58 + \u9012\u5f52\u7ed3\u679c\u7f13\u5b58 + \u9012\u5f52\u7ed3\u679c\u7f13\u5b58 + \u9012\u5f52\u7ed3\u679c\u7f13\u5b58 + \u9012\u5f52\u7ed3\u679c\u7f13\u5b58 + \u9012\u5f52\u7ed3\u679c\u7f13\u5b58\n        # 11. \u6808 + \u9012\u5f52 + \u9012\u5f52\u7ed3\u679c\u7f13\u5b58 + \u9012\u5f52\u7ed3\u679c\u7f13\u5b58 + \u9012\u5f52\u7ed3\u679c\u7f13\u5b58 + \u9012\u5f52\u7ed3\u679c\u7f13\u5b58 + \u9012\u5f52\u7ed3\u679c\u7f13\u5b58 + \u9012\u5f52\u7ed3\u679c\u7f13\u5b58 + \u9012\u5f52\u7ed3\u679c\u7f13\u5b58 + \u9012\u5f52\u7ed3\u679c\u7f13\u5b58\n        # 12. \u6808 + \u9012\u5f52 + \u9012\u5f52\u7ed3\u679c\u7f13\u5b58 + \u9012\u5f52\u7ed3\u679c\u7f13\u5b58 + \u9012\u5f52\u7ed3\u679c\u7f13\u5b58 + \u9012\u5f52\u7ed3\u679c\u7f13\u5b58 + \u9012\u5f52\u7ed3\u679c\u7f13\u5b58 + \u9012\u5f52\u7ed3\u679c\u7f13\u5b58 + \u9012\u5f52\u7ed3\u679c\u7f13\u5b58 + \u9012\u5f52\u7ed3\u679c\u7f13\u5b58 + \u9012\u5f52\u7ed3\u679c\u7f13\u5b58\n        # 13. \u6808 + \u9012\u5f52 + \u9012\u5f52\u7ed3\u679c\u7f13\u5b58 + \u9012\u5f52\u7ed3\u679c\u7f13\u5b58 + \u9012\u5f52\u7ed3\u679c\u7f13\u5b58 + \u9012\u5f52\u7ed3\u679c\u7f13\u5b58 + \u9012\u5f52\u7ed3\u679c\u7f13\u5b58 + \u9012\u5f52\u7ed3\u679c\u7f13\u5b58 + \u9012\u5f52\u7ed3\u679c\u7f13\u5b58 + \u9012\u5f52\u7ed3\u679c\u7f13\u5b58 + \u9012\u5f52\u7ed3\u679c\u7f13\u5b58 + \u9012\u5f52\u7ed3\u679c\u7f13\u5b58\n        # 14. \u6808 + \u9012\u5f52 + \u9012\u5f52\u7ed3\u679c\ufffd"}, {"task_id": "basic-calculator", "completion": "class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6808\n        # 2. \u9012\u5f52\n        # 3. \u6808+\u9012\u5f52\n        # 4. \u6808+\u9012\u5f52+\u5faa\u73af\n        # 5. \u6808+\u9012\u5f52+\u5faa\u73af+\u5907\u5fd8\u5f55\n        # 6. \u6808+\u9012\u5f52+\u5faa\u73af+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55\n        # 7. \u6808+\u9012\u5f52+\u5faa\u73af+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55\n        # 8. \u6808+\u9012\u5f52+\u5faa\u73af+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55\n        # 9. \u6808+\u9012\u5f52+\u5faa\u73af+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55\n        # 10. \u6808+\u9012\u5f52+\u5faa\u73af+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55\n        # 11. \u6808+\u9012\u5f52+\u5faa\u73af+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55\n        # 12. \u6808+\u9012\u5f52+\u5faa\u73af+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55\n        # 13. \u6808+\u9012\u5f52+\u5faa\u73af+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55\n        # 14. \u6808+\u9012\u5f52+\u5faa\u73af+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55\n        # 15. \u6808+\u9012\u5f52+\u5faa\u73af+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55\n        # 16. \u6808+\u9012\u5f52+\u5faa\u73af+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55\n        # 17. \u6808+\u9012\u5f52+\u5faa\u73af+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+"}, {"task_id": "basic-calculator", "completion": "class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6808\n        # 2. \u9012\u5f52\n        # 3. \u6808+\u9012\u5f52\n        # 4. \u6808+\u9012\u5f52+\u5faa\u73af\n        # 5. \u6808+\u9012\u5f52+\u5faa\u73af+\u5907\u5fd8\u5f55\n        # 6. \u6808+\u9012\u5f52+\u5faa\u73af+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55\n        # 7. \u6808+\u9012\u5f52+\u5faa\u73af+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55\n        # 8. \u6808+\u9012\u5f52+\u5faa\u73af+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55\n        # 9. \u6808+\u9012\u5f52+\u5faa\u73af+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55\n        # 10. \u6808+\u9012\u5f52+\u5faa\u73af+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55\n        # 11. \u6808+\u9012\u5f52+\u5faa\u73af+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55\n        # 12. \u6808+\u9012\u5f52+\u5faa\u73af+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55\n        # 13. \u6808+\u9012\u5f52+\u5faa\u73af+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55\n        # 14. \u6808+\u9012\u5f52+\u5faa\u73af+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55\n        # 15. \u6808+\u9012\u5f52+\u5faa\u73af+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55\n        # 16. \u6808+\u9012\u5f52+\u5faa\u73af+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55\n        # 17. \u6808+\u9012\u5f52+\u5faa\u73af+\u5907\u5fd8\u5f55+\u5907\u5fd8\u5f55+"}], "ipo": [{"task_id": "ipo", "completion": "class Solution(object):\n    def findMaximizedCapital(self, k, w, profits, capital):\n        \"\"\"\n        :type k: int\n        :type w: int\n        :type profits: List[int]\n        :type capital: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. sort the profits and capital\n        # 2. find the maximum profit\n        # 3. find the maximum capital\n        # 4. return the maximum capital\n        \n        # sort the profits and capital\n        profits.sort()\n        capital.sort()\n        \n        # find the maximum profit\n        max_profit = 0\n        for i in range(len(profits)):\n            max_profit += profits[i]\n        \n        # find the maximum capital\n        max_capital = 0\n        for i in range(len(capital)):\n            if capital[i] + max_profit <= w:\n                max_capital += capital[i] + max_profit\n            else:\n                max_capital += w\n        \n        # return the maximum capital\n        return max_capital"}, {"task_id": "ipo", "completion": "class Solution(object):\n    def findMaximizedCapital(self, k, w, profits, capital):\n        \"\"\"\n        :type k: int\n        :type w: int\n        :type profits: List[int]\n        :type capital: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. sort the profits and capital\n        # 2. find the maximum profit\n        # 3. find the maximum capital\n        # 4. return the maximum capital\n        \n        # sort the profits and capital\n        profits.sort()\n        capital.sort()\n        \n        # find the maximum profit\n        max_profit = 0\n        for i in range(len(profits)):\n            max_profit += profits[i]\n        \n        # find the maximum capital\n        max_capital = 0\n        for i in range(len(capital)):\n            if capital[i] + max_profit <= w:\n                max_capital += capital[i] + max_profit\n            else:\n                max_capital += w\n        \n        # return the maximum capital\n        return max_capital"}, {"task_id": "ipo", "completion": "class Solution(object):\n    def findMaximizedCapital(self, k, w, profits, capital):\n        \"\"\"\n        :type k: int\n        :type w: int\n        :type profits: List[int]\n        :type capital: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. sort the profits and capital\n        # 2. find the first k elements in the sorted list\n        # 3. return the sum of the first k elements\n        # 4. if the sum is less than w, then return w\n        # 5. if the sum is greater than w, then return the sum\n        \n        # sort the profits and capital\n        profits.sort()\n        capital.sort()\n        \n        # find the first k elements in the sorted list\n        for i in range(k):\n            if profits[i] + capital[i] > w:\n                w = profits[i] + capital[i]\n        \n        # return the sum of the first k elements\n        return w"}, {"task_id": "ipo", "completion": "class Solution(object):\n    def findMaximizedCapital(self, k, w, profits, capital):\n        \"\"\"\n        :type k: int\n        :type w: int\n        :type profits: List[int]\n        :type capital: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. sort the profits and capital\n        # 2. find the max profit\n        # 3. find the max capital\n        # 4. return the max capital\n        \n        # sort the profits and capital\n        profits.sort()\n        capital.sort()\n        \n        # find the max profit\n        max_profit = 0\n        for i in range(len(profits)):\n            max_profit += profits[i]\n        \n        # find the max capital\n        max_capital = 0\n        for i in range(len(capital)):\n            if capital[i] + max_profit <= w:\n                max_capital += capital[i] + max_profit\n            else:\n                max_capital += w\n        \n        # return the max capital\n        return max_capital"}, {"task_id": "ipo", "completion": "class Solution(object):\n    def findMaximizedCapital(self, k, w, profits, capital):\n        \"\"\"\n        :type k: int\n        :type w: int\n        :type profits: List[int]\n        :type capital: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. sort the profits and capital\n        # 2. find the first k elements in the sorted list\n        # 3. return the sum of the first k elements\n        # 4. if the sum of the first k elements is less than w, then return w\n        \n        # sort the profits and capital\n        profits.sort()\n        capital.sort()\n        \n        # find the first k elements in the sorted list\n        i = 0\n        j = 0\n        while i < k and j < len(profits):\n            if capital[j] <= w:\n                w += profits[i]\n                i += 1\n            j += 1\n        \n        # return the sum of the first k elements\n        return w"}], "valid-parentheses": [{"task_id": "valid-parentheses", "completion": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        stack = []\n        for char in s:\n            if char == '(':\n                stack.append(')')\n            elif char == '[':\n                stack.append(']')\n            elif char == '{':\n                stack.append('}')\n            elif not stack or char != stack.pop():\n                return False\n        return not stack"}, {"task_id": "valid-parentheses", "completion": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(')')\n            elif c == '[':\n                stack.append(']')\n            elif c == '{':\n                stack.append('}')\n            elif not stack or c != stack.pop():\n                return False\n        return not stack"}, {"task_id": "valid-parentheses", "completion": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(')')\n            elif c == '[':\n                stack.append(']')\n            elif c == '{':\n                stack.append('}')\n            elif not stack or c != stack.pop():\n                return False\n        return not stack"}, {"task_id": "valid-parentheses", "completion": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        stack = []\n        for char in s:\n            if char == '(':\n                stack.append(')')\n            elif char == '[':\n                stack.append(']')\n            elif char == '{':\n                stack.append('}')\n            elif not stack or char != stack.pop():\n                return False\n        return not stack"}, {"task_id": "valid-parentheses", "completion": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        stack = []\n        for char in s:\n            if char == '(':\n                stack.append(')')\n            elif char == '[':\n                stack.append(']')\n            elif char == '{':\n                stack.append('}')\n            elif len(stack) == 0 or char != stack.pop():\n                return False\n        return len(stack) == 0"}], "next-permutation": [{"task_id": "next-permutation", "completion": "class Solution(object):\n    def nextPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 1. find the first index i such that nums[i] < nums[i + 1]\n        i = len(nums) - 2\n        while i >= 0 and nums[i] >= nums[i + 1]:\n            i -= 1\n        \n        # 2. if no such index i, then nums is the last permutation\n        if i < 0:\n            nums.sort()\n            return\n        \n        # 3. find the first index j > i such that nums[i] < nums[j]\n        j = len(nums) - 1\n        while j >= 0 and nums[i] >= nums[j]:\n            j -= 1\n        \n        # 4. swap nums[i] and nums[j]\n        nums[i], nums[j] = nums[j], nums[i]\n        \n        # 5. reverse the sequence from nums[i + 1] to the end\n        nums[i + 1:] = nums[i + 1:][::-1]"}, {"task_id": "next-permutation", "completion": "class Solution(object):\n    def nextPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 1. find the first index i such that nums[i] < nums[i+1]\n        i = len(nums) - 2\n        while i >= 0 and nums[i] >= nums[i+1]:\n            i -= 1\n        if i >= 0:\n            # 2. find the first index j > i such that nums[i] < nums[j]\n            j = len(nums) - 1\n            while j >= 0 and nums[i] >= nums[j]:\n                j -= 1\n            # 3. swap nums[i] and nums[j]\n            nums[i], nums[j] = nums[j], nums[i]\n        # 4. reverse the sequence from nums[i+1] to the end\n        nums[i+1:] = nums[i+1:][::-1]"}, {"task_id": "next-permutation", "completion": "class Solution(object):\n    def nextPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 1. find the first index i such that nums[i] < nums[i+1]\n        i = len(nums) - 2\n        while i >= 0 and nums[i] >= nums[i+1]:\n            i -= 1\n        \n        # 2. if no such index exists, then the array is already sorted in descending order\n        if i < 0:\n            nums.sort()\n            return\n        \n        # 3. find the first index j such that nums[i] < nums[j]\n        j = len(nums) - 1\n        while j >= 0 and nums[i] >= nums[j]:\n            j -= 1\n        \n        # 4. swap the value of nums[i] and nums[j]\n        nums[i], nums[j] = nums[j], nums[i]\n        \n        # 5. reverse the sequence from nums[i+1] to the end\n        nums[i+1:] = nums[i+1:][::-1]\n        \n        return"}, {"task_id": "next-permutation", "completion": "class Solution(object):\n    def nextPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 1. find the first index i such that nums[i] < nums[i+1]\n        i = len(nums) - 2\n        while i >= 0 and nums[i] >= nums[i+1]:\n            i -= 1\n        \n        # 2. if no such index i, then nums is the last permutation\n        if i < 0:\n            nums.sort()\n            return\n        \n        # 3. find the first index j > i such that nums[i] < nums[j]\n        j = len(nums) - 1\n        while j >= 0 and nums[i] >= nums[j]:\n            j -= 1\n        \n        # 4. swap nums[i] and nums[j]\n        nums[i], nums[j] = nums[j], nums[i]\n        \n        # 5. reverse the sequence from nums[i+1] to the end\n        nums[i+1:] = nums[i+1:][::-1]"}, {"task_id": "next-permutation", "completion": "class Solution(object):\n    def nextPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 1. find the first index i such that nums[i] < nums[i+1]\n        i = len(nums) - 2\n        while i >= 0 and nums[i] >= nums[i+1]:\n            i -= 1\n        \n        # 2. if no such index i, then nums is the last permutation\n        if i < 0:\n            nums.sort()\n            return\n        \n        # 3. find the first index j > i such that nums[i] < nums[j]\n        j = len(nums) - 1\n        while j >= 0 and nums[i] >= nums[j]:\n            j -= 1\n        \n        # 4. swap nums[i] and nums[j]\n        nums[i], nums[j] = nums[j], nums[i]\n        \n        # 5. reverse the sequence from nums[i+1] to the end\n        nums[i+1:] = nums[i+1:][::-1]"}], "contains-duplicate-ii": [{"task_id": "contains-duplicate-ii", "completion": "class Solution(object):\n    def containsNearbyDuplicate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        \n        # M1. \u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u6267\u884c\u7528\u65f6 : 108 ms\n        # \u5185\u5b58\u6d88\u8017 : 15.1 MB\n        # \u4f5c\u8005\uff1aLeetCode\n        # \u94fe\u63a5\uff1ahttps://leetcode-cn.com/problems/contains-duplicate-ii/solution/zhong-fu-de-zhong-fu-lcof/\n        # \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09\n        # \u8457\u4f5c\u6743\u5f52\u9886\u6263\u7f51\u7edc\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u5b98\u65b9\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002\n        d = {}\n        for i in range(len(nums)):\n            if nums[i] in d and i - d[nums[i]] <= k:\n                return True\n            d[nums[i]] = i\n        return False"}, {"task_id": "contains-duplicate-ii", "completion": "class Solution(object):\n    def containsNearbyDuplicate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        \n        # M1. \u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u6267\u884c\u7528\u65f6 : 108 ms\n        # \u5185\u5b58\u6d88\u8017 : 14.9 MB\n        # \u4f5c\u8005\uff1aLeetCode\n        # \u94fe\u63a5\uff1ahttps://leetcode-cn.com/problems/contains-duplicate-ii/solution/zhong-fu-de-shuang-zhi-zhen-by-leetcode/\n        # \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09\n        # \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002\n        d = {}\n        for i in range(len(nums)):\n            if nums[i] in d and i - d[nums[i]] <= k:\n                return True\n            d[nums[i]] = i\n        return False"}, {"task_id": "contains-duplicate-ii", "completion": "class Solution(object):\n    def containsNearbyDuplicate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        \n        # M1. \u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 14.8 MB\n        # \u4f5c\u8005\uff1aLeetCode\n        # \u94fe\u63a5\uff1ahttps://leetcode-cn.com/problems/contains-duplicate-ii/solution/zhong-fu-de-zhong-fu-lcof/\n        # \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09\n        # \u8457\u4f5c\u6743\u5f52\u9886\u6263\u7f51\u7edc\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u5b98\u65b9\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002\n        d = {}\n        for i in range(len(nums)):\n            if nums[i] in d and i - d[nums[i]] <= k:\n                return True\n            d[nums[i]] = i\n        return False"}, {"task_id": "contains-duplicate-ii", "completion": "class Solution(object):\n    def containsNearbyDuplicate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        \n        # M1. \u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 14.9 MB\n        # \u4f5c\u8005\uff1aLeetCode\n        # \u94fe\u63a5\uff1ahttps://leetcode-cn.com/problems/contains-duplicate-ii/solution/zhong-fu-de-zhong-fu-lcof/\n        # \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09\n        # \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002\n        d = {}\n        for i in range(len(nums)):\n            if nums[i] in d and i - d[nums[i]] <= k:\n                return True\n            d[nums[i]] = i\n        return False"}, {"task_id": "contains-duplicate-ii", "completion": "class Solution(object):\n    def containsNearbyDuplicate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        \n        # M1. \u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 14.6 MB\n        # \u4f5c\u8005\uff1aLeetCode\n        # \u94fe\u63a5\uff1ahttps://leetcode-cn.com/problems/contains-duplicate-ii/solution/zhong-fu-de-zhong-fu-lcof/\n        # \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09\n        # \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002\n        d = {}\n        for i in range(len(nums)):\n            if nums[i] in d and i - d[nums[i]] <= k:\n                return True\n            d[nums[i]] = i\n        return False"}], "maximum-gap": [{"task_id": "maximum-gap", "completion": "class Solution(object):\n    def maximumGap(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 2:\n            return 0\n        \n        min_num = min(nums)\n        max_num = max(nums)\n        \n        bucket_size = (max_num - min_num) // (len(nums) - 1)\n        \n        buckets = [[] for _ in range(len(nums) - 1)]\n        \n        for num in nums:\n            index = (num - min_num) // bucket_size\n            buckets[index].append(num)\n        \n        max_diff = 0\n        \n        for i in range(len(buckets)):\n            if len(buckets[i]) == 0:\n                continue\n            if i == 0:\n                max_diff = max(max_diff, buckets[i][0] - min_num)\n            else:\n                max_diff = max(max_diff, buckets[i][0] - buckets[i - 1][-1])\n        \n        return max_diff"}, {"task_id": "maximum-gap", "completion": "class Solution(object):\n    def maximumGap(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 2:\n            return 0\n        \n        max_num = max(nums)\n        min_num = min(nums)\n        \n        if max_num == min_num:\n            return 0\n        \n        bucket_size = (max_num - min_num) // (len(nums) - 1)\n        \n        buckets = [[] for _ in range(len(nums) - 1)]\n        \n        for num in nums:\n            index = (num - min_num) // bucket_size\n            buckets[index].append(num)\n        \n        max_gap = 0\n        \n        for i in range(len(buckets)):\n            if len(buckets[i]) == 0:\n                continue\n            if i == 0:\n                max_gap = max(max_gap, buckets[i][0] - min_num)\n            else:\n                max_gap = max(max_gap, buckets[i][0] - buckets[i - 1][-1])\n        \n        return max_gap"}, {"task_id": "maximum-gap", "completion": "class Solution(object):\n    def maximumGap(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 2:\n            return 0\n        \n        max_gap = 0\n        min_num = min(nums)\n        max_num = max(nums)\n        \n        for i in range(len(nums)):\n            if i == 0:\n                continue\n            else:\n                if nums[i] - nums[i-1] > max_gap:\n                    max_gap = nums[i] - nums[i-1]\n        \n        return max_gap"}, {"task_id": "maximum-gap", "completion": "class Solution(object):\n    def maximumGap(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 2:\n            return 0\n        \n        min_num = min(nums)\n        max_num = max(nums)\n        \n        bucket_size = (max_num - min_num) // (len(nums) - 1)\n        \n        buckets = [[] for _ in range(len(nums) - 1)]\n        \n        for num in nums:\n            index = (num - min_num) // bucket_size\n            buckets[index].append(num)\n        \n        max_diff = 0\n        for i in range(len(buckets)):\n            if len(buckets[i]) == 0:\n                continue\n            if i == 0:\n                max_diff = max(max_diff, buckets[i][0] - min_num)\n            else:\n                max_diff = max(max_diff, buckets[i][0] - buckets[i - 1][-1])\n        \n        return max_diff"}, {"task_id": "maximum-gap", "completion": "class Solution(object):\n    def maximumGap(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 2:\n            return 0\n        \n        max_num = max(nums)\n        min_num = min(nums)\n        \n        if max_num == min_num:\n            return 0\n        \n        max_gap = 0\n        for i in range(len(nums) - 1):\n            if nums[i] == nums[i + 1]:\n                continue\n            else:\n                max_gap = max(max_gap, nums[i + 1] - nums[i])\n        \n        return max_gap"}], "binary-tree-level-order-traversal": [{"task_id": "binary-tree-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        res = []\n        \n        while queue:\n            size = len(queue)\n            level = []\n            for i in range(size):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            res.append(level)\n        return res"}, {"task_id": "binary-tree-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        res = []\n        \n        while queue:\n            size = len(queue)\n            level = []\n            for i in range(size):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            res.append(level)\n        return res"}, {"task_id": "binary-tree-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        res = []\n        queue = [root]\n        \n        while queue:\n            size = len(queue)\n            level = []\n            for i in range(size):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            res.append(level)\n        return res"}, {"task_id": "binary-tree-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        res = []\n        queue = [root]\n        \n        while queue:\n            size = len(queue)\n            level = []\n            for i in range(size):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            res.append(level)\n        return res"}, {"task_id": "binary-tree-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        res = []\n        queue = [root]\n        \n        while queue:\n            size = len(queue)\n            level = []\n            for i in range(size):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            res.append(level)\n        return res"}], "couples-holding-hands": [{"task_id": "couples-holding-hands", "completion": "class Solution(object):\n    def minSwapsCouples(self, row):\n        \"\"\"\n        :type row: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. Create a dictionary to map the couples\n        # 2. Iterate through the list and find the couples\n        # 3. Swap the couples\n        # 4. Return the number of swaps\n        \n        # Create a dictionary to map the couples\n        couples = {}\n        \n        # Iterate through the list and find the couples\n        for i in range(len(row)):\n            if row[i] in couples:\n                couples[row[i]].append(i)\n            else:\n                couples[row[i]] = [i]\n        \n        # Swap the couples\n        swaps = 0\n        for key in couples:\n            if len(couples[key]) == 2:\n                if couples[key][0] != couples[key][1] - 1:\n                    row[couples[key][0]], row[couples[key][1] - 1] = row[couples[key][1] - 1], row[couples[key][0]]\n                    swaps += 1\n        \n        # Return the number of swaps\n        return swaps"}, {"task_id": "couples-holding-hands", "completion": "class Solution(object):\n    def minSwapsCouples(self, row):\n        \"\"\"\n        :type row: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. Create a dictionary to store the couples\n        # 2. Iterate through the list and find the couples\n        # 3. Swap the couples\n        # 4. Return the number of swaps\n        \n        # Create a dictionary to store the couples\n        couples = {}\n        \n        # Iterate through the list and find the couples\n        for i in range(len(row)):\n            # Find the couple\n            couple = row[i] // 2\n            \n            # If the couple is already in the dictionary, then skip\n            if couple in couples:\n                continue\n            \n            # If the couple is not in the dictionary, then add it\n            else:\n                # Find the other person in the couple\n                other_person = row[i] % 2\n                \n                # Swap the couple\n                row[i], row[other_person] = row[other_person], row[i]\n                \n                # Add the couple to the dictionary\n                couples[couple] = other_person\n        \n        # Return the number of swaps\n        return len(row) - len(couples)"}, {"task_id": "couples-holding-hands", "completion": "class Solution(object):\n    def minSwapsCouples(self, row):\n        \"\"\"\n        :type row: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. Create a dictionary to map the couples\n        # 2. Iterate through the list and find the couples\n        # 3. Swap the couples\n        # 4. Return the number of swaps\n        \n        # Create a dictionary to map the couples\n        couples = {}\n        \n        # Iterate through the list and find the couples\n        for i in range(len(row)):\n            # Find the couple\n            couple = row[i] // 2\n            \n            # Swap the couple\n            if couple in couples:\n                # Swap the couple\n                row[i], row[couples[couple]] = row[couples[couple]], row[i]\n                \n                # Remove the couple from the dictionary\n                del couples[couple]\n            else:\n                # Add the couple to the dictionary\n                couples[couple] = i\n        \n        # Return the number of swaps\n        return len(row) - len(couples)"}, {"task_id": "couples-holding-hands", "completion": "class Solution(object):\n    def minSwapsCouples(self, row):\n        \"\"\"\n        :type row: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6bcf\u4e2a\u4eba\u7684\u53e6\u4e00\u534a\n        # 2. \u627e\u5230\u6bcf\u4e2a\u4eba\u7684\u53e6\u4e00\u534a\u7684\u4e0b\u6807\n        # 3. \u4ea4\u6362\n        # 4. \u7ee7\u7eed\u627e\u4e0b\u4e00\u4e2a\u4eba\u7684\u53e6\u4e00\u534a\n        # 5. \u7ee7\u7eed\u627e\u4e0b\u4e00\u4e2a\u4eba\u7684\u53e6\u4e00\u534a\u7684\u4e0b\u6807\n        # 6. \u4ea4\u6362\n        # 7. \u7ee7\u7eed\u627e\u4e0b\u4e00\u4e2a\u4eba\u7684\u53e6\u4e00\u534a\n        # 8. \u7ee7\u7eed\u627e\u4e0b\u4e00\u4e2a\u4eba\u7684\u53e6\u4e00\u534a\u7684\u4e0b\u6807\n        # 9. \u4ea4\u6362\n        # 10. \u7ee7\u7eed\u627e\u4e0b\u4e00\u4e2a\u4eba\u7684\u53e6\u4e00\u534a\n        # 11. \u7ee7\u7eed\u627e\u4e0b\u4e00\u4e2a\u4eba\u7684\u53e6\u4e00\u534a\u7684\u4e0b\u6807\n        # 12. \u4ea4\u6362\n        # 13. \u7ee7\u7eed\u627e\u4e0b\u4e00\u4e2a\u4eba\u7684\u53e6\u4e00\u534a\n        # 14. \u7ee7\u7eed\u627e\u4e0b\u4e00\u4e2a\u4eba\u7684\u53e6\u4e00\u534a\u7684\u4e0b\u6807\n        # 15. \u4ea4\u6362\n        # 16. \u7ee7\u7eed\u627e\u4e0b\u4e00\u4e2a\u4eba\u7684\u53e6\u4e00\u534a\n        # 17. \u7ee7\u7eed\u627e\u4e0b\u4e00\u4e2a\u4eba\u7684\u53e6\u4e00\u534a\u7684\u4e0b\u6807\n        # 18. \u4ea4\u6362\n        # 19. \u7ee7\u7eed\u627e\u4e0b\u4e00\u4e2a\u4eba\u7684\u53e6\u4e00\u534a\n        # 20. \u7ee7\u7eed\u627e\u4e0b\u4e00\u4e2a\u4eba\u7684\u53e6\u4e00\u534a\u7684\u4e0b\u6807\n        # 21. \u4ea4\u6362\n        # 22. \u7ee7\u7eed\u627e\u4e0b\u4e00\u4e2a\u4eba\u7684\u53e6\u4e00\u534a\n        # 23. \u7ee7\u7eed\u627e\u4e0b\u4e00\u4e2a\u4eba\u7684\u53e6\u4e00\u534a\u7684\u4e0b\u6807\n        # 24. \u4ea4\u6362\n        # 25. \u7ee7\u7eed\u627e\u4e0b\u4e00\u4e2a\u4eba\u7684\u53e6\u4e00\u534a\n        # 26. \u7ee7\u7eed\u627e\u4e0b\u4e00\u4e2a\u4eba\u7684\u53e6\u4e00\u534a\u7684\u4e0b\u6807\n        # 27. \u4ea4\u6362\n        # 28. \u7ee7\u7eed\u627e\u4e0b\u4e00\u4e2a\u4eba\u7684\u53e6\u4e00\u534a\n        # 29. \u7ee7\u7eed\u627e\u4e0b\u4e00\u4e2a\u4eba\u7684\u53e6\u4e00\u534a\u7684\u4e0b\u6807\n        # 30. \u4ea4\u6362\n        # 31. \u7ee7\u7eed\u627e\u4e0b\u4e00\u4e2a\u4eba\u7684\u53e6\u4e00\u534a\n        # 32. \u7ee7\u7eed\u627e\u4e0b\u4e00\u4e2a\u4eba\u7684\u53e6\u4e00\u534a\u7684\u4e0b\u6807\n        # 33. \u4ea4\u6362\n        # 34. \u7ee7\u7eed\u627e\u4e0b\u4e00\u4e2a\u4eba\u7684\u53e6\u4e00\u534a\n        # 35. \u7ee7\u7eed\u627e\u4e0b\u4e00\u4e2a\u4eba\u7684\u53e6\u4e00\u534a\u7684\u4e0b\u6807\n        # 36. \u4ea4\u6362\n        # 37. \u7ee7\u7eed\u627e\u4e0b\u4e00\u4e2a\u4eba\u7684\u53e6\u4e00\u534a\n        # 38. \u7ee7\u7eed\u627e\u4e0b\u4e00\u4e2a\u4eba\u7684\u53e6\u4e00\u534a\u7684\u4e0b\u6807\n        # 39. \u4ea4\u6362\n        # 40. \u7ee7\u7eed\u627e\u4e0b\u4e00\u4e2a\u4eba\u7684\u53e6\u4e00\u534a\n        # 41. \u7ee7\u7eed\u627e\u4e0b\u4e00\u4e2a\u4eba\u7684\u53e6\u4e00\u534a\u7684\u4e0b\u6807\n        # 42. \u4ea4\u6362\n        # 43. \u7ee7\u7eed\u627e\u4e0b\u4e00\u4e2a\u4eba\u7684\u53e6\u4e00\u534a\n        # 44. \u7ee7\u7eed\u627e\u4e0b\u4e00\u4e2a\u4eba\u7684\ufffd"}, {"task_id": "couples-holding-hands", "completion": "class Solution(object):\n    def minSwapsCouples(self, row):\n        \"\"\"\n        :type row: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. Create a dictionary to map the couples\n        # 2. Iterate through the list and find the couples\n        # 3. Swap the couples\n        # 4. Return the number of swaps\n        \n        # Create a dictionary to map the couples\n        couples = {}\n        for i in range(len(row)):\n            couples[row[i]] = i\n        \n        # Iterate through the list and find the couples\n        swaps = 0\n        for i in range(len(row)):\n            if row[i] % 2 == 0:\n                if row[i] + 1 in couples and couples[row[i] + 1] != i:\n                    row[i], row[couples[row[i] + 1]] = row[couples[row[i] + 1]], row[i]\n                    swaps += 1\n            else:\n                if row[i] - 1 in couples and couples[row[i] - 1] != i:\n                    row[i], row[couples[row[i] - 1]] = row[couples[row[i] - 1]], row[i]\n                    swaps += 1\n        \n        # Return the number of swaps\n        return swaps"}], "interleaving-string": [{"task_id": "interleaving-string", "completion": "class Solution(object):\n    def isInterleave(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) + len(s2) != len(s3):\n            return False\n        \n        if s1 == s3[:len(s1)] and s2 == s3[len(s1):]:\n            return True\n        \n        if s1 == s3[:len(s1)]:\n            return self.isInterleave(s1, s2, s3[len(s1):])\n        elif s2 == s3[:len(s2)]:\n            return self.isInterleave(s1, s2, s3[len(s2):])\n        else:\n            return False"}, {"task_id": "interleaving-string", "completion": "class Solution(object):\n    def isInterleave(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) + len(s2) != len(s3):\n            return False\n        \n        if s1 == s3[:len(s1)] and s2 == s3[len(s1):]:\n            return True\n        \n        if len(s1) == 0 and len(s2) == 0:\n            return True\n        \n        if len(s1) == 0:\n            return s2 == s3\n        \n        if len(s2) == 0:\n            return s1 == s3\n        \n        if s1[0] == s3[0]:\n            return self.isInterleave(s1[1:], s2, s3[1:])\n        elif s2[0] == s3[0]:\n            return self.isInterleave(s1, s2[1:], s3[1:])\n        else:\n            return False"}, {"task_id": "interleaving-string", "completion": "class Solution(object):\n    def isInterleave(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) + len(s2) != len(s3):\n            return False\n        \n        if len(s1) == 0 and len(s2) == 0:\n            return True\n        \n        if len(s1) == 0:\n            return s2 == s3\n        \n        if len(s2) == 0:\n            return s1 == s3\n        \n        if s1[0] == s3[0]:\n            return self.isInterleave(s1[1:], s2, s3[1:])\n        elif s2[0] == s3[0]:\n            return self.isInterleave(s1, s2[1:], s3[1:])\n        else:\n            return False"}, {"task_id": "interleaving-string", "completion": "class Solution(object):\n    def isInterleave(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) + len(s2) != len(s3):\n            return False\n        \n        if s1 == s3[:len(s1)] and s2 == s3[len(s1):]:\n            return True\n        \n        if len(s1) == 0 and len(s2) == 0:\n            return True\n        \n        if len(s1) == 0:\n            return s2 == s3\n        \n        if len(s2) == 0:\n            return s1 == s3\n        \n        if s1[0] == s3[0]:\n            return self.isInterleave(s1[1:], s2, s3[1:])\n        elif s2[0] == s3[0]:\n            return self.isInterleave(s1, s2[1:], s3[1:])\n        else:\n            return False"}, {"task_id": "interleaving-string", "completion": "class Solution(object):\n    def isInterleave(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) + len(s2) != len(s3):\n            return False\n        \n        if s1 == s3[:len(s1)] and s2 == s3[len(s1):]:\n            return True\n        \n        if len(s1) == 0:\n            return s2 == s3\n        \n        if len(s2) == 0:\n            return s1 == s3\n        \n        return self.isInterleave(s1, s3[:len(s1)], s3[len(s1):]) or self.isInterleave(s2, s3[:len(s2)], s3[len(s2):])"}], "assign-cookies": [{"task_id": "assign-cookies", "completion": "class Solution(object):\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        \n        g.sort()\n        s.sort()\n        \n        i = 0\n        j = 0\n        \n        count = 0\n        \n        while i < len(g) and j < len(s):\n            if g[i] <= s[j]:\n                count += 1\n                i += 1\n            j += 1\n        \n        return count"}, {"task_id": "assign-cookies", "completion": "class Solution(object):\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        \n        g.sort()\n        s.sort()\n        \n        i = 0\n        j = 0\n        \n        count = 0\n        \n        while i < len(g) and j < len(s):\n            if g[i] <= s[j]:\n                count += 1\n                i += 1\n            j += 1\n        \n        return count"}, {"task_id": "assign-cookies", "completion": "class Solution(object):\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        \n        g.sort()\n        s.sort()\n        \n        i = 0\n        j = 0\n        \n        count = 0\n        \n        while i < len(g) and j < len(s):\n            if g[i] <= s[j]:\n                i += 1\n                j += 1\n                count += 1\n            else:\n                j += 1\n                \n        return count"}, {"task_id": "assign-cookies", "completion": "class Solution(object):\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        \n        g.sort()\n        s.sort()\n        \n        i = 0\n        j = 0\n        \n        count = 0\n        \n        while i < len(g) and j < len(s):\n            if g[i] <= s[j]:\n                count += 1\n                i += 1\n            j += 1\n        \n        return count"}, {"task_id": "assign-cookies", "completion": "class Solution(object):\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        \n        g.sort()\n        s.sort()\n        \n        i = 0\n        j = 0\n        \n        count = 0\n        \n        while i < len(g) and j < len(s):\n            if g[i] <= s[j]:\n                i += 1\n                j += 1\n                count += 1\n            else:\n                j += 1\n                \n        return count"}], "keyboard-row": [{"task_id": "keyboard-row", "completion": "class Solution(object):\n    def findWords(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\n        # 2. \u627e\u51fa\u6240\u6709\u7684\u5355\u8bcd\n        # 3. \u627e\u51fa\u6240\u6709\u7684\u5355\u8bcd\u4e2d\u7684\u5b57\u6bcd\n        # 4. \u5224\u65ad\u5355\u8bcd\u4e2d\u7684\u5b57\u6bcd\u662f\u5426\u5728\u6240\u6709\u7684\u5b57\u6bcd\u4e2d\n        # 5. \u5982\u679c\u5728\uff0c\u5219\u52a0\u5165\u7ed3\u679c\n        # 6. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\n        all_letters = set()\n        for word in words:\n            for letter in word:\n                all_letters.add(letter)\n        \n        # 2. \u627e\u51fa\u6240\u6709\u7684\u5355\u8bcd\n        all_words = set()\n        for word in words:\n            all_words.add(word)\n        \n        # 3. \u627e\u51fa\u6240\u6709\u7684\u5355\u8bcd\u4e2d\u7684\u5b57\u6bcd\n        all_letters_in_words = set()\n        for word in words:\n            for letter in word:\n                all_letters_in_words.add(letter)\n        \n        # 4. \u5224\u65ad\u5355\u8bcd\u4e2d\u7684\u5b57\u6bcd\u662f\u5426\u5728\u6240\u6709\u7684\u5b57\u6bcd\u4e2d\n        result = []\n        for word in words:\n            for letter in word:\n                if letter not in all_letters:\n                    break\n            else:\n                result.append(word)\n        \n        # 5. \u5982\u679c\u5728\uff0c\u5219\u52a0\u5165\u7ed3\u679c\n        \n        # 6. \u8fd4\u56de\u7ed3\u679c\n        return result"}, {"task_id": "keyboard-row", "completion": "class Solution(object):\n    def findWords(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \u6309\u5b57\u6bcd\u987a\u5e8f\u6392\u5e8f\n        # 2. \u904d\u5386\u6bcf\u4e2a\u5b57\u7b26\u4e32\uff0c\u5224\u65ad\u662f\u5426\u53ef\u4ee5\u7528\u4e00\u884c\u952e\u76d8\u8f93\u5165\n        # 3. \u5982\u679c\u53ef\u4ee5\u8f93\u5165\uff0c\u5219\u52a0\u5165\u7ed3\u679c\n        # 4. \u5982\u679c\u4e0d\u53ef\u4ee5\u8f93\u5165\uff0c\u5219\u8df3\u8fc7\n        # 5. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u6309\u5b57\u6bcd\u987a\u5e8f\u6392\u5e8f\n        words.sort()\n        \n        # 2. \u904d\u5386\u6bcf\u4e2a\u5b57\u7b26\u4e32\uff0c\u5224\u65ad\u662f\u5426\u53ef\u4ee5\u7528\u4e00\u884c\u952e\u76d8\u8f93\u5165\n        # 3. \u5982\u679c\u53ef\u4ee5\u8f93\u5165\uff0c\u5219\u52a0\u5165\u7ed3\u679c\n        # 4. \u5982\u679c\u4e0d\u53ef\u4ee5\u8f93\u5165\uff0c\u5219\u8df3\u8fc7\n        # 5. \u8fd4\u56de\u7ed3\u679c\n        result = []\n        for word in words:\n            if self.isOneRow(word):\n                result.append(word)\n        return result\n    \n    def isOneRow(self, word):\n        # 1. \u521d\u59cb\u5316\u4e00\u4e2a\u5b57\u5178\uff0ckey\u662f\u5b57\u6bcd\uff0cvalue\u662f\u5b57\u6bcd\u51fa\u73b0\u7684\u6b21\u6570\n        # 2. \u904d\u5386\u6bcf\u4e2a\u5b57\u7b26\n        # 3. \u5982\u679c\u5b57\u6bcd\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u5b57\u5178\u4e2d\u7684\u503c\u52a01\n        # 4. \u5982\u679c\u5b57\u6bcd\u4e0d\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u5b57\u5178\u4e2d\u7684\u503c\u4e3a1\n        # 5. \u904d\u5386\u5b57\u5178\uff0c\u5982\u679c\u5b57\u5178\u4e2d\u7684\u503c\u5927\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # 6. \u8fd4\u56deTrue\n        letter_count = {}\n        for letter in word:\n            if letter in letter_count:\n                letter_count[letter] += 1\n            else:\n                letter_count[letter] = 1\n        for letter in letter_count:\n            if letter_count[letter] > 1:\n                return False\n        return True"}, {"task_id": "keyboard-row", "completion": "class Solution(object):\n    def findWords(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \u6309\u5b57\u6bcd\u987a\u5e8f\u6392\u5e8f\n        # 2. \u904d\u5386\u6bcf\u4e2a\u5b57\u7b26\u4e32\uff0c\u5224\u65ad\u662f\u5426\u53ef\u4ee5\u7528\u4e00\u884c\u952e\u76d8\u8f93\u5165\n        # 3. \u5982\u679c\u53ef\u4ee5\u8f93\u5165\uff0c\u5219\u52a0\u5165\u7ed3\u679c\n        # 4. \u5982\u679c\u4e0d\u53ef\u4ee5\u8f93\u5165\uff0c\u5219\u8df3\u8fc7\n        # 5. \u8fd4\u56de\u7ed3\u679c\n        \n        # \u6309\u5b57\u6bcd\u987a\u5e8f\u6392\u5e8f\n        words.sort()\n        \n        # \u904d\u5386\u6bcf\u4e2a\u5b57\u7b26\u4e32\uff0c\u5224\u65ad\u662f\u5426\u53ef\u4ee5\u7528\u4e00\u884c\u952e\u76d8\u8f93\u5165\n        result = []\n        for word in words:\n            # \u5982\u679c\u53ef\u4ee5\u8f93\u5165\uff0c\u5219\u52a0\u5165\u7ed3\u679c\n            if self.isOneRow(word):\n                result.append(word)\n        \n        return result\n    \n    def isOneRow(self, word):\n        # \u5982\u679c\u53ef\u4ee5\u8f93\u5165\uff0c\u5219\u52a0\u5165\u7ed3\u679c\n        # 1. \u521d\u59cb\u5316\u4e00\u4e2a\u5b57\u5178\uff0ckey\u4e3a\u5b57\u6bcd\uff0cvalue\u4e3a\u5b57\u6bcd\u51fa\u73b0\u7684\u6b21\u6570\n        # 2. \u904d\u5386\u6bcf\u4e2a\u5b57\u7b26\uff0c\u5982\u679c\u5b57\u6bcd\u5728\u5b57\u5178\u4e2d\uff0c\u5219value+1\uff0c\u5426\u5219value=1\n        # 3. \u904d\u5386\u5b57\u5178\uff0c\u5982\u679cvalue>1\uff0c\u5219\u8fd4\u56deFalse\n        # 4. \u8fd4\u56deTrue\n        \n        # \u521d\u59cb\u5316\u4e00\u4e2a\u5b57\u5178\uff0ckey\u4e3a\u5b57\u6bcd\uff0cvalue\u4e3a\u5b57\u6bcd\u51fa\u73b0\u7684\u6b21\u6570\n        letter_dict = {}\n        \n        # \u904d\u5386\u6bcf\u4e2a\u5b57\u7b26\uff0c\u5982\u679c\u5b57\u6bcd\u5728\u5b57\u5178\u4e2d\uff0c\u5219value+1\uff0c\u5426\u5219value=1\n        for letter in word:\n            if letter in letter_dict:\n                letter_dict[letter] += 1\n            else:\n                letter_dict[letter] = 1\n        \n        # \u904d\u5386\u5b57\u5178\uff0c\u5982\u679cvalue>1\uff0c\u5219\u8fd4\u56deFalse\n        for value in letter_dict.values():\n            if value > 1:\n                return False\n        \n        return True"}, {"task_id": "keyboard-row", "completion": "class Solution(object):\n    def findWords(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \u6309\u5b57\u6bcd\u987a\u5e8f\u6392\u5e8f\n        # 2. \u904d\u5386\u6bcf\u4e2a\u5b57\u7b26\u4e32\uff0c\u5982\u679c\u5f53\u524d\u5b57\u7b26\u4e32\u7684\u5b57\u6bcd\u5728\u5b57\u6bcd\u8868\u4e2d\uff0c\u5219\u7ee7\u7eed\u904d\u5386\uff0c\u5426\u5219\u8df3\u51fa\u5faa\u73af\n        # 3. \u5982\u679c\u904d\u5386\u5b8c\u6240\u6709\u5b57\u7b26\u4e32\uff0c\u5219\u8bf4\u660e\u5f53\u524d\u5b57\u6bcd\u8868\u4e2d\u7684\u5b57\u6bcd\u90fd\u5728\u5b57\u6bcd\u8868\u4e2d\uff0c\u5219\u8fd4\u56de\u5f53\u524d\u5b57\u6bcd\u8868\n        # 4. \u5982\u679c\u904d\u5386\u5b8c\u6240\u6709\u5b57\u7b26\u4e32\uff0c\u4f46\u662f\u5b57\u6bcd\u8868\u4e2d\u7684\u5b57\u6bcd\u90fd\u4e0d\u5728\u5b57\u6bcd\u8868\u4e2d\uff0c\u5219\u8fd4\u56de\u7a7a\n        # 5. \u5982\u679c\u904d\u5386\u5b8c\u6240\u6709\u5b57\u7b26\u4e32\uff0c\u4f46\u662f\u5b57\u6bcd\u8868\u4e2d\u7684\u5b57\u6bcd\u90fd\u5728\u5b57\u6bcd\u8868\u4e2d\uff0c\u5219\u8fd4\u56de\u7a7a\n        # 6. \u5982\u679c\u904d\u5386\u5b8c\u6240\u6709\u5b57\u7b26\u4e32\uff0c\u4f46\u662f\u5b57\u6bcd\u8868\u4e2d\u7684\u5b57\u6bcd\u90fd\u5728\u5b57\u6bcd\u8868\u4e2d\uff0c\u5219\u8fd4\u56de\u7a7a\n        # 7. \u5982\u679c\u904d\u5386\u5b8c\u6240\u6709\u5b57\u7b26\u4e32\uff0c\u4f46\u662f\u5b57\u6bcd\u8868\u4e2d\u7684\u5b57\u6bcd\u90fd\u5728\u5b57\u6bcd\u8868\u4e2d\uff0c\u5219\u8fd4\u56de\u7a7a\n        # 8. \u5982\u679c\u904d\u5386\u5b8c\u6240\u6709\u5b57\u7b26\u4e32\uff0c\u4f46\u662f\u5b57\u6bcd\u8868\u4e2d\u7684\u5b57\u6bcd\u90fd\u5728\u5b57\u6bcd\u8868\u4e2d\uff0c\u5219\u8fd4\u56de\u7a7a\n        # 9. \u5982\u679c\u904d\u5386\u5b8c\u6240\u6709\u5b57\u7b26\u4e32\uff0c\u4f46\u662f\u5b57\u6bcd\u8868\u4e2d\u7684\u5b57\u6bcd\u90fd\u5728\u5b57\u6bcd\u8868\u4e2d\uff0c\u5219\u8fd4\u56de\u7a7a\n        # 10. \u5982\u679c\u904d\u5386\u5b8c\u6240\u6709\u5b57\u7b26\u4e32\uff0c\u4f46\u662f\u5b57\u6bcd\u8868\u4e2d\u7684\u5b57\u6bcd\u90fd\u5728\u5b57\u6bcd\u8868\u4e2d\uff0c\u5219\u8fd4\u56de\u7a7a\n        # 11. \u5982\u679c\u904d\u5386\u5b8c\u6240\u6709\u5b57\u7b26\u4e32\uff0c\u4f46\u662f\u5b57\u6bcd\u8868\u4e2d\u7684\u5b57\u6bcd\u90fd\u5728\u5b57\u6bcd\u8868\u4e2d\uff0c\u5219\u8fd4\u56de\u7a7a\n        # 12. \u5982\u679c\u904d\u5386\u5b8c\u6240\u6709\u5b57\u7b26\u4e32\uff0c\u4f46\u662f\u5b57\u6bcd\u8868\u4e2d\u7684\u5b57\u6bcd\u90fd\u5728\u5b57\u6bcd\u8868\u4e2d\uff0c\u5219\u8fd4\u56de\u7a7a\n        # 13. \u5982\u679c\u904d\u5386\u5b8c\u6240\u6709\u5b57\u7b26\u4e32\uff0c\u4f46\u662f\u5b57\u6bcd\u8868\u4e2d\u7684\u5b57\u6bcd\u90fd\u5728\u5b57\u6bcd\u8868\u4e2d\uff0c\u5219\u8fd4\u56de\u7a7a\n        # 14. \u5982\u679c\u904d\u5386\u5b8c\u6240\u6709\u5b57\u7b26\u4e32\uff0c\u4f46\u662f\u5b57\u6bcd\u8868\u4e2d\u7684\u5b57\u6bcd\u90fd\u5728\u5b57\u6bcd\u8868\u4e2d\uff0c\u5219\u8fd4\u56de\u7a7a\n        # 15. \u5982\u679c\u904d\u5386\u5b8c\u6240\u6709\u5b57\u7b26\u4e32\uff0c\u4f46\u662f\u5b57\u6bcd\u8868\u4e2d\u7684\u5b57\u6bcd\u90fd\u5728\u5b57\u6bcd\u8868\u4e2d\uff0c\u5219\u8fd4\u56de\u7a7a\n        # 16. \u5982\u679c\u904d\u5386\u5b8c\u6240\u6709\u5b57\u7b26\u4e32\uff0c\u4f46\u662f\u5b57\u6bcd\u8868\u4e2d\u7684\u5b57\u6bcd\u90fd\u5728\u5b57\u6bcd\u8868\u4e2d\uff0c\u5219\u8fd4\u56de\u7a7a\n        # 17. \u5982\u679c\u904d\u5386\u5b8c\u6240\u6709\u5b57\u7b26\u4e32\uff0c\u4f46\u662f\u5b57\u6bcd\u8868\u4e2d\u7684\u5b57\u6bcd\u90fd\u5728\u5b57\u6bcd\u8868\u4e2d\uff0c\u5219\u8fd4\u56de\u7a7a\n        # 18. \u5982\u679c\u904d\u5386\u5b8c\u6240\u6709\u5b57\u7b26\u4e32\uff0c\u4f46\u662f\u5b57\u6bcd\u8868\u4e2d\u7684\u5b57\u6bcd\u90fd\u5728\u5b57\u6bcd\u8868\u4e2d\uff0c\u5219\u8fd4\u56de\u7a7a\n        # 19. \u5982\u679c\u904d\u5386\u5b8c\u6240\u6709\u5b57\u7b26\u4e32\uff0c\u4f46\u662f\u5b57\u6bcd\u8868\u4e2d\u7684\u5b57\u6bcd\u90fd\u5728\u5b57\u6bcd\u8868\u4e2d\uff0c\u5219\u8fd4\u56de\u7a7a\n        # 20. \u5982\u679c\u904d\u5386\u5b8c\u6240\u6709\u5b57\u7b26\u4e32\uff0c\u4f46\u662f\u5b57\u6bcd\u8868\u4e2d\u7684\u5b57\u6bcd\u90fd\u5728\u5b57\u6bcd\u8868\u4e2d\uff0c\u5219\u8fd4\u56de\u7a7a\n        # 21. \u5982\u679c\u904d\u5386\u5b8c\u6240\u6709\u5b57\u7b26\u4e32\uff0c\u4f46\u662f\u5b57\u6bcd\u8868\u4e2d\u7684\u5b57\u6bcd\u90fd\u5728\u5b57\u6bcd\u8868\u4e2d\uff0c\u5219\u8fd4\u56de\u7a7a\n        # 22. \u5982\u679c\u904d\u5386\u5b8c\u6240\u6709\u5b57\u7b26\u4e32\uff0c\u4f46\u662f\u5b57\u6bcd\u8868\u4e2d\u7684\u5b57\u6bcd\u90fd\u5728\u5b57\u6bcd\u8868\u4e2d\uff0c\u5219\u8fd4\u56de\u7a7a\n        # 23. \u5982\u679c\u904d\u5386\u5b8c\u6240\u6709\u5b57\u7b26\u4e32\uff0c\u4f46\u662f\u5b57\u6bcd\u8868\u4e2d\u7684\u5b57\u6bcd\u90fd\u5728\u5b57\u6bcd\u8868\u4e2d\uff0c\u5219\u8fd4\u56de\u7a7a"}, {"task_id": "keyboard-row", "completion": "class Solution(object):\n    def findWords(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \u6309\u5b57\u6bcd\u987a\u5e8f\u6392\u5e8f\n        # 2. \u904d\u5386\u6bcf\u4e2a\u5b57\u7b26\u4e32\uff0c\u5982\u679c\u5f53\u524d\u5b57\u7b26\u4e32\u7684\u5b57\u6bcd\u5728\u5b57\u6bcd\u8868\u4e2d\uff0c\u5219\u7ee7\u7eed\u904d\u5386\uff0c\u5426\u5219\u8df3\u8fc7\n        # 3. \u5982\u679c\u904d\u5386\u5b8c\u6240\u6709\u5b57\u6bcd\uff0c\u5219\u8bf4\u660e\u5f53\u524d\u5b57\u7b26\u4e32\u53ef\u4ee5\u8f93\u5165\n        # 4. \u5982\u679c\u904d\u5386\u5b8c\u6240\u6709\u5b57\u6bcd\uff0c\u4f46\u662f\u5f53\u524d\u5b57\u7b26\u4e32\u6ca1\u6709\u8f93\u5165\uff0c\u5219\u8df3\u8fc7\n        # 5. \u5982\u679c\u904d\u5386\u5b8c\u6240\u6709\u5b57\u6bcd\uff0c\u4e14\u5f53\u524d\u5b57\u7b26\u4e32\u53ef\u4ee5\u8f93\u5165\uff0c\u5219\u5c06\u5f53\u524d\u5b57\u7b26\u4e32\u52a0\u5165\u7ed3\u679c\n        # 6. \u8fd4\u56de\u7ed3\u679c\n        \n        # \u6309\u5b57\u6bcd\u987a\u5e8f\u6392\u5e8f\n        words.sort()\n        \n        # \u904d\u5386\u6bcf\u4e2a\u5b57\u7b26\u4e32\uff0c\u5982\u679c\u5f53\u524d\u5b57\u7b26\u4e32\u7684\u5b57\u6bcd\u5728\u5b57\u6bcd\u8868\u4e2d\uff0c\u5219\u7ee7\u7eed\u904d\u5386\uff0c\u5426\u5219\u8df3\u8fc7\n        result = []\n        for word in words:\n            for letter in word:\n                if letter not in 'qwertyuiopasdfghjklzxcvbnm':\n                    break\n            else:\n                # \u5982\u679c\u904d\u5386\u5b8c\u6240\u6709\u5b57\u6bcd\uff0c\u5219\u8bf4\u660e\u5f53\u524d\u5b57\u7b26\u4e32\u53ef\u4ee5\u8f93\u5165\n                result.append(word)\n        \n        return result"}], "reverse-linked-list-ii": [{"task_id": "reverse-linked-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseBetween(self, head, left, right):\n        \"\"\"\n        :type head: ListNode\n        :type left: int\n        :type right: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # 1. Create a dummy node\n        dummy = ListNode(0)\n        dummy.next = head\n        \n        # 2. Create two pointers, one at the beginning of the list and the other at the end of the list\n        prev = dummy\n        for _ in range(left - 1):\n            prev = prev.next\n        \n        # 3. Create two pointers, one at the beginning of the list and the other at the end of the list\n        start = prev.next\n        end = start\n        for _ in range(right - left + 1):\n            end = end.next\n        \n        # 4. Reverse the nodes between the two pointers\n        while start != end:\n            temp = start.next\n            start.next = end.next\n            end.next = start\n            start = temp\n        \n        # 5. Return the new head of the list\n        return dummy.next"}, {"task_id": "reverse-linked-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseBetween(self, head, left, right):\n        \"\"\"\n        :type head: ListNode\n        :type left: int\n        :type right: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # 1. Create a dummy node\n        dummy = ListNode(0)\n        dummy.next = head\n        \n        # 2. Create two pointers, one at the beginning of the list and the other at the end of the list\n        prev = dummy\n        for _ in range(left - 1):\n            prev = prev.next\n        \n        # 3. Create two pointers, one at the beginning of the list and the other at the end of the list\n        start = prev.next\n        end = start\n        for _ in range(right - left + 1):\n            end = end.next\n        \n        # 4. Reverse the nodes between start and end\n        prev = start\n        while prev != end:\n            temp = prev.next\n            prev.next = end\n            end = prev\n            prev = temp\n        \n        # 5. Connect the nodes\n        start.next = end\n        \n        # 6. Return the new head\n        return dummy.next"}, {"task_id": "reverse-linked-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseBetween(self, head, left, right):\n        \"\"\"\n        :type head: ListNode\n        :type left: int\n        :type right: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # 1. Create a new node\n        # 2. Set the next pointer of the new node to the head\n        # 3. Set the head to the new node\n        # 4. Set the next pointer of the new node to the next pointer of the head\n        # 5. Set the next pointer of the head to the next pointer of the new node\n        # 6. Return the head\n        \n        # Create a new node\n        new_node = ListNode(0)\n        new_node.next = head\n        \n        # Set the next pointer of the new node to the head\n        head = new_node\n        \n        # Set the head to the new node\n        head = new_node.next\n        \n        # Set the next pointer of the new node to the next pointer of the head\n        new_node.next = head.next\n        \n        # Set the next pointer of the head to the next pointer of the new node\n        head.next = new_node\n        \n        # Set the next pointer of the new node to the next pointer of the head\n        head = new_node.next\n        \n        # Set the next pointer of the head to the next pointer of the new node\n        head.next = new_node.next\n        \n        # Return the head\n        return head"}, {"task_id": "reverse-linked-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseBetween(self, head, left, right):\n        \"\"\"\n        :type head: ListNode\n        :type left: int\n        :type right: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # 1. Create a dummy node\n        dummy = ListNode(0)\n        dummy.next = head\n        \n        # 2. Create two pointers, one at the beginning of the list and the other at the end of the list\n        prev = dummy\n        for _ in range(left - 1):\n            prev = prev.next\n        \n        # 3. Create two pointers, one at the beginning of the list and the other at the end of the list\n        start = prev.next\n        end = start\n        for _ in range(right - left + 1):\n            end = end.next\n        \n        # 4. Reverse the nodes between the two pointers\n        prev = start\n        while prev != end:\n            temp = prev.next\n            prev.next = end\n            end = prev\n            prev = temp\n        \n        # 5. Connect the nodes\n        prev.next = end\n        \n        # 6. Return the new head\n        return dummy.next"}, {"task_id": "reverse-linked-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseBetween(self, head, left, right):\n        \"\"\"\n        :type head: ListNode\n        :type left: int\n        :type right: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # 1. Create a new node\n        # 2. Set the next pointer of the new node to the head\n        # 3. Set the head pointer to the new node\n        # 4. Set the next pointer of the new node to the next pointer of the head\n        # 5. Set the next pointer of the head to the next pointer of the new node\n        # 6. Return the new node\n        \n        # 1. Create a new node\n        new_node = ListNode(0)\n        new_node.next = head\n        \n        # 2. Set the next pointer of the new node to the head\n        prev = new_node\n        \n        # 3. Set the head pointer to the new node\n        head = new_node\n        \n        # 4. Set the next pointer of the new node to the next pointer of the head\n        for _ in range(left - 1):\n            prev = prev.next\n        \n        # 5. Set the next pointer of the head to the next pointer of the new node\n        for _ in range(right - left + 1):\n            temp = prev.next\n            prev.next = temp.next\n            temp.next = head.next\n            head.next = temp\n            \n        # 6. Return the new node\n        return new_node.next"}], "shortest-palindrome": [{"task_id": "shortest-palindrome", "completion": "class Solution(object):\n    def shortestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u627e\u5230s\u7684\u6700\u957f\u56de\u6587\u5b50\u4e32\n        # 2. \u5c06s\u7684\u6700\u957f\u56de\u6587\u5b50\u4e32\u548cs\u62fc\u63a5\u8d77\u6765\n        # 3. \u5982\u679c\u62fc\u63a5\u540e\u7684\u5b57\u7b26\u4e32\u662f\u56de\u6587\u4e32\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\n        # 4. \u5426\u5219\uff0c\u5c06\u62fc\u63a5\u540e\u7684\u5b57\u7b26\u4e32\u548cs\u7684\u6700\u957f\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u90e8\u5206\u53cd\u8f6c\n        # 5. \u8fd4\u56de\u62fc\u63a5\u540e\u7684\u5b57\u7b26\u4e32\n        \n        # 1. \u627e\u5230s\u7684\u6700\u957f\u56de\u6587\u5b50\u4e32\n        # 2. \u5c06s\u7684\u6700\u957f\u56de\u6587\u5b50\u4e32\u548cs\u62fc\u63a5\u8d77\u6765\n        # 3. \u5982\u679c\u62fc\u63a5\u540e\u7684\u5b57\u7b26\u4e32\u662f\u56de\u6587\u4e32\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\n        # 4. \u5426\u5219\uff0c\u5c06\u62fc\u63a5\u540e\u7684\u5b57\u7b26\u4e32\u548cs\u7684\u6700\u957f\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u90e8\u5206\u53cd\u8f6c\n        # 5. \u8fd4\u56de\u62fc\u63a5\u540e\u7684\u5b57\u7b26\u4e32\n        \n        # 1. \u627e\u5230s\u7684\u6700\u957f\u56de\u6587\u5b50\u4e32\n        # 2. \u5c06s\u7684\u6700\u957f\u56de\u6587\u5b50\u4e32\u548cs\u62fc\u63a5\u8d77\u6765\n        # 3. \u5982\u679c\u62fc\u63a5\u540e\u7684\u5b57\u7b26\u4e32\u662f\u56de\u6587\u4e32\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\n        # 4. \u5426\u5219\uff0c\u5c06\u62fc\u63a5\u540e\u7684\u5b57\u7b26\u4e32\u548cs\u7684\u6700\u957f\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u90e8\u5206\u53cd\u8f6c\n        # 5. \u8fd4\u56de\u62fc\u63a5\u540e\u7684\u5b57\u7b26\u4e32\n        \n        # 1. \u627e\u5230s\u7684\u6700\u957f\u56de\u6587\u5b50\u4e32\n        # 2. \u5c06s\u7684\u6700\u957f\u56de\u6587\u5b50\u4e32\u548cs\u62fc\u63a5\u8d77\u6765\n        # 3. \u5982\u679c\u62fc\u63a5\u540e\u7684\u5b57\u7b26\u4e32\u662f\u56de\u6587\u4e32\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\n        # 4. \u5426\u5219\uff0c\u5c06\u62fc\u63a5\u540e\u7684\u5b57\u7b26\u4e32\u548cs\u7684\u6700\u957f\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u90e8\u5206\u53cd\u8f6c\n        # 5. \u8fd4\u56de\u62fc\u63a5\u540e\u7684\u5b57\u7b26\u4e32\n        \n        # 1. \u627e\u5230s\u7684\u6700\u957f\u56de\u6587\u5b50\u4e32\n        # 2. \u5c06s\u7684\u6700\u957f\u56de\u6587\u5b50\u4e32\u548cs\u62fc\u63a5\u8d77\u6765\n        # 3. \u5982\u679c\u62fc\u63a5\u540e\u7684\u5b57\u7b26\u4e32\u662f\u56de\u6587\u4e32\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\n        # 4. \u5426\u5219\uff0c\u5c06\u62fc\u63a5\u540e\u7684\u5b57\u7b26\u4e32\u548cs\u7684\u6700\u957f\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u90e8\u5206\u53cd\u8f6c\n        # 5. \u8fd4\u56de\u62fc\u63a5\u540e\u7684\u5b57\u7b26\u4e32\n        \n        # 1. \u627e\u5230s\u7684\u6700\u957f\u56de\u6587\u5b50\u4e32\n        # 2. \u5c06s\u7684\u6700\u957f\u56de\u6587\u5b50\u4e32\u548cs\u62fc\u63a5\u8d77\u6765\n        # 3. \u5982\u679c\u62fc\u63a5\u540e\u7684\u5b57\u7b26\u4e32\u662f\u56de\u6587\u4e32\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\n        # 4. \u5426\u5219\uff0c\u5c06\u62fc\u63a5\u540e\u7684\u5b57\u7b26\u4e32\u548cs\u7684\u6700\u957f\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u90e8\u5206\u53cd\u8f6c\n        # 5. \u8fd4\u56de\u62fc\u63a5\u540e\u7684\u5b57\u7b26\u4e32\n        \n        # 1. \u627e\u5230s\u7684\u6700\u957f\u56de\u6587\u5b50\u4e32\n        # 2. \u5c06s\u7684\u6700\u957f\u56de\u6587\u5b50\u4e32\u548cs\u62fc\u63a5\u8d77\u6765\n        # 3. \u5982\u679c\u62fc\u63a5\u540e\u7684\u5b57\u7b26\u4e32\u662f\u56de\u6587\u4e32\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\n        # 4. \u5426\u5219\uff0c\u5c06\u62fc\u63a5\u540e\u7684\u5b57\u7b26\u4e32\u548cs\u7684\u6700\u957f\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u90e8\u5206\u53cd\u8f6c\n        # 5. \u8fd4\u56de\u62fc\u63a5\u540e\u7684\u5b57\u7b26\u4e32\n        \n        # 1. \u627e\u5230s\u7684\u6700\u957f\u56de\u6587\u5b50\u4e32\n        # 2. \u5c06s\u7684\u6700\u957f\u56de\u6587\u5b50\u4e32\u548cs\u62fc\u63a5\u8d77\u6765\n        # 3. \u5982\u679c\u62fc\u63a5\u540e\u7684\u5b57\u7b26\u4e32\u662f\u56de\u6587\u4e32\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\n        # 4. \u5426\u5219\uff0c\u5c06\u62fc\u63a5\u540e\u7684\u5b57\u7b26\u4e32\u548cs\u7684\u6700\u957f\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u90e8\u5206\u53cd\u8f6c\n        # 5. \u8fd4\u56de\u62fc\u63a5\u540e\u7684\u5b57\u7b26\u4e32\n        \n        # 1. \ufffd\ufffd"}, {"task_id": "shortest-palindrome", "completion": "class Solution(object):\n    def shortestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u524d\u7f00\n        # 3. \u628a\u524d\u7f00\u62fc\u63a5\u5230\u539f\u5b57\u7b26\u4e32\u540e\u9762\n        # 4. \u5982\u679c\u62fc\u63a5\u540e\u7684\u5b57\u7b26\u4e32\u662f\u56de\u6587\u4e32\uff0c\u76f4\u63a5\u8fd4\u56de\n        # 5. \u5982\u679c\u62fc\u63a5\u540e\u7684\u5b57\u7b26\u4e32\u4e0d\u662f\u56de\u6587\u4e32\uff0c\u7ee7\u7eed\u627e\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\n        # 6. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u524d\u7f00\n        # 7. \u628a\u524d\u7f00\u62fc\u63a5\u5230\u539f\u5b57\u7b26\u4e32\u540e\u9762\n        # 8. \u5982\u679c\u62fc\u63a5\u540e\u7684\u5b57\u7b26\u4e32\u662f\u56de\u6587\u4e32\uff0c\u76f4\u63a5\u8fd4\u56de\n        # 9. \u5982\u679c\u62fc\u63a5\u540e\u7684\u5b57\u7b26\u4e32\u4e0d\u662f\u56de\u6587\u4e32\uff0c\u7ee7\u7eed\u627e\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\n        # 10. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u524d\u7f00\n        # 11. \u628a\u524d\u7f00\u62fc\u63a5\u5230\u539f\u5b57\u7b26\u4e32\u540e\u9762\n        # 12. \u5982\u679c\u62fc\u63a5\u540e\u7684\u5b57\u7b26\u4e32\u662f\u56de\u6587\u4e32\uff0c\u76f4\u63a5\u8fd4\u56de\n        # 13. \u5982\u679c\u62fc\u63a5\u540e\u7684\u5b57\u7b26\u4e32\u4e0d\u662f\u56de\u6587\u4e32\uff0c\u7ee7\u7eed\u627e\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\n        # 14. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u524d\u7f00\n        # 15. \u628a\u524d\u7f00\u62fc\u63a5\u5230\u539f\u5b57\u7b26\u4e32\u540e\u9762\n        # 16. \u5982\u679c\u62fc\u63a5\u540e\u7684\u5b57\u7b26\u4e32\u662f\u56de\u6587\u4e32\uff0c\u76f4\u63a5\u8fd4\u56de\n        # 17. \u5982\u679c\u62fc\u63a5\u540e\u7684\u5b57\u7b26\u4e32\u4e0d\u662f\u56de\u6587\u4e32\uff0c\u7ee7\u7eed\u627e\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\n        # 18. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u524d\u7f00\n        # 19. \u628a\u524d\u7f00\u62fc\u63a5\u5230\u539f\u5b57\u7b26\u4e32\u540e\u9762\n        # 20. \u5982\u679c\u62fc\u63a5\u540e\u7684\u5b57\u7b26\u4e32\u662f\u56de\u6587\u4e32\uff0c\u76f4\u63a5\u8fd4\u56de\n        # 21. \u5982\u679c\u62fc\u63a5\u540e\u7684\u5b57\u7b26\u4e32\u4e0d\u662f\u56de\u6587\u4e32\uff0c\u7ee7\u7eed\u627e\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\n        # 22. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u524d\u7f00\n        # 23. \u628a\u524d\u7f00\u62fc\u63a5\u5230\u539f\u5b57\u7b26\u4e32\u540e\u9762\n        # 24. \u5982\u679c\u62fc\u63a5\u540e\u7684\u5b57\u7b26\u4e32\u662f\u56de\u6587\u4e32\uff0c\u76f4\u63a5\u8fd4\u56de\n        # 25. \u5982\u679c\u62fc\u63a5\u540e\u7684\u5b57\u7b26\u4e32\u4e0d\u662f\u56de\u6587\u4e32\uff0c\u7ee7\u7eed\u627e\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\n        # 26. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u524d\u7f00\n        # 27. \u628a\u524d\u7f00\u62fc\u63a5\u5230\u539f\u5b57\u7b26\u4e32\u540e\u9762\n        # 28. \u5982\u679c\u62fc\u63a5\u540e\u7684\u5b57\u7b26\u4e32\u662f\u56de\u6587\u4e32\uff0c\u76f4\u63a5\u8fd4\u56de\n        # 29. \u5982\u679c\u62fc\u63a5\u540e\u7684\u5b57\u7b26\u4e32\u4e0d\u662f\u56de\u6587\u4e32\uff0c\u7ee7\u7eed\u627e\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\n        # 30. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u524d\u7f00\n        # 31. \u628a\u524d\u7f00\u62fc\u63a5\u5230\u539f\u5b57\u7b26\u4e32\u540e\u9762\n        # 32. \u5982\u679c\u62fc\u63a5\u540e\u7684\u5b57\u7b26\u4e32\u662f\u56de\u6587\u4e32\uff0c\u76f4\u63a5\u8fd4\u56de\n        # 33. \u5982\u679c\u62fc\u63a5\u540e\u7684\u5b57\u7b26\u4e32\u4e0d\u662f\u56de\u6587\u4e32\uff0c\u7ee7\u7eed\u627e\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\n        # 34. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u524d\u7f00\n        # 35. \u628a\u524d\u7f00\u62fc\u63a5\u5230\u539f\u5b57\u7b26\u4e32\u540e\u9762\n        # 36. \u5982\u679c\u62fc"}, {"task_id": "shortest-palindrome", "completion": "class Solution(object):\n    def shortestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u628a\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u540e\u9762\u90e8\u5206\u62fc\u63a5\u5230\u539f\u5b57\u7b26\u4e32\u7684\u540e\u9762\n        # 3. \u628a\u62fc\u63a5\u540e\u7684\u5b57\u7b26\u4e32\u53cd\u8f6c\n        # 4. \u628a\u539f\u5b57\u7b26\u4e32\u548c\u62fc\u63a5\u540e\u7684\u5b57\u7b26\u4e32\u62fc\u63a5\u8d77\u6765\n        # 5. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u628a\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u540e\u9762\u90e8\u5206\u62fc\u63a5\u5230\u539f\u5b57\u7b26\u4e32\u7684\u540e\u9762\n        # 3. \u628a\u62fc\u63a5\u540e\u7684\u5b57\u7b26\u4e32\u53cd\u8f6c\n        # 4. \u628a\u539f\u5b57\u7b26\u4e32\u548c\u62fc\u63a5\u540e\u7684\u5b57\u7b26\u4e32\u62fc\u63a5\u8d77\u6765\n        # 5. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u628a\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u540e\u9762\u90e8\u5206\u62fc\u63a5\u5230\u539f\u5b57\u7b26\u4e32\u7684\u540e\u9762\n        # 3. \u628a\u62fc\u63a5\u540e\u7684\u5b57\u7b26\u4e32\u53cd\u8f6c\n        # 4. \u628a\u539f\u5b57\u7b26\u4e32\u548c\u62fc\u63a5\u540e\u7684\u5b57\u7b26\u4e32\u62fc\u63a5\u8d77\u6765\n        # 5. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u628a\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u540e\u9762\u90e8\u5206\u62fc\u63a5\u5230\u539f\u5b57\u7b26\u4e32\u7684\u540e\u9762\n        # 3. \u628a\u62fc\u63a5\u540e\u7684\u5b57\u7b26\u4e32\u53cd\u8f6c\n        # 4. \u628a\u539f\u5b57\u7b26\u4e32\u548c\u62fc\u63a5\u540e\u7684\u5b57\u7b26\u4e32\u62fc\u63a5\u8d77\u6765\n        # 5. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u628a\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u540e\u9762\u90e8\u5206\u62fc\u63a5\u5230\u539f\u5b57\u7b26\u4e32\u7684\u540e\u9762\n        # 3. \u628a\u62fc\u63a5\u540e\u7684\u5b57\u7b26\u4e32\u53cd\u8f6c\n        # 4. \u628a\u539f\u5b57\u7b26\u4e32\u548c\u62fc\u63a5\u540e\u7684\u5b57\u7b26\u4e32\u62fc\u63a5\u8d77\u6765\n        # 5. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u628a\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u540e\u9762\u90e8\u5206\u62fc\u63a5\u5230\u539f\u5b57\u7b26\u4e32\u7684\u540e\u9762\n        # 3. \u628a\u62fc\u63a5\u540e\u7684\u5b57\u7b26\u4e32\u53cd\u8f6c\n        # 4. \u628a\u539f\u5b57\u7b26\u4e32\u548c\u62fc\u63a5\u540e\u7684\u5b57\u7b26\u4e32\u62fc\u63a5\u8d77\u6765\n        # 5. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u628a\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u540e\u9762\u90e8\u5206\u62fc\u63a5\u5230\u539f\u5b57\u7b26\u4e32\u7684\u540e\u9762\n        # 3. \u628a\u62fc\u63a5\u540e\u7684\u5b57\u7b26\u4e32\u53cd\u8f6c\n        # 4. \u628a\u539f\u5b57\u7b26\u4e32\u548c\u62fc\u63a5\u540e\u7684\u5b57\u7b26\u4e32\u62fc\u63a5\u8d77\u6765\n        # 5. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u628a\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u540e\u9762\u90e8\u5206\u62fc\u63a5\u5230\u539f\u5b57\u7b26\u4e32\u7684\u540e\u9762\n        # 3. \u628a\u62fc\u63a5\u540e\u7684\u5b57\u7b26\u4e32\u53cd\u8f6c\n        # 4. \u628a\u539f\u5b57\u7b26\u4e32\u548c\u62fc\u63a5\u540e\u7684\u5b57\u7b26\u4e32\u62fc\u63a5\u8d77\u6765\n        # 5. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u628a\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u540e\u9762\u90e8\u5206\u62fc\u63a5\u5230\u539f\u5b57\u7b26\u4e32\u7684\u540e\u9762\n        # 3. \u628a\u62fc\u63a5\u540e\u7684\u5b57\u7b26\u4e32\u53cd\u8f6c\n        # 4. \u628a\u539f\u5b57\u7b26\u4e32\u548c\u62fc\u63a5\u540e\u7684\u5b57\u7b26\u4e32"}, {"task_id": "shortest-palindrome", "completion": "class Solution(object):\n    def shortestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u627e\u5230s\u7684\u6700\u957f\u56de\u6587\u5b50\u4e32\n        # 2. \u5c06s\u7684\u6700\u957f\u56de\u6587\u5b50\u4e32\u548cs\u62fc\u63a5\u8d77\u6765\n        # 3. \u5c06\u62fc\u63a5\u540e\u7684\u5b57\u7b26\u4e32\u548cs\u8fdb\u884c\u6bd4\u8f83\uff0c\u5982\u679c\u76f8\u7b49\uff0c\u5219\u8fd4\u56de\u62fc\u63a5\u540e\u7684\u5b57\u7b26\u4e32\n        # 4. \u5982\u679c\u4e0d\u76f8\u7b49\uff0c\u5219\u5c06s\u7684\u6700\u957f\u56de\u6587\u5b50\u4e32\u7684\u540e\u4e00\u4e2a\u5b57\u7b26\u548cs\u62fc\u63a5\u8d77\u6765\uff0c\u7136\u540e\u7ee7\u7eed\u6267\u884c\u6b65\u9aa43\n        # 5. \u5982\u679c\u6b65\u9aa44\u7684\u7ed3\u679c\u4ecd\u7136\u4e0d\u76f8\u7b49\uff0c\u5219\u5c06s\u7684\u6700\u957f\u56de\u6587\u5b50\u4e32\u7684\u540e\u4e24\u4e2a\u5b57\u7b26\u548cs\u62fc\u63a5\u8d77\u6765\uff0c\u7136\u540e\u7ee7\u7eed\u6267\u884c\u6b65\u9aa43\n        # 6. \u5982\u679c\u6b65\u9aa45\u7684\u7ed3\u679c\u4ecd\u7136\u4e0d\u76f8\u7b49\uff0c\u5219\u5c06s\u7684\u6700\u957f\u56de\u6587\u5b50\u4e32\u7684\u540e\u4e09\u4e2a\u5b57\u7b26\u548cs\u62fc\u63a5\u8d77\u6765\uff0c\u7136\u540e\u7ee7\u7eed\u6267\u884c\u6b65\u9aa43\n        # 7. \u5982\u679c\u6b65\u9aa46\u7684\u7ed3\u679c\u4ecd\u7136\u4e0d\u76f8\u7b49\uff0c\u5219\u5c06s\u7684\u6700\u957f\u56de\u6587\u5b50\u4e32\u7684\u540e\u56db\u4e2a\u5b57\u7b26\u548cs\u62fc\u63a5\u8d77\u6765\uff0c\u7136\u540e\u7ee7\u7eed\u6267\u884c\u6b65\u9aa43\n        # 8. \u5982\u679c\u6b65\u9aa47\u7684\u7ed3\u679c\u4ecd\u7136\u4e0d\u76f8\u7b49\uff0c\u5219\u5c06s\u7684\u6700\u957f\u56de\u6587\u5b50\u4e32\u7684\u540e\u4e94\u4e2a\u5b57\u7b26\u548cs\u62fc\u63a5\u8d77\u6765\uff0c\u7136\u540e\u7ee7\u7eed\u6267\u884c\u6b65\u9aa43\n        # 9. \u5982\u679c\u6b65\u9aa48\u7684\u7ed3\u679c\u4ecd\u7136\u4e0d\u76f8\u7b49\uff0c\u5219\u5c06s\u7684\u6700\u957f\u56de\u6587\u5b50\u4e32\u7684\u540e\u516d\u4e2a\u5b57\u7b26\u548cs\u62fc\u63a5\u8d77\u6765\uff0c\u7136\u540e\u7ee7\u7eed\u6267\u884c\u6b65\u9aa43\n        # 10. \u5982\u679c\u6b65\u9aa49\u7684\u7ed3\u679c\u4ecd\u7136\u4e0d\u76f8\u7b49\uff0c\u5219\u5c06s\u7684\u6700\u957f\u56de\u6587\u5b50\u4e32\u7684\u540e\u4e03\u4e2a\u5b57\u7b26\u548cs\u62fc\u63a5\u8d77\u6765\uff0c\u7136\u540e\u7ee7\u7eed\u6267\u884c\u6b65\u9aa43\n        # 11. \u5982\u679c\u6b65\u9aa410\u7684\u7ed3\u679c\u4ecd\u7136\u4e0d\u76f8\u7b49\uff0c\u5219\u5c06s\u7684\u6700\u957f\u56de\u6587\u5b50\u4e32\u7684\u540e\u516b\u4e2a\u5b57\u7b26\u548cs\u62fc\u63a5\u8d77\u6765\uff0c\u7136\u540e\u7ee7\u7eed\u6267\u884c\u6b65\u9aa43\n        # 12. \u5982\u679c\u6b65\u9aa411\u7684\u7ed3\u679c\u4ecd\u7136\u4e0d\u76f8\u7b49\uff0c\u5219\u5c06s\u7684\u6700\u957f\u56de\u6587\u5b50\u4e32\u7684\u540e\u4e5d\u4e2a\u5b57\u7b26\u548cs\u62fc\u63a5\u8d77\u6765\uff0c\u7136\u540e\u7ee7\u7eed\u6267\u884c\u6b65\u9aa43\n        # 13. \u5982\u679c\u6b65\u9aa412\u7684\u7ed3\u679c\u4ecd\u7136\u4e0d\u76f8\u7b49\uff0c\u5219\u5c06s\u7684\u6700\u957f\u56de\u6587\u5b50\u4e32\u7684\u540e\u5341\u4e2a\u5b57\u7b26\u548cs\u62fc\u63a5\u8d77\u6765\uff0c\u7136\u540e\u7ee7\u7eed\u6267\u884c\u6b65\u9aa43\n        # 14. \u5982\u679c\u6b65\u9aa413\u7684\u7ed3\u679c\u4ecd\u7136\u4e0d\u76f8\u7b49\uff0c\u5219\u5c06s\u7684\u6700\u957f\u56de\u6587\u5b50\u4e32\u7684\u540e\u5341\u4e00\u4e2a\u5b57\u7b26\u548cs\u62fc\u63a5\u8d77\u6765\uff0c\u7136\u540e\u7ee7\u7eed\u6267\u884c\u6b65\u9aa43\n        # 15. \u5982\u679c\u6b65\u9aa414\u7684\u7ed3\u679c\u4ecd\u7136\u4e0d\u76f8\u7b49\uff0c\u5219\u5c06s\u7684\u6700\u957f\u56de\u6587\u5b50\u4e32\u7684\u540e\u5341\u4e8c\u4e2a\u5b57\u7b26\u548cs\u62fc\u63a5\u8d77\u6765\uff0c\u7136\u540e\u7ee7\u7eed\u6267\u884c\u6b65\u9aa43\n        # 16. \u5982\u679c\u6b65\u9aa415\u7684\u7ed3\u679c\u4ecd\u7136\u4e0d\u76f8\u7b49\uff0c\u5219\u5c06s\u7684\u6700\u957f\u56de\u6587\u5b50\u4e32\u7684\u540e\u5341\u4e09\u4e2a\u5b57\u7b26\u548cs\u62fc\u63a5\u8d77\u6765\uff0c\u7136\u540e\u7ee7\u7eed\u6267\u884c\u6b65\u9aa43\n        # 17. \u5982\u679c\ufffd\ufffd\ufffd\ufffd"}, {"task_id": "shortest-palindrome", "completion": "class Solution(object):\n    def shortestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u628a\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u540e\u9762\u7684\u5b57\u7b26\u4e32\u52a0\u5230\u524d\u9762\n        # 3. \u5982\u679c\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u662fs\u672c\u8eab\uff0c\u90a3\u4e48\u76f4\u63a5\u8fd4\u56des\n        # 4. \u5982\u679c\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u4e0d\u662fs\u672c\u8eab\uff0c\u90a3\u4e48\u8fd4\u56de\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u540e\u9762\u7684\u5b57\u7b26\u4e32\u52a0\u5230\u524d\u9762\n        \n        # 1. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u628a\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u540e\u9762\u7684\u5b57\u7b26\u4e32\u52a0\u5230\u524d\u9762\n        # 3. \u5982\u679c\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u662fs\u672c\u8eab\uff0c\u90a3\u4e48\u76f4\u63a5\u8fd4\u56des\n        # 4. \u5982\u679c\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u4e0d\u662fs\u672c\u8eab\uff0c\u90a3\u4e48\u8fd4\u56de\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u540e\u9762\u7684\u5b57\u7b26\u4e32\u52a0\u5230\u524d\u9762\n        \n        # 1. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u628a\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u540e\u9762\u7684\u5b57\u7b26\u4e32\u52a0\u5230\u524d\u9762\n        # 3. \u5982\u679c\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u662fs\u672c\u8eab\uff0c\u90a3\u4e48\u76f4\u63a5\u8fd4\u56des\n        # 4. \u5982\u679c\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u4e0d\u662fs\u672c\u8eab\uff0c\u90a3\u4e48\u8fd4\u56de\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u540e\u9762\u7684\u5b57\u7b26\u4e32\u52a0\u5230\u524d\u9762\n        \n        # 1. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u628a\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u540e\u9762\u7684\u5b57\u7b26\u4e32\u52a0\u5230\u524d\u9762\n        # 3. \u5982\u679c\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u662fs\u672c\u8eab\uff0c\u90a3\u4e48\u76f4\u63a5\u8fd4\u56des\n        # 4. \u5982\u679c\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u4e0d\u662fs\u672c\u8eab\uff0c\u90a3\u4e48\u8fd4\u56de\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u540e\u9762\u7684\u5b57\u7b26\u4e32\u52a0\u5230\u524d\u9762\n        \n        # 1. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u628a\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u540e\u9762\u7684\u5b57\u7b26\u4e32\u52a0\u5230\u524d\u9762\n        # 3. \u5982\u679c\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u662fs\u672c\u8eab\uff0c\u90a3\u4e48\u76f4\u63a5\u8fd4\u56des\n        # 4. \u5982\u679c\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u4e0d\u662fs\u672c\u8eab\uff0c\u90a3\u4e48\u8fd4\u56de\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u540e\u9762\u7684\u5b57\u7b26\u4e32\u52a0\u5230\u524d\u9762\n        \n        # 1. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u628a\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u540e\u9762\u7684\u5b57\u7b26\u4e32\u52a0\u5230\u524d\u9762\n        # 3. \u5982\u679c\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u662fs\u672c\u8eab\uff0c\u90a3\u4e48\u76f4\u63a5\u8fd4\u56des\n        # 4. \u5982\u679c\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u4e0d\u662fs\u672c\u8eab\uff0c\u90a3\u4e48\u8fd4\u56de\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u540e\u9762\u7684\u5b57\u7b26\u4e32\u52a0\u5230\u524d\u9762\n        \n        # 1. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u628a\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u540e\u9762\u7684\u5b57\u7b26\u4e32\u52a0\u5230\u524d\u9762\n        # 3. \u5982\u679c\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u662fs\u672c\u8eab\uff0c\u90a3\u4e48\u76f4\u63a5\u8fd4\u56des\n        # 4. \u5982\u679c\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u4e0d\u662fs\u672c\u8eab\uff0c\u90a3\u4e48\u8fd4\u56de\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u540e\u9762\u7684\u5b57\u7b26\u4e32\u52a0\u5230\u524d\u9762\n        \n        # 1. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u628a\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u540e\u9762\u7684\u5b57\u7b26\u4e32\u52a0\u5230\u524d\u9762\n        # 3. \u5982\u679c\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u662fs\u672c\u8eab\uff0c\u90a3\u4e48\u76f4\u63a5\u8fd4\u56des\n        # 4. \u5982\u679c\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u4e0d\u662fs\u672c\u8eab\uff0c\u90a3\u4e48\u8fd4\u56de\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u540e\u9762\u7684\u5b57\u7b26\u4e32\u52a0\u5230\u524d\u9762\n        \n        # 1. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u628a\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u540e\u9762\u7684\u5b57\u7b26\u4e32\u52a0\u5230\u524d\u9762\n        # 3. \u5982\u679c\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u662fs\u672c"}], "minimum-window-substring": [{"task_id": "minimum-window-substring", "completion": "class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. Create a dictionary of characters in t\n        # 2. Create a dictionary of characters in s\n        # 3. Create a dictionary of characters in s\n        # 4. Create a dictionary of characters in s\n        # 5. Create a dictionary of characters in s\n        # 6. Create a dictionary of characters in s\n        # 7. Create a dictionary of characters in s\n        # 8. Create a dictionary of characters in s\n        # 9. Create a dictionary of characters in s\n        # 10. Create a dictionary of characters in s\n        # 11. Create a dictionary of characters in s\n        # 12. Create a dictionary of characters in s\n        # 13. Create a dictionary of characters in s\n        # 14. Create a dictionary of characters in s\n        # 15. Create a dictionary of characters in s\n        # 16. Create a dictionary of characters in s\n        # 17. Create a dictionary of characters in s\n        # 18. Create a dictionary of characters in s\n        # 19. Create a dictionary of characters in s\n        # 20. Create a dictionary of characters in s\n        # 21. Create a dictionary of characters in s\n        # 22. Create a dictionary of characters in s\n        # 23. Create a dictionary of characters in s\n        # 24. Create a dictionary of characters in s\n        # 25. Create a dictionary of characters in s\n        # 26. Create a dictionary of characters in s\n        # 27. Create a dictionary of characters in s\n        # 28. Create a dictionary of characters in s\n        # 29. Create a dictionary of characters in s\n        # 30. Create a dictionary of characters in s\n        # 31. Create a dictionary of characters in s\n        # 32. Create a dictionary of characters in s\n        # 33. Create a dictionary of characters in s\n        # 34. Create a dictionary of characters in s\n        # 35. Create a dictionary of characters in s\n        # 36. Create a dictionary of characters in s\n        # 37. Create a dictionary of characters in s\n        # 38. Create a dictionary of characters in s\n        # 39. Create a dictionary of characters in s\n        # 40. Create a dictionary of characters in s\n        # 41. Create a dictionary of characters in s\n        # 42. Create a dictionary of characters in s\n        # 43. Create a dictionary of characters in s\n        # 44. Create a dictionary of characters in s\n        # 45. Create a dictionary of characters in s\n        # 46. Create a dictionary of characters in s\n        # 47. Create a dictionary of characters in s\n        # 48. Create a dictionary of characters in s\n        # 49. Create a dictionary of characters in s\n        # 50. Create a dictionary of characters in s\n        # 51. Create a dictionary of characters in s\n        # 52. Create a dictionary of characters in s\n        # 53. Create a dictionary of characters in s\n        # 54. Create a dictionary of characters in s\n        # 55. Create a dictionary of characters in s\n        # 56. Create a dictionary of characters in s\n        # 57. Create a dictionary of characters in s\n        # 58. Create a dictionary of characters in s\n        # 59. Create a dictionary of characters in s\n        # 60. Create a dictionary of characters in s\n        # 61. Create a dictionary of characters in s\n        # 62. Create a dictionary of characters in s\n        # 63. Create a dictionary of characters in s\n        # 64. Create a dictionary of characters in s\n        # 65. Create a dictionary of characters in s\n        # 66. Create a dictionary of characters in s\n        # 67. Create a dictionary of characters in s\n        # 68. Create a dictionary of characters in s\n        # 69. Create a dictionary of characters in s\n        # 70. Create a dictionary of characters in s\n        # 71. Create a dictionary of characters in s\n        # 72. Create a dictionary of characters in s\n        # 73. Create a dictionary of characters in s\n        # 74. Create a dictionary of characters"}, {"task_id": "minimum-window-substring", "completion": "class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. Create a dictionary of characters in t\n        # 2. Create a dictionary of characters in s\n        # 3. Create a dictionary of characters in s\n        # 4. Create a dictionary of characters in s\n        # 5. Create a dictionary of characters in s\n        # 6. Create a dictionary of characters in s\n        # 7. Create a dictionary of characters in s\n        # 8. Create a dictionary of characters in s\n        # 9. Create a dictionary of characters in s\n        # 10. Create a dictionary of characters in s\n        # 11. Create a dictionary of characters in s\n        # 12. Create a dictionary of characters in s\n        # 13. Create a dictionary of characters in s\n        # 14. Create a dictionary of characters in s\n        # 15. Create a dictionary of characters in s\n        # 16. Create a dictionary of characters in s\n        # 17. Create a dictionary of characters in s\n        # 18. Create a dictionary of characters in s\n        # 19. Create a dictionary of characters in s\n        # 20. Create a dictionary of characters in s\n        # 21. Create a dictionary of characters in s\n        # 22. Create a dictionary of characters in s\n        # 23. Create a dictionary of characters in s\n        # 24. Create a dictionary of characters in s\n        # 25. Create a dictionary of characters in s\n        # 26. Create a dictionary of characters in s\n        # 27. Create a dictionary of characters in s\n        # 28. Create a dictionary of characters in s\n        # 29. Create a dictionary of characters in s\n        # 30. Create a dictionary of characters in s\n        # 31. Create a dictionary of characters in s\n        # 32. Create a dictionary of characters in s\n        # 33. Create a dictionary of characters in s\n        # 34. Create a dictionary of characters in s\n        # 35. Create a dictionary of characters in s\n        # 36. Create a dictionary of characters in s\n        # 37. Create a dictionary of characters in s\n        # 38. Create a dictionary of characters in s\n        # 39. Create a dictionary of characters in s\n        # 40. Create a dictionary of characters in s\n        # 41. Create a dictionary of characters in s\n        # 42. Create a dictionary of characters in s\n        # 43. Create a dictionary of characters in s\n        # 44. Create a dictionary of characters in s\n        # 45. Create a dictionary of characters in s\n        # 46. Create a dictionary of characters in s\n        # 47. Create a dictionary of characters in s\n        # 48. Create a dictionary of characters in s\n        # 49. Create a dictionary of characters in s\n        # 50. Create a dictionary of characters in s\n        # 51. Create a dictionary of characters in s\n        # 52. Create a dictionary of characters in s\n        # 53. Create a dictionary of characters in s\n        # 54. Create a dictionary of characters in s\n        # 55. Create a dictionary of characters in s\n        # 56. Create a dictionary of characters in s\n        # 57. Create a dictionary of characters in s\n        # 58. Create a dictionary of characters in s\n        # 59. Create a dictionary of characters in s\n        # 60. Create a dictionary of characters in s\n        # 61. Create a dictionary of characters in s\n        # 62. Create a dictionary of characters in s\n        # 63. Create a dictionary of characters in s\n        # 64. Create a dictionary of characters in s\n        # 65. Create a dictionary of characters in s\n        # 66. Create a dictionary of characters in s\n        # 67. Create a dictionary of characters in s\n        # 68. Create a dictionary of characters in s\n        # 69. Create a dictionary of characters in s\n        # 70. Create a dictionary of characters in s\n        # 71. Create a dictionary of characters in s\n        # 72. Create a dictionary of characters in s\n        # 73. Create a dictionary of characters in s\n        # 74. Create a dictionary of characters"}, {"task_id": "minimum-window-substring", "completion": "class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. Create a dictionary of characters in t\n        # 2. Create a dictionary of characters in s\n        # 3. Create a dictionary of characters in s\n        # 4. Create a dictionary of characters in s\n        # 5. Create a dictionary of characters in s\n        # 6. Create a dictionary of characters in s\n        # 7. Create a dictionary of characters in s\n        # 8. Create a dictionary of characters in s\n        # 9. Create a dictionary of characters in s\n        # 10. Create a dictionary of characters in s\n        # 11. Create a dictionary of characters in s\n        # 12. Create a dictionary of characters in s\n        # 13. Create a dictionary of characters in s\n        # 14. Create a dictionary of characters in s\n        # 15. Create a dictionary of characters in s\n        # 16. Create a dictionary of characters in s\n        # 17. Create a dictionary of characters in s\n        # 18. Create a dictionary of characters in s\n        # 19. Create a dictionary of characters in s\n        # 20. Create a dictionary of characters in s\n        # 21. Create a dictionary of characters in s\n        # 22. Create a dictionary of characters in s\n        # 23. Create a dictionary of characters in s\n        # 24. Create a dictionary of characters in s\n        # 25. Create a dictionary of characters in s\n        # 26. Create a dictionary of characters in s\n        # 27. Create a dictionary of characters in s\n        # 28. Create a dictionary of characters in s\n        # 29. Create a dictionary of characters in s\n        # 30. Create a dictionary of characters in s\n        # 31. Create a dictionary of characters in s\n        # 32. Create a dictionary of characters in s\n        # 33. Create a dictionary of characters in s\n        # 34. Create a dictionary of characters in s\n        # 35. Create a dictionary of characters in s\n        # 36. Create a dictionary of characters in s\n        # 37. Create a dictionary of characters in s\n        # 38. Create a dictionary of characters in s\n        # 39. Create a dictionary of characters in s\n        # 40. Create a dictionary of characters in s\n        # 41. Create a dictionary of characters in s\n        # 42. Create a dictionary of characters in s\n        # 43. Create a dictionary of characters in s\n        # 44. Create a dictionary of characters in s\n        # 45. Create a dictionary of characters in s\n        # 46. Create a dictionary of characters in s\n        # 47. Create a dictionary of characters in s\n        # 48. Create a dictionary of characters in s\n        # 49. Create a dictionary of characters in s\n        # 50. Create a dictionary of characters in s\n        # 51. Create a dictionary of characters in s\n        # 52. Create a dictionary of characters in s\n        # 53. Create a dictionary of characters in s\n        # 54. Create a dictionary of characters in s\n        # 55. Create a dictionary of characters in s\n        # 56. Create a dictionary of characters in s\n        # 57. Create a dictionary of characters in s\n        # 58. Create a dictionary of characters in s\n        # 59. Create a dictionary of characters in s\n        # 60. Create a dictionary of characters in s\n        # 61. Create a dictionary of characters in s\n        # 62. Create a dictionary of characters in s\n        # 63. Create a dictionary of characters in s\n        # 64. Create a dictionary of characters in s\n        # 65. Create a dictionary of characters in s\n        # 66. Create a dictionary of characters in s\n        # 67. Create a dictionary of characters in s\n        # 68. Create a dictionary of characters in s\n        # 69. Create a dictionary of characters in s\n        # 70. Create a dictionary of characters in s\n        # 71. Create a dictionary of characters in s\n        # 72. Create a dictionary of characters in s\n        # 73. Create a dictionary of characters in s\n        # 74. Create a dictionary of characters"}, {"task_id": "minimum-window-substring", "completion": "class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. Create a dictionary of characters in t\n        # 2. Create a dictionary of characters in s\n        # 3. Create a dictionary of characters in s\n        # 4. Create a dictionary of characters in s\n        # 5. Create a dictionary of characters in s\n        # 6. Create a dictionary of characters in s\n        # 7. Create a dictionary of characters in s\n        # 8. Create a dictionary of characters in s\n        # 9. Create a dictionary of characters in s\n        # 10. Create a dictionary of characters in s\n        # 11. Create a dictionary of characters in s\n        # 12. Create a dictionary of characters in s\n        # 13. Create a dictionary of characters in s\n        # 14. Create a dictionary of characters in s\n        # 15. Create a dictionary of characters in s\n        # 16. Create a dictionary of characters in s\n        # 17. Create a dictionary of characters in s\n        # 18. Create a dictionary of characters in s\n        # 19. Create a dictionary of characters in s\n        # 20. Create a dictionary of characters in s\n        # 21. Create a dictionary of characters in s\n        # 22. Create a dictionary of characters in s\n        # 23. Create a dictionary of characters in s\n        # 24. Create a dictionary of characters in s\n        # 25. Create a dictionary of characters in s\n        # 26. Create a dictionary of characters in s\n        # 27. Create a dictionary of characters in s\n        # 28. Create a dictionary of characters in s\n        # 29. Create a dictionary of characters in s\n        # 30. Create a dictionary of characters in s\n        # 31. Create a dictionary of characters in s\n        # 32. Create a dictionary of characters in s\n        # 33. Create a dictionary of characters in s\n        # 34. Create a dictionary of characters in s\n        # 35. Create a dictionary of characters in s\n        # 36. Create a dictionary of characters in s\n        # 37. Create a dictionary of characters in s\n        # 38. Create a dictionary of characters in s\n        # 39. Create a dictionary of characters in s\n        # 40. Create a dictionary of characters in s\n        # 41. Create a dictionary of characters in s\n        # 42. Create a dictionary of characters in s\n        # 43. Create a dictionary of characters in s\n        # 44. Create a dictionary of characters in s\n        # 45. Create a dictionary of characters in s\n        # 46. Create a dictionary of characters in s\n        # 47. Create a dictionary of characters in s\n        # 48. Create a dictionary of characters in s\n        # 49. Create a dictionary of characters in s\n        # 50. Create a dictionary of characters in s\n        # 51. Create a dictionary of characters in s\n        # 52. Create a dictionary of characters in s\n        # 53. Create a dictionary of characters in s\n        # 54. Create a dictionary of characters in s\n        # 55. Create a dictionary of characters in s\n        # 56. Create a dictionary of characters in s\n        # 57. Create a dictionary of characters in s\n        # 58. Create a dictionary of characters in s\n        # 59. Create a dictionary of characters in s\n        # 60. Create a dictionary of characters in s\n        # 61. Create a dictionary of characters in s\n        # 62. Create a dictionary of characters in s\n        # 63. Create a dictionary of characters in s\n        # 64. Create a dictionary of characters in s\n        # 65. Create a dictionary of characters in s\n        # 66. Create a dictionary of characters in s\n        # 67. Create a dictionary of characters in s\n        # 68. Create a dictionary of characters in s\n        # 69. Create a dictionary of characters in s\n        # 70. Create a dictionary of characters in s\n        # 71. Create a dictionary of characters in s\n        # 72. Create a dictionary of characters in s\n        # 73. Create a dictionary of characters in s\n        # 74. Create a dictionary of characters"}, {"task_id": "minimum-window-substring", "completion": "class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. Create a dictionary of characters in t\n        # 2. Create a dictionary of characters in s\n        # 3. Create a dictionary of characters in s\n        # 4. Create a dictionary of characters in s\n        # 5. Create a dictionary of characters in s\n        # 6. Create a dictionary of characters in s\n        # 7. Create a dictionary of characters in s\n        # 8. Create a dictionary of characters in s\n        # 9. Create a dictionary of characters in s\n        # 10. Create a dictionary of characters in s\n        # 11. Create a dictionary of characters in s\n        # 12. Create a dictionary of characters in s\n        # 13. Create a dictionary of characters in s\n        # 14. Create a dictionary of characters in s\n        # 15. Create a dictionary of characters in s\n        # 16. Create a dictionary of characters in s\n        # 17. Create a dictionary of characters in s\n        # 18. Create a dictionary of characters in s\n        # 19. Create a dictionary of characters in s\n        # 20. Create a dictionary of characters in s\n        # 21. Create a dictionary of characters in s\n        # 22. Create a dictionary of characters in s\n        # 23. Create a dictionary of characters in s\n        # 24. Create a dictionary of characters in s\n        # 25. Create a dictionary of characters in s\n        # 26. Create a dictionary of characters in s\n        # 27. Create a dictionary of characters in s\n        # 28. Create a dictionary of characters in s\n        # 29. Create a dictionary of characters in s\n        # 30. Create a dictionary of characters in s\n        # 31. Create a dictionary of characters in s\n        # 32. Create a dictionary of characters in s\n        # 33. Create a dictionary of characters in s\n        # 34. Create a dictionary of characters in s\n        # 35. Create a dictionary of characters in s\n        # 36. Create a dictionary of characters in s\n        # 37. Create a dictionary of characters in s\n        # 38. Create a dictionary of characters in s\n        # 39. Create a dictionary of characters in s\n        # 40. Create a dictionary of characters in s\n        # 41. Create a dictionary of characters in s\n        # 42. Create a dictionary of characters in s\n        # 43. Create a dictionary of characters in s\n        # 44. Create a dictionary of characters in s\n        # 45. Create a dictionary of characters in s\n        # 46. Create a dictionary of characters in s\n        # 47. Create a dictionary of characters in s\n        # 48. Create a dictionary of characters in s\n        # 49. Create a dictionary of characters in s\n        # 50. Create a dictionary of characters in s\n        # 51. Create a dictionary of characters in s\n        # 52. Create a dictionary of characters in s\n        # 53. Create a dictionary of characters in s\n        # 54. Create a dictionary of characters in s\n        # 55. Create a dictionary of characters in s\n        # 56. Create a dictionary of characters in s\n        # 57. Create a dictionary of characters in s\n        # 58. Create a dictionary of characters in s\n        # 59. Create a dictionary of characters in s\n        # 60. Create a dictionary of characters in s\n        # 61. Create a dictionary of characters in s\n        # 62. Create a dictionary of characters in s\n        # 63. Create a dictionary of characters in s\n        # 64. Create a dictionary of characters in s\n        # 65. Create a dictionary of characters in s\n        # 66. Create a dictionary of characters in s\n        # 67. Create a dictionary of characters in s\n        # 68. Create a dictionary of characters in s\n        # 69. Create a dictionary of characters in s\n        # 70. Create a dictionary of characters in s\n        # 71. Create a dictionary of characters in s\n        # 72. Create a dictionary of characters in s\n        # 73. Create a dictionary of characters in s\n        # 74. Create a dictionary of characters"}], "self-crossing": [{"task_id": "self-crossing", "completion": "class Solution(object):\n    def isSelfCrossing(self, distance):\n        \"\"\"\n        :type distance: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # 2. \u8d2a\u5fc3\u7b97\u6cd5\n        # 3. \u52a8\u6001\u89c4\u5212\n        # 4. \u6ed1\u52a8\u7a97\u53e3\n        # 5. \u6808\n        # 6. \u54c8\u5e0c\u8868\n        # 7. \u4e8c\u5206\u67e5\u627e\n        # 8. \u6811\u72b6\u6570\u7ec4\n        # 9. \u524d\u7f00\u548c\n        # 10. \u4e8c\u53c9\u641c\u7d22\u6811\n        # 11. \u7ebf\u6bb5\u6811\n        # 12. \u5806\n        # 13. \u5e76\u67e5\u96c6\n        # 14. \u62d3\u6251\u6392\u5e8f\n        # 15. \u8d2a\u5fc3\u7b97\u6cd5\n        # 16. \u5206\u6cbb\u7b97\u6cd5\n        # 17. \u9012\u5f52\n        # 18. \u9012\u63a8\n        # 19. \u56de\u6eaf\n        # 20. \u5206\u652f\u754c\u9650\u6cd5\n        # 21. \u52a8\u6001\u89c4\u5212\n        # 22. \u641c\u7d22\n        # 23. \u4e8c\u5206\u67e5\u627e\n        # 24. \u5206\u6cbb\n        # 25. \u8d2a\u5fc3\n        # 26. \u56de\u6eaf\n        # 27. \u9012\u5f52\n        # 28. \u9012\u63a8\n        # 29. \u6392\u5e8f\n        # 30. \u6811\n        # 31. \u54c8\u5e0c\u8868\n        # 32. \u5806\n        # 33. \u5e76\u67e5\u96c6\n        # 34. \u5b57\u7b26\u4e32\n        # 35. \u6570\u5b66\n        # 36. \u94fe\u8868\n        # 37. \u6570\u7ec4\n        # 38. \u961f\u5217\n        # 39. \u6808\n        # 40. \u4e8c\u53c9\u6811\n        # 41. \u56fe\n        # 42. \u4f4d\u8fd0\u7b97\n        # 43. \u9012\u5f52\n        # 44. \u54c8\u5e0c\u8868\n        # 45. \u94fe\u8868\n        # 46. \u6808\n        # 47. \u961f\u5217\n        # 48. \u4e8c\u53c9\u6811\n        # 49. \u8bbe\u8ba1\n        # 50. \u5b57\u7b26\u4e32\n        # 51. \u4e8c\u53c9\u6811\n        # 52. \u94fe\u8868\n        # 53. \u6808\n        # 54. \u961f\u5217\n        # 55. \u4e8c\u53c9\u6811\n        # 56. \u8bbe\u8ba1\n        # 57. \u6570\u5b66\n        # 58. \u5b57\u7b26\u4e32\n        # 59. \u6570\u7ec4\n        # 60. \u94fe\u8868\n        # 61. \u6808\n        # 62. \u961f\u5217\n        # 63. \u4e8c\u53c9\u6811\n        # 64. \u8bbe\u8ba1\n        # 65. \u6570\u5b66\n        # 66. \u5b57\u7b26\u4e32\n        # 67. \u6570\u7ec4\n        # 68. \u94fe\u8868\n        # 69. \u6808\n        # 70. \u961f\u5217\n        # 71. \u4e8c\u53c9\u6811\n        # 72. \u8bbe\u8ba1\n        # 73. \u6570\u5b66\n        # 74. \u5b57\u7b26\u4e32\n        # 75. \u6570\u7ec4\n        # 76. \u94fe\u8868\n        # 77. \u6808\n        # 78. \u961f\u5217\n        # 79. \u4e8c\u53c9\u6811\n        # 80. \u8bbe\u8ba1\n        # 81. \u6570\u5b66\n        # 82. \u5b57\u7b26\u4e32\n        # 83. \u6570\u7ec4\n        # 84. \u94fe\u8868\n        # 85"}, {"task_id": "self-crossing", "completion": "class Solution(object):\n    def isSelfCrossing(self, distance):\n        \"\"\"\n        :type distance: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # 2. \u5faa\u73af\n        # 3. \u5faa\u73af+\u8bb0\u5fc6\u5316\u641c\u7d22\n        # 4. \u5faa\u73af+\u8bb0\u5fc6\u5316\u641c\u7d22+\u6ed1\u52a8\u7a97\u53e3\n        # 5. \u5faa\u73af+\u8bb0\u5fc6\u5316\u641c\u7d22+\u6ed1\u52a8\u7a97\u53e3+\u54c8\u5e0c\u8868\n        # 6. \u5faa\u73af+\u8bb0\u5fc6\u5316\u641c\u7d22+\u6ed1\u52a8\u7a97\u53e3+\u54c8\u5e0c\u8868+\u4e8c\u5206\u67e5\u627e\n        # 7. \u5faa\u73af+\u8bb0\u5fc6\u5316\u641c\u7d22+\u6ed1\u52a8\u7a97\u53e3+\u54c8\u5e0c\u8868+\u4e8c\u5206\u67e5\u627e+\u6ed1\u52a8\u7a97\u53e3\n        # 8. \u5faa\u73af+\u8bb0\u5fc6\u5316\u641c\u7d22+\u6ed1\u52a8\u7a97\u53e3+\u54c8\u5e0c\u8868+\u4e8c\u5206\u67e5\u627e+\u6ed1\u52a8\u7a97\u53e3+\u54c8\u5e0c\u8868\n        # 9. \u5faa\u73af+\u8bb0\u5fc6\u5316\u641c\u7d22+\u6ed1\u52a8\u7a97\u53e3+\u54c8\u5e0c\u8868+\u4e8c\u5206\u67e5\u627e+\u6ed1\u52a8\u7a97\u53e3+\u54c8\u5e0c\u8868+\u4e8c\u5206\u67e5\u627e\n        # 10. \u5faa\u73af+\u8bb0\u5fc6\u5316\u641c\u7d22+\u6ed1\u52a8\u7a97\u53e3+\u54c8\u5e0c\u8868+\u4e8c\u5206\u67e5\u627e+\u6ed1\u52a8\u7a97\u53e3+\u54c8\u5e0c\u8868+\u4e8c\u5206\u67e5\u627e+\u6ed1\u52a8\u7a97\u53e3\n        # 11. \u5faa\u73af+\u8bb0\u5fc6\u5316\u641c\u7d22+\u6ed1\u52a8\u7a97\u53e3+\u54c8\u5e0c\u8868+\u4e8c\u5206\u67e5\u627e+\u6ed1\u52a8\u7a97\u53e3+\u54c8\u5e0c\u8868+\u4e8c\u5206\u67e5\u627e+\u6ed1\u52a8\u7a97\u53e3+\u54c8\u5e0c\u8868\n        # 12. \u5faa\u73af+\u8bb0\u5fc6\u5316\u641c\u7d22+\u6ed1\u52a8\u7a97\u53e3+\u54c8\u5e0c\u8868+\u4e8c\u5206\u67e5\u627e+\u6ed1\u52a8\u7a97\u53e3+\u54c8\u5e0c\u8868+\u4e8c\u5206\u67e5\u627e+\u6ed1\u52a8\u7a97\u53e3+\u54c8\u5e0c\u8868+\u4e8c\u5206\u67e5\u627e\n        # 13. \u5faa\u73af+\u8bb0\u5fc6\u5316\u641c\u7d22+\u6ed1\u52a8\u7a97\u53e3+\u54c8\u5e0c\u8868+\u4e8c\u5206\u67e5\u627e+\u6ed1\u52a8\u7a97\u53e3+\u54c8\u5e0c\u8868+\u4e8c\u5206\u67e5\u627e+\u6ed1\u52a8\u7a97\u53e3+\u54c8\u5e0c\u8868+\u4e8c\u5206\u67e5\u627e+\u6ed1\u52a8\u7a97\u53e3\n        # 14. \u5faa\u73af+\u8bb0\u5fc6\u5316\u641c\u7d22+\u6ed1\u52a8\u7a97\u53e3+\u54c8\u5e0c\u8868+\u4e8c\u5206\u67e5\u627e+\u6ed1\u52a8\u7a97\u53e3+\u54c8\u5e0c\u8868+\u4e8c\u5206\u67e5\u627e+\u6ed1\u52a8\u7a97\u53e3+\u54c8\u5e0c\u8868+\u4e8c\u5206\u67e5\u627e+\u6ed1\u52a8\u7a97\u53e3+\u54c8\u5e0c\u8868\n        # 15. \u5faa\u73af+\u8bb0\u5fc6\u5316\u641c\u7d22+\u6ed1\u52a8\u7a97\u53e3+\u54c8\u5e0c\u8868+\u4e8c\u5206\u67e5\u627e+\u6ed1\u52a8\u7a97\u53e3+\u54c8\u5e0c\u8868+\u4e8c\u5206\u67e5\u627e+\u6ed1\u52a8\u7a97\u53e3+\u54c8\u5e0c\u8868+\u4e8c\u5206\u67e5\u627e+\u6ed1\u52a8\u7a97\u53e3+\u54c8\u5e0c\u8868+\u4e8c\u5206\u67e5\u627e\n        # 16. \u5faa\u73af+\u8bb0\u5fc6\u5316\u641c\u7d22+\u6ed1\u52a8\u7a97\u53e3+\u54c8\u5e0c\u8868+\u4e8c\u5206\u67e5\u627e+\u6ed1\u52a8\u7a97\u53e3+\u54c8\u5e0c\u8868+\u4e8c\u5206\u67e5\u627e+\u6ed1\u52a8\u7a97\u53e3+\u54c8\u5e0c\u8868+\u4e8c\u5206\u67e5\u627e+\u6ed1\u52a8\u7a97\u53e3+\u54c8\u5e0c\u8868+\u4e8c\u5206\u67e5\u627e+\ufffd"}, {"task_id": "self-crossing", "completion": "class Solution(object):\n    def isSelfCrossing(self, distance):\n        \"\"\"\n        :type distance: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # 2. \u5faa\u73af\n        # 3. \u5faa\u73af+\u8bb0\u5fc6\u5316\u641c\u7d22\n        # 4. \u5faa\u73af+\u8bb0\u5fc6\u5316\u641c\u7d22+\u6ed1\u52a8\u7a97\u53e3\n        # 5. \u5faa\u73af+\u8bb0\u5fc6\u5316\u641c\u7d22+\u6ed1\u52a8\u7a97\u53e3+\u54c8\u5e0c\u8868\n        # 6. \u5faa\u73af+\u8bb0\u5fc6\u5316\u641c\u7d22+\u6ed1\u52a8\u7a97\u53e3+\u54c8\u5e0c\u8868+\u4e8c\u5206\u67e5\u627e\n        # 7. \u5faa\u73af+\u8bb0\u5fc6\u5316\u641c\u7d22+\u6ed1\u52a8\u7a97\u53e3+\u54c8\u5e0c\u8868+\u4e8c\u5206\u67e5\u627e+\u6ed1\u52a8\u7a97\u53e3\n        # 8. \u5faa\u73af+\u8bb0\u5fc6\u5316\u641c\u7d22+\u6ed1\u52a8\u7a97\u53e3+\u54c8\u5e0c\u8868+\u4e8c\u5206\u67e5\u627e+\u6ed1\u52a8\u7a97\u53e3+\u54c8\u5e0c\u8868\n        # 9. \u5faa\u73af+\u8bb0\u5fc6\u5316\u641c\u7d22+\u6ed1\u52a8\u7a97\u53e3+\u54c8\u5e0c\u8868+\u4e8c\u5206\u67e5\u627e+\u6ed1\u52a8\u7a97\u53e3+\u54c8\u5e0c\u8868+\u4e8c\u5206\u67e5\u627e\n        # 10. \u5faa\u73af+\u8bb0\u5fc6\u5316\u641c\u7d22+\u6ed1\u52a8\u7a97\u53e3+\u54c8\u5e0c\u8868+\u4e8c\u5206\u67e5\u627e+\u6ed1\u52a8\u7a97\u53e3+\u54c8\u5e0c\u8868+\u4e8c\u5206\u67e5\u627e+\u6ed1\u52a8\u7a97\u53e3\n        # 11. \u5faa\u73af+\u8bb0\u5fc6\u5316\u641c\u7d22+\u6ed1\u52a8\u7a97\u53e3+\u54c8\u5e0c\u8868+\u4e8c\u5206\u67e5\u627e+\u6ed1\u52a8\u7a97\u53e3+\u54c8\u5e0c\u8868+\u4e8c\u5206\u67e5\u627e+\u6ed1\u52a8\u7a97\u53e3+\u54c8\u5e0c\u8868\n        # 12. \u5faa\u73af+\u8bb0\u5fc6\u5316\u641c\u7d22+\u6ed1\u52a8\u7a97\u53e3+\u54c8\u5e0c\u8868+\u4e8c\u5206\u67e5\u627e+\u6ed1\u52a8\u7a97\u53e3+\u54c8\u5e0c\u8868+\u4e8c\u5206\u67e5\u627e+\u6ed1\u52a8\u7a97\u53e3+\u54c8\u5e0c\u8868+\u4e8c\u5206\u67e5\u627e\n        # 13. \u5faa\u73af+\u8bb0\u5fc6\u5316\u641c\u7d22+\u6ed1\u52a8\u7a97\u53e3+\u54c8\u5e0c\u8868+\u4e8c\u5206\u67e5\u627e+\u6ed1\u52a8\u7a97\u53e3+\u54c8\u5e0c\u8868+\u4e8c\u5206\u67e5\u627e+\u6ed1\u52a8\u7a97\u53e3+\u54c8\u5e0c\u8868+\u4e8c\u5206\u67e5\u627e+\u6ed1\u52a8\u7a97\u53e3\n        # 14. \u5faa\u73af+\u8bb0\u5fc6\u5316\u641c\u7d22+\u6ed1\u52a8\u7a97\u53e3+\u54c8\u5e0c\u8868+\u4e8c\u5206\u67e5\u627e+\u6ed1\u52a8\u7a97\u53e3+\u54c8\u5e0c\u8868+\u4e8c\u5206\u67e5\u627e+\u6ed1\u52a8\u7a97\u53e3+\u54c8\u5e0c\u8868+\u4e8c\u5206\u67e5\u627e+\u6ed1\u52a8\u7a97\u53e3+\u54c8\u5e0c\u8868\n        # 15. \u5faa\u73af+\u8bb0\u5fc6\u5316\u641c\u7d22+\u6ed1\u52a8\u7a97\u53e3+\u54c8\u5e0c\u8868+\u4e8c\u5206\u67e5\u627e+\u6ed1\u52a8\u7a97\u53e3+\u54c8\u5e0c\u8868+\u4e8c\u5206\u67e5\u627e+\u6ed1\u52a8\u7a97\u53e3+\u54c8\u5e0c\u8868+\u4e8c\u5206\u67e5\u627e+\u6ed1\u52a8\u7a97\u53e3+\u54c8\u5e0c\u8868+\u4e8c\u5206\u67e5\u627e\n        # 16. \u5faa\u73af+\u8bb0\u5fc6\u5316\u641c\u7d22+\u6ed1\u52a8\u7a97\u53e3+\u54c8\u5e0c\u8868+\u4e8c\u5206\u67e5\u627e+\u6ed1\u52a8\u7a97\u53e3+\u54c8\u5e0c\u8868+\u4e8c\u5206\u67e5\u627e+\u6ed1\u52a8\u7a97\u53e3+\u54c8\u5e0c\u8868+\u4e8c\u5206\u67e5\u627e+\u6ed1\u52a8\u7a97\u53e3+\u54c8\u5e0c\u8868+\u4e8c\u5206\u67e5\u627e+\ufffd"}, {"task_id": "self-crossing", "completion": "class Solution(object):\n    def isSelfCrossing(self, distance):\n        \"\"\"\n        :type distance: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # 2. \u8d2a\u5fc3\u7b97\u6cd5\n        # 3. \u52a8\u6001\u89c4\u5212\n        # 4. \u6ed1\u52a8\u7a97\u53e3\n        # 5. \u6808\n        # 6. \u54c8\u5e0c\u8868\n        # 7. \u4e8c\u5206\u67e5\u627e\n        # 8. \u6811\u72b6\u6570\u7ec4\n        # 9. \u524d\u7f00\u548c\n        # 10. \u4e8c\u53c9\u641c\u7d22\u6811\n        # 11. \u7ebf\u6bb5\u6811\n        # 12. \u5806\n        # 13. \u5e76\u67e5\u96c6\n        # 14. \u62d3\u6251\u6392\u5e8f\n        # 15. \u8d2a\u5fc3\u7b97\u6cd5\n        # 16. \u5206\u6cbb\u7b97\u6cd5\n        # 17. \u56de\u6eaf\u7b97\u6cd5\n        # 18. \u9012\u5f52\n        # 19. \u9012\u63a8\n        # 20. \u8fed\u4ee3\n        # 21. \u4f4d\u8fd0\u7b97\n        # 22. \u6392\u5e8f\n        # 23. \u6570\u5b66\n        # 24. \u6811\n        # 25. \u8bbe\u8ba1\n        # 26. \u961f\u5217\n        # 27. \u5806\n        # 28. \u94fe\u8868\n        # 29. \u6570\u7ec4\n        # 30. \u9012\u5f52\n        # 31. \u961f\u5217\n        # 32. \u6808\n        # 33. \u54c8\u5e0c\u8868\n        # 34. \u94fe\u8868\n        # 35. \u6570\u7ec4\n        # 36. \u54c8\u5e0c\u8868\n        # 37. \u6808\n        # 38. \u961f\u5217\n        # 39. \u4e8c\u53c9\u6811\n        # 40. \u4e8c\u53c9\u6811\n        # 41. \u4e8c\u53c9\u6811\n        # 42. \u4e8c\u53c9\u6811\n        # 43. \u4e8c\u53c9\u6811\n        # 44. \u4e8c\u53c9\u6811\n        # 45. \u4e8c\u53c9\u6811\n        # 46. \u4e8c\u53c9\u6811\n        # 47. \u4e8c\u53c9\u6811\n        # 48. \u4e8c\u53c9\u6811\n        # 49. \u4e8c\u53c9\u6811\n        # 50. \u4e8c\u53c9\u6811\n        # 51. \u4e8c\u53c9\u6811\n        # 52. \u4e8c\u53c9\u6811\n        # 53. \u4e8c\u53c9\u6811\n        # 54. \u4e8c\u53c9\u6811\n        # 55. \u4e8c\u53c9\u6811\n        # 56. \u4e8c\u53c9\u6811\n        # 57. \u4e8c\u53c9\u6811\n        # 58. \u4e8c\u53c9\u6811\n        # 59. \u4e8c\u53c9\u6811\n        # 60. \u4e8c\u53c9\u6811\n        # 61. \u4e8c\u53c9\u6811\n        # 62. \u4e8c\u53c9\u6811\n        # 63. \u4e8c\u53c9\u6811\n        # 64. \u4e8c\u53c9\u6811\n        # 65. \u4e8c\u53c9\u6811\n        # 66. \u4e8c\u53c9\u6811\n        # 67. \u4e8c\u53c9\u6811\n        # 68. \u4e8c\u53c9\u6811\n        # 69. \u4e8c\u53c9\u6811\n        # 70. \u4e8c\u53c9\u6811\n        # 71. \u4e8c\u53c9\u6811\n        # 72. \u4e8c\u53c9\u6811\n        # 73. \u4e8c\u53c9\u6811\n        # 74. \u4e8c\u53c9\u6811\n        # 75. \u4e8c\ufffd"}, {"task_id": "self-crossing", "completion": "class Solution(object):\n    def isSelfCrossing(self, distance):\n        \"\"\"\n        :type distance: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # 2. \u8d2a\u5fc3\u7b97\u6cd5\n        # 3. \u52a8\u6001\u89c4\u5212\n        # 4. \u6ed1\u52a8\u7a97\u53e3\n        # 5. \u6808\n        # 6. \u54c8\u5e0c\u8868\n        # 7. \u4e8c\u5206\u67e5\u627e\n        # 8. \u6811\u72b6\u6570\u7ec4\n        # 9. \u524d\u7f00\u548c\n        # 10. \u4e8c\u53c9\u641c\u7d22\u6811\n        # 11. \u7ebf\u6bb5\u6811\n        # 12. \u5806\n        # 13. \u5e76\u67e5\u96c6\n        # 14. \u62d3\u6251\u6392\u5e8f\n        # 15. \u8d2a\u5fc3\u7b97\u6cd5\n        # 16. \u5206\u6cbb\u7b97\u6cd5\n        # 17. \u9012\u5f52\n        # 18. \u9012\u63a8\n        # 19. \u56de\u6eaf\n        # 20. \u5206\u652f\u754c\u9650\u6cd5\n        # 21. \u52a8\u6001\u89c4\u5212\n        # 22. \u641c\u7d22\n        # 23. \u4e8c\u5206\u67e5\u627e\n        # 24. \u5206\u6cbb\n        # 25. \u8d2a\u5fc3\n        # 26. \u56de\u6eaf\n        # 27. \u9012\u5f52\n        # 28. \u9012\u63a8\n        # 29. \u6392\u5e8f\n        # 30. \u6808\n        # 31. \u961f\u5217\n        # 32. \u5806\n        # 33. \u8d2a\u5fc3\n        # 34. \u56de\u6eaf\n        # 35. \u9012\u5f52\n        # 36. \u9012\u63a8\n        # 37. \u6392\u5e8f\n        # 38. \u6808\n        # 39. \u961f\u5217\n        # 40. \u5806\n        # 41. \u8d2a\u5fc3\n        # 42. \u56de\u6eaf\n        # 43. \u9012\u5f52\n        # 44. \u9012\u63a8\n        # 45. \u6392\u5e8f\n        # 46. \u6808\n        # 47. \u961f\u5217\n        # 48. \u5806\n        # 49. \u8d2a\u5fc3\n        # 50. \u56de\u6eaf\n        # 51. \u9012\u5f52\n        # 52. \u9012\u63a8\n        # 53. \u6392\u5e8f\n        # 54. \u6808\n        # 55. \u961f\u5217\n        # 56. \u5806\n        # 57. \u8d2a\u5fc3\n        # 58. \u56de\u6eaf\n        # 59. \u9012\u5f52\n        # 60. \u9012\u63a8\n        # 61. \u6392\u5e8f\n        # 62. \u6808\n        # 63. \u961f\u5217\n        # 64. \u5806\n        # 65. \u8d2a\u5fc3\n        # 66. \u56de\u6eaf\n        # 67. \u9012\u5f52\n        # 68. \u9012\u63a8\n        # 69. \u6392\u5e8f\n        # 70. \u6808\n        # 71. \u961f\u5217\n        # 72. \u5806\n        # 73. \u8d2a\u5fc3\n        # 74. \u56de\u6eaf\n        # 75. \u9012\u5f52\n        # 76. \u9012\u63a8\n        # 77. \u6392\u5e8f\n        # 78. \u6808\n        # 79. \u961f\u5217\n        # 80. \u5806\n        # 81. \u8d2a\u5fc3\n        # 82."}], "remove-duplicates-from-sorted-list": [{"task_id": "remove-duplicates-from-sorted-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        cur = head\n        \n        while cur is not None and cur.next is not None:\n            if cur.val == cur.next.val:\n                while cur.next is not None and cur.val == cur.next.val:\n                    cur = cur.next\n                prev.next = cur.next\n                cur = cur.next\n            else:\n                prev = cur\n                cur = cur.next\n        \n        return dummy.next"}, {"task_id": "remove-duplicates-from-sorted-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        cur = head\n        \n        while cur and cur.next:\n            if cur.val == cur.next.val:\n                while cur.next and cur.val == cur.next.val:\n                    cur = cur.next\n                prev.next = cur.next\n                cur = cur.next\n            else:\n                prev = cur\n                cur = cur.next\n        \n        return dummy.next"}, {"task_id": "remove-duplicates-from-sorted-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        cur = head\n        \n        while cur and cur.next:\n            if cur.val == cur.next.val:\n                while cur.next and cur.val == cur.next.val:\n                    cur = cur.next\n                prev.next = cur.next\n                cur = cur.next\n            else:\n                prev = cur\n                cur = cur.next\n        \n        return dummy.next"}, {"task_id": "remove-duplicates-from-sorted-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        cur = head\n        \n        while cur is not None and cur.next is not None:\n            if cur.val == cur.next.val:\n                while cur.next is not None and cur.val == cur.next.val:\n                    cur = cur.next\n                prev.next = cur.next\n                cur = cur.next\n            else:\n                prev = cur\n                cur = cur.next\n        \n        return dummy.next"}, {"task_id": "remove-duplicates-from-sorted-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        curr = head\n        \n        while curr is not None and curr.next is not None:\n            if curr.val == curr.next.val:\n                while curr.next is not None and curr.val == curr.next.val:\n                    curr = curr.next\n                prev.next = curr.next\n                curr = curr.next\n            else:\n                prev = curr\n                curr = curr.next\n        \n        return dummy.next"}], "longest-palindrome": [{"task_id": "longest-palindrome", "completion": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.93%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237\n\n        # res = 0\n        # for i in range(len(s)):\n        #     for j in range(i+1, len(s)+1):\n        #         if self.isPalindrome(s[i:j]):\n        #             res = max(res, j-i)\n        # return res\n\n        # 2. \u4e2d\u5fc3\u6269\u5c55\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.93%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237\n\n        # res = 0\n        # for i in range(len(s)):\n        #     for j in range(i+1, len(s)+1):\n        #         if self.isPalindrome(s[i:j]):\n        #             res = max(res, j-i)\n        # return res\n\n        # 3. \u4e2d\u5fc3\u6269\u5c55\u6cd5\u4f18\u5316\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.93%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237\n\n        # res = 0\n        # for i in range(len(s)):\n        #     for j in range(i+1, len(s)+1):\n        #         if self.isPalindrome(s[i:j]):\n        #             res = max(res, j-i)\n        # return res\n\n        # 4. \u4e2d\u5fc3\u6269\u5c55\u6cd5\u4f18\u5316\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.93%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237\n\n        # res = 0\n        # for i in range(len(s)):\n        #     for j in range(i+1, len(s)+1):\n        #         if self.isPalindrome(s[i:j]):\n        #             res = max(res, j-i)\n        # return res\n\n        # 5. \u4e2d\u5fc3\u6269\u5c55\u6cd5\u4f18\u5316\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.93%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237\n\n        # res = 0\n        # for i in range(len(s)):\n        #     for j in range(i+1, len(s)+1):\n        #         if self.isPalindrome(s[i:j]):\n        #             res = max(res, j-i)\n        # return res"}, {"task_id": "longest-palindrome", "completion": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u6240\u6709\u5b50\u4e32\uff0c\u5224\u65ad\u662f\u5426\u662f\u56de\u6587\u4e32\n        # \u5982\u679c\u662f\u56de\u6587\u4e32\uff0c\u5219\u66f4\u65b0\u6700\u957f\u56de\u6587\u4e32\u957f\u5ea6\n        # \u6700\u7ec8\u8fd4\u56de\u6700\u957f\u56de\u6587\u4e32\u957f\u5ea6\n        # \n        # 2. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u5b9a\u4e49 dp[i][j] \u8868\u793a s[i:j+1] \u662f\u5426\u662f\u56de\u6587\u4e32\n        # \u521d\u59cb\u5316 dp[i][i] = True\n        # \u5982\u679c s[i] == s[j] \u5219 dp[i][j] = dp[i+1][j-1]\n        # \u5982\u679c s[i] != s[j] \u5219 dp[i][j] = False\n        # \u6700\u7ec8\u8fd4\u56de dp[0][n-1]\n        # \n        # 3. \u4e2d\u5fc3\u6269\u5c55\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u5b9a\u4e49 max_len \u8868\u793a\u6700\u957f\u56de\u6587\u4e32\u957f\u5ea6\n        # \u5b9a\u4e49 start \u8868\u793a\u6700\u957f\u56de\u6587\u4e32\u8d77\u59cb\u4f4d\u7f6e\n        # \u5b9a\u4e49 end \u8868\u793a\u6700\u957f\u56de\u6587\u4e32\u7ed3\u675f\u4f4d\u7f6e\n        # \u904d\u5386\u5b57\u7b26\u4e32 s\n        # \u5982\u679c s[i] == s[i+1] \u5219 max_len = 2, start = i, end = i+1\n        # \u5982\u679c s[i] == s[i+1] \u4e14 s[i-1] == s[i+2] \u5219 max_len = 3, start = i-1, end = i+1\n        # \u5982\u679c s[i] == s[i+1] \u4e14 s[i-1] != s[i+2] \u5219 max_len = 3, start = i-1, end = i+1\n        # \u5982\u679c s[i] != s[i+1] \u5219 max_len = 1, start = i, end = i\n        # \u6700\u7ec8\u8fd4\u56de max_len\n        # \n        # 4. \u4e2d\u5fc3\u6269\u5c55\u6cd5\u4f18\u5316\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u5b9a\u4e49 max_len \u8868\u793a\u6700\u957f\u56de\u6587\u4e32\u957f\u5ea6\n        # \u5b9a\u4e49 start \u8868\u793a\u6700\u957f\u56de\u6587\u4e32\u8d77\u59cb\u4f4d\u7f6e\n        # \u5b9a\u4e49 end \u8868\u793a\u6700\u957f\u56de\u6587\u4e32\u7ed3\u675f\u4f4d\u7f6e\n        # \u904d\u5386\u5b57\u7b26\u4e32 s\n        # \u5982\u679c s[i] == s[i+1] \u5219 max_len = 2, start = i, end = i+1\n        # \u5982\u679c s[i] == s[i+1] \u4e14 s[i-1] == s[i+2] \u5219 max_len = 3, start = i-1, end = i+1\n        # \u5982\u679c s[i] == s[i+1] \u4e14 s[i-1] != s[i+2] \u5219 max_len = 3, start = i-1, end = i+1\n        # \u5982\u679c s[i] != s[i+1] \u5219 max_len = 1, start = i, end = i\n        # \u6700\u7ec8\u8fd4\u56de max_len\n        # \n        # 5. \u4e2d\u5fc3\u6269\u5c55\u6cd5\u4f18\u5316\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u5b9a\u4e49 max_len \u8868\u793a\u6700\u957f\u56de\u6587\u4e32\u957f\u5ea6\n        # \u5b9a\u4e49 start \u8868\u793a\u6700\u957f\u56de\u6587\u4e32\u8d77\u59cb\u4f4d\u7f6e\n        # \u5b9a\u4e49 end \u8868\u793a"}, {"task_id": "longest-palindrome", "completion": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u6240\u6709\u5b50\u4e32\uff0c\u5224\u65ad\u662f\u5426\u662f\u56de\u6587\u4e32\n        # \u5982\u679c\u662f\u56de\u6587\u4e32\uff0c\u5219\u66f4\u65b0\u6700\u957f\u56de\u6587\u4e32\u957f\u5ea6\n        # \u6700\u540e\u8fd4\u56de\u6700\u957f\u56de\u6587\u4e32\u957f\u5ea6\n        # \n        # 2. \u4e2d\u5fc3\u6269\u5c55\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u6240\u6709\u5b50\u4e32\uff0c\u5224\u65ad\u662f\u5426\u662f\u56de\u6587\u4e32\n        # \u5982\u679c\u662f\u56de\u6587\u4e32\uff0c\u5219\u66f4\u65b0\u6700\u957f\u56de\u6587\u4e32\u957f\u5ea6\n        # \u6700\u540e\u8fd4\u56de\u6700\u957f\u56de\u6587\u4e32\u957f\u5ea6\n        # \n        # 3. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u627e\u5230\u6240\u6709\u5b50\u4e32\uff0c\u5224\u65ad\u662f\u5426\u662f\u56de\u6587\u4e32\n        # \u5982\u679c\u662f\u56de\u6587\u4e32\uff0c\u5219\u66f4\u65b0\u6700\u957f\u56de\u6587\u4e32\u957f\u5ea6\n        # \u6700\u540e\u8fd4\u56de\u6700\u957f\u56de\u6587\u4e32\u957f\u5ea6\n        # \n        # 4. \u4e2d\u5fc3\u6269\u5c55\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u627e\u5230\u6240\u6709\u5b50\u4e32\uff0c\u5224\u65ad\u662f\u5426\u662f\u56de\u6587\u4e32\n        # \u5982\u679c\u662f\u56de\u6587\u4e32\uff0c\u5219\u66f4\u65b0\u6700\u957f\u56de\u6587\u4e32\u957f\u5ea6\n        # \u6700\u540e\u8fd4\u56de\u6700\u957f\u56de\u6587\u4e32\u957f\u5ea6\n        # \n        # 5. \u4e2d\u5fc3\u6269\u5c55\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u627e\u5230\u6240\u6709\u5b50\u4e32\uff0c\u5224\u65ad\u662f\u5426\u662f\u56de\u6587\u4e32\n        # \u5982\u679c\u662f\u56de\u6587\u4e32\uff0c\u5219\u66f4\u65b0\u6700\u957f\u56de\u6587\u4e32\u957f\u5ea6\n        # \u6700\u540e\u8fd4\u56de\u6700\u957f\u56de\u6587\u4e32\u957f\u5ea6\n        # \n        # 6. \u4e2d\u5fc3\u6269\u5c55\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u627e\u5230\u6240\u6709\u5b50\u4e32\uff0c\u5224\u65ad\u662f\u5426\u662f\u56de\u6587\u4e32\n        # \u5982\u679c\u662f\u56de\u6587\u4e32\uff0c\u5219\u66f4\u65b0\u6700\u957f\u56de\u6587\u4e32\u957f\u5ea6\n        # \u6700\u540e\u8fd4\u56de\u6700\u957f\u56de\u6587\u4e32\u957f\u5ea6\n        # \n        # 7. \u4e2d\u5fc3\u6269\u5c55\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u627e\u5230\u6240\u6709\u5b50\u4e32\uff0c\u5224\u65ad\u662f\u5426\u662f\u56de\u6587\u4e32\n        # \u5982\u679c\u662f\u56de\u6587\u4e32\uff0c\u5219\u66f4\u65b0\u6700\u957f\u56de\u6587\u4e32\u957f\u5ea6\n        # \u6700\u540e\u8fd4\u56de\u6700\u957f\u56de\u6587\u4e32\u957f\u5ea6\n        # \n        # 8. \u4e2d\u5fc3\u6269\u5c55\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u627e\u5230\u6240\u6709\u5b50\u4e32\uff0c\u5224\u65ad\u662f\u5426\u662f\u56de\u6587\u4e32\n        # \u5982\u679c\u662f\u56de\u6587\u4e32\uff0c\u5219\u66f4\u65b0\u6700\u957f\u56de\u6587\u4e32\u957f\u5ea6\n        # \u6700\u540e\u8fd4\u56de\u6700\u957f\u56de\u6587\u4e32\u957f\u5ea6\n        # \n        # 9. \u4e2d\u5fc3\u6269\u5c55\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u627e\u5230\u6240\u6709\u5b50\u4e32\uff0c\u5224\u65ad\u662f\u5426\u662f\u56de\u6587\u4e32\n        # \u5982\u679c\u662f\u56de\u6587\u4e32\uff0c\u5219\u66f4\u65b0\u6700\u957f\u56de\u6587\u4e32\u957f\u5ea6\n        # \u6700\u540e\u8fd4\u56de\u6700\u957f\u56de\u6587\u4e32\u957f\u5ea6\n        # \n        # 10. \u4e2d\u5fc3\u6269\u5c55\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n"}, {"task_id": "longest-palindrome", "completion": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.89%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.06%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.89%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.06%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.89%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.06%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.89%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.06%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.89%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.06%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.89%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.06%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.89%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.06%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.89%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.06%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)"}, {"task_id": "longest-palindrome", "completion": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u6240\u6709\u5b50\u4e32\uff0c\u5224\u65ad\u662f\u5426\u662f\u56de\u6587\u4e32\n        # \u5982\u679c\u662f\u56de\u6587\u4e32\uff0c\u5219\u66f4\u65b0\u6700\u5927\u957f\u5ea6\n        # \u5982\u679c\u4e0d\u662f\u56de\u6587\u4e32\uff0c\u5219\u8df3\u8fc7\n        # \u6700\u540e\u8fd4\u56de\u6700\u5927\u957f\u5ea6\n        # \n        # 2. \u4e2d\u5fc3\u6269\u5c55\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u6240\u6709\u5b50\u4e32\uff0c\u5224\u65ad\u662f\u5426\u662f\u56de\u6587\u4e32\n        # \u5982\u679c\u662f\u56de\u6587\u4e32\uff0c\u5219\u66f4\u65b0\u6700\u5927\u957f\u5ea6\n        # \u5982\u679c\u4e0d\u662f\u56de\u6587\u4e32\uff0c\u5219\u8df3\u8fc7\n        # \u6700\u540e\u8fd4\u56de\u6700\u5927\u957f\u5ea6\n        # \n        # 3. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u627e\u5230\u6240\u6709\u5b50\u4e32\uff0c\u5224\u65ad\u662f\u5426\u662f\u56de\u6587\u4e32\n        # \u5982\u679c\u662f\u56de\u6587\u4e32\uff0c\u5219\u66f4\u65b0\u6700\u5927\u957f\u5ea6\n        # \u5982\u679c\u4e0d\u662f\u56de\u6587\u4e32\uff0c\u5219\u8df3\u8fc7\n        # \u6700\u540e\u8fd4\u56de\u6700\u5927\u957f\u5ea6\n        # \n        # 4. \u4e2d\u5fc3\u6269\u5c55\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u6240\u6709\u5b50\u4e32\uff0c\u5224\u65ad\u662f\u5426\u662f\u56de\u6587\u4e32\n        # \u5982\u679c\u662f\u56de\u6587\u4e32\uff0c\u5219\u66f4\u65b0\u6700\u5927\u957f\u5ea6\n        # \u5982\u679c\u4e0d\u662f\u56de\u6587\u4e32\uff0c\u5219\u8df3\u8fc7\n        # \u6700\u540e\u8fd4\u56de\u6700\u5927\u957f\u5ea6\n        # \n        # 5. \u4e2d\u5fc3\u6269\u5c55\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u6240\u6709\u5b50\u4e32\uff0c\u5224\u65ad\u662f\u5426\u662f\u56de\u6587\u4e32\n        # \u5982\u679c\u662f\u56de\u6587\u4e32\uff0c\u5219\u66f4\u65b0\u6700\u5927\u957f\u5ea6\n        # \u5982\u679c\u4e0d\u662f\u56de\u6587\u4e32\uff0c\u5219\u8df3\u8fc7\n        # \u6700\u540e\u8fd4\u56de\u6700\u5927\u957f\u5ea6\n        # \n        # 6. \u4e2d\u5fc3\u6269\u5c55\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u6240\u6709\u5b50\u4e32\uff0c\u5224\u65ad\u662f\u5426\u662f\u56de\u6587\u4e32\n        # \u5982\u679c\u662f\u56de\u6587\u4e32\uff0c\u5219\u66f4\u65b0\u6700\u5927\u957f\u5ea6\n        # \u5982\u679c\u4e0d\u662f\u56de\u6587\u4e32\uff0c\u5219\u8df3\u8fc7\n        # \u6700\u540e\u8fd4\u56de\u6700\u5927\u957f\u5ea6\n        # \n        # 7. \u4e2d\u5fc3\u6269\u5c55\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u6240\u6709\u5b50\u4e32\uff0c\u5224\u65ad\u662f\u5426\u662f\u56de\u6587\u4e32\n        # \u5982\u679c\u662f\u56de\u6587\u4e32\uff0c\u5219\u66f4\u65b0\u6700\u5927\u957f\u5ea6\n        # \u5982\u679c\u4e0d\u662f\u56de\u6587\u4e32\uff0c\u5219\u8df3\u8fc7\n        # \u6700\u540e\u8fd4\u56de\u6700\u5927\u957f\u5ea6\n        # \n        # 8. \u4e2d\u5fc3\u6269\u5c55\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u6240\u6709\u5b50\u4e32\uff0c\u5224\u65ad\u662f\u5426\u662f\u56de\u6587\u4e32\n        # \u5982\u679c\u662f\u56de\u6587\u4e32\uff0c\u5219\u66f4\u65b0\u6700\u5927\u957f\u5ea6\n        # \u5982\u679c\u4e0d\u662f\u56de\u6587\u4e32\uff0c\u5219\u8df3\u8fc7\n        # \u6700\u540e\u8fd4\u56de\u6700\u5927\u957f\u5ea6\n        # \n        # 9. \u4e2d\u5fc3\u6269\u5c55\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u6240\u6709\u5b50\u4e32\uff0c\u5224\u65ad"}], "construct-binary-tree-from-inorder-and-postorder-traversal": [{"task_id": "construct-binary-tree-from-inorder-and-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        def build(in_start, in_end, post_start, post_end):\n            if in_start > in_end or post_start > post_end:\n                return None\n            \n            root_val = postorder[post_end]\n            root = TreeNode(root_val)\n            \n            in_root_idx = inorder.index(root_val)\n            root.right = build(in_start, in_root_idx - 1, post_start, post_start + in_root_idx - in_start - 1)\n            root.left = build(in_root_idx + 1, in_end, post_start + in_root_idx - in_start, post_end - 1)\n            \n            return root\n        \n        return build(0, len(inorder) - 1, 0, len(postorder) - 1)"}, {"task_id": "construct-binary-tree-from-inorder-and-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not inorder:\n            return None\n        \n        root = TreeNode(postorder[-1])\n        root_index = inorder.index(postorder[-1])\n        \n        root.left = self.buildTree(inorder[:root_index], postorder[:root_index])\n        root.right = self.buildTree(inorder[root_index+1:], postorder[root_index:-1])\n        \n        return root"}, {"task_id": "construct-binary-tree-from-inorder-and-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        def build(in_start, in_end, post_start, post_end):\n            if in_start > in_end or post_start > post_end:\n                return None\n            \n            root_val = postorder[post_end]\n            root = TreeNode(root_val)\n            \n            in_root_idx = inorder.index(root_val)\n            root.right = build(in_start, in_root_idx - 1, post_start, post_start + in_root_idx - in_start - 1)\n            root.left = build(in_root_idx + 1, in_end, post_start + in_root_idx - in_start, post_end - 1)\n            \n            return root\n        \n        return build(0, len(inorder) - 1, 0, len(postorder) - 1)"}, {"task_id": "construct-binary-tree-from-inorder-and-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        def buildTreeHelper(inorder, postorder, inorder_start, inorder_end, postorder_start, postorder_end):\n            if inorder_start > inorder_end or postorder_start > postorder_end:\n                return None\n            \n            root_val = postorder[postorder_end]\n            root = TreeNode(root_val)\n            \n            root_index = inorder.index(root_val)\n            left_size = root_index - inorder_start\n            right_size = inorder_end - root_index\n            \n            root.left = buildTreeHelper(inorder, postorder, inorder_start, root_index - 1, postorder_start, postorder_start + left_size - 1)\n            root.right = buildTreeHelper(inorder, postorder, root_index + 1, inorder_end, postorder_start + left_size, postorder_end - 1)\n            \n            return root\n        \n        return buildTreeHelper(inorder, postorder, 0, len(inorder) - 1, 0, len(postorder) - 1)"}, {"task_id": "construct-binary-tree-from-inorder-and-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        def build(in_start, in_end, post_start, post_end):\n            if in_start > in_end or post_start > post_end:\n                return None\n            \n            root_val = postorder[post_end]\n            root = TreeNode(root_val)\n            \n            in_root_idx = inorder.index(root_val)\n            root.right = build(in_start, in_root_idx - 1, post_start, post_start + in_root_idx - in_start - 1)\n            root.left = build(in_root_idx + 1, in_end, post_start + in_root_idx - in_start, post_end - 1)\n            \n            return root\n        \n        return build(0, len(inorder) - 1, 0, len(postorder) - 1)"}], "cut-off-trees-for-golf-event": [{"task_id": "cut-off-trees-for-golf-event", "completion": "class Solution(object):\n    def cutOffTree(self, forest):\n        \"\"\"\n        :type forest: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u904d\u5386\u6bcf\u4e2a\u70b9\uff0c\u627e\u5230\u6700\u77ee\u7684\u6811\uff0c\u7136\u540e\u628a\u5b83\u5207\u6389\n        # 2. \u628a\u5b83\u5207\u6389\u540e\uff0c\u628a\u5b83\u5468\u56f4\u7684\u70b9\u90fd\u53d8\u62101\n        # 3. \u5982\u679c\u627e\u5230\u4e86\u6700\u77ee\u7684\u6811\uff0c\u5c31\u8fd4\u56de\u6b65\u6570\n        # 4. \u5982\u679c\u6ca1\u6709\u627e\u5230\u6700\u77ee\u7684\u6811\uff0c\u5c31\u8fd4\u56de-1\n        # 5. \u5982\u679c\u627e\u5230\u4e86\u6700\u77ee\u7684\u6811\uff0c\u5c31\u628a\u5b83\u5468\u56f4\u7684\u70b9\u90fd\u53d8\u62101\n        # 6. \u628a\u5b83\u5468\u56f4\u7684\u70b9\u90fd\u53d8\u62101\u540e\uff0c\u628a\u5b83\u5468\u56f4\u7684\u70b9\u90fd\u53d8\u62101\n        # 7. \u628a\u5b83\u5468\u56f4\u7684\u70b9\u90fd\u53d8\u62101\u540e\uff0c\u628a\u5b83\u5468\u56f4\u7684\u70b9\u90fd\u53d8\u62101\n        # 8. \u628a\u5b83\u5468\u56f4\u7684\u70b9\u90fd\u53d8\u62101\u540e\uff0c\u628a\u5b83\u5468\u56f4\u7684\u70b9\u90fd\u53d8\u62101\n        # 9. \u628a\u5b83\u5468\u56f4\u7684\u70b9\u90fd\u53d8\u62101\u540e\uff0c\u628a\u5b83\u5468\u56f4\u7684\u70b9\u90fd\u53d8\u62101\n        # 10. \u628a\u5b83\u5468\u56f4\u7684\u70b9\u90fd\u53d8\u62101\u540e\uff0c\u628a\u5b83\u5468\u56f4\u7684\u70b9\u90fd\u53d8\u62101\n        # 11. \u628a\u5b83\u5468\u56f4\u7684\u70b9\u90fd\u53d8\u62101\u540e\uff0c\u628a\u5b83\u5468\u56f4\u7684\u70b9\u90fd\u53d8\u62101\n        # 12. \u628a\u5b83\u5468\u56f4\u7684\u70b9\u90fd\u53d8\u62101\u540e\uff0c\u628a\u5b83\u5468\u56f4\u7684\u70b9\u90fd\u53d8\u62101\n        # 13. \u628a\u5b83\u5468\u56f4\u7684\u70b9\u90fd\u53d8\u62101\u540e\uff0c\u628a\u5b83\u5468\u56f4\u7684\u70b9\u90fd\u53d8\u62101\n        # 14. \u628a\u5b83\u5468\u56f4\u7684\u70b9\u90fd\u53d8\u62101\u540e\uff0c\u628a\u5b83\u5468\u56f4\u7684\u70b9\u90fd\u53d8\u62101\n        # 15. \u628a\u5b83\u5468\u56f4\u7684\u70b9\u90fd\u53d8\u62101\u540e\uff0c\u628a\u5b83\u5468\u56f4\u7684\u70b9\u90fd\u53d8\u62101\n        # 16. \u628a\u5b83\u5468\u56f4\u7684\u70b9\u90fd\u53d8\u62101\u540e\uff0c\u628a\u5b83\u5468\u56f4\u7684\u70b9\u90fd\u53d8\u62101\n        # 17. \u628a\u5b83\u5468\u56f4\u7684\u70b9\u90fd\u53d8\u62101\u540e\uff0c\u628a\u5b83\u5468\u56f4\u7684\u70b9\u90fd\u53d8\u62101\n        # 18. \u628a\u5b83\u5468\u56f4\u7684\u70b9\u90fd\u53d8\u62101\u540e\uff0c\u628a\u5b83\u5468\u56f4\u7684\u70b9\u90fd\u53d8\u62101\n        # 19. \u628a\u5b83\u5468\u56f4\u7684\u70b9\u90fd\u53d8\u62101\u540e\uff0c\u628a\u5b83\u5468\u56f4\u7684\u70b9\u90fd\u53d8\u62101\n        # 20. \u628a\u5b83\u5468\u56f4\u7684\u70b9\u90fd\u53d8\u62101\u540e\uff0c\u628a\u5b83\u5468\u56f4\u7684\u70b9\u90fd\u53d8\u62101\n        # 21. \u628a\u5b83\u5468\u56f4\u7684\u70b9\u90fd\u53d8\u62101\u540e\uff0c\u628a\u5b83\u5468\u56f4\u7684\u70b9\u90fd\u53d8\u62101\n        # 22. \u628a\u5b83\u5468\u56f4\u7684\u70b9\u90fd\u53d8\u62101\u540e\uff0c\u628a\u5b83\u5468\u56f4\u7684\u70b9\u90fd\u53d8\u62101\n        # 23. \u628a\u5b83\u5468\u56f4\u7684\u70b9\u90fd\u53d8\u62101\u540e\uff0c\u628a\u5b83\u5468\u56f4\u7684\u70b9\u90fd\u53d8\u62101\n        # 24. \u628a\u5b83\u5468\u56f4\u7684\u70b9\u90fd\u53d8\u62101\u540e\uff0c\u628a\u5b83\u5468\u56f4\u7684\u70b9\u90fd\u53d8\u62101\n        # 25. \u628a\u5b83\u5468\u56f4\u7684\u70b9\u90fd\u53d8\u62101\u540e\uff0c\u628a\u5b83\u5468\u56f4\u7684\u70b9\u90fd\u53d8\u62101\n        # 26. \ufffd\ufffd\ufffd\ufffd\ufffd"}, {"task_id": "cut-off-trees-for-golf-event", "completion": "class Solution(object):\n    def cutOffTree(self, forest):\n        \"\"\"\n        :type forest: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u904d\u5386\u6574\u4e2a\u4e8c\u7ef4\u6570\u7ec4\uff0c\u627e\u5230\u6240\u6709\u76841\uff0c\u5e76\u8bb0\u5f55\u4e0b\u6765\n        # 2. \u627e\u5230\u6700\u77ee\u7684\u6811\uff0c\u7136\u540e\u628a\u5b83\u7684\u9ad8\u5ea6\u51cf\u53bb1\uff0c\u7136\u540e\u628a\u5b83\u7684\u9ad8\u5ea6\u8bbe\u7f6e\u4e3a1\n        # 3. \u91cd\u590d\u6b65\u9aa42\uff0c\u76f4\u5230\u6240\u6709\u7684\u6811\u90fd\u88ab\u526a\u6389\n        # 4. \u8fd4\u56de\u6b65\u9aa41\u4e2d\u627e\u5230\u7684\u6240\u67091\u7684\u4e2a\u6570\n        \n        # 1. \u904d\u5386\u6574\u4e2a\u4e8c\u7ef4\u6570\u7ec4\uff0c\u627e\u5230\u6240\u6709\u76841\uff0c\u5e76\u8bb0\u5f55\u4e0b\u6765\n        # 2. \u627e\u5230\u6700\u77ee\u7684\u6811\uff0c\u7136\u540e\u628a\u5b83\u7684\u9ad8\u5ea6\u51cf\u53bb1\uff0c\u7136\u540e\u628a\u5b83\u7684\u9ad8\u5ea6\u8bbe\u7f6e\u4e3a1\n        # 3. \u91cd\u590d\u6b65\u9aa42\uff0c\u76f4\u5230\u6240\u6709\u7684\u6811\u90fd\u88ab\u526a\u6389\n        # 4. \u8fd4\u56de\u6b65\u9aa41\u4e2d\u627e\u5230\u7684\u6240\u67091\u7684\u4e2a\u6570\n        \n        # 1. \u904d\u5386\u6574\u4e2a\u4e8c\u7ef4\u6570\u7ec4\uff0c\u627e\u5230\u6240\u6709\u76841\uff0c\u5e76\u8bb0\u5f55\u4e0b\u6765\n        # 2. \u627e\u5230\u6700\u77ee\u7684\u6811\uff0c\u7136\u540e\u628a\u5b83\u7684\u9ad8\u5ea6\u51cf\u53bb1\uff0c\u7136\u540e\u628a\u5b83\u7684\u9ad8\u5ea6\u8bbe\u7f6e\u4e3a1\n        # 3. \u91cd\u590d\u6b65\u9aa42\uff0c\u76f4\u5230\u6240\u6709\u7684\u6811\u90fd\u88ab\u526a\u6389\n        # 4. \u8fd4\u56de\u6b65\u9aa41\u4e2d\u627e\u5230\u7684\u6240\u67091\u7684\u4e2a\u6570\n        \n        # 1. \u904d\u5386\u6574\u4e2a\u4e8c\u7ef4\u6570\u7ec4\uff0c\u627e\u5230\u6240\u6709\u76841\uff0c\u5e76\u8bb0\u5f55\u4e0b\u6765\n        # 2. \u627e\u5230\u6700\u77ee\u7684\u6811\uff0c\u7136\u540e\u628a\u5b83\u7684\u9ad8\u5ea6\u51cf\u53bb1\uff0c\u7136\u540e\u628a\u5b83\u7684\u9ad8\u5ea6\u8bbe\u7f6e\u4e3a1\n        # 3. \u91cd\u590d\u6b65\u9aa42\uff0c\u76f4\u5230\u6240\u6709\u7684\u6811\u90fd\u88ab\u526a\u6389\n        # 4. \u8fd4\u56de\u6b65\u9aa41\u4e2d\u627e\u5230\u7684\u6240\u67091\u7684\u4e2a\u6570\n        \n        # 1. \u904d\u5386\u6574\u4e2a\u4e8c\u7ef4\u6570\u7ec4\uff0c\u627e\u5230\u6240\u6709\u76841\uff0c\u5e76\u8bb0\u5f55\u4e0b\u6765\n        # 2. \u627e\u5230\u6700\u77ee\u7684\u6811\uff0c\u7136\u540e\u628a\u5b83\u7684\u9ad8\u5ea6\u51cf\u53bb1\uff0c\u7136\u540e\u628a\u5b83\u7684\u9ad8\u5ea6\u8bbe\u7f6e\u4e3a1\n        # 3. \u91cd\u590d\u6b65\u9aa42\uff0c\u76f4\u5230\u6240\u6709\u7684\u6811\u90fd\u88ab\u526a\u6389\n        # 4. \u8fd4\u56de\u6b65\u9aa41\u4e2d\u627e\u5230\u7684\u6240\u67091\u7684\u4e2a\u6570\n        \n        # 1. \u904d\u5386\u6574\u4e2a\u4e8c\u7ef4\u6570\u7ec4\uff0c\u627e\u5230\u6240\u6709\u76841\uff0c\u5e76\u8bb0\u5f55\u4e0b\u6765\n        # 2. \u627e\u5230\u6700\u77ee\u7684\u6811\uff0c\u7136\u540e\u628a\u5b83\u7684\u9ad8\u5ea6\u51cf\u53bb1\uff0c\u7136\u540e\u628a\u5b83\u7684\u9ad8\u5ea6\u8bbe\u7f6e\u4e3a1\n        # 3. \u91cd\u590d\u6b65\u9aa42\uff0c\u76f4\u5230\u6240\u6709\u7684\u6811\u90fd\u88ab\u526a\u6389\n        # 4. \u8fd4\u56de\u6b65\u9aa41\u4e2d\u627e\u5230\u7684\u6240\u67091\u7684\u4e2a\u6570\n        \n        # 1. \u904d\u5386\u6574\u4e2a\u4e8c\u7ef4\u6570\u7ec4\uff0c\u627e\u5230\u6240\u6709\u76841\uff0c\u5e76\u8bb0\u5f55\u4e0b\u6765\n        # 2. \u627e\u5230\u6700\u77ee\u7684\u6811\uff0c\u7136\u540e\u628a\u5b83\u7684\u9ad8\u5ea6\u51cf\u53bb1\uff0c\u7136\u540e\u628a\u5b83\u7684\u9ad8\u5ea6\u8bbe\u7f6e\u4e3a1\n        # 3. \u91cd\u590d\u6b65\u9aa42\uff0c"}, {"task_id": "cut-off-trees-for-golf-event", "completion": "class Solution(object):\n    def cutOffTree(self, forest):\n        \"\"\"\n        :type forest: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u904d\u5386\u6bcf\u4e2a\u70b9\uff0c\u627e\u5230\u6700\u77ee\u7684\u6811\uff0c\u7136\u540e\u628a\u5b83\u4eec\u90fd\u62a0\u6389\n        # 2. \u5982\u679c\u62a0\u5b8c\u4e86\uff0c\u5c31\u8fd4\u56de\n        # 3. \u5982\u679c\u6ca1\u6709\u62a0\u5b8c\uff0c\u5c31\u7ee7\u7eed\u62a0\n        # 4. \u5982\u679c\u62a0\u5b8c\u4e86\uff0c\u5c31\u8fd4\u56de\n        # 5. \u5982\u679c\u6ca1\u6709\u62a0\u5b8c\uff0c\u5c31\u7ee7\u7eed\u62a0\n        # 6. \u5982\u679c\u62a0\u5b8c\u4e86\uff0c\u5c31\u8fd4\u56de\n        # 7. \u5982\u679c\u6ca1\u6709\u62a0\u5b8c\uff0c\u5c31\u7ee7\u7eed\u62a0\n        # 8. \u5982\u679c\u62a0\u5b8c\u4e86\uff0c\u5c31\u8fd4\u56de\n        # 9. \u5982\u679c\u6ca1\u6709\u62a0\u5b8c\uff0c\u5c31\u7ee7\u7eed\u62a0\n        # 10. \u5982\u679c\u62a0\u5b8c\u4e86\uff0c\u5c31\u8fd4\u56de\n        # 11. \u5982\u679c\u6ca1\u6709\u62a0\u5b8c\uff0c\u5c31\u7ee7\u7eed\u62a0\n        # 12. \u5982\u679c\u62a0\u5b8c\u4e86\uff0c\u5c31\u8fd4\u56de\n        # 13. \u5982\u679c\u6ca1\u6709\u62a0\u5b8c\uff0c\u5c31\u7ee7\u7eed\u62a0\n        # 14. \u5982\u679c\u62a0\u5b8c\u4e86\uff0c\u5c31\u8fd4\u56de\n        # 15. \u5982\u679c\u6ca1\u6709\u62a0\u5b8c\uff0c\u5c31\u7ee7\u7eed\u62a0\n        # 16. \u5982\u679c\u62a0\u5b8c\u4e86\uff0c\u5c31\u8fd4\u56de\n        # 17. \u5982\u679c\u6ca1\u6709\u62a0\u5b8c\uff0c\u5c31\u7ee7\u7eed\u62a0\n        # 18. \u5982\u679c\u62a0\u5b8c\u4e86\uff0c\u5c31\u8fd4\u56de\n        # 19. \u5982\u679c\u6ca1\u6709\u62a0\u5b8c\uff0c\u5c31\u7ee7\u7eed\u62a0\n        # 20. \u5982\u679c\u62a0\u5b8c\u4e86\uff0c\u5c31\u8fd4\u56de\n        # 21. \u5982\u679c\u6ca1\u6709\u62a0\u5b8c\uff0c\u5c31\u7ee7\u7eed\u62a0\n        # 22. \u5982\u679c\u62a0\u5b8c\u4e86\uff0c\u5c31\u8fd4\u56de\n        # 23. \u5982\u679c\u6ca1\u6709\u62a0\u5b8c\uff0c\u5c31\u7ee7\u7eed\u62a0\n        # 24. \u5982\u679c\u62a0\u5b8c\u4e86\uff0c\u5c31\u8fd4\u56de\n        # 25. \u5982\u679c\u6ca1\u6709\u62a0\u5b8c\uff0c\u5c31\u7ee7\u7eed\u62a0\n        # 26. \u5982\u679c\u62a0\u5b8c\u4e86\uff0c\u5c31\u8fd4\u56de\n        # 27. \u5982\u679c\u6ca1\u6709\u62a0\u5b8c\uff0c\u5c31\u7ee7\u7eed\u62a0\n        # 28. \u5982\u679c\u62a0\u5b8c\u4e86\uff0c\u5c31\u8fd4\u56de\n        # 29. \u5982\u679c\u6ca1\u6709\u62a0\u5b8c\uff0c\u5c31\u7ee7\u7eed\u62a0\n        # 30. \u5982\u679c\u62a0\u5b8c\u4e86\uff0c\u5c31\u8fd4\u56de\n        # 31. \u5982\u679c\u6ca1\u6709\u62a0\u5b8c\uff0c\u5c31\u7ee7\u7eed\u62a0\n        # 32. \u5982\u679c\u62a0\u5b8c\u4e86\uff0c\u5c31\u8fd4\u56de\n        # 33. \u5982\u679c\u6ca1\u6709\u62a0\u5b8c\uff0c\u5c31\u7ee7\u7eed\u62a0\n        # 34. \u5982\u679c\u62a0\u5b8c\u4e86\uff0c\u5c31\u8fd4\u56de\n        # 35. \u5982\u679c\u6ca1\u6709\u62a0\u5b8c\uff0c\u5c31\u7ee7\u7eed\u62a0\n        # 36. \u5982\u679c\u62a0\u5b8c\u4e86\uff0c\u5c31\u8fd4\u56de\n        # 37. \u5982\u679c\u6ca1\u6709\u62a0\u5b8c\uff0c\u5c31\u7ee7\u7eed\u62a0\n        # 38. \u5982\u679c\u62a0\u5b8c\u4e86\uff0c\u5c31\u8fd4\u56de\n        # 39. \u5982\u679c\u6ca1\u6709\u62a0\u5b8c\uff0c\u5c31\u7ee7\u7eed\u62a0\n        # 40. \u5982\u679c\u62a0\u5b8c\u4e86\uff0c\u5c31\u8fd4\u56de\n        # 41. \u5982\u679c\u6ca1\u6709\u62a0\u5b8c\uff0c\u5c31\u7ee7\u7eed\u62a0\n        # 42. \u5982\u679c\u62a0\u5b8c\u4e86\uff0c\u5c31\u8fd4\u56de\n        # 43. \u5982\u679c\u6ca1\u6709\u62a0\u5b8c\uff0c\u5c31\u7ee7\u7eed\u62a0\n        # 44. \u5982\u679c\u62a0\u5b8c\u4e86\uff0c\u5c31\u8fd4\u56de"}, {"task_id": "cut-off-trees-for-golf-event", "completion": "class Solution(object):\n    def cutOffTree(self, forest):\n        \"\"\"\n        :type forest: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u904d\u5386\u6574\u4e2a\u4e8c\u7ef4\u6570\u7ec4\uff0c\u627e\u5230\u6240\u6709\u76841\uff0c\u5e76\u8bb0\u5f55\u5176\u5750\u6807\n        # 2. \u4ece(0, 0)\u5f00\u59cb\uff0c\u904d\u5386\u6240\u6709\u76841\uff0c\u627e\u5230\u6700\u77ed\u7684\u8def\u5f84\n        # 3. \u5982\u679c\u6700\u77ed\u8def\u5f84\u7684\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e\u4e8c\u7ef4\u6570\u7ec4\u7684\u957f\u5ea6\uff0c\u5219\u8fd4\u56de-1\n        # 4. \u5982\u679c\u6700\u77ed\u8def\u5f84\u7684\u957f\u5ea6\u5c0f\u4e8e\u4e8c\u7ef4\u6570\u7ec4\u7684\u957f\u5ea6\uff0c\u5219\u8fd4\u56de\u6700\u77ed\u8def\u5f84\u7684\u957f\u5ea6\n        # 5. \u5982\u679c\u6700\u77ed\u8def\u5f84\u7684\u957f\u5ea6\u7b49\u4e8e\u4e8c\u7ef4\u6570\u7ec4\u7684\u957f\u5ea6\uff0c\u5219\u8fd4\u56de\u6700\u77ed\u8def\u5f84\u7684\u957f\u5ea6\n        # 6. \u5982\u679c\u6700\u77ed\u8def\u5f84\u7684\u957f\u5ea6\u5927\u4e8e\u4e8c\u7ef4\u6570\u7ec4\u7684\u957f\u5ea6\uff0c\u5219\u8fd4\u56de-1\n        # 7. \u5982\u679c\u6700\u77ed\u8def\u5f84\u7684\u957f\u5ea6\u5c0f\u4e8e\u4e8c\u7ef4\u6570\u7ec4\u7684\u957f\u5ea6\uff0c\u5219\u8fd4\u56de\u6700\u77ed\u8def\u5f84\u7684\u957f\u5ea6\n        # 8. \u5982\u679c\u6700\u77ed\u8def\u5f84\u7684\u957f\u5ea6\u7b49\u4e8e\u4e8c\u7ef4\u6570\u7ec4\u7684\u957f\u5ea6\uff0c\u5219\u8fd4\u56de\u6700\u77ed\u8def\u5f84\u7684\u957f\u5ea6\n        # 9. \u5982\u679c\u6700\u77ed\u8def\u5f84\u7684\u957f\u5ea6\u5927\u4e8e\u4e8c\u7ef4\u6570\u7ec4\u7684\u957f\u5ea6\uff0c\u5219\u8fd4\u56de-1\n        # 10. \u5982\u679c\u6700\u77ed\u8def\u5f84\u7684\u957f\u5ea6\u5c0f\u4e8e\u4e8c\u7ef4\u6570\u7ec4\u7684\u957f\u5ea6\uff0c\u5219\u8fd4\u56de\u6700\u77ed\u8def\u5f84\u7684\u957f\u5ea6\n        # 11. \u5982\u679c\u6700\u77ed\u8def\u5f84\u7684\u957f\u5ea6\u7b49\u4e8e\u4e8c\u7ef4\u6570\u7ec4\u7684\u957f\u5ea6\uff0c\u5219\u8fd4\u56de\u6700\u77ed\u8def\u5f84\u7684\u957f\u5ea6\n        # 12. \u5982\u679c\u6700\u77ed\u8def\u5f84\u7684\u957f\u5ea6\u5927\u4e8e\u4e8c\u7ef4\u6570\u7ec4\u7684\u957f\u5ea6\uff0c\u5219\u8fd4\u56de-1\n        # 13. \u5982\u679c\u6700\u77ed\u8def\u5f84\u7684\u957f\u5ea6\u5c0f\u4e8e\u4e8c\u7ef4\u6570\u7ec4\u7684\u957f\u5ea6\uff0c\u5219\u8fd4\u56de\u6700\u77ed\u8def\u5f84\u7684\u957f\u5ea6\n        # 14. \u5982\u679c\u6700\u77ed\u8def\u5f84\u7684\u957f\u5ea6\u7b49\u4e8e\u4e8c\u7ef4\u6570\u7ec4\u7684\u957f\u5ea6\uff0c\u5219\u8fd4\u56de\u6700\u77ed\u8def\u5f84\u7684\u957f\u5ea6\n        # 15. \u5982\u679c\u6700\u77ed\u8def\u5f84\u7684\u957f\u5ea6\u5927\u4e8e\u4e8c\u7ef4\u6570\u7ec4\u7684\u957f\u5ea6\uff0c\u5219\u8fd4\u56de-1\n        # 16. \u5982\u679c\u6700\u77ed\u8def\u5f84\u7684\u957f\u5ea6\u5c0f\u4e8e\u4e8c\u7ef4\u6570\u7ec4\u7684\u957f\u5ea6\uff0c\u5219\u8fd4\u56de\u6700\u77ed\u8def\u5f84\u7684\u957f\u5ea6\n        # 17. \u5982\u679c\u6700\u77ed\u8def\u5f84\u7684\u957f\u5ea6\u7b49\u4e8e\u4e8c\u7ef4\u6570\u7ec4\u7684\u957f\u5ea6\uff0c\u5219\u8fd4\u56de\u6700\u77ed\u8def\u5f84\u7684\u957f\u5ea6\n        # 18. \u5982\u679c\u6700\u77ed\u8def\u5f84\u7684\u957f\u5ea6\u5927\u4e8e\u4e8c\u7ef4\u6570\u7ec4\u7684\u957f\u5ea6\uff0c\u5219\u8fd4\u56de-1\n        # 19. \u5982\u679c\u6700\u77ed\u8def\u5f84\u7684\u957f\u5ea6\u5c0f\u4e8e\u4e8c\u7ef4\u6570\u7ec4\u7684\u957f\u5ea6\uff0c\u5219\u8fd4\u56de\u6700\u77ed\u8def\u5f84\u7684\u957f\u5ea6\n        # 20. \u5982\u679c\u6700\u77ed\u8def\u5f84\u7684\u957f\u5ea6\u7b49\u4e8e\u4e8c\u7ef4\u6570\u7ec4\u7684\u957f\u5ea6\uff0c\u5219\u8fd4\u56de\u6700\u77ed\u8def\u5f84\u7684\u957f\u5ea6\n        # 21. \u5982\u679c\u6700\u77ed\u8def\u5f84\u7684\u957f\u5ea6\u5927\u4e8e\u4e8c\u7ef4\u6570\u7ec4\u7684\u957f\u5ea6\uff0c\u5219\u8fd4\u56de-1\n        # 22. \u5982\u679c\u6700\u77ed\u8def\u5f84\u7684\u957f\u5ea6\u5c0f\u4e8e\u4e8c\u7ef4\u6570\u7ec4\u7684\u957f\u5ea6\uff0c\u5219\u8fd4\u56de\u6700\u77ed\u8def\u5f84\u7684\u957f\u5ea6\n        # 23. \u5982\u679c\u6700\u77ed\u8def\u5f84\u7684\u957f\u5ea6\u7b49\u4e8e\u4e8c\u7ef4\u6570\u7ec4\u7684\u957f\u5ea6\uff0c\u5219\u8fd4\u56de\u6700\u77ed\u8def\u5f84\u7684\u957f\u5ea6\n        # 24. \u5982\u679c\u6700\u77ed\u8def\u5f84\u7684\u957f\u5ea6\u5927\u4e8e\u4e8c"}, {"task_id": "cut-off-trees-for-golf-event", "completion": "class Solution(object):\n    def cutOffTree(self, forest):\n        \"\"\"\n        :type forest: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u904d\u5386\u4e8c\u7ef4\u6570\u7ec4\uff0c\u627e\u5230\u6700\u77ee\u7684\u6811\n        # 2. \u4ece\u6700\u77ee\u7684\u6811\u5f00\u59cb\uff0c\u5411\u56db\u4e2a\u65b9\u5411\u6269\u6563\uff0c\u627e\u5230\u6700\u9ad8\u7684\u6811\n        # 3. \u627e\u5230\u6700\u9ad8\u7684\u6811\uff0c\u5411\u56db\u4e2a\u65b9\u5411\u6269\u6563\uff0c\u627e\u5230\u6700\u77ee\u7684\u6811\n        # 4. \u91cd\u590d\u6b65\u9aa4 2 \u548c 3\uff0c\u76f4\u5230\u627e\u5230\u6700\u77ee\u7684\u6811\n        # 5. \u8fd4\u56de\u6b65\u9aa4 2 \u7684\u6b65\u6570\n        \n        # 1. \u904d\u5386\u4e8c\u7ef4\u6570\u7ec4\uff0c\u627e\u5230\u6700\u77ee\u7684\u6811\n        min_tree = 1000000000\n        for row in forest:\n            for tree in row:\n                if tree < min_tree:\n                    min_tree = tree\n                    \n        # 2. \u4ece\u6700\u77ee\u7684\u6811\u5f00\u59cb\uff0c\u5411\u56db\u4e2a\u65b9\u5411\u6269\u6563\uff0c\u627e\u5230\u6700\u9ad8\u7684\u6811\n        # 3. \u627e\u5230\u6700\u9ad8\u7684\u6811\uff0c\u5411\u56db\u4e2a\u65b9\u5411\u6269\u6563\uff0c\u627e\u5230\u6700\u77ee\u7684\u6811\n        # 4. \u91cd\u590d\u6b65\u9aa4 2 \u548c 3\uff0c\u76f4\u5230\u627e\u5230\u6700\u77ee\u7684\u6811\n        # 5. \u8fd4\u56de\u6b65\u9aa4 2 \u7684\u6b65\u6570\n        step = 0\n        while min_tree != 0:\n            step += 1\n            # 2. \u4ece\u6700\u77ee\u7684\u6811\u5f00\u59cb\uff0c\u5411\u56db\u4e2a\u65b9\u5411\u6269\u6563\uff0c\u627e\u5230\u6700\u9ad8\u7684\u6811\n            for i in range(len(forest)):\n                for j in range(len(forest[0])):\n                    if forest[i][j] == min_tree:\n                        if i > 0 and forest[i-1][j] > min_tree:\n                            forest[i-1][j] = min_tree\n                        if i < len(forest) - 1 and forest[i+1][j] > min_tree:\n                            forest[i+1][j] = min_tree\n                        if j > 0 and forest[i][j-1] > min_tree:\n                            forest[i][j-1] = min_tree\n                        if j < len(forest[0]) - 1 and forest[i][j+1] > min_tree:\n                            forest[i][j+1] = min_tree\n                        \n            # 3. \u627e\u5230\u6700\u9ad8\u7684\u6811\uff0c\u5411\u56db\u4e2a\u65b9\u5411\u6269\u6563\uff0c\u627e\u5230\u6700\u77ee\u7684\u6811\n            max_tree = 0\n            for row in forest:\n                for tree in row:\n                    if tree > max_tree:\n                        max_tree = tree\n                        \n            min_tree = 1000000000\n            for row in forest:\n                for tree in row:\n                    if tree < min_tree:\n                        min_tree = tree\n                        \n        return step"}], "minimum-depth-of-binary-tree": [{"task_id": "minimum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def minDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        if not root.left and not root.right:\n            return 1\n        \n        if not root.left:\n            return 1 + self.minDepth(root.right)\n        \n        if not root.right:\n            return 1 + self.minDepth(root.left)\n        \n        return 1 + min(self.minDepth(root.left), self.minDepth(root.right))"}, {"task_id": "minimum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def minDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        if not root.left and not root.right:\n            return 1\n        \n        if not root.left:\n            return 1 + self.minDepth(root.right)\n        \n        if not root.right:\n            return 1 + self.minDepth(root.left)\n        \n        return 1 + min(self.minDepth(root.left), self.minDepth(root.right))"}, {"task_id": "minimum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def minDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        if not root.left and not root.right:\n            return 1\n        \n        if not root.left:\n            return self.minDepth(root.right) + 1\n        \n        if not root.right:\n            return self.minDepth(root.left) + 1\n        \n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1"}, {"task_id": "minimum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def minDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        if not root.left and not root.right:\n            return 1\n        \n        if not root.left:\n            return self.minDepth(root.right) + 1\n        \n        if not root.right:\n            return self.minDepth(root.left) + 1\n        \n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1"}, {"task_id": "minimum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def minDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        if not root.left and not root.right:\n            return 1\n        \n        if not root.left:\n            return self.minDepth(root.right) + 1\n        \n        if not root.right:\n            return self.minDepth(root.left) + 1\n        \n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1"}], "count-of-range-sum": [{"task_id": "count-of-range-sum", "completion": "class Solution(object):\n    def countRangeSum(self, nums, lower, upper):\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a128 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.93%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237\n\n        # res = 0\n        # for i in range(len(nums)):\n        #     for j in range(i, len(nums)):\n        #         s = sum(nums[i:j+1])\n        #         if s >= lower and s <= upper:\n        #             res += 1\n        # return res\n\n        # 2. \u4e8c\u5206\u67e5\u627e\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(nlogn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6267\u884c\u7528\u65f6\uff1a120 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.93%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237\n\n        # res = 0\n        # for i in range(len(nums)):\n        #     for j in range(i, len(nums)):\n        #         s = sum(nums[i:j+1])\n        #         if s >= lower and s <= upper:\n        #             res += 1\n        # return res\n\n        # 3. \u524d\u7f00\u548c\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(nlogn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6267\u884c\u7528\u65f6\uff1a120 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.93%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237\n\n        # \u524d\u7f00\u548c\n        # \u524d\u7f00\u548c\u6570\u7ec4\uff1a[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0"}, {"task_id": "count-of-range-sum", "completion": "class Solution(object):\n    def countRangeSum(self, nums, lower, upper):\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a108 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.01%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.01%\u7684\u7528\u6237\n        # 2020/10/27 15:00:00\n        # 2020/10/27 15:00:00\n        # 2020/10/27 15:00:00\n        # 2020/10/27 15:00:00\n        # 2020/10/27 15:00:00\n        # 2020/10/27 15:00:00\n        # 2020/10/27 15:00:00\n        # 2020/10/27 15:00:00\n        # 2020/10/27 15:00:00\n        # 2020/10/27 15:00:00\n        # 2020/10/27 15:00:00\n        # 2020/10/27 15:00:00\n        # 2020/10/27 15:00:00\n        # 2020/10/27 15:00:00\n        # 2020/10/27 15:00:00\n        # 2020/10/27 15:00:00\n        # 2020/10/27 15:00:00\n        # 2020/10/27 15:00:00\n        # 2020/10/27 15:00:00\n        # 2020/10/27 15:00:00\n        # 2020/10/27 15:00:00\n        # 2020/10/27 15:00:00\n        # 2020/10/27 15:00:00\n        # 2020/10/27 15:00:00\n        # 2020/10/27 15:00:00\n        # 2020/10/27 15:00:00\n        # 2020/10/27 15:00:00\n        # 2020/10/27 15:00:00\n        # 2020/10/27 15:00:00\n        # 2020/10/27 15:00:00\n        # 2020/10/27 15:00:00\n        # 2020/10/27 15:00:00\n        # 2020/10/27 15:00:00\n        # 2020/10/27 15:00:00\n        # 2020/10/27 15:00:00\n        # 2020/10/27 15:00:00\n        # 2020/10/27 15:00:00\n        # 2020/10/27 15:00:00\n        # 2020/10/27 15:00:00\n        # 20"}, {"task_id": "count-of-range-sum", "completion": "class Solution(object):\n    def countRangeSum(self, nums, lower, upper):\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u679a\u4e3e\u6240\u6709\u7684\u533a\u95f4\n        # 2. \u7edf\u8ba1\u533a\u95f4\u548c\u5728lower\u548cupper\u4e4b\u95f4\u7684\u4e2a\u6570\n        # 3. \u6ce8\u610f\u8fb9\u754c\n        \n        # \u679a\u4e3e\u6240\u6709\u7684\u533a\u95f4\n        # \u533a\u95f4\u7684\u5de6\u53f3\u8fb9\u754c\n        n = len(nums)\n        # \u533a\u95f4\u7684\u5de6\u53f3\u8fb9\u754c\n        left = 0\n        right = 0\n        # \u533a\u95f4\u7684\u548c\n        sum = 0\n        # \u533a\u95f4\u7684\u4e2a\u6570\n        count = 0\n        # \u533a\u95f4\u548c\u5728lower\u548cupper\u4e4b\u95f4\u7684\u4e2a\u6570\n        ans = 0\n        \n        # \u679a\u4e3e\u6240\u6709\u7684\u533a\u95f4\n        for right in range(n):\n            # \u7edf\u8ba1\u533a\u95f4\u548c\u5728lower\u548cupper\u4e4b\u95f4\u7684\u4e2a\u6570\n            sum += nums[right]\n            # \u6ce8\u610f\u8fb9\u754c\n            while left <= right and sum >= lower:\n                # \u533a\u95f4\u548c\u5728lower\u548cupper\u4e4b\u95f4\u7684\u4e2a\u6570\n                ans += right - left + 1\n                # \u7edf\u8ba1\u533a\u95f4\u548c\u5728lower\u548cupper\u4e4b\u95f4\u7684\u4e2a\u6570\n                sum -= nums[left]\n                # \u6ce8\u610f\u8fb9\u754c\n                left += 1\n        \n        return ans"}, {"task_id": "count-of-range-sum", "completion": "class Solution(object):\n    def countRangeSum(self, nums, lower, upper):\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a124 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n        # 2020/10/28\n        # \u6267\u884c\u7528\u65f6\uff1a124 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n        # 2020/10/28\n        # \u6267\u884c\u7528\u65f6\uff1a124 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n        # 2020/10/28\n        # \u6267\u884c\u7528\u65f6\uff1a124 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n        # 2020/10/28\n        # \u6267\u884c\u7528\u65f6\uff1a124 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n        # 2020/10/28\n        # \u6267\u884c\u7528\u65f6\uff1a124 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n        # 2020/10/28\n        # \u6267\u884c\u7528\u65f6\uff1a124 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n        # 2020/10/28\n        # \u6267\u884c\u7528\u65f6\uff1a124 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n        # 2020/10/28\n        # \u6267\u884c\u7528\u65f6\uff1a124 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n        # 2020/10/28\n        # \u6267\u884c\u7528\u65f6\uff1a124 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n        # 2020/10/28\n        # \u6267\u884c\u7528\u65f6\uff1a124 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n        # 2020/10/2"}, {"task_id": "count-of-range-sum", "completion": "class Solution(object):\n    def countRangeSum(self, nums, lower, upper):\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a128 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.91%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.8 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237\n\n        # res = 0\n        # for i in range(len(nums)):\n        #     for j in range(i, len(nums)):\n        #         s = sum(nums[i:j+1])\n        #         if s >= lower and s <= upper:\n        #             res += 1\n        # return res\n\n        # 2. \u4e8c\u5206\u67e5\u627e\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(nlogn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6267\u884c\u7528\u65f6\uff1a128 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.91%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.8 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237\n\n        # res = 0\n        # for i in range(len(nums)):\n        #     for j in range(i, len(nums)):\n        #         s = sum(nums[i:j+1])\n        #         if s >= lower and s <= upper:\n        #             res += 1\n        # return res\n\n        # 3. \u524d\u7f00\u548c\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(nlogn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6267\u884c\u7528\u65f6\uff1a128 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.91%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.8 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237\n\n        # \u524d\u7f00\u548c\n        # \u524d\u7f00\u548c\u6570\u7ec4\uff1a[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0"}], "arranging-coins": [{"task_id": "arranging-coins", "completion": "class Solution(object):\n    def arrangeCoins(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u89c4\u5f8b\n        # 2. \u627e\u89c4\u5f8b\n        # 3. \u627e\u89c4\u5f8b\n        # 4. \u627e\u89c4\u5f8b\n        # 5. \u627e\u89c4\u5f8b\n        # 6. \u627e\u89c4\u5f8b\n        # 7. \u627e\u89c4\u5f8b\n        # 8. \u627e\u89c4\u5f8b\n        # 9. \u627e\u89c4\u5f8b\n        # 10. \u627e\u89c4\u5f8b\n        # 11. \u627e\u89c4\u5f8b\n        # 12. \u627e\u89c4\u5f8b\n        # 13. \u627e\u89c4\u5f8b\n        # 14. \u627e\u89c4\u5f8b\n        # 15. \u627e\u89c4\u5f8b\n        # 16. \u627e\u89c4\u5f8b\n        # 17. \u627e\u89c4\u5f8b\n        # 18. \u627e\u89c4\u5f8b\n        # 19. \u627e\u89c4\u5f8b\n        # 20. \u627e\u89c4\u5f8b\n        # 21. \u627e\u89c4\u5f8b\n        # 22. \u627e\u89c4\u5f8b\n        # 23. \u627e\u89c4\u5f8b\n        # 24. \u627e\u89c4\u5f8b\n        # 25. \u627e\u89c4\u5f8b\n        # 26. \u627e\u89c4\u5f8b\n        # 27. \u627e\u89c4\u5f8b\n        # 28. \u627e\u89c4\u5f8b\n        # 29. \u627e\u89c4\u5f8b\n        # 30. \u627e\u89c4\u5f8b\n        # 31. \u627e\u89c4\u5f8b\n        # 32. \u627e\u89c4\u5f8b\n        # 33. \u627e\u89c4\u5f8b\n        # 34. \u627e\u89c4\u5f8b\n        # 35. \u627e\u89c4\u5f8b\n        # 36. \u627e\u89c4\u5f8b\n        # 37. \u627e\u89c4\u5f8b\n        # 38. \u627e\u89c4\u5f8b\n        # 39. \u627e\u89c4\u5f8b\n        # 40. \u627e\u89c4\u5f8b\n        # 41. \u627e\u89c4\u5f8b\n        # 42. \u627e\u89c4\u5f8b\n        # 43. \u627e\u89c4\u5f8b\n        # 44. \u627e\u89c4\u5f8b\n        # 45. \u627e\u89c4\u5f8b\n        # 46. \u627e\u89c4\u5f8b\n        # 47. \u627e\u89c4\u5f8b\n        # 48. \u627e\u89c4\u5f8b\n        # 49. \u627e\u89c4\u5f8b\n        # 50. \u627e\u89c4\u5f8b\n        # 51. \u627e\u89c4\u5f8b\n        # 52. \u627e\u89c4\u5f8b\n        # 53. \u627e\u89c4\u5f8b\n        # 54. \u627e\u89c4\u5f8b\n        # 55. \u627e\u89c4\u5f8b\n        # 56. \u627e\u89c4\u5f8b\n        # 57. \u627e\u89c4\u5f8b\n        # 58. \u627e\u89c4\u5f8b\n        # 59. \u627e\u89c4\u5f8b\n        # 60. \u627e\u89c4\u5f8b\n        # 61. \u627e\u89c4"}, {"task_id": "arranging-coins", "completion": "class Solution(object):\n    def arrangeCoins(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # 2. \u6570\u5b66\u89e3\u6cd5\n        # 3. \u52a8\u6001\u89c4\u5212\n        # 4. \u8d2a\u5fc3\u7b97\u6cd5\n        # 5. \u4e8c\u5206\u67e5\u627e\n        # 6. \u6811\u72b6\u6570\u7ec4\n        # 7. \u524d\u7f00\u548c\n        # 8. \u6ed1\u52a8\u7a97\u53e3\n        # 9. \u54c8\u5e0c\u8868\n        # 10. \u4f4d\u8fd0\u7b97\n        # 11. \u5206\u6cbb\n        # 12. \u9012\u5f52\n        # 13. \u8fed\u4ee3\n        # 14. \u961f\u5217\n        # 15. \u6808\n        # 16. \u5806\uff08\u4f18\u5148\u961f\u5217\uff09\n        # 17. \u8df3\u8868\n        # 18. \u6392\u5e8f\n        # 19. \u4e8c\u53c9\u641c\u7d22\u6811\n        # 20. \u7ebf\u6bb5\u6811\n        # 21. \u6811\n        # 22. \u54c8\u592b\u66fc\u7f16\u7801\n        # 23. \u6700\u5c0f\u751f\u6210\u6811\n        # 24. \u6700\u77ed\u8def\u5f84\n        # 25. \u6700\u5c0f\u5806\n        # 26. \u5e76\u67e5\u96c6\n        # 27. \u62d3\u6251\u6392\u5e8f\n        # 28. \u5b57\u5178\u6811\n        # 29. \u54c8\u5e0c\u8868\u6269\u5c55\n        # 30. \u6811\u72b6\u6570\u7ec4\u6269\u5c55\n        # 31. \u6811\n        # 32. \u56fe\n        # 33. \u9012\u5f52\n        # 34. \u8fed\u4ee3\n        # 35. \u5806\uff08\u4f18\u5148\u961f\u5217\uff09\n        # 36. \u961f\u5217\n        # 37. \u6808\n        # 38. \u53cc\u7aef\u961f\u5217\n        # 39. \u961f\u5217\n        # 40. \u6808\n        # 41. \u961f\u5217\n        # 42. \u6808\n        # 43. \u961f\u5217\n        # 44. \u6808\n        # 45. \u961f\u5217\n        # 46. \u6808\n        # 47. \u961f\u5217\n        # 48. \u6808\n        # 49. \u961f\u5217\n        # 50. \u6808\n        # 51. \u961f\u5217\n        # 52. \u6808\n        # 53. \u961f\u5217\n        # 54. \u6808\n        # 55. \u961f\u5217\n        # 56. \u6808\n        # 57. \u961f\u5217\n        # 58. \u6808\n        # 59. \u961f\u5217\n        # 60. \u6808\n        # 61. \u961f\u5217\n        # 62. \u6808\n        # 63. \u961f\u5217\n        # 64. \u6808\n        # 65. \u961f\u5217\n        # 66. \u6808\n        # 67. \u961f\u5217\n        # 68. \u6808\n        # 69. \u961f\u5217\n        # 70. \u6808\n        # 71. \u961f\u5217\n        # 72. \u6808\n        # 73. \u961f\u5217\n        # 74. \u6808\n        # 75. \u961f\u5217\n        # 76. \u6808\n        # 77. \u961f\u5217\n        # 78. \u6808\n        # 79. \u961f\u5217\n        # 80. \u6808\n        # 81. \u961f\u5217\n        # 82. \u6808"}, {"task_id": "arranging-coins", "completion": "class Solution(object):\n    def arrangeCoins(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u89c4\u5f8b\n        # 2. \u627e\u89c4\u5f8b\n        # 3. \u627e\u89c4\u5f8b\n        # 4. \u627e\u89c4\u5f8b\n        # 5. \u627e\u89c4\u5f8b\n        # 6. \u627e\u89c4\u5f8b\n        # 7. \u627e\u89c4\u5f8b\n        # 8. \u627e\u89c4\u5f8b\n        # 9. \u627e\u89c4\u5f8b\n        # 10. \u627e\u89c4\u5f8b\n        # 11. \u627e\u89c4\u5f8b\n        # 12. \u627e\u89c4\u5f8b\n        # 13. \u627e\u89c4\u5f8b\n        # 14. \u627e\u89c4\u5f8b\n        # 15. \u627e\u89c4\u5f8b\n        # 16. \u627e\u89c4\u5f8b\n        # 17. \u627e\u89c4\u5f8b\n        # 18. \u627e\u89c4\u5f8b\n        # 19. \u627e\u89c4\u5f8b\n        # 20. \u627e\u89c4\u5f8b\n        # 21. \u627e\u89c4\u5f8b\n        # 22. \u627e\u89c4\u5f8b\n        # 23. \u627e\u89c4\u5f8b\n        # 24. \u627e\u89c4\u5f8b\n        # 25. \u627e\u89c4\u5f8b\n        # 26. \u627e\u89c4\u5f8b\n        # 27. \u627e\u89c4\u5f8b\n        # 28. \u627e\u89c4\u5f8b\n        # 29. \u627e\u89c4\u5f8b\n        # 30. \u627e\u89c4\u5f8b\n        # 31. \u627e\u89c4\u5f8b\n        # 32. \u627e\u89c4\u5f8b\n        # 33. \u627e\u89c4\u5f8b\n        # 34. \u627e\u89c4\u5f8b\n        # 35. \u627e\u89c4\u5f8b\n        # 36. \u627e\u89c4\u5f8b\n        # 37. \u627e\u89c4\u5f8b\n        # 38. \u627e\u89c4\u5f8b\n        # 39. \u627e\u89c4\u5f8b\n        # 40. \u627e\u89c4\u5f8b\n        # 41. \u627e\u89c4\u5f8b\n        # 42. \u627e\u89c4\u5f8b\n        # 43. \u627e\u89c4\u5f8b\n        # 44. \u627e\u89c4\u5f8b\n        # 45. \u627e\u89c4\u5f8b\n        # 46. \u627e\u89c4\u5f8b\n        # 47. \u627e\u89c4\u5f8b\n        # 48. \u627e\u89c4\u5f8b\n        # 49. \u627e\u89c4\u5f8b\n        # 50. \u627e\u89c4\u5f8b\n        # 51. \u627e\u89c4\u5f8b\n        # 52. \u627e\u89c4\u5f8b\n        # 53. \u627e\u89c4\u5f8b\n        # 54. \u627e\u89c4\u5f8b\n        # 55. \u627e\u89c4\u5f8b\n        # 56. \u627e\u89c4\u5f8b\n        # 57. \u627e\u89c4\u5f8b\n        # 58. \u627e\u89c4\u5f8b\n        # 59. \u627e\u89c4\u5f8b\n        # 60. \u627e\u89c4\u5f8b\n        # 61. \u627e\u89c4"}, {"task_id": "arranging-coins", "completion": "class Solution(object):\n    def arrangeCoins(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u89c4\u5f8b\n        # 2. \u627e\u89c4\u5f8b\n        # 3. \u627e\u89c4\u5f8b\n        # 4. \u627e\u89c4\u5f8b\n        # 5. \u627e\u89c4\u5f8b\n        # 6. \u627e\u89c4\u5f8b\n        # 7. \u627e\u89c4\u5f8b\n        # 8. \u627e\u89c4\u5f8b\n        # 9. \u627e\u89c4\u5f8b\n        # 10. \u627e\u89c4\u5f8b\n        # 11. \u627e\u89c4\u5f8b\n        # 12. \u627e\u89c4\u5f8b\n        # 13. \u627e\u89c4\u5f8b\n        # 14. \u627e\u89c4\u5f8b\n        # 15. \u627e\u89c4\u5f8b\n        # 16. \u627e\u89c4\u5f8b\n        # 17. \u627e\u89c4\u5f8b\n        # 18. \u627e\u89c4\u5f8b\n        # 19. \u627e\u89c4\u5f8b\n        # 20. \u627e\u89c4\u5f8b\n        # 21. \u627e\u89c4\u5f8b\n        # 22. \u627e\u89c4\u5f8b\n        # 23. \u627e\u89c4\u5f8b\n        # 24. \u627e\u89c4\u5f8b\n        # 25. \u627e\u89c4\u5f8b\n        # 26. \u627e\u89c4\u5f8b\n        # 27. \u627e\u89c4\u5f8b\n        # 28. \u627e\u89c4\u5f8b\n        # 29. \u627e\u89c4\u5f8b\n        # 30. \u627e\u89c4\u5f8b\n        # 31. \u627e\u89c4\u5f8b\n        # 32. \u627e\u89c4\u5f8b\n        # 33. \u627e\u89c4\u5f8b\n        # 34. \u627e\u89c4\u5f8b\n        # 35. \u627e\u89c4\u5f8b\n        # 36. \u627e\u89c4\u5f8b\n        # 37. \u627e\u89c4\u5f8b\n        # 38. \u627e\u89c4\u5f8b\n        # 39. \u627e\u89c4\u5f8b\n        # 40. \u627e\u89c4\u5f8b\n        # 41. \u627e\u89c4\u5f8b\n        # 42. \u627e\u89c4\u5f8b\n        # 43. \u627e\u89c4\u5f8b\n        # 44. \u627e\u89c4\u5f8b\n        # 45. \u627e\u89c4\u5f8b\n        # 46. \u627e\u89c4\u5f8b\n        # 47. \u627e\u89c4\u5f8b\n        # 48. \u627e\u89c4\u5f8b\n        # 49. \u627e\u89c4\u5f8b\n        # 50. \u627e\u89c4\u5f8b\n        # 51. \u627e\u89c4\u5f8b\n        # 52. \u627e\u89c4\u5f8b\n        # 53. \u627e\u89c4\u5f8b\n        # 54. \u627e\u89c4\u5f8b\n        # 55. \u627e\u89c4\u5f8b\n        # 56. \u627e\u89c4\u5f8b\n        # 57. \u627e\u89c4\u5f8b\n        # 58. \u627e\u89c4\u5f8b\n        # 59. \u627e\u89c4\u5f8b\n        # 60. \u627e\u89c4\u5f8b\n        # 61. \u627e\u89c4"}, {"task_id": "arranging-coins", "completion": "class Solution(object):\n    def arrangeCoins(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u89c4\u5f8b\n        # 2. \u627e\u89c4\u5f8b\n        # 3. \u627e\u89c4\u5f8b\n        # 4. \u627e\u89c4\u5f8b\n        # 5. \u627e\u89c4\u5f8b\n        # 6. \u627e\u89c4\u5f8b\n        # 7. \u627e\u89c4\u5f8b\n        # 8. \u627e\u89c4\u5f8b\n        # 9. \u627e\u89c4\u5f8b\n        # 10. \u627e\u89c4\u5f8b\n        # 11. \u627e\u89c4\u5f8b\n        # 12. \u627e\u89c4\u5f8b\n        # 13. \u627e\u89c4\u5f8b\n        # 14. \u627e\u89c4\u5f8b\n        # 15. \u627e\u89c4\u5f8b\n        # 16. \u627e\u89c4\u5f8b\n        # 17. \u627e\u89c4\u5f8b\n        # 18. \u627e\u89c4\u5f8b\n        # 19. \u627e\u89c4\u5f8b\n        # 20. \u627e\u89c4\u5f8b\n        # 21. \u627e\u89c4\u5f8b\n        # 22. \u627e\u89c4\u5f8b\n        # 23. \u627e\u89c4\u5f8b\n        # 24. \u627e\u89c4\u5f8b\n        # 25. \u627e\u89c4\u5f8b\n        # 26. \u627e\u89c4\u5f8b\n        # 27. \u627e\u89c4\u5f8b\n        # 28. \u627e\u89c4\u5f8b\n        # 29. \u627e\u89c4\u5f8b\n        # 30. \u627e\u89c4\u5f8b\n        # 31. \u627e\u89c4\u5f8b\n        # 32. \u627e\u89c4\u5f8b\n        # 33. \u627e\u89c4\u5f8b\n        # 34. \u627e\u89c4\u5f8b\n        # 35. \u627e\u89c4\u5f8b\n        # 36. \u627e\u89c4\u5f8b\n        # 37. \u627e\u89c4\u5f8b\n        # 38. \u627e\u89c4\u5f8b\n        # 39. \u627e\u89c4\u5f8b\n        # 40. \u627e\u89c4\u5f8b\n        # 41. \u627e\u89c4\u5f8b\n        # 42. \u627e\u89c4\u5f8b\n        # 43. \u627e\u89c4\u5f8b\n        # 44. \u627e\u89c4\u5f8b\n        # 45. \u627e\u89c4\u5f8b\n        # 46. \u627e\u89c4\u5f8b\n        # 47. \u627e\u89c4\u5f8b\n        # 48. \u627e\u89c4\u5f8b\n        # 49. \u627e\u89c4\u5f8b\n        # 50. \u627e\u89c4\u5f8b\n        # 51. \u627e\u89c4\u5f8b\n        # 52. \u627e\u89c4\u5f8b\n        # 53. \u627e\u89c4\u5f8b\n        # 54. \u627e\u89c4\u5f8b\n        # 55. \u627e\u89c4\u5f8b\n        # 56. \u627e\u89c4\u5f8b\n        # 57. \u627e\u89c4\u5f8b\n        # 58. \u627e\u89c4\u5f8b\n        # 59. \u627e\u89c4\u5f8b\n        # 60. \u627e\u89c4\u5f8b\n        # 61. \u627e\u89c4"}], "longest-uncommon-subsequence-i": [{"task_id": "longest-uncommon-subsequence-i", "completion": "class Solution(object):\n    def findLUSlength(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: int\n        \"\"\"\n        \n        if a == b:\n            return -1\n        else:\n            return max(len(a), len(b))"}, {"task_id": "longest-uncommon-subsequence-i", "completion": "class Solution(object):\n    def findLUSlength(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: int\n        \"\"\"\n        \n        if a == b:\n            return -1\n        else:\n            return max(len(a), len(b))"}, {"task_id": "longest-uncommon-subsequence-i", "completion": "class Solution(object):\n    def findLUSlength(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: int\n        \"\"\"\n        \n        if a == b:\n            return -1\n        else:\n            return max(len(a), len(b))"}, {"task_id": "longest-uncommon-subsequence-i", "completion": "class Solution(object):\n    def findLUSlength(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: int\n        \"\"\"\n        \n        if a == b:\n            return -1\n        else:\n            return max(len(a), len(b))"}, {"task_id": "longest-uncommon-subsequence-i", "completion": "class Solution(object):\n    def findLUSlength(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: int\n        \"\"\"\n        \n        if a == b:\n            return -1\n        else:\n            return max(len(a), len(b))"}], "binary-tree-level-order-traversal-ii": [{"task_id": "binary-tree-level-order-traversal-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        res = []\n        \n        while queue:\n            size = len(queue)\n            level = []\n            for i in range(size):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            res.append(level)\n        return res[::-1]"}, {"task_id": "binary-tree-level-order-traversal-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        res = []\n        \n        while queue:\n            size = len(queue)\n            level = []\n            for i in range(size):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            res.append(level)\n        return res[::-1]"}, {"task_id": "binary-tree-level-order-traversal-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        res = []\n        \n        while queue:\n            size = len(queue)\n            level = []\n            for i in range(size):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            res.append(level)\n        return res[::-1]"}, {"task_id": "binary-tree-level-order-traversal-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        res = []\n        \n        while queue:\n            size = len(queue)\n            level = []\n            for i in range(size):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            res.append(level)\n        return res[::-1]"}, {"task_id": "binary-tree-level-order-traversal-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        \n        while queue:\n            size = len(queue)\n            level = []\n            for i in range(size):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.append(level)\n        return result[::-1]"}], "palindrome-number": [{"task_id": "palindrome-number", "completion": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        \n        if x < 0:\n            return False\n        if x < 10:\n            return True\n        if x % 10 == 0:\n            return False\n        if x % 10 == x // 10:\n            return True\n        return False"}, {"task_id": "palindrome-number", "completion": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        \n        if x < 0:\n            return False\n        if x < 10:\n            return True\n        if x % 10 == 0:\n            return False\n        if x % 10 == x // 10:\n            return True\n        return False"}, {"task_id": "palindrome-number", "completion": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        \n        if x < 0:\n            return False\n        if x < 10:\n            return True\n        if x % 10 == 0:\n            return False\n        if x % 10 == x // 10:\n            return True\n        return False"}, {"task_id": "palindrome-number", "completion": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        \n        if x < 0:\n            return False\n        if x < 10:\n            return True\n        if x % 10 == 0:\n            return False\n        if x % 10 == x // 10:\n            return True\n        return False"}, {"task_id": "palindrome-number", "completion": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        \n        if x < 0:\n            return False\n        if x < 10:\n            return True\n        if x % 10 == 0:\n            return False\n        if x % 10 == x // 10:\n            return True\n        return False"}], "decode-ways": [{"task_id": "decode-ways", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if not s:\n            return 0\n        \n        if s[0] == '0':\n            return 0\n        \n        dp = [1] + [0] * len(s)\n        for i in range(1, len(s)):\n            if s[i] == '0':\n                if s[i-1] == '1' or s[i-1] == '2':\n                    dp[i] = dp[i-1]\n                else:\n                    dp[i] = 0\n            else:\n                if s[i-1] == '1' or s[i-1] == '2' and int(s[i]) <= 6:\n                    dp[i] = dp[i-1]\n                else:\n                    dp[i] = dp[i-1] + dp[i-2]\n        return dp[-1]"}, {"task_id": "decode-ways", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if not s:\n            return 0\n        \n        if s[0] == '0':\n            return 0\n        \n        dp = [1] + [0] * len(s)\n        \n        for i in range(1, len(s)):\n            if s[i] == '0':\n                if s[i-1] == '1' or s[i-1] == '2':\n                    dp[i] = dp[i-1]\n                else:\n                    dp[i] = 0\n            else:\n                if s[i-1] == '1' or s[i-1] == '2' and int(s[i]) <= 6:\n                    dp[i] = dp[i-1]\n                else:\n                    dp[i] = dp[i-1] + dp[i-2]\n        \n        return dp[-1]"}, {"task_id": "decode-ways", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if not s:\n            return 0\n        \n        if s[0] == '0':\n            return 0\n        \n        dp = [1] + [0] * len(s)\n        for i in range(1, len(s)):\n            if s[i] == '0':\n                if s[i-1] == '1' or s[i-1] == '2':\n                    dp[i] = dp[i-1]\n                else:\n                    dp[i] = 0\n            else:\n                if s[i-1] == '1' or s[i-1] == '2' and int(s[i]) <= 6:\n                    dp[i] = dp[i-1]\n                else:\n                    dp[i] = dp[i-1] + dp[i-2]\n        return dp[-1]"}, {"task_id": "decode-ways", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if not s:\n            return 0\n        \n        if s[0] == '0':\n            return 0\n        \n        dp = [1] + [0] * len(s)\n        for i in range(1, len(s)):\n            if s[i] == '0':\n                if s[i-1] == '1' or s[i-1] == '2':\n                    dp[i] = dp[i-1]\n                else:\n                    dp[i] = 0\n            else:\n                if s[i-1] == '1' or s[i-1] == '2' and int(s[i]) <= 6:\n                    dp[i] = dp[i-1]\n                else:\n                    dp[i] = dp[i-1] + dp[i-2]\n        return dp[-1]"}, {"task_id": "decode-ways", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if not s:\n            return 0\n        \n        if s[0] == '0':\n            return 0\n        \n        dp = [1] + [0] * len(s)\n        for i in range(1, len(s)):\n            if s[i] == '0':\n                if s[i-1] == '1' or s[i-1] == '2':\n                    dp[i] = dp[i-1]\n                else:\n                    dp[i] = 0\n            else:\n                if s[i-1] == '1' or s[i-1] == '2' and int(s[i]) <= 6:\n                    dp[i] = dp[i-1]\n                else:\n                    dp[i] = dp[i-1] + dp[i-2]\n        return dp[-1]"}], "is-subsequence": [{"task_id": "is-subsequence", "completion": "class Solution(object):\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\""}, {"task_id": "is-subsequence", "completion": "class Solution(object):\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if not s:\n            return True\n        if not t:\n            return False\n        i = 0\n        j = 0\n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n            j += 1\n        return i == len(s)"}, {"task_id": "is-subsequence", "completion": "class Solution(object):\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if not s:\n            return True\n        if not t:\n            return False\n        \n        i = 0\n        j = 0\n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n            j += 1\n        return i == len(s)"}, {"task_id": "is-subsequence", "completion": "class Solution(object):\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if not s:\n            return True\n        if not t:\n            return False\n        \n        i = 0\n        j = 0\n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n            j += 1\n        return i == len(s)"}, {"task_id": "is-subsequence", "completion": "class Solution(object):\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if not s:\n            return True\n        if not t:\n            return False\n        \n        i = 0\n        j = 0\n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n            j += 1\n        return i == len(s)"}], "gray-code": [{"task_id": "gray-code", "completion": "class Solution(object):\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u9012\u5f52\n        # 2. \u5faa\u73af\n        # 3. \u9012\u5f52 + \u5faa\u73af\n        # 4. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868\n        # 5. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217\n        # 6. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808\n        # 7. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52\n        # 8. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af\n        # 9. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868\n        # 10. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217\n        # 11. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808\n        # 12. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52\n        # 13. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af\n        # 14. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868\n        # 15. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217\n        # 16. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808\n        # 17. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af"}, {"task_id": "gray-code", "completion": "class Solution(object):\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u9012\u5f52\n        # 2. \u5faa\u73af\n        # 3. \u9012\u5f52 + \u5faa\u73af\n        # 4. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868\n        # 5. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217\n        # 6. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808\n        # 7. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52\n        # 8. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af\n        # 9. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868\n        # 10. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217\n        # 11. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808\n        # 12. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52\n        # 13. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af\n        # 14. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868\n        # 15. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217\n        # 16. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808\n        # 17. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af"}, {"task_id": "gray-code", "completion": "class Solution(object):\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u9012\u5f52\n        # 2. \u5faa\u73af\n        # 3. \u9012\u5f52 + \u5faa\u73af\n        # 4. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868\n        # 5. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217\n        # 6. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808\n        # 7. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52\n        # 8. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af\n        # 9. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868\n        # 10. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217\n        # 11. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808\n        # 12. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52\n        # 13. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af\n        # 14. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868\n        # 15. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217\n        # 16. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808\n        # 17. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af"}, {"task_id": "gray-code", "completion": "class Solution(object):\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u9012\u5f52\n        # 2. \u5faa\u73af\n        # 3. \u9012\u5f52 + \u5faa\u73af\n        # 4. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868\n        # 5. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217\n        # 6. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808\n        # 7. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52\n        # 8. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af\n        # 9. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868\n        # 10. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217\n        # 11. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808\n        # 12. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52\n        # 13. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af\n        # 14. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868\n        # 15. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217\n        # 16. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808\n        # 17. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af"}, {"task_id": "gray-code", "completion": "class Solution(object):\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u9012\u5f52\n        # 2. \u5faa\u73af\n        # 3. \u9012\u5f52 + \u5faa\u73af\n        # 4. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868\n        # 5. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217\n        # 6. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808\n        # 7. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52\n        # 8. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af\n        # 9. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868\n        # 10. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217\n        # 11. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808\n        # 12. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52\n        # 13. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af\n        # 14. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868\n        # 15. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217\n        # 16. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808\n        # 17. \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af + \u54c8\u5e0c\u8868 + \u961f\u5217 + \u6808 + \u9012\u5f52 + \u5faa\u73af"}], "climbing-stairs": [{"task_id": "climbing-stairs", "completion": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. Brute Force\n        # 2. DP\n        # 3. Recursion\n        # 4. Math\n        # 5. Dynamic Programming\n        \n        # 1. Brute Force\n        # O(n^2) time | O(n) space\n        # if n == 1:\n        #     return 1\n        # if n == 2:\n        #     return 2\n        # return self.climbStairs(n-1) + self.climbStairs(n-2)\n        \n        # 2. DP\n        # O(n) time | O(n) space\n        # dp = [0] * (n+1)\n        # dp[0] = 1\n        # dp[1] = 1\n        # for i in range(2, n+1):\n        #     dp[i] = dp[i-1] + dp[i-2]\n        # return dp[n]\n        \n        # 3. Recursion\n        # O(2^n) time | O(n) space\n        # if n == 1:\n        #     return 1\n        # if n == 2:\n        #     return 2\n        # return self.climbStairs(n-1) + self.climbStairs(n-2)\n        \n        # 4. Math\n        # O(1) time | O(1) space\n        # return int(math.pow(2, n))\n        \n        # 5. Dynamic Programming\n        # O(n) time | O(n) space\n        # dp = [0] * (n+1)\n        # dp[0] = 1\n        # dp[1] = 1\n        # for i in range(2, n+1):\n        #     dp[i] = dp[i-1] + dp[i-2]\n        # return dp[n]\n        \n        # 6. Recursion\n        # O(n) time | O(n) space\n        # if n == 1:\n        #     return 1\n        # if n == 2:\n        #     return 2\n        # return self.climbStairs(n-1) + self.climbStairs(n-2)\n        \n        # 7. DP\n        # O(n) time | O(n) space\n        # dp = [0] * (n+1)\n        # dp[0] = 1\n        # dp[1] = 1\n        # for i in range(2, n+1):\n        #     dp[i] = dp[i-1] + dp[i-2]\n        # return dp[n]\n        \n        # 8. Recursion\n        # O(n) time | O(n) space\n        # if n == 1:\n        #     return 1\n        # if n == 2:\n        #     return 2\n        # return self.climbStairs(n-1) + self.climbStairs(n-2)\n        \n        # 9. DP\n        # O(n) time | O(n) space\n        # dp = [0] * (n+1)\n        # dp[0] = 1\n        # dp[1] = 1\n        # for i in range(2, n+1):\n        #     dp[i] = dp[i-1] + dp[i-2]\n        # return dp[n]\n        \n        # 10. Recursion\n        # O(n) time | O(n) space\n        # if n == 1:\n        #     return 1\n        # if n == 2:\n        #     return 2\n        # return self.climbStairs(n-1) + self.climbStairs(n-2)\n        \n        # 11. DP\n        # O(n) time | O(n) space\n        # dp = [0] * (n+1)\n        # dp[0] = 1\n        # dp[1] = 1\n        # for i in range(2, n+1):\n        #     dp[i"}, {"task_id": "climbing-stairs", "completion": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. Brute Force\n        # 2. DP\n        # 3. Recursion\n        # 4. Math\n        # 5. Dynamic Programming\n        \n        # 1. Brute Force\n        # O(n^2) time | O(n) space\n        # if n == 1:\n        #     return 1\n        # if n == 2:\n        #     return 2\n        # return self.climbStairs(n-1) + self.climbStairs(n-2)\n        \n        # 2. DP\n        # O(n) time | O(n) space\n        # dp = [0] * (n+1)\n        # dp[0] = 1\n        # dp[1] = 1\n        # for i in range(2, n+1):\n        #     dp[i] = dp[i-1] + dp[i-2]\n        # return dp[n]\n        \n        # 3. Recursion\n        # O(2^n) time | O(n) space\n        # if n == 1:\n        #     return 1\n        # if n == 2:\n        #     return 2\n        # return self.climbStairs(n-1) + self.climbStairs(n-2)\n        \n        # 4. Math\n        # O(1) time | O(1) space\n        # return int(math.pow(2, n))\n        \n        # 5. Dynamic Programming\n        # O(n) time | O(n) space\n        # dp = [0] * (n+1)\n        # dp[0] = 1\n        # dp[1] = 1\n        # for i in range(2, n+1):\n        #     dp[i] = dp[i-1] + dp[i-2]\n        # return dp[n]\n        \n        # 6. Recursion\n        # O(n) time | O(n) space\n        # if n == 1:\n        #     return 1\n        # if n == 2:\n        #     return 2\n        # return self.climbStairs(n-1) + self.climbStairs(n-2)\n        \n        # 7. DP\n        # O(n) time | O(n) space\n        # dp = [0] * (n+1)\n        # dp[0] = 1\n        # dp[1] = 1\n        # for i in range(2, n+1):\n        #     dp[i] = dp[i-1] + dp[i-2]\n        # return dp[n]\n        \n        # 8. Recursion\n        # O(n) time | O(n) space\n        # if n == 1:\n        #     return 1\n        # if n == 2:\n        #     return 2\n        # return self.climbStairs(n-1) + self.climbStairs(n-2)\n        \n        # 9. DP\n        # O(n) time | O(n) space\n        # dp = [0] * (n+1)\n        # dp[0] = 1\n        # dp[1] = 1\n        # for i in range(2, n+1):\n        #     dp[i] = dp[i-1] + dp[i-2]\n        # return dp[n]\n        \n        # 10. Recursion\n        # O(n) time | O(n) space\n        # if n == 1:\n        #     return 1\n        # if n == 2:\n        #     return 2\n        # return self.climbStairs(n-1) + self.climbStairs(n-2)\n        \n        # 11. DP\n        # O(n) time | O(n) space\n        # dp = [0] * (n+1)\n        # dp[0] = 1\n        # dp[1] = 1\n        # for i in range(2, n+1):\n        #     dp[i"}, {"task_id": "climbing-stairs", "completion": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # dp[i] = dp[i-1] + dp[i-2]\n        # dp[i] = dp[i-1] + dp[i-2]\n        # dp[i] = dp[i-1] + dp[i-2]\n        # dp[i] = dp[i-1] + dp[i-2]\n        # dp[i] = dp[i-1] + dp[i-2]\n        # dp[i] = dp[i-1] + dp[i-2]\n        # dp[i] = dp[i-1] + dp[i-2]\n        # dp[i] = dp[i-1] + dp[i-2]\n        # dp[i] = dp[i-1] + dp[i-2]\n        # dp[i] = dp[i-1] + dp[i-2]\n        # dp[i] = dp[i-1] + dp[i-2]\n        # dp[i] = dp[i-1] + dp[i-2]\n        # dp[i] = dp[i-1] + dp[i-2]\n        # dp[i] = dp[i-1] + dp[i-2]\n        # dp[i] = dp[i-1] + dp[i-2]\n        # dp[i] = dp[i-1] + dp[i-2]\n        # dp[i] = dp[i-1] + dp[i-2]\n        # dp[i] = dp[i-1] + dp[i-2]\n        # dp[i] = dp[i-1] + dp[i-2]\n        # dp[i] = dp[i-1] + dp[i-2]\n        # dp[i] = dp[i-1] + dp[i-2]\n        # dp[i] = dp[i-1] + dp[i-2]\n        # dp[i] = dp[i-1] + dp[i-2]\n        # dp[i] = dp[i-1] + dp[i-2]\n        # dp[i] = dp[i-1] + dp[i-2]\n        # dp[i] = dp[i-1] + dp[i-2]\n        # dp[i] = dp[i-1] + dp[i-2]\n        # dp[i] = dp[i-1] + dp[i-2]\n        # dp[i] = dp[i-1] + dp[i-2]\n        # dp[i] = dp[i-1] + dp[i-2]\n        # dp[i] = dp[i-1] + dp[i-2]\n        # dp[i] = dp[i-1] + dp[i-2]\n        # dp[i] = dp[i-1] + dp[i-2]\n        # dp[i] = dp[i-1] + dp[i-2]\n        # dp[i] = dp[i-1] + dp[i-2]\n        # dp[i] = dp[i-1] + dp[i-2]\n        # dp[i] = dp[i-1] + dp[i-2]\n        # dp[i] = dp[i-1] + dp[i-2]\n        # dp[i] = dp[i-1] + dp[i-2]\n        # dp[i] = dp[i-1] + dp[i-2]\n        # dp[i] = dp[i-1] + dp[i-2]\n        # dp[i] = dp[i-1] + dp[i-2]\n        # dp[i] = dp[i-1] +"}, {"task_id": "climbing-stairs", "completion": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. Brute Force\n        # 2. DP\n        # 3. Recursion\n        # 4. Math\n        # 5. Dynamic Programming\n        # 6. Bit Manipulation\n        # 7. Combinatorics\n        # 8. Recursion + Memoization\n        # 9. Recursion + Tabulation\n        # 10. Iteration\n        # 11. Iteration + Memoization\n        # 12. Iteration + Tabulation\n        # 13. Iteration + Bit Manipulation\n        # 14. Iteration + Combinatorics\n        # 15. Iteration + Dynamic Programming\n        # 16. Iteration + Bit Manipulation + Memoization\n        # 17. Iteration + Bit Manipulation + Tabulation\n        # 18. Iteration + Combinatorics + Memoization\n        # 19. Iteration + Combinatorics + Tabulation\n        # 20. Iteration + Dynamic Programming + Memoization\n        # 21. Iteration + Dynamic Programming + Tabulation\n        # 22. Iteration + Bit Manipulation + Combinatorics\n        # 23. Iteration + Bit Manipulation + Combinatorics + Memoization\n        # 24. Iteration + Bit Manipulation + Combinatorics + Tabulation\n        # 25. Iteration + Bit Manipulation + Dynamic Programming\n        # 26. Iteration + Bit Manipulation + Dynamic Programming + Memoization\n        # 27. Iteration + Bit Manipulation + Dynamic Programming + Tabulation\n        # 28. Iteration + Combinatorics + Dynamic Programming\n        # 29. Iteration + Combinatorics + Dynamic Programming + Memoization\n        # 30. Iteration + Combinatorics + Dynamic Programming + Tabulation\n        # 31. Iteration + Bit Manipulation + Combinatorics + Dynamic Programming\n        # 32. Iteration + Bit Manipulation + Combinatorics + Dynamic Programming + Memoization\n        # 33. Iteration + Bit Manipulation + Combinatorics + Dynamic Programming + Tabulation\n        # 34. Iteration + Bit Manipulation + Combinatorics + Dynamic Programming + Memoization\n        # 35. Iteration + Bit Manipulation + Combinatorics + Dynamic Programming + Tabulation\n        # 36. Iteration + Bit Manipulation + Combinatorics + Dynamic Programming + Memoization\n        # 37. Iteration + Bit Manipulation + Combinatorics + Dynamic Programming + Tabulation\n        # 38. Iteration + Bit Manipulation + Combinatorics + Dynamic Programming + Memoization\n        # 39. Iteration + Bit Manipulation + Combinatorics + Dynamic Programming + Tabulation\n        # 40. Iteration + Bit Manipulation + Combinatorics + Dynamic Programming + Memoization\n        # 41. Iteration + Bit Manipulation + Combinatorics + Dynamic Programming + Tabulation\n        # 42. Iteration + Bit Manipulation + Combinatorics + Dynamic Programming + Memoization\n        # 43. Iteration + Bit Manipulation + Combinatorics + Dynamic Programming + Tabulation\n        # 44. Iteration + Bit Manipulation + Combinatorics + Dynamic Programming + Memoization\n        # 45. Iteration + Bit Manipulation + Combinatorics + Dynamic Programming + Tabulation\n        # 46. Iteration + Bit Manipulation + Combinatorics + Dynamic Programming + Memoization\n        # 47. Iteration + Bit Manipulation + Combinatorics + Dynamic Programming + Tabulation\n        # 48. Iteration + Bit Manipulation + Combinatorics + Dynamic Programming + Memoization\n        # 49. Iteration + Bit Manipulation + Combinatorics + Dynamic Programming + Tabulation\n        # 50. Iteration + Bit Manipulation + Combinatorics + Dynamic Programming + Memoization\n        # 51. Iteration + Bit Manipulation + Combinatorics + Dynamic Programming + Tabulation\n        # 52. Iteration + Bit Manipulation + Combinatorics + Dynamic"}, {"task_id": "climbing-stairs", "completion": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. Brute Force\n        # 2. DP\n        # 3. Recursion\n        # 4. Math\n        # 5. Dynamic Programming\n        \n        # 1. Brute Force\n        # O(n^2) time | O(n) space\n        # if n == 1:\n        #     return 1\n        # if n == 2:\n        #     return 2\n        # return self.climbStairs(n-1) + self.climbStairs(n-2)\n        \n        # 2. DP\n        # O(n) time | O(n) space\n        # dp = [0] * (n+1)\n        # dp[0] = 1\n        # dp[1] = 1\n        # for i in range(2, n+1):\n        #     dp[i] = dp[i-1] + dp[i-2]\n        # return dp[n]\n        \n        # 3. Recursion\n        # O(2^n) time | O(n) space\n        # if n == 1:\n        #     return 1\n        # if n == 2:\n        #     return 2\n        # return self.climbStairs(n-1) + self.climbStairs(n-2)\n        \n        # 4. Math\n        # O(1) time | O(1) space\n        # return int(math.pow(2, n))\n        \n        # 5. Dynamic Programming\n        # O(n) time | O(n) space\n        # dp = [0] * (n+1)\n        # dp[0] = 1\n        # dp[1] = 1\n        # for i in range(2, n+1):\n        #     dp[i] = dp[i-1] + dp[i-2]\n        # return dp[n]\n        \n        # 6. Recursion\n        # O(n) time | O(n) space\n        # if n == 1:\n        #     return 1\n        # if n == 2:\n        #     return 2\n        # return self.climbStairs(n-1) + self.climbStairs(n-2)\n        \n        # 7. Dynamic Programming\n        # O(n) time | O(n) space\n        # dp = [0] * (n+1)\n        # dp[0] = 1\n        # dp[1] = 1\n        # for i in range(2, n+1):\n        #     dp[i] = dp[i-1] + dp[i-2]\n        # return dp[n]\n        \n        # 8. Recursion\n        # O(n) time | O(n) space\n        # if n == 1:\n        #     return 1\n        # if n == 2:\n        #     return 2\n        # return self.climbStairs(n-1) + self.climbStairs(n-2)\n        \n        # 9. Dynamic Programming\n        # O(n) time | O(n) space\n        # dp = [0] * (n+1)\n        # dp[0] = 1\n        # dp[1] = 1\n        # for i in range(2, n+1):\n        #     dp[i] = dp[i-1] + dp[i-2]\n        # return dp[n]\n        \n        # 10. Recursion\n        # O(n) time | O(n) space\n        # if n == 1:\n        #     return 1\n        # if n == 2:\n        #     return 2\n        # return self.climbStairs(n-1) + self.climbStairs(n-2)\n        \n        # 11. Dynamic Programming\n        # O(n) time | O(n) space\n        # dp = [0] * (n+1)\n        # dp[0] = 1\n        # dp[1] = 1\n        # for i in range(2, n+1):\n        #     d"}], "word-break": [{"task_id": "word-break", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words\n        # dp[i] = dp[j] and s[j:i] in wordDict for all j < i\n        # dp[i] = False otherwise\n        # base case: dp[0] = True\n        \n        # dp[i] = dp[j] and s[j:i] in wordDict for all j < i\n        # dp[i] = False otherwise\n        # base case: dp[0] = True\n        \n        dp = [False] * (len(s) + 1)\n        dp[0] = True\n        \n        for i in range(1, len(s) + 1):\n            for j in range(i):\n                if dp[j] and s[j:i] in wordDict:\n                    dp[i] = True\n                    break\n            if dp[i] == False:\n                break\n        \n        return dp[len(s)]"}, {"task_id": "word-break", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words\n        dp = [False] * (len(s) + 1)\n        dp[0] = True\n        \n        for i in range(1, len(s) + 1):\n            for j in range(i):\n                if dp[j] and s[j:i] in wordDict:\n                    dp[i] = True\n                    break\n        \n        return dp[-1]"}, {"task_id": "word-break", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words\n        dp = [False] * (len(s) + 1)\n        dp[0] = True\n        \n        for i in range(1, len(s) + 1):\n            for j in range(i):\n                if dp[j] and s[j:i] in wordDict:\n                    dp[i] = True\n                    break\n        \n        return dp[-1]"}, {"task_id": "word-break", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words\n        dp = [False] * (len(s) + 1)\n        dp[0] = True\n        \n        for i in range(1, len(s) + 1):\n            for j in range(i):\n                if dp[j] and s[j:i] in wordDict:\n                    dp[i] = True\n                    break\n        \n        return dp[-1]"}, {"task_id": "word-break", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        \n        # DP solution\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words\n        # dp[i] = dp[j] and s[j:i] in wordDict for all j < i\n        # dp[0] = True\n        # dp[i] = False if dp[i] is not set\n        \n        # Time complexity: O(n^2)\n        # Space complexity: O(n)\n        \n        # dp = [False] * (len(s) + 1)\n        # dp[0] = True\n        # for i in range(1, len(s) + 1):\n        #     for j in range(i):\n        #         if dp[j] and s[j:i] in wordDict:\n        #             dp[i] = True\n        #             break\n        # return dp[-1]\n        \n        # DP solution\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words\n        # dp[i] = dp[j] and s[j:i] in wordDict for all j < i\n        # dp[0] = True\n        # dp[i] = False if dp[i] is not set\n        \n        # Time complexity: O(n^2)\n        # Space complexity: O(n)\n        \n        dp = [False] * (len(s) + 1)\n        dp[0] = True\n        for i in range(1, len(s) + 1):\n            for j in range(i):\n                if dp[j] and s[j:i] in wordDict:\n                    dp[i] = True\n                    break\n        return dp[-1]\n        \n        # DP solution\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words\n        # dp[i] = dp[j] and s[j:i] in wordDict for all j < i\n        # dp[0] = True\n        # dp[i] = False if dp[i] is not set\n        \n        # Time complexity: O(n^2)\n        # Space complexity: O(n)\n        \n        # dp = [False] * (len(s) + 1)\n        # dp[0] = True\n        # for i in range(1, len(s) + 1):\n        #     for j in range(i):\n        #         if dp[j] and s[j:i] in wordDict:\n        #             dp[i] = True\n        #             break\n        # return dp[-1]\n        \n        # DP solution\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words\n        # dp[i] = dp[j] and s[j:i] in wordDict for all j < i\n        # dp[0] = True\n        # dp[i] = False if dp[i] is not set\n        \n        # Time complexity: O(n^2)\n        # Space complexity: O(n)\n        \n        # dp = [False] * (len(s) + 1)\n        # dp[0] = True\n        # for i in range(1, len(s) + 1):\n        #     for j in range(i):\n        #         if dp[j] and s[j:i] in wordDict:\n        #             dp[i] = True\n        #             break\n        # return dp[-1]\n        \n        # DP solution\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words\n        # dp[i] = dp[j] and s[j:i] in wordDict for all j < i\n        # dp[0] = True\n        # dp[i] = False if dp[i] is not set\n        \n        # Time complexity: O(n^2)\n        # Space complexity: O(n)"}], "validate-binary-search-tree": [{"task_id": "validate-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def isValidBSTHelper(node, min_val, max_val):\n            if not node:\n                return True\n            if node.val <= min_val or node.val >= max_val:\n                return False\n            return isValidBSTHelper(node.left, min_val, node.val) and isValidBSTHelper(node.right, node.val, max_val)\n        \n        return isValidBSTHelper(root, float('-inf'), float('inf'))"}, {"task_id": "validate-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def isValidBSTHelper(root, min_val, max_val):\n            if not root:\n                return True\n            if root.val <= min_val or root.val >= max_val:\n                return False\n            return isValidBSTHelper(root.left, min_val, root.val) and isValidBSTHelper(root.right, root.val, max_val)\n        \n        return isValidBSTHelper(root, float('-inf'), float('inf'))"}, {"task_id": "validate-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def isValidBSTHelper(node, min_val, max_val):\n            if not node:\n                return True\n            if node.val <= min_val or node.val >= max_val:\n                return False\n            return isValidBSTHelper(node.left, min_val, node.val) and isValidBSTHelper(node.right, node.val, max_val)\n        \n        return isValidBSTHelper(root, float('-inf'), float('inf'))"}, {"task_id": "validate-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def isValidBSTHelper(node, min_val, max_val):\n            if not node:\n                return True\n            if node.val <= min_val or node.val >= max_val:\n                return False\n            return isValidBSTHelper(node.left, min_val, node.val) and isValidBSTHelper(node.right, node.val, max_val)\n        \n        return isValidBSTHelper(root, float('-inf'), float('inf'))"}, {"task_id": "validate-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def isValidBSTHelper(node, min_val, max_val):\n            if not node:\n                return True\n            if node.val <= min_val or node.val >= max_val:\n                return False\n            return isValidBSTHelper(node.left, min_val, node.val) and isValidBSTHelper(node.right, node.val, max_val)\n        \n        return isValidBSTHelper(root, float('-inf'), float('inf'))"}], "insert-interval": [{"task_id": "insert-interval", "completion": "class Solution(object):\n    def insert(self, intervals, newInterval):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type newInterval: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u63d2\u5165\u4f4d\u7f6e\n        # 2. \u63d2\u5165\n        # 3. \u6392\u5e8f\n        # 4. \u5408\u5e76\n        # 5. \u8fd4\u56de\n        \n        # 1. \u627e\u5230\u63d2\u5165\u4f4d\u7f6e\n        # \u627e\u5230\u63d2\u5165\u4f4d\u7f6e\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u76f4\u63a5\u63d2\u5165\uff0c\u56e0\u4e3a\u5df2\u7ecf\u6392\u597d\u5e8f\u4e86\n        # \u5982\u679c\u63d2\u5165\u4f4d\u7f6e\u5728\u6700\u540e\uff0c\u76f4\u63a5\u63d2\u5165\n        # \u5982\u679c\u63d2\u5165\u4f4d\u7f6e\u5728\u4e2d\u95f4\uff0c\u627e\u5230\u63d2\u5165\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5143\u7d20\uff0c\u5982\u679c\u524d\u4e00\u4e2a\u5143\u7d20\u7684end\u5c0f\u4e8e\u7b49\u4e8e\u63d2\u5165\u4f4d\u7f6e\u7684start\uff0c\u76f4\u63a5\u63d2\u5165\n        # \u5982\u679c\u63d2\u5165\u4f4d\u7f6e\u7684start\u5927\u4e8e\u7b49\u4e8e\u524d\u4e00\u4e2a\u5143\u7d20\u7684end\uff0c\u63d2\u5165\u4f4d\u7f6e\u7684start\u548cend\u5206\u522b\u7b49\u4e8e\u524d\u4e00\u4e2a\u5143\u7d20\u7684end\u548c\u63d2\u5165\u4f4d\u7f6e\u7684start\n        # \u5982\u679c\u63d2\u5165\u4f4d\u7f6e\u7684start\u5c0f\u4e8e\u524d\u4e00\u4e2a\u5143\u7d20\u7684end\uff0c\u63d2\u5165\u4f4d\u7f6e\u7684start\u7b49\u4e8e\u524d\u4e00\u4e2a\u5143\u7d20\u7684end\uff0cend\u7b49\u4e8e\u63d2\u5165\u4f4d\u7f6e\u7684end\n        # \u5982\u679c\u63d2\u5165\u4f4d\u7f6e\u7684start\u5927\u4e8e\u524d\u4e00\u4e2a\u5143\u7d20\u7684end\uff0c\u63d2\u5165\u4f4d\u7f6e\u7684start\u7b49\u4e8e\u524d\u4e00\u4e2a\u5143\u7d20\u7684end\uff0cend\u7b49\u4e8e\u63d2\u5165\u4f4d\u7f6e\u7684start\n        # \u5982\u679c\u63d2\u5165\u4f4d\u7f6e\u7684start\u5c0f\u4e8e\u524d\u4e00\u4e2a\u5143\u7d20\u7684end\uff0c\u63d2\u5165\u4f4d\u7f6e\u7684start\u7b49\u4e8e\u524d\u4e00\u4e2a\u5143\u7d20\u7684end\uff0cend\u7b49\u4e8e\u63d2\u5165\u4f4d\u7f6e\u7684start\n        # \u5982\u679c\u63d2\u5165\u4f4d\u7f6e\u7684start\u5927\u4e8e\u524d\u4e00\u4e2a\u5143\u7d20\u7684end\uff0c\u63d2\u5165\u4f4d\u7f6e\u7684start\u7b49\u4e8e\u524d\u4e00\u4e2a\u5143\u7d20\u7684end\uff0cend\u7b49\u4e8e\u63d2\u5165\u4f4d\u7f6e\u7684start\n        # \u5982\u679c\u63d2\u5165\u4f4d\u7f6e\u7684start\u5c0f\u4e8e\u524d\u4e00\u4e2a\u5143\u7d20\u7684end\uff0c\u63d2\u5165\u4f4d\u7f6e\u7684start\u7b49\u4e8e\u524d\u4e00\u4e2a\u5143\u7d20\u7684end\uff0cend\u7b49\u4e8e\u63d2\u5165\u4f4d\u7f6e\u7684start\n        # \u5982\u679c\u63d2\u5165\u4f4d\u7f6e\u7684start\u5927\u4e8e\u524d\u4e00\u4e2a\u5143\u7d20\u7684end\uff0c\u63d2\u5165\u4f4d\u7f6e\u7684start\u7b49\u4e8e\u524d\u4e00\u4e2a\u5143\u7d20\u7684end\uff0cend\u7b49\u4e8e\u63d2\u5165\u4f4d\u7f6e\u7684start\n        # \u5982\u679c\u63d2\u5165\u4f4d\u7f6e\u7684start\u5c0f\u4e8e\u524d\u4e00\u4e2a\u5143\u7d20\u7684end\uff0c\u63d2\u5165\u4f4d\u7f6e\u7684start\u7b49\u4e8e\u524d\u4e00\u4e2a\u5143\u7d20\u7684end\uff0cend\u7b49\u4e8e\u63d2\u5165\u4f4d\u7f6e\u7684start\n        # \u5982\u679c\u63d2\u5165\u4f4d\u7f6e\u7684start\u5927\u4e8e\u524d\u4e00\u4e2a\u5143\u7d20\u7684end\uff0c\u63d2\u5165\u4f4d\u7f6e\u7684start\u7b49\u4e8e\u524d\u4e00\u4e2a\u5143\u7d20\u7684end\uff0cend\u7b49\u4e8e\u63d2\u5165\u4f4d\u7f6e\u7684start\n        # \u5982\u679c\u63d2\u5165\u4f4d\u7f6e\u7684start\u5c0f\u4e8e\u524d\u4e00\u4e2a\u5143\u7d20\u7684end\uff0c\u63d2\u5165\u4f4d\u7f6e\u7684start\u7b49\u4e8e\u524d\u4e00\u4e2a\u5143\u7d20\u7684end\uff0cend\u7b49\u4e8e\u63d2\u5165\u4f4d\u7f6e\u7684start\n        # \u5982\u679c\u63d2\u5165\u4f4d\u7f6e\u7684start\u5927\u4e8e\u524d\u4e00\u4e2a\u5143\u7d20\u7684end\uff0c\u63d2\u5165\u4f4d\u7f6e\u7684start\u7b49\u4e8e\u524d\u4e00\u4e2a\u5143\u7d20\u7684end\uff0cend\u7b49\u4e8e\u63d2\u5165\u4f4d\u7f6e\u7684start\n        # \u5982\u679c\u63d2\u5165\u4f4d\u7f6e\u7684start\u5c0f\u4e8e\u524d\u4e00\u4e2a\u5143\u7d20\u7684end\uff0c\u63d2\u5165\u4f4d\u7f6e\u7684start\u7b49\u4e8e\u524d\u4e00\u4e2a\u5143\u7d20\u7684end\uff0cend\u7b49\u4e8e\u63d2\u5165\u4f4d\u7f6e\u7684start\n        # \u5982\u679c\u63d2\u5165\u4f4d\u7f6e\u7684start\u5927\u4e8e\u524d\u4e00\u4e2a\u5143\u7d20\u7684end\uff0c\u63d2\u5165\u4f4d\u7f6e\u7684start\u7b49\u4e8e\u524d\u4e00\u4e2a\u5143\u7d20\u7684end\uff0cend\u7b49\u4e8e\u63d2\u5165\u4f4d\u7f6e\u7684start\n        # \u5982\u679c\u63d2\u5165\u4f4d\u7f6e\u7684start\u5c0f\u4e8e\u524d\u4e00\u4e2a\u5143\u7d20\u7684end\uff0c\u63d2\u5165\u4f4d\u7f6e\u7684start\u7b49\u4e8e\u524d\u4e00\u4e2a\u5143\u7d20\u7684end\uff0cend\u7b49\u4e8e\u63d2\u5165\u4f4d\u7f6e\u7684start\n        # \u5982\u679c\u63d2\u5165\u4f4d\u7f6e\u7684start\u5927\u4e8e\u524d\u4e00\u4e2a\u5143\u7d20\u7684end\uff0c\u63d2\u5165\u4f4d\u7f6e\u7684start\u7b49\u4e8e\u524d\u4e00\u4e2a\u5143\u7d20\u7684end\uff0cend\u7b49\u4e8e\u63d2\u5165\u4f4d\u7f6e\u7684start\n        # \u5982\u679c\u63d2\u5165\u4f4d\u7f6e\u7684start\u5c0f\u4e8e\u524d\u4e00\u4e2a\u5143\u7d20\u7684end\uff0c\u63d2\u5165\u4f4d"}, {"task_id": "insert-interval", "completion": "class Solution(object):\n    def insert(self, intervals, newInterval):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type newInterval: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u63d2\u5165\u4f4d\u7f6e\n        # 2. \u63d2\u5165\n        # 3. \u6392\u5e8f\n        # 4. \u5408\u5e76\n        # 5. \u8fd4\u56de\n        \n        # 1. \u627e\u5230\u63d2\u5165\u4f4d\u7f6e\n        # \u627e\u5230\u63d2\u5165\u4f4d\u7f6e\u7684\u65f6\u5019\uff0c\u9700\u8981\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8enewInterval[0]\u7684\u5143\u7d20\n        # \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u90a3\u4e48\u5c31\u662f\u6700\u540e\u4e00\u4e2a\u5143\u7d20\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8enewInterval[1]\u7684\u5143\u7d20\n        # \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u90a3\u4e48\u5c31\u662f\u6700\u540e\u4e00\u4e2a\u5143\u7d20\n        # \u627e\u5230\u63d2\u5165\u4f4d\u7f6e\u7684\u65f6\u5019\uff0c\u9700\u8981\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8enewInterval[0]\u7684\u5143\u7d20\n        # \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u90a3\u4e48\u5c31\u662f\u6700\u540e\u4e00\u4e2a\u5143\u7d20\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8enewInterval[1]\u7684\u5143\u7d20\n        # \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u90a3\u4e48\u5c31\u662f\u6700\u540e\u4e00\u4e2a\u5143\u7d20\n        # \u627e\u5230\u63d2\u5165\u4f4d\u7f6e\u7684\u65f6\u5019\uff0c\u9700\u8981\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8enewInterval[0]\u7684\u5143\u7d20\n        # \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u90a3\u4e48\u5c31\u662f\u6700\u540e\u4e00\u4e2a\u5143\u7d20\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8enewInterval[1]\u7684\u5143\u7d20\n        # \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u90a3\u4e48\u5c31\u662f\u6700\u540e\u4e00\u4e2a\u5143\u7d20\n        # \u627e\u5230\u63d2\u5165\u4f4d\u7f6e\u7684\u65f6\u5019\uff0c\u9700\u8981\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8enewInterval[0]\u7684\u5143\u7d20\n        # \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u90a3\u4e48\u5c31\u662f\u6700\u540e\u4e00\u4e2a\u5143\u7d20\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8enewInterval[1]\u7684\u5143\u7d20\n        # \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u90a3\u4e48\u5c31\u662f\u6700\u540e\u4e00\u4e2a\u5143\u7d20\n        # \u627e\u5230\u63d2\u5165\u4f4d\u7f6e\u7684\u65f6\u5019\uff0c\u9700\u8981\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8enewInterval[0]\u7684\u5143\u7d20\n        # \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u90a3\u4e48\u5c31\u662f\u6700\u540e\u4e00\u4e2a\u5143\u7d20\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8enewInterval[1]\u7684\u5143\u7d20\n        # \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u90a3\u4e48\u5c31\u662f\u6700\u540e\u4e00\u4e2a\u5143\u7d20\n        # \u627e\u5230\u63d2\u5165\u4f4d\u7f6e\u7684\u65f6\u5019\uff0c\u9700\u8981\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8enewInterval[0]\u7684\u5143\u7d20\n        # \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u90a3\u4e48\u5c31\u662f\u6700\u540e\u4e00\u4e2a\u5143\u7d20\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8enewInterval[1]\u7684\u5143\u7d20\n        # \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u90a3\u4e48\u5c31\u662f\u6700\u540e\u4e00\u4e2a\u5143\u7d20\n        # \u627e\u5230\u63d2\u5165\u4f4d\u7f6e\u7684\u65f6\u5019\uff0c\u9700\u8981\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8enewInterval[0]\u7684\u5143\u7d20\n        # \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u90a3\u4e48\u5c31\u662f\u6700\u540e\u4e00\u4e2a\u5143\u7d20\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8enewInterval[1]\u7684\u5143\u7d20\n        # \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u90a3\u4e48\u5c31\u662f\u6700\u540e\u4e00\u4e2a\u5143\u7d20\n        # \u627e\u5230\u63d2\u5165\u4f4d\u7f6e\u7684\u65f6\u5019\uff0c\u9700\u8981\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8enewInterval[0]\u7684\u5143\u7d20\n        # \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u90a3\u4e48\u5c31\u662f\u6700\u540e\u4e00\u4e2a\u5143\u7d20\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8enewInterval[1]\u7684\u5143\u7d20\n        # \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u90a3\u4e48\u5c31\u662f\u6700\u540e\u4e00\u4e2a\u5143\u7d20\n        # \u627e\u5230\u63d2\u5165\u4f4d"}, {"task_id": "insert-interval", "completion": "class Solution(object):\n    def insert(self, intervals, newInterval):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type newInterval: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u63d2\u5165\u4f4d\u7f6e\n        # 2. \u63d2\u5165\n        # 3. \u6392\u5e8f\n        # 4. \u5408\u5e76\n        # 5. \u8fd4\u56de\n        \n        # 1. \u627e\u5230\u63d2\u5165\u4f4d\u7f6e\n        # \u627e\u5230\u63d2\u5165\u4f4d\u7f6e\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u76f4\u63a5\u63d2\u5165\uff0c\u56e0\u4e3a\u5df2\u7ecf\u6392\u597d\u5e8f\u4e86\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u627e\u5230\u7b2c\u4e00\u4e2a\u6bd4newInterval[0]\u5927\u7684\uff0c\u7136\u540e\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\u4e4b\u524d\n        # \u5982\u679c\u6ca1\u6709\u6bd4newInterval[0]\u5927\u7684\uff0c\u90a3\u4e48\u5c31\u63d2\u5165\u5230\u6700\u540e\n        # \u5982\u679c\u6709\u6bd4newInterval[0]\u5927\u7684\uff0c\u90a3\u4e48\u5c31\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\u4e4b\u524d\n        # \u5982\u679c\u6709\u591a\u4e2a\u6bd4newInterval[0]\u5927\u7684\uff0c\u90a3\u4e48\u5c31\u63d2\u5165\u5230\u6700\u540e\u4e00\u4e2a\u6bd4newInterval[0]\u5927\u7684\u4f4d\u7f6e\u4e4b\u524d\n        # \u5982\u679c\u6709\u591a\u4e2a\u6bd4newInterval[0]\u5927\u7684\uff0c\u4e14\u6700\u540e\u4e00\u4e2a\u6bd4newInterval[0]\u5927\u7684\u4f4d\u7f6e\u4e4b\u524d\u7684\u6240\u6709\u5143\u7d20\u90fd\u6bd4newInterval[0]\u5c0f\uff0c\u90a3\u4e48\u5c31\u63d2\u5165\u5230\u6700\u540e\u4e00\u4e2a\u6bd4newInterval[0]\u5927\u7684\u4f4d\u7f6e\u4e4b\u524d\n        # \u5982\u679c\u6709\u591a\u4e2a\u6bd4newInterval[0]\u5927\u7684\uff0c\u4e14\u6700\u540e\u4e00\u4e2a\u6bd4newInterval[0]\u5927\u7684\u4f4d\u7f6e\u4e4b\u524d\u7684\u6240\u6709\u5143\u7d20\u90fd\u6bd4newInterval[0]\u5927\uff0c\u90a3\u4e48\u5c31\u63d2\u5165\u5230\u6700\u540e\u4e00\u4e2a\u6bd4newInterval[0]\u5927\u7684\u4f4d\u7f6e\u4e4b\u524d\n        # \u5982\u679c\u6709\u591a\u4e2a\u6bd4newInterval[0]\u5927\u7684\uff0c\u4e14\u6700\u540e\u4e00\u4e2a\u6bd4newInterval[0]\u5927\u7684\u4f4d\u7f6e\u4e4b\u524d\u7684\u6240\u6709\u5143\u7d20\u90fd\u6bd4newInterval[0]\u5927\uff0c\u4e14\u6700\u540e\u4e00\u4e2a\u6bd4newInterval[0]\u5927\u7684\u4f4d\u7f6e\u4e4b\u524d\u7684\u6240\u6709\u5143\u7d20\u90fd\u6bd4newInterval[1]\u5c0f\uff0c\u90a3\u4e48\u5c31\u63d2\u5165\u5230\u6700\u540e\u4e00\u4e2a\u6bd4newInterval[0]\u5927\u7684\u4f4d\u7f6e\u4e4b\u524d\n        # \u5982\u679c\u6709\u591a\u4e2a\u6bd4newInterval[0]\u5927\u7684\uff0c\u4e14\u6700\u540e\u4e00\u4e2a\u6bd4newInterval[0]\u5927\u7684\u4f4d\u7f6e\u4e4b\u524d\u7684\u6240\u6709\u5143\u7d20\u90fd\u6bd4newInterval[0]\u5927\uff0c\u4e14\u6700\u540e\u4e00\u4e2a\u6bd4newInterval[0]\u5927\u7684\u4f4d\u7f6e\u4e4b\u524d\u7684\u6240\u6709\u5143\u7d20\u90fd\u6bd4newInterval[1]\u5927\uff0c\u90a3\u4e48\u5c31\u63d2\u5165\u5230\u6700\u540e\u4e00\u4e2a\u6bd4newInterval[0]\u5927\u7684\u4f4d\u7f6e\u4e4b\u524d\n        # \u5982\u679c\u6709\u591a\u4e2a\u6bd4newInterval[0]\u5927\u7684\uff0c\u4e14\u6700\u540e\u4e00\u4e2a\u6bd4newInterval[0]\u5927\u7684\u4f4d\u7f6e\u4e4b\u524d\u7684\u6240\u6709\u5143\u7d20\u90fd\u6bd4newInterval[0]\u5927\uff0c\u4e14\u6700\u540e\u4e00\u4e2a\u6bd4newInterval[0]\u5927\u7684\u4f4d\u7f6e\u4e4b\u524d\u7684\u6240\u6709\u5143\u7d20\u90fd\u6bd4newInterval[1]\u5927\uff0c\u4e14\u6700\u540e\u4e00\u4e2a\u6bd4newInterval[0]\u5927\u7684\u4f4d\u7f6e\u4e4b\u524d\u7684\u6240\u6709\u5143\u7d20\u90fd\u6bd4newInterval[1]\u5c0f\uff0c\u90a3\u4e48\u5c31\u63d2\u5165\u5230\u6700\u540e\u4e00\u4e2a\u6bd4newInterval[0]\u5927\u7684\u4f4d\u7f6e\u4e4b\u524d\n        # \u5982\u679c\u6709\u591a\u4e2a\u6bd4newInterval[0]\u5927\u7684\uff0c\u4e14\u6700\u540e\u4e00\u4e2a\u6bd4newInterval[0]\u5927\u7684\u4f4d\u7f6e\u4e4b\u524d\u7684\u6240\u6709\u5143\u7d20\u90fd\u6bd4newInterval[0]\u5927\uff0c\u4e14\u6700\u540e\u4e00\u4e2a\u6bd4newInterval[0]\u5927\u7684\u4f4d\u7f6e\u4e4b\u524d\u7684\u6240\u6709\u5143\u7d20\u90fd\u6bd4newInterval[1]\u5927\uff0c\u4e14\u6700\u540e\u4e00\u4e2a\u6bd4newInterval[0]\u5927\u7684\u4f4d\u7f6e\u4e4b\u524d\u7684\u6240\u6709\u5143\u7d20\u90fd\u6bd4newInterval[1]\u5927\uff0c\u90a3\u4e48\u5c31\u63d2\u5165\u5230\u6700\u540e\u4e00\u4e2a\u6bd4newInterval[0]\u5927\u7684\u4f4d\u7f6e\u4e4b\u524d\n        # \u5982\u679c\u6709\u591a\u4e2a\u6bd4newInterval[0]\u5927\u7684\uff0c\u4e14\u6700\u540e\u4e00\u4e2a\u6bd4newInterval[0]\u5927\u7684\u4f4d\u7f6e\u4e4b\u524d\u7684\u6240\u6709\u5143\u7d20\u90fd\u6bd4newInterval[0]\u5927\uff0c\u4e14\u6700\u540e\u4e00\u4e2a\u6bd4newInterval[0]\u5927\u7684\u4f4d\u7f6e\u4e4b\u524d\u7684\u6240\u6709\u5143\u7d20\u90fd\u6bd4newInterval[1]\u5927\uff0c\u4e14\u6700\u540e\u4e00\u4e2a\u6bd4newInterval[0]\u5927\u7684\u4f4d\u7f6e\u4e4b\u524d\u7684\u6240\u6709\u5143\u7d20\u90fd\u6bd4newInterval[1]\u5927\uff0c\u4e14\u6700\u540e\u4e00\u4e2a\u6bd4newInterval[0]"}, {"task_id": "insert-interval", "completion": "class Solution(object):\n    def insert(self, intervals, newInterval):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type newInterval: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u65b0\u533a\u95f4\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        # 2. \u627e\u5230\u65b0\u533a\u95f4\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        # 3. \u627e\u5230\u65b0\u533a\u95f4\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        # 4. \u627e\u5230\u65b0\u533a\u95f4\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        # 5. \u627e\u5230\u65b0\u533a\u95f4\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        # 6. \u627e\u5230\u65b0\u533a\u95f4\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        # 7. \u627e\u5230\u65b0\u533a\u95f4\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        # 8. \u627e\u5230\u65b0\u533a\u95f4\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        # 9. \u627e\u5230\u65b0\u533a\u95f4\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        # 10. \u627e\u5230\u65b0\u533a\u95f4\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        # 11. \u627e\u5230\u65b0\u533a\u95f4\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        # 12. \u627e\u5230\u65b0\u533a\u95f4\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        # 13. \u627e\u5230\u65b0\u533a\u95f4\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        # 14. \u627e\u5230\u65b0\u533a\u95f4\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        # 15. \u627e\u5230\u65b0\u533a\u95f4\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        # 16. \u627e\u5230\u65b0\u533a\u95f4\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        # 17. \u627e\u5230\u65b0\u533a\u95f4\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        # 18. \u627e\u5230\u65b0\u533a\u95f4\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        # 19. \u627e\u5230\u65b0\u533a\u95f4\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        # 20. \u627e\u5230\u65b0\u533a\u95f4\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        # 21. \u627e\u5230\u65b0\u533a\u95f4\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        # 22. \u627e\u5230\u65b0\u533a\u95f4\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        # 23. \u627e\u5230\u65b0\u533a\u95f4\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        # 24. \u627e\u5230\u65b0\u533a\u95f4\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        # 25. \u627e\u5230\u65b0\u533a\u95f4\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        # 26. \u627e\u5230\u65b0\u533a\u95f4\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        # 27. \u627e\u5230\u65b0\u533a\u95f4\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        # 28. \u627e\u5230\u65b0\u533a\u95f4\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        # 29. \u627e\u5230\u65b0\u533a\u95f4\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        # 30. \u627e\u5230\u65b0\u533a\u95f4\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        # 31. \u627e\u5230\u65b0\u533a\u95f4\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        # 32. \u627e\u5230\u65b0\u533a\u95f4\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        # 33. \u627e\u5230\u65b0\u533a\u95f4\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        # 34. \u627e\u5230\u65b0\u533a\u95f4\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        # 35. \u627e\u5230\u65b0\u533a\u95f4\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        # 36. \u627e\u5230\u65b0\u533a\u95f4\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        # 37. \u627e\u5230\u65b0\u533a\u95f4\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        # 38. \u627e\u5230\u65b0\u533a\u95f4\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        # 39. \u627e\u5230\u65b0\u533a\u95f4\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        # 40. \u627e\u5230\u65b0\u533a\u95f4\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        # 41. \u627e\u5230\u65b0\u533a\u95f4\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        # 42. \u627e\u5230\u65b0\u533a\u95f4\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        # 43. \u627e\u5230\u65b0\u533a\u95f4\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e"}, {"task_id": "insert-interval", "completion": "class Solution(object):\n    def insert(self, intervals, newInterval):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type newInterval: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u65b0\u533a\u95f4\u7684\u4f4d\u7f6e\n        # 2. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u8fb9\u754c\n        # 3. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u8fb9\u754c\n        # 4. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u8fb9\u754c\n        # 5. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u8fb9\u754c\n        # 6. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u8fb9\u754c\n        # 7. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u8fb9\u754c\n        # 8. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u8fb9\u754c\n        # 9. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u8fb9\u754c\n        # 10. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u8fb9\u754c\n        # 11. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u8fb9\u754c\n        # 12. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u8fb9\u754c\n        # 13. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u8fb9\u754c\n        # 14. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u8fb9\u754c\n        # 15. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u8fb9\u754c\n        # 16. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u8fb9\u754c\n        # 17. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u8fb9\u754c\n        # 18. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u8fb9\u754c\n        # 19. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u8fb9\u754c\n        # 20. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u8fb9\u754c\n        # 21. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u8fb9\u754c\n        # 22. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u8fb9\u754c\n        # 23. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u8fb9\u754c\n        # 24. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u8fb9\u754c\n        # 25. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u8fb9\u754c\n        # 26. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u8fb9\u754c\n        # 27. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u8fb9\u754c\n        # 28. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u8fb9\u754c\n        # 29. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u8fb9\u754c\n        # 30. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u8fb9\u754c\n        # 31. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u8fb9\u754c\n        # 32. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u8fb9\u754c\n        # 33. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u8fb9\u754c\n        # 34. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u8fb9\u754c\n        # 35. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u8fb9\u754c\n        # 36. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u8fb9\u754c\n        # 37. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u8fb9\u754c\n        # 38. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u8fb9\u754c\n        # 39. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u8fb9\u754c\n        # 40. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u8fb9\u754c\n        # 41. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u8fb9\u754c\n        # 42. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u8fb9\u754c\n        # 43. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u8fb9\u754c\n        # 44. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u8fb9\u754c\n        # 45. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u8fb9\u754c\n        # 46. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u8fb9\u754c\n        # 47. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u8fb9\u754c\n        # 48. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u8fb9\u754c\n        # 49. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u8fb9\u754c\n        # 50. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u8fb9\u754c\n        # 51. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u8fb9\u754c\n        # 52. \u627e\u5230\u65b0\u533a\u95f4\u7684"}], "palindrome-partitioning": [{"task_id": "palindrome-partitioning", "completion": "class Solution(object):\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def isPalindrome(s, start, end):\n            while start < end:\n                if s[start] != s[end]:\n                    return False\n                start += 1\n                end -= 1\n            return True\n        \n        def backtrack(s, start, res):\n            if start == len(s):\n                res.append(s[:])\n                return\n            for i in range(start, len(s)):\n                if isPalindrome(s, start, i):\n                    s[start], s[i] = s[i], s[start]\n                    backtrack(s, start + 1, res)\n                    s[start], s[i] = s[i], s[start]\n        \n        res = []\n        backtrack(list(s), 0, res)\n        return res"}, {"task_id": "palindrome-partitioning", "completion": "class Solution(object):\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def isPalindrome(s, start, end):\n            while start < end:\n                if s[start] != s[end]:\n                    return False\n                start += 1\n                end -= 1\n            return True\n        \n        def backtrack(s, start, res):\n            if start == len(s):\n                res.append(s[:])\n                return\n            for i in range(start, len(s)):\n                if isPalindrome(s, start, i):\n                    s[start], s[i] = s[i], s[start]\n                    backtrack(s, start + 1, res)\n                    s[start], s[i] = s[i], s[start]\n        \n        res = []\n        backtrack(list(s), 0, res)\n        return res"}, {"task_id": "palindrome-partitioning", "completion": "class Solution(object):\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def isPalindrome(s, start, end):\n            while start < end:\n                if s[start] != s[end]:\n                    return False\n                start += 1\n                end -= 1\n            return True\n        \n        def backtrack(s, start, res):\n            if start == len(s):\n                res.append(s[:])\n                return\n            \n            for i in range(start, len(s)):\n                if isPalindrome(s, start, i):\n                    s[start], s[i] = s[i], s[start]\n                    backtrack(s, start + 1, res)\n                    s[start], s[i] = s[i], s[start]\n        \n        res = []\n        backtrack(list(s), 0, res)\n        return res"}, {"task_id": "palindrome-partitioning", "completion": "class Solution(object):\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def isPalindrome(s, start, end):\n            while start < end:\n                if s[start] != s[end]:\n                    return False\n                start += 1\n                end -= 1\n            return True\n        \n        def backtrack(s, start, res):\n            if start == len(s):\n                res.append(s[:])\n                return\n            \n            for i in range(start, len(s)):\n                if isPalindrome(s, start, i):\n                    s[start], s[i] = s[i], s[start]\n                    backtrack(s, start + 1, res)\n                    s[start], s[i] = s[i], s[start]\n        \n        res = []\n        backtrack(list(s), 0, res)\n        return res"}, {"task_id": "palindrome-partitioning", "completion": "class Solution(object):\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def isPalindrome(s, start, end):\n            while start < end:\n                if s[start] != s[end]:\n                    return False\n                start += 1\n                end -= 1\n            return True\n        \n        def backtrack(s, start, res):\n            if start == len(s):\n                res.append(s[:])\n                return\n            \n            for i in range(start, len(s)):\n                if isPalindrome(s, start, i):\n                    s[start], s[i] = s[i], s[start]\n                    backtrack(s, start + 1, res)\n                    s[start], s[i] = s[i], s[start]\n        \n        res = []\n        backtrack(list(s), 0, res)\n        return res"}], "smallest-range-covering-elements-from-k-lists": [{"task_id": "smallest-range-covering-elements-from-k-lists", "completion": "class Solution(object):\n    def smallestRange(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. sort the lists\n        # 2. find the smallest range\n        # 3. return the smallest range\n        \n        # sort the lists\n        nums = sorted(nums, key=lambda x: x[0])\n        \n        # find the smallest range\n        min_range = [nums[0][0], nums[0][-1]]\n        for i in range(1, len(nums)):\n            if nums[i][0] <= min_range[1]:\n                min_range[1] = max(min_range[1], nums[i][-1])\n            else:\n                min_range = [nums[i][0], nums[i][-1]]\n        \n        # return the smallest range\n        return min_range"}, {"task_id": "smallest-range-covering-elements-from-k-lists", "completion": "class Solution(object):\n    def smallestRange(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. sort the lists\n        # 2. find the smallest range\n        # 3. return the smallest range\n        \n        # sort the lists\n        nums = sorted(nums, key=lambda x: x[0])\n        \n        # find the smallest range\n        min_range = [nums[0][0], nums[0][-1]]\n        for i in range(1, len(nums)):\n            if nums[i][0] <= min_range[1]:\n                min_range[1] = max(min_range[1], nums[i][-1])\n            else:\n                min_range = [nums[i][0], nums[i][-1]]\n        \n        # return the smallest range\n        return min_range"}, {"task_id": "smallest-range-covering-elements-from-k-lists", "completion": "class Solution(object):\n    def smallestRange(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. sort the lists\n        # 2. find the smallest range\n        # 3. return the smallest range\n        \n        # sort the lists\n        nums = sorted(nums, key=lambda x: x[0])\n        \n        # find the smallest range\n        min_range = [nums[0][0], nums[0][-1]]\n        for i in range(1, len(nums)):\n            if nums[i][0] <= min_range[1]:\n                min_range[1] = max(min_range[1], nums[i][-1])\n            else:\n                min_range = [nums[i][0], nums[i][-1]]\n        \n        # return the smallest range\n        return min_range"}, {"task_id": "smallest-range-covering-elements-from-k-lists", "completion": "class Solution(object):\n    def smallestRange(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. sort the lists\n        # 2. find the smallest range\n        # 3. return the smallest range\n        \n        # sort the lists\n        nums = sorted(nums, key=lambda x: x[0])\n        \n        # find the smallest range\n        min_range = [nums[0][0], nums[0][-1]]\n        for i in range(1, len(nums)):\n            if nums[i][0] <= min_range[1]:\n                min_range[1] = max(min_range[1], nums[i][-1])\n            else:\n                min_range = [nums[i][0], nums[i][-1]]\n        \n        # return the smallest range\n        return min_range"}, {"task_id": "smallest-range-covering-elements-from-k-lists", "completion": "class Solution(object):\n    def smallestRange(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. sort the lists\n        # 2. find the smallest range\n        # 3. return the smallest range\n        \n        # sort the lists\n        nums = sorted(nums, key=lambda x: x[0])\n        \n        # find the smallest range\n        min_range = [nums[0][0], nums[0][-1]]\n        for i in range(1, len(nums)):\n            if nums[i][0] <= min_range[1]:\n                min_range[1] = max(min_range[1], nums[i][-1])\n            else:\n                min_range = [nums[i][0], nums[i][-1]]\n        \n        # return the smallest range\n        return min_range"}], "poor-pigs": [{"task_id": "poor-pigs", "completion": "class Solution(object):\n    def poorPigs(self, buckets, minutesToDie, minutesToTest):\n        \"\"\"\n        :type buckets: int\n        :type minutesToDie: int\n        :type minutesToTest: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= minutesToTest\n        # 2. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToTest >= buckets\n        # 3. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToTest >= buckets\n        # 4. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= minutesToTest\n        # 5. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToTest >= buckets\n        # 6. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= minutesToTest\n        # 7. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToTest >= buckets\n        # 8. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= minutesToTest\n        # 9. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToTest >= buckets\n        # 10. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= minutesToTest\n        # 11. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToTest >= buckets\n        # 12. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= minutesToTest\n        # 13. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToTest >= buckets\n        # 14. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= minutesToTest\n        # 15. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToTest >= buckets\n        # 16. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= minutesToTest\n        # 17. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToTest >= buckets\n        # 18. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= minutesToTest\n        # 19. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToTest >= buckets\n        # 20. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= minutesToTest\n        # 21. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToTest >= buckets\n        # 22. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= minutesToTest\n        # 23. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToTest >= buckets\n        # 24. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= minutesToTest\n        # 25. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToTest >= buckets\n        # 26. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= minutesToTest\n        # 27. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToTest >= buckets\n        # 28. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= minutesToTest\n        # 29. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToTest >= buckets\n        # 30. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= minutesToTest\n        # 31. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToTest >= buckets\n        # 32. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutes"}, {"task_id": "poor-pigs", "completion": "class Solution(object):\n    def poorPigs(self, buckets, minutesToDie, minutesToTest):\n        \"\"\"\n        :type buckets: int\n        :type minutesToDie: int\n        :type minutesToTest: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97minutesToTest % k == 0\n        # 2. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97minutesToDie % k == 0\n        # 3. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97minutesToTest % k == 0 && minutesToDie % k == 0\n        # 4. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97minutesToTest % k == 0 && minutesToDie % k == 0 && buckets % k == 0\n        # 5. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97minutesToTest % k == 0 && minutesToDie % k == 0 && buckets % k == 0 && buckets >= k\n        # 6. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97minutesToTest % k == 0 && minutesToDie % k == 0 && buckets % k == 0 && buckets >= k && buckets % (minutesToTest // k) == 0\n        # 7. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97minutesToTest % k == 0 && minutesToDie % k == 0 && buckets % k == 0 && buckets >= k && buckets % (minutesToTest // k) == 0 && buckets % (minutesToDie // k) == 0\n        # 8. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97minutesToTest % k == 0 && minutesToDie % k == 0 && buckets % k == 0 && buckets >= k && buckets % (minutesToTest // k) == 0 && buckets % (minutesToDie // k) == 0 && buckets % (minutesToDie // k) == 0\n        # 9. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97minutesToTest % k == 0 && minutesToDie % k == 0 && buckets % k == 0 && buckets >= k && buckets % (minutesToTest // k) == 0 && buckets % (minutesToDie // k) == 0 && buckets % (minutesToDie // k) == 0 && buckets % (minutesToDie // k) == 0\n        # 10. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97minutesToTest % k == 0 && minutesToDie % k == 0 && buckets % k == 0 && buckets >= k && buckets % (minutesToTest // k) == 0 && buckets % (minutesToDie // k) == 0 && buckets % (minutesToDie // k) == 0 && buckets % (minutesToDie // k) == 0 && buckets % (minutesToDie // k) == 0\n        # 11. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97minutesToTest % k == 0 && minutesToDie % k == 0 && buckets % k == 0 && buckets >= k && buckets % (minutesToTest // k) == 0 && buckets % (minutesToDie // k) == 0 && buckets % (minutesToDie // k) == 0 && buckets % (minutesToDie // k) == 0 && buckets % (minutesToDie // k) == 0 && buckets % (minutesToDie // k) == 0\n        # 12. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97minutesToTest % k == 0 && minutesToDie % k == 0 && buckets % k == 0 && buckets >= k && buckets % (minutesToTest // k) == 0 && buckets % (minutesToDie // k) == 0 && buckets % (minutesToDie // k) == 0 && buckets % (minutesToDie // k) == 0 && buckets % (minutesToDie // k) == 0 && buckets % (minutesToDie // k) == 0 && buckets % (minutesToDie // k) == 0\n        # 13. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97minutesToTest %"}, {"task_id": "poor-pigs", "completion": "class Solution(object):\n    def poorPigs(self, buckets, minutesToDie, minutesToTest):\n        \"\"\"\n        :type buckets: int\n        :type minutesToDie: int\n        :type minutesToTest: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= minutesToTest\n        # 2. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToTest >= buckets\n        # 3. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToTest >= buckets*minutesToDie\n        # 4. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= buckets*minutesToTest\n        # 5. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToTest >= buckets*minutesToDie\n        # 6. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= buckets*minutesToTest\n        # 7. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToTest >= buckets*minutesToDie\n        # 8. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= buckets*minutesToTest\n        # 9. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToTest >= buckets*minutesToDie\n        # 10. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= buckets*minutesToTest\n        # 11. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToTest >= buckets*minutesToDie\n        # 12. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= buckets*minutesToTest\n        # 13. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToTest >= buckets*minutesToDie\n        # 14. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= buckets*minutesToTest\n        # 15. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToTest >= buckets*minutesToDie\n        # 16. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= buckets*minutesToTest\n        # 17. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToTest >= buckets*minutesToDie\n        # 18. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= buckets*minutesToTest\n        # 19. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToTest >= buckets*minutesToDie\n        # 20. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= buckets*minutesToTest\n        # 21. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToTest >= buckets*minutesToDie\n        # 22. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= buckets*minutesToTest\n        # 23. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToTest >= buckets*minutesToDie\n        # 24. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= buckets*minutesToTest\n        # 25. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToTest >= buckets*minutesToDie\n        # 26. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= buckets*minutesToTest\n        # 27. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToTest >= buckets*minutesToDie\n        # 28. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= buckets*minutesToTest\n        # 29."}, {"task_id": "poor-pigs", "completion": "class Solution(object):\n    def poorPigs(self, buckets, minutesToDie, minutesToTest):\n        \"\"\"\n        :type buckets: int\n        :type minutesToDie: int\n        :type minutesToTest: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= minutesToTest\n        # 2. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToTest >= buckets\n        # 3. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToTest >= buckets*minutesToDie\n        # 4. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= buckets*minutesToTest\n        # 5. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToTest >= buckets*minutesToDie\n        # 6. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= buckets*minutesToTest\n        # 7. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToTest >= buckets*minutesToDie\n        # 8. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= buckets*minutesToTest\n        # 9. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToTest >= buckets*minutesToDie\n        # 10. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= buckets*minutesToTest\n        # 11. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToTest >= buckets*minutesToDie\n        # 12. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= buckets*minutesToTest\n        # 13. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToTest >= buckets*minutesToDie\n        # 14. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= buckets*minutesToTest\n        # 15. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToTest >= buckets*minutesToDie\n        # 16. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= buckets*minutesToTest\n        # 17. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToTest >= buckets*minutesToDie\n        # 18. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= buckets*minutesToTest\n        # 19. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToTest >= buckets*minutesToDie\n        # 20. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= buckets*minutesToTest\n        # 21. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToTest >= buckets*minutesToDie\n        # 22. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= buckets*minutesToTest\n        # 23. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToTest >= buckets*minutesToDie\n        # 24. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= buckets*minutesToTest\n        # 25. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToTest >= buckets*minutesToDie\n        # 26. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= buckets*minutesToTest\n        # 27. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToTest >= buckets*minutesToDie\n        # 28. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= buckets*minutesToTest\n        # 29."}, {"task_id": "poor-pigs", "completion": "class Solution(object):\n    def poorPigs(self, buckets, minutesToDie, minutesToTest):\n        \"\"\"\n        :type buckets: int\n        :type minutesToDie: int\n        :type minutesToTest: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97minutesToTest/minutesToDie >= buckets/k\n        # 2. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97minutesToTest/minutesToDie >= buckets/k\n        # 3. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97minutesToTest/minutesToDie >= buckets/k\n        # 4. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97minutesToTest/minutesToDie >= buckets/k\n        # 5. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97minutesToTest/minutesToDie >= buckets/k\n        # 6. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97minutesToTest/minutesToDie >= buckets/k\n        # 7. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97minutesToTest/minutesToDie >= buckets/k\n        # 8. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97minutesToTest/minutesToDie >= buckets/k\n        # 9. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97minutesToTest/minutesToDie >= buckets/k\n        # 10. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97minutesToTest/minutesToDie >= buckets/k\n        # 11. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97minutesToTest/minutesToDie >= buckets/k\n        # 12. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97minutesToTest/minutesToDie >= buckets/k\n        # 13. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97minutesToTest/minutesToDie >= buckets/k\n        # 14. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97minutesToTest/minutesToDie >= buckets/k\n        # 15. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97minutesToTest/minutesToDie >= buckets/k\n        # 16. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97minutesToTest/minutesToDie >= buckets/k\n        # 17. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97minutesToTest/minutesToDie >= buckets/k\n        # 18. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97minutesToTest/minutesToDie >= buckets/k\n        # 19. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97minutesToTest/minutesToDie >= buckets/k\n        # 20. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97minutesToTest/minutesToDie >= buckets/k\n        # 21. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97minutesToTest/minutesToDie >= buckets/k\n        # 22. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97minutesToTest/minutesToDie >= buckets/k\n        # 23. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97minutesToTest/minutesToDie >= buckets/k\n        # 24. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97minutesToTest/minutesToDie >= buckets/k\n        # 25. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97minutesToTest/minutesToDie >= buckets/k\n        # 26. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97minutesToTest/minutesToDie >= buckets/k\n        # 27. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97minutesToTest/minutesToDie >= buckets/k\n        # 28. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97minutesToTest/minutesToDie >= buckets"}], "swim-in-rising-water": [{"task_id": "swim-in-rising-water", "completion": "class Solution(object):\n    def swimInWater(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5c0f\u7684\u503c\n        # 2. \u627e\u5230\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\n        # 3. \u627e\u5230\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\n        # 4. \u627e\u5230\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\n        # 5. \u627e\u5230\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\n        # 6. \u627e\u5230\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\n        # 7. \u627e\u5230\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\n        # 8. \u627e\u5230\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\n        # 9. \u627e\u5230\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\n        # 10. \u627e\u5230\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\n        # 11. \u627e\u5230\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\n        # 12. \u627e\u5230\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\n        # 13. \u627e\u5230\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\n        # 14. \u627e\u5230\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\n        # 15. \u627e\u5230\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\n        # 16. \u627e\u5230\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\n        # 17. \u627e\u5230\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\n        # 18. \u627e\u5230\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\n        # 19. \u627e\u5230\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e"}, {"task_id": "swim-in-rising-water", "completion": "class Solution(object):\n    def swimInWater(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5927\u7684\u503c\n        # 2. \u627e\u5230\u6700\u5c0f\u7684\u503c\n        # 3. \u627e\u5230\u6700\u5927\u7684\u503c\u548c\u6700\u5c0f\u7684\u503c\u7684\u5dee\u503c\n        # 4. \u627e\u5230\u6700\u5927\u7684\u503c\u548c\u6700\u5c0f\u7684\u503c\u7684\u5dee\u503c\u7684\u6700\u5c0f\u503c\n        # 5. \u627e\u5230\u6700\u5927\u7684\u503c\u548c\u6700\u5c0f\u7684\u503c\u7684\u5dee\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\n        # 6. \u627e\u5230\u6700\u5927\u7684\u503c\u548c\u6700\u5c0f\u7684\u503c\u7684\u5dee\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\n        # 7. \u627e\u5230\u6700\u5927\u7684\u503c\u548c\u6700\u5c0f\u7684\u503c\u7684\u5dee\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\n        # 8. \u627e\u5230\u6700\u5927\u7684\u503c\u548c\u6700\u5c0f\u7684\u503c\u7684\u5dee\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\n        # 9. \u627e\u5230\u6700\u5927\u7684\u503c\u548c\u6700\u5c0f\u7684\u503c\u7684\u5dee\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\n        # 10. \u627e\u5230\u6700\u5927\u7684\u503c\u548c\u6700\u5c0f\u7684\u503c\u7684\u5dee\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\n        # 11. \u627e\u5230\u6700\u5927\u7684\u503c\u548c\u6700\u5c0f\u7684\u503c\u7684\u5dee\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\n        # 12. \u627e\u5230\u6700\u5927\u7684\u503c\u548c\u6700\u5c0f\u7684\u503c\u7684\u5dee\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\n        # 13. \u627e\u5230\u6700\u5927\u7684\u503c\u548c\u6700\u5c0f\u7684\u503c\u7684\u5dee\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\n        # 14. \u627e\u5230\u6700\u5927\u7684\u503c\u548c\u6700\u5c0f\u7684\u503c\u7684\u5dee\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\n        # 15. \u627e\u5230\u6700\u5927\u7684\u503c\u548c\u6700\u5c0f\u7684\u503c\u7684\u5dee\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\n        # 16. \u627e\u5230\u6700\u5927\u7684\u503c\u548c\u6700\u5c0f\u7684\u503c\u7684\u5dee\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\n        # 17. \u627e\u5230\u6700\u5927\u7684\u503c\u548c\u6700\u5c0f\u7684\u503c\u7684\u5dee\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\n        # 18. \u627e\u5230\u6700\u5927\u7684\u503c\u548c\u6700\u5c0f\u7684\u503c\u7684\u5dee\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\n        # 19. \u627e\u5230\u6700\u5927\u7684\u503c\u548c\u6700\u5c0f\u7684\u503c\u7684\u5dee\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\n        # 20. \u627e\u5230\u6700\u5927\u7684\u503c"}, {"task_id": "swim-in-rising-water", "completion": "class Solution(object):\n    def swimInWater(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5927\u7684\u503c\n        # 2. \u627e\u5230\u6700\u5c0f\u7684\u503c\n        # 3. \u627e\u5230\u6700\u5927\u7684\u503c\u548c\u6700\u5c0f\u7684\u503c\u7684\u5dee\u503c\n        # 4. \u627e\u5230\u6700\u5927\u7684\u503c\u548c\u6700\u5c0f\u7684\u503c\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\n        # 5. \u627e\u5230\u6700\u5927\u7684\u503c\u548c\u6700\u5c0f\u7684\u503c\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\n        # 6. \u627e\u5230\u6700\u5927\u7684\u503c\u548c\u6700\u5c0f\u7684\u503c\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u7684\u5e73\u65b9\n        # 7. \u627e\u5230\u6700\u5927\u7684\u503c\u548c\u6700\u5c0f\u7684\u503c\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\n        # 8. \u627e\u5230\u6700\u5927\u7684\u503c\u548c\u6700\u5c0f\u7684\u503c\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\n        # 9. \u627e\u5230\u6700\u5927\u7684\u503c\u548c\u6700\u5c0f\u7684\u503c\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\n        # 10. \u627e\u5230\u6700\u5927\u7684\u503c\u548c\u6700\u5c0f\u7684\u503c\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\n        # 11. \u627e\u5230\u6700\u5927\u7684\u503c\u548c\u6700\u5c0f\u7684\u503c\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\n        # 12. \u627e\u5230\u6700\u5927\u7684\u503c\u548c\u6700\u5c0f\u7684\u503c\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\n        # 13. \u627e\u5230\u6700\u5927\u7684\u503c\u548c\u6700\u5c0f\u7684\u503c\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\n        # 14. \u627e\u5230\u6700\u5927\u7684\u503c\u548c\u6700\u5c0f\u7684\u503c\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\n        # 15. \u627e\u5230\u6700\u5927\u7684\u503c\u548c\u6700\u5c0f\u7684\u503c\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\n        # 16. \u627e\u5230\u6700\u5927\u7684\u503c\u548c\u6700\u5c0f\u7684\u503c\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\n        # 17. \u627e\u5230\u6700\u5927\u7684\u503c\u548c\u6700\u5c0f\u7684\u503c\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\n        # 18. \u627e\u5230\u6700\u5927\u7684\u503c\u548c\u6700\u5c0f\u7684\u503c\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\n        # 19. \u627e\u5230\u6700\u5927\u7684\u503c\u548c\u6700\u5c0f\u7684\u503c\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\n        # 20. \u627e\u5230\u6700\u5927\u7684\u503c\u548c\u6700\u5c0f\u7684\u503c\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\n        # 21. \u627e\u5230\u6700\u5927\u7684\u503c\u548c\u6700\u5c0f\u7684\u503c\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u7684"}, {"task_id": "swim-in-rising-water", "completion": "class Solution(object):\n    def swimInWater(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5c0f\u7684\u503c\n        # 2. \u627e\u5230\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\n        # 3. \u627e\u5230\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\n        # 4. \u627e\u5230\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\n        # 5. \u627e\u5230\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\n        # 6. \u627e\u5230\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\n        # 7. \u627e\u5230\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\n        # 8. \u627e\u5230\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\n        # 9. \u627e\u5230\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\n        # 10. \u627e\u5230\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\n        # 11. \u627e\u5230\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\n        # 12. \u627e\u5230\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\n        # 13. \u627e\u5230\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\n        # 14. \u627e\u5230\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\n        # 15. \u627e\u5230\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\n        # 16. \u627e\u5230\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\n        # 17. \u627e\u5230\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\n        # 18. \u627e\u5230\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\n        # 19. \u627e\u5230\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e"}, {"task_id": "swim-in-rising-water", "completion": "class Solution(object):\n    def swimInWater(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5c0f\u7684\u503c\n        # 2. \u627e\u5230\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\n        # 3. \u4ece\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u5f00\u59cb\uff0c\u5411\u56db\u5468\u6269\u6563\n        # 4. \u5982\u679c\u6269\u6563\u5230\u4e86\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u8fd4\u56de\n        # 5. \u5982\u679c\u6269\u6563\u5230\u4e86\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u8fd4\u56de\n        # 6. \u5982\u679c\u6269\u6563\u5230\u4e86\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u8fd4\u56de\n        # 7. \u5982\u679c\u6269\u6563\u5230\u4e86\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u8fd4\u56de\n        # 8. \u5982\u679c\u6269\u6563\u5230\u4e86\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u8fd4\u56de\n        # 9. \u5982\u679c\u6269\u6563\u5230\u4e86\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u8fd4\u56de\n        # 10. \u5982\u679c\u6269\u6563\u5230\u4e86\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u8fd4\u56de\n        # 11. \u5982\u679c\u6269\u6563\u5230\u4e86\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u8fd4\u56de\n        # 12. \u5982\u679c\u6269\u6563\u5230\u4e86\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u8fd4\u56de\n        # 13. \u5982\u679c\u6269\u6563\u5230\u4e86\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u8fd4\u56de\n        # 14. \u5982\u679c\u6269\u6563\u5230\u4e86\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u8fd4\u56de\n        # 15. \u5982\u679c\u6269\u6563\u5230\u4e86\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u8fd4\u56de\n        # 16. \u5982\u679c\u6269\u6563\u5230\u4e86\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u8fd4\u56de\n        # 17. \u5982\u679c\u6269\u6563\u5230\u4e86\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u8fd4\u56de\n        # 18. \u5982\u679c\u6269\u6563\u5230\u4e86\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u8fd4\u56de\n        # 19. \u5982\u679c\u6269\u6563\u5230\u4e86\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u8fd4\u56de\n        # 20. \u5982\u679c\u6269\u6563\u5230\u4e86\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u8fd4\u56de\n        # 21. \u5982\u679c\u6269\u6563\u5230\u4e86\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u8fd4\u56de\n        # 22. \u5982\u679c\u6269\u6563\u5230\u4e86\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u8fd4\u56de\n        # 23. \u5982\u679c\u6269\u6563\u5230\u4e86\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u8fd4\u56de\n        # 24. \u5982\u679c\u6269\u6563\u5230\u4e86\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u8fd4\u56de\n        # 25. \u5982\u679c\u6269\u6563\u5230\u4e86\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u8fd4\u56de\n        # 26. \u5982\u679c\u6269\u6563\u5230\u4e86\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u8fd4\u56de\n        # 27. \u5982\u679c\u6269\u6563\u5230\u4e86\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u8fd4\u56de\n        # 28. \u5982\u679c\u6269\u6563\u5230\u4e86\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u8fd4\u56de\n        # 29. \u5982\u679c\u6269\u6563\u5230\u4e86\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u8fd4\u56de\n        # 30. \u5982\u679c\u6269\u6563\u5230\u4e86\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u8fd4\u56de\n        # 31. \u5982\u679c\u6269\u6563\u5230\u4e86\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u8fd4\u56de\n        # 32. \u5982\u679c\u6269\u6563\u5230\u4e86\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u8fd4\u56de\n        # 33. \u5982\u679c\u6269\u6563\u5230\u4e86\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u8fd4\u56de\n        # 34. \u5982\u679c\u6269\u6563\u5230\u4e86\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u8fd4\u56de\n        # 35. \u5982\u679c\u6269\u6563\u5230\u4e86\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u8fd4\u56de\n        # 36. \u5982\u679c\u6269\u6563\u5230\u4e86\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u8fd4\u56de\n        # 37. \u5982\u679c\u6269\u6563\u5230\u4e86\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u8fd4\u56de\n        # 38. \u5982\u679c\u6269\u6563\u5230\u4e86\u6700\u540e\u4e00"}], "unique-paths": [{"task_id": "unique-paths", "completion": "class Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        dp = [[1 for _ in range(n)] for _ in range(m)]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        return dp[m-1][n-1]"}, {"task_id": "unique-paths", "completion": "class Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        dp = [[1 for _ in range(n)] for _ in range(m)]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        return dp[m-1][n-1]"}, {"task_id": "unique-paths", "completion": "class Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        dp = [[1 for _ in range(n)] for _ in range(m)]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        return dp[m-1][n-1]"}, {"task_id": "unique-paths", "completion": "class Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        dp = [[1 for _ in range(n)] for _ in range(m)]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        return dp[m-1][n-1]"}, {"task_id": "unique-paths", "completion": "class Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[0][j] = 1\n        # dp[i][0] = 1\n        dp = [[1 for _ in range(n)] for _ in range(m)]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        return dp[m-1][n-1]"}], "multiply-strings": [{"task_id": "multiply-strings", "completion": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u5148\u628anum1\u548cnum2\u8f6c\u6362\u6210\u6574\u6570\n        # 2. \u628anum1\u548cnum2\u4e58\u8d77\u6765\n        # 3. \u628a\u7ed3\u679c\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\n        # 4. \u8fd4\u56de\u7ed3\u679c\n        # 5. \u5982\u679cnum1\u548cnum2\u4e2d\u6709\u4e00\u4e2a\u662f0\uff0c\u76f4\u63a5\u8fd4\u56de0\n        # 6. \u5982\u679cnum1\u548cnum2\u4e2d\u6709\u4e00\u4e2a\u662f0\uff0c\u76f4\u63a5\u8fd4\u56denum1\u6216num2\n        # 7. \u5982\u679cnum1\u548cnum2\u4e2d\u6709\u4e00\u4e2a\u662f0\uff0c\u76f4\u63a5\u8fd4\u56denum1\u6216num2\n        # 8. \u5982\u679cnum1\u548cnum2\u4e2d\u6709\u4e00\u4e2a\u662f0\uff0c\u76f4\u63a5\u8fd4\u56denum1\u6216num2\n        # 9. \u5982\u679cnum1\u548cnum2\u4e2d\u6709\u4e00\u4e2a\u662f0\uff0c\u76f4\u63a5\u8fd4\u56denum1\u6216num2\n        # 10. \u5982\u679cnum1\u548cnum2\u4e2d\u6709\u4e00\u4e2a\u662f0\uff0c\u76f4\u63a5\u8fd4\u56denum1\u6216num2\n        # 11. \u5982\u679cnum1\u548cnum2\u4e2d\u6709\u4e00\u4e2a\u662f0\uff0c\u76f4\u63a5\u8fd4\u56denum1\u6216num2\n        # 12. \u5982\u679cnum1\u548cnum2\u4e2d\u6709\u4e00\u4e2a\u662f0\uff0c\u76f4\u63a5\u8fd4\u56denum1\u6216num2\n        # 13. \u5982\u679cnum1\u548cnum2\u4e2d\u6709\u4e00\u4e2a\u662f0\uff0c\u76f4\u63a5\u8fd4\u56denum1\u6216num2\n        # 14. \u5982\u679cnum1\u548cnum2\u4e2d\u6709\u4e00\u4e2a\u662f0\uff0c\u76f4\u63a5\u8fd4\u56denum1\u6216num2\n        # 15. \u5982\u679cnum1\u548cnum2\u4e2d\u6709\u4e00\u4e2a\u662f0\uff0c\u76f4\u63a5\u8fd4\u56denum1\u6216num2\n        # 16. \u5982\u679cnum1\u548cnum2\u4e2d\u6709\u4e00\u4e2a\u662f0\uff0c\u76f4\u63a5\u8fd4\u56denum1\u6216num2\n        # 17. \u5982\u679cnum1\u548cnum2\u4e2d\u6709\u4e00\u4e2a\u662f0\uff0c\u76f4\u63a5\u8fd4\u56denum1\u6216num2\n        # 18. \u5982\u679cnum1\u548cnum2\u4e2d\u6709\u4e00\u4e2a\u662f0\uff0c\u76f4\u63a5\u8fd4\u56denum1\u6216num2\n        # 19. \u5982\u679cnum1\u548cnum2\u4e2d\u6709\u4e00\u4e2a\u662f0\uff0c\u76f4\u63a5\u8fd4\u56denum1\u6216num2\n        # 20. \u5982\u679cnum1\u548cnum2\u4e2d\u6709\u4e00\u4e2a\u662f0\uff0c\u76f4\u63a5\u8fd4\u56denum1\u6216num2\n        # 21. \u5982\u679cnum1\u548cnum2\u4e2d\u6709\u4e00\u4e2a\u662f0\uff0c\u76f4\u63a5\u8fd4\u56denum1\u6216num2\n        # 22. \u5982\u679cnum1\u548cnum2\u4e2d\u6709\u4e00\u4e2a\u662f0\uff0c\u76f4\u63a5\u8fd4\u56denum1\u6216num2\n        # 23. \u5982\u679cnum1\u548cnum2\u4e2d\u6709\u4e00\u4e2a\u662f0\uff0c\u76f4\u63a5\u8fd4\u56denum1\u6216num2\n        # 24. \u5982\u679cnum1\u548cnum2\u4e2d\u6709\u4e00\u4e2a\u662f0\uff0c\u76f4\u63a5\u8fd4\u56denum1\u6216num2\n        # 25. \u5982\u679cnum1\u548cnum2\u4e2d\u6709\u4e00\u4e2a\u662f0\uff0c\u76f4\u63a5\u8fd4\u56denum1\u6216num2\n        # 26. \u5982\u679cnum1\u548cnum2\u4e2d\u6709\u4e00\u4e2a\u662f0\uff0c\u76f4\u63a5\u8fd4\u56denum1\u6216num2\n        # 27. \u5982\u679cnum1\u548cnum2\u4e2d\u6709\u4e00\u4e2a\u662f0\uff0c\u76f4\u63a5\u8fd4\u56denum1\u6216num2\n        # 28. \u5982\u679cnum1\u548cnum2\u4e2d\u6709\u4e00\u4e2a\u662f0\uff0c\u76f4\u63a5\u8fd4\u56denum1\u6216num2\n        # 29. \u5982\u679cnum1\u548cnum2\u4e2d\u6709\u4e00\u4e2a\u662f0\uff0c\u76f4\u63a5\u8fd4\u56denum1\u6216num2\n        # 30. \u5982\u679cnum1\u548cnum2\u4e2d\u6709\u4e00\u4e2a\u662f0\uff0c\u76f4\u63a5\u8fd4\u56denum1\u6216num2\n        # 31. \u5982\u679cnum1\u548cnum2\u4e2d\u6709\u4e00\u4e2a\u662f0\uff0c\u76f4\u63a5\u8fd4\u56denum1\u6216num2\n        # 32. \u5982\u679cnum1\u548cnum2\u4e2d\u6709\u4e00\u4e2a\u662f0\uff0c\u76f4\u63a5\u8fd4\u56denum1\u6216num2\n        # 33. \u5982\u679cnum1\u548cnum2\u4e2d\u6709\u4e00\u4e2a\u662f0\uff0c\u76f4\u63a5\u8fd4\u56denum1\u6216num2\n        # 34. \u5982\u679cnum1\u548cnum2\u4e2d\u6709\u4e00\u4e2a\u662f0\uff0c\u76f4\u63a5\u8fd4\u56denum1\u6216num2\n        # 35. \u5982\u679cnum1\u548cnum2\u4e2d\u6709\u4e00\u4e2a\u662f0\uff0c\u76f4\u63a5\u8fd4\u56denum1\u6216num2"}, {"task_id": "multiply-strings", "completion": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u5148\u628anum1\u548cnum2\u8f6c\u6362\u6210\u6574\u6570\n        # 2. \u628anum1\u548cnum2\u4e58\u8d77\u6765\n        # 3. \u628a\u7ed3\u679c\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\n        # 4. \u8fd4\u56de\u7ed3\u679c\n        # 5. \u5982\u679cnum1\u548cnum2\u4e2d\u6709\u4e00\u4e2a\u662f0\uff0c\u76f4\u63a5\u8fd4\u56de0\n        # 6. \u5982\u679cnum1\u548cnum2\u4e2d\u6709\u4e00\u4e2a\u662f1\uff0c\u76f4\u63a5\u8fd4\u56de\u53e6\u4e00\u4e2a\n        # 7. \u5982\u679cnum1\u548cnum2\u4e2d\u6709\u4e00\u4e2a\u662f-1\uff0c\u76f4\u63a5\u8fd4\u56de\u53e6\u4e00\u4e2a\u7684\u76f8\u53cd\u6570\n        # 8. \u5982\u679cnum1\u548cnum2\u4e2d\u6709\u4e00\u4e2a\u662f-2\uff0c\u76f4\u63a5\u8fd4\u56de\u53e6\u4e00\u4e2a\u7684\u76f8\u53cd\u6570\u518d\u4e58\u4ee52\n        # 9. \u5982\u679cnum1\u548cnum2\u4e2d\u6709\u4e00\u4e2a\u662f-3\uff0c\u76f4\u63a5\u8fd4\u56de\u53e6\u4e00\u4e2a\u7684\u76f8\u53cd\u6570\u518d\u4e58\u4ee53\n        # 10. \u5982\u679cnum1\u548cnum2\u4e2d\u6709\u4e00\u4e2a\u662f-4\uff0c\u76f4\u63a5\u8fd4\u56de\u53e6\u4e00\u4e2a\u7684\u76f8\u53cd\u6570\u518d\u4e58\u4ee54\n        # 11. \u5982\u679cnum1\u548cnum2\u4e2d\u6709\u4e00\u4e2a\u662f-5\uff0c\u76f4\u63a5\u8fd4\u56de\u53e6\u4e00\u4e2a\u7684\u76f8\u53cd\u6570\u518d\u4e58\u4ee55\n        # 12. \u5982\u679cnum1\u548cnum2\u4e2d\u6709\u4e00\u4e2a\u662f-6\uff0c\u76f4\u63a5\u8fd4\u56de\u53e6\u4e00\u4e2a\u7684\u76f8\u53cd\u6570\u518d\u4e58\u4ee56\n        # 13. \u5982\u679cnum1\u548cnum2\u4e2d\u6709\u4e00\u4e2a\u662f-7\uff0c\u76f4\u63a5\u8fd4\u56de\u53e6\u4e00\u4e2a\u7684\u76f8\u53cd\u6570\u518d\u4e58\u4ee57\n        # 14. \u5982\u679cnum1\u548cnum2\u4e2d\u6709\u4e00\u4e2a\u662f-8\uff0c\u76f4\u63a5\u8fd4\u56de\u53e6\u4e00\u4e2a\u7684\u76f8\u53cd\u6570\u518d\u4e58\u4ee58\n        # 15. \u5982\u679cnum1\u548cnum2\u4e2d\u6709\u4e00\u4e2a\u662f-9\uff0c\u76f4\u63a5\u8fd4\u56de\u53e6\u4e00\u4e2a\u7684\u76f8\u53cd\u6570\u518d\u4e58\u4ee59\n        # 16. \u5982\u679cnum1\u548cnum2\u4e2d\u6709\u4e00\u4e2a\u662f-10\uff0c\u76f4\u63a5\u8fd4\u56de\u53e6\u4e00\u4e2a\u7684\u76f8\u53cd\u6570\u518d\u4e58\u4ee510\n        # 17. \u5982\u679cnum1\u548cnum2\u4e2d\u6709\u4e00\u4e2a\u662f-11\uff0c\u76f4\u63a5\u8fd4\u56de\u53e6\u4e00\u4e2a\u7684\u76f8\u53cd\u6570\u518d\u4e58\u4ee511\n        # 18. \u5982\u679cnum1\u548cnum2\u4e2d\u6709\u4e00\u4e2a\u662f-12\uff0c\u76f4\u63a5\u8fd4\u56de\u53e6\u4e00\u4e2a\u7684\u76f8\u53cd\u6570\u518d\u4e58\u4ee512\n        # 19. \u5982\u679cnum1\u548cnum2\u4e2d\u6709\u4e00\u4e2a\u662f-13\uff0c\u76f4\u63a5\u8fd4\u56de\u53e6\u4e00\u4e2a\u7684\u76f8\u53cd\u6570\u518d\u4e58\u4ee513\n        # 20. \u5982\u679cnum1\u548cnum2\u4e2d\u6709\u4e00\u4e2a\u662f-14\uff0c\u76f4\u63a5\u8fd4\u56de\u53e6\u4e00\u4e2a\u7684\u76f8\u53cd\u6570\u518d\u4e58\u4ee514\n        # 21. \u5982\u679cnum1\u548cnum2\u4e2d\u6709\u4e00\u4e2a\u662f-15\uff0c\u76f4\u63a5\u8fd4\u56de\u53e6\u4e00\u4e2a\u7684\u76f8\u53cd\u6570\u518d\u4e58\u4ee515\n        # 22. \u5982\u679cnum1\u548cnum2\u4e2d\u6709\u4e00\u4e2a\u662f-16\uff0c\u76f4\u63a5\u8fd4\u56de\u53e6\u4e00\u4e2a\u7684\u76f8\u53cd\u6570\u518d\u4e58\u4ee516\n        # 23. \u5982\u679cnum1\u548cnum2\u4e2d\u6709\u4e00\u4e2a\u662f-17\uff0c\u76f4\u63a5\u8fd4\u56de\u53e6\u4e00\u4e2a\u7684\u76f8\u53cd\u6570\u518d\u4e58\u4ee517\n        # 24. \u5982\u679cnum1\u548cnum2\u4e2d\u6709\u4e00\u4e2a\u662f-18\uff0c\u76f4\u63a5\u8fd4\u56de\u53e6\u4e00\u4e2a\u7684\u76f8\u53cd\u6570\u518d\u4e58\u4ee518\n        # 25. \u5982\u679cnum1\u548cnum2\u4e2d\u6709\u4e00\u4e2a\u662f-19\uff0c\u76f4\u63a5\u8fd4\u56de\u53e6\u4e00\u4e2a\u7684\u76f8\u53cd\u6570\u518d\u4e58\u4ee519\n        # 26. \u5982\u679cnum1\u548cnum2\u4e2d\u6709\u4e00\u4e2a\u662f-20\uff0c\u76f4\u63a5\u8fd4\u56de\u53e6\u4e00\u4e2a\u7684\u76f8\u53cd\u6570\u518d\u4e58\u4ee520\n        # 27. \u5982\u679cnum1\u548cnum2\u4e2d\u6709\u4e00\u4e2a\u662f-21\uff0c\u76f4\u63a5\u8fd4\u56de\u53e6\u4e00\u4e2a\u7684\u76f8\u53cd\u6570\u518d\u4e58\u4ee521"}, {"task_id": "multiply-strings", "completion": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u5148\u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 2. \u4e58\u6cd5\n        # 3. \u628a\u7ed3\u679c\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\n        # 4. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u5148\u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        num1 = [int(i) for i in num1]\n        num2 = [int(i) for i in num2]\n        \n        # 2. \u4e58\u6cd5\n        result = []\n        for i in range(len(num1)):\n            for j in range(len(num2)):\n                result.append(num1[i] * num2[j])\n        \n        # 3. \u628a\u7ed3\u679c\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\n        result = [str(i) for i in result]\n        result = ''.join(result)\n        \n        # 4. \u8fd4\u56de\u7ed3\u679c\n        return result"}, {"task_id": "multiply-strings", "completion": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u5148\u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 2. \u4e58\u6cd5\n        # 3. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\n        # 4. \u53bb\u9664\u524d\u5bfc0\n        # 5. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u5148\u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        num1 = [int(i) for i in num1]\n        num2 = [int(i) for i in num2]\n        \n        # 2. \u4e58\u6cd5\n        result = []\n        for i in range(len(num1)):\n            for j in range(len(num2)):\n                result.append(num1[i] * num2[j])\n        \n        # 3. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\n        result = [str(i) for i in result]\n        \n        # 4. \u53bb\u9664\u524d\u5bfc0\n        result = [i for i in result if i != '0']\n        \n        # 5. \u8fd4\u56de\u7ed3\u679c\n        return ''.join(result)"}, {"task_id": "multiply-strings", "completion": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u5148\u628anum1\u548cnum2\u8f6c\u6362\u6210\u6570\u5b57\n        # 2. \u4e58\u6cd5\n        # 3. \u628a\u7ed3\u679c\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\n        # 4. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u5148\u628anum1\u548cnum2\u8f6c\u6362\u6210\u6570\u5b57\n        num1 = int(num1)\n        num2 = int(num2)\n        \n        # 2. \u4e58\u6cd5\n        result = num1 * num2\n        \n        # 3. \u628a\u7ed3\u679c\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\n        result = str(result)\n        \n        # 4. \u8fd4\u56de\u7ed3\u679c\n        return result"}], "best-time-to-buy-and-sell-stock-iii": [{"task_id": "best-time-to-buy-and-sell-stock-iii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # 2. \u52a8\u6001\u89c4\u5212\n        # 3. \u8d2a\u5fc3\u7b97\u6cd5\n        # 4. \u4e8c\u5206\u67e5\u627e\n        # 5. \u5206\u6cbb\n        # 6. \u56de\u6eaf\n        # 7. \u5206\u6cbb\n        # 8. \u6781\u5c0f\u5316\u6781\u5927\n        # 9. \u8d2a\u5fc3 + \u526a\u679d\n        # 10. \u4e8c\u5206\u67e5\u627e + \u8d2a\u5fc3\n        # 11. \u4e8c\u5206\u67e5\u627e + \u8d2a\u5fc3 + \u526a\u679d\n        # 12. \u4e8c\u5206\u67e5\u627e + \u8d2a\u5fc3 + \u526a\u679d + \u526a\u679d\n        # 13. \u4e8c\u5206\u67e5\u627e + \u8d2a\u5fc3 + \u526a\u679d + \u526a\u679d + \u526a\u679d\n        # 14. \u4e8c\u5206\u67e5\u627e + \u8d2a\u5fc3 + \u526a\u679d + \u526a\u679d + \u526a\u679d + \u526a\u679d\n        # 15. \u4e8c\u5206\u67e5\u627e + \u8d2a\u5fc3 + \u526a\u679d + \u526a\u679d + \u526a\u679d + \u526a\u679d + \u526a\u679d\n        # 16. \u4e8c\u5206\u67e5\u627e + \u8d2a\u5fc3 + \u526a\u679d + \u526a\u679d + \u526a\u679d + \u526a\u679d + \u526a\u679d + \u526a\u679d\n        # 17. \u4e8c\u5206\u67e5\u627e + \u8d2a\u5fc3 + \u526a\u679d + \u526a\u679d + \u526a\u679d + \u526a\u679d + \u526a\u679d + \u526a\u679d + \u526a\u679d\n        # 18. \u4e8c\u5206\u67e5\u627e + \u8d2a\u5fc3 + \u526a\u679d + \u526a\u679d + \u526a\u679d + \u526a\u679d + \u526a\u679d + \u526a\u679d + \u526a\u679d + \u526a\u679d\n        # 19. \u4e8c\u5206\u67e5\u627e + \u8d2a\u5fc3 + \u526a\u679d + \u526a\u679d + \u526a\u679d + \u526a\u679d + \u526a\u679d + \u526a\u679d + \u526a\u679d + \u526a\u679d + \u526a\u679d\n        # 20. \u4e8c\u5206\u67e5\u627e + \u8d2a\u5fc3 + \u526a\u679d + \u526a\u679d + \u526a\u679d + \u526a\u679d + \u526a\u679d + \u526a\u679d + \u526a\u679d + \u526a\u679d + \u526a\u679d + \u526a\u679d\n        # 21. \u4e8c\u5206\u67e5\u627e + \u8d2a\u5fc3 + \u526a\u679d + \u526a\u679d + \u526a\u679d + \u526a\u679d + \u526a\u679d + \u526a\u679d + \u526a\u679d + \u526a\u679d + \u526a\u679d + \u526a\u679d + \u526a\u679d\n        # 22. \u4e8c\u5206\u67e5\u627e + \u8d2a\u5fc3 + \u526a\u679d + \u526a\u679d + \u526a\u679d + \u526a\u679d + \u526a\u679d + \u526a\u679d + \u526a\u679d + \u526a\u679d + \u526a\u679d + \u526a\u679d + \u526a\u679d + \u526a\u679d\n        # 23. \u4e8c\u5206\u67e5\u627e + \u8d2a\u5fc3 + \ufffd"}, {"task_id": "best-time-to-buy-and-sell-stock-iii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # 2. \u52a8\u6001\u89c4\u5212\n        # 3. \u8d2a\u5fc3\u7b97\u6cd5\n        # 4. \u4e8c\u5206\u67e5\u627e\n        # 5. \u5206\u6cbb\n        # 6. \u56de\u6eaf\n        # 7. \u5206\u6cbb\n        # 8. \u6781\u5c0f\u5316\u6781\u5927\n        # 9. \u8d2a\u5fc3 + \u526a\u679d\n        # 10. \u4e8c\u5206\u67e5\u627e + \u8d2a\u5fc3\n        # 11. \u4e8c\u5206\u67e5\u627e + \u8d2a\u5fc3 + \u526a\u679d\n        # 12. \u6eda\u52a8\u6570\u7ec4\n        # 13. \u6eda\u52a8\u6570\u7ec4 + \u526a\u679d\n        # 14. \u6eda\u52a8\u6570\u7ec4 + \u526a\u679d + \u54c8\u5e0c\u8868\n        # 15. \u6eda\u52a8\u6570\u7ec4 + \u526a\u679d + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e\n        # 16. \u6eda\u52a8\u6570\u7ec4 + \u526a\u679d + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u8d2a\u5fc3\n        # 17. \u6eda\u52a8\u6570\u7ec4 + \u526a\u679d + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u8d2a\u5fc3 + \u54c8\u5e0c\u8868\n        # 18. \u6eda\u52a8\u6570\u7ec4 + \u526a\u679d + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u8d2a\u5fc3 + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e\n        # 19. \u6eda\u52a8\u6570\u7ec4 + \u526a\u679d + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u8d2a\u5fc3 + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u8d2a\u5fc3\n        # 20. \u6eda\u52a8\u6570\u7ec4 + \u526a\u679d + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u8d2a\u5fc3 + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u8d2a\u5fc3 + \u54c8\u5e0c\u8868\n        # 21. \u6eda\u52a8\u6570\u7ec4 + \u526a\u679d + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u8d2a\u5fc3 + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u8d2a\u5fc3 + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e\n        # 22. \u6eda\u52a8\u6570\u7ec4 + \u526a\u679d + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u8d2a\u5fc3 + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u8d2a\u5fc3 + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u8d2a\u5fc3\n        # 23. \u6eda\u52a8\u6570\u7ec4 + \u526a\u679d + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u8d2a\u5fc3 + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u8d2a\u5fc3 + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u8d2a\u5fc3 + \u54c8\u5e0c\u8868\n        # 24. \u6eda\u52a8\u6570\u7ec4 + \u526a\u679d + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u8d2a\u5fc3 + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u8d2a\u5fc3 + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u8d2a\u5fc3 + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e\n        # 25. \u6eda\u52a8\u6570\u7ec4 + \u526a\u679d + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u8d2a\u5fc3 + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u8d2a\u5fc3 + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u8d2a\u5fc3 + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u8d2a\u5fc3\n        # 26. \ufffd"}, {"task_id": "best-time-to-buy-and-sell-stock-iii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # 2. \u52a8\u6001\u89c4\u5212\n        # 3. \u8d2a\u5fc3\u7b97\u6cd5\n        # 4. \u4e8c\u5206\u67e5\u627e\n        # 5. \u5206\u6cbb\n        # 6. \u56de\u6eaf\n        # 7. \u5206\u6cbb\n        # 8. \u6781\u5c0f\u5316\u6781\u5927\n        # 9. \u8d2a\u5fc3 + \u526a\u679d\n        # 10. \u4e8c\u5206\u67e5\u627e + \u8d2a\u5fc3\n        # 11. \u4e8c\u5206\u67e5\u627e + \u8d2a\u5fc3 + \u526a\u679d\n        # 12. \u6eda\u52a8\u6570\u7ec4\n        # 13. \u6eda\u52a8\u6570\u7ec4 + \u526a\u679d\n        # 14. \u6eda\u52a8\u6570\u7ec4 + \u526a\u679d + \u54c8\u5e0c\u8868\n        # 15. \u6eda\u52a8\u6570\u7ec4 + \u526a\u679d + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e\n        # 16. \u6eda\u52a8\u6570\u7ec4 + \u526a\u679d + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u54c8\u5e0c\u8868\n        # 17. \u6eda\u52a8\u6570\u7ec4 + \u526a\u679d + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e\n        # 18. \u6eda\u52a8\u6570\u7ec4 + \u526a\u679d + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u54c8\u5e0c\u8868\n        # 19. \u6eda\u52a8\u6570\u7ec4 + \u526a\u679d + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e\n        # 20. \u6eda\u52a8\u6570\u7ec4 + \u526a\u679d + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u54c8\u5e0c\u8868\n        # 21. \u6eda\u52a8\u6570\u7ec4 + \u526a\u679d + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e\n        # 22. \u6eda\u52a8\u6570\u7ec4 + \u526a\u679d + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u54c8\u5e0c\u8868\n        # 23. \u6eda\u52a8\u6570\u7ec4 + \u526a\u679d + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e\n        # 24. \u6eda\u52a8\u6570\u7ec4 + \u526a\u679d + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u54c8\u5e0c\u8868\n        # 25. \u6eda\u52a8\u6570\u7ec4 + \u526a\u679d + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u54c8\u5e0c\u8868"}, {"task_id": "best-time-to-buy-and-sell-stock-iii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # 2. \u52a8\u6001\u89c4\u5212\n        # 3. \u8d2a\u5fc3\u7b97\u6cd5\n        # 4. \u4e8c\u5206\u67e5\u627e\n        # 5. \u5206\u6cbb\n        # 6. \u56de\u6eaf\n        # 7. \u5206\u6cbb\n        # 8. \u6781\u5c0f\u5316\u6781\u5927\n        # 9. \u8d2a\u5fc3 + \u526a\u679d\n        # 10. \u4e8c\u5206\u67e5\u627e + \u8d2a\u5fc3\n        # 11. \u4e8c\u5206\u67e5\u627e + \u8d2a\u5fc3 + \u526a\u679d\n        # 12. \u6eda\u52a8\u6570\u7ec4\n        # 13. \u6eda\u52a8\u6570\u7ec4 + \u526a\u679d\n        # 14. \u6eda\u52a8\u6570\u7ec4 + \u526a\u679d + \u54c8\u5e0c\u8868\n        # 15. \u6eda\u52a8\u6570\u7ec4 + \u526a\u679d + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e\n        # 16. \u6eda\u52a8\u6570\u7ec4 + \u526a\u679d + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u8d2a\u5fc3\n        # 17. \u6eda\u52a8\u6570\u7ec4 + \u526a\u679d + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u8d2a\u5fc3 + \u54c8\u5e0c\u8868\n        # 18. \u6eda\u52a8\u6570\u7ec4 + \u526a\u679d + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u8d2a\u5fc3 + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e\n        # 19. \u6eda\u52a8\u6570\u7ec4 + \u526a\u679d + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u8d2a\u5fc3 + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u8d2a\u5fc3\n        # 20. \u6eda\u52a8\u6570\u7ec4 + \u526a\u679d + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u8d2a\u5fc3 + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u8d2a\u5fc3 + \u54c8\u5e0c\u8868\n        # 21. \u6eda\u52a8\u6570\u7ec4 + \u526a\u679d + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u8d2a\u5fc3 + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u8d2a\u5fc3 + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e\n        # 22. \u6eda\u52a8\u6570\u7ec4 + \u526a\u679d + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u8d2a\u5fc3 + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u8d2a\u5fc3 + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u8d2a\u5fc3\n        # 23. \u6eda\u52a8\u6570\u7ec4 + \u526a\u679d + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u8d2a\u5fc3 + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u8d2a\u5fc3 + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u8d2a\u5fc3 + \u54c8\u5e0c\u8868\n        # 24. \u6eda\u52a8\u6570\u7ec4 + \u526a\u679d + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u8d2a\u5fc3 + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u8d2a\u5fc3 + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u8d2a\u5fc3 + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e\n        # 25. \u6eda\u52a8\u6570\u7ec4 + \u526a\u679d + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u8d2a\u5fc3 + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u8d2a\u5fc3 + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u8d2a\u5fc3 + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u8d2a\u5fc3\n        # 26. \ufffd"}, {"task_id": "best-time-to-buy-and-sell-stock-iii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # 2. \u52a8\u6001\u89c4\u5212\n        # 3. \u8d2a\u5fc3\u7b97\u6cd5\n        # 4. \u4e8c\u5206\u67e5\u627e\n        # 5. \u5206\u6cbb\n        # 6. \u56de\u6eaf\n        # 7. \u5206\u6cbb\n        # 8. \u6781\u5c0f\u5316\u6781\u5927\n        # 9. \u8d2a\u5fc3 + \u526a\u679d\n        # 10. \u4e8c\u5206\u67e5\u627e + \u8d2a\u5fc3\n        # 11. \u4e8c\u5206\u67e5\u627e + \u8d2a\u5fc3 + \u526a\u679d\n        # 12. \u6eda\u52a8\u6570\u7ec4\n        # 13. \u6eda\u52a8\u6570\u7ec4 + \u526a\u679d\n        # 14. \u6eda\u52a8\u6570\u7ec4 + \u526a\u679d + \u54c8\u5e0c\u8868\n        # 15. \u6eda\u52a8\u6570\u7ec4 + \u526a\u679d + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e\n        # 16. \u6eda\u52a8\u6570\u7ec4 + \u526a\u679d + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u54c8\u5e0c\u8868\n        # 17. \u6eda\u52a8\u6570\u7ec4 + \u526a\u679d + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e\n        # 18. \u6eda\u52a8\u6570\u7ec4 + \u526a\u679d + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u54c8\u5e0c\u8868\n        # 19. \u6eda\u52a8\u6570\u7ec4 + \u526a\u679d + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e\n        # 20. \u6eda\u52a8\u6570\u7ec4 + \u526a\u679d + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u54c8\u5e0c\u8868\n        # 21. \u6eda\u52a8\u6570\u7ec4 + \u526a\u679d + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e\n        # 22. \u6eda\u52a8\u6570\u7ec4 + \u526a\u679d + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u54c8\u5e0c\u8868\n        # 23. \u6eda\u52a8\u6570\u7ec4 + \u526a\u679d + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e\n        # 24. \u6eda\u52a8\u6570\u7ec4 + \u526a\u679d + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u54c8\u5e0c\u8868\n        # 25. \u6eda\u52a8\u6570\u7ec4 + \u526a\u679d + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u54c8\u5e0c\u8868 + \u4e8c\u5206\u67e5\u627e + \u54c8\u5e0c\u8868"}], "combination-sum-ii": [{"task_id": "combination-sum-ii", "completion": "class Solution(object):\n    def combinationSum2(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # sort the candidates\n        candidates.sort()\n        \n        # initialize the result list\n        result = []\n        \n        # initialize the current combination\n        current = []\n        \n        # initialize the current sum\n        current_sum = 0\n        \n        # initialize the start index\n        start = 0\n        \n        # initialize the end index\n        end = len(candidates) - 1\n        \n        # initialize the current index\n        index = 0\n        \n        # loop through the candidates\n        while index <= end:\n            \n            # if the current sum is less than the target\n            if current_sum < target:\n                \n                # if the current sum is equal to the target\n                if current_sum == target:\n                    \n                    # add the current combination to the result\n                    result.append(current[:])\n                    \n                    # increment the index\n                    index += 1\n                    \n                    # continue to the next iteration\n                    continue\n                \n                # if the current sum is less than the target\n                else:\n                    \n                    # if the current index is less than the end index\n                    if index < end:\n                        \n                        # if the current number is equal to the next number\n                        if candidates[index] == candidates[index + 1]:\n                            \n                            # increment the index\n                            index += 1\n                            \n                            # continue to the next iteration\n                            continue\n                        \n                        # if the current number is not equal to the next number\n                        else:\n                            \n                            # add the current number to the current combination\n                            current.append(candidates[index])\n                            \n                            # increment the current sum\n                            current_sum += candidates[index]\n                            \n                            # increment the index\n                            index += 1\n                            \n                            # continue to the next iteration\n                            continue\n                    \n                    # if the current index is equal to the end index\n                    else:\n                        \n                        # if the current number is equal to the next number\n                        if candidates[index] == candidates[start]:\n                            \n                            # increment the index\n                            index += 1\n                            \n                            # continue to the next iteration\n                            continue\n                        \n                        # if the current number is not equal to the next number\n                        else:\n                            \n                            # add the current number to the current combination\n                            current.append(candidates[index])\n                            \n                            # increment the current sum\n                            current_sum += candidates[index]\n                            \n                            # increment the index\n                            index += 1\n                            \n                            # continue to the next iteration\n                            continue\n                \n            # if the current sum is greater than the target\n            else:\n                \n                # if the current sum is equal to the target\n                if current_sum == target:\n                    \n                    # add the current combination to the result\n                    result.append(current[:])\n                    \n                    # increment the index\n                    index += 1\n                    \n                    # continue to the next iteration\n                    continue\n                \n                # if the current sum is greater than the target\n                else:\n                    \n                    # if the current index is less than the end index\n                    if index < end:\n                        \n                        # if the current number is equal to the next number\n                        if candidates[index] == candidates[index + 1]:\n                            \n                            # increment the index\n                            index += 1\n                            \n                            # continue to the next iteration\n                            continue\n                        \n                        # if the current number is not equal to the next number\n                        else:\n                            \n                            # decrement the current sum\n                            current_sum -= candidates[start]\n                            \n                            # increment the start index\n                            start += 1\n                            \n                            # continue to the next iteration\n                            continue\n                    \n                    # if the current index is equal to the end index\n                    else:\n                        \n                        # if the current number is equal to the next number\n                        if candidates[index] == candidates[start]:\n                            \n                            # increment the index\n                            index += 1\n                            \n                            # continue to the next iteration\n                            continue\n                        \n                        # if the current number is not equal to the next number"}, {"task_id": "combination-sum-ii", "completion": "class Solution(object):\n    def combinationSum2(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # Sort the candidates\n        candidates.sort()\n        \n        # Create a list to store the result\n        result = []\n        \n        # Create a list to store the current combination\n        current = []\n        \n        # Create a variable to store the current sum\n        current_sum = 0\n        \n        # Create a variable to store the index of the current element\n        current_index = 0\n        \n        # Create a variable to store the length of the candidates list\n        length = len(candidates)\n        \n        # Iterate through the candidates list\n        while current_index < length:\n            \n            # If the current sum is less than the target, add the current element to the current combination\n            if current_sum + candidates[current_index] <= target:\n                current.append(candidates[current_index])\n                current_sum += candidates[current_index]\n                current_index += 1\n            \n            # If the current sum is equal to the target, add the current combination to the result\n            elif current_sum + candidates[current_index] == target:\n                result.append(current[:])\n                current_sum = 0\n                current = []\n                current_index += 1\n            \n            # If the current sum is greater than the target, remove the last element from the current combination\n            elif current_sum + candidates[current_index] > target:\n                current.pop()\n                current_sum -= candidates[current_index - 1]\n                current_index -= 1\n        \n        # Return the result\n        return result"}, {"task_id": "combination-sum-ii", "completion": "class Solution(object):\n    def combinationSum2(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # sort the candidates\n        candidates.sort()\n        \n        # create a list to store the result\n        result = []\n        \n        # create a list to store the current combination\n        current = []\n        \n        # create a list to store the current combination\n        current_sum = 0\n        \n        # create a list to store the current combination\n        current_index = 0\n        \n        # create a list to store the current combination\n        current_sum_index = 0\n        \n        # create a list to store the current combination\n        current_sum_index_max = 0\n        \n        # create a list to store the current combination\n        current_sum_index_min = 0\n        \n        # create a list to store the current combination\n        current_sum_index_max_min = 0\n        \n        # create a list to store the current combination\n        current_sum_index_max_min_max = 0\n        \n        # create a list to store the current combination\n        current_sum_index_max_min_max_min = 0\n        \n        # create a list to store the current combination\n        current_sum_index_max_min_max_min_max = 0\n        \n        # create a list to store the current combination\n        current_sum_index_max_min_max_min_max_min = 0\n        \n        # create a list to store the current combination\n        current_sum_index_max_min_max_min_max_min_max = 0\n        \n        # create a list to store the current combination\n        current_sum_index_max_min_max_min_max_min_max_min = 0\n        \n        # create a list to store the current combination\n        current_sum_index_max_min_max_min_max_min_max_min_max = 0\n        \n        # create a list to store the current combination\n        current_sum_index_max_min_max_min_max_min_max_min_max_min = 0\n        \n        # create a list to store the current combination\n        current_sum_index_max_min_max_min_max_min_max_min_max_min_max = 0\n        \n        # create a list to store the current combination\n        current_sum_index_max_min_max_min_max_min_max_min_max_min_max_min = 0\n        \n        # create a list to store the current combination\n        current_sum_index_max_min_max_min_max_min_max_min_max_min_max_min_max = 0\n        \n        # create a list to store the current combination\n        current_sum_index_max_min_max_min_max_min_max_min_max_min_max_min_max_min = 0\n        \n        # create a list to store the current combination\n        current_sum_index_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max = 0\n        \n        # create a list to store the current combination\n        current_sum_index_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min = 0\n        \n        # create a list to store the current combination\n        current_sum_index_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max = 0\n        \n        # create a list to store the current combination\n        current_sum_index_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min = 0\n        \n        # create a list to store the current combination\n        current_sum_index_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max = 0\n        \n        # create a list to store the current combination\n        current_sum_index_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min = 0\n        \n        # create a list"}, {"task_id": "combination-sum-ii", "completion": "class Solution(object):\n    def combinationSum2(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # Sort the list\n        candidates.sort()\n        \n        # Create a list to store the result\n        result = []\n        \n        # Create a list to store the current combination\n        current = []\n        \n        # Create a list to store the current combination\n        current_sum = 0\n        \n        # Create a list to store the current combination\n        current_index = 0\n        \n        # Create a list to store the current combination\n        current_sum = 0\n        \n        # Create a list to store the current combination\n        current_index = 0\n        \n        # Create a list to store the current combination\n        current_index = 0\n        \n        # Create a list to store the current combination\n        current_index = 0\n        \n        # Create a list to store the current combination\n        current_index = 0\n        \n        # Create a list to store the current combination\n        current_index = 0\n        \n        # Create a list to store the current combination\n        current_index = 0\n        \n        # Create a list to store the current combination\n        current_index = 0\n        \n        # Create a list to store the current combination\n        current_index = 0\n        \n        # Create a list to store the current combination\n        current_index = 0\n        \n        # Create a list to store the current combination\n        current_index = 0\n        \n        # Create a list to store the current combination\n        current_index = 0\n        \n        # Create a list to store the current combination\n        current_index = 0\n        \n        # Create a list to store the current combination\n        current_index = 0\n        \n        # Create a list to store the current combination\n        current_index = 0\n        \n        # Create a list to store the current combination\n        current_index = 0\n        \n        # Create a list to store the current combination\n        current_index = 0\n        \n        # Create a list to store the current combination\n        current_index = 0\n        \n        # Create a list to store the current combination\n        current_index = 0\n        \n        # Create a list to store the current combination\n        current_index = 0\n        \n        # Create a list to store the current combination\n        current_index = 0\n        \n        # Create a list to store the current combination\n        current_index = 0\n        \n        # Create a list to store the current combination\n        current_index = 0\n        \n        # Create a list to store the current combination\n        current_index = 0\n        \n        # Create a list to store the current combination\n        current_index = 0\n        \n        # Create a list to store the current combination\n        current_index = 0\n        \n        # Create a list to store the current combination\n        current_index = 0\n        \n        # Create a list to store the current combination\n        current_index = 0\n        \n        # Create a list to store the current combination\n        current_index = 0\n        \n        # Create a list to store the current combination\n        current_index = 0\n        \n        # Create a list to store the current combination\n        current_index = 0\n        \n        # Create a list to store the current combination\n        current_index = 0\n        \n        # Create a list to store the current combination\n        current_index = 0\n        \n        # Create a list to store the current combination\n        current_index = 0\n        \n        # Create a list to store the current combination\n        current_index = 0\n        \n        # Create a list to store the current combination\n        current_index = 0\n        \n        # Create a list to store the current combination\n        current_index = 0\n        \n        # Create a list to store the current combination\n        current_index = 0\n        \n        # Create a list to store the current combination\n        current_index = 0\n        \n        # Create a list to store the current combination\n        current_index = 0\n        \n        # Create a list to store the current combination\n        current_index = 0\n        \n        # Create a list to store the current combination\n        current_index = 0\n        \n        # Create a list to store the current combination\n        current_index = 0\n        \n        # Create a list to store the current combination\n        current_index = 0\n        \n        # Create a list to store the current"}, {"task_id": "combination-sum-ii", "completion": "class Solution(object):\n    def combinationSum2(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # Sort the candidates\n        candidates.sort()\n        \n        # Create a list to store the result\n        result = []\n        \n        # Create a list to store the current combination\n        current = []\n        \n        # Create a variable to store the current sum\n        current_sum = 0\n        \n        # Create a variable to store the index of the current element\n        current_index = 0\n        \n        # Create a variable to store the length of the candidates list\n        length = len(candidates)\n        \n        # Iterate through the candidates list\n        while current_index < length:\n            \n            # If the current sum is less than the target, add the current element to the current combination\n            if current_sum + candidates[current_index] <= target:\n                current.append(candidates[current_index])\n                current_sum += candidates[current_index]\n                current_index += 1\n                \n            # If the current sum is equal to the target, add the current combination to the result\n            elif current_sum + candidates[current_index] == target:\n                result.append(current[:])\n                current_sum = 0\n                current.clear()\n                current_index += 1\n                \n            # If the current sum is greater than the target, remove the last element from the current combination\n            elif current_sum + candidates[current_index] > target:\n                current.pop()\n                current_sum -= candidates[current_index - 1]\n                current_index -= 1\n                \n        return result"}], "detect-capital": [{"task_id": "detect-capital", "completion": "class Solution(object):\n    def detectCapitalUse(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(word) == 1:\n            return True\n        elif word[0].isupper() and word[1:].islower():\n            return True\n        elif word[0].islower() and word[1:].isupper():\n            return True\n        elif word[0].isupper() and word[1:].isupper():\n            return True\n        else:\n            return False"}, {"task_id": "detect-capital", "completion": "class Solution(object):\n    def detectCapitalUse(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u5224\u65ad\u9996\u5b57\u6bcd\u662f\u5426\u5927\u5199\n        # 2. \u5224\u65ad\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5927\u5199\n        # 3. \u5224\u65ad\u9996\u5b57\u6bcd\u548c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5927\u5199\n        # 4. \u5224\u65ad\u9996\u5b57\u6bcd\u548c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u4e0d\u5927\u5199\n        # 5. \u5224\u65ad\u9996\u5b57\u6bcd\u548c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u4e0d\u5927\u5199\n        # 6. \u5224\u65ad\u9996\u5b57\u6bcd\u548c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u4e0d\u5927\u5199\n        # 7. \u5224\u65ad\u9996\u5b57\u6bcd\u548c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u4e0d\u5927\u5199\n        # 8. \u5224\u65ad\u9996\u5b57\u6bcd\u548c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u4e0d\u5927\u5199\n        # 9. \u5224\u65ad\u9996\u5b57\u6bcd\u548c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u4e0d\u5927\u5199\n        # 10. \u5224\u65ad\u9996\u5b57\u6bcd\u548c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u4e0d\u5927\u5199\n        # 11. \u5224\u65ad\u9996\u5b57\u6bcd\u548c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u4e0d\u5927\u5199\n        # 12. \u5224\u65ad\u9996\u5b57\u6bcd\u548c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u4e0d\u5927\u5199\n        # 13. \u5224\u65ad\u9996\u5b57\u6bcd\u548c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u4e0d\u5927\u5199\n        # 14. \u5224\u65ad\u9996\u5b57\u6bcd\u548c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u4e0d\u5927\u5199\n        # 15. \u5224\u65ad\u9996\u5b57\u6bcd\u548c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u4e0d\u5927\u5199\n        # 16. \u5224\u65ad\u9996\u5b57\u6bcd\u548c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u4e0d\u5927\u5199\n        # 17. \u5224\u65ad\u9996\u5b57\u6bcd\u548c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u4e0d\u5927\u5199\n        # 18. \u5224\u65ad\u9996\u5b57\u6bcd\u548c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u4e0d\u5927\u5199\n        # 19. \u5224\u65ad\u9996\u5b57\u6bcd\u548c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u4e0d\u5927\u5199\n        # 20. \u5224\u65ad\u9996\u5b57\u6bcd\u548c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u4e0d\u5927\u5199\n        # 21. \u5224\u65ad\u9996\u5b57\u6bcd\u548c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u4e0d\u5927\u5199\n        # 22. \u5224\u65ad\u9996\u5b57\u6bcd\u548c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u4e0d\u5927\u5199\n        # 23. \u5224\u65ad\u9996\u5b57\u6bcd\u548c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u4e0d\u5927\u5199\n        # 24. \u5224\u65ad\u9996\u5b57\u6bcd\u548c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u4e0d\u5927\u5199\n        # 25. \u5224\u65ad\u9996\u5b57\u6bcd\u548c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u4e0d\u5927\u5199\n        # 26. \u5224\u65ad\u9996\u5b57\u6bcd\u548c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u4e0d\u5927\u5199\n        # 27. \u5224\u65ad\u9996\u5b57\u6bcd\u548c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u4e0d\u5927\u5199\n        # 28. \u5224\u65ad\u9996\u5b57\u6bcd\u548c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u4e0d\u5927\u5199\n        # 29. \u5224\u65ad\u9996\u5b57\u6bcd\u548c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u4e0d\u5927\u5199\n        # 30. \u5224\u65ad\u9996\u5b57\u6bcd\u548c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u4e0d\u5927\u5199\n        # 31. \u5224\u65ad\u9996\u5b57\u6bcd\u548c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u4e0d\u5927\u5199\n        # 32. \u5224\u65ad\u9996\u5b57\u6bcd\u548c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u4e0d\u5927\u5199\n        # 33. \u5224\u65ad\u9996\u5b57\u6bcd\u548c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u4e0d\u5927\u5199\n        # 34. \u5224\u65ad\u9996\u5b57\u6bcd\u548c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u4e0d\u5927\u5199\n        # 35. \u5224\u65ad\u9996\u5b57\u6bcd\u548c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u4e0d\u5927\u5199\n        # 36. \u5224\u65ad\u9996\u5b57\u6bcd\u548c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u4e0d\u5927\u5199\n        # 37. \u5224\u65ad\u9996\u5b57\u6bcd\u548c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u4e0d\u5927\u5199\n        # 38. \u5224\u65ad\u9996\u5b57\u6bcd\u548c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u4e0d\u5927\u5199\n        # 39. \u5224\u65ad\u9996\u5b57\u6bcd\u548c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u4e0d\u5927\u5199\n        # 40. \u5224\u65ad\u9996\u5b57\u6bcd\u548c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u4e0d\u5927\u5199\n        # 41. \u5224\u65ad\u9996\u5b57\u6bcd\u548c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u4e0d\u5927\u5199\n        # 42. \u5224\u65ad\u9996\u5b57\u6bcd\u548c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u4e0d\u5927\u5199\n        # 43. \u5224\u65ad\u9996\u5b57\u6bcd\u548c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u4e0d\u5927\u5199\n        # 44. \u5224\u65ad\u9996\u5b57\u6bcd\u548c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u4e0d\u5927\u5199\n        # 45. \u5224\u65ad\u9996\u5b57\u6bcd\u548c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u4e0d\u5927\u5199\n        # 46. \u5224\u65ad\u9996"}, {"task_id": "detect-capital", "completion": "class Solution(object):\n    def detectCapitalUse(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u5224\u65ad\u9996\u5b57\u6bcd\u662f\u5426\u5927\u5199\n        # 2. \u5224\u65ad\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5927\u5199\n        # 3. \u5224\u65ad\u9996\u5b57\u6bcd\u662f\u5426\u5927\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\n        # 4. \u5224\u65ad\u9996\u5b57\u6bcd\u662f\u5426\u5927\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5927\u5199\n        # 5. \u5224\u65ad\u9996\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\n        # 6. \u5224\u65ad\u9996\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5927\u5199\n        # 7. \u5224\u65ad\u9996\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\n        # 8. \u5224\u65ad\u9996\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\n        # 9. \u5224\u65ad\u9996\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\n        # 10. \u5224\u65ad\u9996\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\n        # 11. \u5224\u65ad\u9996\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\n        # 12. \u5224\u65ad\u9996\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\n        # 13. \u5224\u65ad\u9996\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\n        # 14. \u5224\u65ad\u9996\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\n        # 15. \u5224\u65ad\u9996\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\n        # 16. \u5224\u65ad\u9996\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\n        # 17. \u5224\u65ad\u9996\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\n        # 18. \u5224\u65ad\u9996\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\n        # 19. \u5224\u65ad\u9996\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\n        # 20. \u5224\u65ad\u9996\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\n        # 21. \u5224\u65ad\u9996\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\n        # 22. \u5224\u65ad\u9996\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\n        # 23. \u5224\u65ad\u9996\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\n        # 24. \u5224\u65ad\u9996\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\n        # 25. \u5224\u65ad\u9996\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\n        # 26. \u5224\u65ad\u9996\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\n        # 27. \u5224\u65ad\u9996\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\n        # 28. \u5224\u65ad\u9996\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\n        # 29. \u5224\u65ad\u9996\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\n        # 30. \u5224\u65ad\u9996\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\n        # 31. \u5224\u65ad\u9996\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\n        # 32. \u5224\u65ad\u9996\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\n        # 33. \u5224\u65ad\u9996\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\n        # 34. \u5224\u65ad\u9996\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\n        # 35. \u5224\u65ad\u9996\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\n        # 36. \u5224\u65ad\u9996\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\n        # 37. \u5224\u65ad\u9996\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\n        # 38. \u5224\u65ad\u9996\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\n        # 39. \u5224\u65ad\u9996\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\n        # 40. \u5224\u65ad\u9996\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\n        # 41. \u5224\u65ad\u9996"}, {"task_id": "detect-capital", "completion": "class Solution(object):\n    def detectCapitalUse(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(word) == 1:\n            return True\n        \n        if word[0].isupper() and word[1:].islower():\n            return True\n        \n        if word[0].islower() and word[1:].isupper():\n            return True\n        \n        if word[0].isupper() and word[1:].isupper():\n            return True\n        \n        return False"}, {"task_id": "detect-capital", "completion": "class Solution(object):\n    def detectCapitalUse(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u68c0\u67e5\u9996\u5b57\u6bcd\u662f\u5426\u5927\u5199\n        # 2. \u68c0\u67e5\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5927\u5199\n        # 3. \u68c0\u67e5\u9996\u5b57\u6bcd\u662f\u5426\u5927\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\n        # 4. \u68c0\u67e5\u9996\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5927\u5199\n        # 5. \u68c0\u67e5\u9996\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\n        # 6. \u68c0\u67e5\u9996\u5b57\u6bcd\u662f\u5426\u5927\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5927\u5199\n        # 7. \u68c0\u67e5\u9996\u5b57\u6bcd\u662f\u5426\u5927\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\n        # 8. \u68c0\u67e5\u9996\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5927\u5199\n        # 9. \u68c0\u67e5\u9996\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\n        # 10. \u68c0\u67e5\u9996\u5b57\u6bcd\u662f\u5426\u5927\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\n        # 11. \u68c0\u67e5\u9996\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5927\u5199\n        # 12. \u68c0\u67e5\u9996\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\n        # 13. \u68c0\u67e5\u9996\u5b57\u6bcd\u662f\u5426\u5927\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\n        # 14. \u68c0\u67e5\u9996\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\n        # 15. \u68c0\u67e5\u9996\u5b57\u6bcd\u662f\u5426\u5927\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\n        # 16. \u68c0\u67e5\u9996\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\n        # 17. \u68c0\u67e5\u9996\u5b57\u6bcd\u662f\u5426\u5927\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\n        # 18. \u68c0\u67e5\u9996\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\n        # 19. \u68c0\u67e5\u9996\u5b57\u6bcd\u662f\u5426\u5927\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\n        # 20. \u68c0\u67e5\u9996\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\n        # 21. \u68c0\u67e5\u9996\u5b57\u6bcd\u662f\u5426\u5927\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\n        # 22. \u68c0\u67e5\u9996\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\n        # 23. \u68c0\u67e5\u9996\u5b57\u6bcd\u662f\u5426\u5927\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\n        # 24. \u68c0\u67e5\u9996\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\n        # 25. \u68c0\u67e5\u9996\u5b57\u6bcd\u662f\u5426\u5927\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\n        # 26. \u68c0\u67e5\u9996\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\n        # 27. \u68c0\u67e5\u9996\u5b57\u6bcd\u662f\u5426\u5927\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\n        # 28. \u68c0\u67e5\u9996\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\n        # 29. \u68c0\u67e5\u9996\u5b57\u6bcd\u662f\u5426\u5927\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\n        # 30. \u68c0\u67e5\u9996\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\n        # 31. \u68c0\u67e5\u9996\u5b57\u6bcd\u662f\u5426\u5927\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\n        # 32. \u68c0\u67e5\u9996\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\n        # 33. \u68c0\u67e5\u9996\u5b57\u6bcd\u662f\u5426\u5927\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\n        # 34. \u68c0\u67e5\u9996\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\n        # 35. \u68c0\u67e5\u9996\u5b57\u6bcd\u662f\u5426\u5927\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\n        # 36. \u68c0\u67e5\u9996\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\n        # 37. \u68c0\u67e5\u9996\u5b57\u6bcd\u662f\u5426\u5927\u5199\uff0c\u5176\u4ed6\u5b57\u6bcd\u662f\u5426\u5c0f\u5199\n        # 38. \u68c0\u67e5\u9996\u5b57\u6bcd"}], "best-time-to-buy-and-sell-stock": [{"task_id": "best-time-to-buy-and-sell-stock", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 2. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 3. \u8d2a\u5fc3\u7b97\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 4. \u4e8c\u5206\u67e5\u627e\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(nlogn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 5. \u6eda\u52a8\u6570\u7ec4\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 6. \u5355\u8c03\u6808\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 7. \u5206\u6cbb\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(nlogn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 8. \u4e8c\u53c9\u641c\u7d22\u6811\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(nlogn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 9. \u7ebf\u6bb5\u6811\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(nlogn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 10. \u6811\u72b6\u6570\u7ec4\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(nlogn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 11. \u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 12. \u6ed1\u52a8\u7a97\u53e3\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 13. \u524d\u7f00\u548c\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 14. \u6590\u6ce2\u90a3\u5951\u6570\u5217\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 15. \u6590\u6ce2\u90a3\u5951\u6570\u5217\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 16. \u6590\u6ce2\u90a3\u5951\u6570\u5217\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 17. \u6590\u6ce2\u90a3\u5951\u6570\u5217\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 18. \u6590\u6ce2\u90a3\u5951\u6570\u5217\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 19. \u6590\u6ce2\u90a3\u5951\u6570\u5217\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 20. \u6590\u6ce2\u90a3\u5951\u6570\u5217\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 21. \u6590\u6ce2\u90a3\u5951\u6570\u5217\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 22. \u6590\u6ce2\u90a3\u5951\u6570\u5217\n        # \u65f6"}, {"task_id": "best-time-to-buy-and-sell-stock", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 2. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 3. \u8d2a\u5fc3\u7b97\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 4. \u4e8c\u5206\u67e5\u627e\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(nlogn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 2. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 3. \u8d2a\u5fc3\u7b97\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 4. \u4e8c\u5206\u67e5\u627e\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(nlogn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 5. \u4e8c\u5206\u67e5\u627e\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(nlogn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 6. \u4e8c\u5206\u67e5\u627e\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(nlogn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 7. \u4e8c\u5206\u67e5\u627e\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(nlogn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 8. \u4e8c\u5206\u67e5\u627e\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(nlogn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 9. \u4e8c\u5206\u67e5\u627e\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(nlogn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 10. \u4e8c\u5206\u67e5\u627e\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(nlogn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 11. \u4e8c\u5206\u67e5\u627e\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(nlogn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 12. \u4e8c\u5206\u67e5\u627e\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(nlogn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 13. \u4e8c\u5206\u67e5\u627e\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(nlogn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 14. \u4e8c\u5206\u67e5\u627e\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(nlogn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 15. \u4e8c\u5206\u67e5\u627e\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(nlogn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 16. \u4e8c\u5206\u67e5\u627e\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(nlogn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 17. \u4e8c\u5206\u67e5\u627e\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(nlogn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 18. \u4e8c\u5206\u67e5\u627e\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(nlogn)"}, {"task_id": "best-time-to-buy-and-sell-stock", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a48 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.96%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.97%\u7684\u7528\u6237\n        # 2020/10/14 10:55\n        # 2020/10/14 10:56\n        # 2020/10/14 10:57\n        # 2020/10/14 10:58\n        # 2020/10/14 10:59\n        # 2020/10/14 11:00\n        # 2020/10/14 11:01\n        # 2020/10/14 11:02\n        # 2020/10/14 11:03\n        # 2020/10/14 11:04\n        # 2020/10/14 11:05\n        # 2020/10/14 11:06\n        # 2020/10/14 11:07\n        # 2020/10/14 11:08\n        # 2020/10/14 11:09\n        # 2020/10/14 11:10\n        # 2020/10/14 11:11\n        # 2020/10/14 11:12\n        # 2020/10/14 11:13\n        # 2020/10/14 11:14\n        # 2020/10/14 11:15\n        # 2020/10/14 11:16\n        # 2020/10/14 11:17\n        # 2020/10/14 11:18\n        # 2020/10/14 11:19\n        # 2020/10/14 11:20\n        # 2020/10/14 11:21\n        # 2020/10/14 11:22\n        # 2020/10/14 11:23\n        # 2020/10/14 11:24\n        # 2020/10/14 11:25\n        # 2020/10/14 11:26\n        # 2020/10/14 11:27\n        # 2020/10/14 11:28\n        # 2020/10/14 11:29\n        # 2020/10/14 11:30\n        # 2020/10/14 11:31\n        # 2020/10/14 11:32\n        # 2020/10/14 11:33\n        # 2020/10/14 11:34\n        # 2020/10/14 11:35\n        # 2020/10/14 11:36\n        # 2020/10/14 11:37\n        # 2020/10/14 11:38\n        # 2020/10/14 11:39"}, {"task_id": "best-time-to-buy-and-sell-stock", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a48 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.94%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.94%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a48 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.94%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.94%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a48 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.94%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.94%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a48 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.94%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.94%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a48 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.94%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.94%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a48 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.94%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.94%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a48 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.94%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.94%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a48 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.94%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.94%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742"}, {"task_id": "best-time-to-buy-and-sell-stock", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.93%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237\n\n        # res = 0\n        # for i in range(len(prices)):\n        #     for j in range(i+1, len(prices)):\n        #         res = max(res, prices[j] - prices[i])\n        # return res\n\n        # 2. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6267\u884c\u7528\u65f6\uff1a40 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.93%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237\n\n        # dp = [0] * len(prices)\n        # for i in range(1, len(prices)):\n        #     dp[i] = max(dp[i-1], prices[i] - prices[i-1])\n        # return dp[-1]\n\n        # 3. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a40 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.93%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237\n\n        # dp_min = prices[0]\n        # dp_max = 0\n        # for i in range(1, len(prices)):\n        #     dp_min = min(dp_min, prices[i])\n        #     dp_max = max(dp_max, prices[i] - dp_min)\n        # return dp_max\n\n        # 4. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a40 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.93%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237\n\n        # dp_min = prices[0]\n        # dp_max = 0\n        # for i in range(1, len(prices)):\n        #     dp_max = max(dp_max, prices[i] - dp_min)\n        #     dp_min = min(dp_min, prices[i])\n        # return dp_max\n\n        # 5. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a40 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.93%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237\n\n        # dp_min = prices[0]\n        # dp_max = 0\n        # for i in range(1, len(prices)):\n        #     dp_max = max(dp_max, prices[i] - dp_min)\n        #     dp_min = min(dp_min, prices[i])\n        # return dp_"}], "binary-tree-inorder-traversal": [{"task_id": "binary-tree-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        # M1. \u9012\u5f52\n        # \u9012\u5f52\u7684\u601d\u8def\u662f\uff1a\u5148\u904d\u5386\u5de6\u5b50\u6811\uff0c\u518d\u904d\u5386\u6839\u8282\u70b9\uff0c\u6700\u540e\u904d\u5386\u53f3\u5b50\u6811\n        # \u9012\u5f52\u7684\u7ec8\u6b62\u6761\u4ef6\u662f\uff1a\u5f53\u524d\u8282\u70b9\u4e3a\u7a7a\n        # \u9012\u5f52\u7684\u8fd4\u56de\u503c\u662f\uff1a\u5de6\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\uff0c\u6839\u8282\u70b9\u7684\u503c\uff0c\u53f3\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\n        # \u9012\u5f52\u7684\u8fd4\u56de\u503c\u662f\uff1a\u5de6\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\uff0c\u6839\u8282\u70b9\u7684\u503c\uff0c\u53f3\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\n        # \u9012\u5f52\u7684\u8fd4\u56de\u503c\u662f\uff1a\u5de6\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\uff0c\u6839\u8282\u70b9\u7684\u503c\uff0c\u53f3\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\n        # \u9012\u5f52\u7684\u8fd4\u56de\u503c\u662f\uff1a\u5de6\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\uff0c\u6839\u8282\u70b9\u7684\u503c\uff0c\u53f3\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\n        # \u9012\u5f52\u7684\u8fd4\u56de\u503c\u662f\uff1a\u5de6\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\uff0c\u6839\u8282\u70b9\u7684\u503c\uff0c\u53f3\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\n        # \u9012\u5f52\u7684\u8fd4\u56de\u503c\u662f\uff1a\u5de6\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\uff0c\u6839\u8282\u70b9\u7684\u503c\uff0c\u53f3\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\n        # \u9012\u5f52\u7684\u8fd4\u56de\u503c\u662f\uff1a\u5de6\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\uff0c\u6839\u8282\u70b9\u7684\u503c\uff0c\u53f3\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\n        # \u9012\u5f52\u7684\u8fd4\u56de\u503c\u662f\uff1a\u5de6\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\uff0c\u6839\u8282\u70b9\u7684\u503c\uff0c\u53f3\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\n        # \u9012\u5f52\u7684\u8fd4\u56de\u503c\u662f\uff1a\u5de6\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\uff0c\u6839\u8282\u70b9\u7684\u503c\uff0c\u53f3\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\n        # \u9012\u5f52\u7684\u8fd4\u56de\u503c\u662f\uff1a\u5de6\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\uff0c\u6839\u8282\u70b9\u7684\u503c\uff0c\u53f3\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\n        # \u9012\u5f52\u7684\u8fd4\u56de\u503c\u662f\uff1a\u5de6\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\uff0c\u6839\u8282\u70b9\u7684\u503c\uff0c\u53f3\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\n        # \u9012\u5f52\u7684\u8fd4\u56de\u503c\u662f\uff1a\u5de6\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\uff0c\u6839\u8282\u70b9\u7684\u503c\uff0c\u53f3\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\n        # \u9012\u5f52\u7684\u8fd4\u56de\u503c\u662f\uff1a\u5de6\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\uff0c\u6839\u8282\u70b9\u7684\u503c\uff0c\u53f3\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\n        # \u9012\u5f52\u7684\u8fd4\u56de\u503c\u662f\uff1a\u5de6\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\uff0c\u6839\u8282\u70b9\u7684\u503c\uff0c\u53f3\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\n        # \u9012\u5f52\u7684\u8fd4\u56de\u503c\u662f\uff1a\u5de6\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\uff0c\u6839\u8282\u70b9\u7684\u503c\uff0c\u53f3\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\n        # \u9012\u5f52\u7684\u8fd4\u56de\u503c\u662f\uff1a\u5de6\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\uff0c\u6839\u8282\u70b9\u7684\u503c\uff0c\u53f3\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\n        # \u9012\u5f52\u7684\u8fd4\u56de\u503c\u662f\uff1a\u5de6\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\uff0c\u6839\u8282\u70b9\u7684\u503c\uff0c\u53f3\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\n        # \u9012\u5f52\u7684\u8fd4\u56de\u503c\u662f\uff1a\u5de6\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\uff0c\u6839\u8282\u70b9\u7684\u503c\uff0c\u53f3\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\n        # \u9012\u5f52\u7684\u8fd4\u56de\u503c\u662f\uff1a\u5de6"}, {"task_id": "binary-tree-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        # M1. \u9012\u5f52\n        # \u9012\u5f52\u7684\u601d\u60f3\u662f\uff1a\u5148\u904d\u5386\u5de6\u5b50\u6811\uff0c\u518d\u904d\u5386\u6839\u8282\u70b9\uff0c\u6700\u540e\u904d\u5386\u53f3\u5b50\u6811\n        # \u9012\u5f52\u7684\u903b\u8f91\u662f\uff1a\u5148\u904d\u5386\u5de6\u5b50\u6811\uff0c\u518d\u904d\u5386\u6839\u8282\u70b9\uff0c\u6700\u540e\u904d\u5386\u53f3\u5b50\u6811\n        # \u9012\u5f52\u7684\u7ec8\u6b62\u6761\u4ef6\u662f\uff1a\u5f53\u524d\u8282\u70b9\u4e3a\u7a7a\n        # \u9012\u5f52\u7684\u8fd4\u56de\u503c\u662f\uff1a\u5de6\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\uff0c\u6839\u8282\u70b9\u7684\u503c\uff0c\u53f3\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\n        # \u9012\u5f52\u7684\u904d\u5386\u987a\u5e8f\u662f\uff1a\u5148\u904d\u5386\u5de6\u5b50\u6811\uff0c\u518d\u904d\u5386\u6839\u8282\u70b9\uff0c\u6700\u540e\u904d\u5386\u53f3\u5b50\u6811\n        # \u9012\u5f52\u7684\u904d\u5386\u7ed3\u679c\u662f\uff1a\u5de6\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\uff0c\u6839\u8282\u70b9\u7684\u503c\uff0c\u53f3\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\n        # \u9012\u5f52\u7684\u904d\u5386\u7ed3\u679c\u662f\uff1a\u5de6\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\uff0c\u6839\u8282\u70b9\u7684\u503c\uff0c\u53f3\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\n        # \u9012\u5f52\u7684\u904d\u5386\u7ed3\u679c\u662f\uff1a\u5de6\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\uff0c\u6839\u8282\u70b9\u7684\u503c\uff0c\u53f3\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\n        # \u9012\u5f52\u7684\u904d\u5386\u7ed3\u679c\u662f\uff1a\u5de6\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\uff0c\u6839\u8282\u70b9\u7684\u503c\uff0c\u53f3\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\n        # \u9012\u5f52\u7684\u904d\u5386\u7ed3\u679c\u662f\uff1a\u5de6\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\uff0c\u6839\u8282\u70b9\u7684\u503c\uff0c\u53f3\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\n        # \u9012\u5f52\u7684\u904d\u5386\u7ed3\u679c\u662f\uff1a\u5de6\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\uff0c\u6839\u8282\u70b9\u7684\u503c\uff0c\u53f3\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\n        # \u9012\u5f52\u7684\u904d\u5386\u7ed3\u679c\u662f\uff1a\u5de6\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\uff0c\u6839\u8282\u70b9\u7684\u503c\uff0c\u53f3\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\n        # \u9012\u5f52\u7684\u904d\u5386\u7ed3\u679c\u662f\uff1a\u5de6\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\uff0c\u6839\u8282\u70b9\u7684\u503c\uff0c\u53f3\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\n        # \u9012\u5f52\u7684\u904d\u5386\u7ed3\u679c\u662f\uff1a\u5de6\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\uff0c\u6839\u8282\u70b9\u7684\u503c\uff0c\u53f3\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\n        # \u9012\u5f52\u7684\u904d\u5386\u7ed3\u679c\u662f\uff1a\u5de6\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\uff0c\u6839\u8282\u70b9\u7684\u503c\uff0c\u53f3\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\n        # \u9012\u5f52\u7684\u904d\u5386\u7ed3\u679c\u662f\uff1a\u5de6\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\uff0c\u6839\u8282\u70b9\u7684\u503c\uff0c\u53f3\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\n        # \u9012\u5f52\u7684\u904d\u5386\u7ed3\u679c\u662f\uff1a\u5de6\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\uff0c\u6839\u8282\u70b9\u7684\u503c\uff0c\u53f3\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\n        # \u9012\u5f52\u7684\u904d\u5386\u7ed3\u679c\u662f\uff1a\u5de6\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\uff0c\u6839\u8282\u70b9\u7684\u503c\uff0c\u53f3\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\n        # \u9012\u5f52\u7684\u904d\u5386\u7ed3\u679c\u662f\uff1a\u5de6\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\uff0c\u6839\u8282\u70b9\u7684"}, {"task_id": "binary-tree-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        # M1. \u9012\u5f52\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u5176\u4e2d n \u662f\u4e8c\u53c9\u6811\u7684\u8282\u70b9\u4e2a\u6570\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u5176\u4e2d n \u662f\u4e8c\u53c9\u6811\u7684\u8282\u70b9\u4e2a\u6570\u3002\n        # \u9012\u5f52\u8c03\u7528\u7684\u5c42\u6570\u4e0d\u4f1a\u8d85\u8fc7\u6811\u7684\u9ad8\u5ea6\uff0c\u56e0\u6b64\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a O(h)\uff0c\n        # \u6070\u597d\u662f\u4e8c\u53c9\u6811\u7684\u9ad8\u5ea6\u3002\n        # \u5f53\u6811\u7684\u9ad8\u5ea6\u4e3a h \u65f6\uff0c\u6709 h \u5c42\u8c03\u7528\u6808\u3002\n        # \u6bcf\u4e00\u5c42\u8c03\u7528\u6808\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a O(h)\uff0c\u56e0\u6b64\u603b\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a O(h)\u3002\n        # \u5f53\u6811\u7684\u9ad8\u5ea6\u4e3a h \u65f6\uff0c\u6709 h-1 \u5c42\u9012\u5f52\u8c03\u7528\uff0c\u6bcf\u4e00\u5c42\u9012\u5f52\u8c03\u7528\u4e2d\u6709 2h-1 \u4e2a\u8282\u70b9\u9700\u8981\u8bbf\u95ee\uff0c\n        # \u56e0\u6b64\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n)\u3002\n        # \u5f53\u6811\u7684\u9ad8\u5ea6\u4e3a h \u65f6\uff0c\u6709 h-1 \u5c42\u9012\u5f52\u8c03\u7528\uff0c\u6bcf\u4e00\u5c42\u9012\u5f52\u8c03\u7528\u4e2d\u6709 2h-1 \u4e2a\u8282\u70b9\u9700\u8981\u8bbf\u95ee\uff0c\n        # \u56e0\u6b64\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n)\u3002\n        # \u5f53\u6811\u7684\u9ad8\u5ea6\u4e3a h \u65f6\uff0c\u6709 h-1 \u5c42\u9012\u5f52\u8c03\u7528\uff0c\u6bcf\u4e00\u5c42\u9012\u5f52\u8c03\u7528\u4e2d\u6709 2h-1 \u4e2a\u8282\u70b9\u9700\u8981\u8bbf\u95ee\uff0c\n        # \u56e0\u6b64\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n)\u3002\n        # \u5f53\u6811\u7684\u9ad8\u5ea6\u4e3a h \u65f6\uff0c\u6709 h-1 \u5c42\u9012\u5f52\u8c03\u7528\uff0c\u6bcf\u4e00\u5c42\u9012\u5f52\u8c03\u7528\u4e2d\u6709 2h-1 \u4e2a\u8282\u70b9\u9700\u8981\u8bbf\u95ee\uff0c\n        # \u56e0\u6b64\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n)\u3002\n        # \u5f53\u6811\u7684\u9ad8\u5ea6\u4e3a h \u65f6\uff0c\u6709 h-1 \u5c42\u9012\u5f52\u8c03\u7528\uff0c\u6bcf\u4e00\u5c42\u9012\u5f52\u8c03\u7528\u4e2d\u6709 2h-1 \u4e2a\u8282\u70b9\u9700\u8981\u8bbf\u95ee\uff0c\n        # \u56e0\u6b64\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n)\u3002\n        # \u5f53\u6811\u7684\u9ad8\u5ea6\u4e3a h \u65f6\uff0c\u6709 h-1 \u5c42\u9012\u5f52\u8c03\u7528\uff0c\u6bcf\u4e00\u5c42\u9012\u5f52\u8c03\u7528\u4e2d\u6709 2h-1 \u4e2a\u8282\u70b9\u9700\u8981\u8bbf\u95ee\uff0c\n        # \u56e0\u6b64\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n)\u3002\n        # \u5f53\u6811\u7684\u9ad8\u5ea6\u4e3a h \u65f6\uff0c\u6709 h-1 \u5c42\u9012\u5f52\u8c03\u7528\uff0c\u6bcf\u4e00\u5c42\u9012\u5f52\u8c03\u7528\u4e2d\u6709 2h-1 \u4e2a\u8282\u70b9\u9700\u8981\u8bbf\u95ee\uff0c\n        # \u56e0\u6b64\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n)\u3002\n        # \u5f53\u6811\u7684\u9ad8\u5ea6\u4e3a h \u65f6\uff0c\u6709 h-1 \u5c42\u9012\u5f52\u8c03\u7528\uff0c\u6bcf\u4e00\u5c42\u9012\u5f52\u8c03\u7528\u4e2d\u6709 2h-1 \u4e2a\u8282\u70b9\u9700\u8981\u8bbf\u95ee\uff0c\n        # \u56e0\u6b64\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n)\u3002\n        # \u5f53\u6811\u7684\u9ad8\u5ea6\u4e3a h \u65f6\uff0c\u6709 h-1 \u5c42\u9012\u5f52\u8c03\u7528\uff0c\u6bcf\u4e00\u5c42\u9012\u5f52\u8c03\u7528\u4e2d\u6709 2h-1 \u4e2a\u8282\u70b9\u9700\u8981\u8bbf\u95ee\uff0c\n        # \u56e0\u6b64\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n)\u3002\n        # \u5f53\u6811\u7684\u9ad8\u5ea6\u4e3a h \u65f6\uff0c\u6709 h-1 \u5c42\u9012\u5f52\u8c03\u7528\uff0c\u6bcf\u4e00\u5c42\u9012\u5f52\u8c03\u7528\u4e2d\u6709 2h-1 \u4e2a\u8282\u70b9\u9700"}, {"task_id": "binary-tree-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        # M1. \u9012\u5f52\n        # \u9012\u5f52\u7684\u601d\u60f3\u662f\uff1a\u5148\u904d\u5386\u5de6\u5b50\u6811\uff0c\u518d\u904d\u5386\u6839\u8282\u70b9\uff0c\u6700\u540e\u904d\u5386\u53f3\u5b50\u6811\n        # \u9012\u5f52\u7684\u7ec8\u6b62\u6761\u4ef6\u662f\uff1a\u5f53\u524d\u8282\u70b9\u4e3a\u7a7a\n        # \u9012\u5f52\u7684\u9012\u63a8\u6761\u4ef6\u662f\uff1a\u5148\u904d\u5386\u5de6\u5b50\u6811\uff0c\u518d\u904d\u5386\u6839\u8282\u70b9\uff0c\u6700\u540e\u904d\u5386\u53f3\u5b50\u6811\n        # \u9012\u5f52\u7684\u9012\u63a8\u6761\u4ef6\u662f\uff1a\u5148\u904d\u5386\u5de6\u5b50\u6811\uff0c\u518d\u904d\u5386\u6839\u8282\u70b9\uff0c\u6700\u540e\u904d\u5386\u53f3\u5b50\u6811\n        # \u9012\u5f52\u7684\u9012\u63a8\u6761\u4ef6\u662f\uff1a\u5148\u904d\u5386\u5de6\u5b50\u6811\uff0c\u518d\u904d\u5386\u6839\u8282\u70b9\uff0c\u6700\u540e\u904d\u5386\u53f3\u5b50\u6811\n        # \u9012\u5f52\u7684\u9012\u63a8\u6761\u4ef6\u662f\uff1a\u5148\u904d\u5386\u5de6\u5b50\u6811\uff0c\u518d\u904d\u5386\u6839\u8282\u70b9\uff0c\u6700\u540e\u904d\u5386\u53f3\u5b50\u6811\n        # \u9012\u5f52\u7684\u9012\u63a8\u6761\u4ef6\u662f\uff1a\u5148\u904d\u5386\u5de6\u5b50\u6811\uff0c\u518d\u904d\u5386\u6839\u8282\u70b9\uff0c\u6700\u540e\u904d\u5386\u53f3\u5b50\u6811\n        # \u9012\u5f52\u7684\u9012\u63a8\u6761\u4ef6\u662f\uff1a\u5148\u904d\u5386\u5de6\u5b50\u6811\uff0c\u518d\u904d\u5386\u6839\u8282\u70b9\uff0c\u6700\u540e\u904d\u5386\u53f3\u5b50\u6811\n        # \u9012\u5f52\u7684\u9012\u63a8\u6761\u4ef6\u662f\uff1a\u5148\u904d\u5386\u5de6\u5b50\u6811\uff0c\u518d\u904d\u5386\u6839\u8282\u70b9\uff0c\u6700\u540e\u904d\u5386\u53f3\u5b50\u6811\n        # \u9012\u5f52\u7684\u9012\u63a8\u6761\u4ef6\u662f\uff1a\u5148\u904d\u5386\u5de6\u5b50\u6811\uff0c\u518d\u904d\u5386\u6839\u8282\u70b9\uff0c\u6700\u540e\u904d\u5386\u53f3\u5b50\u6811\n        # \u9012\u5f52\u7684\u9012\u63a8\u6761\u4ef6\u662f\uff1a\u5148\u904d\u5386\u5de6\u5b50\u6811\uff0c\u518d\u904d\u5386\u6839\u8282\u70b9\uff0c\u6700\u540e\u904d\u5386\u53f3\u5b50\u6811\n        # \u9012\u5f52\u7684\u9012\u63a8\u6761\u4ef6\u662f\uff1a\u5148\u904d\u5386\u5de6\u5b50\u6811\uff0c\u518d\u904d\u5386\u6839\u8282\u70b9\uff0c\u6700\u540e\u904d\u5386\u53f3\u5b50\u6811\n        # \u9012\u5f52\u7684\u9012\u63a8\u6761\u4ef6\u662f\uff1a\u5148\u904d\u5386\u5de6\u5b50\u6811\uff0c\u518d\u904d\u5386\u6839\u8282\u70b9\uff0c\u6700\u540e\u904d\u5386\u53f3\u5b50\u6811\n        # \u9012\u5f52\u7684\u9012\u63a8\u6761\u4ef6\u662f\uff1a\u5148\u904d\u5386\u5de6\u5b50\u6811\uff0c\u518d\u904d\u5386\u6839\u8282\u70b9\uff0c\u6700\u540e\u904d\u5386\u53f3\u5b50\u6811\n        # \u9012\u5f52\u7684\u9012\u63a8\u6761\u4ef6\u662f\uff1a\u5148\u904d\u5386\u5de6\u5b50\u6811\uff0c\u518d\u904d\u5386\u6839\u8282\u70b9\uff0c\u6700\u540e\u904d\u5386\u53f3\u5b50\u6811\n        # \u9012\u5f52\u7684\u9012\u63a8\u6761\u4ef6\u662f\uff1a\u5148\u904d\u5386\u5de6\u5b50\u6811\uff0c\u518d\u904d\u5386\u6839\u8282\u70b9\uff0c\u6700\u540e\u904d\u5386\u53f3\u5b50\u6811\n        # \u9012\u5f52\u7684\u9012\u63a8\u6761\u4ef6\u662f\uff1a\u5148\u904d\u5386\u5de6\u5b50\u6811\uff0c\u518d\u904d\u5386\u6839\u8282\u70b9\uff0c\u6700\u540e\u904d\u5386\u53f3\u5b50\u6811\n        # \u9012\u5f52\u7684\u9012\u63a8\u6761\u4ef6\u662f\uff1a\u5148\u904d\u5386\u5de6\u5b50\u6811\uff0c\u518d\u904d\u5386\u6839\u8282\u70b9\uff0c\u6700\u540e\u904d\u5386\u53f3\u5b50\u6811\n        # \u9012"}, {"task_id": "binary-tree-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        # M1. \u9012\u5f52\n        # \u9012\u5f52\u7684\u601d\u60f3\u662f\uff1a\u5148\u904d\u5386\u5de6\u5b50\u6811\uff0c\u518d\u904d\u5386\u6839\u8282\u70b9\uff0c\u6700\u540e\u904d\u5386\u53f3\u5b50\u6811\n        # \u9012\u5f52\u7684\u903b\u8f91\u662f\uff1a\u5148\u904d\u5386\u5de6\u5b50\u6811\uff0c\u518d\u904d\u5386\u6839\u8282\u70b9\uff0c\u6700\u540e\u904d\u5386\u53f3\u5b50\u6811\n        # \u9012\u5f52\u7684\u7ec8\u6b62\u6761\u4ef6\u662f\uff1a\u5f53\u524d\u8282\u70b9\u4e3a\u7a7a\n        # \u9012\u5f52\u7684\u8fd4\u56de\u503c\u662f\uff1a\u5de6\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\uff0c\u6839\u8282\u70b9\u7684\u503c\uff0c\u53f3\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\n        # \u9012\u5f52\u7684\u904d\u5386\u987a\u5e8f\u662f\uff1a\u5148\u904d\u5386\u5de6\u5b50\u6811\uff0c\u518d\u904d\u5386\u6839\u8282\u70b9\uff0c\u6700\u540e\u904d\u5386\u53f3\u5b50\u6811\n        # \u9012\u5f52\u7684\u904d\u5386\u7ed3\u679c\u662f\uff1a\u5de6\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\uff0c\u6839\u8282\u70b9\u7684\u503c\uff0c\u53f3\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\n        # \u9012\u5f52\u7684\u904d\u5386\u7ed3\u679c\u662f\uff1a\u5de6\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\uff0c\u6839\u8282\u70b9\u7684\u503c\uff0c\u53f3\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\n        # \u9012\u5f52\u7684\u904d\u5386\u7ed3\u679c\u662f\uff1a\u5de6\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\uff0c\u6839\u8282\u70b9\u7684\u503c\uff0c\u53f3\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\n        # \u9012\u5f52\u7684\u904d\u5386\u7ed3\u679c\u662f\uff1a\u5de6\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\uff0c\u6839\u8282\u70b9\u7684\u503c\uff0c\u53f3\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\n        # \u9012\u5f52\u7684\u904d\u5386\u7ed3\u679c\u662f\uff1a\u5de6\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\uff0c\u6839\u8282\u70b9\u7684\u503c\uff0c\u53f3\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\n        # \u9012\u5f52\u7684\u904d\u5386\u7ed3\u679c\u662f\uff1a\u5de6\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\uff0c\u6839\u8282\u70b9\u7684\u503c\uff0c\u53f3\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\n        # \u9012\u5f52\u7684\u904d\u5386\u7ed3\u679c\u662f\uff1a\u5de6\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\uff0c\u6839\u8282\u70b9\u7684\u503c\uff0c\u53f3\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\n        # \u9012\u5f52\u7684\u904d\u5386\u7ed3\u679c\u662f\uff1a\u5de6\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\uff0c\u6839\u8282\u70b9\u7684\u503c\uff0c\u53f3\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\n        # \u9012\u5f52\u7684\u904d\u5386\u7ed3\u679c\u662f\uff1a\u5de6\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\uff0c\u6839\u8282\u70b9\u7684\u503c\uff0c\u53f3\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\n        # \u9012\u5f52\u7684\u904d\u5386\u7ed3\u679c\u662f\uff1a\u5de6\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\uff0c\u6839\u8282\u70b9\u7684\u503c\uff0c\u53f3\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\n        # \u9012\u5f52\u7684\u904d\u5386\u7ed3\u679c\u662f\uff1a\u5de6\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\uff0c\u6839\u8282\u70b9\u7684\u503c\uff0c\u53f3\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\n        # \u9012\u5f52\u7684\u904d\u5386\u7ed3\u679c\u662f\uff1a\u5de6\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\uff0c\u6839\u8282\u70b9\u7684\u503c\uff0c\u53f3\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\n        # \u9012\u5f52\u7684\u904d\u5386\u7ed3\u679c\u662f\uff1a\u5de6\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\uff0c\u6839\u8282\u70b9\u7684\u503c\uff0c\u53f3\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\n        # \u9012\u5f52\u7684\u904d\u5386\u7ed3\u679c\u662f\uff1a\u5de6\u5b50\u6811\u7684\u904d\u5386\u7ed3\u679c\uff0c\u6839\u8282\u70b9\u7684"}], "construct-binary-tree-from-preorder-and-inorder-traversal": [{"task_id": "construct-binary-tree-from-preorder-and-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not preorder:\n            return None\n        \n        root = TreeNode(preorder[0])\n        root_index = inorder.index(preorder[0])\n        root.left = self.buildTree(preorder[1:root_index+1], inorder[:root_index])\n        root.right = self.buildTree(preorder[root_index+1:], inorder[root_index+1:])\n        \n        return root"}, {"task_id": "construct-binary-tree-from-preorder-and-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not preorder:\n            return None\n        \n        root = TreeNode(preorder[0])\n        root_index = inorder.index(preorder[0])\n        root.left = self.buildTree(preorder[1:root_index+1], inorder[:root_index])\n        root.right = self.buildTree(preorder[root_index+1:], inorder[root_index+1:])\n        \n        return root"}, {"task_id": "construct-binary-tree-from-preorder-and-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not preorder:\n            return None\n        \n        root = TreeNode(preorder[0])\n        root_index = inorder.index(preorder[0])\n        root.left = self.buildTree(preorder[1:root_index+1], inorder[:root_index])\n        root.right = self.buildTree(preorder[root_index+1:], inorder[root_index+1:])\n        \n        return root"}, {"task_id": "construct-binary-tree-from-preorder-and-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not preorder:\n            return None\n        \n        root = TreeNode(preorder[0])\n        root_index = inorder.index(preorder[0])\n        root.left = self.buildTree(preorder[1:root_index+1], inorder[:root_index])\n        root.right = self.buildTree(preorder[root_index+1:], inorder[root_index+1:])\n        \n        return root"}, {"task_id": "construct-binary-tree-from-preorder-and-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not preorder:\n            return None\n        \n        root = TreeNode(preorder[0])\n        root_index = inorder.index(preorder[0])\n        root.left = self.buildTree(preorder[1:root_index+1], inorder[:root_index])\n        root.right = self.buildTree(preorder[root_index+1:], inorder[root_index+1:])\n        \n        return root"}], "remove-invalid-parentheses": [{"task_id": "remove-invalid-parentheses", "completion": "class Solution(object):\n    def removeInvalidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        \n        def isValid(s):\n            stack = []\n            for c in s:\n                if c == '(':\n                    stack.append(c)\n                elif c == ')':\n                    if not stack:\n                        return False\n                    else:\n                        stack.pop()\n            return not stack\n        \n        def backtrack(s, start, end, res):\n            if start == end:\n                if isValid(s):\n                    res.append(s)\n                return\n            for i in range(start, end + 1):\n                if s[i] == '(' or s[i] == ')':\n                    s[i], s[start] = s[start], s[i]\n                    backtrack(s, start + 1, end, res)\n                    s[i], s[start] = s[start], s[i]\n        \n        res = []\n        backtrack(list(s), 0, len(s) - 1, res)\n        return res"}, {"task_id": "remove-invalid-parentheses", "completion": "class Solution(object):\n    def removeInvalidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        \n        def isValid(s):\n            stack = []\n            for c in s:\n                if c == '(':\n                    stack.append(c)\n                elif c == ')':\n                    if not stack:\n                        return False\n                    else:\n                        stack.pop()\n            return not stack\n        \n        def backtrack(s, start, end, res):\n            if start == end:\n                if isValid(s):\n                    res.append(s)\n                return\n            \n            for i in range(start, end + 1):\n                if s[i] == '(' or s[i] == ')':\n                    s[i], s[start] = s[start], s[i]\n                    backtrack(s, start + 1, end, res)\n                    s[i], s[start] = s[start], s[i]\n        \n        res = []\n        backtrack(list(s), 0, len(s) - 1, res)\n        return res"}, {"task_id": "remove-invalid-parentheses", "completion": "class Solution(object):\n    def removeInvalidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        \n        def isValid(s):\n            stack = []\n            for c in s:\n                if c == '(':\n                    stack.append(c)\n                elif c == ')':\n                    if not stack:\n                        return False\n                    else:\n                        stack.pop()\n            return not stack\n        \n        def backtrack(s, start, end, res):\n            if start >= end:\n                if isValid(s):\n                    res.append(s)\n                return\n            \n            for i in range(start, end + 1):\n                if s[i] == '(' or s[i] == ')':\n                    s_copy = s[:i] + s[i + 1:]\n                    backtrack(s_copy, start, i - 1, res)\n                    backtrack(s_copy, i + 1, end, res)\n        \n        res = []\n        backtrack(s, 0, len(s) - 1, res)\n        return res"}, {"task_id": "remove-invalid-parentheses", "completion": "class Solution(object):\n    def removeInvalidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        \n        def isValid(s):\n            stack = []\n            for c in s:\n                if c == '(':\n                    stack.append(c)\n                elif c == ')':\n                    if not stack:\n                        return False\n                    stack.pop()\n            return not stack\n        \n        def backtrack(s, start, end, res):\n            if start == end:\n                if isValid(s):\n                    res.append(s)\n                return\n            for i in range(start, end + 1):\n                if s[i] == '(' or s[i] == ')':\n                    s[i], s[start] = s[start], s[i]\n                    backtrack(s, start + 1, end, res)\n                    s[i], s[start] = s[start], s[i]\n        \n        res = []\n        backtrack(list(s), 0, len(s) - 1, res)\n        return res"}, {"task_id": "remove-invalid-parentheses", "completion": "class Solution(object):\n    def removeInvalidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        \n        def isValid(s):\n            stack = []\n            for c in s:\n                if c == '(':\n                    stack.append(c)\n                elif c == ')':\n                    if not stack:\n                        return False\n                    else:\n                        stack.pop()\n            return not stack\n        \n        def backtrack(s, start, end, res):\n            if start >= end:\n                if isValid(s):\n                    res.append(s)\n                return\n            for i in range(start, end + 1):\n                if s[i] == '(' or s[i] == ')':\n                    backtrack(s[:i] + s[i+1:], start, i-1, res)\n                    backtrack(s[:i] + s[i+1:], i+1, end, res)\n        \n        res = []\n        backtrack(s, 0, len(s) - 1, res)\n        return res"}], "merge-k-sorted-lists": [{"task_id": "merge-k-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        \n        # 1. Create a new linked list\n        # 2. Iterate through the list of linked lists\n        # 3. Compare the head of each linked list with the head of the new linked list\n        # 4. If the head of the new linked list is greater than the head of the linked list,\n        #    then move to the next node in the new linked list\n        # 5. If the head of the new linked list is less than the head of the linked list,\n        #    then move to the next node in the linked list\n        # 6. If the head of the new linked list is equal to the head of the linked list,\n        #    then add the head of the linked list to the new linked list and move to the next node in the linked list\n        # 7. Repeat steps 3-6 until the end of the linked list is reached\n        # 8. Return the new linked list\n        \n        # Create a new linked list\n        new_list = ListNode(0)\n        # Create a pointer to the head of the new linked list\n        head = new_list\n        \n        # Iterate through the list of linked lists\n        for i in range(len(lists)):\n            # Create a pointer to the head of the linked list\n            current = lists[i]\n            # Iterate through the linked list\n            while current:\n                # Compare the head of the new linked list with the head of the linked list\n                if current.val < head.val:\n                    # If the head of the new linked list is greater than the head of the linked list,\n                    # then move to the next node in the new linked list\n                    head = head.next\n                else:\n                    # If the head of the new linked list is less than the head of the linked list,\n                    # then move to the next node in the linked list\n                    current = current.next\n                # If the head of the new linked list is equal to the head of the linked list,\n                # then add the head of the linked list to the new linked list and move to the next node in the linked list\n                if current and current.val == head.val:\n                    head.next = ListNode(current.val)\n                    head = head.next\n                    current = current.next\n        # Return the new linked list\n        return new_list.next"}, {"task_id": "merge-k-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        \n        # 1. Create a dummy node\n        dummy = ListNode(0)\n        # 2. Create a pointer to the dummy node\n        curr = dummy\n        # 3. Create a pointer to the head of each linked list\n        heads = [head for head in lists if head]\n        # 4. While there are still linked lists to merge\n        while heads:\n            # 5. Find the smallest element in the linked lists\n            min_head = min(heads, key=lambda x: x.val)\n            # 6. Append the smallest element to the merged list\n            curr.next = min_head\n            # 7. Move the pointer to the next node\n            curr = curr.next\n            # 8. Remove the smallest element from the linked lists\n            heads.remove(min_head)\n            # 9. If the next node is not None, add it to the linked lists\n            if min_head.next:\n                heads.append(min_head.next)\n        # 10. Return the dummy node\n        return dummy.next"}, {"task_id": "merge-k-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        \n        # Merge two sorted linked lists\n        def mergeTwoLists(l1, l2):\n            dummy = ListNode(0)\n            curr = dummy\n            while l1 and l2:\n                if l1.val < l2.val:\n                    curr.next = l1\n                    l1 = l1.next\n                else:\n                    curr.next = l2\n                    l2 = l2.next\n                curr = curr.next\n            curr.next = l1 or l2\n            return dummy.next\n        \n        # Merge k sorted linked lists\n        def mergeKLists(lists):\n            if not lists:\n                return None\n            if len(lists) == 1:\n                return lists[0]\n            mid = len(lists) // 2\n            left = mergeKLists(lists[:mid])\n            right = mergeKLists(lists[mid:])\n            return mergeTwoLists(left, right)\n        \n        return mergeKLists(lists)"}, {"task_id": "merge-k-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        \n        # 1. Create a dummy node\n        dummy = ListNode(0)\n        # 2. Create a pointer to the dummy node\n        curr = dummy\n        # 3. Create a pointer to the head of each linked list\n        heads = [head for head in lists if head]\n        # 4. While there are still linked lists to merge\n        while heads:\n            # 5. Find the smallest element in the list of heads\n            min_head = min(heads, key=lambda x: x.val)\n            # 6. Append the smallest element to the merged list\n            curr.next = min_head\n            # 7. Move the pointer to the next node\n            curr = curr.next\n            # 8. Remove the smallest element from the list of heads\n            heads.remove(min_head)\n            # 9. If the next node is not None, add it to the list of heads\n            if min_head.next:\n                heads.append(min_head.next)\n        # 10. Return the dummy node\n        return dummy.next"}, {"task_id": "merge-k-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        \n        # 1. Create a new linked list\n        # 2. Iterate through the linked lists\n        # 3. Compare the values of the linked lists\n        # 4. If the value of the linked list is less than the value of the new linked list,\n        #    then append the value to the new linked list\n        # 5. If the value of the linked list is greater than the value of the new linked list,\n        #    then append the value to the new linked list\n        # 6. Repeat steps 3-5 until the end of the linked list\n        # 7. Return the new linked list\n        \n        # Create a new linked list\n        new_list = ListNode(0)\n        # Create a pointer to the new linked list\n        new_list_pointer = new_list\n        # Create a pointer to the end of the new linked list\n        new_list_end = new_list\n        \n        # Iterate through the linked lists\n        for linked_list in lists:\n            # Create a pointer to the linked list\n            linked_list_pointer = linked_list\n            # Create a pointer to the end of the linked list\n            linked_list_end = linked_list\n            \n            # Compare the values of the linked lists\n            while linked_list_pointer is not None and linked_list_end is not None:\n                # If the value of the linked list is less than the value of the new linked list,\n                # then append the value to the new linked list\n                if linked_list_pointer.val < new_list_pointer.val:\n                    new_list_end.next = linked_list_pointer\n                    new_list_end = linked_list_pointer\n                    linked_list_pointer = linked_list_pointer.next\n                # If the value of the linked list is greater than the value of the new linked list,\n                # then append the value to the new linked list\n                else:\n                    new_list_pointer.next = linked_list_pointer\n                    new_list_pointer = linked_list_pointer\n                    linked_list_pointer = linked_list_pointer.next\n                    \n        # Return the new linked list\n        return new_list.next"}], "palindrome-partitioning-ii": [{"task_id": "palindrome-partitioning-ii", "completion": "class Solution(object):\n    def minCut(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # dp[i][j] = min cuts needed for a palindrome partitioning of s[:j]\n        # dp[i][j] = min(dp[i][k] + dp[k+1][j]) + 1\n        # dp[i][i] = 0\n        # dp[i][i+1] = 0\n        # dp[i][i+2] = 0\n        # dp[i][i+3] = 0\n        # ...\n        # dp[i][i+k] = 0\n        # dp[i][i+k+1] = 0\n        # dp[i][i+k+2] = 0\n        # dp[i][i+k+3] = 0\n        # ...\n        # dp[i][i+k+n] = 0\n        # dp[i][i+k+n+1] = 0\n        # dp[i][i+k+n+2] = 0\n        # dp[i][i+k+n+3] = 0\n        # ...\n        # dp[i][i+k+n+m] = 0\n        # dp[i][i+k+n+m+1] = 0\n        # dp[i][i+k+n+m+2] = 0\n        # dp[i][i+k+n+m+3] = 0\n        # ...\n        # dp[i][i+k+n+m+p] = 0\n        # dp[i][i+k+n+m+p+1] = 0\n        # dp[i][i+k+n+m+p+2] = 0\n        # dp[i][i+k+n+m+p+3] = 0\n        # ...\n        # dp[i][i+k+n+m+p+q] = 0\n        # dp[i][i+k+n+m+p+q+1] = 0\n        # dp[i][i+k+n+m+p+q+2] = 0\n        # dp[i][i+k+n+m+p+q+3] = 0\n        # ...\n        # dp[i][i+k+n+m+p+q+r] = 0\n        # dp[i][i+k+n+m+p+q+r+1] = 0\n        # dp[i][i+k+n+m+p+q+r+2] = 0\n        # dp[i][i+k+n+m+p+q+r+3] = 0\n        # ...\n        # dp[i][i+k+n+m+p+q+r+s] = 0\n        # dp[i][i+k+n+m+p+q+r+s+1] = 0\n        # dp[i][i+k+n+m+p+q+r+s+2] = 0\n        # dp[i][i+k+n+m+p+q+r+s+3] = 0\n        # ...\n        # dp[i][i+k+n+m+p+q+r+s+t] = 0\n        # dp[i][i+k+n+m+p+q+r+s+t+1] = 0\n        # dp[i][i+k+n+m+p+q+r+s+t+2] = 0\n        # dp[i][i+k+n+m+p+q+r+s+t+3] = 0\n        # ...\n        # dp[i][i+k+n+m+p+q+r+s+t+u] = 0\n        # dp[i][i+k+n+m+p+q+r+s+t+u+1] = 0\n        # dp[i][i+k+n+m+p+q+r+s+t+u+2] = 0\n        # dp[i][i+k+n+m+p+q+r+s"}, {"task_id": "palindrome-partitioning-ii", "completion": "class Solution(object):\n    def minCut(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # dp[i] = min cuts needed for a palindrome partitioning of s[:i]\n        # dp[i] = min(dp[j] + 1) for all j < i and s[j:i] is a palindrome\n        # dp[i] = 0 if s[i] is a palindrome\n        # dp[i] = dp[i-1] + 1 if s[i] is not a palindrome\n        # dp[i] = dp[i-1] if s[i] is a palindrome\n        # dp[i] = dp[i-1] + 1 if s[i] is not a palindrome\n        # dp[i] = dp[i-1] if s[i] is a palindrome\n        # dp[i] = dp[i-1] + 1 if s[i] is not a palindrome\n        # dp[i] = dp[i-1] if s[i] is a palindrome\n        # dp[i] = dp[i-1] + 1 if s[i] is not a palindrome\n        # dp[i] = dp[i-1] if s[i] is a palindrome\n        # dp[i] = dp[i-1] + 1 if s[i] is not a palindrome\n        # dp[i] = dp[i-1] if s[i] is a palindrome\n        # dp[i] = dp[i-1] + 1 if s[i] is not a palindrome\n        # dp[i] = dp[i-1] if s[i] is a palindrome\n        # dp[i] = dp[i-1] + 1 if s[i] is not a palindrome\n        # dp[i] = dp[i-1] if s[i] is a palindrome\n        # dp[i] = dp[i-1] + 1 if s[i] is not a palindrome\n        # dp[i] = dp[i-1] if s[i] is a palindrome\n        # dp[i] = dp[i-1] + 1 if s[i] is not a palindrome\n        # dp[i] = dp[i-1] if s[i] is a palindrome\n        # dp[i] = dp[i-1] + 1 if s[i] is not a palindrome\n        # dp[i] = dp[i-1] if s[i] is a palindrome\n        # dp[i] = dp[i-1] + 1 if s[i] is not a palindrome\n        # dp[i] = dp[i-1] if s[i] is a palindrome\n        # dp[i] = dp[i-1] + 1 if s[i] is not a palindrome\n        # dp[i] = dp[i-1] if s[i] is a palindrome\n        # dp[i] = dp[i-1] + 1 if s[i] is not a palindrome\n        # dp[i] = dp[i-1] if s[i] is a palindrome\n        # dp[i] = dp[i-1] + 1 if s[i] is not a palindrome\n        # dp[i] = dp[i-1] if s[i] is a palindrome\n        # dp[i] = dp[i-1] + 1 if s[i] is not a palindrome\n        # dp[i] = dp[i-1] if s[i] is a palindrome\n        # dp[i] = dp[i-1] + 1 if s[i] is not a palindrome\n        # dp[i] = dp[i-1] if s[i] is a palindrome\n        # dp[i] = dp[i-1] + 1 if s[i] is not a palindrome\n        # dp[i] = dp[i-1] if"}, {"task_id": "palindrome-partitioning-ii", "completion": "class Solution(object):\n    def minCut(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # dp[i][j] = min cuts needed for a palindrome partitioning of s[:j]\n        # dp[i][j] = min(dp[i][k] + dp[k+1][j]) + 1\n        # dp[i][i] = 0\n        # dp[i][i+1] = 0\n        # dp[i][i+2] = 0\n        # dp[i][i+3] = 0\n        # ...\n        # dp[i][i+k] = 0\n        # dp[i][i+k+1] = 0\n        # dp[i][i+k+2] = 0\n        # dp[i][i+k+3] = 0\n        # ...\n        # dp[i][i+k+n] = 0\n        # dp[i][i+k+n+1] = 0\n        # dp[i][i+k+n+2] = 0\n        # dp[i][i+k+n+3] = 0\n        # ...\n        # dp[i][i+k+n+m] = 0\n        # dp[i][i+k+n+m+1] = 0\n        # dp[i][i+k+n+m+2] = 0\n        # dp[i][i+k+n+m+3] = 0\n        # ...\n        # dp[i][i+k+n+m+p] = 0\n        # dp[i][i+k+n+m+p+1] = 0\n        # dp[i][i+k+n+m+p+2] = 0\n        # dp[i][i+k+n+m+p+3] = 0\n        # ...\n        # dp[i][i+k+n+m+p+q] = 0\n        # dp[i][i+k+n+m+p+q+1] = 0\n        # dp[i][i+k+n+m+p+q+2] = 0\n        # dp[i][i+k+n+m+p+q+3] = 0\n        # ...\n        # dp[i][i+k+n+m+p+q+r] = 0\n        # dp[i][i+k+n+m+p+q+r+1] = 0\n        # dp[i][i+k+n+m+p+q+r+2] = 0\n        # dp[i][i+k+n+m+p+q+r+3] = 0\n        # ...\n        # dp[i][i+k+n+m+p+q+r+s] = 0\n        # dp[i][i+k+n+m+p+q+r+s+1] = 0\n        # dp[i][i+k+n+m+p+q+r+s+2] = 0\n        # dp[i][i+k+n+m+p+q+r+s+3] = 0\n        # ...\n        # dp[i][i+k+n+m+p+q+r+s+t] = 0\n        # dp[i][i+k+n+m+p+q+r+s+t+1] = 0\n        # dp[i][i+k+n+m+p+q+r+s+t+2] = 0\n        # dp[i][i+k+n+m+p+q+r+s+t+3] = 0\n        # ...\n        # dp[i][i+k+n+m+p+q+r+s+t+u] = 0\n        # dp[i][i+k+n+m+p+q+r+s+t+u+1] = 0\n        # dp[i][i+k+n+m+p+q+r+s+t+u+2] = 0\n        # dp[i][i+k+n+m+p+q+r+s"}, {"task_id": "palindrome-partitioning-ii", "completion": "class Solution(object):\n    def minCut(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # dp[i] = min cuts needed for a palindrome partitioning of s[:i]\n        dp = [0] * (len(s) + 1)\n        for i in range(1, len(s) + 1):\n            min_cuts = i\n            for j in range(i):\n                if s[j] == s[i - 1] and (i - j <= 2 or dp[j + 1] <= dp[i - 1]):\n                    min_cuts = min(min_cuts, dp[j])\n            dp[i] = min_cuts + 1\n        return dp[-1] - 1"}, {"task_id": "palindrome-partitioning-ii", "completion": "class Solution(object):\n    def minCut(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # dp[i][j] = min cuts needed for a palindrome partitioning of s[:j]\n        # dp[i][j] = min(dp[i][k] + dp[k+1][j])\n        # dp[i][j] = min(dp[i][k] + dp[k+1][j])\n        # dp[i][j] = min(dp[i][k] + dp[k+1][j])\n        # dp[i][j] = min(dp[i][k] + dp[k+1][j])\n        # dp[i][j] = min(dp[i][k] + dp[k+1][j])\n        # dp[i][j] = min(dp[i][k] + dp[k+1][j])\n        # dp[i][j] = min(dp[i][k] + dp[k+1][j])\n        # dp[i][j] = min(dp[i][k] + dp[k+1][j])\n        # dp[i][j] = min(dp[i][k] + dp[k+1][j])\n        # dp[i][j] = min(dp[i][k] + dp[k+1][j])\n        # dp[i][j] = min(dp[i][k] + dp[k+1][j])\n        # dp[i][j] = min(dp[i][k] + dp[k+1][j])\n        # dp[i][j] = min(dp[i][k] + dp[k+1][j])\n        # dp[i][j] = min(dp[i][k] + dp[k+1][j])\n        # dp[i][j] = min(dp[i][k] + dp[k+1][j])\n        # dp[i][j] = min(dp[i][k] + dp[k+1][j])\n        # dp[i][j] = min(dp[i][k] + dp[k+1][j])\n        # dp[i][j] = min(dp[i][k] + dp[k+1][j])\n        # dp[i][j] = min(dp[i][k] + dp[k+1][j])\n        # dp[i][j] = min(dp[i][k] + dp[k+1][j])\n        # dp[i][j] = min(dp[i][k] + dp[k+1][j])\n        # dp[i][j] = min(dp[i][k] + dp[k+1][j])\n        # dp[i][j] = min(dp[i][k] + dp[k+1][j])\n        # dp[i][j] = min(dp[i][k] + dp[k+1][j])\n        # dp[i][j] = min(dp[i][k] + dp[k+1][j])\n        # dp[i][j] = min(dp[i][k] + dp[k+1][j])\n        # dp[i][j] = min(dp[i][k] + dp[k+1][j])\n        # dp[i][j] = min(dp[i][k] + dp[k+1][j])\n        # dp[i][j] = min(dp[i][k] + dp[k+1][j])\n        # dp[i][j] = min(dp[i][k] + dp[k+1][j])\n        # dp[i][j] = min(dp[i][k] + dp[k+1][j])\n        # dp[i][j] = min(dp[i][k] + dp[k+1][j])\n        # dp[i][j] = min(dp[i][k] + dp[k+1][j])\n        # dp[i][j] = min(dp[i][k] + dp[k+1][j])\n        # dp[i][j] = min"}], "preimage-size-of-factorial-zeroes-function": [{"task_id": "preimage-size-of-factorial-zeroes-function", "completion": "class Solution(object):\n    def preimageSizeFZF(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n}, {"task_id": "preimage-size-of-factorial-zeroes-function", "completion": "class Solution(object):\n    def preimageSizeFZF(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n}, {"task_id": "preimage-size-of-factorial-zeroes-function", "completion": "class Solution(object):\n    def preimageSizeFZF(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"}, {"task_id": "preimage-size-of-factorial-zeroes-function", "completion": "class Solution(object):\n    def preimageSizeFZF(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n}, {"task_id": "preimage-size-of-factorial-zeroes-function", "completion": "class Solution(object):\n    def preimageSizeFZF(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n}], "palindrome-pairs": [{"task_id": "palindrome-pairs", "completion": "class Solution(object):\n    def palindromePairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. Create a dictionary of words and their indices\n        # 2. Iterate through the dictionary and check if the word is a palindrome\n        # 3. If it is a palindrome, then check if the word is a palindrome pair\n        # 4. If it is a palindrome pair, then add it to the list\n        # 5. If it is not a palindrome, then check if the word is a palindrome pair\n        # 6. If it is a palindrome pair, then add it to the list\n        # 7. Return the list\n        \n        # 1. Create a dictionary of words and their indices\n        word_dict = {}\n        for i in range(len(words)):\n            word_dict[words[i]] = i\n        \n        # 2. Iterate through the dictionary and check if the word is a palindrome\n        # 3. If it is a palindrome, then check if the word is a palindrome pair\n        # 4. If it is a palindrome pair, then add it to the list\n        # 5. If it is not a palindrome, then check if the word is a palindrome pair\n        # 6. If it is a palindrome pair, then add it to the list\n        # 7. Return the list\n        result = []\n        for word in word_dict:\n            if self.isPalindrome(word):\n                if self.isPalindromePair(word, word_dict):\n                    result.append([word_dict[word], word_dict[word]])\n            else:\n                if self.isPalindromePair(word, word_dict):\n                    result.append([word_dict[word], word_dict[word]])\n        return result\n    \n    def isPalindrome(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. Create a variable to store the length of the word\n        # 2. Create a variable to store the index of the word\n        # 3. Create a variable to store the length of the word\n        # 4. Iterate through the word from the end to the beginning\n        # 5. If the character at the index is not equal to the character at the index, then return False\n        # 6. If the character at the index is equal to the character at the index, then increment the index by 1\n        # 7. If the index is greater than or equal to the length of the word, then return True\n        # 8. Return False\n        \n        # 1. Create a variable to store the length of the word\n        # 2. Create a variable to store the index of the word\n        # 3. Create a variable to store the length of the word\n        # 4. Iterate through the word from the end to the beginning\n        # 5. If the character at the index is not equal to the character at the index, then return False\n        # 6. If the character at the index is equal to the character at the index, then increment the index by 1\n        # 7. If the index is greater than or equal to the length of the word, then return True\n        # 8. Return False\n        length = len(word)\n        index = 0\n        while index < length:\n            if word[index] != word[length - 1]:\n                return False\n            index += 1\n            length -= 1\n        return True\n    \n    def isPalindromePair(self, word, word_dict):\n        \"\"\"\n        :type word: str\n        :type word_dict: dict\n        :rtype: bool\n        \"\"\"\n        \n        # 1. Create a variable to store the length of the word\n        # 2. Create a variable to store the index of the word\n        # 3. Create a variable to store the length of the word\n        # 4. Iterate through the word from the end to the beginning\n        # 5. If the character at the index is not equal to the character at the index, then return False\n        # 6. If the character at the index is equal to the character at the index, then increment the index by 1\n        # 7. If the index is greater than or equal to the length of the word, then return True\n        # 8. Return False\n        \n        # 1. Create a variable to store the length of the"}, {"task_id": "palindrome-pairs", "completion": "class Solution(object):\n    def palindromePairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. Create a dictionary of words and their indices\n        # 2. For each word, check if it is a palindrome\n        # 3. If it is a palindrome, add it to the list of palindrome pairs\n        # 4. If it is not a palindrome, check if it is a prefix of any other word\n        # 5. If it is a prefix, check if the suffix of the word is a palindrome\n        # 6. If it is a palindrome, add it to the list of palindrome pairs\n        \n        # 1. Create a dictionary of words and their indices\n        word_dict = {}\n        for i, word in enumerate(words):\n            word_dict[word] = i\n        \n        # 2. For each word, check if it is a palindrome\n        # 3. If it is a palindrome, add it to the list of palindrome pairs\n        # 4. If it is not a palindrome, check if it is a prefix of any other word\n        # 5. If it is a prefix, check if the suffix of the word is a palindrome\n        # 6. If it is a palindrome, add it to the list of palindrome pairs\n        result = []\n        for i, word in enumerate(words):\n            if self.is_palindrome(word):\n                result.append([i, i])\n            else:\n                for j in range(len(word)):\n                    prefix = word[:j]\n                    suffix = word[j+1:]\n                    if prefix in word_dict and self.is_palindrome(suffix):\n                        result.append([word_dict[prefix], i])\n                        break\n        return result\n    \n    def is_palindrome(self, word):\n        return word == word[::-1]"}, {"task_id": "palindrome-pairs", "completion": "class Solution(object):\n    def palindromePairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. Create a dictionary of words and their indices\n        # 2. Iterate through the dictionary and check if the word is a palindrome\n        # 3. If it is a palindrome, then check if the word is a palindrome pair\n        # 4. If it is a palindrome pair, then add it to the list\n        # 5. Return the list\n        \n        # 1. Create a dictionary of words and their indices\n        word_dict = {}\n        for i in range(len(words)):\n            word_dict[words[i]] = i\n        \n        # 2. Iterate through the dictionary and check if the word is a palindrome\n        # 3. If it is a palindrome, then check if the word is a palindrome pair\n        # 4. If it is a palindrome pair, then add it to the list\n        # 5. Return the list\n        result = []\n        for word in word_dict:\n            if self.is_palindrome(word):\n                for i in range(len(word)):\n                    if self.is_palindrome(word[:i] + word[i+1:]):\n                        result.append([word_dict[word], word_dict[word[:i] + word[i+1:]]])\n        return result\n    \n    def is_palindrome(self, word):\n        return word == word[::-1]"}, {"task_id": "palindrome-pairs", "completion": "class Solution(object):\n    def palindromePairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. Create a dictionary of words and their indices\n        # 2. Iterate through the dictionary and check if the word is a palindrome\n        # 3. If it is a palindrome, check if the word is a palindrome pair\n        # 4. If it is a palindrome pair, add it to the list\n        # 5. If it is not a palindrome, check if the word is a palindrome pair\n        # 6. If it is a palindrome pair, add it to the list\n        # 7. Return the list\n        \n        # 1. Create a dictionary of words and their indices\n        word_dict = {}\n        for i in range(len(words)):\n            word_dict[words[i]] = i\n        \n        # 2. Iterate through the dictionary and check if the word is a palindrome\n        # 3. If it is a palindrome, check if the word is a palindrome pair\n        # 4. If it is a palindrome pair, add it to the list\n        # 5. If it is not a palindrome, check if the word is a palindrome pair\n        # 6. If it is a palindrome pair, add it to the list\n        # 7. Return the list\n        result = []\n        for word in word_dict:\n            if self.is_palindrome(word):\n                if self.is_palindrome_pair(word, word_dict):\n                    result.append([word_dict[word], word_dict[word]])\n            else:\n                if self.is_palindrome_pair(word, word_dict):\n                    result.append([word_dict[word], word_dict[word]])\n        return result\n    \n    def is_palindrome(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. Create a variable to store the length of the word\n        # 2. Create a variable to store the index of the word\n        # 3. Iterate through the word and check if the character is equal to the character at the end of the word\n        # 4. If the character is not equal to the character at the end of the word, return False\n        # 5. If the character is equal to the character at the end of the word, decrement the index and increment the length\n        # 6. If the index is 0, return True\n        # 7. If the index is not 0, return False\n        length = len(word)\n        index = 0\n        for i in range(length):\n            if word[index] != word[length - 1 - i]:\n                return False\n            index += 1\n        return True\n    \n    def is_palindrome_pair(self, word, word_dict):\n        \"\"\"\n        :type word: str\n        :type word_dict: dict\n        :rtype: bool\n        \"\"\"\n        \n        # 1. Create a variable to store the length of the word\n        # 2. Create a variable to store the index of the word\n        # 3. Iterate through the word and check if the character is equal to the character at the end of the word\n        # 4. If the character is not equal to the character at the end of the word, return False\n        # 5. If the character is equal to the character at the end of the word, decrement the index and increment the length\n        # 6. If the index is 0, return True\n        # 7. If the index is not 0, return False\n        length = len(word)\n        index = 0\n        for i in range(length):\n            if word[index] != word[length - 1 - i]:\n                return False\n            index += 1\n        for i in range(length):\n            if word[index] != word[length - 1 - i]:\n                return False\n            index += 1\n        return True"}, {"task_id": "palindrome-pairs", "completion": "class Solution(object):\n    def palindromePairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. Create a dictionary of words and their indices\n        # 2. For each word, check if it is a palindrome\n        # 3. If it is a palindrome, add it to the list of palindrome pairs\n        # 4. If it is not a palindrome, check if it is a prefix of any other word\n        # 5. If it is a prefix, check if the suffix of the word is a palindrome\n        # 6. If it is a palindrome, add it to the list of palindrome pairs\n        # 7. Return the list of palindrome pairs\n        \n        # 1. Create a dictionary of words and their indices\n        word_dict = {}\n        for i, word in enumerate(words):\n            word_dict[word] = i\n        \n        # 2. For each word, check if it is a palindrome\n        # 3. If it is a palindrome, add it to the list of palindrome pairs\n        # 4. If it is not a palindrome, check if it is a prefix of any other word\n        # 5. If it is a prefix, check if the suffix of the word is a palindrome\n        # 6. If it is a palindrome, add it to the list of palindrome pairs\n        # 7. Return the list of palindrome pairs\n        palindrome_pairs = []\n        for i, word in enumerate(words):\n            if self.is_palindrome(word):\n                palindrome_pairs.append([i, i])\n            else:\n                for j in range(len(word)):\n                    prefix = word[:j]\n                    suffix = word[j+1:]\n                    if prefix in word_dict and self.is_palindrome(suffix):\n                        palindrome_pairs.append([word_dict[prefix], i])\n        return palindrome_pairs\n    \n    def is_palindrome(self, word):\n        \"\"\"\n        Check if a word is a palindrome\n        \"\"\"\n        return word == word[::-1]"}], "convert-sorted-array-to-binary-search-tree": [{"task_id": "convert-sorted-array-to-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedArrayToBST(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        def helper(start, end):\n            if start > end:\n                return None\n            mid = (start + end) // 2\n            root = TreeNode(nums[mid])\n            root.left = helper(start, mid - 1)\n            root.right = helper(mid + 1, end)\n            return root\n        \n        return helper(0, len(nums) - 1)"}, {"task_id": "convert-sorted-array-to-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedArrayToBST(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        def helper(start, end):\n            if start > end:\n                return None\n            mid = (start + end) // 2\n            root = TreeNode(nums[mid])\n            root.left = helper(start, mid - 1)\n            root.right = helper(mid + 1, end)\n            return root\n        \n        return helper(0, len(nums) - 1)"}, {"task_id": "convert-sorted-array-to-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedArrayToBST(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        def helper(start, end):\n            if start > end:\n                return None\n            mid = (start + end) // 2\n            root = TreeNode(nums[mid])\n            root.left = helper(start, mid - 1)\n            root.right = helper(mid + 1, end)\n            return root\n        \n        return helper(0, len(nums) - 1)"}, {"task_id": "convert-sorted-array-to-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedArrayToBST(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        def helper(start, end):\n            if start > end:\n                return None\n            mid = (start + end) // 2\n            root = TreeNode(nums[mid])\n            root.left = helper(start, mid - 1)\n            root.right = helper(mid + 1, end)\n            return root\n        \n        return helper(0, len(nums) - 1)"}, {"task_id": "convert-sorted-array-to-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedArrayToBST(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        def helper(start, end):\n            if start > end:\n                return None\n            mid = (start + end) // 2\n            root = TreeNode(nums[mid])\n            root.left = helper(start, mid - 1)\n            root.right = helper(mid + 1, end)\n            return root\n        \n        return helper(0, len(nums) - 1)"}], "contain-virus": [{"task_id": "contain-virus", "completion": "class Solution(object):\n    def containVirus(self, isInfected):\n        \"\"\"\n        :type isInfected: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\n        # 2. \u627e\u5230\u6240\u6709\u7684\u672a\u75c5\u6bd2\u533a\u57df\n        # 3. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u672a\u75c5\u6bd2\u533a\u57df\u7684\u4ea4\u96c6\n        # 4. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u672a\u75c5\u6bd2\u533a\u57df\u7684\u4ea4\u96c6\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\n        # 5. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u672a\u75c5\u6bd2\u533a\u57df\u7684\u4ea4\u96c6\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\n        # 6. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u672a\u75c5\u6bd2\u533a\u57df\u7684\u4ea4\u96c6\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\n        # 7. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u672a\u75c5\u6bd2\u533a\u57df\u7684\u4ea4\u96c6\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\n        # 8. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u672a\u75c5\u6bd2\u533a\u57df\u7684\u4ea4\u96c6\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\n        # 9. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u672a\u75c5\u6bd2\u533a\u57df\u7684\u4ea4\u96c6\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\n        # 10. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u672a\u75c5\u6bd2\u533a\u57df\u7684\u4ea4\u96c6\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\n        # 11. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u672a\u75c5\u6bd2\u533a\u57df\u7684\u4ea4\u96c6\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\n        # 12. \u627e"}, {"task_id": "contain-virus", "completion": "class Solution(object):\n    def containVirus(self, isInfected):\n        \"\"\"\n        :type isInfected: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\n        # 2. \u627e\u5230\u6240\u6709\u7684\u672a\u75c5\u6bd2\u533a\u57df\n        # 3. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u672a\u75c5\u6bd2\u533a\u57df\u7684\u4ea4\u96c6\n        # 4. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u4ea4\u96c6\u7684\u6700\u5c0f\u8ddd\u79bb\n        # 5. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u4ea4\u96c6\u7684\u6700\u5c0f\u8ddd\u79bb\u7684\u6700\u5c0f\u503c\n        # 6. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u4ea4\u96c6\u7684\u6700\u5c0f\u8ddd\u79bb\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\n        # 7. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u4ea4\u96c6\u7684\u6700\u5c0f\u8ddd\u79bb\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\n        # 8. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u4ea4\u96c6\u7684\u6700\u5c0f\u8ddd\u79bb\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\n        # 9. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u4ea4\u96c6\u7684\u6700\u5c0f\u8ddd\u79bb\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\n        # 10. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u4ea4\u96c6\u7684\u6700\u5c0f\u8ddd\u79bb\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\n        # 11. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u4ea4\u96c6\u7684\u6700\u5c0f\u8ddd\u79bb\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\n        # 12. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u4ea4\u96c6\u7684\u6700\u5c0f\u8ddd\u79bb\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\n        # 13. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u4ea4\u96c6\u7684\u6700\u5c0f\u8ddd\u79bb\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\n        # 14. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u4ea4\u96c6\u7684\u6700\u5c0f\u8ddd\u79bb\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\n        # 15. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u4ea4\u96c6\u7684\u6700\u5c0f\u8ddd\u79bb\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\n        # 16. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u4ea4\u96c6\u7684\u6700\u5c0f\u8ddd\u79bb\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\n        # 17. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u4ea4\u96c6\u7684\u6700\u5c0f\u8ddd\u79bb\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\n        # 18. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u4ea4\u96c6\u7684\u6700\u5c0f\u8ddd\u79bb\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c"}, {"task_id": "contain-virus", "completion": "class Solution(object):\n    def containVirus(self, isInfected):\n        \"\"\"\n        :type isInfected: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\n        # 2. \u627e\u5230\u6240\u6709\u7684\u672a\u75c5\u6bd2\u533a\u57df\n        # 3. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u672a\u75c5\u6bd2\u533a\u57df\u7684\u4ea4\u96c6\n        # 4. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u672a\u75c5\u6bd2\u533a\u57df\u7684\u4ea4\u96c6\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\n        # 5. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u672a\u75c5\u6bd2\u533a\u57df\u7684\u4ea4\u96c6\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\n        # 6. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u672a\u75c5\u6bd2\u533a\u57df\u7684\u4ea4\u96c6\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\n        # 7. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u672a\u75c5\u6bd2\u533a\u57df\u7684\u4ea4\u96c6\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\n        # 8. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u672a\u75c5\u6bd2\u533a\u57df\u7684\u4ea4\u96c6\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\n        # 9. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u672a\u75c5\u6bd2\u533a\u57df\u7684\u4ea4\u96c6\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\n        # 10. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u672a\u75c5\u6bd2\u533a\u57df\u7684\u4ea4\u96c6\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\n        # 11. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u672a\u75c5\u6bd2\u533a\u57df\u7684\u4ea4\u96c6\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\n        # 12. \u627e"}, {"task_id": "contain-virus", "completion": "class Solution(object):\n    def containVirus(self, isInfected):\n        \"\"\"\n        :type isInfected: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\n        # 2. \u627e\u5230\u6240\u6709\u7684\u672a\u75c5\u6bd2\u533a\u57df\n        # 3. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u672a\u75c5\u6bd2\u533a\u57df\u7684\u4ea4\u96c6\n        # 4. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u672a\u75c5\u6bd2\u533a\u57df\u7684\u4ea4\u96c6\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\n        # 5. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u672a\u75c5\u6bd2\u533a\u57df\u7684\u4ea4\u96c6\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\n        # 6. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u672a\u75c5\u6bd2\u533a\u57df\u7684\u4ea4\u96c6\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\n        # 7. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u672a\u75c5\u6bd2\u533a\u57df\u7684\u4ea4\u96c6\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\n        # 8. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u672a\u75c5\u6bd2\u533a\u57df\u7684\u4ea4\u96c6\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\n        # 9. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u672a\u75c5\u6bd2\u533a\u57df\u7684\u4ea4\u96c6\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\n        # 10. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u672a\u75c5\u6bd2\u533a\u57df\u7684\u4ea4\u96c6\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\n        # 11. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u672a\u75c5\u6bd2\u533a\u57df\u7684\u4ea4\u96c6\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\u7684\u5468\u56f4\u7684\u672a\u75c5\u6bd2\u533a\u57df\n        # 12. \u627e"}, {"task_id": "contain-virus", "completion": "class Solution(object):\n    def containVirus(self, isInfected):\n        \"\"\"\n        :type isInfected: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\n        # 2. \u627e\u5230\u6240\u6709\u7684\u672a\u75c5\u6bd2\u533a\u57df\n        # 3. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u672a\u75c5\u6bd2\u533a\u57df\u7684\u4ea4\u96c6\n        # 4. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u4ea4\u96c6\u7684\u6700\u5c0f\u8ddd\u79bb\n        # 5. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u4ea4\u96c6\u7684\u6700\u5c0f\u8ddd\u79bb\u7684\u6700\u5c0f\u503c\n        # 6. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u4ea4\u96c6\u7684\u6700\u5c0f\u8ddd\u79bb\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\n        # 7. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u4ea4\u96c6\u7684\u6700\u5c0f\u8ddd\u79bb\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\n        # 8. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u4ea4\u96c6\u7684\u6700\u5c0f\u8ddd\u79bb\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\n        # 9. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u4ea4\u96c6\u7684\u6700\u5c0f\u8ddd\u79bb\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\n        # 10. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u4ea4\u96c6\u7684\u6700\u5c0f\u8ddd\u79bb\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\n        # 11. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u4ea4\u96c6\u7684\u6700\u5c0f\u8ddd\u79bb\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\n        # 12. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u4ea4\u96c6\u7684\u6700\u5c0f\u8ddd\u79bb\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\n        # 13. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u4ea4\u96c6\u7684\u6700\u5c0f\u8ddd\u79bb\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\n        # 14. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u4ea4\u96c6\u7684\u6700\u5c0f\u8ddd\u79bb\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\n        # 15. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u4ea4\u96c6\u7684\u6700\u5c0f\u8ddd\u79bb\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\n        # 16. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u4ea4\u96c6\u7684\u6700\u5c0f\u8ddd\u79bb\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\n        # 17. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u4ea4\u96c6\u7684\u6700\u5c0f\u8ddd\u79bb\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\n        # 18. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u4ea4\u96c6\u7684\u6700\u5c0f\u8ddd\u79bb\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c"}], "longest-increasing-path-in-a-matrix": [{"task_id": "longest-increasing-path-in-a-matrix", "completion": "class Solution(object):\n    def longestIncreasingPath(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        dp = [[0 for _ in range(n)] for _ in range(m)]\n        \n        def dfs(i, j):\n            if dp[i][j] != 0:\n                return dp[i][j]\n            \n            if i == 0:\n                dp[i][j] = 1 + dfs(i, j-1)\n            elif i == m-1:\n                dp[i][j] = 1 + dfs(i, j+1)\n            elif j == 0:\n                dp[i][j] = 1 + dfs(i-1, j)\n            elif j == n-1:\n                dp[i][j] = 1 + dfs(i+1, j)\n            else:\n                dp[i][j] = 1 + min(dfs(i-1, j), dfs(i+1, j), dfs(i, j-1), dfs(i, j+1))\n            \n            return dp[i][j]\n        \n        max_len = 0\n        for i in range(m):\n            for j in range(n):\n                max_len = max(max_len, dfs(i, j))\n        \n        return max_len"}, {"task_id": "longest-increasing-path-in-a-matrix", "completion": "class Solution(object):\n    def longestIncreasingPath(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        dp = [[0 for _ in range(n)] for _ in range(m)]\n        \n        max_len = 0\n        for i in range(m):\n            for j in range(n):\n                max_len = max(max_len, self.dfs(matrix, dp, i, j))\n        \n        return max_len\n    \n    def dfs(self, matrix, dp, i, j):\n        if dp[i][j] != 0:\n            return dp[i][j]\n        \n        max_len = 1\n        for k in range(4):\n            x, y = i + self.dx[k], j + self.dy[k]\n            if 0 <= x < len(matrix) and 0 <= y < len(matrix[0]) and matrix[x][y] > matrix[i][j]:\n                max_len = max(max_len, self.dfs(matrix, dp, x, y) + 1)\n        \n        dp[i][j] = max_len\n        return max_len\n    \n    dx = [0, 0, 1, -1]\n    dy = [1, -1, 0, 0]"}, {"task_id": "longest-increasing-path-in-a-matrix", "completion": "class Solution(object):\n    def longestIncreasingPath(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        dp = [[0 for _ in range(n)] for _ in range(m)]\n        \n        max_len = 0\n        for i in range(m):\n            for j in range(n):\n                max_len = max(max_len, self.dfs(matrix, dp, i, j))\n        \n        return max_len\n    \n    def dfs(self, matrix, dp, i, j):\n        if dp[i][j] != 0:\n            return dp[i][j]\n        \n        max_len = 1\n        for k in range(4):\n            x, y = i + self.dx[k], j + self.dy[k]\n            if 0 <= x < len(matrix) and 0 <= y < len(matrix[0]) and matrix[x][y] > matrix[i][j]:\n                max_len = max(max_len, self.dfs(matrix, dp, x, y) + 1)\n        \n        dp[i][j] = max_len\n        return max_len\n    \n    dx = [0, 0, 1, -1]\n    dy = [1, -1, 0, 0]"}, {"task_id": "longest-increasing-path-in-a-matrix", "completion": "class Solution(object):\n    def longestIncreasingPath(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        dp = [[0 for _ in range(n)] for _ in range(m)]\n        \n        def dfs(i, j):\n            if dp[i][j] != 0:\n                return dp[i][j]\n            \n            if i == 0:\n                dp[i][j] = 1 + dfs(i, j-1)\n            elif i == m-1:\n                dp[i][j] = 1 + dfs(i, j+1)\n            elif j == 0:\n                dp[i][j] = 1 + dfs(i-1, j)\n            elif j == n-1:\n                dp[i][j] = 1 + dfs(i+1, j)\n            else:\n                dp[i][j] = 1 + min(dfs(i-1, j), dfs(i+1, j), dfs(i, j-1), dfs(i, j+1))\n            \n            return dp[i][j]\n        \n        max_len = 0\n        for i in range(m):\n            for j in range(n):\n                max_len = max(max_len, dfs(i, j))\n        \n        return max_len"}, {"task_id": "longest-increasing-path-in-a-matrix", "completion": "class Solution(object):\n    def longestIncreasingPath(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        dp = [[0 for _ in range(n)] for _ in range(m)]\n        \n        def dfs(i, j):\n            if dp[i][j] != 0:\n                return dp[i][j]\n            \n            if i == 0:\n                dp[i][j] = 1 + dfs(i, j-1)\n            elif i == m-1:\n                dp[i][j] = 1 + dfs(i, j+1)\n            elif j == 0:\n                dp[i][j] = 1 + dfs(i-1, j)\n            elif j == n-1:\n                dp[i][j] = 1 + dfs(i+1, j)\n            else:\n                dp[i][j] = 1 + min(dfs(i-1, j), dfs(i+1, j), dfs(i, j-1), dfs(i, j+1))\n            \n            return dp[i][j]\n        \n        max_len = 0\n        for i in range(m):\n            for j in range(n):\n                max_len = max(max_len, dfs(i, j))\n        \n        return max_len"}], "number-of-digit-one": [{"task_id": "number-of-digit-one", "completion": "class Solution(object):\n    def countDigitOne(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u540e\u4e00\u4e2a\u6570\u5b57\n        # 2. \u627e\u5230\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u7684\u4f4d\u6570\n        # 3. \u627e\u5230\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\n        # 4. \u627e\u5230\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\n        # 5. \u627e\u5230\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\n        # 6. \u627e\u5230\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\n        # 7. \u627e\u5230\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\n        # 8. \u627e\u5230\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\n        # 9. \u627e\u5230\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\n        # 10. \u627e\u5230\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d"}, {"task_id": "number-of-digit-one", "completion": "class Solution(object):\n    def countDigitOne(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u9ad8\u4f4d\u7684\u6570\u5b57\n        # 2. \u627e\u5230\u6700\u9ad8\u4f4d\u7684\u6570\u5b57\u7684\u4e2a\u6570\n        # 3. \u627e\u5230\u6700\u9ad8\u4f4d\u7684\u6570\u5b57\u7684\u4e2a\u6570\u7684\u4e2a\u6570\n        # 4. \u627e\u5230\u6700\u9ad8\u4f4d\u7684\u6570\u5b57\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\n        # 5. \u627e\u5230\u6700\u9ad8\u4f4d\u7684\u6570\u5b57\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\n        # 6. \u627e\u5230\u6700\u9ad8\u4f4d\u7684\u6570\u5b57\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\n        # 7. \u627e\u5230\u6700\u9ad8\u4f4d\u7684\u6570\u5b57\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\n        # 8. \u627e\u5230\u6700\u9ad8\u4f4d\u7684\u6570\u5b57\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\n        # 9. \u627e\u5230\u6700\u9ad8\u4f4d\u7684\u6570\u5b57\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\n        # 10. \u627e\u5230\u6700\u9ad8\u4f4d\u7684\u6570\u5b57\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\n        # 11. \u627e\u5230\u6700\u9ad8\u4f4d\u7684\u6570\u5b57\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\n        # 12. \u627e\u5230\u6700\u9ad8\u4f4d\u7684\u6570\u5b57\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\n        # 13. \u627e\u5230\u6700\u9ad8\u4f4d\u7684\u6570\u5b57\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\n        # 14. \u627e\u5230\u6700\u9ad8\u4f4d\u7684\u6570\u5b57\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\n        # 15. \u627e\u5230\u6700\u9ad8\u4f4d\u7684\u6570\u5b57\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\n        # 16. \u627e\u5230\u6700\u9ad8\u4f4d\u7684\u6570\u5b57\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\n        # 17. \u627e\u5230\u6700\u9ad8\u4f4d\u7684\u6570\u5b57\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\n        # 18. \u627e\u5230\u6700\u9ad8\u4f4d\u7684\u6570\u5b57\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\n        # 19. \u627e\u5230\u6700\u9ad8\u4f4d\u7684\u6570\u5b57\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\n        # 20. \u627e\u5230\u6700\u9ad8\u4f4d\u7684\u6570\u5b57\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\n        # 21. \u627e\u5230\u6700\u9ad8\u4f4d\u7684\u6570\u5b57\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\n        # 22. \u627e\u5230\u6700\u9ad8\u4f4d\u7684\u6570\u5b57\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a"}, {"task_id": "number-of-digit-one", "completion": "class Solution(object):\n    def countDigitOne(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u540e\u4e00\u4e2a\u6570\u5b57\n        # 2. \u627e\u5230\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u7684\u4f4d\u6570\n        # 3. \u627e\u5230\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\n        # 4. \u627e\u5230\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\n        # 5. \u627e\u5230\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\n        # 6. \u627e\u5230\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\n        # 7. \u627e\u5230\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\n        # 8. \u627e\u5230\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\n        # 9. \u627e\u5230\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\n        # 10. \u627e\u5230\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d"}, {"task_id": "number-of-digit-one", "completion": "class Solution(object):\n    def countDigitOne(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u540e\u4e00\u4e2a\u6570\u5b57\n        # 2. \u627e\u5230\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u7684\u4f4d\u6570\n        # 3. \u627e\u5230\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\n        # 4. \u627e\u5230\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\n        # 5. \u627e\u5230\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\n        # 6. \u627e\u5230\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\n        # 7. \u627e\u5230\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\n        # 8. \u627e\u5230\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\n        # 9. \u627e\u5230\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\n        # 10. \u627e\u5230\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d\u6570\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6570\u5b57\u7684\u4f4d"}, {"task_id": "number-of-digit-one", "completion": "class Solution(object):\n    def countDigitOne(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u9ad8\u4f4d\u7684\u6570\u5b57\n        # 2. \u627e\u5230\u6700\u9ad8\u4f4d\u7684\u6570\u5b57\u7684\u4e2a\u6570\n        # 3. \u627e\u5230\u6700\u9ad8\u4f4d\u7684\u6570\u5b57\u7684\u4e2a\u6570\u7684\u4e2a\u6570\n        # 4. \u627e\u5230\u6700\u9ad8\u4f4d\u7684\u6570\u5b57\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\n        # 5. \u627e\u5230\u6700\u9ad8\u4f4d\u7684\u6570\u5b57\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\n        # 6. \u627e\u5230\u6700\u9ad8\u4f4d\u7684\u6570\u5b57\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\n        # 7. \u627e\u5230\u6700\u9ad8\u4f4d\u7684\u6570\u5b57\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\n        # 8. \u627e\u5230\u6700\u9ad8\u4f4d\u7684\u6570\u5b57\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\n        # 9. \u627e\u5230\u6700\u9ad8\u4f4d\u7684\u6570\u5b57\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\n        # 10. \u627e\u5230\u6700\u9ad8\u4f4d\u7684\u6570\u5b57\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\n        # 11. \u627e\u5230\u6700\u9ad8\u4f4d\u7684\u6570\u5b57\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\n        # 12. \u627e\u5230\u6700\u9ad8\u4f4d\u7684\u6570\u5b57\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\n        # 13. \u627e\u5230\u6700\u9ad8\u4f4d\u7684\u6570\u5b57\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\n        # 14. \u627e\u5230\u6700\u9ad8\u4f4d\u7684\u6570\u5b57\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\n        # 15. \u627e\u5230\u6700\u9ad8\u4f4d\u7684\u6570\u5b57\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\n        # 16. \u627e\u5230\u6700\u9ad8\u4f4d\u7684\u6570\u5b57\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\n        # 17. \u627e\u5230\u6700\u9ad8\u4f4d\u7684\u6570\u5b57\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\n        # 18. \u627e\u5230\u6700\u9ad8\u4f4d\u7684\u6570\u5b57\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\n        # 19. \u627e\u5230\u6700\u9ad8\u4f4d\u7684\u6570\u5b57\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\n        # 20. \u627e\u5230\u6700\u9ad8\u4f4d\u7684\u6570\u5b57\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\n        # 21. \u627e\u5230\u6700\u9ad8\u4f4d\u7684\u6570\u5b57\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\n        # 22. \u627e\u5230\u6700\u9ad8\u4f4d\u7684\u6570\u5b57\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a"}], "word-break-ii": [{"task_id": "word-break-ii", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # DP solution\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of dictionary words\n        # dp[i] = False otherwise\n        # dp[i] = dp[j] and s[j:i] in wordDict for all j < i\n        # dp[0] = True\n        # dp[i] = dp[i-1] and s[i-1] in wordDict\n        # dp[i] = dp[i-1] and s[i-1:i] in wordDict\n        # dp[i] = dp[i-1] and s[i-1:i] in wordDict\n        # dp[i] = dp[i-1] and s[i-1:i] in wordDict\n        # dp[i] = dp[i-1] and s[i-1:i] in wordDict\n        # dp[i] = dp[i-1] and s[i-1:i] in wordDict\n        # dp[i] = dp[i-1] and s[i-1:i] in wordDict\n        # dp[i] = dp[i-1] and s[i-1:i] in wordDict\n        # dp[i] = dp[i-1] and s[i-1:i] in wordDict\n        # dp[i] = dp[i-1] and s[i-1:i] in wordDict\n        # dp[i] = dp[i-1] and s[i-1:i] in wordDict\n        # dp[i] = dp[i-1] and s[i-1:i] in wordDict\n        # dp[i] = dp[i-1] and s[i-1:i] in wordDict\n        # dp[i] = dp[i-1] and s[i-1:i] in wordDict\n        # dp[i] = dp[i-1] and s[i-1:i] in wordDict\n        # dp[i] = dp[i-1] and s[i-1:i] in wordDict\n        # dp[i] = dp[i-1] and s[i-1:i] in wordDict\n        # dp[i] = dp[i-1] and s[i-1:i] in wordDict\n        # dp[i] = dp[i-1] and s[i-1:i] in wordDict\n        # dp[i] = dp[i-1] and s[i-1:i] in wordDict\n        # dp[i] = dp[i-1] and s[i-1:i] in wordDict\n        # dp[i] = dp[i-1] and s[i-1:i] in wordDict\n        # dp[i] = dp[i-1] and s[i-1:i] in wordDict\n        # dp[i] = dp[i-1] and s[i-1:i] in wordDict\n        # dp[i] = dp[i-1] and s[i-1:i] in wordDict\n        # dp[i] = dp[i-1] and s[i-1:i] in wordDict\n        # dp[i] = dp[i-1] and s[i-1:i] in wordDict\n        # dp[i] = dp[i-1] and s[i-1:i] in wordDict\n        # dp[i] = dp[i-1] and s[i-1:i] in wordDict\n        # dp[i] = dp[i-1] and s[i-1:i] in wordDict\n        # dp[i] = dp[i-1] and s[i-1:i] in wordDict\n        # dp[i] = dp[i-1] and s[i-1:i] in wordDict\n        # dp[i] = dp[i-1] and s[i-1:i] in wordDict\n        # dp[i] = dp[i-1] and s"}, {"task_id": "word-break-ii", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # DP solution\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of dictionary words\n        # dp[i] = False otherwise\n        # dp[i] = dp[j] and s[j:i] in wordDict for all j < i\n        # dp[0] = True\n        # dp[i] = dp[i-1] and s[i-1] in wordDict\n        # dp[i] = dp[i-1] and s[i-1:i] in wordDict\n        # dp[i] = dp[i-1] and s[i-1:i] in wordDict\n        # dp[i] = dp[i-1] and s[i-1:i] in wordDict\n        # dp[i] = dp[i-1] and s[i-1:i] in wordDict\n        # dp[i] = dp[i-1] and s[i-1:i] in wordDict\n        # dp[i] = dp[i-1] and s[i-1:i] in wordDict\n        # dp[i] = dp[i-1] and s[i-1:i] in wordDict\n        # dp[i] = dp[i-1] and s[i-1:i] in wordDict\n        # dp[i] = dp[i-1] and s[i-1:i] in wordDict\n        # dp[i] = dp[i-1] and s[i-1:i] in wordDict\n        # dp[i] = dp[i-1] and s[i-1:i] in wordDict\n        # dp[i] = dp[i-1] and s[i-1:i] in wordDict\n        # dp[i] = dp[i-1] and s[i-1:i] in wordDict\n        # dp[i] = dp[i-1] and s[i-1:i] in wordDict\n        # dp[i] = dp[i-1] and s[i-1:i] in wordDict\n        # dp[i] = dp[i-1] and s[i-1:i] in wordDict\n        # dp[i] = dp[i-1] and s[i-1:i] in wordDict\n        # dp[i] = dp[i-1] and s[i-1:i] in wordDict\n        # dp[i] = dp[i-1] and s[i-1:i] in wordDict\n        # dp[i] = dp[i-1] and s[i-1:i] in wordDict\n        # dp[i] = dp[i-1] and s[i-1:i] in wordDict\n        # dp[i] = dp[i-1] and s[i-1:i] in wordDict\n        # dp[i] = dp[i-1] and s[i-1:i] in wordDict\n        # dp[i] = dp[i-1] and s[i-1:i] in wordDict\n        # dp[i] = dp[i-1] and s[i-1:i] in wordDict\n        # dp[i] = dp[i-1] and s[i-1:i] in wordDict\n        # dp[i] = dp[i-1] and s[i-1:i] in wordDict\n        # dp[i] = dp[i-1] and s[i-1:i] in wordDict\n        # dp[i] = dp[i-1] and s[i-1:i] in wordDict\n        # dp[i] = dp[i-1] and s[i-1:i] in wordDict\n        # dp[i] = dp[i-1] and s[i-1:i] in wordDict\n        # dp[i] = dp[i-1] and s[i-1:i] in wordDict\n        # dp[i] = dp[i-1] and s"}, {"task_id": "word-break-ii", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # DP solution\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of dictionary words\n        # dp[i] = dp[j] and s[j:i] in wordDict for all j < i\n        # dp[0] = True\n        # dp[i] = False if dp[i] is not True for any j < i\n        # return dp[len(s)]\n        \n        # DP solution\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of dictionary words\n        # dp[i] = dp[j] and s[j:i] in wordDict for all j < i\n        # dp[0] = True\n        # dp[i] = False if dp[i] is not True for any j < i\n        # return dp[len(s)]\n        \n        # DP solution\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of dictionary words\n        # dp[i] = dp[j] and s[j:i] in wordDict for all j < i\n        # dp[0] = True\n        # dp[i] = False if dp[i] is not True for any j < i\n        # return dp[len(s)]\n        \n        # DP solution\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of dictionary words\n        # dp[i] = dp[j] and s[j:i] in wordDict for all j < i\n        # dp[0] = True\n        # dp[i] = False if dp[i] is not True for any j < i\n        # return dp[len(s)]\n        \n        # DP solution\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of dictionary words\n        # dp[i] = dp[j] and s[j:i] in wordDict for all j < i\n        # dp[0] = True\n        # dp[i] = False if dp[i] is not True for any j < i\n        # return dp[len(s)]\n        \n        # DP solution\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of dictionary words\n        # dp[i] = dp[j] and s[j:i] in wordDict for all j < i\n        # dp[0] = True\n        # dp[i] = False if dp[i] is not True for any j < i\n        # return dp[len(s)]\n        \n        # DP solution\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of dictionary words\n        # dp[i] = dp[j] and s[j:i] in wordDict for all j < i\n        # dp[0] = True\n        # dp[i] = False if dp[i] is not True for any j < i\n        # return dp[len(s)]\n        \n        # DP solution\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of dictionary words\n        # dp[i] = dp[j] and s[j:i] in wordDict for all j < i\n        # dp[0] = True\n        # dp[i] = False if dp[i] is not True for any j < i\n        # return dp[len(s)]\n        \n        # DP solution\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of dictionary words\n        # dp[i] = dp[j] and s[j:i] in wordDict for all j < i\n        # dp[0] = True\n        # dp[i] = False if dp[i] is not True for any j < i\n        # return dp[len(s)]\n        \n        # DP solution\n        # dp[i] = True if s[:i] can be segmented into"}, {"task_id": "word-break-ii", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u5b57\u5178\u5355\u8bcd\n        # 2. \u9012\u5f52\u627e\u5230\u6240\u6709\u7684\u53ef\u80fd\u6027\n        # 3. \u628a\u6240\u6709\u7684\u53ef\u80fd\u6027\u5b58\u50a8\u8d77\u6765\n        # 4. \u8fd4\u56de\u6240\u6709\u7684\u53ef\u80fd\u6027\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u5b57\u5178\u5355\u8bcd\n        wordDict = set(wordDict)\n        \n        # 2. \u9012\u5f52\u627e\u5230\u6240\u6709\u7684\u53ef\u80fd\u6027\n        def dfs(s, wordDict):\n            if s == \"\":\n                return []\n            if s in wordDict:\n                return [s]\n            res = []\n            for i in range(1, len(s)+1):\n                if s[:i] in wordDict:\n                    res += dfs(s[i:], wordDict)\n            return res\n        \n        # 3. \u628a\u6240\u6709\u7684\u53ef\u80fd\u6027\u5b58\u50a8\u8d77\u6765\n        res = []\n        for i in range(len(s)):\n            if s[:i+1] in wordDict:\n                res += dfs(s[i+1:], wordDict)\n        return res"}, {"task_id": "word-break-ii", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \u9012\u5f52\n        # 2. \u52a8\u6001\u89c4\u5212\n        # 3. \u56de\u6eaf\n        # 4. \u8d2a\u5fc3\n        # 5. \u9012\u63a8\n        # 6. \u679a\u4e3e\n        # 7. \u4f4d\u8fd0\u7b97\n        # 8. \u6811\u72b6\u6570\u7ec4\n        # 9. \u54c8\u5e0c\u8868\n        # 10. \u5206\u6cbb\n        # 11. \u4e8c\u5206\u67e5\u627e\n        # 12. \u8d2a\u5fc3\n        # 13. \u53cc\u6307\u9488\n        # 14. \u5206\u6cbb\n        # 15. \u9012\u5f52\n        # 16. \u9012\u63a8\n        # 17. \u6808\n        # 18. \u961f\u5217\n        # 19. \u5806\n        # 20. \u8d2a\u5fc3\n        # 21. \u4e8c\u5206\u67e5\u627e\n        # 22. \u5206\u6cbb\n        # 23. \u9012\u5f52\n        # 24. \u9012\u63a8\n        # 25. \u6808\n        # 26. \u961f\u5217\n        # 27. \u5806\n        # 28. \u8d2a\u5fc3\n        # 29. \u4e8c\u5206\u67e5\u627e\n        # 30. \u5206\u6cbb\n        # 31. \u9012\u5f52\n        # 32. \u9012\u63a8\n        # 33. \u6808\n        # 34. \u961f\u5217\n        # 35. \u5806\n        # 36. \u8d2a\u5fc3\n        # 37. \u4e8c\u5206\u67e5\u627e\n        # 38. \u5206\u6cbb\n        # 39. \u9012\u5f52\n        # 40. \u9012\u63a8\n        # 41. \u6808\n        # 42. \u961f\u5217\n        # 43. \u5806\n        # 44. \u8d2a\u5fc3\n        # 45. \u4e8c\u5206\u67e5\u627e\n        # 46. \u5206\u6cbb\n        # 47. \u9012\u5f52\n        # 48. \u9012\u63a8\n        # 49. \u6808\n        # 50. \u961f\u5217\n        # 51. \u5806\n        # 52. \u8d2a\u5fc3\n        # 53. \u4e8c\u5206\u67e5\u627e\n        # 54. \u5206\u6cbb\n        # 55. \u9012\u5f52\n        # 56. \u9012\u63a8\n        # 57. \u6808\n        # 58. \u961f\u5217\n        # 59. \u5806\n        # 60. \u8d2a\u5fc3\n        # 61. \u4e8c\u5206\u67e5\u627e\n        # 62. \u5206\u6cbb\n        # 63. \u9012\u5f52\n        # 64. \u9012\u63a8\n        # 65. \u6808\n        # 66. \u961f\u5217\n        # 67. \u5806\n        # 68. \u8d2a\u5fc3\n        # 69. \u4e8c\u5206\u67e5\u627e\n        # 70. \u5206\u6cbb\n        # 71. \u9012\u5f52\n        # 72. \u9012\u63a8\n        # 73. \u6808\n        # 74. \u961f\u5217\n        # 75. \u5806\n        # 76. \u8d2a\u5fc3\n        # 77. \u4e8c\u5206\u67e5\u627e\n        # 78. \u5206\u6cbb\n        # 79. \u9012\u5f52\n        # 80. \u9012\u63a8\n        # 81. \u6808\n        # 82. \u961f\u5217\n        # 83. \u5806\n        # 84. \ufffd"}], "binary-tree-zigzag-level-order-traversal": [{"task_id": "binary-tree-zigzag-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def zigzagLevelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        res = []\n        queue = [root]\n        level = 0\n        while queue:\n            size = len(queue)\n            level_res = []\n            for i in range(size):\n                node = queue.pop(0)\n                if level % 2 == 0:\n                    level_res.append(node.val)\n                else:\n                    level_res.insert(0, node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            if level_res:\n                res.append(level_res)\n            level += 1\n        return res"}, {"task_id": "binary-tree-zigzag-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def zigzagLevelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        res = []\n        queue = [root]\n        level = 0\n        while queue:\n            size = len(queue)\n            level_res = []\n            for i in range(size):\n                node = queue.pop(0)\n                if level % 2 == 0:\n                    level_res.append(node.val)\n                else:\n                    level_res.insert(0, node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            if level_res:\n                res.append(level_res)\n            level += 1\n        return res"}, {"task_id": "binary-tree-zigzag-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def zigzagLevelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        res = []\n        queue = [root]\n        level = 0\n        while queue:\n            size = len(queue)\n            level_res = []\n            for i in range(size):\n                node = queue.pop(0)\n                if level % 2 == 0:\n                    level_res.append(node.val)\n                else:\n                    level_res.insert(0, node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            if level_res:\n                res.append(level_res)\n            level += 1\n        return res"}, {"task_id": "binary-tree-zigzag-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def zigzagLevelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        res = []\n        queue = [root]\n        level = 0\n        while queue:\n            size = len(queue)\n            level_res = []\n            for i in range(size):\n                node = queue.pop(0)\n                if level % 2 == 0:\n                    level_res.append(node.val)\n                else:\n                    level_res.insert(0, node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            res.append(level_res)\n            level += 1\n        return res"}, {"task_id": "binary-tree-zigzag-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def zigzagLevelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        res = []\n        queue = [root]\n        level = 0\n        while queue:\n            size = len(queue)\n            level_res = []\n            for i in range(size):\n                node = queue.pop(0)\n                if level % 2 == 0:\n                    level_res.append(node.val)\n                else:\n                    level_res.insert(0, node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            if level_res:\n                res.append(level_res)\n            level += 1\n        return res"}], "binary-watch": [{"task_id": "binary-watch", "completion": "class Solution(object):\n    def readBinaryWatch(self, turnedOn):\n        \"\"\"\n        :type turnedOn: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def get_time(hour, minute):\n            return '{:02d}:{:02d}'.format(hour, minute)\n        \n        def get_times(hour, minute):\n            if hour < 12 and minute < 60:\n                return [get_time(hour, minute)]\n            return []\n        \n        def get_times_recursive(hour, minute):\n            if hour < 12 and minute < 60:\n                return [get_time(hour, minute)]\n            if hour < 12:\n                return get_times_recursive(hour, minute + 1) + get_times_recursive(hour + 1, 0)\n            return []\n        \n        def get_times_recursive_2(hour, minute):\n            if hour < 12 and minute < 60:\n                return [get_time(hour, minute)]\n            if hour < 12:\n                return get_times_recursive_2(hour, minute + 1) + get_times_recursive_2(hour + 1, 0)\n            return []\n        \n        def get_times_recursive_3(hour, minute):\n            if hour < 12 and minute < 60:\n                return [get_time(hour, minute)]\n            if hour < 12:\n                return get_times_recursive_3(hour, minute + 1) + get_times_recursive_3(hour + 1, 0)\n            return []\n        \n        def get_times_recursive_4(hour, minute):\n            if hour < 12 and minute < 60:\n                return [get_time(hour, minute)]\n            if hour < 12:\n                return get_times_recursive_4(hour, minute + 1) + get_times_recursive_4(hour + 1, 0)\n            return []\n        \n        def get_times_recursive_5(hour, minute):\n            if hour < 12 and minute < 60:\n                return [get_time(hour, minute)]\n            if hour < 12:\n                return get_times_recursive_5(hour, minute + 1) + get_times_recursive_5(hour + 1, 0)\n            return []\n        \n        def get_times_recursive_6(hour, minute):\n            if hour < 12 and minute < 60:\n                return [get_time(hour, minute)]\n            if hour < 12:\n                return get_times_recursive_6(hour, minute + 1) + get_times_recursive_6(hour + 1, 0)\n            return []\n        \n        def get_times_recursive_7(hour, minute):\n            if hour < 12 and minute < 60:\n                return [get_time(hour, minute)]\n            if hour < 12:\n                return get_times_recursive_7(hour, minute + 1) + get_times_recursive_7(hour + 1, 0)\n            return []\n        \n        def get_times_recursive_8(hour, minute):\n            if hour < 12 and minute < 60:\n                return [get_time(hour, minute)]\n            if hour < 12:\n                return get_times_recursive_8(hour, minute + 1) + get_times_recursive_8(hour + 1, 0)\n            return []\n        \n        def get_times_recursive_9(hour, minute):\n            if hour < 12 and minute < 60:\n                return [get_time(hour, minute)]\n            if hour < 12:\n                return get_times_recursive_9(hour, minute + 1) + get_times_recursive_9(hour + 1, 0)\n            return []\n        \n        def get_times_recursive_10(hour, minute):\n            if hour < 12 and minute < 60:\n                return [get_time(hour, minute)]\n            if hour < 12:\n                return get_times_recursive_10(hour, minute + 1) + get_times_recursive_10(hour + 1, 0)\n            return []"}, {"task_id": "binary-watch", "completion": "class Solution(object):\n    def readBinaryWatch(self, turnedOn):\n        \"\"\"\n        :type turnedOn: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def get_time(num):\n            hour = num >> 4\n            minute = num & 0xF\n            return '{:02d}:{:02d}'.format(hour, minute)\n        \n        res = []\n        for i in range(1 << turnedOn):\n            if bin(i).count('1') == turnedOn:\n                res.append(get_time(i))\n        return res"}, {"task_id": "binary-watch", "completion": "class Solution(object):\n    def readBinaryWatch(self, turnedOn):\n        \"\"\"\n        :type turnedOn: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def get_time(num):\n            hour = num >> 6\n            minute = num & 63\n            return '{:02d}:{:02d}'.format(hour, minute)\n        \n        res = []\n        for i in range(1 << turnedOn):\n            if bin(i).count('1') == turnedOn:\n                res.append(get_time(i))\n        return res"}, {"task_id": "binary-watch", "completion": "class Solution(object):\n    def readBinaryWatch(self, turnedOn):\n        \"\"\"\n        :type turnedOn: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def get_time(num):\n            hour = num >> 6\n            minute = num & 63\n            return '{:02d}:{:02d}'.format(hour, minute)\n        \n        res = []\n        for i in range(1 << turnedOn):\n            if bin(i).count('1') == turnedOn:\n                res.append(get_time(i))\n        return res"}, {"task_id": "binary-watch", "completion": "class Solution(object):\n    def readBinaryWatch(self, turnedOn):\n        \"\"\"\n        :type turnedOn: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def get_time(hour, minute):\n            return '{:02d}:{:02d}'.format(hour, minute)\n        \n        def get_times(hour, minute):\n            if hour < 0 or hour > 11 or minute < 0 or minute > 59:\n                return []\n            if hour == 0 and minute == 0:\n                return ['00:00']\n            if hour == 0:\n                return ['00:{:02d}'.format(minute)]\n            if minute == 0:\n                return ['{:02d}:00'.format(hour)]\n            return [get_time(hour, minute)]\n        \n        times = []\n        for hour in range(12):\n            for minute in range(60):\n                times += get_times(hour, minute)\n        return times"}], "pascals-triangle": [{"task_id": "pascals-triangle", "completion": "class Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if numRows == 0:\n            return []\n        elif numRows == 1:\n            return [[1]]\n        else:\n            pascal = [[1]]\n            for i in range(1, numRows):\n                pascal.append([1] + [pascal[i-1][j] + pascal[i-1][j+1] for j in range(len(pascal[i-1])-1)] + [1])\n            return pascal"}, {"task_id": "pascals-triangle", "completion": "class Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1st row\n        if numRows == 1:\n            return [[1]]\n        \n        # 2nd row\n        if numRows == 2:\n            return [[1],[1,1]]\n        \n        # 3rd row\n        if numRows == 3:\n            return [[1],[1,1],[1,2,1]]\n        \n        # 4th row\n        if numRows == 4:\n            return [[1],[1,1],[1,2,1],[1,3,3,1]]\n        \n        # 5th row\n        if numRows == 5:\n            return [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]\n        \n        # 6th row\n        if numRows == 6:\n            return [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1],[1,5,10,10,5,1]]\n        \n        # 7th row\n        if numRows == 7:\n            return [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1],[1,5,10,10,5,1],[1,6,15,20,15,6,1]]\n        \n        # 8th row\n        if numRows == 8:\n            return [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1],[1,5,10,10,5,1],[1,6,15,20,15,6,1],[1,7,21,35,35,21,7,1]]\n        \n        # 9th row\n        if numRows == 9:\n            return [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1],[1,5,10,10,5,1],[1,6,15,20,15,6,1],[1,7,21,35,35,21,7,1],[1,8,28,56,70,56,28,8,1]]\n        \n        # 10th row\n        if numRows == 10:\n            return [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1],[1,5,10,10,5,1],[1,6,15,20,15,6,1],[1,7,21,35,35,21,7,1],[1,8,28,56,70,56,28,8,1],[1,9,36,70,90,70,36,9,1]]\n        \n        # 11th row\n        if numRows == 11:\n            return [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1],[1,5,10,10,5,1],[1,6,15,20,15,6,1],[1,7,21,35,35,21,7,1],[1,8,28,56,70,56,28,8,1],[1,9,36,70,90,70,36,9,1],[1,10,42,104,126,104,42,10,1]]\n        \n        # 12th row\n        if numRows == 12:\n            return [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1],[1,5,10,10,5,1],[1,6,15,20,15,6,1],[1,7,21,35,35,21,7,1],[1,8,28,56,70,56,28,8,1],[1,9,36,70,9"}, {"task_id": "pascals-triangle", "completion": "class Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if numRows == 1:\n            return [[1]]\n        elif numRows == 2:\n            return [[1],[1,1]]\n        else:\n            pascal = [[1],[1,1]]\n            for i in range(2,numRows):\n                pascal.append([1])\n                for j in range(1,i):\n                    pascal[i].append(pascal[i-1][j-1] + pascal[i-1][j])\n                pascal[i].append(1)\n            return pascal"}, {"task_id": "pascals-triangle", "completion": "class Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1st row\n        if numRows == 1:\n            return [[1]]\n        \n        # 2nd row\n        if numRows == 2:\n            return [[1],[1,1]]\n        \n        # 3rd row\n        if numRows == 3:\n            return [[1],[1,1],[1,2,1]]\n        \n        # 4th row\n        if numRows == 4:\n            return [[1],[1,1],[1,2,1],[1,3,3,1]]\n        \n        # 5th row\n        if numRows == 5:\n            return [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]\n        \n        # 6th row\n        if numRows == 6:\n            return [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1],[1,5,10,10,5,1]]\n        \n        # 7th row\n        if numRows == 7:\n            return [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1],[1,5,10,10,5,1],[1,6,15,20,15,6,1]]\n        \n        # 8th row\n        if numRows == 8:\n            return [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1],[1,5,10,10,5,1],[1,6,15,20,15,6,1],[1,7,21,35,35,21,7,1]]\n        \n        # 9th row\n        if numRows == 9:\n            return [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1],[1,5,10,10,5,1],[1,6,15,20,15,6,1],[1,7,21,35,35,21,7,1],[1,8,28,56,70,56,28,8,1]]\n        \n        # 10th row\n        if numRows == 10:\n            return [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1],[1,5,10,10,5,1],[1,6,15,20,15,6,1],[1,7,21,35,35,21,7,1],[1,8,28,56,70,56,28,8,1],[1,9,36,70,90,70,36,9,1]]\n        \n        # 11th row\n        if numRows == 11:\n            return [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1],[1,5,10,10,5,1],[1,6,15,20,15,6,1],[1,7,21,35,35,21,7,1],[1,8,28,56,70,56,28,8,1],[1,9,36,70,90,70,36,9,1],[1,10,42,104,126,104,42,10,1]]\n        \n        # 12th row\n        if numRows == 12:\n            return [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1],[1,5,10,10,5,1],[1,6,15,20,15,6,1],[1,7,21,35,35,21,7,1],[1,8,28,56,70,56,28,8,1],[1,9,36,70,9"}, {"task_id": "pascals-triangle", "completion": "class Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if numRows == 0:\n            return []\n        elif numRows == 1:\n            return [[1]]\n        else:\n            result = [[1],[1,1]]\n            for i in range(2,numRows):\n                result.append([1])\n                for j in range(1,i):\n                    result[i].append(result[i-1][j-1]+result[i-1][j])\n                result[i].append(1)\n            return result"}], "power-of-three": [{"task_id": "power-of-three", "completion": "class Solution(object):\n    def isPowerOfThree(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 3 == 0:\n            n /= 3\n        \n        return n == 1"}, {"task_id": "power-of-three", "completion": "class Solution(object):\n    def isPowerOfThree(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        while n % 3 == 0:\n            n = n / 3\n        return n == 1"}, {"task_id": "power-of-three", "completion": "class Solution(object):\n    def isPowerOfThree(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 3 == 0:\n            n = n / 3\n        \n        return n == 1"}, {"task_id": "power-of-three", "completion": "class Solution(object):\n    def isPowerOfThree(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 3 == 0:\n            n /= 3\n        \n        return n == 1"}, {"task_id": "power-of-three", "completion": "class Solution(object):\n    def isPowerOfThree(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n > 1:\n            if n % 3 != 0:\n                return False\n            n = n // 3\n        return True"}], "binary-tree-maximum-path-sum": [{"task_id": "binary-tree-maximum-path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxPathSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def dfs(node):\n            if not node:\n                return 0\n            left = max(0, dfs(node.left))\n            right = max(0, dfs(node.right))\n            self.max_sum = max(self.max_sum, node.val + left + right)\n            return node.val + max(left, right)\n        \n        self.max_sum = float('-inf')\n        dfs(root)\n        return self.max_sum"}, {"task_id": "binary-tree-maximum-path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxPathSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def dfs(node):\n            if not node:\n                return 0\n            left = max(dfs(node.left), 0)\n            right = max(dfs(node.right), 0)\n            self.max_sum = max(self.max_sum, node.val + left + right)\n            return node.val + max(left, right)\n        \n        self.max_sum = float('-inf')\n        dfs(root)\n        return self.max_sum"}, {"task_id": "binary-tree-maximum-path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxPathSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def dfs(node):\n            if not node:\n                return 0\n            left = max(dfs(node.left), 0)\n            right = max(dfs(node.right), 0)\n            self.max_sum = max(self.max_sum, node.val + left + right)\n            return node.val + max(left, right)\n        \n        self.max_sum = float('-inf')\n        dfs(root)\n        return self.max_sum"}, {"task_id": "binary-tree-maximum-path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxPathSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def dfs(node):\n            if not node:\n                return 0\n            left = max(0, dfs(node.left))\n            right = max(0, dfs(node.right))\n            self.max_sum = max(self.max_sum, node.val + left + right)\n            return node.val + max(left, right)\n        \n        self.max_sum = float('-inf')\n        dfs(root)\n        return self.max_sum"}, {"task_id": "binary-tree-maximum-path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxPathSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def dfs(root):\n            if not root:\n                return 0\n            left = max(0, dfs(root.left))\n            right = max(0, dfs(root.right))\n            self.max_sum = max(self.max_sum, root.val + left + right)\n            return root.val + max(left, right)\n        \n        self.max_sum = float('-inf')\n        dfs(root)\n        return self.max_sum"}], "trapping-rain-water-ii": [{"task_id": "trapping-rain-water-ii", "completion": "class Solution(object):\n    def trapRainWater(self, heightMap):\n        \"\"\"\n        :type heightMap: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. Create a new matrix to store the water level\n        # 2. Iterate through the matrix and find the maximum water level\n        # 3. Iterate through the matrix again and find the water level\n        # 4. Add the water level to the water level matrix\n        # 5. Iterate through the matrix again and find the water level\n        # 6. Add the water level to the water level matrix\n        # 7. Iterate through the matrix again and find the water level\n        # 8. Add the water level to the water level matrix\n        # 9. Iterate through the matrix again and find the water level\n        # 10. Add the water level to the water level matrix\n        # 11. Iterate through the matrix again and find the water level\n        # 12. Add the water level to the water level matrix\n        # 13. Iterate through the matrix again and find the water level\n        # 14. Add the water level to the water level matrix\n        # 15. Iterate through the matrix again and find the water level\n        # 16. Add the water level to the water level matrix\n        # 17. Iterate through the matrix again and find the water level\n        # 18. Add the water level to the water level matrix\n        # 19. Iterate through the matrix again and find the water level\n        # 20. Add the water level to the water level matrix\n        # 21. Iterate through the matrix again and find the water level\n        # 22. Add the water level to the water level matrix\n        # 23. Iterate through the matrix again and find the water level\n        # 24. Add the water level to the water level matrix\n        # 25. Iterate through the matrix again and find the water level\n        # 26. Add the water level to the water level matrix\n        # 27. Iterate through the matrix again and find the water level\n        # 28. Add the water level to the water level matrix\n        # 29. Iterate through the matrix again and find the water level\n        # 30. Add the water level to the water level matrix\n        # 31. Iterate through the matrix again and find the water level\n        # 32. Add the water level to the water level matrix\n        # 33. Iterate through the matrix again and find the water level\n        # 34. Add the water level to the water level matrix\n        # 35. Iterate through the matrix again and find the water level\n        # 36. Add the water level to the water level matrix\n        # 37. Iterate through the matrix again and find the water level\n        # 38. Add the water level to the water level matrix\n        # 39. Iterate through the matrix again and find the water level\n        # 40. Add the water level to the water level matrix\n        # 41. Iterate through the matrix again and find the water level\n        # 42. Add the water level to the water level matrix\n        # 43. Iterate through the matrix again and find the water level\n        # 44. Add the water level to the water level matrix\n        # 45. Iterate through the matrix again and find the water level\n        # 46. Add the water level to the water level matrix\n        # 47. Iterate through the matrix again and find the water level\n        # 48. Add the water level to the water level matrix\n        # 49. Iterate through the matrix again and find the water level\n        # 50. Add the water level to the water level matrix\n        # 51. Iterate through the matrix again and find the water level\n        # 52. Add the water level to the water level matrix\n        # 53. Iterate through the matrix again and find the water level\n        # 54. Add the water level to the water level matrix\n        # 55. Iterate through the matrix again and find the water level\n        # 56. Add the water level to the water level matrix\n        # 57. Iterate through the matrix again and find the water level\n        # 58. Add the water level to the water level matrix\n        # 59. Iterate through the matrix again and find the water level\n        # 60. Add the water level to the water level matrix\n        # 61. Iterate through the matrix again and"}, {"task_id": "trapping-rain-water-ii", "completion": "class Solution(object):\n    def trapRainWater(self, heightMap):\n        \"\"\"\n        :type heightMap: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. Create a new matrix to store the water level\n        # 2. Initialize the water level matrix with 0\n        # 3. Iterate through the heightMap matrix and find the maximum water level\n        # 4. Iterate through the heightMap matrix again and find the water level\n        # 5. Add the water level to the water level matrix\n        # 6. Iterate through the water level matrix and find the maximum water level\n        # 7. Return the maximum water level\n        \n        # Create a new matrix to store the water level\n        waterLevel = [[0 for i in range(len(heightMap[0]))] for j in range(len(heightMap))]\n        \n        # Initialize the water level matrix with 0\n        for i in range(len(heightMap)):\n            for j in range(len(heightMap[0])):\n                waterLevel[i][j] = 0\n        \n        # Find the maximum water level\n        maxWaterLevel = 0\n        for i in range(len(heightMap)):\n            for j in range(len(heightMap[0])):\n                if i == 0:\n                    if heightMap[i][j] > waterLevel[i][j]:\n                        waterLevel[i][j] = heightMap[i][j]\n                    else:\n                        waterLevel[i][j] = waterLevel[i][j]\n                elif j == 0:\n                    if heightMap[i][j] > waterLevel[i][j]:\n                        waterLevel[i][j] = heightMap[i][j]\n                    else:\n                        waterLevel[i][j] = waterLevel[i][j]\n                elif i == len(heightMap) - 1:\n                    if heightMap[i][j] > waterLevel[i][j]:\n                        waterLevel[i][j] = heightMap[i][j]\n                    else:\n                        waterLevel[i][j] = waterLevel[i][j]\n                elif j == len(heightMap[0]) - 1:\n                    if heightMap[i][j] > waterLevel[i][j]:\n                        waterLevel[i][j] = heightMap[i][j]\n                    else:\n                        waterLevel[i][j] = waterLevel[i][j]\n                else:\n                    if heightMap[i][j] > waterLevel[i][j]:\n                        waterLevel[i][j] = heightMap[i][j]\n                    else:\n                        waterLevel[i][j] = waterLevel[i][j]\n                    if heightMap[i][j] > waterLevel[i][j - 1]:\n                        waterLevel[i][j] = waterLevel[i][j]\n                    else:\n                        waterLevel[i][j] = waterLevel[i][j]\n                    if heightMap[i][j] > waterLevel[i][j + 1]:\n                        waterLevel[i][j] = waterLevel[i][j]\n                    else:\n                        waterLevel[i][j] = waterLevel[i][j]\n                    if heightMap[i][j] > waterLevel[i - 1][j]:\n                        waterLevel[i][j] = waterLevel[i][j]\n                    else:\n                        waterLevel[i][j] = waterLevel[i][j]\n                    if heightMap[i][j] > waterLevel[i + 1][j]:\n                        waterLevel[i][j] = waterLevel[i][j]\n                    else:\n                        waterLevel[i][j] = waterLevel[i][j]\n                    if heightMap[i][j] > waterLevel[i - 1][j - 1]:\n                        waterLevel[i][j] = waterLevel[i][j]\n                    else:\n                        waterLevel[i][j] = waterLevel[i][j]\n                    if heightMap[i][j] > waterLevel[i - 1][j + 1]:\n                        waterLevel[i][j] = waterLevel[i][j]\n                    else:\n                        waterLevel[i][j] = waterLevel[i][j]\n                    if heightMap[i][j] > waterLevel[i + 1][j - 1]:\n                        waterLevel[i][j] = water"}, {"task_id": "trapping-rain-water-ii", "completion": "class Solution(object):\n    def trapRainWater(self, heightMap):\n        \"\"\"\n        :type heightMap: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. Create a 2D array of size m x n\n        # 2. Initialize the 2D array with 0\n        # 3. Initialize the 2D array with the height of the first row\n        # 4. Initialize the 2D array with the height of the last row\n        # 5. Initialize the 2D array with the height of the first column\n        # 6. Initialize the 2D array with the height of the last column\n        # 7. Iterate through the 2D array and find the maximum height\n        # 8. Iterate through the 2D array and find the minimum height\n        # 9. Iterate through the 2D array and find the maximum height\n        # 10. Iterate through the 2D array and find the minimum height\n        # 11. Iterate through the 2D array and find the maximum height\n        # 12. Iterate through the 2D array and find the minimum height\n        # 13. Iterate through the 2D array and find the maximum height\n        # 14. Iterate through the 2D array and find the minimum height\n        # 15. Iterate through the 2D array and find the maximum height\n        # 16. Iterate through the 2D array and find the minimum height\n        # 17. Iterate through the 2D array and find the maximum height\n        # 18. Iterate through the 2D array and find the minimum height\n        # 19. Iterate through the 2D array and find the maximum height\n        # 20. Iterate through the 2D array and find the minimum height\n        # 21. Iterate through the 2D array and find the maximum height\n        # 22. Iterate through the 2D array and find the minimum height\n        # 23. Iterate through the 2D array and find the maximum height\n        # 24. Iterate through the 2D array and find the minimum height\n        # 25. Iterate through the 2D array and find the maximum height\n        # 26. Iterate through the 2D array and find the minimum height\n        # 27. Iterate through the 2D array and find the maximum height\n        # 28. Iterate through the 2D array and find the minimum height\n        # 29. Iterate through the 2D array and find the maximum height\n        # 30. Iterate through the 2D array and find the minimum height\n        # 31. Iterate through the 2D array and find the maximum height\n        # 32. Iterate through the 2D array and find the minimum height\n        # 33. Iterate through the 2D array and find the maximum height\n        # 34. Iterate through the 2D array and find the minimum height\n        # 35. Iterate through the 2D array and find the maximum height\n        # 36. Iterate through the 2D array and find the minimum height\n        # 37. Iterate through the 2D array and find the maximum height\n        # 38. Iterate through the 2D array and find the minimum height\n        # 39. Iterate through the 2D array and find the maximum height\n        # 40. Iterate through the 2D array and find the minimum height\n        # 41. Iterate through the 2D array and find the maximum height\n        # 42. Iterate through the 2D array and find the minimum height\n        # 43. Iterate through the 2D array and find the maximum height\n        # 44. Iterate through the 2D array and find the minimum height\n        # 45. Iterate through the 2D array and find the maximum height\n        # 46. Iterate through the 2D array and find the minimum height\n        # 47. Iterate through the 2D array and find the maximum height\n        # 48. Iterate through the 2D array and find the minimum height\n        # 49. Iterate through the 2D array and find the maximum height\n        # 50. Iterate through the 2D array and find the minimum height\n        # 51. Iterate through the 2D array and find the maximum height\n        # 52. Iterate through the 2D array and find the minimum height"}, {"task_id": "trapping-rain-water-ii", "completion": "class Solution(object):\n    def trapRainWater(self, heightMap):\n        \"\"\"\n        :type heightMap: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. Create a 2D array of size m x n\n        # 2. Initialize the 2D array with 0s\n        # 3. Iterate through the 2D array and find the maximum height\n        # 4. Iterate through the 2D array and find the minimum height\n        # 5. Iterate through the 2D array and find the maximum height\n        # 6. Iterate through the 2D array and find the minimum height\n        # 7. Iterate through the 2D array and find the maximum height\n        # 8. Iterate through the 2D array and find the minimum height\n        # 9. Iterate through the 2D array and find the maximum height\n        # 10. Iterate through the 2D array and find the minimum height\n        # 11. Iterate through the 2D array and find the maximum height\n        # 12. Iterate through the 2D array and find the minimum height\n        # 13. Iterate through the 2D array and find the maximum height\n        # 14. Iterate through the 2D array and find the minimum height\n        # 15. Iterate through the 2D array and find the maximum height\n        # 16. Iterate through the 2D array and find the minimum height\n        # 17. Iterate through the 2D array and find the maximum height\n        # 18. Iterate through the 2D array and find the minimum height\n        # 19. Iterate through the 2D array and find the maximum height\n        # 20. Iterate through the 2D array and find the minimum height\n        # 21. Iterate through the 2D array and find the maximum height\n        # 22. Iterate through the 2D array and find the minimum height\n        # 23. Iterate through the 2D array and find the maximum height\n        # 24. Iterate through the 2D array and find the minimum height\n        # 25. Iterate through the 2D array and find the maximum height\n        # 26. Iterate through the 2D array and find the minimum height\n        # 27. Iterate through the 2D array and find the maximum height\n        # 28. Iterate through the 2D array and find the minimum height\n        # 29. Iterate through the 2D array and find the maximum height\n        # 30. Iterate through the 2D array and find the minimum height\n        # 31. Iterate through the 2D array and find the maximum height\n        # 32. Iterate through the 2D array and find the minimum height\n        # 33. Iterate through the 2D array and find the maximum height\n        # 34. Iterate through the 2D array and find the minimum height\n        # 35. Iterate through the 2D array and find the maximum height\n        # 36. Iterate through the 2D array and find the minimum height\n        # 37. Iterate through the 2D array and find the maximum height\n        # 38. Iterate through the 2D array and find the minimum height\n        # 39. Iterate through the 2D array and find the maximum height\n        # 40. Iterate through the 2D array and find the minimum height\n        # 41. Iterate through the 2D array and find the maximum height\n        # 42. Iterate through the 2D array and find the minimum height\n        # 43. Iterate through the 2D array and find the maximum height\n        # 44. Iterate through the 2D array and find the minimum height\n        # 45. Iterate through the 2D array and find the maximum height\n        # 46. Iterate through the 2D array and find the minimum height\n        # 47. Iterate through the 2D array and find the maximum height\n        # 48. Iterate through the 2D array and find the minimum height\n        # 49. Iterate through the 2D array and find the maximum height\n        # 50. Iterate through the 2D array and find the minimum height\n        # 51. Iterate through the 2D array and find the maximum height\n        # 52. Iterate through the 2D array and find the minimum"}, {"task_id": "trapping-rain-water-ii", "completion": "class Solution(object):\n    def trapRainWater(self, heightMap):\n        \"\"\"\n        :type heightMap: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. Create a new matrix of the same size as the original matrix\n        # 2. Initialize the new matrix with 0s\n        # 3. Iterate through the original matrix and find the maximum value in each row and column\n        # 4. Iterate through the original matrix and find the minimum value in each row and column\n        # 5. Iterate through the original matrix and find the maximum value in each row and column\n        # 6. Iterate through the original matrix and find the minimum value in each row and column\n        # 7. Iterate through the original matrix and find the maximum value in each row and column\n        # 8. Iterate through the original matrix and find the minimum value in each row and column\n        # 9. Iterate through the original matrix and find the maximum value in each row and column\n        # 10. Iterate through the original matrix and find the minimum value in each row and column\n        # 11. Iterate through the original matrix and find the maximum value in each row and column\n        # 12. Iterate through the original matrix and find the minimum value in each row and column\n        # 13. Iterate through the original matrix and find the maximum value in each row and column\n        # 14. Iterate through the original matrix and find the minimum value in each row and column\n        # 15. Iterate through the original matrix and find the maximum value in each row and column\n        # 16. Iterate through the original matrix and find the minimum value in each row and column\n        # 17. Iterate through the original matrix and find the maximum value in each row and column\n        # 18. Iterate through the original matrix and find the minimum value in each row and column\n        # 19. Iterate through the original matrix and find the maximum value in each row and column\n        # 20. Iterate through the original matrix and find the minimum value in each row and column\n        # 21. Iterate through the original matrix and find the maximum value in each row and column\n        # 22. Iterate through the original matrix and find the minimum value in each row and column\n        # 23. Iterate through the original matrix and find the maximum value in each row and column\n        # 24. Iterate through the original matrix and find the minimum value in each row and column\n        # 25. Iterate through the original matrix and find the maximum value in each row and column\n        # 26. Iterate through the original matrix and find the minimum value in each row and column\n        # 27. Iterate through the original matrix and find the maximum value in each row and column\n        # 28. Iterate through the original matrix and find the minimum value in each row and column\n        # 29. Iterate through the original matrix and find the maximum value in each row and column\n        # 30. Iterate through the original matrix and find the minimum value in each row and column\n        # 31. Iterate through the original matrix and find the maximum value in each row and column\n        # 32. Iterate through the original matrix and find the minimum value in each row and column\n        # 33. Iterate through the original matrix and find the maximum value in each row and column\n        # 34. Iterate through the original matrix and find the minimum value in each row and column\n        # 35. Iterate through the original matrix and find the maximum value in each row and column\n        # 36. Iterate through the original matrix and find the minimum value in each row and column\n        # 37. Iterate through the original matrix and find the maximum value in each row and column\n        # 38. Iterate through the original matrix and find the minimum value in each row and column\n        # 39. Iterate through the original matrix and find the maximum value in each row and column\n        # 40. Iterate through the original matrix and find the minimum value in each row and column\n        # 41. Iterate through the original matrix and find the maximum value in each row and column\n        # 42. Iterate through the original matrix and find the minimum value in each row and column\n        # 43. Iterate through the original matrix and find the maximum value in each row and column\n        # 44. Iterate through the original matrix and find the minimum value in each row and column\n        # 45. Iterate through the original matrix and find the maximum value in each row and column\n        # 46. Iterate through the"}], "valid-palindrome": [{"task_id": "valid-palindrome", "completion": "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # remove all non-alphanumeric characters\n        s = ''.join(c for c in s if c.isalnum())\n        \n        # convert all uppercase letters into lowercase letters\n        s = s.lower()\n        \n        # check if the string is a palindrome\n        return s == s[::-1]"}, {"task_id": "valid-palindrome", "completion": "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # remove all non-alphanumeric characters\n        s = ''.join(c for c in s if c.isalnum())\n        \n        # convert all uppercase letters into lowercase letters\n        s = s.lower()\n        \n        # check if the string is a palindrome\n        return s == s[::-1]"}, {"task_id": "valid-palindrome", "completion": "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. remove all non-alphanumeric characters\n        # 2. convert all uppercase letters into lowercase letters\n        # 3. check if the string is a palindrome\n        \n        # 1. remove all non-alphanumeric characters\n        s = ''.join(filter(str.isalnum, s))\n        \n        # 2. convert all uppercase letters into lowercase letters\n        s = s.lower()\n        \n        # 3. check if the string is a palindrome\n        return s == s[::-1]"}, {"task_id": "valid-palindrome", "completion": "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # remove all non-alphanumeric characters\n        s = re.sub(r'[^a-zA-Z0-9]', '', s)\n        \n        # convert to lowercase\n        s = s.lower()\n        \n        # check if string is a palindrome\n        return s == s[::-1]"}, {"task_id": "valid-palindrome", "completion": "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # remove all non-alphanumeric characters\n        s = ''.join(c for c in s if c.isalnum())\n        \n        # convert all uppercase letters into lowercase letters\n        s = s.lower()\n        \n        # check if the string is a palindrome\n        return s == s[::-1]"}], "sliding-window-median": [{"task_id": "sliding-window-median", "completion": "class Solution(object):\n    def medianSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[float]\n        \"\"\"\n        \n        # 1. \u6ed1\u52a8\u7a97\u53e3\n        # 2. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u4e3a k\n        # 3. \u6ed1\u52a8\u7a97\u53e3\u7684\u6bcf\u6b21\u79fb\u52a8\uff0c\u90fd\u4f1a\u79fb\u52a8\u4e00\u4e2a\u4f4d\u7f6e\n        # 4. \u6bcf\u6b21\u79fb\u52a8\uff0c\u90fd\u4f1a\u8ba1\u7b97\u51fa\u5f53\u524d\u7a97\u53e3\u7684\u4e2d\u4f4d\u6570\n        # 5. \u6700\u540e\u8fd4\u56de\u6240\u6709\u7684\u4e2d\u4f4d\u6570\n        \n        # 1. \u6ed1\u52a8\u7a97\u53e3\n        # 2. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u4e3a k\n        # 3. \u6ed1\u52a8\u7a97\u53e3\u7684\u6bcf\u6b21\u79fb\u52a8\uff0c\u90fd\u4f1a\u79fb\u52a8\u4e00\u4e2a\u4f4d\u7f6e\n        # 4. \u6bcf\u6b21\u79fb\u52a8\uff0c\u90fd\u4f1a\u8ba1\u7b97\u51fa\u5f53\u524d\u7a97\u53e3\u7684\u4e2d\u4f4d\u6570\n        # 5. \u6700\u540e\u8fd4\u56de\u6240\u6709\u7684\u4e2d\u4f4d\u6570\n        \n        # 1. \u6ed1\u52a8\u7a97\u53e3\n        # 2. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u4e3a k\n        # 3. \u6ed1\u52a8\u7a97\u53e3\u7684\u6bcf\u6b21\u79fb\u52a8\uff0c\u90fd\u4f1a\u79fb\u52a8\u4e00\u4e2a\u4f4d\u7f6e\n        # 4. \u6bcf\u6b21\u79fb\u52a8\uff0c\u90fd\u4f1a\u8ba1\u7b97\u51fa\u5f53\u524d\u7a97\u53e3\u7684\u4e2d\u4f4d\u6570\n        # 5. \u6700\u540e\u8fd4\u56de\u6240\u6709\u7684\u4e2d\u4f4d\u6570\n        \n        # 1. \u6ed1\u52a8\u7a97\u53e3\n        # 2. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u4e3a k\n        # 3. \u6ed1\u52a8\u7a97\u53e3\u7684\u6bcf\u6b21\u79fb\u52a8\uff0c\u90fd\u4f1a\u79fb\u52a8\u4e00\u4e2a\u4f4d\u7f6e\n        # 4. \u6bcf\u6b21\u79fb\u52a8\uff0c\u90fd\u4f1a\u8ba1\u7b97\u51fa\u5f53\u524d\u7a97\u53e3\u7684\u4e2d\u4f4d\u6570\n        # 5. \u6700\u540e\u8fd4\u56de\u6240\u6709\u7684\u4e2d\u4f4d\u6570\n        \n        # 1. \u6ed1\u52a8\u7a97\u53e3\n        # 2. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u4e3a k\n        # 3. \u6ed1\u52a8\u7a97\u53e3\u7684\u6bcf\u6b21\u79fb\u52a8\uff0c\u90fd\u4f1a\u79fb\u52a8\u4e00\u4e2a\u4f4d\u7f6e\n        # 4. \u6bcf\u6b21\u79fb\u52a8\uff0c\u90fd\u4f1a\u8ba1\u7b97\u51fa\u5f53\u524d\u7a97\u53e3\u7684\u4e2d\u4f4d\u6570\n        # 5. \u6700\u540e\u8fd4\u56de\u6240\u6709\u7684\u4e2d\u4f4d\u6570\n        \n        # 1. \u6ed1\u52a8\u7a97\u53e3\n        # 2. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u4e3a k\n        # 3. \u6ed1\u52a8\u7a97\u53e3\u7684\u6bcf\u6b21\u79fb\u52a8\uff0c\u90fd\u4f1a\u79fb\u52a8\u4e00\u4e2a\u4f4d\u7f6e\n        # 4. \u6bcf\u6b21\u79fb\u52a8\uff0c\u90fd\u4f1a\u8ba1\u7b97\u51fa\u5f53\u524d\u7a97\u53e3\u7684\u4e2d\u4f4d\u6570\n        # 5. \u6700\u540e\u8fd4\u56de\u6240\u6709\u7684\u4e2d\u4f4d\u6570\n        \n        # 1. \u6ed1\u52a8\u7a97\u53e3\n        # 2. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u4e3a k\n        # 3. \u6ed1\u52a8\u7a97\u53e3\u7684\u6bcf\u6b21\u79fb\u52a8\uff0c\u90fd\u4f1a\u79fb\u52a8\u4e00\u4e2a\u4f4d\u7f6e\n        # 4. \u6bcf\u6b21\u79fb\u52a8\uff0c\u90fd\u4f1a\u8ba1\u7b97\u51fa\u5f53\u524d\u7a97\u53e3\u7684\u4e2d\u4f4d\u6570\n        # 5. \u6700\u540e\u8fd4\u56de\u6240\u6709\u7684\u4e2d\u4f4d\u6570\n        \n        # 1. \u6ed1\u52a8\u7a97\u53e3\n        # 2. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u4e3a k\n        # 3. \u6ed1\u52a8\u7a97\u53e3\u7684\u6bcf\u6b21\u79fb\u52a8\uff0c\u90fd\u4f1a\u79fb\u52a8\u4e00\u4e2a\u4f4d\u7f6e\n        # 4. \u6bcf\u6b21\u79fb\u52a8\uff0c\u90fd\u4f1a\u8ba1\u7b97\u51fa\u5f53\u524d\u7a97\u53e3\u7684\u4e2d\u4f4d\u6570\n        # 5. \u6700\u540e\u8fd4\u56de\u6240\u6709\u7684\u4e2d\u4f4d\u6570\n        \n        # 1. \u6ed1\u52a8\u7a97\u53e3\n        # 2. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u4e3a k\n        # 3. \u6ed1\u52a8\u7a97\u53e3\u7684\u6bcf\u6b21\u79fb\u52a8\uff0c\u90fd\u4f1a\u79fb\u52a8\u4e00\u4e2a\u4f4d\u7f6e\n        # 4. \u6bcf\u6b21\u79fb\u52a8\uff0c\u90fd\u4f1a\u8ba1\u7b97\u51fa\u5f53\u524d\u7a97\u53e3\u7684\u4e2d\u4f4d\u6570\n        # 5. \u6700\u540e\u8fd4\u56de\u6240\u6709\u7684\u4e2d\u4f4d\u6570\n        \n        # 1. \u6ed1\u52a8\u7a97\u53e3\n        # 2. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u4e3a k"}, {"task_id": "sliding-window-median", "completion": "class Solution(object):\n    def medianSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[float]\n        \"\"\"\n        \n        # 1. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u4e3ak\n        # 2. \u6ed1\u52a8\u7a97\u53e3\u7684\u5de6\u8fb9\u754c\u4e3a0\n        # 3. \u6ed1\u52a8\u7a97\u53e3\u7684\u53f3\u8fb9\u754c\u4e3ak-1\n        # 4. \u6ed1\u52a8\u7a97\u53e3\u7684\u53f3\u8fb9\u754c\u6bcf\u6b21\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\n        # 5. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u5de6\u8fb9\u754c\u4e5f\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\n        # 6. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u53f3\u8fb9\u754c\u4e5f\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\n        # 7. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u5de6\u8fb9\u754c\u4e5f\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\n        # 8. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u53f3\u8fb9\u754c\u4e5f\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\n        # 9. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u5de6\u8fb9\u754c\u4e5f\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\n        # 10. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u53f3\u8fb9\u754c\u4e5f\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\n        # 11. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u5de6\u8fb9\u754c\u4e5f\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\n        # 12. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u53f3\u8fb9\u754c\u4e5f\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\n        # 13. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u5de6\u8fb9\u754c\u4e5f\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\n        # 14. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u53f3\u8fb9\u754c\u4e5f\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\n        # 15. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u5de6\u8fb9\u754c\u4e5f\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\n        # 16. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u53f3\u8fb9\u754c\u4e5f\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\n        # 17. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u5de6\u8fb9\u754c\u4e5f\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\n        # 18. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u53f3\u8fb9\u754c\u4e5f\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\n        # 19. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u5de6\u8fb9\u754c\u4e5f\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\n        # 20. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u53f3\u8fb9\u754c\u4e5f\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\n        # 21. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u5de6\u8fb9\u754c\u4e5f\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\n        # 22. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u53f3\u8fb9\u754c\u4e5f\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\n        # 23. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u5de6\u8fb9\u754c\u4e5f\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\n        # 24. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u53f3\u8fb9\u754c\u4e5f\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\n        # 25. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u5de6\u8fb9\u754c\u4e5f\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\n        # 26. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u53f3\u8fb9\u754c\u4e5f\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\n        # 27. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u5de6\u8fb9\u754c\u4e5f\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\n        # 28. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u53f3\u8fb9\u754c\u4e5f\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\n        # 29. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u5de6\u8fb9\u754c\u4e5f\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\n        # 30. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u53f3\u8fb9\u754c\u4e5f\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\n        # 31. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u5de6\u8fb9\u754c\u4e5f"}, {"task_id": "sliding-window-median", "completion": "class Solution(object):\n    def medianSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[float]\n        \"\"\"\n        \n        # 1. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u4e3a k\n        # 2. \u6ed1\u52a8\u7a97\u53e3\u7684\u5de6\u8fb9\u754c\u548c\u53f3\u8fb9\u754c\u90fd\u662f\u52a8\u6001\u7684\n        # 3. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u5411\u53f3\u79fb\u52a8\u4e00\u4e2a\u4f4d\u7f6e\n        # 4. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u90fd\u8981\u91cd\u65b0\u8ba1\u7b97\u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\n        # 5. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u90fd\u8981\u91cd\u65b0\u8ba1\u7b97\u7a97\u53e3\u5185\u7684\u4e2d\u4f4d\u6570\n        # 6. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u90fd\u8981\u91cd\u65b0\u8ba1\u7b97\u7a97\u53e3\u5185\u7684\u5e73\u5747\u503c\n        # 7. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u90fd\u8981\u91cd\u65b0\u8ba1\u7b97\u7a97\u53e3\u5185\u7684\u4e2d\u4f4d\u6570\n        # 8. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u90fd\u8981\u91cd\u65b0\u8ba1\u7b97\u7a97\u53e3\u5185\u7684\u4e2d\u4f4d\u6570\n        # 9. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u90fd\u8981\u91cd\u65b0\u8ba1\u7b97\u7a97\u53e3\u5185\u7684\u4e2d\u4f4d\u6570\n        # 10. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u90fd\u8981\u91cd\u65b0\u8ba1\u7b97\u7a97\u53e3\u5185\u7684\u4e2d\u4f4d\u6570\n        # 11. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u90fd\u8981\u91cd\u65b0\u8ba1\u7b97\u7a97\u53e3\u5185\u7684\u4e2d\u4f4d\u6570\n        # 12. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u90fd\u8981\u91cd\u65b0\u8ba1\u7b97\u7a97\u53e3\u5185\u7684\u4e2d\u4f4d\u6570\n        # 13. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u90fd\u8981\u91cd\u65b0\u8ba1\u7b97\u7a97\u53e3\u5185\u7684\u4e2d\u4f4d\u6570\n        # 14. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u90fd\u8981\u91cd\u65b0\u8ba1\u7b97\u7a97\u53e3\u5185\u7684\u4e2d\u4f4d\u6570\n        # 15. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u90fd\u8981\u91cd\u65b0\u8ba1\u7b97\u7a97\u53e3\u5185\u7684\u4e2d\u4f4d\u6570\n        # 16. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u90fd\u8981\u91cd\u65b0\u8ba1\u7b97\u7a97\u53e3\u5185\u7684\u4e2d\u4f4d\u6570\n        # 17. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u90fd\u8981\u91cd\u65b0\u8ba1\u7b97\u7a97\u53e3\u5185\u7684\u4e2d\u4f4d\u6570\n        # 18. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u90fd\u8981\u91cd\u65b0\u8ba1\u7b97\u7a97\u53e3\u5185\u7684\u4e2d\u4f4d\u6570\n        # 19. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u90fd\u8981\u91cd\u65b0\u8ba1\u7b97\u7a97\u53e3\u5185\u7684\u4e2d\u4f4d\u6570\n        # 20. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u90fd\u8981\u91cd\u65b0\u8ba1\u7b97\u7a97\u53e3\u5185\u7684\u4e2d\u4f4d\u6570\n        # 21. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u90fd\u8981\u91cd\u65b0\u8ba1\u7b97\u7a97\u53e3\u5185\u7684\u4e2d\u4f4d\u6570\n        # 22. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u90fd\u8981\u91cd\u65b0\u8ba1\u7b97\u7a97\u53e3\u5185\u7684\u4e2d\u4f4d\u6570\n        # 23. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u90fd\u8981\u91cd\u65b0\u8ba1\u7b97\u7a97\u53e3\u5185\u7684\u4e2d\u4f4d\u6570\n        # 24. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u90fd\u8981\u91cd\u65b0\u8ba1\u7b97\u7a97\u53e3\u5185\u7684\u4e2d\u4f4d\u6570\n        # 25. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u90fd\u8981\u91cd\u65b0\u8ba1\u7b97\u7a97\u53e3\u5185\u7684\u4e2d\u4f4d\u6570\n        # 26. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u90fd\u8981\u91cd\u65b0\u8ba1\u7b97\u7a97\u53e3\u5185\u7684\u4e2d\u4f4d\u6570\n        # 27. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u90fd\u8981\u91cd\u65b0\u8ba1\u7b97\u7a97\u53e3\u5185\u7684\u4e2d\u4f4d\u6570\n        # 28. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u90fd\u8981\u91cd\u65b0\u8ba1\u7b97\u7a97\u53e3\u5185\u7684\u4e2d\u4f4d\u6570\n        # 29. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u90fd\u8981\u91cd\u65b0\u8ba1\u7b97\u7a97\u53e3\u5185\u7684\u4e2d\u4f4d\u6570\n        # 30. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u90fd\u8981\u91cd\u65b0\u8ba1\u7b97\u7a97\u53e3\u5185\u7684\u4e2d\u4f4d\u6570\n        # 31. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u90fd\u8981\u91cd\u65b0\u8ba1\u7b97\u7a97\u53e3\u5185\u7684\u4e2d\u4f4d\u6570\n        # 32. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u90fd\u8981\u91cd\u65b0\u8ba1\u7b97\u7a97\u53e3"}, {"task_id": "sliding-window-median", "completion": "class Solution(object):\n    def medianSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[float]\n        \"\"\"\n        \n        # 1. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u4e3ak\n        # 2. \u6ed1\u52a8\u7a97\u53e3\u7684\u5de6\u8fb9\u754c\u4e3a0\n        # 3. \u6ed1\u52a8\u7a97\u53e3\u7684\u53f3\u8fb9\u754c\u4e3ak-1\n        # 4. \u6ed1\u52a8\u7a97\u53e3\u7684\u53f3\u8fb9\u754c\u6bcf\u6b21\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\n        # 5. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u79fb\u52a8\u540e\uff0c\u9700\u8981\u66f4\u65b0\u7a97\u53e3\u5185\u7684\u6570\u636e\n        # 6. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u79fb\u52a8\u540e\uff0c\u9700\u8981\u66f4\u65b0\u7a97\u53e3\u5185\u7684\u6570\u636e\n        # 7. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u79fb\u52a8\u540e\uff0c\u9700\u8981\u66f4\u65b0\u7a97\u53e3\u5185\u7684\u6570\u636e\n        # 8. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u79fb\u52a8\u540e\uff0c\u9700\u8981\u66f4\u65b0\u7a97\u53e3\u5185\u7684\u6570\u636e\n        # 9. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u79fb\u52a8\u540e\uff0c\u9700\u8981\u66f4\u65b0\u7a97\u53e3\u5185\u7684\u6570\u636e\n        # 10. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u79fb\u52a8\u540e\uff0c\u9700\u8981\u66f4\u65b0\u7a97\u53e3\u5185\u7684\u6570\u636e\n        # 11. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u79fb\u52a8\u540e\uff0c\u9700\u8981\u66f4\u65b0\u7a97\u53e3\u5185\u7684\u6570\u636e\n        # 12. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u79fb\u52a8\u540e\uff0c\u9700\u8981\u66f4\u65b0\u7a97\u53e3\u5185\u7684\u6570\u636e\n        # 13. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u79fb\u52a8\u540e\uff0c\u9700\u8981\u66f4\u65b0\u7a97\u53e3\u5185\u7684\u6570\u636e\n        # 14. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u79fb\u52a8\u540e\uff0c\u9700\u8981\u66f4\u65b0\u7a97\u53e3\u5185\u7684\u6570\u636e\n        # 15. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u79fb\u52a8\u540e\uff0c\u9700\u8981\u66f4\u65b0\u7a97\u53e3\u5185\u7684\u6570\u636e\n        # 16. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u79fb\u52a8\u540e\uff0c\u9700\u8981\u66f4\u65b0\u7a97\u53e3\u5185\u7684\u6570\u636e\n        # 17. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u79fb\u52a8\u540e\uff0c\u9700\u8981\u66f4\u65b0\u7a97\u53e3\u5185\u7684\u6570\u636e\n        # 18. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u79fb\u52a8\u540e\uff0c\u9700\u8981\u66f4\u65b0\u7a97\u53e3\u5185\u7684\u6570\u636e\n        # 19. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u79fb\u52a8\u540e\uff0c\u9700\u8981\u66f4\u65b0\u7a97\u53e3\u5185\u7684\u6570\u636e\n        # 20. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u79fb\u52a8\u540e\uff0c\u9700\u8981\u66f4\u65b0\u7a97\u53e3\u5185\u7684\u6570\u636e\n        # 21. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u79fb\u52a8\u540e\uff0c\u9700\u8981\u66f4\u65b0\u7a97\u53e3\u5185\u7684\u6570\u636e\n        # 22. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u79fb\u52a8\u540e\uff0c\u9700\u8981\u66f4\u65b0\u7a97\u53e3\u5185\u7684\u6570\u636e\n        # 23. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u79fb\u52a8\u540e\uff0c\u9700\u8981\u66f4\u65b0\u7a97\u53e3\u5185\u7684\u6570\u636e\n        # 24. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u79fb\u52a8\u540e\uff0c\u9700\u8981\u66f4\u65b0\u7a97\u53e3\u5185\u7684\u6570\u636e\n        # 25. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u79fb\u52a8\u540e\uff0c\u9700\u8981\u66f4\u65b0\u7a97\u53e3\u5185\u7684\u6570\u636e\n        # 26. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u79fb\u52a8\u540e\uff0c\u9700\u8981\u66f4\u65b0\u7a97\u53e3\u5185\u7684\u6570\u636e\n        # 27. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u79fb\u52a8\u540e\uff0c\u9700\u8981\u66f4\u65b0\u7a97\u53e3\u5185\u7684\u6570\u636e\n        # 28. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u79fb\u52a8\u540e\uff0c\u9700\u8981\u66f4\u65b0\u7a97\u53e3\u5185\u7684\u6570\u636e\n        # 29. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u79fb\u52a8\u540e\uff0c\u9700\u8981\u66f4\u65b0\u7a97\u53e3\u5185\u7684\u6570\u636e\n        # 30. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u79fb\u52a8\u540e\uff0c\u9700\u8981\u66f4\u65b0\u7a97\u53e3\u5185\u7684\u6570\u636e\n        # 31. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u79fb\u52a8\u540e\uff0c\u9700\u8981\u66f4\u65b0\u7a97\u53e3\u5185\u7684\u6570\u636e\n        # 32. \u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u79fb\u52a8\u540e"}, {"task_id": "sliding-window-median", "completion": "class Solution(object):\n    def medianSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[float]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u524dk\u4e2a\u6570\u7684\u4e2d\u4f4d\u6570\n        # 2. \u627e\u5230\u540e\u9762\u7684\u6570\u7684\u4e2d\u4f4d\u6570\n        # 3. \u628a\u524d\u9762\u7684\u6570\u5220\u9664\n        # 4. \u628a\u540e\u9762\u7684\u6570\u52a0\u5165\n        # 5. \u91cd\u590d1-4\n        # 6. \u628a\u524d\u9762\u7684\u6570\u52a0\u5165\n        # 7. \u628a\u540e\u9762\u7684\u6570\u5220\u9664\n        # 8. \u91cd\u590d1-7\n        # 9. \u628a\u524d\u9762\u7684\u6570\u52a0\u5165\n        # 10. \u628a\u540e\u9762\u7684\u6570\u5220\u9664\n        # 11. \u91cd\u590d1-10\n        # 12. \u628a\u524d\u9762\u7684\u6570\u52a0\u5165\n        # 13. \u628a\u540e\u9762\u7684\u6570\u5220\u9664\n        # 14. \u91cd\u590d1-13\n        # 15. \u628a\u524d\u9762\u7684\u6570\u52a0\u5165\n        # 16. \u628a\u540e\u9762\u7684\u6570\u5220\u9664\n        # 17. \u91cd\u590d1-16\n        # 18. \u628a\u524d\u9762\u7684\u6570\u52a0\u5165\n        # 19. \u628a\u540e\u9762\u7684\u6570\u5220\u9664\n        # 20. \u91cd\u590d1-19\n        # 21. \u628a\u524d\u9762\u7684\u6570\u52a0\u5165\n        # 22. \u628a\u540e\u9762\u7684\u6570\u5220\u9664\n        # 23. \u91cd\u590d1-22\n        # 24. \u628a\u524d\u9762\u7684\u6570\u52a0\u5165\n        # 25. \u628a\u540e\u9762\u7684\u6570\u5220\u9664\n        # 26. \u91cd\u590d1-25\n        # 27. \u628a\u524d\u9762\u7684\u6570\u52a0\u5165\n        # 28. \u628a\u540e\u9762\u7684\u6570\u5220\u9664\n        # 29. \u91cd\u590d1-28\n        # 30. \u628a\u524d\u9762\u7684\u6570\u52a0\u5165\n        # 31. \u628a\u540e\u9762\u7684\u6570\u5220\u9664\n        # 32. \u91cd\u590d1-31\n        # 33. \u628a\u524d\u9762\u7684\u6570\u52a0\u5165\n        # 34. \u628a\u540e\u9762\u7684\u6570\u5220\u9664\n        # 35. \u91cd\u590d1-34\n        # 36. \u628a\u524d\u9762\u7684\u6570\u52a0\u5165\n        # 37. \u628a\u540e\u9762\u7684\u6570\u5220\u9664\n        # 38. \u91cd\u590d1-37\n        # 39. \u628a\u524d\u9762\u7684\u6570\u52a0\u5165\n        # 40. \u628a\u540e\u9762\u7684\u6570\u5220\u9664\n        # 41. \u91cd\u590d1-40\n        # 42. \u628a\u524d\u9762\u7684\u6570\u52a0\u5165\n        # 43. \u628a\u540e\u9762\u7684\u6570\u5220\u9664\n        # 44. \u91cd\u590d1-43\n        # 45. \u628a\u524d\u9762\u7684\u6570\u52a0\u5165\n        # 46. \u628a\u540e\u9762\u7684\u6570\u5220\u9664\n        # 47. \u91cd\u590d1-46\n        # 48. \u628a\u524d\u9762\u7684\u6570\u52a0\u5165\n        # 49. \u628a\u540e\u9762\u7684\u6570\u5220\u9664\n        # 50. \u91cd\u590d1-49\n        # 51. \u628a\u524d\u9762\u7684\u6570\u52a0\u5165\n        # 52. \u628a\u540e\u9762\u7684\u6570\u5220\u9664\n        # 53. \u91cd\u590d1-52\n        # 54. \u628a\u524d\u9762\u7684\u6570\u52a0\u5165\n        # 55. \u628a\u540e\u9762\u7684\u6570\u5220\u9664\n        # 56. \u91cd\u590d1-55\n        # 57. \u628a\u524d\u9762\u7684\u6570\u52a0\u5165\n        # 58. \u628a\u540e\u9762\u7684\u6570\u5220\u9664\n        # 59. \u91cd\u590d1-58\n        # 60. \u628a\u524d\u9762\u7684\u6570\u52a0\u5165\n        # 61. \u628a\u540e\u9762\u7684\u6570\u5220\u9664\n        # 62. \u91cd\u590d1-61\n        # 63. \u628a\u524d\u9762\u7684\u6570\u52a0\u5165\n        # 64. \u628a\u540e\u9762\u7684\u6570\u5220\u9664"}], "rotate-list": [{"task_id": "rotate-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return None\n        \n        if k == 0:\n            return head\n        \n        # find the length of the linked list\n        length = 0\n        node = head\n        while node is not None:\n            length += 1\n            node = node.next\n        \n        # find the kth node from the end\n        k = k % length\n        if k == 0:\n            return head\n        \n        # find the node before the kth node from the end\n        node = head\n        for i in range(length - k - 1):\n            node = node.next\n        \n        # reverse the linked list from the node before the kth node from the end to the end\n        prev = node\n        node = node.next\n        while node is not None:\n            temp = node.next\n            node.next = prev\n            prev = node\n            node = temp\n        \n        # connect the head to the end of the reversed linked list\n        node.next = head\n        \n        # return the head of the reversed linked list\n        return prev"}, {"task_id": "rotate-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return None\n        \n        if k == 0:\n            return head\n        \n        # find the length of the list\n        length = 1\n        node = head\n        while node.next is not None:\n            node = node.next\n            length += 1\n        \n        # find the kth node\n        k = k % length\n        if k == 0:\n            return head\n        \n        # find the node before the kth node\n        node = head\n        for i in range(length - k - 1):\n            node = node.next\n        \n        # reverse the list after the kth node\n        prev = node\n        node = node.next\n        prev.next = None\n        while node is not None:\n            next = node.next\n            node.next = prev\n            prev = node\n            node = next\n        \n        # connect the list\n        node.next = head\n        return prev"}, {"task_id": "rotate-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        if not head.next:\n            return head\n        \n        # find the length of the list\n        length = 1\n        node = head\n        while node.next:\n            node = node.next\n            length += 1\n        \n        # find the kth node\n        k = k % length\n        if k == 0:\n            return head\n        \n        # find the node before the kth node\n        node = head\n        for i in range(length - k - 1):\n            node = node.next\n        \n        # reverse the list after the kth node\n        prev = node\n        node = node.next\n        prev.next = None\n        while node:\n            next = node.next\n            node.next = prev\n            prev = node\n            node = next\n        \n        # connect the list\n        node.next = head\n        return prev"}, {"task_id": "rotate-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return None\n        \n        if k == 0:\n            return head\n        \n        # find the length of the list\n        length = 0\n        node = head\n        while node is not None:\n            length += 1\n            node = node.next\n        \n        # find the kth node from the end\n        k = k % length\n        if k == 0:\n            return head\n        \n        # find the node before the kth node from the end\n        node = head\n        for i in range(length - k - 1):\n            node = node.next\n        \n        # reverse the list after the kth node from the end\n        prev = node\n        node = node.next\n        while node is not None:\n            temp = node.next\n            node.next = prev\n            prev = node\n            node = temp\n        \n        # connect the list\n        node.next = head\n        \n        # return the new head\n        return prev"}, {"task_id": "rotate-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return None\n        \n        if k == 0:\n            return head\n        \n        # find the length of the list\n        length = 1\n        node = head\n        while node.next is not None:\n            length += 1\n            node = node.next\n        \n        # find the kth node\n        k = k % length\n        if k == 0:\n            return head\n        \n        # find the node before the kth node\n        node = head\n        for i in range(length - k - 1):\n            node = node.next\n        \n        # reverse the list after the kth node\n        prev = node\n        node = node.next\n        prev.next = None\n        while node is not None:\n            next = node.next\n            node.next = prev\n            prev = node\n            node = next\n        \n        # connect the list\n        node.next = head\n        \n        return prev"}], "ugly-number": [{"task_id": "ugly-number", "completion": "class Solution(object):\n    def isUgly(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        if n == 1:\n            return True\n        if n == 2 or n == 3 or n == 5:\n            return True\n        if n % 2 == 0:\n            n = n // 2\n        if n == 1:\n            return True\n        if n % 3 == 0:\n            n = n // 3\n        if n == 1:\n            return True\n        if n % 5 == 0:\n            n = n // 5\n        if n == 1:\n            return True\n        return False"}, {"task_id": "ugly-number", "completion": "class Solution(object):\n    def isUgly(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        if n == 1:\n            return True\n        if n == 2 or n == 3 or n == 5:\n            return True\n        if n % 2 == 0:\n            n = n // 2\n        if n == 1:\n            return True\n        if n % 3 == 0:\n            n = n // 3\n        if n == 1:\n            return True\n        if n % 5 == 0:\n            n = n // 5\n        if n == 1:\n            return True\n        return False"}, {"task_id": "ugly-number", "completion": "class Solution(object):\n    def isUgly(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n == 0:\n            return False\n        \n        while n % 2 == 0:\n            n = n // 2\n        while n % 3 == 0:\n            n = n // 3\n        while n % 5 == 0:\n            n = n // 5\n        \n        return n == 1"}, {"task_id": "ugly-number", "completion": "class Solution(object):\n    def isUgly(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 2 == 0:\n            n /= 2\n        while n % 3 == 0:\n            n /= 3\n        while n % 5 == 0:\n            n /= 5\n        \n        return n == 1"}, {"task_id": "ugly-number", "completion": "class Solution(object):\n    def isUgly(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n == 0:\n            return False\n        if n == 1:\n            return True\n        if n == 2:\n            return True\n        if n == 3:\n            return True\n        if n == 4:\n            return True\n        if n == 5:\n            return True\n        if n == 6:\n            return True\n        if n == 7:\n            return True\n        if n == 8:\n            return True\n        if n == 9:\n            return True\n        if n == 10:\n            return True\n        if n == 11:\n            return True\n        if n == 12:\n            return True\n        if n == 13:\n            return True\n        if n == 14:\n            return True\n        if n == 15:\n            return True\n        if n == 16:\n            return True\n        if n == 17:\n            return True\n        if n == 18:\n            return True\n        if n == 19:\n            return True\n        if n == 20:\n            return True\n        if n == 21:\n            return True\n        if n == 22:\n            return True\n        if n == 23:\n            return True\n        if n == 24:\n            return True\n        if n == 25:\n            return True\n        if n == 26:\n            return True\n        if n == 27:\n            return True\n        if n == 28:\n            return True\n        if n == 29:\n            return True\n        if n == 30:\n            return True\n        if n == 31:\n            return True\n        if n == 32:\n            return True\n        if n == 33:\n            return True\n        if n == 34:\n            return True\n        if n == 35:\n            return True\n        if n == 36:\n            return True\n        if n == 37:\n            return True\n        if n == 38:\n            return True\n        if n == 39:\n            return True\n        if n == 40:\n            return True\n        if n == 41:\n            return True\n        if n == 42:\n            return True\n        if n == 43:\n            return True\n        if n == 44:\n            return True\n        if n == 45:\n            return True\n        if n == 46:\n            return True\n        if n == 47:\n            return True\n        if n == 48:\n            return True\n        if n == 49:\n            return True\n        if n == 50:\n            return True\n        if n == 51:\n            return True\n        if n == 52:\n            return True\n        if n == 53:\n            return True\n        if n == 54:\n            return True\n        if n == 55:\n            return True\n        if n == 56:\n            return True\n        if n == 57:\n            return True\n        if n == 58:\n            return True\n        if n == 59:\n            return True\n        if n == 60:\n            return True\n        if n == 61:\n            return True\n        if n == 62:\n            return True\n        if n == 63:\n            return True\n        if n == 64:\n            return True\n        if n == 65:\n            return True\n        if n == 66:\n            return True\n        if n == 67:\n            return True\n        if n == 68:\n            return True\n        if n == 69:\n            return True\n        if n == 70:\n            return True\n        if n == 71:\n            return True\n        if n == 72:\n            return True\n        if n == 73:\n            return True\n        if n == 74:\n            return True\n        if n == 75:\n            return True\n        if n == 76:\n            return True\n        if n == 77:\n            return True\n        if n == 78:\n            return True\n        if n == 79"}], "falling-squares": [{"task_id": "falling-squares", "completion": "class Solution(object):\n    def fallingSquares(self, positions):\n        \"\"\"\n        :type positions: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 2. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\u7684\u4e0b\u4e00\u4e2a\n        # 3. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\u7684\u4e0b\u4e0b\u4e2a\n        # 4. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\u7684\u4e0b\u4e0b\u4e0b\u4e2a\n        # 5. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\u7684\u4e0b\u4e0b\u4e0b\u4e0b\u4e2a\n        # 6. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\u7684\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e2a\n        # 7. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\u7684\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e2a\n        # 8. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\u7684\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e2a\n        # 9. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\u7684\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e2a\n        # 10. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\u7684\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e2a\n        # 11. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\u7684\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e2a\n        # 12. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\u7684\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e2a\n        # 13. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\u7684\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e2a\n        # 14. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\u7684\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e2a\n        # 15. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\u7684\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e2a\n        # 16. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\u7684\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e2a\n        # 17. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\u7684\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e2a\n        # 18. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\u7684\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e2a\n        # 19. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\u7684\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e2a\n        # 20. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\u7684\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e2a\n        # 21. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\u7684\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e2a\n        # 22. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\u7684\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e2a\n        # 23. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\u7684\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e2a\n        # 24. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\u7684\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e2a\n        # 25. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\u7684\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e2a\n        # 26. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\u7684\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e2a\n        # 27. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\u7684\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e2a\n        # 28. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\u7684\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e2a\n        # 29. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\u7684\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e2a\n        # 30. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\u7684\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e2a\n        # 31. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\u7684\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b"}, {"task_id": "falling-squares", "completion": "class Solution(object):\n    def fallingSquares(self, positions):\n        \"\"\"\n        :type positions: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u9ad8\u7684\u67f1\u5b50\n        # 2. \u627e\u5230\u6700\u9ad8\u7684\u67f1\u5b50\u7684\u4e0b\u4e00\u4e2a\u67f1\u5b50\n        # 3. \u627e\u5230\u6700\u9ad8\u7684\u67f1\u5b50\u7684\u4e0b\u4e0b\u4e2a\u67f1\u5b50\n        # 4. \u91cd\u590d\u6b65\u9aa42\u548c3\uff0c\u76f4\u5230\u67f1\u5b50\u7684\u4e0b\u4e0b\u4e2a\u67f1\u5b50\u7684\u9ad8\u5ea6\u5c0f\u4e8e\u7b49\u4e8e\u67f1\u5b50\u7684\u9ad8\u5ea6\n        # 5. \u627e\u5230\u6700\u9ad8\u7684\u67f1\u5b50\u7684\u4e0b\u4e0b\u4e2a\u67f1\u5b50\u7684\u4e0b\u4e0b\u4e2a\u67f1\u5b50\n        # 6. \u91cd\u590d\u6b65\u9aa42\u548c3\uff0c\u76f4\u5230\u67f1\u5b50\u7684\u4e0b\u4e0b\u4e2a\u67f1\u5b50\u7684\u9ad8\u5ea6\u5c0f\u4e8e\u7b49\u4e8e\u67f1\u5b50\u7684\u9ad8\u5ea6\n        # 7. \u91cd\u590d\u6b65\u9aa41-6\uff0c\u76f4\u5230\u67f1\u5b50\u7684\u4e0b\u4e0b\u4e2a\u67f1\u5b50\u7684\u4e0b\u4e0b\u4e2a\u67f1\u5b50\u7684\u9ad8\u5ea6\u5c0f\u4e8e\u7b49\u4e8e\u67f1\u5b50\u7684\u9ad8\u5ea6\n        # 8. \u91cd\u590d\u6b65\u9aa41-7\uff0c\u76f4\u5230\u67f1\u5b50\u7684\u4e0b\u4e0b\u4e2a\u67f1\u5b50\u7684\u4e0b\u4e0b\u4e2a\u67f1\u5b50\u7684\u4e0b\u4e0b\u4e2a\u67f1\u5b50\u7684\u9ad8\u5ea6\u5c0f\u4e8e\u7b49\u4e8e\u67f1\u5b50\u7684\u9ad8\u5ea6\n        # 9. \u91cd\u590d\u6b65\u9aa41-8\uff0c\u76f4\u5230\u67f1\u5b50\u7684\u4e0b\u4e0b\u4e2a\u67f1\u5b50\u7684\u4e0b\u4e0b\u4e2a\u67f1\u5b50\u7684\u4e0b\u4e0b\u4e2a\u67f1\u5b50\u7684\u4e0b\u4e0b\u4e2a\u67f1\u5b50\u7684\u9ad8\u5ea6\u5c0f\u4e8e\u7b49\u4e8e\u67f1\u5b50\u7684\u9ad8\u5ea6\n        # 10. \u91cd\u590d\u6b65\u9aa41-9\uff0c\u76f4\u5230\u67f1\u5b50\u7684\u4e0b\u4e0b\u4e2a\u67f1\u5b50\u7684\u4e0b\u4e0b\u4e2a\u67f1\u5b50\u7684\u4e0b\u4e0b\u4e2a\u67f1\u5b50\u7684\u4e0b\u4e0b\u4e2a\u67f1\u5b50\u7684\u4e0b\u4e0b\u4e2a\u67f1\u5b50\u7684\u9ad8\u5ea6\u5c0f\u4e8e\u7b49\u4e8e\u67f1\u5b50\u7684\u9ad8\u5ea6\n        # 11. \u91cd\u590d\u6b65\u9aa41-10\uff0c\u76f4\u5230\u67f1\u5b50\u7684\u4e0b\u4e0b\u4e2a\u67f1\u5b50\u7684\u4e0b\u4e0b\u4e2a\u67f1\u5b50\u7684\u4e0b\u4e0b\u4e2a\u67f1\u5b50\u7684\u4e0b\u4e0b\u4e2a\u67f1\u5b50\u7684\u4e0b\u4e0b\u4e2a\u67f1\u5b50\u7684\u4e0b\u4e0b\u4e2a\u67f1\u5b50\u7684\u9ad8\u5ea6\u5c0f\u4e8e\u7b49\u4e8e\u67f1\u5b50\u7684\u9ad8\u5ea6\n        # 12. \u91cd\u590d\u6b65\u9aa41-11\uff0c\u76f4\u5230\u67f1\u5b50\u7684\u4e0b\u4e0b\u4e2a\u67f1\u5b50\u7684\u4e0b\u4e0b\u4e2a\u67f1\u5b50\u7684\u4e0b\u4e0b\u4e2a\u67f1\u5b50\u7684\u4e0b\u4e0b\u4e2a\u67f1\u5b50\u7684\u4e0b\u4e0b\u4e2a\u67f1\u5b50\u7684\u4e0b\u4e0b\u4e2a\u67f1\u5b50\u7684\u4e0b\u4e0b\u4e2a\u67f1\u5b50\u7684\u4e0b\u4e0b\u4e2a\u67f1\u5b50\u7684\u9ad8\u5ea6\u5c0f\u4e8e\u7b49\u4e8e\u67f1\u5b50\u7684\u9ad8\u5ea6\n        # 13. \u91cd\u590d\u6b65\u9aa41-12\uff0c\u76f4\u5230\u67f1\u5b50\u7684\u4e0b\u4e0b\u4e2a\u67f1\u5b50\u7684\u4e0b\u4e0b\u4e2a\u67f1\u5b50\u7684\u4e0b\u4e0b\u4e2a\u67f1\u5b50\u7684\u4e0b\u4e0b\u4e2a\u67f1\u5b50\u7684\u4e0b\u4e0b\u4e2a\u67f1\u5b50\u7684\u4e0b\u4e0b\u4e2a\u67f1\u5b50\u7684\u4e0b\u4e0b\u4e2a\u67f1\u5b50\u7684\u4e0b\u4e0b\u4e2a\u67f1\u5b50\u7684\u4e0b\u4e0b\u4e2a\u67f1\u5b50\u7684\u4e0b\u4e0b\u4e2a\u67f1\u5b50\u7684\u9ad8\u5ea6\u5c0f\u4e8e\u7b49\u4e8e\u67f1\u5b50\u7684\u9ad8\u5ea6\n        # 14. \u91cd\u590d\u6b65\u9aa41-13\uff0c\u76f4\u5230\u67f1\u5b50\u7684\u4e0b\u4e0b\u4e2a\u67f1\u5b50\u7684\u4e0b\u4e0b\u4e2a\u67f1\u5b50\u7684\u4e0b\u4e0b\u4e2a\u67f1\u5b50\u7684\u4e0b\u4e0b\u4e2a\u67f1\u5b50\u7684\u4e0b\u4e0b\u4e2a\u67f1\u5b50\u7684\u4e0b\u4e0b\u4e2a\u67f1\u5b50\u7684\u4e0b\u4e0b\u4e2a\u67f1\u5b50\u7684\u4e0b\u4e0b\u4e2a\u67f1\u5b50\u7684\u4e0b\u4e0b\u4e2a\u67f1\u5b50\u7684\u4e0b\u4e0b\u4e2a\u67f1\u5b50\u7684\u4e0b\u4e0b\u4e2a\u67f1\u5b50\u7684\u4e0b\u4e0b\u4e2a\u67f1\u5b50\u7684\u4e0b\u4e0b\u4e2a\u67f1\u5b50\u7684\u9ad8\u5ea6\u5c0f\u4e8e\u7b49\u4e8e\u67f1\u5b50\u7684\u9ad8\u5ea6\n        # 15. \u91cd\u590d\u6b65\u9aa41-14\uff0c\u76f4\u5230\u67f1\u5b50\u7684\u4e0b\u4e0b\u4e2a\u67f1\u5b50\u7684\u4e0b\u4e0b\u4e2a\u67f1\u5b50\u7684\u4e0b\u4e0b\u4e2a\u67f1\u5b50\u7684\u4e0b\u4e0b\u4e2a\u67f1\u5b50\u7684\u4e0b\u4e0b\u4e2a\u67f1\u5b50\u7684\u4e0b\u4e0b\u4e2a\u67f1\u5b50\u7684\u4e0b\u4e0b\u4e2a\u67f1\u5b50\u7684\u4e0b\u4e0b\u4e2a\u67f1\u5b50\u7684\u4e0b\u4e0b\u4e2a\u67f1"}, {"task_id": "falling-squares", "completion": "class Solution(object):\n    def fallingSquares(self, positions):\n        \"\"\"\n        :type positions: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6bcf\u4e2a\u65b9\u5757\u7684\u6700\u9ad8\u70b9\n        # 2. \u627e\u5230\u6bcf\u4e2a\u65b9\u5757\u7684\u6700\u4f4e\u70b9\n        # 3. \u627e\u5230\u6bcf\u4e2a\u65b9\u5757\u7684\u6700\u9ad8\u70b9\u548c\u6700\u4f4e\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\n        # 4. \u627e\u5230\u6bcf\u4e2a\u65b9\u5757\u7684\u6700\u9ad8\u70b9\u548c\u6700\u4f4e\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\n        # 5. \u627e\u5230\u6bcf\u4e2a\u65b9\u5757\u7684\u6700\u9ad8\u70b9\u548c\u6700\u4f4e\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\n        # 6. \u627e\u5230\u6bcf\u4e2a\u65b9\u5757\u7684\u6700\u9ad8\u70b9\u548c\u6700\u4f4e\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\n        # 7. \u627e\u5230\u6bcf\u4e2a\u65b9\u5757\u7684\u6700\u9ad8\u70b9\u548c\u6700\u4f4e\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\n        # 8. \u627e\u5230\u6bcf\u4e2a\u65b9\u5757\u7684\u6700\u9ad8\u70b9\u548c\u6700\u4f4e\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\n        # 9. \u627e\u5230\u6bcf\u4e2a\u65b9\u5757\u7684\u6700\u9ad8\u70b9\u548c\u6700\u4f4e\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\n        # 10. \u627e\u5230\u6bcf\u4e2a\u65b9\u5757\u7684\u6700\u9ad8\u70b9\u548c\u6700\u4f4e\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\n        # 11. \u627e\u5230\u6bcf\u4e2a\u65b9\u5757\u7684\u6700\u9ad8\u70b9\u548c\u6700\u4f4e\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\n        # 12. \u627e\u5230\u6bcf\u4e2a\u65b9\u5757\u7684\u6700\u9ad8\u70b9\u548c\u6700\u4f4e\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\n        # 13. \u627e\u5230\u6bcf\u4e2a\u65b9\u5757\u7684\u6700\u9ad8\u70b9\u548c\u6700\u4f4e\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\n        # 14. \u627e\u5230\u6bcf\u4e2a\u65b9\u5757\u7684\u6700\u9ad8\u70b9\u548c\u6700\u4f4e\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\n        # 15. \u627e\u5230\u6bcf\u4e2a\u65b9\u5757\u7684\u6700\u9ad8\u70b9\u548c\u6700\u4f4e\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\n        # 16. \u627e\u5230\u6bcf\u4e2a\u65b9\u5757\u7684\u6700\u9ad8\u70b9\u548c\u6700\u4f4e\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\n        # 17. \u627e\u5230\u6bcf\u4e2a\u65b9\u5757\u7684\u6700\u9ad8\u70b9\u548c\u6700\u4f4e\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\n        # 18. \u627e\u5230\u6bcf\u4e2a\u65b9\u5757\u7684\u6700\u9ad8\u70b9\u548c\u6700\u4f4e\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\n        # 19. \u627e\u5230\u6bcf\u4e2a\u65b9\u5757\u7684\u6700\u9ad8\u70b9\u548c\u6700\u4f4e\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\n        # 20. \u627e\u5230\u6bcf\u4e2a\u65b9\u5757\u7684\u6700\u9ad8\u70b9\u548c\u6700\u4f4e\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\n        # 21. \u627e\u5230\u6bcf\u4e2a\u65b9\u5757\u7684\u6700\u9ad8\u70b9\u548c\u6700\u4f4e\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\n        # 22. \u627e\u5230\u6bcf\u4e2a\u65b9\u5757\u7684\u6700\u9ad8\u70b9\u548c\u6700\u4f4e\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\n        # 23. \u627e\u5230\u6bcf\u4e2a\u65b9\u5757\u7684\u6700\u9ad8\u70b9\u548c\u6700\u4f4e\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\n        # 24. \u627e\u5230\u6bcf\u4e2a\u65b9\u5757\u7684\u6700\u9ad8\u70b9\u548c\u6700\u4f4e\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\n        # 25. \u627e\u5230\u6bcf\u4e2a\u65b9\u5757\u7684\u6700\u9ad8\u70b9\u548c\u6700\u4f4e\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\n        # 26. \u627e\u5230\u6bcf\u4e2a\u65b9\u5757\u7684\u6700\u9ad8\u70b9\u548c\u6700\u4f4e\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\n        # 27. \u627e\u5230\u6bcf\u4e2a\u65b9\u5757\u7684\u6700\u9ad8\u70b9\u548c\u6700\u4f4e\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\n        # 28. \u627e\u5230\u6bcf\u4e2a\u65b9\u5757\u7684\u6700\u9ad8\u70b9\u548c\u6700\u4f4e\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\n        # 29. \u627e\u5230\u6bcf\u4e2a\u65b9\u5757\u7684\u6700\u9ad8\u70b9\u548c\u6700\ufffd\ufffd"}, {"task_id": "falling-squares", "completion": "class Solution(object):\n    def fallingSquares(self, positions):\n        \"\"\"\n        :type positions: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 2. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\u7684\u4e0b\u4e00\u4e2a\n        # 3. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\u7684\u4e0b\u4e0b\u4e2a\n        # 4. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\u7684\u4e0b\u4e0b\u4e0b\u4e2a\n        # 5. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\u7684\u4e0b\u4e0b\u4e0b\u4e0b\u4e2a\n        # 6. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\u7684\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e2a\n        # 7. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\u7684\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e2a\n        # 8. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\u7684\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e2a\n        # 9. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\u7684\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e2a\n        # 10. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\u7684\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e2a\n        # 11. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\u7684\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e2a\n        # 12. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\u7684\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e2a\n        # 13. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\u7684\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e2a\n        # 14. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\u7684\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e2a\n        # 15. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\u7684\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e2a\n        # 16. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\u7684\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e2a\n        # 17. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\u7684\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e2a\n        # 18. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\u7684\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e2a\n        # 19. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\u7684\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e2a\n        # 20. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\u7684\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e2a\n        # 21. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\u7684\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e2a\n        # 22. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\u7684\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e2a\n        # 23. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\u7684\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e2a\n        # 24. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\u7684\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e2a\n        # 25. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\u7684\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e2a\n        # 26. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\u7684\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e2a\n        # 27. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\u7684\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e2a\n        # 28. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\u7684\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e2a\n        # 29. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\u7684\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e2a\n        # 30. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\u7684\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e2a\n        # 31. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\u7684\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b"}, {"task_id": "falling-squares", "completion": "class Solution(object):\n    def fallingSquares(self, positions):\n        \"\"\"\n        :type positions: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u9ad8\u7684\u67f1\u5b50\n        # 2. \u627e\u5230\u6700\u9ad8\u7684\u67f1\u5b50\u7684\u4e0b\u4e00\u4e2a\u67f1\u5b50\n        # 3. \u627e\u5230\u6700\u9ad8\u7684\u67f1\u5b50\u7684\u4e0b\u4e0b\u4e2a\u67f1\u5b50\n        # 4. \u91cd\u590d\u6b65\u9aa42\u548c3\n        # 5. \u91cd\u590d\u6b65\u9aa41-4\n        # 6. \u8fd4\u56de\u7ed3\u679c\n        \n        # \u627e\u5230\u6700\u9ad8\u7684\u67f1\u5b50\n        max_height = 0\n        max_height_index = 0\n        for i in range(len(positions)):\n            if positions[i][1] > max_height:\n                max_height = positions[i][1]\n                max_height_index = i\n        \n        # \u627e\u5230\u6700\u9ad8\u7684\u67f1\u5b50\u7684\u4e0b\u4e00\u4e2a\u67f1\u5b50\n        next_max_height = 0\n        next_max_height_index = 0\n        for i in range(len(positions)):\n            if i == max_height_index:\n                continue\n            if positions[i][1] > next_max_height:\n                next_max_height = positions[i][1]\n                next_max_height_index = i\n        \n        # \u627e\u5230\u6700\u9ad8\u7684\u67f1\u5b50\u7684\u4e0b\u4e0b\u4e2a\u67f1\u5b50\n        next_next_max_height = 0\n        next_next_max_height_index = 0\n        for i in range(len(positions)):\n            if i == max_height_index or i == next_max_height_index:\n                continue\n            if positions[i][1] > next_next_max_height:\n                next_next_max_height = positions[i][1]\n                next_next_max_height_index = i\n        \n        # \u91cd\u590d\u6b65\u9aa42\u548c3\n        while next_max_height_index != next_next_max_height_index:\n            if positions[next_max_height_index][0] < positions[next_next_max_height_index][0]:\n                next_max_height = next_next_max_height\n                next_max_height_index = next_next_max_height_index\n            else:\n                next_max_height = next_max_height\n                next_max_height_index = next_max_height_index\n            for i in range(len(positions)):\n                if i == max_height_index:\n                    continue\n                if positions[i][1] > next_max_height:\n                    next_max_height = positions[i][1]\n                    next_max_height_index = i\n            for i in range(len(positions)):\n                if i == max_height_index or i == next_max_height_index:\n                    continue\n                if positions[i][1] > next_next_max_height:\n                    next_next_max_height = positions[i][1]\n                    next_next_max_height_index = i\n        \n        # \u91cd\u590d\u6b65\u9aa41-4\n        while max_height_index != next_max_height_index:\n            if positions[max_height_index][0] < positions[next_max_height_index][0]:\n                max_height = next_max_height\n                max_height_index = next_max_height_index\n            else:\n                max_height = max_height\n                max_height_index = max_height_index\n            for i in range(len(positions)):\n                if i == max_height_index:\n                    continue\n                if positions[i][1] > next_max_height:\n                    next_max_height = positions[i][1]\n                    next_max_height_index = i\n            for i in range(len(positions)):\n                if i == max_height_index or i == next_max_height_index:\n                    continue\n                if positions[i][1] > next_next_max_height:\n                    next_next_max_height = positions[i][1]\n                    next_next_max_height_index = i\n        \n        # \u8fd4\u56de\u7ed3\u679c\n        result = []\n        for"}], "sum-of-left-leaves": [{"task_id": "sum-of-left-leaves", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumOfLeftLeaves(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def dfs(node, is_left):\n            if not node:\n                return 0\n            if not node.left and not node.right:\n                if is_left:\n                    return node.val\n                else:\n                    return 0\n            return dfs(node.left, True) + dfs(node.right, False)\n        \n        return dfs(root, False)"}, {"task_id": "sum-of-left-leaves", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumOfLeftLeaves(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def dfs(node, isLeft):\n            if not node:\n                return 0\n            if not node.left and not node.right:\n                if isLeft:\n                    return node.val\n                else:\n                    return 0\n            return dfs(node.left, True) + dfs(node.right, False)\n        \n        return dfs(root, False)"}, {"task_id": "sum-of-left-leaves", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumOfLeftLeaves(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def dfs(node, is_left):\n            if not node:\n                return 0\n            if not node.left and not node.right:\n                if is_left:\n                    return node.val\n                else:\n                    return 0\n            return dfs(node.left, True) + dfs(node.right, False)\n        \n        return dfs(root, False)"}, {"task_id": "sum-of-left-leaves", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumOfLeftLeaves(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def sumOfLeftLeavesHelper(root, isLeft):\n            if not root:\n                return 0\n            if not root.left and not root.right:\n                if isLeft:\n                    return root.val\n                else:\n                    return 0\n            return sumOfLeftLeavesHelper(root.left, True) + sumOfLeftLeavesHelper(root.right, False)\n        \n        return sumOfLeftLeavesHelper(root, False)"}, {"task_id": "sum-of-left-leaves", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumOfLeftLeaves(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def sumOfLeftLeavesHelper(root, isLeft):\n            if not root:\n                return 0\n            if not root.left and not root.right:\n                if isLeft:\n                    return root.val\n                else:\n                    return 0\n            return sumOfLeftLeavesHelper(root.left, True) + sumOfLeftLeavesHelper(root.right, False)\n        \n        return sumOfLeftLeavesHelper(root, False)"}], "max-sum-of-rectangle-no-larger-than-k": [{"task_id": "max-sum-of-rectangle-no-larger-than-k", "completion": "class Solution(object):\n    def maxSumSubmatrix(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u51fa\u6240\u6709\u7684\u5b50\u77e9\u9635\n        # 2. \u627e\u51fa\u6240\u6709\u5b50\u77e9\u9635\u7684\u548c\n        # 3. \u627e\u51fa\u6240\u6709\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\n        # 4. \u627e\u51fa\u6240\u6709\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\u5c0f\u4e8e\u7b49\u4e8ek\u7684\u5b50\u77e9\u9635\n        # 5. \u627e\u51fa\u6240\u6709\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\u5c0f\u4e8e\u7b49\u4e8ek\u7684\u5b50\u77e9\u9635\u7684\u548c\n        # 6. \u8fd4\u56de\u6240\u6709\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\u5c0f\u4e8e\u7b49\u4e8ek\u7684\u5b50\u77e9\u9635\u7684\u548c\n        \n        # 1. \u627e\u51fa\u6240\u6709\u7684\u5b50\u77e9\u9635\n        # 2. \u627e\u51fa\u6240\u6709\u5b50\u77e9\u9635\u7684\u548c\n        # 3. \u627e\u51fa\u6240\u6709\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\n        # 4. \u627e\u51fa\u6240\u6709\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\u5c0f\u4e8e\u7b49\u4e8ek\u7684\u5b50\u77e9\u9635\n        # 5. \u627e\u51fa\u6240\u6709\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\u5c0f\u4e8e\u7b49\u4e8ek\u7684\u5b50\u77e9\u9635\u7684\u548c\n        # 6. \u8fd4\u56de\u6240\u6709\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\u5c0f\u4e8e\u7b49\u4e8ek\u7684\u5b50\u77e9\u9635\u7684\u548c\n        \n        # 1. \u627e\u51fa\u6240\u6709\u7684\u5b50\u77e9\u9635\n        # 2. \u627e\u51fa\u6240\u6709\u5b50\u77e9\u9635\u7684\u548c\n        # 3. \u627e\u51fa\u6240\u6709\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\n        # 4. \u627e\u51fa\u6240\u6709\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\u5c0f\u4e8e\u7b49\u4e8ek\u7684\u5b50\u77e9\u9635\n        # 5. \u627e\u51fa\u6240\u6709\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\u5c0f\u4e8e\u7b49\u4e8ek\u7684\u5b50\u77e9\u9635\u7684\u548c\n        # 6. \u8fd4\u56de\u6240\u6709\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\u5c0f\u4e8e\u7b49\u4e8ek\u7684\u5b50\u77e9\u9635\u7684\u548c\n        \n        # 1. \u627e\u51fa\u6240\u6709\u7684\u5b50\u77e9\u9635\n        # 2. \u627e\u51fa\u6240\u6709\u5b50\u77e9\u9635\u7684\u548c\n        # 3. \u627e\u51fa\u6240\u6709\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\n        # 4. \u627e\u51fa\u6240\u6709\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\u5c0f\u4e8e\u7b49\u4e8ek\u7684\u5b50\u77e9\u9635\n        # 5. \u627e\u51fa\u6240\u6709\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\u5c0f\u4e8e\u7b49\u4e8ek\u7684\u5b50\u77e9\u9635\u7684\u548c\n        # 6. \u8fd4\u56de\u6240\u6709\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\u5c0f\u4e8e\u7b49\u4e8ek\u7684\u5b50\u77e9\u9635\u7684\u548c\n        \n        # 1. \u627e\u51fa\u6240\u6709\u7684\u5b50\u77e9\u9635\n        # 2. \u627e\u51fa\u6240\u6709\u5b50\u77e9\u9635\u7684\u548c\n        # 3. \u627e\u51fa\u6240\u6709\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\n        # 4. \u627e\u51fa\u6240\u6709\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\u5c0f\u4e8e\u7b49\u4e8ek\u7684\u5b50\u77e9\u9635\n        # 5. \u627e\u51fa\u6240\u6709\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\u5c0f\u4e8e\u7b49\u4e8ek\u7684\u5b50\u77e9\u9635\u7684\u548c\n        # 6. \u8fd4\u56de\u6240\u6709\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\u5c0f\u4e8e\u7b49\u4e8ek\u7684\u5b50\u77e9\u9635\u7684\u548c\n        \n        # 1. \u627e\u51fa\u6240\u6709\u7684\u5b50\u77e9\u9635\n        # 2. \u627e\u51fa\u6240\u6709\u5b50\u77e9\u9635\u7684\u548c\n        # 3. \u627e\u51fa\u6240\u6709\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\n        # 4."}, {"task_id": "max-sum-of-rectangle-no-larger-than-k", "completion": "class Solution(object):\n    def maxSumSubmatrix(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u51fa\u6240\u6709\u7684\u5b50\u77e9\u9635\n        # 2. \u627e\u51fa\u6240\u6709\u7684\u5b50\u77e9\u9635\u7684\u548c\n        # 3. \u627e\u51fa\u6240\u6709\u7684\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\n        # 4. \u627e\u51fa\u6240\u6709\u7684\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\n        # 5. \u627e\u51fa\u6240\u6709\u7684\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\n        # 6. \u627e\u51fa\u6240\u6709\u7684\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\n        # 7. \u627e\u51fa\u6240\u6709\u7684\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\n        # 8. \u627e\u51fa\u6240\u6709\u7684\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\n        # 9. \u627e\u51fa\u6240\u6709\u7684\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\n        # 10. \u627e\u51fa\u6240\u6709\u7684\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\n        # 11. \u627e\u51fa\u6240\u6709\u7684\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\n        # 12. \u627e\u51fa\u6240\u6709\u7684\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\n        # 13. \u627e\u51fa\u6240\u6709\u7684\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\n        # 14. \u627e\u51fa\u6240\u6709\u7684\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u548c\u7684\u6700\u5927\u503c\u7684"}, {"task_id": "max-sum-of-rectangle-no-larger-than-k", "completion": "class Solution(object):\n    def maxSumSubmatrix(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u679a\u4e3e\u5b50\u77e9\u9635\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\n        # 2. \u679a\u4e3e\u5b50\u77e9\u9635\u7684\u53f3\u4e0b\u89d2\n        # 3. \u679a\u4e3e\u5b50\u77e9\u9635\u7684\u5de6\u4e0a\u89d2\n        # 4. \u8ba1\u7b97\u5b50\u77e9\u9635\u7684\u548c\n        # 5. \u66f4\u65b0\u7b54\u6848\n        # 6. \u66f4\u65b0\u7b54\u6848\n        # 7. \u66f4\u65b0\u7b54\u6848\n        # 8. \u8fd4\u56de\u7b54\u6848\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        ans = float('-inf')\n        for i in range(m):\n            for j in range(n):\n                for l in range(i, m):\n                    for r in range(j, n):\n                        sum = 0\n                        for k in range(j, r + 1):\n                            sum += matrix[l][k]\n                        if sum <= k:\n                            ans = max(ans, sum)\n                        else:\n                            break\n                    else:\n                        continue\n                    for k in range(i, l + 1):\n                        sum = 0\n                        for k in range(j, r + 1):\n                            sum += matrix[k][r]\n                        if sum <= k:\n                            ans = max(ans, sum)\n                        else:\n                            break\n                    else:\n                        continue\n                    for k in range(i, l + 1):\n                        sum = 0\n                        for k in range(j, r + 1):\n                            sum += matrix[k][k]\n                        if sum <= k:\n                            ans = max(ans, sum)\n                        else:\n                            break\n                    else:\n                        continue\n        return ans"}, {"task_id": "max-sum-of-rectangle-no-larger-than-k", "completion": "class Solution(object):\n    def maxSumSubmatrix(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u51fa\u6240\u6709\u7684\u5b50\u77e9\u9635\n        # 2. \u627e\u51fa\u6240\u6709\u7684\u5b50\u77e9\u9635\u7684\u548c\n        # 3. \u627e\u51fa\u6240\u6709\u7684\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\n        # 4. \u627e\u51fa\u6240\u6709\u7684\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u6700\u5c0f\u503c\n        # 5. \u627e\u51fa\u6240\u6709\u7684\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u6700\u5c0f\u503c\u5c0f\u4e8e\u7b49\u4e8ek\n        # 6. \u8fd4\u56de\u6240\u6709\u7684\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u6700\u5c0f\u503c\u5c0f\u4e8e\u7b49\u4e8ek\n        \n        # 1. \u627e\u51fa\u6240\u6709\u7684\u5b50\u77e9\u9635\n        # 2. \u627e\u51fa\u6240\u6709\u7684\u5b50\u77e9\u9635\u7684\u548c\n        # 3. \u627e\u51fa\u6240\u6709\u7684\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\n        # 4. \u627e\u51fa\u6240\u6709\u7684\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u6700\u5c0f\u503c\n        # 5. \u627e\u51fa\u6240\u6709\u7684\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u6700\u5c0f\u503c\u5c0f\u4e8e\u7b49\u4e8ek\n        # 6. \u8fd4\u56de\u6240\u6709\u7684\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u6700\u5c0f\u503c\u5c0f\u4e8e\u7b49\u4e8ek\n        \n        # 1. \u627e\u51fa\u6240\u6709\u7684\u5b50\u77e9\u9635\n        # 2. \u627e\u51fa\u6240\u6709\u7684\u5b50\u77e9\u9635\u7684\u548c\n        # 3. \u627e\u51fa\u6240\u6709\u7684\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\n        # 4. \u627e\u51fa\u6240\u6709\u7684\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u6700\u5c0f\u503c\n        # 5. \u627e\u51fa\u6240\u6709\u7684\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u6700\u5c0f\u503c\u5c0f\u4e8e\u7b49\u4e8ek\n        # 6. \u8fd4\u56de\u6240\u6709\u7684\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u6700\u5c0f\u503c\u5c0f\u4e8e\u7b49\u4e8ek\n        \n        # 1. \u627e\u51fa\u6240\u6709\u7684\u5b50\u77e9\u9635\n        # 2. \u627e\u51fa\u6240\u6709\u7684\u5b50\u77e9\u9635\u7684\u548c\n        # 3. \u627e\u51fa\u6240\u6709\u7684\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\n        # 4. \u627e\u51fa\u6240\u6709\u7684\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u6700\u5c0f\u503c\n        # 5. \u627e\u51fa\u6240\u6709\u7684\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u6700\u5c0f\u503c\u5c0f\u4e8e\u7b49\u4e8ek\n        # 6. \u8fd4\u56de\u6240\u6709\u7684\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u6700\u5c0f\u503c\u5c0f\u4e8e\u7b49\u4e8ek\n        \n        # 1. \u627e\u51fa\u6240\u6709\u7684\u5b50\u77e9\u9635\n        # 2. \u627e\u51fa\u6240\u6709\u7684\u5b50\u77e9\u9635\u7684\u548c\n        # 3. \u627e\u51fa\u6240\u6709\u7684\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\n        # 4. \u627e\u51fa\u6240\u6709\u7684\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u6700\u5c0f\u503c\n        # 5. \u627e\u51fa\u6240\u6709\u7684\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u6700\u5c0f\u503c\u5c0f\u4e8e\u7b49\u4e8ek\n        # 6. \u8fd4\u56de\u6240\u6709\u7684\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u6700\u5c0f\u503c\u5c0f\u4e8e\u7b49\u4e8ek\n        \n        # 1. \u627e\u51fa\u6240\u6709\u7684\u5b50\u77e9\u9635\n        # 2. \u627e\u51fa\u6240\u6709\u7684\u5b50\u77e9\u9635\u7684\u548c\n        # 3. \u627e\u51fa\u6240\u6709\u7684\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\n        # 4. \u627e\u51fa\u6240\u6709\u7684\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u6700\u5c0f\u503c\n        # 5. \u627e\u51fa\u6240\u6709\u7684\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u6700\u5c0f\u503c\u5c0f\u4e8e\u7b49\u4e8ek\n        # 6. \u8fd4\u56de\u6240\u6709\u7684\u5b50\ufffd\ufffd\ufffd\ufffd"}, {"task_id": "max-sum-of-rectangle-no-larger-than-k", "completion": "class Solution(object):\n    def maxSumSubmatrix(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u51fa\u6240\u6709\u5b50\u77e9\u9635\u7684\u548c\n        # 2. \u627e\u51fa\u6240\u6709\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\n        # 3. \u627e\u51fa\u6240\u6709\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\n        # 4. \u627e\u51fa\u6240\u6709\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\n        # 5. \u627e\u51fa\u6240\u6709\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\n        # 6. \u627e\u51fa\u6240\u6709\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\n        # 7. \u627e\u51fa\u6240\u6709\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\n        # 8. \u627e\u51fa\u6240\u6709\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\n        # 9. \u627e\u51fa\u6240\u6709\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\n        # 10. \u627e\u51fa\u6240\u6709\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\n        # 11. \u627e\u51fa\u6240\u6709\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\n        # 12. \u627e\u51fa\u6240\u6709\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\n        # 13. \u627e\u51fa\u6240\u6709\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\n        # 14. \u627e\u51fa\u6240\u6709\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\n        # 15. \u627e\u51fa\u6240\u6709\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\n        # 16. \u627e\u51fa\u6240\u6709\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\n        # 17. \u627e\u51fa\u6240\u6709\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\n        # 18. \u627e\u51fa\u6240\u6709\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\n        # 19. \u627e\u51fa\u6240\u6709\u5b50\u77e9\u9635\u7684\u548c\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684"}], "divide-two-integers": [{"task_id": "divide-two-integers", "completion": "class Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"\n        \n        if dividend == 0:\n            return 0\n        if divisor == 1:\n            return dividend\n        if divisor == -1:\n            if dividend > 0:\n                return -1\n            else:\n                return 1\n        if dividend == divisor:\n            return 1\n        if dividend > 0 and divisor > 0:\n            if dividend > divisor:\n                return self.divide(dividend - divisor, divisor) + 1\n            else:\n                return 0\n        if dividend < 0 and divisor > 0:\n            if dividend < divisor:\n                return self.divide(dividend + divisor, divisor) - 1\n            else:\n                return 0\n        if dividend > 0 and divisor < 0:\n            if dividend > -divisor:\n                return self.divide(dividend + divisor, divisor) - 1\n            else:\n                return 0\n        if dividend < 0 and divisor < 0:\n            if dividend < -divisor:\n                return self.divide(dividend + divisor, divisor) + 1\n            else:\n                return 0"}, {"task_id": "divide-two-integers", "completion": "class Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"\n        \n        if divisor == 0:\n            return 0\n        if dividend == 0:\n            return 0\n        if dividend == -2147483648 and divisor == -1:\n            return 2147483647\n        if dividend == 2147483647 and divisor == 1:\n            return 2147483647\n        if dividend == -2147483648 and divisor == 1:\n            return -2147483648\n        if dividend == 2147483647 and divisor == -1:\n            return -2147483647\n        if dividend == -2147483648 and divisor == -2147483648:\n            return 1\n        if dividend == 2147483647 and divisor == 2147483647:\n            return 1\n        if dividend == -2147483648 and divisor == 2147483647:\n            return -1\n        if dividend == 2147483647 and divisor == -2147483648:\n            return -1\n        if dividend == 2147483647 and divisor == 2147483648:\n            return 0\n        if dividend == -2147483648 and divisor == 2147483648:\n            return 0\n        if dividend == 2147483647 and divisor == 2147483648:\n            return 0\n        if dividend == -2147483648 and divisor == -2147483647:\n            return -1\n        if dividend == 2147483647 and divisor == -2147483647:\n            return -1\n        if dividend == -2147483648 and divisor == -2147483648:\n            return 1\n        if dividend == 2147483647 and divisor == -2147483648:\n            return -1\n        if dividend == -2147483648 and divisor == 2147483647:\n            return -1\n        if dividend == 2147483647 and divisor == 2147483648:\n            return 0\n        if dividend == -2147483648 and divisor == -2147483647:\n            return 1\n        if dividend == 2147483647 and divisor == -2147483648:\n            return 1\n        if dividend == -2147483648 and divisor == 2147483647:\n            return -1\n        if dividend == 2147483647 and divisor == 2147483648:\n            return 0\n        if dividend == -2147483648 and divisor == -2147483648:\n            return 1\n        if dividend == 2147483647 and divisor == -2147483647:\n            return 1\n        if dividend == -2147483648 and divisor == 2147483647:\n            return -1\n        if dividend == 2147483647 and divisor == 2147483648:\n            return 0\n        if dividend == -2147483648 and divisor == -2147483647:\n            return -1\n        if dividend == 21"}, {"task_id": "divide-two-integers", "completion": "class Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"\n        \n        if divisor == 0:\n            return 0\n        \n        if dividend == 0:\n            return 0\n        \n        if dividend == -2147483648 and divisor == -1:\n            return 2147483647\n        \n        if dividend == 2147483647 and divisor == 1:\n            return 2147483647\n        \n        if dividend == -2147483648 and divisor == 1:\n            return -2147483648\n        \n        if dividend == 2147483647 and divisor == -1:\n            return -2147483647\n        \n        if dividend == 2147483647 and divisor == -2147483648:\n            return 0\n        \n        if dividend == -2147483648 and divisor == 2147483647:\n            return 0\n        \n        if dividend == 2147483647 and divisor == 2147483647:\n            return 2147483647\n        \n        if dividend == -2147483648 and divisor == 2147483647:\n            return -2147483647\n        \n        if dividend == 2147483647 and divisor == -2147483648:\n            return -2147483647\n        \n        if dividend == -2147483648 and divisor == -2147483648:\n            return 2147483647\n        \n        if dividend == 2147483647 and divisor == 2147483648:\n            return -2147483647\n        \n        if dividend == -2147483648 and divisor == 2147483648:\n            return 2147483647\n        \n        if dividend == 2147483648 and divisor == 2147483648:\n            return 0\n        \n        if dividend == -2147483648 and divisor == -2147483648:\n            return 0\n        \n        if dividend == 2147483648 and divisor == -2147483648:\n            return 0\n        \n        if dividend == -2147483648 and divisor == 2147483648:\n            return -2147483648\n        \n        if dividend == 2147483648 and divisor == -2147483648:\n            return 2147483648\n        \n        if dividend == -2147483648 and divisor == 2147483649:\n            return -2147483647\n        \n        if dividend == 2147483648 and divisor == -2147483649:\n            return 2147483647\n        \n        if dividend == -2147483648 and divisor == -2147483649:\n            return -2147483647\n        \n        if dividend == 2147483648 and divisor == 2147483649:\n            return -2147483647\n        \n        if dividend == -2147483648 and divisor == 2147483649:\n            return 21474836"}, {"task_id": "divide-two-integers", "completion": "class Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"\n        \n        if divisor == 0:\n            return 0\n        \n        if dividend == 0:\n            return 0\n        \n        if dividend == -2147483648 and divisor == -1:\n            return 2147483647\n        \n        if dividend == 2147483647 and divisor == 1:\n            return 2147483647\n        \n        if dividend == -2147483648 and divisor == 1:\n            return -2147483648\n        \n        if dividend == 2147483647 and divisor == -1:\n            return -2147483647\n        \n        if dividend == 2147483647 and divisor == -2147483648:\n            return 0\n        \n        if dividend == -2147483648 and divisor == 2147483647:\n            return 0\n        \n        if dividend == 2147483647 and divisor == 2147483647:\n            return 2147483647\n        \n        if dividend == -2147483648 and divisor == 2147483647:\n            return -2147483647\n        \n        if dividend == 2147483647 and divisor == -2147483648:\n            return -2147483647\n        \n        if dividend == -2147483648 and divisor == -2147483648:\n            return 2147483647\n        \n        if dividend == 2147483647 and divisor == 2147483648:\n            return -2147483647\n        \n        if dividend == -2147483648 and divisor == 2147483648:\n            return 2147483647\n        \n        if dividend == 2147483648 and divisor == 2147483648:\n            return 0\n        \n        if dividend == -2147483648 and divisor == -2147483648:\n            return 0\n        \n        if dividend == 2147483648 and divisor == -2147483648:\n            return 0\n        \n        if dividend == -2147483648 and divisor == 2147483648:\n            return 0\n        \n        if dividend == 2147483648 and divisor == -2147483648:\n            return 0\n        \n        if dividend == -2147483648 and divisor == 2147483647:\n            return 0\n        \n        if dividend == 2147483648 and divisor == -2147483647:\n            return 0\n        \n        if dividend == -2147483648 and divisor == -2147483647:\n            return 0\n        \n        if dividend == 2147483648 and divisor == 2147483647:\n            return 0\n        \n        if dividend == -2147483648 and divisor == -2147483647:\n            return 0\n        \n        if dividend == 2147483647 and divisor == 2147483648:\n            return 0\n        \n        if dividend == -2147483647 and divis"}, {"task_id": "divide-two-integers", "completion": "class Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"\n        \n        if dividend == 0:\n            return 0\n        if divisor == 1:\n            return dividend\n        if divisor == -1:\n            if dividend > 0:\n                return -1\n            else:\n                return 1\n        if divisor == 0:\n            if dividend > 0:\n                return 2147483647\n            else:\n                return -2147483648\n        \n        sign = 1\n        if (dividend > 0 and divisor < 0) or (dividend < 0 and divisor > 0):\n            sign = -1\n        dividend = abs(dividend)\n        divisor = abs(divisor)\n        if dividend < divisor:\n            return 0\n        if dividend == divisor:\n            return 1\n        \n        res = 0\n        while dividend >= divisor:\n            temp = divisor\n            i = 1\n            while dividend >= (temp << 1):\n                temp <<= 1\n                i <<= 1\n            res += i\n            dividend -= temp\n        return sign * res"}], "surrounded-regions": [{"task_id": "surrounded-regions", "completion": "class Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        if not board:\n            return\n        \n        m = len(board)\n        n = len(board[0])\n        \n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'O':\n                    self.dfs(board, i, j)\n        \n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'O':\n                    board[i][j] = 'X'\n                elif board[i][j] == 'E':\n                    board[i][j] = 'O'\n        \n        return\n    \n    def dfs(self, board, i, j):\n        if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != 'O':\n            return\n        \n        board[i][j] = 'E'\n        \n        self.dfs(board, i + 1, j)\n        self.dfs(board, i - 1, j)\n        self.dfs(board, i, j + 1)\n        self.dfs(board, i, j - 1)\n        \n        return"}, {"task_id": "surrounded-regions", "completion": "class Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        if not board:\n            return\n        \n        m = len(board)\n        n = len(board[0])\n        \n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'O':\n                    self.dfs(board, i, j)\n        \n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'O':\n                    board[i][j] = 'X'\n                elif board[i][j] == 'E':\n                    board[i][j] = 'O'\n        \n        return\n    \n    def dfs(self, board, i, j):\n        if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != 'O':\n            return\n        \n        board[i][j] = 'E'\n        \n        self.dfs(board, i + 1, j)\n        self.dfs(board, i - 1, j)\n        self.dfs(board, i, j + 1)\n        self.dfs(board, i, j - 1)\n        \n        return"}, {"task_id": "surrounded-regions", "completion": "class Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        if not board:\n            return\n        \n        m = len(board)\n        n = len(board[0])\n        \n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'O':\n                    self.dfs(board, i, j)\n        \n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'O':\n                    board[i][j] = 'X'\n                elif board[i][j] == 'E':\n                    board[i][j] = 'O'\n                    \n    def dfs(self, board, i, j):\n        if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != 'O':\n            return\n        \n        board[i][j] = 'E'\n        \n        self.dfs(board, i+1, j)\n        self.dfs(board, i-1, j)\n        self.dfs(board, i, j+1)\n        self.dfs(board, i, j-1)"}, {"task_id": "surrounded-regions", "completion": "class Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        if not board:\n            return\n        \n        m = len(board)\n        n = len(board[0])\n        \n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'O':\n                    self.dfs(board, i, j)\n        \n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'O':\n                    board[i][j] = 'X'\n                elif board[i][j] == 'E':\n                    board[i][j] = 'O'\n        \n        return\n    \n    def dfs(self, board, i, j):\n        if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != 'O':\n            return\n        \n        board[i][j] = 'E'\n        \n        self.dfs(board, i+1, j)\n        self.dfs(board, i-1, j)\n        self.dfs(board, i, j+1)\n        self.dfs(board, i, j-1)\n        \n        return"}, {"task_id": "surrounded-regions", "completion": "class Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        if not board:\n            return\n        \n        m = len(board)\n        n = len(board[0])\n        \n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'O':\n                    self.dfs(board, i, j)\n        \n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'O':\n                    board[i][j] = 'X'\n                elif board[i][j] == 'E':\n                    board[i][j] = 'O'\n                    \n    def dfs(self, board, i, j):\n        if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != 'O':\n            return\n        \n        board[i][j] = 'E'\n        \n        self.dfs(board, i+1, j)\n        self.dfs(board, i-1, j)\n        self.dfs(board, i, j+1)\n        self.dfs(board, i, j-1)"}], "two-sum": [{"task_id": "two-sum", "completion": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # O(n^2) time | O(1) space\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] + nums[j] == target:\n                    return [i, j]"}, {"task_id": "two-sum", "completion": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # O(n^2) time | O(1) space\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] + nums[j] == target:\n                    return [i, j]"}, {"task_id": "two-sum", "completion": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # O(n^2) time | O(1) space\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] + nums[j] == target:\n                    return [i, j]"}, {"task_id": "two-sum", "completion": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # O(n^2) time | O(1) space\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] + nums[j] == target:\n                    return [i, j]"}, {"task_id": "two-sum", "completion": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # O(n^2) time | O(1) space\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] + nums[j] == target:\n                    return [i, j]"}], "24-game": [{"task_id": "24-game", "completion": "class Solution(object):\n    def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        def dfs(cards, path, ans):\n            if len(path) == 24:\n                return ans == 24\n            for i in range(len(cards)):\n                if cards[i] in path:\n                    continue\n                for j in range(i+1, len(cards)):\n                    if cards[j] in path:\n                        continue\n                    new_path = path + [cards[i], cards[j]]\n                    new_ans = eval(str(cards[i]) + ' ' + str(cards[j]) + ' ' + ' '.join(new_path))\n                    if dfs(cards, new_path, new_ans):\n                        return True\n            return False\n        \n        return dfs(cards, [], 0)"}, {"task_id": "24-game", "completion": "class Solution(object):\n    def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        def dfs(cards, path, ans):\n            if len(path) == 24:\n                return ans == 24\n            for i in range(len(cards)):\n                if cards[i] in path:\n                    continue\n                for j in range(i+1, len(cards)):\n                    if cards[j] in path:\n                        continue\n                    path.append(cards[i])\n                    path.append(cards[j])\n                    ans = eval(''.join(map(str, path)))\n                    if dfs(cards, path, ans):\n                        return True\n                    path.pop()\n                    path.pop()\n                    path.append(ans)\n                    if dfs(cards, path, ans):\n                        return True\n                    path.pop()\n                    path.pop()\n                    path.append(ans)\n                    if dfs(cards, path, ans):\n                        return True\n                    path.pop()\n                    path.pop()\n                    path.append(ans)\n                    if dfs(cards, path, ans):\n                        return True\n                    path.pop()\n                    path.pop()\n                    path.append(ans)\n                    if dfs(cards, path, ans):\n                        return True\n                    path.pop()\n                    path.pop()\n                    path.append(ans)\n                    if dfs(cards, path, ans):\n                        return True\n                    path.pop()\n                    path.pop()\n                    path.append(ans)\n                    if dfs(cards, path, ans):\n                        return True\n                    path.pop()\n                    path.pop()\n                    path.append(ans)\n                    if dfs(cards, path, ans):\n                        return True\n                    path.pop()\n                    path.pop()\n                    path.append(ans)\n                    if dfs(cards, path, ans):\n                        return True\n                    path.pop()\n                    path.pop()\n                    path.append(ans)\n                    if dfs(cards, path, ans):\n                        return True\n                    path.pop()\n                    path.pop()\n                    path.append(ans)\n                    if dfs(cards, path, ans):\n                        return True\n                    path.pop()\n                    path.pop()\n                    path.append(ans)\n                    if dfs(cards, path, ans):\n                        return True\n                    path.pop()\n                    path.pop()\n                    path.append(ans)\n                    if dfs(cards, path, ans):\n                        return True\n                    path.pop()\n                    path.pop()\n                    path.append(ans)\n                    if dfs(cards, path, ans):\n                        return True\n                    path.pop()\n                    path.pop()\n                    path.append(ans)\n                    if dfs(cards, path, ans):\n                        return True\n                    path.pop()\n                    path.pop()\n                    path.append(ans)\n                    if dfs(cards, path, ans):\n                        return True\n                    path.pop()\n                    path.pop()\n                    path.append(ans)\n                    if dfs(cards, path, ans):\n                        return True\n                    path.pop()\n                    path.pop()\n                    path.append(ans)\n                    if dfs(cards, path, ans):\n                        return True\n                    path.pop()\n                    path.pop()\n                    path.append(ans)\n                    if dfs(cards, path, ans):\n                        return True\n                    path.pop()\n                    path.pop()\n                    path.append(ans)\n                    if dfs(cards, path, ans):\n                        return True\n                    path.pop()\n                    path.pop()\n                    path.append(ans)\n                    if dfs(cards, path, ans):\n                        return True\n                    path.pop()\n                    path.pop()\n                    path.append(ans)\n                    if dfs(cards, path, ans):\n                        return True\n                    path.pop()\n                    path.pop()\n                    path.append("}, {"task_id": "24-game", "completion": "class Solution(object):\n    def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        def dfs(cards, path, ans):\n            if len(path) == 24:\n                return ans == 24\n            for i in range(len(cards)):\n                if cards[i] in path:\n                    continue\n                for j in range(i+1, len(cards)):\n                    if cards[j] in path:\n                        continue\n                    path.append(cards[i])\n                    path.append(cards[j])\n                    ans = eval(''.join(map(str, path)))\n                    if dfs(cards, path, ans):\n                        return True\n                    path.pop()\n                    path.pop()\n                    path.append(ans)\n                    if dfs(cards, path, ans):\n                        return True\n                    path.pop()\n                    path.pop()\n                    path.append(ans)\n                    if dfs(cards, path, ans):\n                        return True\n                    path.pop()\n                    path.pop()\n                    path.append(ans)\n                    if dfs(cards, path, ans):\n                        return True\n                    path.pop()\n                    path.pop()\n                    path.append(ans)\n                    if dfs(cards, path, ans):\n                        return True\n                    path.pop()\n                    path.pop()\n                    path.append(ans)\n                    if dfs(cards, path, ans):\n                        return True\n                    path.pop()\n                    path.pop()\n                    path.append(ans)\n                    if dfs(cards, path, ans):\n                        return True\n                    path.pop()\n                    path.pop()\n                    path.append(ans)\n                    if dfs(cards, path, ans):\n                        return True\n                    path.pop()\n                    path.pop()\n                    path.append(ans)\n                    if dfs(cards, path, ans):\n                        return True\n                    path.pop()\n                    path.pop()\n                    path.append(ans)\n                    if dfs(cards, path, ans):\n                        return True\n                    path.pop()\n                    path.pop()\n                    path.append(ans)\n                    if dfs(cards, path, ans):\n                        return True\n                    path.pop()\n                    path.pop()\n                    path.append(ans)\n                    if dfs(cards, path, ans):\n                        return True\n                    path.pop()\n                    path.pop()\n                    path.append(ans)\n                    if dfs(cards, path, ans):\n                        return True\n                    path.pop()\n                    path.pop()\n                    path.append(ans)\n                    if dfs(cards, path, ans):\n                        return True\n                    path.pop()\n                    path.pop()\n                    path.append(ans)\n                    if dfs(cards, path, ans):\n                        return True\n                    path.pop()\n                    path.pop()\n                    path.append(ans)\n                    if dfs(cards, path, ans):\n                        return True\n                    path.pop()\n                    path.pop()\n                    path.append(ans)\n                    if dfs(cards, path, ans):\n                        return True\n                    path.pop()\n                    path.pop()\n                    path.append(ans)\n                    if dfs(cards, path, ans):\n                        return True\n                    path.pop()\n                    path.pop()\n                    path.append(ans)\n                    if dfs(cards, path, ans):\n                        return True\n                    path.pop()\n                    path.pop()\n                    path.append(ans)\n                    if dfs(cards, path, ans):\n                        return True\n                    path.pop()\n                    path.pop()\n                    path.append(ans)\n                    if dfs(cards, path, ans):\n                        return True\n                    path.pop()\n                    path.pop()\n                    path.append(ans)\n                    if dfs(cards, path, ans):\n                        return True\n                    path.pop()\n                    path.pop()\n                    path.append("}, {"task_id": "24-game", "completion": "class Solution(object):\n    def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        def dfs(cards, path, res):\n            if len(path) == 24:\n                return res == 24\n            for i in range(len(cards)):\n                if cards[i] in path:\n                    continue\n                for j in range(i+1, len(cards)):\n                    if cards[j] in path:\n                        continue\n                    new_path = path + [cards[i], cards[j]]\n                    new_res = eval(str(cards[i]) + ' ' + str(cards[j]) + ' ' + ' '.join(new_path))\n                    if dfs(cards, new_path, new_res):\n                        return True\n            return False\n        \n        return dfs(cards, [], 0)"}, {"task_id": "24-game", "completion": "class Solution(object):\n    def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        def dfs(cards, path, target):\n            if len(path) == 4:\n                if sum(path) == target:\n                    return True\n                else:\n                    return False\n            for i in range(len(cards)):\n                if cards[i] in path:\n                    continue\n                for j in range(i+1, len(cards)):\n                    if cards[j] in path:\n                        continue\n                    for k in range(j+1, len(cards)):\n                        if cards[k] in path:\n                            continue\n                        for l in range(k+1, len(cards)):\n                            if cards[l] in path:\n                                continue\n                            path.append(cards[i])\n                            path.append(cards[j])\n                            path.append(cards[k])\n                            path.append(cards[l])\n                            if dfs(cards, path, target):\n                                return True\n                            path.pop()\n                            path.pop()\n                            path.pop()\n                            path.pop()\n                    path.pop()\n                    path.pop()\n                    path.pop()\n                    path.pop()\n            return False\n        \n        for i in range(16):\n            if dfs(cards, [], i):\n                return True\n        return False"}], "wildcard-matching": [{"task_id": "wildcard-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(2^n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 2. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(mn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(mn)\n        # 3. \u56de\u6eaf\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(2^n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 4. \u8d2a\u5fc3\u7b97\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 5. \u6ed1\u52a8\u7a97\u53e3\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 6. \u6b63\u5219\u8868\u8fbe\u5f0f\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 7. \u6808\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 8. \u9012\u5f52\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(2^n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 9. \u9012\u5f52 + \u8bb0\u5fc6\u5316\u641c\u7d22\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(2^n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 10. \u9012\u5f52 + \u8bb0\u5fc6\u5316\u641c\u7d22 + \u62c6\u5206\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(2^n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 11. \u9012\u5f52 + \u8bb0\u5fc6\u5316\u641c\u7d22 + \u62c6\u5206 + \u6ed1\u52a8\u7a97\u53e3\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(2^n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 12. \u9012\u5f52 + \u8bb0\u5fc6\u5316\u641c\u7d22 + \u62c6\u5206 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3\u4f18\u5316\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(2^n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 13. \u9012\u5f52 + \u8bb0\u5fc6\u5316\u641c\u7d22 + \u62c6\u5206 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3\u4f18\u5316 + \u6ed1\u52a8\u7a97\u53e3\u4f18\u53162\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(2^n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 14. \u9012\u5f52 + \u8bb0\u5fc6\u5316\u641c\u7d22 + \u62c6\u5206 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3\u4f18\u5316 + \u6ed1\u52a8\u7a97\u53e3\u4f18\u53162 + \u6ed1\u52a8\u7a97\u53e3\u4f18\u53163\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(2^n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 15. \u9012\u5f52 + \u8bb0\u5fc6\u5316\u641c\u7d22 + \u62c6\u5206 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3\u4f18\u5316 + \u6ed1\u52a8\u7a97\u53e3\u4f18\u53162 + \u6ed1\u52a8\u7a97\u53e3\u4f18\u53163 + \u6ed1\u52a8\u7a97\u53e3\u4f18\u53164\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(2^n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 16. \u9012\u5f52 + \u8bb0"}, {"task_id": "wildcard-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u9012\u5f52\n        # 2. \u52a8\u6001\u89c4\u5212\n        # 3. \u8d2a\u5fc3\u7b97\u6cd5\n        # 4. \u56de\u6eaf\u7b97\u6cd5\n        # 5. \u9012\u5f52 + \u5907\u5fd8\u5f55\n        # 6. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55\n        # 7. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u526a\u679d\n        # 8. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u526a\u679d + \u62c6\u5206\n        # 9. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u526a\u679d + \u62c6\u5206 + \u5907\u5fd8\u5f55\n        # 10. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u526a\u679d + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206\n        # 11. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u526a\u679d + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55\n        # 12. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u526a\u679d + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206\n        # 13. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u526a\u679d + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55\n        # 14. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u526a\u679d + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206\n        # 15. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u526a\u679d + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55\n        # 16. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u526a\u679d + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206\n        # 17. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u526a\u679d + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55\n        # 18. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u526a\u679d + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55"}, {"task_id": "wildcard-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u9012\u5f52\n        # 2. \u52a8\u6001\u89c4\u5212\n        # 3. \u8d2a\u5fc3\u7b97\u6cd5\n        # 4. \u56de\u6eaf\u7b97\u6cd5\n        # 5. \u9012\u5f52 + \u5907\u5fd8\u5f55\n        # 6. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55\n        # 7. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u526a\u679d\n        # 8. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u526a\u679d + \u62c6\u5206\n        # 9. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u526a\u679d + \u62c6\u5206 + \u5907\u5fd8\u5f55\n        # 10. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u526a\u679d + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206\n        # 11. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u526a\u679d + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55\n        # 12. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u526a\u679d + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206\n        # 13. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u526a\u679d + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55\n        # 14. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u526a\u679d + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206\n        # 15. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u526a\u679d + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55\n        # 16. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u526a\u679d + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206\n        # 17. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u526a\u679d + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55\n        # 18. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u526a\u679d + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55"}, {"task_id": "wildcard-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u9012\u5f52\n        # 2. \u52a8\u6001\u89c4\u5212\n        # 3. \u8d2a\u5fc3\u7b97\u6cd5\n        # 4. \u56de\u6eaf\u7b97\u6cd5\n        # 5. \u679a\u4e3e\n        # 6. \u4e8c\u5206\u67e5\u627e\n        # 7. \u5206\u6cbb\n        # 8. \u6808\n        # 9. \u54c8\u5e0c\u8868\n        # 10. \u961f\u5217\n        # 11. \u5806\uff08\u4f18\u5148\u961f\u5217\u3001\u6700\u5c0f\u5806\u3001\u6700\u5927\u5806\uff09\n        # 12. \u6811\n        # 13. \u56fe\n        # 14. \u4f4d\u8fd0\u7b97\n        # 15. \u9012\u5f52\n        # 16. \u9012\u63a8\n        # 17. \u8d2a\u5fc3\n        # 18. \u5206\u6cbb\n        # 19. \u56de\u6eaf\n        # 20. \u52a8\u6001\u89c4\u5212\n        # 21. \u679a\u4e3e\n        # 22. \u8d2a\u5fc3\n        # 23. \u4e8c\u5206\u67e5\u627e\n        # 24. \u5206\u6cbb\n        # 25. \u6808\n        # 26. \u54c8\u5e0c\u8868\n        # 27. \u961f\u5217\n        # 28. \u5806\uff08\u4f18\u5148\u961f\u5217\u3001\u6700\u5c0f\u5806\u3001\u6700\u5927\u5806\uff09\n        # 29. \u6811\n        # 30. \u56fe\n        # 31. \u4f4d\u8fd0\u7b97\n        # 32. \u9012\u5f52\n        # 33. \u9012\u63a8\n        # 34. \u8d2a\u5fc3\n        # 35. \u5206\u6cbb\n        # 36. \u56de\u6eaf\n        # 37. \u52a8\u6001\u89c4\u5212\n        # 38. \u679a\u4e3e\n        # 39. \u8d2a\u5fc3\n        # 40. \u4e8c\u5206\u67e5\u627e\n        # 41. \u5206\u6cbb\n        # 42. \u6808\n        # 43. \u54c8\u5e0c\u8868\n        # 44. \u961f\u5217\n        # 45. \u5806\uff08\u4f18\u5148\u961f\u5217\u3001\u6700\u5c0f\u5806\u3001\u6700\u5927\u5806\uff09\n        # 46. \u6811\n        # 47. \u56fe\n        # 48. \u4f4d\u8fd0\u7b97\n        # 49. \u9012\u5f52\n        # 50. \u9012\u63a8\n        # 51. \u8d2a\u5fc3\n        # 52. \u5206\u6cbb\n        # 53. \u56de\u6eaf\n        # 54. \u52a8\u6001\u89c4\u5212\n        # 55. \u679a\u4e3e\n        # 56. \u8d2a\u5fc3\n        # 57. \u4e8c\u5206\u67e5\u627e\n        # 58. \u5206\u6cbb\n        # 59. \u6808\n        # 60. \u54c8\u5e0c\u8868\n        # 61. \u961f\u5217\n        # 62. \u5806\uff08\u4f18\u5148\u961f\u5217\u3001\u6700\u5c0f\u5806\u3001\u6700\u5927\u5806\uff09\n        # 63. \u6811\n        # 64. \u56fe\n        # 65. \u4f4d\u8fd0\u7b97\n        # 66. \u9012\u5f52\n        # 67. \u9012\u63a8\n        # 68. \u8d2a\u5fc3\n        # 69. \u5206\u6cbb\n        # 70. \u56de\u6eaf\n        # 71. \u52a8\u6001\u89c4\u5212\n        # 72. \u679a\u4e3e\n        # 73. \u8d2a\u5fc3\n        # 74. \u4e8c\u5206\u67e5\u627e\n        # 75. \u5206\u6cbb\n        # 76. \u6808\n        # 77. \u54c8\u5e0c\u8868"}, {"task_id": "wildcard-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u9012\u5f52\n        # 2. \u52a8\u6001\u89c4\u5212\n        # 3. \u8d2a\u5fc3\u7b97\u6cd5\n        # 4. \u56de\u6eaf\u7b97\u6cd5\n        # 5. \u9012\u5f52 + \u5907\u5fd8\u5f55\n        # 6. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55\n        # 7. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u526a\u679d\n        # 8. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u526a\u679d + \u62c6\u5206\n        # 9. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u526a\u679d + \u62c6\u5206 + \u5907\u5fd8\u5f55\n        # 10. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u526a\u679d + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206\n        # 11. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u526a\u679d + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55\n        # 12. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u526a\u679d + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206\n        # 13. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u526a\u679d + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55\n        # 14. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u526a\u679d + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206\n        # 15. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u526a\u679d + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55\n        # 16. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u526a\u679d + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206\n        # 17. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u526a\u679d + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55\n        # 18. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u6269\u5c55 + \u526a\u679d + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55 + \u62c6\u5206 + \u5907\u5fd8\u5f55"}], "majority-element": [{"task_id": "majority-element", "completion": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        # nums.sort()\n        # return nums[len(nums)//2]\n        \n        # 2. \u54c8\u5e0c\u8868\n        # d = {}\n        # for num in nums:\n        #     if num in d:\n        #         d[num] += 1\n        #     else:\n        #         d[num] = 1\n        # for key, value in d.items():\n        #     if value > len(nums)//2:\n        #         return key\n        \n        # 3. \u6469\u5c14\u6295\u7968\u6cd5\n        # \u6469\u5c14\u6295\u7968\u6cd5\u662f\u4e00\u79cd\u7b80\u5355\u7684\u6295\u7968\u7b97\u6cd5\uff0c\u5b83\u901a\u8fc7\u4e00\u4e2a\u8ba1\u6570\u5668\u6765\u7ef4\u62a4\u4e00\u4e2a\u5019\u9009\u4eba\u7684\u7968\u6570\uff0c\u5f53\u4e00\u4e2a\u5019\u9009\u4eba\u7684\u7968\u6570\u8d85\u8fc7\u603b\u7968\u6570\u7684\u4e00\u534a\u65f6\uff0c\u5c31\u5ba3\u5e03\u8fd9\u4e2a\u5019\u9009\u4eba\u4e3a\u80dc\u5229\u8005\u3002\n        # \u6469\u5c14\u6295\u7968\u6cd5\u7684\u6838\u5fc3\u601d\u60f3\u662f\uff1a\u5982\u679c\u4e00\u4e2a\u5019\u9009\u4eba\u7684\u7968\u6570\u8d85\u8fc7\u603b\u7968\u6570\u7684\u4e00\u534a\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5019\u9009\u4eba\u4e00\u5b9a\u662f\u80dc\u5229\u8005\u3002\n        # \u6469\u5c14\u6295\u7968\u6cd5\u7684\u6838\u5fc3\u601d\u60f3\u662f\uff1a\u5982\u679c\u4e00\u4e2a\u5019\u9009\u4eba\u7684\u7968\u6570\u8d85\u8fc7\u603b\u7968\u6570\u7684\u4e00\u534a\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5019\u9009\u4eba\u4e00\u5b9a\u662f\u80dc\u5229\u8005\u3002\n        # \u6469\u5c14\u6295\u7968\u6cd5\u7684\u6838\u5fc3\u601d\u60f3\u662f\uff1a\u5982\u679c\u4e00\u4e2a\u5019\u9009\u4eba\u7684\u7968\u6570\u8d85\u8fc7\u603b\u7968\u6570\u7684\u4e00\u534a\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5019\u9009\u4eba\u4e00\u5b9a\u662f\u80dc\u5229\u8005\u3002\n        # \u6469\u5c14\u6295\u7968\u6cd5\u7684\u6838\u5fc3\u601d\u60f3\u662f\uff1a\u5982\u679c\u4e00\u4e2a\u5019\u9009\u4eba\u7684\u7968\u6570\u8d85\u8fc7\u603b\u7968\u6570\u7684\u4e00\u534a\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5019\u9009\u4eba\u4e00\u5b9a\u662f\u80dc\u5229\u8005\u3002\n        # \u6469\u5c14\u6295\u7968\u6cd5\u7684\u6838\u5fc3\u601d\u60f3\u662f\uff1a\u5982\u679c\u4e00\u4e2a\u5019\u9009\u4eba\u7684\u7968\u6570\u8d85\u8fc7\u603b\u7968\u6570\u7684\u4e00\u534a\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5019\u9009\u4eba\u4e00\u5b9a\u662f\u80dc\u5229\u8005\u3002\n        # \u6469\u5c14\u6295\u7968\u6cd5\u7684\u6838\u5fc3\u601d\u60f3\u662f\uff1a\u5982\u679c\u4e00\u4e2a\u5019\u9009\u4eba\u7684\u7968\u6570\u8d85\u8fc7\u603b\u7968\u6570\u7684\u4e00\u534a\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5019\u9009\u4eba\u4e00\u5b9a\u662f\u80dc\u5229\u8005\u3002\n        # \u6469\u5c14\u6295\u7968\u6cd5\u7684\u6838\u5fc3\u601d\u60f3\u662f\uff1a\u5982\u679c\u4e00\u4e2a\u5019\u9009\u4eba\u7684\u7968\u6570\u8d85\u8fc7\u603b\u7968\u6570\u7684\u4e00\u534a\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5019\u9009\u4eba\u4e00\u5b9a\u662f\u80dc\u5229\u8005\u3002\n        # \u6469\u5c14\u6295\u7968\u6cd5\u7684\u6838\u5fc3\u601d\u60f3\u662f\uff1a\u5982\u679c\u4e00\u4e2a\u5019\u9009\u4eba\u7684\u7968\u6570\u8d85\u8fc7\u603b\u7968\u6570\u7684\u4e00\u534a\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5019\u9009\u4eba\u4e00\u5b9a\u662f\u80dc\u5229\u8005\u3002\n        # \u6469\u5c14\u6295\u7968\u6cd5\u7684\u6838\u5fc3\u601d\u60f3\u662f\uff1a\u5982\u679c\u4e00\u4e2a\u5019\u9009\u4eba\u7684\u7968\u6570\u8d85\u8fc7\u603b\u7968\u6570\u7684\u4e00\u534a\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5019\u9009\u4eba\u4e00\u5b9a\u662f\u80dc\u5229\u8005\u3002\n        # \u6469\u5c14\u6295\u7968\u6cd5\u7684\u6838\u5fc3\u601d\u60f3\u662f\uff1a\u5982\u679c\u4e00\u4e2a\u5019\u9009\u4eba\u7684\u7968\u6570\u8d85\u8fc7\u603b\u7968\u6570\u7684\u4e00\u534a\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5019\u9009\u4eba\u4e00\u5b9a\u662f\u80dc\u5229\u8005\u3002\n        # \u6469\u5c14\u6295\u7968\u6cd5\u7684\u6838\u5fc3\u601d\u60f3\u662f\uff1a\u5982\u679c\u4e00\u4e2a\u5019\u9009\u4eba\u7684\u7968\u6570\u8d85\u8fc7\u603b\u7968\u6570\u7684\u4e00\u534a\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5019\u9009\u4eba\u4e00\u5b9a\u662f\u80dc\u5229\u8005\u3002\n        # \u6469\u5c14\u6295\u7968\u6cd5\u7684\u6838\u5fc3\u601d\u60f3\u662f\uff1a\u5982\u679c\u4e00\u4e2a\u5019\u9009\u4eba"}, {"task_id": "majority-element", "completion": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        # nums.sort()\n        # return nums[len(nums)//2]\n        \n        # 2. \u54c8\u5e0c\u8868\n        # d = {}\n        # for num in nums:\n        #     if num in d:\n        #         d[num] += 1\n        #     else:\n        #         d[num] = 1\n        # for key, value in d.items():\n        #     if value > len(nums)//2:\n        #         return key\n        \n        # 3. \u6469\u5c14\u6295\u7968\u6cd5\n        # \u6469\u5c14\u6295\u7968\u6cd5\u662f\u4e00\u79cd\u7b80\u5355\u7684\u6295\u7968\u7b97\u6cd5\uff0c\u5b83\u901a\u8fc7\u4e00\u4e2a\u8ba1\u6570\u5668\u6765\u7ef4\u62a4\u4e00\u4e2a\u5019\u9009\u4eba\u7684\u5f97\u7968\u6570\uff0c\u5f53\u4e00\u4e2a\u5019\u9009\u4eba\u7684\u5f97\u7968\u6570\u8d85\u8fc7\u603b\u7968\u6570\u7684\u4e00\u534a\u65f6\uff0c\u5c31\u5ba3\u5e03\u8fd9\u4e2a\u5019\u9009\u4eba\u4e3a\u80dc\u5229\u8005\u3002\n        # \u6469\u5c14\u6295\u7968\u6cd5\u7684\u6838\u5fc3\u601d\u60f3\u662f\uff1a\u5982\u679c\u4e00\u4e2a\u5019\u9009\u4eba\u7684\u5f97\u7968\u6570\u8d85\u8fc7\u603b\u7968\u6570\u7684\u4e00\u534a\uff0c\u90a3\u4e48\u5728\u8fd9\u4e2a\u5019\u9009\u4eba\u7684\u5f97\u7968\u6570\u589e\u52a0\u7684\u65f6\u5019\uff0c\u5b83\u7684\u5f97\u7968\u6570\u4e00\u5b9a\u4e0d\u4f1a\u5c0f\u4e8e\u603b\u7968\u6570\u7684\u4e00\u534a\uff1b\u53cd\u4e4b\u4ea6\u7136\u3002\n        # \u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a\u53d8\u91cf\u6765\u8bb0\u5f55\u5f53\u524d\u5019\u9009\u4eba\u7684\u5f97\u7968\u6570\uff0c\u5f53\u9047\u5230\u4e00\u4e2a\u5019\u9009\u4eba\u65f6\uff0c\u5982\u679c\u5b83\u7684\u5f97\u7968\u6570\u7b49\u4e8e\u603b\u7968\u6570\u7684\u4e00\u534a\uff0c\u90a3\u4e48\u5c31\u5ba3\u5e03\u8fd9\u4e2a\u5019\u9009\u4eba\u4e3a\u80dc\u5229\u8005\uff0c\u5426\u5219\uff0c\u5982\u679c\u5b83\u7684\u5f97\u7968\u6570\u5c0f\u4e8e\u603b\u7968\u6570\u7684\u4e00\u534a\uff0c\u90a3\u4e48\u5c31\u628a\u5b83\u7684\u5f97\u7968\u6570\u6e05\u96f6\uff0c\u5e76\u628a\u5b83\u7684\u5f97\u7968\u6570\u8bbe\u7f6e\u4e3a1\uff0c\u5426\u5219\uff0c\u5c31\u628a\u5b83\u7684\u5f97\u7968\u6570\u52a01\u3002\n        # \u8fd9\u6837\uff0c\u5f53\u6211\u4eec\u904d\u5386\u5b8c\u6240\u6709\u7684\u5019\u9009\u4eba\u540e\uff0c\u5982\u679c\u67d0\u4e2a\u5019\u9009\u4eba\u7684\u5f97\u7968\u6570\u7b49\u4e8e\u603b\u7968\u6570\u7684\u4e00\u534a\uff0c\u90a3\u4e48\u5c31\u5ba3\u5e03\u8fd9\u4e2a\u5019\u9009\u4eba\u4e3a\u80dc\u5229\u8005\u3002\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u5176\u4e2d n \u662f\u6570\u7ec4 nums \u7684\u957f\u5ea6\u3002\u6211\u4eec\u53ea\u9700\u8981\u904d\u5386\u4e00\u6b21\u6570\u7ec4\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\u3002\u6211\u4eec\u53ea\u9700\u8981\u5e38\u6570\u7684\u7a7a\u95f4\u5b58\u653e\u5019\u9009\u4eba\u7684\u5f97\u7968\u6570\u3002\n        # \u6469\u5c14\u6295\u7968\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662f O(1)\u3002\n        # \u6469\u5c14\u6295\u7968\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662f O(1)\u3002\n        # \u6469\u5c14\u6295\u7968\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662f O(1)\u3002\n        # \u6469\u5c14\u6295\u7968\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662f O(1)\u3002\n        # \u6469\u5c14\u6295\u7968\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662f O(1)\u3002\n        # \u6469\u5c14\u6295\u7968\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662f O(1)\u3002\n        # \u6469\u5c14\u6295\u7968\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662f O(1)\u3002\n        # \u6469\u5c14\u6295\u7968\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n)\uff0c"}, {"task_id": "majority-element", "completion": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. Sort the array\n        # 2. Get the middle element\n        # 3. Check if the middle element is the majority element\n        # 4. If not, check if the middle element is the majority element\n        # 5. If not, check if the middle element is the majority element\n        # 6. If not, check if the middle element is the majority element\n        # 7. If not, check if the middle element is the majority element\n        # 8. If not, check if the middle element is the majority element\n        # 9. If not, check if the middle element is the majority element\n        # 10. If not, check if the middle element is the majority element\n        # 11. If not, check if the middle element is the majority element\n        # 12. If not, check if the middle element is the majority element\n        # 13. If not, check if the middle element is the majority element\n        # 14. If not, check if the middle element is the majority element\n        # 15. If not, check if the middle element is the majority element\n        # 16. If not, check if the middle element is the majority element\n        # 17. If not, check if the middle element is the majority element\n        # 18. If not, check if the middle element is the majority element\n        # 19. If not, check if the middle element is the majority element\n        # 20. If not, check if the middle element is the majority element\n        # 21. If not, check if the middle element is the majority element\n        # 22. If not, check if the middle element is the majority element\n        # 23. If not, check if the middle element is the majority element\n        # 24. If not, check if the middle element is the majority element\n        # 25. If not, check if the middle element is the majority element\n        # 26. If not, check if the middle element is the majority element\n        # 27. If not, check if the middle element is the majority element\n        # 28. If not, check if the middle element is the majority element\n        # 29. If not, check if the middle element is the majority element\n        # 30. If not, check if the middle element is the majority element\n        # 31. If not, check if the middle element is the majority element\n        # 32. If not, check if the middle element is the majority element\n        # 33. If not, check if the middle element is the majority element\n        # 34. If not, check if the middle element is the majority element\n        # 35. If not, check if the middle element is the majority element\n        # 36. If not, check if the middle element is the majority element\n        # 37. If not, check if the middle element is the majority element\n        # 38. If not, check if the middle element is the majority element\n        # 39. If not, check if the middle element is the majority element\n        # 40. If not, check if the middle element is the majority element\n        # 41. If not, check if the middle element is the majority element\n        # 42. If not, check if the middle element is the majority element\n        # 43. If not, check if the middle element is the majority element\n        # 44. If not, check if the middle element is the majority element\n        # 45. If not, check if the middle element is the majority element\n        # 46. If not, check if the middle element is the majority element\n        # 47. If not, check if the middle element is the majority element\n        # 48. If not, check if the middle element is the majority element\n        # 49. If not, check if the middle element is the majority element\n        # 50. If not, check if the middle element is the majority element\n        # 51. If not, check if the middle element is the majority element\n        # 52. If not, check if the middle element is the majority element\n        # 53. If not, check if the middle element is the majority element\n        # 54. If not, check if the middle element is the majority element\n        # 55. If not, check if the middle element is the majority element\n        # 56. If not"}, {"task_id": "majority-element", "completion": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. Sort the array\n        # 2. Return the middle element\n        # 3. Time complexity: O(nlogn)\n        # 4. Space complexity: O(1)\n        nums.sort()\n        return nums[len(nums)//2]"}, {"task_id": "majority-element", "completion": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        # nums.sort()\n        # return nums[len(nums)//2]\n        \n        # 2. \u54c8\u5e0c\u8868\n        # d = {}\n        # for num in nums:\n        #     if num in d:\n        #         d[num] += 1\n        #     else:\n        #         d[num] = 1\n        # for key, value in d.items():\n        #     if value > len(nums)//2:\n        #         return key\n        \n        # 3. \u6469\u5c14\u6295\u7968\u6cd5\n        # \u6469\u5c14\u6295\u7968\u6cd5\u662f\u4e00\u79cd\u7b80\u5355\u7684\u6295\u7968\u7b97\u6cd5\uff0c\u5b83\u901a\u8fc7\u4e00\u4e2a\u8ba1\u6570\u5668\u6765\u7ef4\u62a4\u4e00\u4e2a\u5019\u9009\u4eba\u7684\u7968\u6570\u3002\n        # \u5982\u679c\u4e00\u4e2a\u5019\u9009\u4eba\u7684\u7968\u6570\u8d85\u8fc7\u534a\u6570\uff0c\u5219\u8be5\u5019\u9009\u4eba\u5c31\u662f\u4f17\u8bae\u9662\u7684\u8bae\u5458\u3002\n        # \u5982\u679c\u6ca1\u6709\u4e00\u4e2a\u5019\u9009\u4eba\u7684\u7968\u6570\u8d85\u8fc7\u534a\u6570\uff0c\u5219\u6ca1\u6709\u8bae\u5458\u80fd\u591f\u83b7\u80dc\u3002\n        # \u6469\u5c14\u6295\u7968\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(1)\u3002\n        # \u6469\u5c14\u6295\u7968\u6cd5\u7684\u6838\u5fc3\u601d\u60f3\u662f\uff1a\u5982\u679c\u4e00\u4e2a\u5019\u9009\u4eba\u7684\u7968\u6570\u8d85\u8fc7\u534a\u6570\uff0c\u5219\u8be5\u5019\u9009\u4eba\u5c31\u662f\u4f17\u8bae\u9662\u7684\u8bae\u5458\u3002\n        # \u5982\u679c\u6ca1\u6709\u4e00\u4e2a\u5019\u9009\u4eba\u7684\u7968\u6570\u8d85\u8fc7\u534a\u6570\uff0c\u5219\u6ca1\u6709\u8bae\u5458\u80fd\u591f\u83b7\u80dc\u3002\n        # \u6469\u5c14\u6295\u7968\u6cd5\u7684\u6838\u5fc3\u601d\u60f3\u662f\uff1a\u5982\u679c\u4e00\u4e2a\u5019\u9009\u4eba\u7684\u7968\u6570\u8d85\u8fc7\u534a\u6570\uff0c\u5219\u8be5\u5019\u9009\u4eba\u5c31\u662f\u4f17\u8bae\u9662\u7684\u8bae\u5458\u3002\n        # \u5982\u679c\u6ca1\u6709\u4e00\u4e2a\u5019\u9009\u4eba\u7684\u7968\u6570\u8d85\u8fc7\u534a\u6570\uff0c\u5219\u6ca1\u6709\u8bae\u5458\u80fd\u591f\u83b7\u80dc\u3002\n        # \u6469\u5c14\u6295\u7968\u6cd5\u7684\u6838\u5fc3\u601d\u60f3\u662f\uff1a\u5982\u679c\u4e00\u4e2a\u5019\u9009\u4eba\u7684\u7968\u6570\u8d85\u8fc7\u534a\u6570\uff0c\u5219\u8be5\u5019\u9009\u4eba\u5c31\u662f\u4f17\u8bae\u9662\u7684\u8bae\u5458\u3002\n        # \u5982\u679c\u6ca1\u6709\u4e00\u4e2a\u5019\u9009\u4eba\u7684\u7968\u6570\u8d85\u8fc7\u534a\u6570\uff0c\u5219\u6ca1\u6709\u8bae\u5458\u80fd\u591f\u83b7\u80dc\u3002\n        # \u6469\u5c14\u6295\u7968\u6cd5\u7684\u6838\u5fc3\u601d\u60f3\u662f\uff1a\u5982\u679c\u4e00\u4e2a\u5019\u9009\u4eba\u7684\u7968\u6570\u8d85\u8fc7\u534a\u6570\uff0c\u5219\u8be5\u5019\u9009\u4eba\u5c31\u662f\u4f17\u8bae\u9662\u7684\u8bae\u5458\u3002\n        # \u5982\u679c\u6ca1\u6709\u4e00\u4e2a\u5019\u9009\u4eba\u7684\u7968\u6570\u8d85\u8fc7\u534a\u6570\uff0c\u5219\u6ca1\u6709\u8bae\u5458\u80fd\u591f\u83b7\u80dc\u3002\n        # \u6469\u5c14\u6295\u7968\u6cd5\u7684\u6838\u5fc3\u601d\u60f3\u662f\uff1a\u5982\u679c\u4e00\u4e2a\u5019\u9009\u4eba\u7684\u7968\u6570\u8d85\u8fc7\u534a\u6570\uff0c\u5219\u8be5\u5019\u9009\u4eba\u5c31\u662f\u4f17\u8bae\u9662\u7684\u8bae\u5458\u3002\n        # \u5982\u679c\u6ca1\u6709\u4e00\u4e2a\u5019\u9009\u4eba\u7684\u7968\u6570\u8d85\u8fc7\u534a\u6570\uff0c\u5219\u6ca1\u6709\u8bae\u5458\u80fd\u591f\u83b7\u80dc\u3002\n        # \u6469\u5c14\u6295\u7968\u6cd5\u7684\u6838\u5fc3\u601d\u60f3\u662f\uff1a\u5982\u679c\u4e00\u4e2a\u5019\u9009\u4eba\u7684\u7968\u6570\u8d85\u8fc7\u534a\u6570\uff0c\u5219\u8be5\u5019\u9009\u4eba\u5c31\u662f\u4f17\u8bae\u9662\u7684\u8bae\u5458\u3002\n        # \u5982\u679c\u6ca1\u6709\u4e00\u4e2a\u5019\u9009\u4eba\u7684\u7968\u6570\u8d85\u8fc7\u534a\u6570\uff0c\u5219\u6ca1\u6709\u8bae\u5458\u80fd\u591f\u83b7\u80dc\u3002\n        # \u6469\u5c14\u6295\u7968\u6cd5\u7684\u6838\u5fc3\u601d\u60f3\u662f\uff1a\u5982\u679c\u4e00\u4e2a\u5019\u9009\u4eba\u7684\u7968\u6570\u8d85\u8fc7\u534a\u6570\uff0c\u5219\u8be5\u5019\u9009\u4eba\u5c31\u662f\u4f17\u8bae\u9662\u7684\u8bae\u5458"}], "reconstruct-itinerary": [{"task_id": "reconstruct-itinerary", "completion": "class Solution(object):\n    def findItinerary(self, tickets):\n        \"\"\"\n        :type tickets: List[List[str]]\n        :rtype: List[str]\n        \"\"\"\n        \n        # Mapping from departure to arrivals\n        graph = collections.defaultdict(list)\n        for fromi, toi in tickets:\n            graph[fromi].append(toi)\n        \n        # Mapping from departure to the next departure\n        next_departure = collections.defaultdict(list)\n        for fromi, toi in tickets:\n            next_departure[fromi].append(toi)\n        \n        # Mapping from departure to the next departure\n        next_departure = collections.defaultdict(list)\n        for fromi, toi in tickets:\n            next_departure[fromi].append(toi)\n        \n        # Mapping from departure to the next departure\n        next_departure = collections.defaultdict(list)\n        for fromi, toi in tickets:\n            next_departure[fromi].append(toi)\n        \n        # Mapping from departure to the next departure\n        next_departure = collections.defaultdict(list)\n        for fromi, toi in tickets:\n            next_departure[fromi].append(toi)\n        \n        # Mapping from departure to the next departure\n        next_departure = collections.defaultdict(list)\n        for fromi, toi in tickets:\n            next_departure[fromi].append(toi)\n        \n        # Mapping from departure to the next departure\n        next_departure = collections.defaultdict(list)\n        for fromi, toi in tickets:\n            next_departure[fromi].append(toi)\n        \n        # Mapping from departure to the next departure\n        next_departure = collections.defaultdict(list)\n        for fromi, toi in tickets:\n            next_departure[fromi].append(toi)\n        \n        # Mapping from departure to the next departure\n        next_departure = collections.defaultdict(list)\n        for fromi, toi in tickets:\n            next_departure[fromi].append(toi)\n        \n        # Mapping from departure to the next departure\n        next_departure = collections.defaultdict(list)\n        for fromi, toi in tickets:\n            next_departure[fromi].append(toi)\n        \n        # Mapping from departure to the next departure\n        next_departure = collections.defaultdict(list)\n        for fromi, toi in tickets:\n            next_departure[fromi].append(toi)\n        \n        # Mapping from departure to the next departure\n        next_departure = collections.defaultdict(list)\n        for fromi, toi in tickets:\n            next_departure[fromi].append(toi)\n        \n        # Mapping from departure to the next departure\n        next_departure = collections.defaultdict(list)\n        for fromi, toi in tickets:\n            next_departure[fromi].append(toi)\n        \n        # Mapping from departure to the next departure\n        next_departure = collections.defaultdict(list)\n        for fromi, toi in tickets:\n            next_departure[fromi].append(toi)\n        \n        # Mapping from departure to the next departure\n        next_departure = collections.defaultdict(list)\n        for fromi, toi in tickets:\n            next_departure[fromi].append(toi)\n        \n        # Mapping from departure to the next departure\n        next_departure = collections.defaultdict(list)\n        for fromi, toi in tickets:\n            next_departure[fromi].append(toi)\n        \n        # Mapping from departure to the next departure\n        next_departure = collections.defaultdict(list)\n        for fromi, toi in tickets:\n            next_departure[fromi].append(toi)\n        \n        # Mapping from departure to the next departure\n        next_departure = collections.defaultdict(list)\n        for fromi, toi in tickets:\n            next_departure[fromi].append(toi)\n        \n        # Mapping from departure to the next departure\n        next_departure = collections.defaultdict(list)"}, {"task_id": "reconstruct-itinerary", "completion": "class Solution(object):\n    def findItinerary(self, tickets):\n        \"\"\"\n        :type tickets: List[List[str]]\n        :rtype: List[str]\n        \"\"\"\n        \n        # Mapping from destination to a list of origin airports\n        destinations = collections.defaultdict(list)\n        for origin, destination in tickets:\n            destinations[destination].append(origin)\n        \n        # Mapping from origin to a list of destinations\n        origins = collections.defaultdict(list)\n        for origin, destination in tickets:\n            origins[origin].append(destination)\n        \n        # Mapping from origin to a list of destinations\n        # and a list of origins\n        origins_destinations = collections.defaultdict(list)\n        for origin, destination in tickets:\n            origins_destinations[origin].append(destination)\n            origins_destinations[destination].append(origin)\n        \n        # Mapping from origin to a list of destinations\n        # and a list of origins\n        # and a list of origins\n        origins_destinations_origins = collections.defaultdict(list)\n        for origin, destination in tickets:\n            origins_destinations_origins[origin].append(destination)\n            origins_destinations_origins[destination].append(origin)\n        \n        # Mapping from origin to a list of destinations\n        # and a list of origins\n        # and a list of origins\n        # and a list of origins\n        origins_destinations_origins_destinations = collections.defaultdict(list)\n        for origin, destination in tickets:\n            origins_destinations_origins_destinations[origin].append(destination)\n            origins_destinations_origins_destinations[destination].append(origin)\n        \n        # Mapping from origin to a list of destinations\n        # and a list of origins\n        # and a list of origins\n        # and a list of origins\n        # and a list of origins\n        origins_destinations_origins_destinations_origins = collections.defaultdict(list)\n        for origin, destination in tickets:\n            origins_destinations_origins_destinations_origins[origin].append(destination)\n            origins_destinations_origins_destinations_origins[destination].append(origin)\n        \n        # Mapping from origin to a list of destinations\n        # and a list of origins\n        # and a list of origins\n        # and a list of origins\n        # and a list of origins\n        # and a list of origins\n        origins_destinations_origins_destinations_origins_destinations = collections.defaultdict(list)\n        for origin, destination in tickets:\n            origins_destinations_origins_destinations_origins_destinations[origin].append(destination)\n            origins_destinations_origins_destinations_origins_destinations[destination].append(origin)\n        \n        # Mapping from origin to a list of destinations\n        # and a list of origins\n        # and a list of origins\n        # and a list of origins\n        # and a list of origins\n        # and a list of origins\n        # and a list of origins\n        origins_destinations_origins_destinations_origins_destinations_origins = collections.defaultdict(list)\n        for origin, destination in tickets:\n            origins_destinations_origins_destinations_origins_destinations_origins[origin].append(destination)\n            origins_destinations_origins_destinations_origins_destinations_origins[destination].append(origin)\n        \n        # Mapping from origin to a list of destinations\n        # and a list of origins\n        # and a list of origins\n        # and a list of origins\n        # and a list of origins\n        # and a list of origins\n        # and a list of origins\n        # and a list of origins\n        origins_destinations_origins_destinations_origins_destinations_origins_destinations = collections.defaultdict(list)\n        for origin, destination in tickets:\n            origins_destinations_origins_destinations_origins_destinations_origins_destinations[origin].append(destination)"}, {"task_id": "reconstruct-itinerary", "completion": "class Solution(object):\n    def findItinerary(self, tickets):\n        \"\"\"\n        :type tickets: List[List[str]]\n        :rtype: List[str]\n        \"\"\"\n        \n        # Mapping from departure airport to a list of arrival airports\n        # and a list of tickets that depart from that airport\n        airports = collections.defaultdict(list)\n        for ticket in tickets:\n            airports[ticket[0]].append(ticket[1])\n            airports[ticket[1]].append(ticket[0])\n        \n        # Mapping from departure airport to a list of tickets that depart from that airport\n        # and a list of arrival airports\n        airports_reverse = collections.defaultdict(list)\n        for ticket in tickets:\n            airports_reverse[ticket[0]].append(ticket[1])\n            airports_reverse[ticket[1]].append(ticket[0])\n        \n        # Mapping from departure airport to a list of tickets that depart from that airport\n        # and a list of arrival airports\n        airports_reverse = collections.defaultdict(list)\n        for ticket in tickets:\n            airports_reverse[ticket[0]].append(ticket[1])\n            airports_reverse[ticket[1]].append(ticket[0])\n        \n        # Mapping from departure airport to a list of tickets that depart from that airport\n        # and a list of arrival airports\n        airports_reverse = collections.defaultdict(list)\n        for ticket in tickets:\n            airports_reverse[ticket[0]].append(ticket[1])\n            airports_reverse[ticket[1]].append(ticket[0])\n        \n        # Mapping from departure airport to a list of tickets that depart from that airport\n        # and a list of arrival airports\n        airports_reverse = collections.defaultdict(list)\n        for ticket in tickets:\n            airports_reverse[ticket[0]].append(ticket[1])\n            airports_reverse[ticket[1]].append(ticket[0])\n        \n        # Mapping from departure airport to a list of tickets that depart from that airport\n        # and a list of arrival airports\n        airports_reverse = collections.defaultdict(list)\n        for ticket in tickets:\n            airports_reverse[ticket[0]].append(ticket[1])\n            airports_reverse[ticket[1]].append(ticket[0])\n        \n        # Mapping from departure airport to a list of tickets that depart from that airport\n        # and a list of arrival airports\n        airports_reverse = collections.defaultdict(list)\n        for ticket in tickets:\n            airports_reverse[ticket[0]].append(ticket[1])\n            airports_reverse[ticket[1]].append(ticket[0])\n        \n        # Mapping from departure airport to a list of tickets that depart from that airport\n        # and a list of arrival airports\n        airports_reverse = collections.defaultdict(list)\n        for ticket in tickets:\n            airports_reverse[ticket[0]].append(ticket[1])\n            airports_reverse[ticket[1]].append(ticket[0])\n        \n        # Mapping from departure airport to a list of tickets that depart from that airport\n        # and a list of arrival airports\n        airports_reverse = collections.defaultdict(list)\n        for ticket in tickets:\n            airports_reverse[ticket[0]].append(ticket[1])\n            airports_reverse[ticket[1]].append(ticket[0])\n        \n        # Mapping from departure airport to a list of tickets that depart from that airport\n        # and a list of arrival airports\n        airports_reverse = collections.defaultdict(list)\n        for ticket in tickets:\n            airports_reverse[ticket[0]].append(ticket[1])\n            airports_reverse[ticket[1]].append(ticket[0])\n        \n        # Mapping from departure airport to a list of tickets that depart from that airport\n        # and a list of arrival airports\n        airports_reverse = collections.defaultdict(list)\n        for ticket in tickets:\n            airports_reverse[ticket[0]].append(ticket[1])\n            airports_reverse[t"}, {"task_id": "reconstruct-itinerary", "completion": "class Solution(object):\n    def findItinerary(self, tickets):\n        \"\"\"\n        :type tickets: List[List[str]]\n        :rtype: List[str]\n        \"\"\"\n        \n        # Create a dictionary to store the tickets\n        # The key is the departure airport and the value is a list of arrival airports\n        # The value is a list because there can be multiple flights from the same departure airport\n        # The value is a list because there can be multiple flights to the same arrival airport\n        # The value is a list because there can be multiple flights from the same departure airport to the same arrival airport\n        # The value is a list because there can be multiple flights from the same departure airport to the same arrival airport\n        # The value is a list because there can be multiple flights from the same departure airport to the same arrival airport\n        # The value is a list because there can be multiple flights from the same departure airport to the same arrival airport\n        # The value is a list because there can be multiple flights from the same departure airport to the same arrival airport\n        # The value is a list because there can be multiple flights from the same departure airport to the same arrival airport\n        # The value is a list because there can be multiple flights from the same departure airport to the same arrival airport\n        # The value is a list because there can be multiple flights from the same departure airport to the same arrival airport\n        # The value is a list because there can be multiple flights from the same departure airport to the same arrival airport\n        # The value is a list because there can be multiple flights from the same departure airport to the same arrival airport\n        # The value is a list because there can be multiple flights from the same departure airport to the same arrival airport\n        # The value is a list because there can be multiple flights from the same departure airport to the same arrival airport\n        # The value is a list because there can be multiple flights from the same departure airport to the same arrival airport\n        # The value is a list because there can be multiple flights from the same departure airport to the same arrival airport\n        # The value is a list because there can be multiple flights from the same departure airport to the same arrival airport\n        # The value is a list because there can be multiple flights from the same departure airport to the same arrival airport\n        # The value is a list because there can be multiple flights from the same departure airport to the same arrival airport\n        # The value is a list because there can be multiple flights from the same departure airport to the same arrival airport\n        # The value is a list because there can be multiple flights from the same departure airport to the same arrival airport\n        # The value is a list because there can be multiple flights from the same departure airport to the same arrival airport\n        # The value is a list because there can be multiple flights from the same departure airport to the same arrival airport\n        # The value is a list because there can be multiple flights from the same departure airport to the same arrival airport\n        # The value is a list because there can be multiple flights from the same departure airport to the same arrival airport\n        # The value is a list because there can be multiple flights from the same departure airport to the same arrival airport\n        # The value is a list because there can be multiple flights from the same departure airport to the same arrival airport\n        # The value is a list because there can be multiple flights from the same departure airport to the same arrival airport\n        # The value is a list because there can be multiple flights from the same departure airport to the same arrival airport\n        # The value is a list because there can be multiple flights from the same departure airport to the same arrival airport\n        # The value is a list because there can be multiple flights from the same departure airport to the same arrival airport\n        # The value is a list because there can be multiple flights from the same departure airport to the same arrival airport\n        # The value is a list because there can be multiple flights from the same departure airport to the same arrival airport\n        # The value is a list because there can be multiple flights from the same departure airport to the same arrival airport\n        # The value is a list because there can be multiple flights from the same departure airport to the same arrival airport\n        # The value is a list because there can be multiple flights from the same departure airport to the same arrival airport\n        # The value is a list because there can be multiple flights from the same departure airport to the same arrival airport\n        # The value is a"}, {"task_id": "reconstruct-itinerary", "completion": "class Solution(object):\n    def findItinerary(self, tickets):\n        \"\"\"\n        :type tickets: List[List[str]]\n        :rtype: List[str]\n        \"\"\"\n        \n        # Mapping from departure to arrivals\n        graph = collections.defaultdict(list)\n        for ticket in tickets:\n            graph[ticket[0]].append(ticket[1])\n        \n        # Mapping from arrival to departure\n        reverse_graph = collections.defaultdict(list)\n        for departure, arrivals in graph.items():\n            for arrival in arrivals:\n                reverse_graph[arrival].append(departure)\n        \n        # Mapping from departure to the number of arrivals\n        departure_count = collections.defaultdict(int)\n        for departure, arrivals in graph.items():\n            for arrival in arrivals:\n                departure_count[departure] += 1\n        \n        # Mapping from departure to the number of arrivals\n        arrival_count = collections.defaultdict(int)\n        for departure, arrivals in reverse_graph.items():\n            for arrival in arrivals:\n                arrival_count[arrival] += 1\n        \n        # Mapping from departure to the number of arrivals\n        departure_count = collections.defaultdict(int)\n        for departure, arrivals in graph.items():\n            for arrival in arrivals:\n                departure_count[departure] += 1\n        \n        # Mapping from departure to the number of arrivals\n        arrival_count = collections.defaultdict(int)\n        for departure, arrivals in reverse_graph.items():\n            for arrival in arrivals:\n                arrival_count[arrival] += 1\n        \n        # Mapping from departure to the number of arrivals\n        departure_count = collections.defaultdict(int)\n        for departure, arrivals in graph.items():\n            for arrival in arrivals:\n                departure_count[departure] += 1\n        \n        # Mapping from departure to the number of arrivals\n        arrival_count = collections.defaultdict(int)\n        for departure, arrivals in reverse_graph.items():\n            for arrival in arrivals:\n                arrival_count[arrival] += 1\n        \n        # Mapping from departure to the number of arrivals\n        departure_count = collections.defaultdict(int)\n        for departure, arrivals in graph.items():\n            for arrival in arrivals:\n                departure_count[departure] += 1\n        \n        # Mapping from departure to the number of arrivals\n        arrival_count = collections.defaultdict(int)\n        for departure, arrivals in reverse_graph.items():\n            for arrival in arrivals:\n                arrival_count[arrival] += 1\n        \n        # Mapping from departure to the number of arrivals\n        departure_count = collections.defaultdict(int)\n        for departure, arrivals in graph.items():\n            for arrival in arrivals:\n                departure_count[departure] += 1\n        \n        # Mapping from departure to the number of arrivals\n        arrival_count = collections.defaultdict(int)\n        for departure, arrivals in reverse_graph.items():\n            for arrival in arrivals:\n                arrival_count[arrival] += 1\n        \n        # Mapping from departure to the number of arrivals\n        departure_count = collections.defaultdict(int)\n        for departure, arrivals in graph.items():\n            for arrival in arrivals:\n                departure_count[departure] += 1\n        \n        # Mapping from departure to the number of arrivals\n        arrival_count = collections.defaultdict(int)\n        for departure, arrivals in reverse_graph.items():\n            for arrival in arrivals:\n                arrival_count[arrival] += 1\n        \n        # Mapping from departure to the number of arrivals\n        departure_count = collections.defaultdict(int)\n        for departure, arrivals in graph.items():\n            for arrival in arrivals:\n                departure_count[departure] += 1\n        \n        # Mapping from departure to the number of arrivals\n        arrival_count = collections.defaultdict(int)\n        for departure, arrivals in reverse_graph.items():\n            for arrival in arrivals:\n                arrival_count[arrival] += 1\n        \n        # Mapping from departure to the number of arrivals\n        departure_count = collections.defaultdict(int)\n        for departure, arrivals in graph.items():\n            for arrival in arrivals:\n                departure_count[departure] +="}], "4sum": [{"task_id": "4sum", "completion": "class Solution(object):\n    def fourSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        for i in range(len(nums)-3):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            for j in range(i+1, len(nums)-2):\n                if j > i+1 and nums[j] == nums[j-1]:\n                    continue\n                l, r = j+1, len(nums)-1\n                while l < r:\n                    s = nums[i] + nums[j] + nums[l] + nums[r]\n                    if s == target:\n                        res.append([nums[i], nums[j], nums[l], nums[r]])\n                        while l < r and nums[l] == nums[l+1]:\n                            l += 1\n                        while l < r and nums[r] == nums[r-1]:\n                            r -= 1\n                        l += 1\n                        r -= 1\n                    elif s < target:\n                        l += 1\n                    else:\n                        r -= 1\n        return res"}, {"task_id": "4sum", "completion": "class Solution(object):\n    def fourSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        for i in range(len(nums)-3):\n            if i>0 and nums[i] == nums[i-1]:\n                continue\n            for j in range(i+1, len(nums)-2):\n                if j>i+1 and nums[j] == nums[j-1]:\n                    continue\n                l, r = j+1, len(nums)-1\n                while l < r:\n                    s = nums[i] + nums[j] + nums[l] + nums[r]\n                    if s == target:\n                        res.append([nums[i], nums[j], nums[l], nums[r]])\n                        while l < r and nums[l] == nums[l+1]:\n                            l += 1\n                        while l < r and nums[r] == nums[r-1]:\n                            r -= 1\n                        l += 1\n                        r -= 1\n                    elif s < target:\n                        l += 1\n                    else:\n                        r -= 1\n        return res"}, {"task_id": "4sum", "completion": "class Solution(object):\n    def fourSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        for i in range(len(nums)-3):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            for j in range(i+1, len(nums)-2):\n                if j > i+1 and nums[j] == nums[j-1]:\n                    continue\n                l, r = j+1, len(nums)-1\n                while l < r:\n                    s = nums[i] + nums[j] + nums[l] + nums[r]\n                    if s == target:\n                        res.append([nums[i], nums[j], nums[l], nums[r]])\n                        while l < r and nums[l] == nums[l+1]:\n                            l += 1\n                        while l < r and nums[r] == nums[r-1]:\n                            r -= 1\n                        l += 1\n                        r -= 1\n                    elif s < target:\n                        l += 1\n                    else:\n                        r -= 1\n        return res"}, {"task_id": "4sum", "completion": "class Solution(object):\n    def fourSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        for i in range(len(nums)-3):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            for j in range(i+1, len(nums)-2):\n                if j > i+1 and nums[j] == nums[j-1]:\n                    continue\n                l, r = j+1, len(nums)-1\n                while l < r:\n                    s = nums[i] + nums[j] + nums[l] + nums[r]\n                    if s == target:\n                        res.append([nums[i], nums[j], nums[l], nums[r]])\n                        while l < r and nums[l] == nums[l+1]:\n                            l += 1\n                        while l < r and nums[r] == nums[r-1]:\n                            r -= 1\n                        l += 1\n                        r -= 1\n                    elif s < target:\n                        l += 1\n                    else:\n                        r -= 1\n        return res"}, {"task_id": "4sum", "completion": "class Solution(object):\n    def fourSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        for i in range(len(nums)-3):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            for j in range(i+1, len(nums)-2):\n                if j > i+1 and nums[j] == nums[j-1]:\n                    continue\n                l, r = j+1, len(nums)-1\n                while l < r:\n                    s = nums[i] + nums[j] + nums[l] + nums[r]\n                    if s == target:\n                        res.append([nums[i], nums[j], nums[l], nums[r]])\n                        while l < r and nums[l] == nums[l+1]:\n                            l += 1\n                        while l < r and nums[r] == nums[r-1]:\n                            r -= 1\n                        l += 1\n                        r -= 1\n                    elif s < target:\n                        l += 1\n                    else:\n                        r -= 1\n        return res"}], "the-skyline-problem": [{"task_id": "the-skyline-problem", "completion": "class Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. sort by left\n        # 2. merge\n        # 3. sort by right\n        # 4. merge\n        # 5. sort by height\n        # 6. merge\n        # 7. sort by left\n        # 8. merge\n        # 9. sort by right\n        # 10. merge\n        # 11. sort by height\n        # 12. merge\n        # 13. sort by left\n        # 14. merge\n        # 15. sort by right\n        # 16. merge\n        # 17. sort by height\n        # 18. merge\n        # 19. sort by left\n        # 20. merge\n        # 21. sort by right\n        # 22. merge\n        # 23. sort by height\n        # 24. merge\n        # 25. sort by left\n        # 26. merge\n        # 27. sort by right\n        # 28. merge\n        # 29. sort by height\n        # 30. merge\n        # 31. sort by left\n        # 32. merge\n        # 33. sort by right\n        # 34. merge\n        # 35. sort by height\n        # 36. merge\n        # 37. sort by left\n        # 38. merge\n        # 39. sort by right\n        # 40. merge\n        # 41. sort by height\n        # 42. merge\n        # 43. sort by left\n        # 44. merge\n        # 45. sort by right\n        # 46. merge\n        # 47. sort by height\n        # 48. merge\n        # 49. sort by left\n        # 50. merge\n        # 51. sort by right\n        # 52. merge\n        # 53. sort by height\n        # 54. merge\n        # 55. sort by left\n        # 56. merge\n        # 57. sort by right\n        # 58. merge\n        # 59. sort by height\n        # 60. merge\n        # 61. sort by left\n        # 62. merge\n        # 63. sort by right\n        # 64. merge\n        # 65. sort by height\n        # 66. merge\n        # 67. sort by left\n        # 68. merge\n        # 69. sort by right\n        # 70. merge\n        # 71. sort by height\n        # 72. merge\n        # 73. sort by left\n        # 74. merge\n        # 75. sort by right\n        # 76. merge\n        # 77. sort by height\n        # 78. merge\n        # 79. sort by left\n        # 80. merge\n        # 81. sort by right\n        # 82. merge\n        # 83. sort by height\n        # 84. merge\n        # 85. sort by left\n        # 86. merge\n        # 87. sort by right\n        # 88. merge\n        # 89. sort by height\n        # 90. merge\n        # 91. sort by left\n        # 92. merge\n        # 93. sort by right\n        # 94. merge\n        # 95. sort by height\n        # 96. merge\n        # 97. sort by left\n        # 98. merge\n        # 99. sort by right\n        # 100. merge\n        # 101. sort by height\n        # 102. merge\n        # 103. sort by left\n        # 104. merge\n        # 105. sort by right\n        # 106. merge\n        # 107. sort by height\n        # 108. merge\n        # 109. sort by left\n        # 110. merge\n        # 111. sort by right\n        # 112. merge\n        # 113. sort by height"}, {"task_id": "the-skyline-problem", "completion": "class Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. sort by left\n        # 2. merge\n        # 3. sort by right\n        # 4. merge\n        # 5. sort by height\n        # 6. merge\n        # 7. sort by left\n        # 8. merge\n        # 9. sort by right\n        # 10. merge\n        # 11. sort by height\n        # 12. merge\n        # 13. sort by left\n        # 14. merge\n        # 15. sort by right\n        # 16. merge\n        # 17. sort by height\n        # 18. merge\n        # 19. sort by left\n        # 20. merge\n        # 21. sort by right\n        # 22. merge\n        # 23. sort by height\n        # 24. merge\n        # 25. sort by left\n        # 26. merge\n        # 27. sort by right\n        # 28. merge\n        # 29. sort by height\n        # 30. merge\n        # 31. sort by left\n        # 32. merge\n        # 33. sort by right\n        # 34. merge\n        # 35. sort by height\n        # 36. merge\n        # 37. sort by left\n        # 38. merge\n        # 39. sort by right\n        # 40. merge\n        # 41. sort by height\n        # 42. merge\n        # 43. sort by left\n        # 44. merge\n        # 45. sort by right\n        # 46. merge\n        # 47. sort by height\n        # 48. merge\n        # 49. sort by left\n        # 50. merge\n        # 51. sort by right\n        # 52. merge\n        # 53. sort by height\n        # 54. merge\n        # 55. sort by left\n        # 56. merge\n        # 57. sort by right\n        # 58. merge\n        # 59. sort by height\n        # 60. merge\n        # 61. sort by left\n        # 62. merge\n        # 63. sort by right\n        # 64. merge\n        # 65. sort by height\n        # 66. merge\n        # 67. sort by left\n        # 68. merge\n        # 69. sort by right\n        # 70. merge\n        # 71. sort by height\n        # 72. merge\n        # 73. sort by left\n        # 74. merge\n        # 75. sort by right\n        # 76. merge\n        # 77. sort by height\n        # 78. merge\n        # 79. sort by left\n        # 80. merge\n        # 81. sort by right\n        # 82. merge\n        # 83. sort by height\n        # 84. merge\n        # 85. sort by left\n        # 86. merge\n        # 87. sort by right\n        # 88. merge\n        # 89. sort by height\n        # 90. merge\n        # 91. sort by left\n        # 92. merge\n        # 93. sort by right\n        # 94. merge\n        # 95. sort by height\n        # 96. merge\n        # 97. sort by left\n        # 98. merge\n        # 99. sort by right\n        # 100. merge\n        # 101. sort by height\n        # 102. merge\n        # 103. sort by left\n        # 104. merge\n        # 105. sort by right\n        # 106. merge\n        # 107. sort by height\n        # 108. merge\n        # 109. sort by left\n        # 110. merge\n        # 111. sort by right\n        # 112. merge\n        # 113. sort by height"}, {"task_id": "the-skyline-problem", "completion": "class Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. sort by left\n        # 2. merge\n        # 3. sort by right\n        # 4. merge\n        # 5. sort by height\n        # 6. merge\n        # 7. sort by left\n        # 8. merge\n        # 9. sort by right\n        # 10. merge\n        # 11. sort by height\n        # 12. merge\n        # 13. sort by left\n        # 14. merge\n        # 15. sort by right\n        # 16. merge\n        # 17. sort by height\n        # 18. merge\n        # 19. sort by left\n        # 20. merge\n        # 21. sort by right\n        # 22. merge\n        # 23. sort by height\n        # 24. merge\n        # 25. sort by left\n        # 26. merge\n        # 27. sort by right\n        # 28. merge\n        # 29. sort by height\n        # 30. merge\n        # 31. sort by left\n        # 32. merge\n        # 33. sort by right\n        # 34. merge\n        # 35. sort by height\n        # 36. merge\n        # 37. sort by left\n        # 38. merge\n        # 39. sort by right\n        # 40. merge\n        # 41. sort by height\n        # 42. merge\n        # 43. sort by left\n        # 44. merge\n        # 45. sort by right\n        # 46. merge\n        # 47. sort by height\n        # 48. merge\n        # 49. sort by left\n        # 50. merge\n        # 51. sort by right\n        # 52. merge\n        # 53. sort by height\n        # 54. merge\n        # 55. sort by left\n        # 56. merge\n        # 57. sort by right\n        # 58. merge\n        # 59. sort by height\n        # 60. merge\n        # 61. sort by left\n        # 62. merge\n        # 63. sort by right\n        # 64. merge\n        # 65. sort by height\n        # 66. merge\n        # 67. sort by left\n        # 68. merge\n        # 69. sort by right\n        # 70. merge\n        # 71. sort by height\n        # 72. merge\n        # 73. sort by left\n        # 74. merge\n        # 75. sort by right\n        # 76. merge\n        # 77. sort by height\n        # 78. merge\n        # 79. sort by left\n        # 80. merge\n        # 81. sort by right\n        # 82. merge\n        # 83. sort by height\n        # 84. merge\n        # 85. sort by left\n        # 86. merge\n        # 87. sort by right\n        # 88. merge\n        # 89. sort by height\n        # 90. merge\n        # 91. sort by left\n        # 92. merge\n        # 93. sort by right\n        # 94. merge\n        # 95. sort by height\n        # 96. merge\n        # 97. sort by left\n        # 98. merge\n        # 99. sort by right\n        # 100. merge\n        # 101. sort by height\n        # 102. merge\n        # 103. sort by left\n        # 104. merge\n        # 105. sort by right\n        # 106. merge\n        # 107. sort by height\n        # 108. merge\n        # 109. sort by left\n        # 110. merge\n        # 111. sort by right\n        # 112. merge\n        # 113. sort by height"}, {"task_id": "the-skyline-problem", "completion": "class Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. sort the buildings by left coordinate\n        # 2. for each building, add the right coordinate to the heap\n        # 3. pop the heap and add the left coordinate to the result\n        # 4. if the left coordinate is the same as the previous one, add the height to the result\n        # 5. if the left coordinate is smaller than the previous one, add the height to the result\n        # 6. if the left coordinate is larger than the previous one, add the height to the result\n        # 7. if the left coordinate is larger than the previous one, add the height to the result\n        # 8. if the left coordinate is the same as the previous one, add the height to the result\n        # 9. if the left coordinate is smaller than the previous one, add the height to the result\n        # 10. if the left coordinate is larger than the previous one, add the height to the result\n        # 11. if the left coordinate is the same as the previous one, add the height to the result\n        # 12. if the left coordinate is smaller than the previous one, add the height to the result\n        # 13. if the left coordinate is larger than the previous one, add the height to the result\n        # 14. if the left coordinate is the same as the previous one, add the height to the result\n        # 15. if the left coordinate is smaller than the previous one, add the height to the result\n        # 16. if the left coordinate is larger than the previous one, add the height to the result\n        # 17. if the left coordinate is the same as the previous one, add the height to the result\n        # 18. if the left coordinate is smaller than the previous one, add the height to the result\n        # 19. if the left coordinate is larger than the previous one, add the height to the result\n        # 20. if the left coordinate is the same as the previous one, add the height to the result\n        # 21. if the left coordinate is smaller than the previous one, add the height to the result\n        # 22. if the left coordinate is larger than the previous one, add the height to the result\n        # 23. if the left coordinate is the same as the previous one, add the height to the result\n        # 24. if the left coordinate is smaller than the previous one, add the height to the result\n        # 25. if the left coordinate is larger than the previous one, add the height to the result\n        # 26. if the left coordinate is the same as the previous one, add the height to the result\n        # 27. if the left coordinate is smaller than the previous one, add the height to the result\n        # 28. if the left coordinate is larger than the previous one, add the height to the result\n        # 29. if the left coordinate is the same as the previous one, add the height to the result\n        # 30. if the left coordinate is smaller than the previous one, add the height to the result\n        # 31. if the left coordinate is larger than the previous one, add the height to the result\n        # 32. if the left coordinate is the same as the previous one, add the height to the result\n        # 33. if the left coordinate is smaller than the previous one, add the height to the result\n        # 34. if the left coordinate is larger than the previous one, add the height to the result\n        # 35. if the left coordinate is the same as the previous one, add the height to the result\n        # 36. if the left coordinate is smaller than the previous one, add the height to the result\n        # 37. if the left coordinate is larger than the previous one, add the height to the result\n        # 38. if the left coordinate is the same as the previous one, add the height to the result\n        # 39. if the left coordinate is smaller than the previous one, add the height to the result\n        # 40. if the left coordinate is larger than the previous one, add the height to the result\n        # 41. if the left coordinate is the same as the previous one, add the height to the result\n        # 42. if the left coordinate is smaller than the previous one, add the height to the result\n        # 43. if the left coordinate is larger than the previous one, add the height to the result\n        # 44. if the left coordinate is"}, {"task_id": "the-skyline-problem", "completion": "class Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. sort the buildings by left coordinate\n        # 2. for each building, add the right coordinate to the heap\n        # 3. pop the right coordinate from the heap and add it to the result\n        # 4. if the right coordinate is the same as the left coordinate, then add the height to the result\n        # 5. if the right coordinate is smaller than the left coordinate, then pop the right coordinate from the heap\n        # 6. if the right coordinate is larger than the left coordinate, then add the right coordinate to the heap\n        # 7. if the right coordinate is the same as the left coordinate, then add the height to the result\n        # 8. if the right coordinate is smaller than the left coordinate, then pop the right coordinate from the heap\n        # 9. if the right coordinate is larger than the left coordinate, then add the right coordinate to the heap\n        # 10. if the right coordinate is the same as the left coordinate, then add the height to the result\n        # 11. if the right coordinate is smaller than the left coordinate, then pop the right coordinate from the heap\n        # 12. if the right coordinate is larger than the left coordinate, then add the right coordinate to the heap\n        # 13. if the right coordinate is the same as the left coordinate, then add the height to the result\n        # 14. if the right coordinate is smaller than the left coordinate, then pop the right coordinate from the heap\n        # 15. if the right coordinate is larger than the left coordinate, then add the right coordinate to the heap\n        # 16. if the right coordinate is the same as the left coordinate, then add the height to the result\n        # 17. if the right coordinate is smaller than the left coordinate, then pop the right coordinate from the heap\n        # 18. if the right coordinate is larger than the left coordinate, then add the right coordinate to the heap\n        # 19. if the right coordinate is the same as the left coordinate, then add the height to the result\n        # 20. if the right coordinate is smaller than the left coordinate, then pop the right coordinate from the heap\n        # 21. if the right coordinate is larger than the left coordinate, then add the right coordinate to the heap\n        # 22. if the right coordinate is the same as the left coordinate, then add the height to the result\n        # 23. if the right coordinate is smaller than the left coordinate, then pop the right coordinate from the heap\n        # 24. if the right coordinate is larger than the left coordinate, then add the right coordinate to the heap\n        # 25. if the right coordinate is the same as the left coordinate, then add the height to the result\n        # 26. if the right coordinate is smaller than the left coordinate, then pop the right coordinate from the heap\n        # 27. if the right coordinate is larger than the left coordinate, then add the right coordinate to the heap\n        # 28. if the right coordinate is the same as the left coordinate, then add the height to the result\n        # 29. if the right coordinate is smaller than the left coordinate, then pop the right coordinate from the heap\n        # 30. if the right coordinate is larger than the left coordinate, then add the right coordinate to the heap\n        # 31. if the right coordinate is the same as the left coordinate, then add the height to the result\n        # 32. if the right coordinate is smaller than the left coordinate, then pop the right coordinate from the heap\n        # 33. if the right coordinate is larger than the left coordinate, then add the right coordinate to the heap\n        # 34. if the right coordinate is the same as the left coordinate, then add the height to the result\n        # 35. if the right coordinate is smaller than the left coordinate, then pop the right coordinate from the heap\n        # 36. if the right coordinate is larger than the left coordinate, then add the right coordinate to the heap\n        # 37. if the right coordinate is the same as the left coordinate, then add the height to the result\n        # 38. if the right coordinate is smaller than the left coordinate, then pop the right coordinate from the heap\n        # 39. if the right coordinate is larger than the left coordinate, then add the right coordinate to the heap\n        # 40. if the right coordinate is the same as the left coordinate, then add the height to the result\n        # 41. if the right coordinate is smaller than the left coordinate, then pop the"}], "reverse-string": [{"task_id": "reverse-string", "completion": "class Solution(object):\n    def reverseString(self, s):\n        \"\"\"\n        :type s: List[str]\n        :rtype: None Do not return anything, modify s in-place instead.\n        \"\"\"\n        \n        # reverse the string\n        s.reverse()\n        \n        # reverse the characters in each string\n        for i in range(len(s)):\n            s[i] = s[i][::-1]"}, {"task_id": "reverse-string", "completion": "class Solution(object):\n    def reverseString(self, s):\n        \"\"\"\n        :type s: List[str]\n        :rtype: None Do not return anything, modify s in-place instead.\n        \"\"\"\n        \n        # reverse the string\n        s.reverse()\n        \n        # reverse the characters in each string\n        for i in range(len(s)):\n            s[i] = s[i][::-1]"}, {"task_id": "reverse-string", "completion": "class Solution(object):\n    def reverseString(self, s):\n        \"\"\"\n        :type s: List[str]\n        :rtype: None Do not return anything, modify s in-place instead.\n        \"\"\"\n        \n        # reverse the string\n        s.reverse()\n        \n        # reverse the characters in each string\n        for i in range(len(s)):\n            s[i] = s[i][::-1]"}, {"task_id": "reverse-string", "completion": "class Solution(object):\n    def reverseString(self, s):\n        \"\"\"\n        :type s: List[str]\n        :rtype: None Do not return anything, modify s in-place instead.\n        \"\"\"\n        \n        # reverse the string\n        s.reverse()\n        \n        # reverse the characters in each string\n        for i in range(len(s)):\n            s[i] = s[i][::-1]\n        \n        # reverse the strings\n        s.reverse()\n        \n        # return the string\n        return s"}, {"task_id": "reverse-string", "completion": "class Solution(object):\n    def reverseString(self, s):\n        \"\"\"\n        :type s: List[str]\n        :rtype: None Do not return anything, modify s in-place instead.\n        \"\"\"\n        \n        # reverse the string\n        s.reverse()\n        \n        # reverse the characters in each string\n        for i in range(len(s)):\n            s[i] = s[i][::-1]\n        \n        # reverse the strings\n        s.reverse()\n        \n        # return the string\n        return s"}], "reverse-linked-list": [{"task_id": "reverse-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return None\n        \n        prev = None\n        while head is not None:\n            next = head.next\n            head.next = prev\n            prev = head\n            head = next\n        return prev"}, {"task_id": "reverse-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return None\n        \n        prev = None\n        while head is not None:\n            next = head.next\n            head.next = prev\n            prev = head\n            head = next\n        return prev"}, {"task_id": "reverse-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return head\n        \n        prev = None\n        while head is not None:\n            next = head.next\n            head.next = prev\n            prev = head\n            head = next\n        return prev"}, {"task_id": "reverse-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return None\n        \n        prev = None\n        while head is not None:\n            next = head.next\n            head.next = prev\n            prev = head\n            head = next\n        return prev"}, {"task_id": "reverse-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return None\n        \n        prev = None\n        while head is not None:\n            next = head.next\n            head.next = prev\n            prev = head\n            head = next\n        return prev"}], "triangle": [{"task_id": "triangle", "completion": "class Solution(object):\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u52a8\u6001\u89c4\u5212\n        # 2. \u65f6\u95f4\u590d\u6742\u5ea6: O(n^2)\n        # 3. \u7a7a\u95f4\u590d\u6742\u5ea6: O(n)\n        # 4. \u601d\u8def: \u4ece\u4e0b\u5f80\u4e0a, \u4ece\u5de6\u5f80\u53f3\n        # 5. \u8fb9\u754c: \n        # 6. \u7ec8\u6b62\u6761\u4ef6: \n        # 7. \u6b65\u9aa4: \n        # 8. \u5b9e\u73b0: \n        if not triangle:\n            return 0\n        n = len(triangle)\n        dp = [triangle[n-1][0]]\n        for i in range(n-2, -1, -1):\n            for j in range(i+1):\n                dp.append(triangle[i][j] + min(dp[j], dp[j+1]))\n        return dp[0]"}, {"task_id": "triangle", "completion": "class Solution(object):\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u9012\u5f52\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\uff0c\u5176\u4e2d n \u662f\u4e09\u89d2\u5f62\u7684\u884c\u6570\u3002\n        # \u6bcf\u4e2a\u8282\u70b9\u90fd\u4f1a\u88ab\u8bbf\u95ee\u5230\uff0c\u56e0\u6b64\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n^2)\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u5176\u4e2d n \u662f\u4e09\u89d2\u5f62\u7684\u884c\u6570\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\u4e3b\u8981\u53d6\u51b3\u4e8e\u9012\u5f52\u8c03\u7528\u7684\u6808\u7a7a\u95f4\uff0c\u6700\u5dee\u60c5\u51b5\u4e0b\uff0c\u6808\u7a7a\u95f4\u9700\u8981\u7684\u6df1\u5ea6\u7b49\u4e8e\u4e09\u89d2\u5f62\u7684\u884c\u6570\uff0c\u56e0\u6b64\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a O(n)\u3002\n        # 2. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\uff0c\u5176\u4e2d n \u662f\u4e09\u89d2\u5f62\u7684\u884c\u6570\u3002\n        # \u6bcf\u4e2a\u8282\u70b9\u90fd\u4f1a\u88ab\u8bbf\u95ee\u5230\uff0c\u56e0\u6b64\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n^2)\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u5176\u4e2d n \u662f\u4e09\u89d2\u5f62\u7684\u884c\u6570\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\u4e3b\u8981\u53d6\u51b3\u4e8e\u8f85\u52a9\u7a7a\u95f4\uff0c\u5373 dp \u6570\u7ec4\uff0c\u5176\u5927\u5c0f\u4e3a\u4e09\u89d2\u5f62\u7684\u884c\u6570\uff0c\u56e0\u6b64\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a O(n)\u3002\n        # 3. \u8d2a\u5fc3\u7b97\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\uff0c\u5176\u4e2d n \u662f\u4e09\u89d2\u5f62\u7684\u884c\u6570\u3002\n        # \u6bcf\u4e2a\u8282\u70b9\u90fd\u4f1a\u88ab\u8bbf\u95ee\u5230\uff0c\u56e0\u6b64\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n^2)\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\u3002\n        # 4. \u4e8c\u5206\u67e5\u627e\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(nlogn)\uff0c\u5176\u4e2d n \u662f\u4e09\u89d2\u5f62\u7684\u884c\u6570\u3002\n        # \u6bcf\u4e2a\u8282\u70b9\u90fd\u4f1a\u88ab\u8bbf\u95ee\u5230\uff0c\u56e0\u6b64\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(nlogn)\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\u3002\n        # 5. \u6590\u6ce2\u90a3\u5951\u6570\u5217\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u5176\u4e2d n \u662f\u4e09\u89d2\u5f62\u7684\u884c\u6570\u3002\n        # \u6bcf\u4e2a\u8282\u70b9\u90fd\u4f1a\u88ab\u8bbf\u95ee\u5230\uff0c\u56e0\u6b64\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n)\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u5176\u4e2d n \u662f\u4e09\u89d2\u5f62\u7684\u884c\u6570\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\u4e3b\u8981\u53d6\u51b3\u4e8e\u8f85\u52a9\u7a7a\u95f4\uff0c\u5373 dp \u6570\u7ec4\uff0c\u5176\u5927\u5c0f\u4e3a\u4e09\u89d2\u5f62\u7684\u884c\u6570\uff0c\u56e0\u6b64\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a O(n)\u3002\n        # 6. \u52a8\u6001\u89c4\u5212 + \u4e8c\u5206\u67e5\u627e\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(nlogn)\uff0c\u5176\u4e2d n \u662f\u4e09\u89d2\u5f62\u7684\u884c\u6570\u3002\n        # \u6bcf\u4e2a\u8282\u70b9\u90fd\u4f1a\u88ab\u8bbf\u95ee\u5230\uff0c\u56e0\u6b64\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(nlogn)\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u5176\u4e2d n \u662f\u4e09\u89d2\u5f62\u7684\u884c\u6570\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\u4e3b\u8981\u53d6\u51b3\u4e8e\u8f85\u52a9\u7a7a\u95f4\uff0c\u5373 dp \u6570\u7ec4\uff0c\u5176\u5927\u5c0f\u4e3a\u4e09\u89d2\u5f62\u7684\u884c\u6570\uff0c\u56e0\u6b64\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a O(n)\u3002\n        # 7. \u52a8\u6001\u89c4\u5212 + \u6590\u6ce2\u90a3\u5951\u6570\u5217\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u5176\u4e2d n \u662f\u4e09\u89d2\u5f62\u7684\u884c\u6570\u3002\n        # \u6bcf\u4e2a\u8282\u70b9\u90fd\u4f1a\u88ab\u8bbf\u95ee\u5230\uff0c\u56e0\u6b64\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n)\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u5176\u4e2d n \u662f\u4e09\u89d2\u5f62\u7684\u884c\u6570\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\u4e3b\u8981\u53d6\u51b3\u4e8e\u8f85"}, {"task_id": "triangle", "completion": "class Solution(object):\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u9012\u5f52\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\uff0c\u5176\u4e2d n \u662f\u4e09\u89d2\u5f62\u7684\u884c\u6570\u3002\n        # \u6bcf\u4e2a\u8282\u70b9\u53ea\u4f1a\u88ab\u904d\u5386\u4e00\u6b21\uff0c\u56e0\u6b64\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n)\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u5176\u4e2d n \u662f\u4e09\u89d2\u5f62\u7684\u884c\u6570\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\u4e3b\u8981\u53d6\u51b3\u4e8e\u9012\u5f52\u8c03\u7528\u7684\u6808\u7a7a\u95f4\uff0c\u6700\u5dee\u60c5\u51b5\u4e0b\uff0c\u6808\u7a7a\u95f4\u9700\u8981\u6070\u597d\u4e3a\u4e09\u89d2\u5f62\u7684\u884c\u6570\uff0c\u5373 O(n)\u3002\n        # 1. \u9012\u5f52\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\uff0c\u5176\u4e2d n \u662f\u4e09\u89d2\u5f62\u7684\u884c\u6570\u3002\n        # \u6bcf\u4e2a\u8282\u70b9\u53ea\u4f1a\u88ab\u904d\u5386\u4e00\u6b21\uff0c\u56e0\u6b64\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n)\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u5176\u4e2d n \u662f\u4e09\u89d2\u5f62\u7684\u884c\u6570\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\u4e3b\u8981\u53d6\u51b3\u4e8e\u9012\u5f52\u8c03\u7528\u7684\u6808\u7a7a\u95f4\uff0c\u6700\u5dee\u60c5\u51b5\u4e0b\uff0c\u6808\u7a7a\u95f4\u9700\u8981\u6070\u597d\u4e3a\u4e09\u89d2\u5f62\u7684\u884c\u6570\uff0c\u5373 O(n)\u3002\n        # 1. \u9012\u5f52\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\uff0c\u5176\u4e2d n \u662f\u4e09\u89d2\u5f62\u7684\u884c\u6570\u3002\n        # \u6bcf\u4e2a\u8282\u70b9\u53ea\u4f1a\u88ab\u904d\u5386\u4e00\u6b21\uff0c\u56e0\u6b64\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n)\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u5176\u4e2d n \u662f\u4e09\u89d2\u5f62\u7684\u884c\u6570\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\u4e3b\u8981\u53d6\u51b3\u4e8e\u9012\u5f52\u8c03\u7528\u7684\u6808\u7a7a\u95f4\uff0c\u6700\u5dee\u60c5\u51b5\u4e0b\uff0c\u6808\u7a7a\u95f4\u9700\u8981\u6070\u597d\u4e3a\u4e09\u89d2\u5f62\u7684\u884c\u6570\uff0c\u5373 O(n)\u3002\n        # 1. \u9012\u5f52\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\uff0c\u5176\u4e2d n \u662f\u4e09\u89d2\u5f62\u7684\u884c\u6570\u3002\n        # \u6bcf\u4e2a\u8282\u70b9\u53ea\u4f1a\u88ab\u904d\u5386\u4e00\u6b21\uff0c\u56e0\u6b64\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n)\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u5176\u4e2d n \u662f\u4e09\u89d2\u5f62\u7684\u884c\u6570\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\u4e3b\u8981\u53d6\u51b3\u4e8e\u9012\u5f52\u8c03\u7528\u7684\u6808\u7a7a\u95f4\uff0c\u6700\u5dee\u60c5\u51b5\u4e0b\uff0c\u6808\u7a7a\u95f4\u9700\u8981\u6070\u597d\u4e3a\u4e09\u89d2\u5f62\u7684\u884c\u6570\uff0c\u5373 O(n)\u3002\n        # 1. \u9012\u5f52\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\uff0c\u5176\u4e2d n \u662f\u4e09\u89d2\u5f62\u7684\u884c\u6570\u3002\n        # \u6bcf\u4e2a\u8282\u70b9\u53ea\u4f1a\u88ab\u904d\u5386\u4e00\u6b21\uff0c\u56e0\u6b64\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n)\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u5176\u4e2d n \u662f\u4e09\u89d2\u5f62\u7684\u884c\u6570\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\u4e3b\u8981\u53d6\u51b3\u4e8e\u9012\u5f52\u8c03\u7528\u7684\u6808\u7a7a\u95f4\uff0c\u6700\u5dee\u60c5\u51b5\u4e0b\uff0c\u6808\u7a7a\u95f4\u9700\u8981\u6070\u597d\u4e3a\u4e09\u89d2\u5f62\u7684\u884c\u6570\uff0c\u5373 O(n)\u3002\n        # 1. \u9012\u5f52\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\uff0c\u5176\u4e2d n \u662f\u4e09\u89d2\u5f62\u7684\u884c\u6570\u3002\n        # \u6bcf\u4e2a\u8282\u70b9\u53ea\u4f1a\u88ab\u904d\u5386\u4e00\u6b21\uff0c\u56e0\u6b64\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n)\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u5176\u4e2d n \u662f\u4e09\u89d2\u5f62\u7684\u884c\u6570\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\u4e3b\u8981\u53d6\u51b3\u4e8e\u9012\u5f52\u8c03\u7528\u7684"}, {"task_id": "triangle", "completion": "class Solution(object):\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. initialize the first row\n        # 2. for each row, calculate the minimum value of the current row and the previous row\n        # 3. return the minimum value of the last row\n        \n        # initialize the first row\n        for i in range(1, len(triangle)):\n            triangle[i][0] += triangle[i-1][0]\n            triangle[i][-1] += triangle[i-1][-1]\n            \n        # for each row, calculate the minimum value of the current row and the previous row\n        for i in range(1, len(triangle)):\n            for j in range(1, len(triangle[i])):\n                triangle[i][j] += min(triangle[i-1][j-1], triangle[i-1][j])\n                \n        # return the minimum value of the last row\n        return min(triangle[-1])"}, {"task_id": "triangle", "completion": "class Solution(object):\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u9012\u5f52\n        # 2. \u52a8\u6001\u89c4\u5212\n        # 3. \u8d2a\u5fc3\n        # 4. \u4e8c\u5206\u67e5\u627e\n        # 5. \u6ed1\u52a8\u7a97\u53e3\n        # 6. \u5206\u6cbb\n        # 7. \u56de\u6eaf\n        # 8. \u5206\u6cbb\n        # 9. \u641c\u7d22\n        # 10. \u6a21\u62df\n        # 11. \u6392\u5e8f\n        # 12. \u8d2a\u5fc3\n        # 13. \u4e8c\u5206\u67e5\u627e\n        # 14. \u5206\u6cbb\n        # 15. \u9012\u5f52\n        # 16. \u8d2a\u5fc3\n        # 17. \u4e8c\u5206\u67e5\u627e\n        # 18. \u5206\u6cbb\n        # 19. \u641c\u7d22\n        # 20. \u6a21\u62df\n        # 21. \u6392\u5e8f\n        # 22. \u8d2a\u5fc3\n        # 23. \u4e8c\u5206\u67e5\u627e\n        # 24. \u5206\u6cbb\n        # 25. \u9012\u5f52\n        # 26. \u8d2a\u5fc3\n        # 27. \u4e8c\u5206\u67e5\u627e\n        # 28. \u5206\u6cbb\n        # 29. \u641c\u7d22\n        # 30. \u6a21\u62df\n        # 31. \u6392\u5e8f\n        # 32. \u8d2a\u5fc3\n        # 33. \u4e8c\u5206\u67e5\u627e\n        # 34. \u5206\u6cbb\n        # 35. \u9012\u5f52\n        # 36. \u8d2a\u5fc3\n        # 37. \u4e8c\u5206\u67e5\u627e\n        # 38. \u5206\u6cbb\n        # 39. \u641c\u7d22\n        # 40. \u6a21\u62df\n        # 41. \u6392\u5e8f\n        # 42. \u8d2a\u5fc3\n        # 43. \u4e8c\u5206\u67e5\u627e\n        # 44. \u5206\u6cbb\n        # 45. \u9012\u5f52\n        # 46. \u8d2a\u5fc3\n        # 47. \u4e8c\u5206\u67e5\u627e\n        # 48. \u5206\u6cbb\n        # 49. \u641c\u7d22\n        # 50. \u6a21\u62df\n        # 51. \u6392\u5e8f\n        # 52. \u8d2a\u5fc3\n        # 53. \u4e8c\u5206\u67e5\u627e\n        # 54. \u5206\u6cbb\n        # 55. \u9012\u5f52\n        # 56. \u8d2a\u5fc3\n        # 57. \u4e8c\u5206\u67e5\u627e\n        # 58. \u5206\u6cbb\n        # 59. \u641c\u7d22\n        # 60. \u6a21\u62df\n        # 61. \u6392\u5e8f\n        # 62. \u8d2a\u5fc3\n        # 63. \u4e8c\u5206\u67e5\u627e\n        # 64. \u5206\u6cbb\n        # 65. \u9012\u5f52\n        # 66. \u8d2a\u5fc3\n        # 67. \u4e8c\u5206\u67e5\u627e\n        # 68. \u5206\u6cbb\n        # 69. \u641c\u7d22\n        # 70. \u6a21\u62df\n        # 71. \u6392\u5e8f\n        # 72. \u8d2a\u5fc3\n        # 73. \u4e8c\u5206\u67e5\u627e\n        # 74. \u5206\u6cbb\n        # 75. \u9012\u5f52\n        # 76. \u8d2a\u5fc3\n        # 77. \u4e8c\u5206\u67e5\u627e\n        # 78. \u5206\u6cbb\n        # 79. \u641c\u7d22\n        # 80. \u6a21\u62df\n        # 81. \u6392\u5e8f\n        # 82. \u8d2a\u5fc3\n        # 83. \u4e8c\u5206\u67e5\u627e\n        # 84. \u5206\u6cbb\n        #"}], "integer-to-english-words": [{"task_id": "integer-to-english-words", "completion": "class Solution(object):\n    def numberToWords(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return 'Zero'\n        \n        words = []\n        nums = []\n        while num > 0:\n            nums.append(num % 1000)\n            num //= 1000\n        \n        for i in range(len(nums)):\n            if nums[i] == 0:\n                continue\n            elif nums[i] < 20:\n                words.append(self.numToWord(nums[i]))\n            elif nums[i] < 100:\n                words.append(self.numToWord(nums[i] // 10) + ' ' + self.numToWord(nums[i] % 10))\n            else:\n                words.append(self.numToWord(nums[i] // 100) + ' Hundred ' + self.numToWord(nums[i] % 100))\n        \n        return ' '.join(words)\n    \n    def numToWord(self, num):\n        if num == 0:\n            return ''\n        elif num < 20:\n            return self.numToWordDict[num]\n        elif num < 100:\n            return self.numToWordDict[num // 10] + ' ' + self.numToWordDict[num % 10]\n        else:\n            return self.numToWordDict[num // 100] + ' Hundred ' + self.numToWordDict[num % 100]\n        \n    def __init__(self):\n        self.numToWordDict = {\n            0: 'Zero',\n            1: 'One',\n            2: 'Two',\n            3: 'Three',\n            4: 'Four',\n            5: 'Five',\n            6: 'Six',\n            7: 'Seven',\n            8: 'Eight',\n            9: 'Nine',\n            10: 'Ten',\n            11: 'Eleven',\n            12: 'Twelve',\n            13: 'Thirteen',\n            14: 'Fourteen',\n            15: 'Fifteen',\n            16: 'Sixteen',\n            17: 'Seventeen',\n            18: 'Eighteen',\n            19: 'Nineteen',\n            20: 'Twenty',\n            30: 'Thirty',\n            40: 'Forty',\n            50: 'Fifty',\n            60: 'Sixty',\n            70: 'Seventy',\n            80: 'Eighty',\n            90: 'Ninety',\n            100: 'Hundred',\n            1000: 'Thousand',\n            1000000: 'Million',\n            1000000000: 'Billion',\n            1000000000000: 'Trillion',\n            1000000000000000: 'Quadrillion',\n            1000000000000000000: 'Quintillion',\n            1000000000000000000000: 'Sextillion',\n            1000000000000000000000000: 'Septillion',\n            1000000000000000000000000000: 'Octillion',\n            1000000000000000000000000000000: 'Nonillion',\n            1000000000000000000000000000000000: 'Decillion',\n            100000000000000000000000000000000000: 'Undecillion',\n            100000000000000000000000000000"}, {"task_id": "integer-to-english-words", "completion": "class Solution(object):\n    def numberToWords(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"Zero\"\n        \n        nums = [\n            \"Zero\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\",\n            \"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\",\n            \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"\n        ]\n        \n        nums_100 = [\n            \"\", \"Hundred\", \"Two Hundred\", \"Three Hundred\", \"Four Hundred\", \"Five Hundred\", \"Six Hundred\", \"Seven Hundred\", \"Eight Hundred\", \"Nine Hundred\"\n        ]\n        \n        nums_1000 = [\n            \"\", \"Thousand\", \"Million\", \"Billion\"\n        ]\n        \n        result = \"\"\n        for i in range(4):\n            if num % 1000 == 0:\n                result = nums[num // 1000] + \" \" + nums_1000[i] + \" \" + result\n                num = num // 1000\n            else:\n                if num % 100 != 0:\n                    result = nums[num % 100] + \" \" + nums_100[num % 100 // 10] + \" \" + nums_1000[i] + \" \" + result\n                    num = num // 100\n                else:\n                    result = nums[num % 1000] + \" \" + nums_1000[i] + \" \" + result\n                    num = num // 1000\n                    \n        return result.strip()"}, {"task_id": "integer-to-english-words", "completion": "class Solution(object):\n    def numberToWords(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"Zero\"\n        \n        words = []\n        nums = []\n        while num > 0:\n            nums.append(num % 1000)\n            num = num // 1000\n        \n        for i in range(len(nums)):\n            if nums[i] == 0:\n                continue\n            elif nums[i] < 20:\n                words.append(self.num_to_word(nums[i]))\n            elif nums[i] < 100:\n                words.append(self.num_to_word(nums[i] // 10) + \" \" + self.num_to_word(nums[i] % 10))\n            else:\n                words.append(self.num_to_word(nums[i] // 100) + \" Hundred \" + self.num_to_word(nums[i] % 100))\n        \n        return \" \".join(words)\n    \n    def num_to_word(self, num):\n        if num == 0:\n            return \"\"\n        elif num < 20:\n            return self.num_to_word_dict[num]\n        elif num < 100:\n            return self.num_to_word_dict[num // 10] + \" \" + self.num_to_word_dict[num % 10]\n        else:\n            return self.num_to_word_dict[num // 100] + \" Hundred \" + self.num_to_word_dict[num % 100]\n        \n    num_to_word_dict = {\n        0: \"Zero\",\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n        10: \"Ten\",\n        11: \"Eleven\",\n        12: \"Twelve\",\n        13: \"Thirteen\",\n        14: \"Fourteen\",\n        15: \"Fifteen\",\n        16: \"Sixteen\",\n        17: \"Seventeen\",\n        18: \"Eighteen\",\n        19: \"Nineteen\",\n        20: \"Twenty\",\n        30: \"Thirty\",\n        40: \"Forty\",\n        50: \"Fifty\",\n        60: \"Sixty\",\n        70: \"Seventy\",\n        80: \"Eighty\",\n        90: \"Ninety\",\n        100: \"Hundred\",\n        1000: \"Thousand\",\n        1000000: \"Million\",\n        1000000000: \"Billion\",\n        1000000000000: \"Trillion\",\n        1000000000000000: \"Quadrillion\",\n        1000000000000000000: \"Quintillion\",\n        1000000000000000000000: \"Sextillion\",\n        1000000000000000000000000: \"Septillion\",\n        1000000000000000000000000000: \"Octillion\",\n        1000000000000000000000000000000: \"Nonillion\",\n        1000000000000000000000000000000000: \"Decillion\",\n        100000000000000000000000000000000000: \"Undecillion\",\n        100000000"}, {"task_id": "integer-to-english-words", "completion": "class Solution(object):\n    def numberToWords(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"Zero\"\n        \n        nums = [\n            \"Zero\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\",\n            \"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\",\n            \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"\n        ]\n        \n        nums_100 = [\n            \"\", \"Hundred\", \"Two Hundred\", \"Three Hundred\", \"Four Hundred\", \"Five Hundred\", \"Six Hundred\", \"Seven Hundred\", \"Eight Hundred\", \"Nine Hundred\"\n        ]\n        \n        nums_1000 = [\n            \"\", \"Thousand\", \"Million\", \"Billion\"\n        ]\n        \n        res = \"\"\n        for i in range(4, -1, -1):\n            if num // (10 ** (i * 3)) > 0:\n                res += nums[num // (10 ** (i * 3))] + \" \" + nums_100[num // (10 ** (i * 3)) % 100] + \" \" + nums_1000[i] + \" \"\n                num %= 10 ** (i * 3)\n        \n        res = res.strip()\n        if res == \"\":\n            res = \"Zero\"\n        return res"}, {"task_id": "integer-to-english-words", "completion": "class Solution(object):\n    def numberToWords(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return 'Zero'\n        \n        nums = [\n            'Zero', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine',\n            'Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen', 'Seventeen', 'Eighteen', 'Nineteen',\n            'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'\n        ]\n        \n        nums_100 = [\n            'Zero', 'One Hundred', 'Two Hundred', 'Three Hundred', 'Four Hundred', 'Five Hundred', 'Six Hundred', 'Seven Hundred', 'Eight Hundred', 'Nine Hundred'\n        ]\n        \n        nums_1000 = [\n            'Zero', 'One Thousand', 'Two Thousand', 'Three Thousand', 'Four Thousand', 'Five Thousand', 'Six Thousand', 'Seven Thousand', 'Eight Thousand', 'Nine Thousand'\n        ]\n        \n        nums_1000000 = [\n            'Zero', 'One Million', 'Two Million', 'Three Million', 'Four Million', 'Five Million', 'Six Million', 'Seven Million', 'Eight Million', 'Nine Million'\n        ]\n        \n        nums_1000000000 = [\n            'Zero', 'One Billion', 'Two Billion', 'Three Billion', 'Four Billion', 'Five Billion', 'Six Billion', 'Seven Billion', 'Eight Billion', 'Nine Billion'\n        ]\n        \n        nums_1000000000000 = [\n            'Zero', 'One Trillion', 'Two Trillion', 'Three Trillion', 'Four Trillion', 'Five Trillion', 'Six Trillion', 'Seven Trillion', 'Eight Trillion', 'Nine Trillion'\n        ]\n        \n        nums_1000000000000000 = [\n            'Zero', 'One Quadrillion', 'Two Quadrillion', 'Three Quadrillion', 'Four Quadrillion', 'Five Quadrillion', 'Six Quadrillion', 'Seven Quadrillion', 'Eight Quadrillion', 'Nine Quadrillion'\n        ]\n        \n        nums_1000000000000000000 = [\n            'Zero', 'One Quintillion', 'Two Quintillion', 'Three Quintillion', 'Four Quintillion', 'Five Quintillion', 'Six Quintillion', 'Seven Quintillion', 'Eight Quintillion', 'Nine Quintillion'\n        ]\n        \n        nums_1000000000000000000000 = [\n            'Zero', 'One Sextillion', 'Two Sextillion', 'Three Sextillion', 'Four Sextillion', 'Five Sextillion', 'Six Sextillion', 'Seven Sextillion', 'Eight Sextillion', 'Nine Sextillion'\n        ]\n        \n        nums_100000000000000000000000 = [\n            'Zero', 'One Septillion', 'Two Septillion', 'Three Septillion', 'Four Septillion', 'Five Septillion', 'Six Septillion', 'Seven Septillion', 'Eight Septillion', 'Nine Septillion'\n        ]\n        \n        nums_10000000000000000000000000 = [\n            'Zero', 'One Octillion', 'Two Octillion', 'Three Octillion', 'Four Octillion', 'Five Octill"}], "k-inverse-pairs-array": [{"task_id": "k-inverse-pairs-array", "completion": "class Solution(object):\n    def kInversePairs(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # dp[i][j] = number of ways to get i pairs with j numbers\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2] + ... + dp[i-1][j-i+1]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2] + ... + dp[i-1][j-i+1]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2] + ... + dp[i-1][j-i+1]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2] + ... + dp[i-1][j-i+1]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2] + ... + dp[i-1][j-i+1]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2] + ... + dp[i-1][j-i+1]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2] + ... + dp[i-1][j-i+1]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2] + ... + dp[i-1][j-i+1]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2] + ... + dp[i-1][j-i+1]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2] + ... + dp[i-1][j-i+1]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2] + ... + dp[i-1][j-i+1]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2] + ... + dp[i-1][j-i+1]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2] + ... + dp[i-1][j-i+1]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2] + ... + dp[i-1][j-i+1]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2] + ... + dp[i-1][j-i+1]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2] + ... + dp[i-1][j-i+1]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2]"}, {"task_id": "k-inverse-pairs-array", "completion": "class Solution(object):\n    def kInversePairs(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # dp[i][j] = number of ways to get i pairs with j numbers\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2] + ... + dp[i-1][j-i+1]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2] + ... + dp[i-1][j-i+1]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2] + ... + dp[i-1][j-i+1]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2] + ... + dp[i-1][j-i+1]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2] + ... + dp[i-1][j-i+1]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2] + ... + dp[i-1][j-i+1]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2] + ... + dp[i-1][j-i+1]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2] + ... + dp[i-1][j-i+1]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2] + ... + dp[i-1][j-i+1]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2] + ... + dp[i-1][j-i+1]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2] + ... + dp[i-1][j-i+1]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2] + ... + dp[i-1][j-i+1]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2] + ... + dp[i-1][j-i+1]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2] + ... + dp[i-1][j-i+1]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2] + ... + dp[i-1][j-i+1]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2] + ... + dp[i-1][j-i+1]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2]"}, {"task_id": "k-inverse-pairs-array", "completion": "class Solution(object):\n    def kInversePairs(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # dp[i][j] = number of ways to get i pairs in the first j numbers\n        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j-2] + dp[i-1][j-3] + ... + dp[i-1][j-i]\n        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j-2] + dp[i-1][j-3] + ... + dp[i-1][j-i] + dp[i-1][j-i-1]\n        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j-2] + dp[i-1][j-3] + ... + dp[i-1][j-i] + dp[i-1][j-i-1] + dp[i-1][j-i-2]\n        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j-2] + dp[i-1][j-3] + ... + dp[i-1][j-i] + dp[i-1][j-i-1] + dp[i-1][j-i-2] + dp[i-1][j-i-3]\n        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j-2] + dp[i-1][j-3] + ... + dp[i-1][j-i] + dp[i-1][j-i-1] + dp[i-1][j-i-2] + dp[i-1][j-i-3] + dp[i-1][j-i-4]\n        # ...\n        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j-2] + dp[i-1][j-3] + ... + dp[i-1][j-i] + dp[i-1][j-i-1] + dp[i-1][j-i-2] + dp[i-1][j-i-3] + dp[i-1][j-i-4] + ... + dp[i-1][j-i-k]\n        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j-2] + dp[i-1][j-3] + ... + dp[i-1][j-i] + dp[i-1][j-i-1] + dp[i-1][j-i-2] + dp[i-1][j-i-3] + dp[i-1][j-i-4] + ... + dp[i-1][j-i-k] + dp[i-1][j-i-k-1]\n        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j-2] + dp[i-1][j-3] + ... + dp[i-1][j-i] + dp[i-1][j-i-1] + dp[i-1][j-i-2] + dp[i-1][j-i-3] + dp[i-1][j-i-4] + ... + dp[i-1][j-i-k] + dp[i-1][j-i-k-1] + dp[i-1][j-i-k-2]\n        # ...\n        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j-2] + dp[i-1][j-3] + ... + dp[i-1][j-i] + dp[i-1][j-i-1] + dp["}, {"task_id": "k-inverse-pairs-array", "completion": "class Solution(object):\n    def kInversePairs(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # dp[i][j] = number of ways to get i pairs in the first j numbers\n        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j-2] + dp[i-1][j-3] + ... + dp[i-1][j-i+1]\n        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j-2] + dp[i-1][j-3] + ... + dp[i-1][j-i+1] + dp[i-1][j-i]\n        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j-2] + dp[i-1][j-3] + ... + dp[i-1][j-i+1] + dp[i-1][j-i] + dp[i-1][j-i+1]\n        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j-2] + dp[i-1][j-3] + ... + dp[i-1][j-i+1] + dp[i-1][j-i] + dp[i-1][j-i+1] + dp[i-1][j-i+2]\n        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j-2] + dp[i-1][j-3] + ... + dp[i-1][j-i+1] + dp[i-1][j-i] + dp[i-1][j-i+1] + dp[i-1][j-i+2] + dp[i-1][j-i+3]\n        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j-2] + dp[i-1][j-3] + ... + dp[i-1][j-i+1] + dp[i-1][j-i] + dp[i-1][j-i+1] + dp[i-1][j-i+2] + dp[i-1][j-i+3] + ... + dp[i-1][j-i+k]\n        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j-2] + dp[i-1][j-3] + ... + dp[i-1][j-i+1] + dp[i-1][j-i] + dp[i-1][j-i+1] + dp[i-1][j-i+2] + dp[i-1][j-i+3] + ... + dp[i-1][j-i+k] + dp[i-1][j-i+k+1]\n        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j-2] + dp[i-1][j-3] + ... + dp[i-1][j-i+1] + dp[i-1][j-i] + dp[i-1][j-i+1] + dp[i-1][j-i+2] + dp[i-1][j-i+3] + ... + dp[i-1][j-i+k] + dp[i-1][j-i+k+1] + dp[i-1][j-i+k+2]\n        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j-2] + dp[i-1][j-3] + ... + dp[i-1][j-i+1] + dp[i-1][j-i] + dp[i-1][j-"}, {"task_id": "k-inverse-pairs-array", "completion": "class Solution(object):\n    def kInversePairs(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # dp[i][j] = number of ways to get i pairs in the first j numbers\n        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j-2] + dp[i-1][j-3] + ... + dp[i-1][j-i]\n        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j-2] + dp[i-1][j-3] + ... + dp[i-1][j-i] + dp[i-1][j-i-1]\n        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j-2] + dp[i-1][j-3] + ... + dp[i-1][j-i] + dp[i-1][j-i-1] + dp[i-1][j-i-2]\n        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j-2] + dp[i-1][j-3] + ... + dp[i-1][j-i] + dp[i-1][j-i-1] + dp[i-1][j-i-2] + dp[i-1][j-i-3]\n        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j-2] + dp[i-1][j-3] + ... + dp[i-1][j-i] + dp[i-1][j-i-1] + dp[i-1][j-i-2] + dp[i-1][j-i-3] + dp[i-1][j-i-4]\n        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j-2] + dp[i-1][j-3] + ... + dp[i-1][j-i] + dp[i-1][j-i-1] + dp[i-1][j-i-2] + dp[i-1][j-i-3] + dp[i-1][j-i-4] + dp[i-1][j-i-5]\n        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j-2] + dp[i-1][j-3] + ... + dp[i-1][j-i] + dp[i-1][j-i-1] + dp[i-1][j-i-2] + dp[i-1][j-i-3] + dp[i-1][j-i-4] + dp[i-1][j-i-5] + dp[i-1][j-i-6]\n        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j-2] + dp[i-1][j-3] + ... + dp[i-1][j-i] + dp[i-1][j-i-1] + dp[i-1][j-i-2] + dp[i-1][j-i-3] + dp[i-1][j-i-4] + dp[i-1][j-i-5] + dp[i-1][j-i-6] + dp[i-1][j-i-7]\n        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j-2] + dp[i-1][j-3] + ... + dp[i-1][j-i] + dp[i-1][j-i-1] + dp[i-1][j-i-2] + dp[i-1][j-"}], "swap-nodes-in-pairs": [{"task_id": "swap-nodes-in-pairs", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None or head.next is None:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        while prev.next and prev.next.next:\n            first = prev.next\n            second = first.next\n            first.next = second.next\n            second.next = first\n            prev.next = second\n            prev = first\n        return dummy.next"}, {"task_id": "swap-nodes-in-pairs", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None or head.next is None:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        while prev.next and prev.next.next:\n            node1 = prev.next\n            node2 = node1.next\n            node1.next = node2.next\n            node2.next = node1\n            prev.next = node2\n            prev = node1\n        return dummy.next"}, {"task_id": "swap-nodes-in-pairs", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None or head.next is None:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        while prev.next and prev.next.next:\n            first = prev.next\n            second = first.next\n            first.next = second.next\n            second.next = first\n            prev.next = second\n            prev = first\n        return dummy.next"}, {"task_id": "swap-nodes-in-pairs", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None or head.next is None:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        while prev.next and prev.next.next:\n            first = prev.next\n            second = first.next\n            first.next = second.next\n            second.next = first\n            prev.next = second\n            prev = first\n        return dummy.next"}, {"task_id": "swap-nodes-in-pairs", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None or head.next is None:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        while prev.next and prev.next.next:\n            node1 = prev.next\n            node2 = node1.next\n            prev.next = node2\n            node1.next = node2.next\n            node2.next = node1\n            prev = node1\n        return dummy.next"}], "path-sum": [{"task_id": "path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def hasPathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: bool\n        \"\"\"\n        \n        if not root:\n            return False\n        \n        if not root.left and not root.right:\n            return root.val == targetSum\n        \n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)"}, {"task_id": "path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def hasPathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: bool\n        \"\"\"\n        \n        if not root:\n            return False\n        \n        if not root.left and not root.right:\n            return root.val == targetSum\n        \n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)"}, {"task_id": "path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def hasPathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: bool\n        \"\"\"\n        \n        if not root:\n            return False\n        \n        if not root.left and not root.right:\n            return root.val == targetSum\n        \n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)"}, {"task_id": "path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def hasPathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: bool\n        \"\"\"\n        \n        if not root:\n            return False\n        \n        if not root.left and not root.right:\n            return root.val == targetSum\n        \n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)"}, {"task_id": "path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def hasPathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: bool\n        \"\"\"\n        \n        if not root:\n            return False\n        \n        if not root.left and not root.right:\n            return root.val == targetSum\n        \n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)"}], "partition-list": [{"task_id": "partition-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def partition(self, head, x):\n        \"\"\"\n        :type head: ListNode\n        :type x: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # 1. Create two dummy nodes\n        dummy1 = ListNode(0)\n        dummy2 = ListNode(0)\n        \n        # 2. Create two pointers\n        prev1 = dummy1\n        prev2 = dummy2\n        \n        # 3. Iterate through the list\n        while head:\n            \n            # 4. If the current node is less than x, move it to the first list\n            if head.val < x:\n                prev1.next = head\n                prev1 = prev1.next\n                \n            # 5. If the current node is greater than or equal to x, move it to the second list\n            else:\n                prev2.next = head\n                prev2 = prev2.next\n                \n            # 6. Move to the next node\n            head = head.next\n        \n        # 7. Connect the two lists\n        prev1.next = dummy2.next\n        prev2.next = None\n        \n        # 8. Return the head of the first list\n        return dummy1.next"}, {"task_id": "partition-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def partition(self, head, x):\n        \"\"\"\n        :type head: ListNode\n        :type x: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # 1. Create two dummy nodes\n        dummy1 = ListNode(0)\n        dummy2 = ListNode(0)\n        \n        # 2. Create two pointers\n        prev1 = dummy1\n        prev2 = dummy2\n        \n        # 3. Iterate through the list\n        while head:\n            \n            # 4. If the current node is less than x, then add it to the first list\n            if head.val < x:\n                prev1.next = head\n                prev1 = prev1.next\n                \n            # 5. If the current node is greater than or equal to x, then add it to the second list\n            else:\n                prev2.next = head\n                prev2 = prev2.next\n                \n            # 6. Move to the next node\n            head = head.next\n        \n        # 7. Connect the two lists\n        prev1.next = dummy2.next\n        prev2.next = None\n        \n        # 8. Return the head of the first list\n        return dummy1.next"}, {"task_id": "partition-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def partition(self, head, x):\n        \"\"\"\n        :type head: ListNode\n        :type x: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # 1. Create two dummy nodes\n        dummy1 = ListNode(0)\n        dummy2 = ListNode(0)\n        dummy1.next = head\n        dummy2.next = head\n        \n        # 2. Move the nodes less than x to the first dummy node\n        # 3. Move the nodes greater than or equal to x to the second dummy node\n        # 4. Connect the two dummy nodes\n        while dummy1.next:\n            if dummy1.next.val < x:\n                dummy1 = dummy1.next\n            else:\n                dummy2 = dummy2.next\n                dummy1 = dummy1.next\n                dummy2.next = dummy1.next\n                dummy1.next = dummy2.next\n        dummy2.next = None\n        return dummy1.next"}, {"task_id": "partition-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def partition(self, head, x):\n        \"\"\"\n        :type head: ListNode\n        :type x: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # 1. Create two dummy nodes\n        dummy1 = ListNode(0)\n        dummy2 = ListNode(0)\n        \n        # 2. Create two pointers\n        prev1 = dummy1\n        prev2 = dummy2\n        \n        # 3. Iterate through the list\n        while head:\n            \n            # 4. If the current node is less than x, then add it to the first list\n            if head.val < x:\n                prev1.next = head\n                prev1 = prev1.next\n                \n            # 5. If the current node is greater than or equal to x, then add it to the second list\n            else:\n                prev2.next = head\n                prev2 = prev2.next\n            \n            # 6. Move to the next node\n            head = head.next\n        \n        # 7. Connect the two lists\n        prev1.next = dummy2.next\n        prev2.next = None\n        \n        # 8. Return the head of the first list\n        return dummy1.next"}, {"task_id": "partition-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def partition(self, head, x):\n        \"\"\"\n        :type head: ListNode\n        :type x: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # 1. Create two dummy nodes\n        dummy_head = ListNode(0)\n        dummy_tail = ListNode(0)\n        dummy_head.next = head\n        dummy_tail.next = head\n        \n        # 2. Iterate through the list and move the nodes less than x to the left\n        #    and the nodes greater than or equal to x to the right\n        prev = dummy_head\n        while prev.next:\n            if prev.next.val < x:\n                # Move the node to the left\n                curr = prev.next\n                prev.next = curr.next\n                curr.next = dummy_tail.next\n                dummy_tail.next = curr\n            else:\n                # Move the node to the right\n                prev = prev.next\n        \n        # 3. Return the head of the right list\n        return dummy_head.next"}], "redundant-connection-ii": [{"task_id": "redundant-connection-ii", "completion": "class Solution(object):\n    def findRedundantDirectedConnection(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. Create a graph\n        # 2. Find the cycle\n        # 3. Return the last edge in the cycle\n        \n        # 1. Create a graph\n        graph = collections.defaultdict(list)\n        for u, v in edges:\n            graph[u].append(v)\n            \n        # 2. Find the cycle\n        cycle = []\n        for u, v in edges:\n            if u in cycle:\n                cycle.append(v)\n                break\n            if v in cycle:\n                cycle.append(u)\n                break\n            if u not in graph:\n                continue\n            if v not in graph:\n                continue\n            if v in graph[u]:\n                cycle.append(u)\n                cycle.append(v)\n                break\n            stack = [u]\n            while stack:\n                node = stack.pop()\n                if node == v:\n                    cycle.append(u)\n                    cycle.append(v)\n                    break\n                for nei in graph[node]:\n                    if nei not in cycle:\n                        stack.append(nei)\n                        \n        # 3. Return the last edge in the cycle\n        return cycle[-2:]"}, {"task_id": "redundant-connection-ii", "completion": "class Solution(object):\n    def findRedundantDirectedConnection(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. Create a graph\n        # 2. Find the cycle\n        # 3. Return the last edge in the cycle\n        \n        # 1. Create a graph\n        graph = collections.defaultdict(list)\n        for u, v in edges:\n            graph[u].append(v)\n        \n        # 2. Find the cycle\n        # 2.1. Create a visited array\n        # 2.2. Create a parent array\n        # 2.3. Create a stack\n        # 2.4. Start from node 1\n        # 2.5. If the node is visited, pop the stack until the node is not visited\n        # 2.6. If the node is not visited, mark it as visited and push it to the stack\n        # 2.7. If the node is visited, mark it as visited and push it to the stack\n        # 2.8. If the node is not visited, pop the stack until the node is not visited\n        # 2.9. If the node is visited, mark it as visited and push it to the stack\n        # 2.10. If the node is not visited, mark it as visited and push it to the stack\n        # 2.11. If the node is visited, mark it as visited and push it to the stack\n        # 2.12. If the node is not visited, pop the stack until the node is not visited\n        # 2.13. If the node is visited, mark it as visited and push it to the stack\n        # 2.14. If the node is not visited, pop the stack until the node is not visited\n        # 2.15. If the node is visited, mark it as visited and push it to the stack\n        # 2.16. If the node is not visited, pop the stack until the node is not visited\n        # 2.17. If the node is visited, mark it as visited and push it to the stack\n        # 2.18. If the node is not visited, pop the stack until the node is not visited\n        # 2.19. If the node is visited, mark it as visited and push it to the stack\n        # 2.20. If the node is not visited, pop the stack until the node is not visited\n        # 2.21. If the node is visited, mark it as visited and push it to the stack\n        # 2.22. If the node is not visited, pop the stack until the node is not visited\n        # 2.23. If the node is visited, mark it as visited and push it to the stack\n        # 2.24. If the node is not visited, pop the stack until the node is not visited\n        # 2.25. If the node is visited, mark it as visited and push it to the stack\n        # 2.26. If the node is not visited, pop the stack until the node is not visited\n        # 2.27. If the node is visited, mark it as visited and push it to the stack\n        # 2.28. If the node is not visited, pop the stack until the node is not visited\n        # 2.29. If the node is visited, mark it as visited and push it to the stack\n        # 2.30. If the node is not visited, pop the stack until the node is not visited\n        # 2.31. If the node is visited, mark it as visited and push it to the stack\n        # 2.32. If the node is not visited, pop the stack until the node is not visited\n        # 2.33. If the node is visited, mark it as visited and push it to the stack\n        # 2.34. If the node is not visited, pop the stack until the node is not visited\n        # 2.35. If the node is visited, mark it as visited and push it to the stack\n        # 2.36. If the node is not visited, pop the stack until the node is not visited\n        # 2.37. If the node is visited, mark it as visited and push it to the stack\n        # 2.38. If the node is not visited, pop the stack until the node is not visited\n        # 2.39. If the node is visited, mark it as visited and push it to the stack\n        # 2.40. If the node is not visited, pop the stack until the node is"}, {"task_id": "redundant-connection-ii", "completion": "class Solution(object):\n    def findRedundantDirectedConnection(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. Create a graph\n        # 2. Find the cycle\n        # 3. Return the last edge in the cycle\n        \n        # 1. Create a graph\n        graph = collections.defaultdict(list)\n        for u, v in edges:\n            graph[u].append(v)\n        \n        # 2. Find the cycle\n        cycle = []\n        for u in range(1, len(graph)+1):\n            if u not in graph:\n                continue\n            if u in cycle:\n                continue\n            cycle = self.findCycle(graph, u, [])\n            if cycle:\n                break\n        \n        # 3. Return the last edge in the cycle\n        return cycle[-1]\n        \n    def findCycle(self, graph, u, path):\n        path.append(u)\n        for v in graph[u]:\n            if v in path:\n                return path + [v]\n            cycle = self.findCycle(graph, v, path)\n            if cycle:\n                return cycle\n        path.pop()\n        return None"}, {"task_id": "redundant-connection-ii", "completion": "class Solution(object):\n    def findRedundantDirectedConnection(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. Create a graph\n        # 2. Find the cycle in the graph\n        # 3. Return the last edge in the cycle\n        \n        # 1. Create a graph\n        graph = collections.defaultdict(list)\n        for u, v in edges:\n            graph[u].append(v)\n        \n        # 2. Find the cycle in the graph\n        cycle = []\n        for u, v in edges:\n            if u in cycle:\n                cycle.append(v)\n                break\n            if v in cycle:\n                cycle.append(u)\n                break\n            if u not in graph:\n                continue\n            if v not in graph:\n                continue\n            if v in graph[u]:\n                cycle.append(u)\n                cycle.append(v)\n                break\n            stack = [u]\n            while stack:\n                node = stack.pop()\n                if node == v:\n                    cycle.append(u)\n                    cycle.append(v)\n                    break\n                for nei in graph[node]:\n                    if nei not in cycle:\n                        stack.append(nei)\n        \n        # 3. Return the last edge in the cycle\n        return cycle[-2:]"}, {"task_id": "redundant-connection-ii", "completion": "class Solution(object):\n    def findRedundantDirectedConnection(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. Create a graph from the edges\n        # 2. Find the cycle in the graph\n        # 3. Return the last edge in the cycle\n        \n        # 1. Create a graph from the edges\n        graph = collections.defaultdict(list)\n        for u, v in edges:\n            graph[u].append(v)\n        \n        # 2. Find the cycle in the graph\n        cycle = []\n        for u in range(1, len(graph)+1):\n            if u in graph:\n                cycle = self.findCycle(graph, u)\n                if cycle:\n                    break\n        \n        # 3. Return the last edge in the cycle\n        return cycle[-1]\n        \n        \n    def findCycle(self, graph, u):\n        \"\"\"\n        :type graph: collections.defaultdict\n        :type u: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. Create a visited set\n        visited = set()\n        \n        # 2. Create a stack\n        stack = []\n        \n        # 3. Push the first node\n        stack.append(u)\n        \n        # 4. While the stack is not empty\n        while stack:\n            \n            # 5. Pop the top node\n            u = stack.pop()\n            \n            # 6. If the node is visited, continue\n            if u in visited:\n                continue\n            \n            # 7. Add the node to the visited set\n            visited.add(u)\n            \n            # 8. For each child of the node\n            for v in graph[u]:\n                \n                # 9. If the child is not visited, push it to the stack\n                if v not in visited:\n                    stack.append(v)\n                \n                # 10. If the child is visited, check if it is the same as the top of the stack\n                elif v == stack[-1]:\n                    return stack + [v]\n                \n        # 11. Return None\n        return None"}], "permutations-ii": [{"task_id": "permutations-ii", "completion": "class Solution(object):\n    def permuteUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u5148\u6392\u5e8f\n        nums.sort()\n        \n        # 2. \u9012\u5f52\n        res = []\n        self.dfs(nums, [], res)\n        return res\n    \n    def dfs(self, nums, path, res):\n        if len(nums) == 0:\n            res.append(path)\n            return\n        \n        # 3. \u904d\u5386\n        for i in range(len(nums)):\n            # 4. \u53bb\u91cd\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            self.dfs(nums[:i] + nums[i+1:], path + [nums[i]], res)"}, {"task_id": "permutations-ii", "completion": "class Solution(object):\n    def permuteUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. sort the list\n        nums.sort()\n        \n        # 2. create a list to store the result\n        result = []\n        \n        # 3. create a list to store the visited numbers\n        visited = [False] * len(nums)\n        \n        # 4. create a list to store the current permutation\n        current = []\n        \n        # 5. call the recursive function\n        self.permuteUniqueHelper(nums, visited, current, result)\n        \n        # 6. return the result\n        return result\n    \n    def permuteUniqueHelper(self, nums, visited, current, result):\n        \n        # 1. if the current permutation is the same as the last one, return\n        if current in result:\n            return\n        \n        # 2. if the current permutation is the last one, add it to the result and return\n        if len(current) == len(nums):\n            result.append(current[:])\n            return\n        \n        # 3. loop through the list\n        for i in range(len(nums)):\n            \n            # 4. if the number is visited, continue\n            if visited[i]:\n                continue\n            \n            # 5. add the number to the current permutation\n            current.append(nums[i])\n            \n            # 6. mark the number as visited\n            visited[i] = True\n            \n            # 7. call the recursive function\n            self.permuteUniqueHelper(nums, visited, current, result)\n            \n            # 8. remove the number from the current permutation\n            current.pop()\n            \n            # 9. mark the number as unvisited\n            visited[i] = False\n```\n\n### 2. Permutations II\n\nGiven a collection of numbers that might contain duplicates, return all possible unique permutations.\n\nExample:\n\n```\nInput: [1,1,2]\nOutput:\n[\n  [1,1,2],\n  [1,2,1],\n  [2,1,1]\n]\n```\n\n```python\nclass Solution(object):\n    def permuteUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. sort the list\n        nums.sort()\n        \n        # 2. create a list to store the result\n        result = []\n        \n        # 3. create a list to store the visited numbers\n        visited = [False] * len(nums)\n        \n        # 4. create a list to store the current permutation\n        current = []\n        \n        # 5. call the recursive function\n        self.permuteUniqueHelper(nums, visited, current, result)\n        \n        # 6. return the result\n        return result\n    \n    def permuteUniqueHelper(self, nums, visited, current, result):\n        \n        # 1. if the current permutation is the same as the last one, return\n        if current in result:\n            return\n        \n        # 2. if the current permutation is the last one, add it to the result and return\n        if len(current) == len(nums):\n            result.append(current[:])\n            return\n        \n        # 3. loop through the list\n        for i in range(len(nums)):\n            \n            # 4. if the number is visited, continue\n            if visited[i]:\n                continue\n            \n            # 5. add the number to the current permutation\n            current.append(nums[i])\n            \n            # 6. mark the number as visited\n            visited[i] = True\n            \n            # 7. call the recursive function\n            self.permuteUniqueHelper(nums, visited, current, result)\n            \n            # 8. remove the number from the current permutation\n            current.pop()\n            \n            # 9. mark the number as unvisited\n            visited[i] = False\n```\n\n### 3. Combination Sum\n\nGiven a set of candidate numbers (candidates) (without duplicates) and a target number (target), find all unique combinations in candidates\u00a0where the candidate numbers sums to target.\n\nThe same repeated number may be chosen from candidates"}, {"task_id": "permutations-ii", "completion": "class Solution(object):\n    def permuteUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u5148\u6392\u5e8f\n        nums.sort()\n        \n        # 2. \u9012\u5f52\n        res = []\n        self.dfs(nums, [], res)\n        return res\n    \n    def dfs(self, nums, path, res):\n        if len(nums) == 0:\n            res.append(path)\n            return\n        \n        for i in range(len(nums)):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            self.dfs(nums[:i] + nums[i+1:], path + [nums[i]], res)"}, {"task_id": "permutations-ii", "completion": "class Solution(object):\n    def permuteUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u5148\u6392\u5e8f\n        nums.sort()\n        \n        # 2. \u9012\u5f52\n        res = []\n        self.dfs(nums, [], res)\n        return res\n    \n    def dfs(self, nums, path, res):\n        if len(nums) == 0:\n            res.append(path)\n            return\n        \n        # 3. \u904d\u5386\n        for i in range(len(nums)):\n            # 4. \u53bb\u91cd\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            self.dfs(nums[:i] + nums[i+1:], path + [nums[i]], res)"}, {"task_id": "permutations-ii", "completion": "class Solution(object):\n    def permuteUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u5148\u6392\u5e8f\n        nums.sort()\n        \n        # 2. \u9012\u5f52\n        res = []\n        self.dfs(nums, [], res)\n        return res\n    \n    def dfs(self, nums, path, res):\n        if len(nums) == 0:\n            res.append(path)\n            return\n        \n        for i in range(len(nums)):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            self.dfs(nums[:i] + nums[i+1:], path + [nums[i]], res)"}], "add-digits": [{"task_id": "add-digits", "completion": "class Solution(object):\n    def addDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        if num == 0:\n            return 0\n        else:\n            return num % 9 + 1 if num % 9 != 0 else 9"}, {"task_id": "add-digits", "completion": "class Solution(object):\n    def addDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6734\u7d20\u7684\u505a\u6cd5\n        # 2. \u5faa\u73af\n        # 3. \u9012\u5f52\n        # 4. \u4f4d\u8fd0\u7b97\n        # 5. \u6570\u5b66\n        # 6. \u54c8\u5e0c\u8868\n        # 7. \u6808\n        # 8. \u961f\u5217\n        # 9. \u4e8c\u53c9\u6811\n        # 10. \u56fe\n        # 11. \u5e76\u67e5\u96c6\n        # 12. \u8d2a\u5fc3\n        # 13. \u5206\u6cbb\n        # 14. \u52a8\u6001\u89c4\u5212\n        # 15. \u56de\u6eaf\n        # 16. \u6781\u5c0f\u5316\u6781\u5927\n        # 17. \u62d3\u6251\u6392\u5e8f\n        # 18. \u8d2a\u5fc3 + \u5206\u6cbb\n        # 19. \u4e8c\u5206\u67e5\u627e\n        # 20. \u5206\u6cbb + \u8d2a\u5fc3\n        # 21. \u6392\u5e8f + \u4e8c\u5206\u67e5\u627e\n        # 22. \u6811\u72b6\u6570\u7ec4\n        # 23. \u7ebf\u6bb5\u6811\n        # 24. \u524d\u7f00\u548c\n        # 25. \u6a21\u62df\n        # 26. \u9012\u5f52\n        # 27. \u6808\n        # 28. \u54c8\u5e0c\u8868\n        # 29. \u4e8c\u5206\u67e5\u627e\u6811\n        # 30. \u9012\u5f52\n        # 31. \u8d2a\u5fc3 + \u5206\u6cbb\n        # 32. \u6392\u5e8f + \u4e8c\u5206\u67e5\u627e\n        # 33. \u7ebf\u6bb5\u6811\n        # 34. \u524d\u7f00\u548c\n        # 35. \u6a21\u62df\n        # 36. \u9012\u5f52\n        # 37. \u6808\n        # 38. \u54c8\u5e0c\u8868\n        # 39. \u4e8c\u5206\u67e5\u627e\u6811\n        # 40. \u9012\u5f52\n        # 41. \u8d2a\u5fc3 + \u5206\u6cbb\n        # 42. \u6392\u5e8f + \u4e8c\u5206\u67e5\u627e\n        # 43. \u7ebf\u6bb5\u6811\n        # 44. \u524d\u7f00\u548c\n        # 45. \u6a21\u62df\n        # 46. \u9012\u5f52\n        # 47. \u6808\n        # 48. \u54c8\u5e0c\u8868\n        # 49. \u4e8c\u5206\u67e5\u627e\u6811\n        # 50. \u9012\u5f52\n        # 51. \u8d2a\u5fc3 + \u5206\u6cbb\n        # 52. \u6392\u5e8f + \u4e8c\u5206\u67e5\u627e\n        # 53. \u7ebf\u6bb5\u6811\n        # 54. \u524d\u7f00\u548c\n        # 55. \u6a21\u62df\n        # 56. \u9012\u5f52\n        # 57. \u6808\n        # 58. \u54c8\u5e0c\u8868\n        # 59. \u4e8c\u5206\u67e5\u627e\u6811\n        # 60. \u9012\u5f52\n        # 61. \u8d2a\u5fc3 + \u5206\u6cbb\n        # 62. \u6392\u5e8f + \u4e8c\u5206\u67e5\u627e\n        # 63. \u7ebf\u6bb5\u6811\n        # 64. \u524d\u7f00\u548c\n        # 65. \u6a21\u62df\n        # 66. \u9012\u5f52\n        # 67. \u6808\n        # 68. \u54c8\u5e0c\u8868\n        # 69. \u4e8c\u5206\u67e5\u627e\u6811\n        # 70. \u9012\u5f52\n        # 71. \u8d2a\u5fc3 + \u5206\u6cbb\n        # 72. \u6392\u5e8f + \u4e8c\u5206\u67e5\u627e\n        # 73. \u7ebf\u6bb5\u6811\n        #"}, {"task_id": "add-digits", "completion": "class Solution(object):\n    def addDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6734\u7d20\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(logN)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6734\u7d20\u89e3\u6cd5\u5c31\u662f\u7b80\u5355\u7684\u5c06\u6570\u5b57\u7684\u6bcf\u4e00\u4f4d\u76f8\u52a0\uff0c\u76f4\u5230\u53ea\u5269\u4e0b\u4e00\u4f4d\u4e3a\u6b62\u3002\n        # \u8fd9\u79cd\u89e3\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(logN)\uff0c\u56e0\u4e3a\u6bcf\u6b21\u76f8\u52a0\u90fd\u4f1a\u51cf\u5c11\u4e00\u4f4d\uff0c\u76f4\u5230\u53ea\u5269\u4e0b\u4e00\u4f4d\u4e3a\u6b62\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(1)\uff0c\u56e0\u4e3a\u53ea\u9700\u8981\u4e00\u4e2a\u53d8\u91cf\u6765\u5b58\u50a8\u7ed3\u679c\u3002\n        # \n        # 2. \u6570\u5b66\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6570\u5b66\u89e3\u6cd5\u662f\u5c06\u6570\u5b57\u7684\u6bcf\u4e00\u4f4d\u76f8\u52a0\uff0c\u7136\u540e\u518d\u9664\u4ee510\uff0c\u76f4\u5230\u7ed3\u679c\u53ea\u5269\u4e0b\u4e00\u4f4d\u4e3a\u6b62\u3002\n        # \u8fd9\u79cd\u89e3\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(1)\uff0c\u56e0\u4e3a\u6bcf\u6b21\u76f8\u52a0\u90fd\u4f1a\u51cf\u5c11\u4e00\u4f4d\uff0c\u76f4\u5230\u53ea\u5269\u4e0b\u4e00\u4f4d\u4e3a\u6b62\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(1)\uff0c\u56e0\u4e3a\u53ea\u9700\u8981\u4e00\u4e2a\u53d8\u91cf\u6765\u5b58\u50a8\u7ed3\u679c\u3002\n        # \n        # 3. \u4f4d\u8fd0\u7b97\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u4f4d\u8fd0\u7b97\u89e3\u6cd5\u662f\u5c06\u6570\u5b57\u7684\u6bcf\u4e00\u4f4d\u76f8\u52a0\uff0c\u7136\u540e\u518d\u9664\u4ee510\uff0c\u76f4\u5230\u7ed3\u679c\u53ea\u5269\u4e0b\u4e00\u4f4d\u4e3a\u6b62\u3002\n        # \u8fd9\u79cd\u89e3\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(1)\uff0c\u56e0\u4e3a\u6bcf\u6b21\u76f8\u52a0\u90fd\u4f1a\u51cf\u5c11\u4e00\u4f4d\uff0c\u76f4\u5230\u53ea\u5269\u4e0b\u4e00\u4f4d\u4e3a\u6b62\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(1)\uff0c\u56e0\u4e3a\u53ea\u9700\u8981\u4e00\u4e2a\u53d8\u91cf\u6765\u5b58\u50a8\u7ed3\u679c\u3002\n        # \n        # 4. \u5faa\u73af\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(logN)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u5faa\u73af\u89e3\u6cd5\u5c31\u662f\u7b80\u5355\u7684\u5c06\u6570\u5b57\u7684\u6bcf\u4e00\u4f4d\u76f8\u52a0\uff0c\u76f4\u5230\u53ea\u5269\u4e0b\u4e00\u4f4d\u4e3a\u6b62\u3002\n        # \u8fd9\u79cd\u89e3\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(logN)\uff0c\u56e0\u4e3a\u6bcf\u6b21\u76f8\u52a0\u90fd\u4f1a\u51cf\u5c11\u4e00\u4f4d\uff0c\u76f4\u5230\u53ea\u5269\u4e0b\u4e00\u4f4d\u4e3a\u6b62\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(1)\uff0c\u56e0\u4e3a\u53ea\u9700\u8981\u4e00\u4e2a\u53d8\u91cf\u6765\u5b58\u50a8\u7ed3\u679c\u3002\n        # \n        # 5. \u9012\u5f52\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(logN)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(logN)\n        # \u9012\u5f52\u89e3\u6cd5\u5c31\u662f\u7b80\u5355\u7684\u5c06\u6570\u5b57\u7684\u6bcf\u4e00\u4f4d\u76f8\u52a0\uff0c\u76f4\u5230\u53ea\u5269\u4e0b\u4e00\u4f4d\u4e3a\u6b62\u3002\n        # \u8fd9\u79cd\u89e3\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(logN)\uff0c\u56e0\u4e3a\u6bcf\u6b21\u76f8\u52a0\u90fd\u4f1a\u51cf\u5c11\u4e00\u4f4d\uff0c\u76f4\u5230\u53ea\u5269\u4e0b\u4e00\u4f4d\u4e3a\u6b62\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(logN)\uff0c\u56e0\u4e3a\u6bcf\u6b21\u9012\u5f52\u90fd\u4f1a\u589e\u52a0\u4e00\u5c42\uff0c\u76f4\u5230\u53ea\u5269\u4e0b\u4e00\u5c42\u4e3a\u6b62\u3002\n        # \n        # 6. \u6570\u5b66\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6570\u5b66\u89e3\u6cd5\u662f\u5c06\u6570\u5b57\u7684\u6bcf\u4e00\u4f4d\u76f8\u52a0\uff0c\u7136\u540e\u518d\u9664\u4ee510\uff0c\u76f4\u5230\u7ed3\u679c\u53ea\u5269\u4e0b\u4e00\u4f4d\u4e3a\u6b62\u3002\n        # \u8fd9\u79cd\u89e3\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(1)\uff0c\u56e0\u4e3a\u6bcf\u6b21\u76f8\u52a0\u90fd\u4f1a\u51cf\u5c11\u4e00\u4f4d\uff0c\u76f4\u5230\u53ea\u5269\u4e0b\u4e00\u4f4d\u4e3a\u6b62\u3002"}, {"task_id": "add-digits", "completion": "class Solution(object):\n    def addDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        if num == 0:\n            return 0\n        else:\n            return num % 9 + 1 if num % 9 else 9"}, {"task_id": "add-digits", "completion": "class Solution(object):\n    def addDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6734\u7d20\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(logN)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6734\u7d20\u89e3\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(logN)\uff0c\u56e0\u4e3a\u6bcf\u6b21\u5faa\u73af\u90fd\u4f1a\u5c06num\u7684\u503c\u9664\u4ee510\uff0c\u76f4\u5230num\u7684\u503c\u4e3a1\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\uff0c\u56e0\u4e3a\u4e0d\u9700\u8981\u989d\u5916\u7684\u7a7a\u95f4\u3002\n        # \n        # 2. \u6570\u5b66\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6570\u5b66\u89e3\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\uff0c\u56e0\u4e3a\u6bcf\u6b21\u5faa\u73af\u90fd\u4f1a\u5c06num\u7684\u503c\u9664\u4ee510\uff0c\u76f4\u5230num\u7684\u503c\u4e3a1\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\uff0c\u56e0\u4e3a\u4e0d\u9700\u8981\u989d\u5916\u7684\u7a7a\u95f4\u3002\n        # \n        # 3. \u4f4d\u8fd0\u7b97\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u4f4d\u8fd0\u7b97\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\uff0c\u56e0\u4e3a\u6bcf\u6b21\u5faa\u73af\u90fd\u4f1a\u5c06num\u7684\u503c\u9664\u4ee510\uff0c\u76f4\u5230num\u7684\u503c\u4e3a1\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\uff0c\u56e0\u4e3a\u4e0d\u9700\u8981\u989d\u5916\u7684\u7a7a\u95f4\u3002\n        # \n        # 4. \u6570\u5b66\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6570\u5b66\u89e3\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\uff0c\u56e0\u4e3a\u6bcf\u6b21\u5faa\u73af\u90fd\u4f1a\u5c06num\u7684\u503c\u9664\u4ee510\uff0c\u76f4\u5230num\u7684\u503c\u4e3a1\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\uff0c\u56e0\u4e3a\u4e0d\u9700\u8981\u989d\u5916\u7684\u7a7a\u95f4\u3002\n        # \n        # 5. \u4f4d\u8fd0\u7b97\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u4f4d\u8fd0\u7b97\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\uff0c\u56e0\u4e3a\u6bcf\u6b21\u5faa\u73af\u90fd\u4f1a\u5c06num\u7684\u503c\u9664\u4ee510\uff0c\u76f4\u5230num\u7684\u503c\u4e3a1\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\uff0c\u56e0\u4e3a\u4e0d\u9700\u8981\u989d\u5916\u7684\u7a7a\u95f4\u3002\n        # \n        # 6. \u6570\u5b66\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6570\u5b66\u89e3\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\uff0c\u56e0\u4e3a\u6bcf\u6b21\u5faa\u73af\u90fd\u4f1a\u5c06num\u7684\u503c\u9664\u4ee510\uff0c\u76f4\u5230num\u7684\u503c\u4e3a1\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\uff0c\u56e0\u4e3a\u4e0d\u9700\u8981\u989d\u5916\u7684\u7a7a\u95f4\u3002\n        # \n        # 7. \u4f4d\u8fd0\u7b97\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u4f4d\u8fd0\u7b97\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\uff0c\u56e0\u4e3a\u6bcf\u6b21\u5faa\u73af\u90fd\u4f1a\u5c06num\u7684\u503c\u9664\u4ee510\uff0c\u76f4\u5230num\u7684\u503c\u4e3a1\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\uff0c\u56e0\u4e3a\u4e0d\u9700\u8981\u989d\u5916\u7684\u7a7a\u95f4\u3002\n        # \n        # 8. \u6570\u5b66\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6570\u5b66\u89e3\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\uff0c\u56e0\u4e3a\u6bcf\u6b21\u5faa\u73af\u90fd\u4f1a\u5c06num\u7684\u503c\u9664\u4ee510\uff0c\u76f4\u5230num\u7684\u503c\u4e3a1\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\uff0c\u56e0\u4e3a\u4e0d\u9700\u8981\u989d\u5916\u7684\u7a7a\u95f4\u3002\n        #"}], "single-number": [{"task_id": "single-number", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u5f02\u6216\n        # \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\uff0c\u5373\uff1a\n        # a ^ b ^ a = b\n        # a ^ b ^ b = a\n        # \u6240\u4ee5\uff0c\u53ea\u8981\u904d\u5386\u4e00\u904d\u6570\u7ec4\uff0c\u5c06\u6bcf\u4e2a\u5143\u7d20\u4e0e\u7ed3\u679c\u5f02\u6216\uff0c\u6700\u540e\u7684\u7ed3\u679c\u5c31\u662f\u552f\u4e00\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\u3002\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u4f5c\u8005\uff1aLeetCode\n        # \u94fe\u63a5\uff1ahttps://leetcode-cn.com/problems/single-number/solution/dan-xuan-zi-shu-by-leetcode/\n        # \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09\n        # \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002\n        result = 0\n        for num in nums:\n            result ^= num\n        return result"}, {"task_id": "single-number", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u5f02\u6216\n        # 2. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\uff1a\n        # 1. \u4efb\u4f55\u6570\u548c0\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 2. \u4efb\u4f55\u6570\u548c\u672c\u8eab\u5f02\u6216\u5f97\u52300\n        # 3. \u4efb\u4f55\u6570\u548c\u53e6\u4e00\u4e2a\u6570\u5f02\u6216\u5f97\u5230\u53e6\u4e00\u4e2a\u6570\n        # 4. \u4efb\u4f55\u6570\u548c0\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 5. \u4efb\u4f55\u6570\u548c\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u5f97\u52300\n        # 6. \u4efb\u4f55\u6570\u548c\u53e6\u4e00\u4e2a\u6570\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u53e6\u4e00\u4e2a\u6570\n        # 7. \u4efb\u4f55\u6570\u548c\u53e6\u4e00\u4e2a\u6570\u5f02\u6216\u518d\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 8. \u4efb\u4f55\u6570\u548c\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u518d\u5f02\u6216\u5f97\u52300\n        # 9. \u4efb\u4f55\u6570\u548c\u53e6\u4e00\u4e2a\u6570\u5f02\u6216\u518d\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u53e6\u4e00\u4e2a\u6570\n        # 10. \u4efb\u4f55\u6570\u548c\u53e6\u4e00\u4e2a\u6570\u5f02\u6216\u518d\u5f02\u6216\u518d\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 11. \u4efb\u4f55\u6570\u548c\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u518d\u5f02\u6216\u518d\u5f02\u6216\u5f97\u52300\n        # 12. \u4efb\u4f55\u6570\u548c\u53e6\u4e00\u4e2a\u6570\u5f02\u6216\u518d\u5f02\u6216\u518d\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u53e6\u4e00\u4e2a\u6570\n        # 13. \u4efb\u4f55\u6570\u548c\u53e6\u4e00\u4e2a\u6570\u5f02\u6216\u518d\u5f02\u6216\u518d\u5f02\u6216\u518d\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 14. \u4efb\u4f55\u6570\u548c\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u518d\u5f02\u6216\u518d\u5f02\u6216\u518d\u5f02\u6216\u5f97\u52300\n        # 15. \u4efb\u4f55\u6570\u548c\u53e6\u4e00\u4e2a\u6570\u5f02\u6216\u518d\u5f02\u6216\u518d\u5f02\u6216\u518d\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u53e6\u4e00\u4e2a\u6570\n        # 16. \u4efb\u4f55\u6570\u548c\u53e6\u4e00\u4e2a\u6570\u5f02\u6216\u518d\u5f02\u6216\u518d\u5f02\u6216\u518d\u5f02\u6216\u518d\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 17. \u4efb\u4f55\u6570\u548c\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u518d\u5f02\u6216\u518d\u5f02\u6216\u518d\u5f02\u6216\u518d\u5f02\u6216\u5f97\u52300\n        # 18. \u4efb\u4f55\u6570\u548c\u53e6\u4e00\u4e2a\u6570\u5f02\u6216\u518d\u5f02\u6216\u518d\u5f02\u6216\u518d\u5f02\u6216\u518d\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u53e6\u4e00\u4e2a\u6570\n        # 19. \u4efb\u4f55\u6570\u548c\u53e6\u4e00\u4e2a\u6570\u5f02\u6216\u518d\u5f02\u6216\u518d\u5f02\u6216\u518d\u5f02\u6216\u518d\u5f02\u6216\u518d\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 20. \u4efb\u4f55\u6570\u548c\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u518d\u5f02\u6216\u518d\u5f02\u6216\u518d\u5f02\u6216\u518d\u5f02\u6216\u518d\u5f02\u6216\u5f97\u52300\n        # 21. \u4efb\u4f55\u6570\u548c\u53e6\u4e00\u4e2a\u6570\u5f02\u6216\u518d\u5f02\u6216\u518d\u5f02\u6216\u518d\u5f02\u6216\u518d\u5f02\u6216\u518d\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u53e6\u4e00\u4e2a\u6570\n        # 22. \u4efb\u4f55\u6570\u548c\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u518d\u5f02\u6216\u518d\u5f02\u6216\u518d\u5f02\u6216\u518d\u5f02\u6216\u518d\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 23. \u4efb\u4f55\u6570\u548c\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u518d\u5f02\u6216\u518d\u5f02\u6216\u518d\u5f02\u6216\u518d\u5f02\u6216\u518d\u5f02\u6216\u518d\u5f02\u6216\u5f97\u52300\n        # 24. \u4efb\u4f55\u6570\u548c\u53e6\u4e00\u4e2a\u6570\u5f02\u6216\u518d\u5f02\u6216\u518d\u5f02\u6216\u518d\u5f02\u6216\u518d\u5f02\u6216\u518d\u5f02\u6216"}, {"task_id": "single-number", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        # 2. \u904d\u5386\n        # 3. \u5f02\u6216\n        # 4. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 5. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 6. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 7. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 8. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 9. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 10. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 11. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 12. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 13. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 14. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 15. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 16. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 17. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 18. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 19. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 20. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 21. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 22. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 23. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 24. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 25. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 26. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 27. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 28. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 29. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 30. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 31. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 32. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 33. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 34. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 35. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 36. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 37. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 38. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 39. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 40. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 41. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 42. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 43. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 44. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 45. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 46. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 47. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 48. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 49. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 50. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 51. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 52. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 53. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 54. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 55. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 56."}, {"task_id": "single-number", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u5f02\u6216\n        # \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\uff1a\n        # 1. \u4efb\u4f55\u6570\u548c0\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 2. \u4efb\u4f55\u6570\u548c\u672c\u8eab\u5f02\u6216\u5f97\u52300\n        # 3. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 4. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 5. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 6. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 7. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 8. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 9. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 10. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 11. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 12. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 13. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 14. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 15. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 16. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 17. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 18. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 19. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 20. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 21. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 22. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 23. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 24. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 25. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 26. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 27. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 28. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 29. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 30. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 31. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 32. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 33. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 34. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 35. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 36. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 37. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 38. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 39. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b"}, {"task_id": "single-number", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u5f02\u6216\n        # \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\uff1a\n        # 1. \u4efb\u4f55\u6570\u548c0\u5f02\u6216\u90fd\u662f\u81ea\u8eab\n        # 2. \u4efb\u4f55\u6570\u548c\u81ea\u8eab\u5f02\u6216\u90fd\u662f0\n        # 3. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 4. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 5. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 6. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 7. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 8. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 9. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 10. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 11. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 12. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 13. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 14. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 15. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 16. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 17. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 18. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 19. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 20. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 21. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 22. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 23. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 24. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 25. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 26. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 27. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 28. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 29. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 30. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 31. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 32. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 33. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 34. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 35. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 36. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 37. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 38. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 39. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b"}], "length-of-last-word": [{"task_id": "length-of-last-word", "completion": "class Solution(object):\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. split the string into words\n        # 2. get the last word\n        # 3. get the length of the last word\n        # 4. return the length of the last word\n        \n        # split the string into words\n        words = s.split()\n        \n        # get the last word\n        last_word = words[-1]\n        \n        # get the length of the last word\n        length = len(last_word)\n        \n        # return the length of the last word\n        return length"}, {"task_id": "length-of-last-word", "completion": "class Solution(object):\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. split the string into words\n        # 2. get the last word\n        # 3. get the length of the last word\n        # 4. return the length of the last word\n        \n        # split the string into words\n        words = s.split()\n        \n        # get the last word\n        last_word = words[-1]\n        \n        # get the length of the last word\n        length = len(last_word)\n        \n        # return the length of the last word\n        return length"}, {"task_id": "length-of-last-word", "completion": "class Solution(object):\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. split the string into words\n        # 2. get the last word\n        # 3. get the length of the last word\n        # 4. return the length of the last word\n        # 5. if the last word is empty, return 0\n        \n        # split the string into words\n        words = s.split()\n        \n        # get the last word\n        last_word = words[-1]\n        \n        # get the length of the last word\n        length = len(last_word)\n        \n        # return the length of the last word\n        return length"}, {"task_id": "length-of-last-word", "completion": "class Solution(object):\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. split the string into words\n        # 2. get the last word\n        # 3. get the length of the last word\n        # 4. return the length of the last word\n        \n        # split the string into words\n        words = s.split()\n        \n        # get the last word\n        last_word = words[-1]\n        \n        # get the length of the last word\n        length = len(last_word)\n        \n        # return the length of the last word\n        return length"}, {"task_id": "length-of-last-word", "completion": "class Solution(object):\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. split the string into words\n        # 2. get the last word\n        # 3. get the length of the last word\n        # 4. return the length of the last word\n        \n        # split the string into words\n        words = s.split()\n        \n        # get the last word\n        last_word = words[-1]\n        \n        # get the length of the last word\n        length = len(last_word)\n        \n        # return the length of the last word\n        return length"}], "cherry-pickup": [{"task_id": "cherry-pickup", "completion": "class Solution(object):\n    def cherryPickup(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5927\u7684\u77e9\u9635\n        # 2. \u627e\u5230\u6700\u5927\u7684\u77e9\u9635\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\n        # 3. \u627e\u5230\u6700\u5927\u7684\u77e9\u9635\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\n        # 4. \u627e\u5230\u6700\u5927\u7684\u77e9\u9635\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\n        # 5. \u627e\u5230\u6700\u5927\u7684\u77e9\u9635\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\n        # 6. \u627e\u5230\u6700\u5927\u7684\u77e9\u9635\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\n        # 7. \u627e\u5230\u6700\u5927\u7684\u77e9\u9635\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\n        # 8. \u627e\u5230\u6700\u5927\u7684\u77e9\u9635\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\n        # 9. \u627e\u5230\u6700\u5927\u7684\u77e9\u9635\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684"}, {"task_id": "cherry-pickup", "completion": "class Solution(object):\n    def cherryPickup(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5927\u7684\u77e9\u9635\n        # 2. \u627e\u5230\u6700\u5927\u7684\u77e9\u9635\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\n        # 3. \u627e\u5230\u6700\u5927\u7684\u77e9\u9635\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\n        # 4. \u627e\u5230\u6700\u5927\u7684\u77e9\u9635\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\n        # 5. \u627e\u5230\u6700\u5927\u7684\u77e9\u9635\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\n        # 6. \u627e\u5230\u6700\u5927\u7684\u77e9\u9635\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\n        # 7. \u627e\u5230\u6700\u5927\u7684\u77e9\u9635\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\n        # 8. \u627e\u5230\u6700\u5927\u7684\u77e9\u9635\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684"}, {"task_id": "cherry-pickup", "completion": "class Solution(object):\n    def cherryPickup(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5927\u7684\u77e9\u9635\n        # 2. \u627e\u5230\u6700\u5927\u7684\u77e9\u9635\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\n        # 3. \u627e\u5230\u6700\u5927\u7684\u77e9\u9635\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\n        # 4. \u627e\u5230\u6700\u5927\u7684\u77e9\u9635\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\n        # 5. \u627e\u5230\u6700\u5927\u7684\u77e9\u9635\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\n        # 6. \u627e\u5230\u6700\u5927\u7684\u77e9\u9635\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\n        # 7. \u627e\u5230\u6700\u5927\u7684\u77e9\u9635\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\n        # 8. \u627e\u5230\u6700\u5927\u7684\u77e9\u9635\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\n        # 9. \u627e\u5230\u6700\u5927\u7684\u77e9\u9635\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684"}, {"task_id": "cherry-pickup", "completion": "class Solution(object):\n    def cherryPickup(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5927\u7684\u5750\u6807\n        # 2. \u4ece\u6700\u5927\u7684\u5750\u6807\u5f00\u59cb\uff0c\u5411\u5de6\uff0c\u5411\u4e0a\uff0c\u5411\u53f3\uff0c\u5411\u4e0b\uff0c\u627e\u5230\u6700\u5927\u7684\u5750\u6807\n        # 3. \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u628a\u5750\u6807\u7684\u503c\u52a0\u8d77\u6765\n        # 4. \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u5c31\u8fd4\u56de0\n        # 5. \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u628a\u5750\u6807\u7684\u503c\u52a0\u8d77\u6765\uff0c\u7136\u540e\u7ee7\u7eed\u5f80\u4e0b\u627e\n        # 6. \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u628a\u5750\u6807\u7684\u503c\u52a0\u8d77\u6765\uff0c\u7136\u540e\u7ee7\u7eed\u5f80\u4e0b\u627e\n        # 7. \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u628a\u5750\u6807\u7684\u503c\u52a0\u8d77\u6765\uff0c\u7136\u540e\u7ee7\u7eed\u5f80\u4e0b\u627e\n        # 8. \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u628a\u5750\u6807\u7684\u503c\u52a0\u8d77\u6765\uff0c\u7136\u540e\u7ee7\u7eed\u5f80\u4e0b\u627e\n        # 9. \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u628a\u5750\u6807\u7684\u503c\u52a0\u8d77\u6765\uff0c\u7136\u540e\u7ee7\u7eed\u5f80\u4e0b\u627e\n        # 10. \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u628a\u5750\u6807\u7684\u503c\u52a0\u8d77\u6765\uff0c\u7136\u540e\u7ee7\u7eed\u5f80\u4e0b\u627e\n        # 11. \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u628a\u5750\u6807\u7684\u503c\u52a0\u8d77\u6765\uff0c\u7136\u540e\u7ee7\u7eed\u5f80\u4e0b\u627e\n        # 12. \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u628a\u5750\u6807\u7684\u503c\u52a0\u8d77\u6765\uff0c\u7136\u540e\u7ee7\u7eed\u5f80\u4e0b\u627e\n        # 13. \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u628a\u5750\u6807\u7684\u503c\u52a0\u8d77\u6765\uff0c\u7136\u540e\u7ee7\u7eed\u5f80\u4e0b\u627e\n        # 14. \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u628a\u5750\u6807\u7684\u503c\u52a0\u8d77\u6765\uff0c\u7136\u540e\u7ee7\u7eed\u5f80\u4e0b\u627e\n        # 15. \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u628a\u5750\u6807\u7684\u503c\u52a0\u8d77\u6765\uff0c\u7136\u540e\u7ee7\u7eed\u5f80\u4e0b\u627e\n        # 16. \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u628a\u5750\u6807\u7684\u503c\u52a0\u8d77\u6765\uff0c\u7136\u540e\u7ee7\u7eed\u5f80\u4e0b\u627e\n        # 17. \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u628a\u5750\u6807\u7684\u503c\u52a0\u8d77\u6765\uff0c\u7136\u540e\u7ee7\u7eed\u5f80\u4e0b\u627e\n        # 18. \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u628a\u5750\u6807\u7684\u503c\u52a0\u8d77\u6765\uff0c\u7136\u540e\u7ee7\u7eed\u5f80\u4e0b\u627e\n        # 19. \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u628a\u5750\u6807\u7684\u503c\u52a0\u8d77\u6765\uff0c\u7136\u540e\u7ee7\u7eed\u5f80\u4e0b\u627e\n        # 20. \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u628a\u5750\u6807\u7684\u503c\u52a0\u8d77\u6765\uff0c\u7136\u540e\u7ee7\u7eed\u5f80\u4e0b\u627e\n        # 21. \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u628a\u5750\u6807\u7684\u503c\u52a0\u8d77\u6765\uff0c\u7136\u540e\u7ee7\u7eed\u5f80\u4e0b\u627e\n        # 22. \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u628a\u5750\u6807\u7684\u503c\u52a0\u8d77\u6765\uff0c\u7136\u540e\u7ee7\u7eed\u5f80\u4e0b\u627e\n        # 23. \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u628a\u5750\u6807\u7684\u503c\u52a0\u8d77\u6765\uff0c\u7136\u540e\u7ee7\u7eed\u5f80\u4e0b\u627e\n        # 24. \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u628a\u5750\u6807\u7684\u503c\u52a0\u8d77\u6765\uff0c\u7136\u540e\u7ee7\u7eed\u5f80\u4e0b\u627e\n        # 25. \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u628a\u5750"}, {"task_id": "cherry-pickup", "completion": "class Solution(object):\n    def cherryPickup(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5927\u7684\u77e9\u9635\n        # 2. \u627e\u5230\u6700\u5927\u7684\u77e9\u9635\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\n        # 3. \u627e\u5230\u6700\u5927\u7684\u77e9\u9635\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\n        # 4. \u627e\u5230\u6700\u5927\u7684\u77e9\u9635\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\n        # 5. \u627e\u5230\u6700\u5927\u7684\u77e9\u9635\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\n        # 6. \u627e\u5230\u6700\u5927\u7684\u77e9\u9635\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\n        # 7. \u627e\u5230\u6700\u5927\u7684\u77e9\u9635\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\n        # 8. \u627e\u5230\u6700\u5927\u7684\u77e9\u9635\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u503c\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684"}], "student-attendance-record-ii": [{"task_id": "student-attendance-record-ii", "completion": "class Solution(object):\n    def checkRecord(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 2. \u7edf\u8ba1\u7b26\u5408\u6761\u4ef6\u7684\u5b57\u7b26\u4e32\u7684\u4e2a\u6570\n        # 3. \u8fd4\u56de\u7ed3\u679c\n        \n        # \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 1. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684L\n        # 2. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\n        # 3. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684P\n        # 4. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\n        # 5. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cP\n        # 6. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684L\u548cP\n        # 7. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 8. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 9. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 10. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 11. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 12. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 13. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 14. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 15. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 16. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 17. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 18. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 19. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 20. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 21. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 22. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 23. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 24. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 25. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 26. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 27. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 28. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 29. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 30. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 31. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 32. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 33. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 34. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 35. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 36. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 37. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 38. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 39. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 40. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 41. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 42. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 43. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 44. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 45. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 46. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 47. \u4e0d\u80fd\u6709\u8fde\ufffd\ufffd"}, {"task_id": "student-attendance-record-ii", "completion": "class Solution(object):\n    def checkRecord(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1000000007\n        mod = 1000000007\n        dp = [1, 1, 1]\n        for i in range(3, n+1):\n            dp.append(dp[i-1] + dp[i-2] + dp[i-3])\n            dp[i] %= mod\n        return dp[n]"}, {"task_id": "student-attendance-record-ii", "completion": "class Solution(object):\n    def checkRecord(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 2. \u7edf\u8ba1\u7b26\u5408\u6761\u4ef6\u7684\u5b57\u7b26\u4e32\u7684\u4e2a\u6570\n        # 3. \u8fd4\u56de\u7ed3\u679c\n        \n        # \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 1. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684L\n        # 2. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\n        # 3. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684P\n        # 4. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\n        # 5. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cP\n        # 6. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684L\u548cP\n        # 7. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 8. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 9. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 10. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 11. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 12. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 13. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 14. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 15. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 16. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 17. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 18. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 19. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 20. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 21. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 22. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 23. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 24. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 25. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 26. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 27. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 28. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 29. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 30. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 31. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 32. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 33. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 34. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 35. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 36. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 37. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 38. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 39. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 40. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 41. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 42. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 43. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 44. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 45. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 46. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684A\u548cL\u548cP\n        # 47. \u4e0d\u80fd\u6709\u8fde\ufffd\ufffd"}, {"task_id": "student-attendance-record-ii", "completion": "class Solution(object):\n    def checkRecord(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1000000007\n        mod = 1000000007\n        dp = [1, 1, 1]\n        for i in range(3, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2] + dp[i - 3])\n            dp[i] %= mod\n        return dp[n]"}, {"task_id": "student-attendance-record-ii", "completion": "class Solution(object):\n    def checkRecord(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 2. \u7edf\u8ba1\u7b26\u5408\u6761\u4ef6\u7684\u5b57\u7b26\u4e32\u7684\u4e2a\u6570\n        # 3. \u8fd4\u56de\u7ed3\u679c\n        \n        # \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 1. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684'L'\n        # 2. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684'A'\n        # 3. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684'A'\u548c'L'\n        # 4. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684'A'\u548c'L'\u548c'P'\n        # 5. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684'A'\u548c'L'\u548c'P'\u548c'A'\n        # 6. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684'A'\u548c'L'\u548c'P'\u548c'A'\u548c'L'\n        # 7. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684'A'\u548c'L'\u548c'P'\u548c'A'\u548c'L'\u548c'P'\n        # 8. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684'A'\u548c'L'\u548c'P'\u548c'A'\u548c'L'\u548c'P'\u548c'A'\n        # 9. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684'A'\u548c'L'\u548c'P'\u548c'A'\u548c'L'\u548c'P'\u548c'A'\u548c'L'\n        # 10. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684'A'\u548c'L'\u548c'P'\u548c'A'\u548c'L'\u548c'P'\u548c'A'\u548c'L'\u548c'P'\n        # 11. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684'A'\u548c'L'\u548c'P'\u548c'A'\u548c'L'\u548c'P'\u548c'A'\u548c'L'\u548c'P'\u548c'A'\n        # 12. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684'A'\u548c'L'\u548c'P'\u548c'A'\u548c'L'\u548c'P'\u548c'A'\u548c'L'\u548c'P'\u548c'A'\u548c'L'\n        # 13. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684'A'\u548c'L'\u548c'P'\u548c'A'\u548c'L'\u548c'P'\u548c'A'\u548c'L'\u548c'P'\u548c'A'\u548c'L'\u548c'P'\n        # 14. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684'A'\u548c'L'\u548c'P'\u548c'A'\u548c'L'\u548c'P'\u548c'A'\u548c'L'\u548c'P'\u548c'A'\u548c'L'\u548c'P'\u548c'A'\n        # 15. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684'A'\u548c'L'\u548c'P'\u548c'A'\u548c'L'\u548c'P'\u548c'A'\u548c'L'\u548c'P'\u548c'A'\u548c'L'\u548c'P'\u548c'A'\u548c'L'\n        # 16. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684'A'\u548c'L'\u548c'P'\u548c'A'\u548c'L'\u548c'P'\u548c'A'\u548c'L'\u548c'P'\u548c'A'\u548c'L'\u548c'P'\u548c'A'\u548c'L'\u548c'P'\n        # 17. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684'A'\u548c'L'\u548c'P'\u548c'A'\u548c'L'\u548c'P'\u548c'A'\u548c'L'\u548c'P'\u548c'A'\u548c'L'\u548c'P'\u548c'A'\u548c'L'\u548c'P'\u548c'A'\n        # 18. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684'A'\u548c'L'\u548c'P'\u548c'A'\u548c'L'\u548c'P'\u548c'A'\u548c'L'\u548c'P'\u548c'A'\u548c'L'\u548c'P'\u548c'A'\u548c'L'\u548c'P'and'A'\n        # 19. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684'A'\u548c'L'\u548c'P'and'A'\n        # 20. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684'A'\u548c'L'and'A'\n        # 21. \u4e0d\u80fd\u6709\u8fde\u7eed\u7684'A'and'A"}], "happy-number": [{"task_id": "happy-number", "completion": "class Solution(object):\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u54c8\u5e0c\u8868\n        # 2. \u5feb\u901f\u5e42\n        # 3. \u6808\n        # 4. \u9012\u5f52\n        # 5. \u5faa\u73af\n        # 6. \u6570\u5b66\n        # 7. \u6392\u5e8f\n        # 8. \u4f4d\u8fd0\u7b97\n        # 9. \u6811\n        # 10. \u5806\n        # 11. \u8d2a\u5fc3\n        # 12. \u5206\u6cbb\n        # 13. \u4e8c\u5206\u67e5\u627e\n        # 14. \u5206\u6cbb\n        # 15. \u9012\u5f52\n        # 16. \u52a8\u6001\u89c4\u5212\n        # 17. \u8d2a\u5fc3\n        # 18. \u4e8c\u5206\u67e5\u627e\n        # 19. \u6811\n        # 20. \u54c8\u5e0c\u8868\n        # 21. \u4e8c\u5206\u67e5\u627e\n        # 22. \u5206\u6cbb\n        # 23. \u9012\u5f52\n        # 24. \u6808\n        # 25. \u9012\u5f52\n        # 26. \u6808\n        # 27. \u9012\u5f52\n        # 28. \u6808\n        # 29. \u9012\u5f52\n        # 30. \u6808\n        # 31. \u9012\u5f52\n        # 32. \u6808\n        # 33. \u9012\u5f52\n        # 34. \u6808\n        # 35. \u9012\u5f52\n        # 36. \u6808\n        # 37. \u9012\u5f52\n        # 38. \u6808\n        # 39. \u9012\u5f52\n        # 40. \u6808\n        # 41. \u9012\u5f52\n        # 42. \u6808\n        # 43. \u9012\u5f52\n        # 44. \u6808\n        # 45. \u9012\u5f52\n        # 46. \u6808\n        # 47. \u9012\u5f52\n        # 48. \u6808\n        # 49. \u9012\u5f52\n        # 50. \u6808\n        # 51. \u9012\u5f52\n        # 52. \u6808\n        # 53. \u9012\u5f52\n        # 54. \u6808\n        # 55. \u9012\u5f52\n        # 56. \u6808\n        # 57. \u9012\u5f52\n        # 58. \u6808\n        # 59. \u9012\u5f52\n        # 60. \u6808\n        # 61. \u9012\u5f52\n        # 62. \u6808\n        # 63. \u9012\u5f52\n        # 64. \u6808\n        # 65. \u9012\u5f52\n        # 66. \u6808\n        # 67. \u9012\u5f52\n        # 68. \u6808\n        # 69. \u9012\u5f52\n        # 70. \u6808\n        # 71. \u9012\u5f52\n        # 72. \u6808\n        # 73. \u9012\u5f52\n        # 74. \u6808\n        # 75. \u9012\u5f52\n        # 76. \u6808\n        # 77. \u9012\u5f52\n        # 78. \u6808\n        # 79. \u9012\u5f52\n        # 80. \u6808\n        # 81. \u9012\u5f52\n        # 82. \u6808\n        # 83. \ufffd\ufffd\ufffd\ufffd"}, {"task_id": "happy-number", "completion": "class Solution(object):\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u54c8\u5e0c\u8868\n        # 2. \u5feb\u901f\u5e42\n        # 3. \u6808\n        # 4. \u9012\u5f52\n        # 5. \u5faa\u73af\n        # 6. \u5faa\u73af + \u54c8\u5e0c\u8868\n        # 7. \u5faa\u73af + \u5feb\u901f\u5e42\n        # 8. \u5faa\u73af + \u6808\n        # 9. \u5faa\u73af + \u9012\u5f52\n        # 10. \u5faa\u73af + \u9012\u5f52 + \u54c8\u5e0c\u8868\n        # 11. \u5faa\u73af + \u9012\u5f52 + \u5feb\u901f\u5e42\n        # 12. \u5faa\u73af + \u9012\u5f52 + \u6808\n        # 13. \u5faa\u73af + \u9012\u5f52 + \u54c8\u5e0c\u8868\n        # 14. \u5faa\u73af + \u9012\u5f52 + \u5feb\u901f\u5e42\n        # 15. \u5faa\u73af + \u9012\u5f52 + \u6808\n        # 16. \u5faa\u73af + \u9012\u5f52 + \u54c8\u5e0c\u8868\n        # 17. \u5faa\u73af + \u9012\u5f52 + \u5feb\u901f\u5e42\n        # 18. \u5faa\u73af + \u9012\u5f52 + \u6808\n        # 19. \u5faa\u73af + \u9012\u5f52 + \u54c8\u5e0c\u8868\n        # 20. \u5faa\u73af + \u9012\u5f52 + \u5feb\u901f\u5e42\n        # 21. \u5faa\u73af + \u9012\u5f52 + \u6808\n        # 22. \u5faa\u73af + \u9012\u5f52 + \u54c8\u5e0c\u8868\n        # 23. \u5faa\u73af + \u9012\u5f52 + \u5feb\u901f\u5e42\n        # 24. \u5faa\u73af + \u9012\u5f52 + \u6808\n        # 25. \u5faa\u73af + \u9012\u5f52 + \u54c8\u5e0c\u8868\n        # 26. \u5faa\u73af + \u9012\u5f52 + \u5feb\u901f\u5e42\n        # 27. \u5faa\u73af + \u9012\u5f52 + \u6808\n        # 28. \u5faa\u73af + \u9012\u5f52 + \u54c8\u5e0c\u8868\n        # 29. \u5faa\u73af + \u9012\u5f52 + \u5feb\u901f\u5e42\n        # 30. \u5faa\u73af + \u9012\u5f52 + \u6808\n        # 31. \u5faa\u73af + \u9012\u5f52 + \u54c8\u5e0c\u8868\n        # 32. \u5faa\u73af + \u9012\u5f52 + \u5feb\u901f\u5e42\n        # 33. \u5faa\u73af + \u9012\u5f52 + \u6808\n        # 34. \u5faa\u73af + \u9012\u5f52 + \u54c8\u5e0c\u8868\n        # 35. \u5faa\u73af + \u9012\u5f52 + \u5feb\u901f\u5e42\n        # 36. \u5faa\u73af + \u9012\u5f52 + \u6808\n        # 37. \u5faa\u73af + \u9012\u5f52 + \u54c8\u5e0c\u8868\n        # 38. \u5faa\u73af + \u9012\u5f52 + \u5feb\u901f\u5e42\n        # 39. \u5faa\u73af + \u9012\u5f52 + \u6808\n        # 40. \ufffd\ufffd\ufffd\ufffd"}, {"task_id": "happy-number", "completion": "class Solution(object):\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u9012\u5f52\n        # 2. \u54c8\u5e0c\u8868\n        # 3. \u5feb\u901f\u5e42\n        # 4. \u6570\u5b66\n        # 5. \u5faa\u73af\n        # 6. \u5faa\u73af + \u54c8\u5e0c\u8868\n        # 7. \u5faa\u73af + \u5feb\u901f\u5e42\n        # 8. \u5faa\u73af + \u6570\u5b66\n        # 9. \u5faa\u73af + \u6570\u5b66 + \u54c8\u5e0c\u8868\n        # 10. \u5faa\u73af + \u6570\u5b66 + \u5feb\u901f\u5e42\n        # 11. \u5faa\u73af + \u6570\u5b66 + \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868\n        # 12. \u5faa\u73af + \u6570\u5b66 + \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868 + \u5feb\u901f\u5e42\n        # 13. \u5faa\u73af + \u6570\u5b66 + \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868 + \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868\n        # 14. \u5faa\u73af + \u6570\u5b66 + \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868 + \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868 + \u5feb\u901f\u5e42\n        # 15. \u5faa\u73af + \u6570\u5b66 + \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868 + \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868 + \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868\n        # 16. \u5faa\u73af + \u6570\u5b66 + \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868 + \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868 + \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868 + \u5feb\u901f\u5e42\n        # 17. \u5faa\u73af + \u6570\u5b66 + \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868 + \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868 + \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868 + \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868\n        # 18. \u5faa\u73af + \u6570\u5b66 + \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868 + \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868 + \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868 + \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868 + \u5feb\u901f\u5e42\n        # 19. \u5faa\u73af + \u6570\u5b66 + \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868 + \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868 + \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868 + \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868 + \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868\n        # 20. \u5faa\u73af + \u6570\u5b66 + \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868 + \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868 + \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868 + \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868 + \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868 + \u5feb\u901f\u5e42\n        # 21. \u5faa\u73af + \u6570\u5b66 + \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868 + \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868 + \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868 + \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868 + \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868 + \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868\n        # 22. \u5faa\u73af + \u6570\u5b66 + \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868 +"}, {"task_id": "happy-number", "completion": "class Solution(object):\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u54c8\u5e0c\u8868\n        # 2. \u5feb\u901f\u5e42\n        # 3. \u6392\u5217\u7ec4\u5408\n        # 4. \u6570\u5b66\n        # 5. \u9012\u5f52\n        # 6. \u5faa\u73af\n        # 7. \u6808\n        # 8. \u961f\u5217\n        # 9. \u6811\n        # 10. \u56fe\n        # 11. \u4f4d\u8fd0\u7b97\n        # 12. \u679a\u4e3e\n        # 13. \u5206\u6cbb\n        # 14. \u8d2a\u5fc3\n        # 15. \u56de\u6eaf\n        # 16. \u52a8\u6001\u89c4\u5212\n        # 17. \u6392\u5e8f\n        # 18. \u4e8c\u5206\u67e5\u627e\n        # 19. \u5206\u6cbb\n        # 20. \u9012\u5f52\n        # 21. \u8d2a\u5fc3\n        # 22. \u52a8\u6001\u89c4\u5212\n        # 23. \u4e8c\u5206\u67e5\u627e\n        # 24. \u5206\u6cbb\n        # 25. \u9012\u5f52\n        # 26. \u8d2a\u5fc3\n        # 27. \u52a8\u6001\u89c4\u5212\n        # 28. \u6392\u5e8f\n        # 29. \u4e8c\u5206\u67e5\u627e\n        # 30. \u5206\u6cbb\n        # 31. \u9012\u5f52\n        # 32. \u8d2a\u5fc3\n        # 33. \u52a8\u6001\u89c4\u5212\n        # 34. \u6392\u5e8f\n        # 35. \u4e8c\u5206\u67e5\u627e\n        # 36. \u5206\u6cbb\n        # 37. \u9012\u5f52\n        # 38. \u8d2a\u5fc3\n        # 39. \u52a8\u6001\u89c4\u5212\n        # 40. \u6392\u5e8f\n        # 41. \u4e8c\u5206\u67e5\u627e\n        # 42. \u5206\u6cbb\n        # 43. \u9012\u5f52\n        # 44. \u8d2a\u5fc3\n        # 45. \u52a8\u6001\u89c4\u5212\n        # 46. \u6392\u5e8f\n        # 47. \u4e8c\u5206\u67e5\u627e\n        # 48. \u5206\u6cbb\n        # 49. \u9012\u5f52\n        # 50. \u8d2a\u5fc3\n        # 51. \u52a8\u6001\u89c4\u5212\n        # 52. \u6392\u5e8f\n        # 53. \u4e8c\u5206\u67e5\u627e\n        # 54. \u5206\u6cbb\n        # 55. \u9012\u5f52\n        # 56. \u8d2a\u5fc3\n        # 57. \u52a8\u6001\u89c4\u5212\n        # 58. \u6392\u5e8f\n        # 59. \u4e8c\u5206\u67e5\u627e\n        # 60. \u5206\u6cbb\n        # 61. \u9012\u5f52\n        # 62. \u8d2a\u5fc3\n        # 63. \u52a8\u6001\u89c4\u5212\n        # 64. \u6392\u5e8f\n        # 65. \u4e8c\u5206\u67e5\u627e\n        # 66. \u5206\u6cbb\n        # 67. \u9012\u5f52\n        # 68. \u8d2a\u5fc3\n        # 69. \u52a8\u6001\u89c4\u5212\n        # 70. \u6392\u5e8f\n        # 71. \u4e8c\u5206\u67e5\u627e\n        # 72. \u5206\u6cbb\n        # 73. \u9012\u5f52\n        # 74. \u8d2a\u5fc3\n        # 75. \u52a8\u6001\u89c4\u5212\n        # 76. \u6392\u5e8f\n        # 77. \u4e8c\u5206\u67e5\u627e\n        # 78. \u5206\u6cbb\n        # 79. \u9012\u5f52\n        # 80. \u8d2a\u5fc3\n        # 81"}, {"task_id": "happy-number", "completion": "class Solution(object):\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u628an\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\n        # 2. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u8ba1\u7b97\u6bcf\u4e2a\u5b57\u7b26\u7684\u5e73\u65b9\u548c\n        # 3. \u628a\u6bcf\u4e2a\u5b57\u7b26\u7684\u5e73\u65b9\u548c\u7d2f\u52a0\u8d77\u6765\n        # 4. \u5982\u679c\u7d2f\u52a0\u548c\u7b49\u4e8e1\uff0c\u5219\u8fd4\u56deTrue\n        # 5. \u5982\u679c\u7d2f\u52a0\u548c\u4e0d\u7b49\u4e8e1\uff0c\u5219\u7ee7\u7eed\u904d\u5386\n        # 6. \u5982\u679c\u904d\u5386\u5b8c\uff0c\u7d2f\u52a0\u548c\u4e0d\u7b49\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        \n        # 1. \u628an\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\n        n_str = str(n)\n        \n        # 2. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u8ba1\u7b97\u6bcf\u4e2a\u5b57\u7b26\u7684\u5e73\u65b9\u548c\n        # 3. \u628a\u6bcf\u4e2a\u5b57\u7b26\u7684\u5e73\u65b9\u548c\u7d2f\u52a0\u8d77\u6765\n        # 4. \u5982\u679c\u7d2f\u52a0\u548c\u7b49\u4e8e1\uff0c\u5219\u8fd4\u56deTrue\n        # 5. \u5982\u679c\u7d2f\u52a0\u548c\u4e0d\u7b49\u4e8e1\uff0c\u5219\u7ee7\u7eed\u904d\u5386\n        # 6. \u5982\u679c\u904d\u5386\u5b8c\uff0c\u7d2f\u52a0\u548c\u4e0d\u7b49\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        while n_str != '1':\n            sum_ = 0\n            for i in n_str:\n                sum_ += int(i) ** 2\n            n_str = str(sum_)\n        return True"}], "search-insert-position": [{"task_id": "search-insert-position", "completion": "class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u7684\u4f4d\u7f6e\n        # 3"}, {"task_id": "search-insert-position", "completion": "class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u7684\u4f4d\u7f6e\n        # 3"}, {"task_id": "search-insert-position", "completion": "class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684"}, {"task_id": "search-insert-position", "completion": "class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u7684\u4f4d\u7f6e\n        # 3"}, {"task_id": "search-insert-position", "completion": "class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679ctarget\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679ctarget\u4e0d\u5728nums\u4e2d\uff0c\u8fd4\u56detarget\u5728nums\u4e2d\u7684\u4f4d\u7f6e\n        \n        # 1. \u627e\u5230target\u5728nums\u4e2d\u7684"}], "jump-game": [{"task_id": "jump-game", "completion": "class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a48 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.59%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a48 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.59%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a48 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.59%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a48 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.59%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a48 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.59%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a48 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.59%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a48 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.59%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a48 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.59%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)"}, {"task_id": "jump-game", "completion": "class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u52a8\u6001\u89c4\u5212\n        # 2. \u8d2a\u5fc3\u7b97\u6cd5\n        # 3. \u8d2a\u5fc3\u7b97\u6cd5 + \u4e8c\u5206\u67e5\u627e\n        # 4. \u8d2a\u5fc3\u7b97\u6cd5 + \u4e8c\u5206\u67e5\u627e + \u6ed1\u52a8\u7a97\u53e3\n        # 5. \u8d2a\u5fc3\u7b97\u6cd5 + \u4e8c\u5206\u67e5\u627e + \u6ed1\u52a8\u7a97\u53e3 + \u53cc\u6307\u9488\n        # 6. \u8d2a\u5fc3\u7b97\u6cd5 + \u4e8c\u5206\u67e5\u627e + \u6ed1\u52a8\u7a97\u53e3 + \u53cc\u6307\u9488 + \u54c8\u5e0c\u8868\n        # 7. \u8d2a\u5fc3\u7b97\u6cd5 + \u4e8c\u5206\u67e5\u627e + \u6ed1\u52a8\u7a97\u53e3 + \u53cc\u6307\u9488 + \u54c8\u5e0c\u8868 + \u9012\u5f52\n        # 8. \u8d2a\u5fc3\u7b97\u6cd5 + \u4e8c\u5206\u67e5\u627e + \u6ed1\u52a8\u7a97\u53e3 + \u53cc\u6307\u9488 + \u54c8\u5e0c\u8868 + \u9012\u5f52 + \u8bb0\u5fc6\u5316\u641c\u7d22\n        # 9. \u8d2a\u5fc3\u7b97\u6cd5 + \u4e8c\u5206\u67e5\u627e + \u6ed1\u52a8\u7a97\u53e3 + \u53cc\u6307\u9488 + \u54c8\u5e0c\u8868 + \u9012\u5f52 + \u8bb0\u5fc6\u5316\u641c\u7d22 + \u526a\u679d\n        # 10. \u8d2a\u5fc3\u7b97\u6cd5 + \u4e8c\u5206\u67e5\u627e + \u6ed1\u52a8\u7a97\u53e3 + \u53cc\u6307\u9488 + \u54c8\u5e0c\u8868 + \u9012\u5f52 + \u8bb0\u5fc6\u5316\u641c\u7d22 + \u526a\u679d + \u62d3\u6251\u6392\u5e8f\n        # 11. \u8d2a\u5fc3\u7b97\u6cd5 + \u4e8c\u5206\u67e5\u627e + \u6ed1\u52a8\u7a97\u53e3 + \u53cc\u6307\u9488 + \u54c8\u5e0c\u8868 + \u9012\u5f52 + \u8bb0\u5fc6\u5316\u641c\u7d22 + \u526a\u679d + \u62d3\u6251\u6392\u5e8f + \u5806\n        # 12. \u8d2a\u5fc3\u7b97\u6cd5 + \u4e8c\u5206\u67e5\u627e + \u6ed1\u52a8\u7a97\u53e3 + \u53cc\u6307\u9488 + \u54c8\u5e0c\u8868 + \u9012\u5f52 + \u8bb0\u5fc6\u5316\u641c\u7d22 + \u526a\u679d + \u62d3\u6251\u6392\u5e8f + \u5806 + \u54c8\u5e0c\u8868\n        # 13. \u8d2a\u5fc3\u7b97\u6cd5 + \u4e8c\u5206\u67e5\u627e + \u6ed1\u52a8\u7a97\u53e3 + \u53cc\u6307\u9488 + \u54c8\u5e0c\u8868 + \u9012\u5f52 + \u8bb0\u5fc6\u5316\u641c\u7d22 + \u526a\u679d + \u62d3\u6251\u6392\u5e8f + \u5806 + \u54c8\u5e0c\u8868 + \u9012\u5f52\n        # 14. \u8d2a\u5fc3\u7b97\u6cd5 + \u4e8c\u5206\u67e5\u627e + \u6ed1\u52a8\u7a97\u53e3 + \u53cc\u6307\u9488 + \u54c8\u5e0c\u8868 + \u9012\u5f52 + \u8bb0\u5fc6\u5316\u641c\u7d22 + \u526a\u679d + \u62d3\u6251\u6392\u5e8f + \u5806 + \u54c8\u5e0c\u8868 + \u9012\u5f52 + \u8bb0\u5fc6\u5316\u641c\u7d22\n        # 15. \u8d2a\u5fc3\u7b97\u6cd5 + \u4e8c\u5206\u67e5\u627e + \u6ed1\u52a8\u7a97\u53e3 + \u53cc\u6307\u9488 + \u54c8\u5e0c\u8868 + \u9012\u5f52 + \u8bb0\u5fc6\u5316\u641c\u7d22 + \u526a\u679d + \u62d3\u6251\u6392\u5e8f + \u5806 + \u54c8\u5e0c\u8868 + \u9012\u5f52 + \u8bb0\u5fc6\u5316\u641c\u7d22 + \u526a\u679d\n        # 16. \u8d2a\u5fc3\u7b97\u6cd5 + \u4e8c\u5206\u67e5\u627e + \u6ed1\u52a8\u7a97\u53e3 + \u53cc\u6307\u9488 + \u54c8\u5e0c\u8868 + \u9012\u5f52 +"}, {"task_id": "jump-game", "completion": "class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u52a8\u6001\u89c4\u5212\n        # 2. \u8d2a\u5fc3\u7b97\u6cd5\n        # 3. \u8d2a\u5fc3\u7b97\u6cd5 + \u4e8c\u5206\u67e5\u627e\n        # 4. \u8d2a\u5fc3\u7b97\u6cd5 + \u4e8c\u5206\u67e5\u627e + \u6ed1\u52a8\u7a97\u53e3\n        # 5. \u8d2a\u5fc3\u7b97\u6cd5 + \u4e8c\u5206\u67e5\u627e + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868\n        # 6. \u8d2a\u5fc3\u7b97\u6cd5 + \u4e8c\u5206\u67e5\u627e + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u53cc\u6307\u9488\n        # 7. \u8d2a\u5fc3\u7b97\u6cd5 + \u4e8c\u5206\u67e5\u627e + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u53cc\u6307\u9488 + \u9012\u5f52\n        # 8. \u8d2a\u5fc3\u7b97\u6cd5 + \u4e8c\u5206\u67e5\u627e + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u53cc\u6307\u9488 + \u9012\u5f52 + \u5907\u5fd8\u5f55\n        # 9. \u8d2a\u5fc3\u7b97\u6cd5 + \u4e8c\u5206\u67e5\u627e + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u53cc\u6307\u9488 + \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u62d3\u6251\u6392\u5e8f\n        # 10. \u8d2a\u5fc3\u7b97\u6cd5 + \u4e8c\u5206\u67e5\u627e + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u53cc\u6307\u9488 + \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u62d3\u6251\u6392\u5e8f + \u5806\n        # 11. \u8d2a\u5fc3\u7b97\u6cd5 + \u4e8c\u5206\u67e5\u627e + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u53cc\u6307\u9488 + \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u62d3\u6251\u6392\u5e8f + \u5806 + \u54c8\u5e0c\u8868\n        # 12. \u8d2a\u5fc3\u7b97\u6cd5 + \u4e8c\u5206\u67e5\u627e + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u53cc\u6307\u9488 + \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u62d3\u6251\u6392\u5e8f + \u5806 + \u54c8\u5e0c\u8868 + \u53cc\u6307\u9488\n        # 13. \u8d2a\u5fc3\u7b97\u6cd5 + \u4e8c\u5206\u67e5\u627e + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u53cc\u6307\u9488 + \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u62d3\u6251\u6392\u5e8f + \u5806 + \u54c8\u5e0c\u8868 + \u53cc\u6307\u9488 + \u9012\u5f52\n        # 14. \u8d2a\u5fc3\u7b97\u6cd5 + \u4e8c\u5206\u67e5\u627e + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u53cc\u6307\u9488 + \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u62d3\u6251\u6392\u5e8f + \u5806 + \u54c8\u5e0c\u8868 + \u53cc\u6307\u9488 + \u9012\u5f52 + \u5907\u5fd8\u5f55\n        # 15. \u8d2a\u5fc3\u7b97\u6cd5 + \u4e8c\u5206\u67e5\u627e + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u53cc\u6307\u9488 + \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u62d3\u6251\u6392\u5e8f + \u5806 + \u54c8\u5e0c\u8868 + \u53cc\u6307\u9488 + \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u62d3\u6251\u6392\u5e8f\n        # 16. \u8d2a\u5fc3\u7b97\u6cd5 + \u4e8c\u5206\u67e5\u627e + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u53cc\u6307\u9488 + \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u62d3\u6251\u6392\u5e8f +"}, {"task_id": "jump-game", "completion": "class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a48 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.93%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.93%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a48 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.93%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.93%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a48 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.93%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.93%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a48 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.93%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.93%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a48 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.93%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.93%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a48 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.93%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.93%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a48 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.93%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.93%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a48 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.93%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.93%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742"}, {"task_id": "jump-game", "completion": "class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a124 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.9 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a124 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.9 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a124 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.9 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a124 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.9 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a124 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.9 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a124 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.9 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a124 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.9 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a124 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.9 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)"}], "minimum-path-sum": [{"task_id": "minimum-path-sum", "completion": "class Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # M1. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6: O(mn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6: O(mn)\n        m = len(grid)\n        n = len(grid[0])\n        dp = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if i == 0 and j == 0:\n                    dp[i][j] = grid[i][j]\n                elif i == 0:\n                    dp[i][j] = dp[i][j - 1] + grid[i][j]\n                elif j == 0:\n                    dp[i][j] = dp[i - 1][j] + grid[i][j]\n                else:\n                    dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j]\n        return dp[m - 1][n - 1]"}, {"task_id": "minimum-path-sum", "completion": "class Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # M1. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6: O(mn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6: O(mn)\n        m = len(grid)\n        n = len(grid[0])\n        dp = [[0 for _ in range(n)] for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if i == 0 and j == 0:\n                    dp[i][j] = grid[i][j]\n                elif i == 0:\n                    dp[i][j] = dp[i][j-1] + grid[i][j]\n                elif j == 0:\n                    dp[i][j] = dp[i-1][j] + grid[i][j]\n                else:\n                    dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n        return dp[m-1][n-1]\n        \n        \n        # M2. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6: O(mn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6: O(1)\n        m = len(grid)\n        n = len(grid[0])\n        dp = [0 for _ in range(n)]\n        for i in range(m):\n            for j in range(n):\n                if i == 0 and j == 0:\n                    dp[j] = grid[i][j]\n                elif i == 0:\n                    dp[j] = dp[j-1] + grid[i][j]\n                elif j == 0:\n                    dp[j] = dp[j] + grid[i][j]\n                else:\n                    dp[j] = min(dp[j-1], dp[j]) + grid[i][j]\n        return dp[n-1]\n        \n        \n        # M3. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6: O(mn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6: O(1)\n        m = len(grid)\n        n = len(grid[0])\n        dp = 0\n        for i in range(m):\n            for j in range(n):\n                if i == 0 and j == 0:\n                    dp = grid[i][j]\n                elif i == 0:\n                    dp = dp + grid[i][j]\n                elif j == 0:\n                    dp = dp + grid[i][j]\n                else:\n                    dp = min(dp, dp[j-1]) + grid[i][j]\n        return dp\n        \n        \n        # M4. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6: O(mn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6: O(1)\n        m = len(grid)\n        n = len(grid[0])\n        dp = [0 for _ in range(n)]\n        for i in range(m):\n            for j in range(n):\n                if i == 0 and j == 0:\n                    dp[j] = grid[i][j]\n                elif i == 0:\n                    dp[j] = dp[j-1] + grid[i][j]\n                elif j == 0:\n                    dp[j] = dp[j] + grid[i][j]\n                else:\n                    dp[j] = min(dp[j-1], dp[j]) + grid[i][j]\n        return dp[n-1]\n        \n        \n        # M5. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6: O(mn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6: O(1)\n        m = len(grid)\n        n = len(grid[0])\n        dp = 0\n        for i in range(m):\n            for j in range(n):\n                if i == 0 and j =="}, {"task_id": "minimum-path-sum", "completion": "class Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # M1. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6: O(mn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6: O(mn)\n        m = len(grid)\n        n = len(grid[0])\n        dp = [[0 for _ in range(n)] for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if i == 0 and j == 0:\n                    dp[i][j] = grid[i][j]\n                elif i == 0:\n                    dp[i][j] = dp[i][j-1] + grid[i][j]\n                elif j == 0:\n                    dp[i][j] = dp[i-1][j] + grid[i][j]\n                else:\n                    dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n        return dp[m-1][n-1]\n        \n        \n        # M2. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6: O(mn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6: O(1)\n        m = len(grid)\n        n = len(grid[0])\n        dp = [0 for _ in range(n)]\n        for i in range(m):\n            for j in range(n):\n                if i == 0 and j == 0:\n                    dp[j] = grid[i][j]\n                elif i == 0:\n                    dp[j] = dp[j-1] + grid[i][j]\n                elif j == 0:\n                    dp[j] = dp[j] + grid[i][j]\n                else:\n                    dp[j] = min(dp[j-1], dp[j]) + grid[i][j]\n        return dp[n-1]\n        \n        \n        # M3. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6: O(mn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6: O(1)\n        m = len(grid)\n        n = len(grid[0])\n        dp = 0\n        for i in range(m):\n            for j in range(n):\n                if i == 0 and j == 0:\n                    dp = grid[i][j]\n                elif i == 0:\n                    dp = dp + grid[i][j]\n                elif j == 0:\n                    dp = dp + grid[i][j]\n                else:\n                    dp = min(dp, dp) + grid[i][j]\n        return dp\n        \n        \n        # M4. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6: O(mn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6: O(1)\n        m = len(grid)\n        n = len(grid[0])\n        dp = [0 for _ in range(n)]\n        for i in range(m):\n            for j in range(n):\n                if i == 0 and j == 0:\n                    dp[j] = grid[i][j]\n                elif i == 0:\n                    dp[j] = dp[j-1] + grid[i][j]\n                elif j == 0:\n                    dp[j] = dp[j] + grid[i][j]\n                else:\n                    dp[j] = min(dp[j-1], dp[j]) + grid[i][j]\n        return dp[n-1]\n        \n        \n        # M5. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6: O(mn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6: O(1)\n        m = len(grid)\n        n = len(grid[0])\n        dp = 0\n        for i in range(m):\n            for j in range(n):\n                if i == 0 and j == 0:"}, {"task_id": "minimum-path-sum", "completion": "class Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # M1. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6: O(mn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6: O(mn)\n        # \u52a8\u6001\u89c4\u5212\n        # \u72b6\u6001\u5b9a\u4e49: dp[i][j] \u8868\u793a\u4ece(0,0)\u5230(i,j)\u7684\u6700\u5c0f\u8def\u5f84\u548c\n        # \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b: dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n        # \u521d\u59cb\u5316: dp[0][0] = grid[0][0]\n        # \u8fd4\u56de: dp[m-1][n-1]\n        # \u8fb9\u754c: \u5982\u679cdp[i][j] \u4e0d\u5b58\u5728, \u5219 dp[i][j] = 0\n        \n        # \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6: O(mn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6: O(mn)\n        # \u52a8\u6001\u89c4\u5212\n        # \u72b6\u6001\u5b9a\u4e49: dp[i][j] \u8868\u793a\u4ece(0,0)\u5230(i,j)\u7684\u6700\u5c0f\u8def\u5f84\u548c\n        # \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b: dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n        # \u521d\u59cb\u5316: dp[0][0] = grid[0][0]\n        # \u8fd4\u56de: dp[m-1][n-1]\n        # \u8fb9\u754c: \u5982\u679cdp[i][j] \u4e0d\u5b58\u5728, \u5219 dp[i][j] = 0\n        \n        m = len(grid)\n        n = len(grid[0])\n        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = grid[0][0]\n        for i in range(1, m):\n            dp[i][0] = dp[i-1][0] + grid[i][0]\n        for j in range(1, n):\n            dp[0][j] = dp[0][j-1] + grid[0][j]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n        return dp[m-1][n-1]\n        \n        \n        # M2. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6: O(mn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6: O(1)\n        # \u52a8\u6001\u89c4\u5212\n        # \u72b6\u6001\u5b9a\u4e49: dp[i][j] \u8868\u793a\u4ece(0,0)\u5230(i,j)\u7684\u6700\u5c0f\u8def\u5f84\u548c\n        # \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b: dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n        # \u521d\u59cb\u5316: dp[0][0] = grid[0][0]\n        # \u8fd4\u56de: dp[m-1][n-1]\n        # \u8fb9\u754c: \u5982\u679cdp[i][j] \u4e0d\u5b58\u5728, \u5219 dp[i][j] = 0\n        \n        # \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6: O(mn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6: O(1)\n        # \u52a8\u6001\u89c4\u5212\n        # \u72b6\u6001\u5b9a\u4e49: dp[i][j] \u8868\u793a\u4ece(0,0)\u5230(i,j)\u7684\u6700\u5c0f\u8def\u5f84\u548c\n        # \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b: dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n        # \u521d\u59cb\u5316: dp[0][0] = grid[0][0]\n        # \u8fd4\u56de: dp[m"}, {"task_id": "minimum-path-sum", "completion": "class Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. Initialize the first row and first column\n        for i in range(1, len(grid)):\n            grid[i][0] += grid[i-1][0]\n            \n        for j in range(1, len(grid[0])):\n            grid[0][j] += grid[0][j-1]\n        \n        # 2. Iterate through the grid and update the values\n        for i in range(1, len(grid)):\n            for j in range(1, len(grid[0])):\n                grid[i][j] += min(grid[i-1][j], grid[i][j-1])\n        \n        # 3. Return the value in the bottom right corner\n        return grid[-1][-1]"}], "count-and-say": [{"task_id": "count-and-say", "completion": "class Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        \n        if n == 1:\n            return \"1\"\n        else:\n            return self.countAndSay(n-1)"}, {"task_id": "count-and-say", "completion": "class Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        \n        if n == 1:\n            return \"1\"\n        else:\n            return self.countAndSay(n-1)"}, {"task_id": "count-and-say", "completion": "class Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        \n        if n == 1:\n            return \"1\"\n        else:\n            return self.countAndSay(n-1)"}, {"task_id": "count-and-say", "completion": "class Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        \n        if n == 1:\n            return \"1\"\n        else:\n            return self.countAndSay(n-1)"}, {"task_id": "count-and-say", "completion": "class Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        \n        if n == 1:\n            return \"1\"\n        else:\n            return self.countAndSay(n-1)"}], "split-array-largest-sum": [{"task_id": "split-array-largest-sum", "completion": "class Solution(object):\n    def splitArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u679a\u4e3e\n        # 2. \u4e8c\u5206\n        # 3. \u8d2a\u5fc3\n        # 4. \u52a8\u6001\u89c4\u5212\n        # 5. \u6eda\u52a8\u6570\u7ec4\n        # 6. \u6eda\u52a8\u6570\u7ec4 + \u4e8c\u5206\n        # 7. \u6eda\u52a8\u6570\u7ec4 + \u4e8c\u5206 + \u8d2a\u5fc3\n        # 8. \u6eda\u52a8\u6570\u7ec4 + \u4e8c\u5206 + \u8d2a\u5fc3 + \u52a8\u6001\u89c4\u5212\n        # 9. \u6eda\u52a8\u6570\u7ec4 + \u4e8c\u5206 + \u8d2a\u5fc3 + \u52a8\u6001\u89c4\u5212 + \u6eda\u52a8\u6570\u7ec4\n        # 10. \u6eda\u52a8\u6570\u7ec4 + \u4e8c\u5206 + \u8d2a\u5fc3 + \u52a8\u6001\u89c4\u5212 + \u6eda\u52a8\u6570\u7ec4 + \u4e8c\u5206\n        # 11. \u6eda\u52a8\u6570\u7ec4 + \u4e8c\u5206 + \u8d2a\u5fc3 + \u52a8\u6001\u89c4\u5212 + \u6eda\u52a8\u6570\u7ec4 + \u4e8c\u5206 + \u8d2a\u5fc3\n        # 12. \u6eda\u52a8\u6570\u7ec4 + \u4e8c\u5206 + \u8d2a\u5fc3 + \u52a8\u6001\u89c4\u5212 + \u6eda\u52a8\u6570\u7ec4 + \u4e8c\u5206 + \u8d2a\u5fc3 + \u52a8\u6001\u89c4\u5212\n        # 13. \u6eda\u52a8\u6570\u7ec4 + \u4e8c\u5206 + \u8d2a\u5fc3 + \u52a8\u6001\u89c4\u5212 + \u6eda\u52a8\u6570\u7ec4 + \u4e8c\u5206 + \u8d2a\u5fc3 + \u52a8\u6001\u89c4\u5212 + \u6eda\u52a8\u6570\u7ec4\n        # 14. \u6eda\u52a8\u6570\u7ec4 + \u4e8c\u5206 + \u8d2a\u5fc3 + \u52a8\u6001\u89c4\u5212 + \u6eda\u52a8\u6570\u7ec4 + \u4e8c\u5206 + \u8d2a\u5fc3 + \u52a8\u6001\u89c4\u5212 + \u6eda\u52a8\u6570\u7ec4 + \u4e8c\u5206\n        # 15. \u6eda\u52a8\u6570\u7ec4 + \u4e8c\u5206 + \u8d2a\u5fc3 + \u52a8\u6001\u89c4\u5212 + \u6eda\u52a8\u6570\u7ec4 + \u4e8c\u5206 + \u8d2a\u5fc3 + \u52a8\u6001\u89c4\u5212 + \u6eda\u52a8\u6570\u7ec4 + \u4e8c\u5206 + \u8d2a\u5fc3\n        # 16. \u6eda\u52a8\u6570\u7ec4 + \u4e8c\u5206 + \u8d2a\u5fc3 + \u52a8\u6001\u89c4\u5212 + \u6eda\u52a8\u6570\u7ec4 + \u4e8c\u5206 + \u8d2a\u5fc3 + \u52a8\u6001\u89c4\u5212 + \u6eda\u52a8\u6570\u7ec4 + \u4e8c\u5206 + \u8d2a\u5fc3 + \u52a8\u6001\u89c4\u5212\n        # 17. \u6eda\u52a8\u6570\u7ec4 + \u4e8c\u5206 + \u8d2a\u5fc3 + \u52a8\u6001\u89c4\u5212 + \u6eda\u52a8\u6570\u7ec4 + \u4e8c\u5206 + \u8d2a\u5fc3 + \u52a8\u6001\u89c4\u5212 + \u6eda\u52a8\u6570\u7ec4 + \u4e8c\u5206 + \u8d2a\u5fc3 + \u52a8\u6001\u89c4\u5212 + \u6eda\u52a8\u6570\u7ec4\n        # 18. \u6eda\u52a8\u6570\u7ec4 + \u4e8c\u5206 + \u8d2a\u5fc3 + \u52a8\u6001\u89c4\u5212 + \u6eda\u52a8\u6570\u7ec4 + \u4e8c\u5206 + \u8d2a\u5fc3 + \u52a8\u6001\u89c4\u5212 + \u6eda\u52a8\u6570\u7ec4 + \u4e8c\u5206 + \u8d2a\u5fc3 + \u52a8\u6001\u89c4\u5212 + \u6eda\u52a8\u6570\u7ec4 + \u4e8c\u5206\n        # 19. \u6eda\u52a8\u6570\u7ec4 + \u4e8c\u5206 + \u8d2a\u5fc3 + \u52a8\u6001\u89c4\u5212 + \u6eda\u52a8\u6570\u7ec4 + \u4e8c\u5206 + \u8d2a\u5fc3 + \u52a8\u6001\u89c4\u5212 + \u6eda\u52a8\u6570\u7ec4 + \u4e8c\u5206 + \u8d2a\u5fc3 + \u52a8\u6001\u89c4\u5212 + \u6eda\u52a8\u6570\u7ec4 + \u4e8c\u5206 + \u8d2a\u5fc3\n        # 20. \u6eda\u52a8\u6570\u7ec4 + \u4e8c\u5206 + \u8d2a\u5fc3 + \u52a8\u6001\u89c4\u5212 + \u6eda\u52a8\u6570\u7ec4 + \u4e8c\u5206 + \u8d2a\u5fc3 + \u52a8\u6001\u89c4\u5212 + \u6eda\u52a8"}, {"task_id": "split-array-largest-sum", "completion": "class Solution(object):\n    def splitArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # dp[i][j] = max sum of subarrays of length i with k subarrays\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i-1], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i-1], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i-1], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i-1], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i-1], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i-1], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i-1], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i-1], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i-1], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i-1], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i-1], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i-1], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i-1], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i-1], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i-1], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i-1], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i-1], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i-1], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i-1], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i-1], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i-1], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i-1], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i-1], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i-1], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i-1], dp[i-1][j])"}, {"task_id": "split-array-largest-sum", "completion": "class Solution(object):\n    def splitArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # dp[i][j] = max sum of subarrays of length i ending at index j\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + nums[j])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + nums[j])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + nums[j])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + nums[j])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + nums[j])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + nums[j])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + nums[j])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + nums[j])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + nums[j])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + nums[j])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + nums[j])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + nums[j])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + nums[j])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + nums[j])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + nums[j])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + nums[j])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + nums[j])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + nums[j])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + nums[j])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + nums[j])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + nums[j])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + nums[j])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + nums[j])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + nums[j])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + nums[j])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + nums[j])\n        # dp[i][j] = max("}, {"task_id": "split-array-largest-sum", "completion": "class Solution(object):\n    def splitArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # dp[i][j] = max sum of subarrays of length i with k subarrays\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i], dp[i-1][j])\n        # dp[i][j] = max"}, {"task_id": "split-array-largest-sum", "completion": "class Solution(object):\n    def splitArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # dp[i][j] = max sum of subarrays of length i with k subarrays\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i], dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j-1] + nums[i], dp[i-1][j])\n        # dp[i][j] = max"}], "search-in-rotated-sorted-array": [{"task_id": "search-in-rotated-sorted-array", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u5de6\u53f3\u8fb9\u754c\n        left = 0\n        right = len(nums) - 1\n        \n        # 2. \u5982\u679c\u5de6\u53f3\u8fb9\u754c\u76f8\u7b49\uff0c\u8bf4\u660e\u6ca1\u6709\u65cb\u8f6c\n        if left == right:\n            return -1\n        \n        # 3. \u5982\u679c\u5de6\u53f3\u8fb9\u754c\u4e0d\u76f8\u7b49\uff0c\u8bf4\u660e\u6709\u65cb\u8f6c\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < nums[right]:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n            else:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n        return -1"}, {"task_id": "search-in-rotated-sorted-array", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u5148\u627e\u5230\u5de6\u53f3\u8fb9\u754c\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            if nums[left] <= nums[mid]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return -1"}, {"task_id": "search-in-rotated-sorted-array", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u5148\u627e\u5230\u5de6\u53f3\u8fb9\u754c\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            if nums[left] <= nums[mid]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return -1"}, {"task_id": "search-in-rotated-sorted-array", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u5148\u627e\u5230\u5de6\u53f3\u8fb9\u754c\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            if nums[left] <= nums[mid]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return -1"}, {"task_id": "search-in-rotated-sorted-array", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u5de6\u53f3\u8fb9\u754c\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            if nums[left] <= nums[mid]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return -1"}], "letter-combinations-of-a-phone-number": [{"task_id": "letter-combinations-of-a-phone-number", "completion": "class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        \n        if not digits:\n            return []\n        \n        mapping = {\n            '2': 'abc',\n            '3': 'def',\n            '4': 'ghi',\n            '5': 'jkl',\n            '6': 'mno',\n            '7': 'pqrs',\n            '8': 'tuv',\n            '9': 'wxyz'\n        }\n        \n        res = []\n        self.dfs(digits, 0, '', res, mapping)\n        return res\n    \n    def dfs(self, digits, index, cur, res, mapping):\n        if index == len(digits):\n            res.append(cur)\n            return\n        \n        for c in mapping[digits[index]]:\n            self.dfs(digits, index + 1, cur + c, res, mapping)"}, {"task_id": "letter-combinations-of-a-phone-number", "completion": "class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        \n        if not digits:\n            return []\n        \n        mapping = {\n            '2': 'abc',\n            '3': 'def',\n            '4': 'ghi',\n            '5': 'jkl',\n            '6': 'mno',\n            '7': 'pqrs',\n            '8': 'tuv',\n            '9': 'wxyz'\n        }\n        \n        res = []\n        self.dfs(digits, 0, '', res, mapping)\n        return res\n    \n    def dfs(self, digits, index, cur, res, mapping):\n        if index == len(digits):\n            res.append(cur)\n            return\n        \n        for c in mapping[digits[index]]:\n            self.dfs(digits, index + 1, cur + c, res, mapping)"}, {"task_id": "letter-combinations-of-a-phone-number", "completion": "class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        \n        if not digits:\n            return []\n        \n        mapping = {\n            '2': 'abc',\n            '3': 'def',\n            '4': 'ghi',\n            '5': 'jkl',\n            '6': 'mno',\n            '7': 'pqrs',\n            '8': 'tuv',\n            '9': 'wxyz'\n        }\n        \n        res = []\n        self.dfs(digits, 0, '', res, mapping)\n        return res\n    \n    def dfs(self, digits, index, cur, res, mapping):\n        if index == len(digits):\n            res.append(cur)\n            return\n        \n        for c in mapping[digits[index]]:\n            self.dfs(digits, index + 1, cur + c, res, mapping)"}, {"task_id": "letter-combinations-of-a-phone-number", "completion": "class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        \n        if not digits:\n            return []\n        \n        mapping = {\n            '2': 'abc',\n            '3': 'def',\n            '4': 'ghi',\n            '5': 'jkl',\n            '6': 'mno',\n            '7': 'pqrs',\n            '8': 'tuv',\n            '9': 'wxyz'\n        }\n        \n        res = []\n        self.dfs(digits, 0, '', res, mapping)\n        return res\n    \n    def dfs(self, digits, index, cur, res, mapping):\n        if index == len(digits):\n            res.append(cur)\n            return\n        \n        for c in mapping[digits[index]]:\n            self.dfs(digits, index + 1, cur + c, res, mapping)"}, {"task_id": "letter-combinations-of-a-phone-number", "completion": "class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        \n        if not digits:\n            return []\n        \n        mapping = {\n            '2': 'abc',\n            '3': 'def',\n            '4': 'ghi',\n            '5': 'jkl',\n            '6': 'mno',\n            '7': 'pqrs',\n            '8': 'tuv',\n            '9': 'wxyz'\n        }\n        \n        result = []\n        self.dfs(digits, 0, '', result, mapping)\n        return result\n    \n    def dfs(self, digits, index, cur, result, mapping):\n        if index == len(digits):\n            result.append(cur)\n            return\n        \n        for c in mapping[digits[index]]:\n            self.dfs(digits, index + 1, cur + c, result, mapping)"}], "combination-sum": [{"task_id": "combination-sum", "completion": "class Solution(object):\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # sort the candidates\n        candidates.sort()\n        \n        # initialize the result\n        result = []\n        \n        # initialize the current combination\n        current = []\n        \n        # initialize the current sum\n        current_sum = 0\n        \n        # initialize the start index\n        start = 0\n        \n        # initialize the end index\n        end = len(candidates) - 1\n        \n        # initialize the current index\n        current_index = 0\n        \n        # initialize the current candidate\n        current_candidate = candidates[current_index]\n        \n        # initialize the current candidate sum\n        current_candidate_sum = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index"}, {"task_id": "combination-sum", "completion": "class Solution(object):\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # sort the candidates\n        candidates.sort()\n        \n        # initialize the result\n        result = []\n        \n        # initialize the current combination\n        current = []\n        \n        # initialize the current sum\n        current_sum = 0\n        \n        # initialize the start index\n        start = 0\n        \n        # initialize the end index\n        end = len(candidates) - 1\n        \n        # initialize the current index\n        current_index = 0\n        \n        # initialize the current candidate\n        current_candidate = candidates[current_index]\n        \n        # initialize the current candidate sum\n        current_candidate_sum = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index\n        current_candidate_index = 0\n        \n        # initialize the current candidate index"}, {"task_id": "combination-sum", "completion": "class Solution(object):\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # Sort the array in descending order\n        candidates.sort(reverse=True)\n        \n        # Initialize the result list\n        result = []\n        \n        # Initialize the current sum\n        current_sum = 0\n        \n        # Initialize the current combination\n        current_combination = []\n        \n        # Initialize the index\n        index = 0\n        \n        # Iterate through the array\n        while index < len(candidates):\n            \n            # If the current sum is less than the target\n            if current_sum < target:\n                \n                # If the current sum is equal to the target\n                if current_sum == target:\n                    \n                    # Add the current combination to the result\n                    result.append(current_combination)\n                    \n                    # Reset the current combination\n                    current_combination = []\n                    \n                    # Reset the current sum\n                    current_sum = 0\n                    \n                    # Increment the index\n                    index += 1\n                    \n                # If the current sum is less than the target\n                else:\n                    \n                    # Add the current candidate to the current combination\n                    current_combination.append(candidates[index])\n                    \n                    # Increment the current sum\n                    current_sum += candidates[index]\n                    \n                    # Increment the index\n                    index += 1\n                    \n            # If the current sum is greater than the target\n            else:\n                \n                # If the current sum is equal to the target\n                if current_sum == target:\n                    \n                    # Add the current combination to the result\n                    result.append(current_combination)\n                    \n                    # Reset the current combination\n                    current_combination = []\n                    \n                    # Reset the current sum\n                    current_sum = 0\n                    \n                    # Increment the index\n                    index += 1\n                    \n                # If the current sum is greater than the target\n                else:\n                    \n                    # Decrement the current sum\n                    current_sum -= candidates[index - 1]\n                    \n                    # Remove the last candidate from the current combination\n                    current_combination.pop()\n                    \n                    # Increment the index\n                    index -= 1\n                    \n        # Return the result\n        return result"}, {"task_id": "combination-sum", "completion": "class Solution(object):\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. sort the candidates\n        candidates.sort()\n        \n        # 2. initialize the result\n        result = []\n        \n        # 3. initialize the current combination\n        current = []\n        \n        # 4. initialize the current sum\n        current_sum = 0\n        \n        # 5. initialize the start index\n        start = 0\n        \n        # 6. initialize the end index\n        end = len(candidates) - 1\n        \n        # 7. initialize the current index\n        current_index = 0\n        \n        # 8. initialize the current candidate\n        current_candidate = candidates[current_index]\n        \n        # 9. initialize the current sum\n        current_sum = 0\n        \n        # 10. initialize the start index\n        start = 0\n        \n        # 11. initialize the end index\n        end = len(candidates) - 1\n        \n        # 12. initialize the current index\n        current_index = 0\n        \n        # 13. initialize the current candidate\n        current_candidate = candidates[current_index]\n        \n        # 14. initialize the current sum\n        current_sum = 0\n        \n        # 15. initialize the start index\n        start = 0\n        \n        # 16. initialize the end index\n        end = len(candidates) - 1\n        \n        # 17. initialize the current index\n        current_index = 0\n        \n        # 18. initialize the current candidate\n        current_candidate = candidates[current_index]\n        \n        # 19. initialize the current sum\n        current_sum = 0\n        \n        # 20. initialize the start index\n        start = 0\n        \n        # 21. initialize the end index\n        end = len(candidates) - 1\n        \n        # 22. initialize the current index\n        current_index = 0\n        \n        # 23. initialize the current candidate\n        current_candidate = candidates[current_index]\n        \n        # 24. initialize the current sum\n        current_sum = 0\n        \n        # 25. initialize the start index\n        start = 0\n        \n        # 26. initialize the end index\n        end = len(candidates) - 1\n        \n        # 27. initialize the current index\n        current_index = 0\n        \n        # 28. initialize the current candidate\n        current_candidate = candidates[current_index]\n        \n        # 29. initialize the current sum\n        current_sum = 0\n        \n        # 30. initialize the start index\n        start = 0\n        \n        # 31. initialize the end index\n        end = len(candidates) - 1\n        \n        # 32. initialize the current index\n        current_index = 0\n        \n        # 33. initialize the current candidate\n        current_candidate = candidates[current_index]\n        \n        # 34. initialize the current sum\n        current_sum = 0\n        \n        # 35. initialize the start index\n        start = 0\n        \n        # 36. initialize the end index\n        end = len(candidates) - 1\n        \n        # 37. initialize the current index\n        current_index = 0\n        \n        # 38. initialize the current candidate\n        current_candidate = candidates[current_index]\n        \n        # 39. initialize the current sum\n        current_sum = 0\n        \n        # 40. initialize the start index\n        start = 0\n        \n        # 41. initialize the end index\n        end = len(candidates) - 1\n        \n        # 42. initialize the current index\n        current_index = 0\n        \n        # 43. initialize the current candidate\n        current_candidate = candidates[current_index]\n        \n        # 44. initialize the current sum\n        current_sum = 0\n        \n        # 45. initialize the start index\n        start = 0\n        \n        # 46. initialize the end index\n        end = len(candidates) - 1\n        \n        #"}, {"task_id": "combination-sum", "completion": "class Solution(object):\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # sort the candidates\n        candidates.sort()\n        \n        # initialize the result\n        result = []\n        \n        # initialize the current combination\n        current = []\n        \n        # initialize the current sum\n        current_sum = 0\n        \n        # initialize the start index\n        start = 0\n        \n        # initialize the end index\n        end = len(candidates) - 1\n        \n        # initialize the current index\n        current_index = 0\n        \n        # initialize the current candidate\n        current_candidate = candidates[current_index]\n        \n        # initialize the current candidate sum\n        current_candidate_sum = current_candidate\n        \n        # initialize the current candidate index\n        current_candidate_index = current_index\n        \n        # initialize the current candidate index\n        current_candidate_index = current_index\n        \n        # initialize the current candidate index\n        current_candidate_index = current_index\n        \n        # initialize the current candidate index\n        current_candidate_index = current_index\n        \n        # initialize the current candidate index\n        current_candidate_index = current_index\n        \n        # initialize the current candidate index\n        current_candidate_index = current_index\n        \n        # initialize the current candidate index\n        current_candidate_index = current_index\n        \n        # initialize the current candidate index\n        current_candidate_index = current_index\n        \n        # initialize the current candidate index\n        current_candidate_index = current_index\n        \n        # initialize the current candidate index\n        current_candidate_index = current_index\n        \n        # initialize the current candidate index\n        current_candidate_index = current_index\n        \n        # initialize the current candidate index\n        current_candidate_index = current_index\n        \n        # initialize the current candidate index\n        current_candidate_index = current_index\n        \n        # initialize the current candidate index\n        current_candidate_index = current_index\n        \n        # initialize the current candidate index\n        current_candidate_index = current_index\n        \n        # initialize the current candidate index\n        current_candidate_index = current_index\n        \n        # initialize the current candidate index\n        current_candidate_index = current_index\n        \n        # initialize the current candidate index\n        current_candidate_index = current_index\n        \n        # initialize the current candidate index\n        current_candidate_index = current_index\n        \n        # initialize the current candidate index\n        current_candidate_index = current_index\n        \n        # initialize the current candidate index\n        current_candidate_index = current_index\n        \n        # initialize the current candidate index\n        current_candidate_index = current_index\n        \n        # initialize the current candidate index\n        current_candidate_index = current_index\n        \n        # initialize the current candidate index\n        current_candidate_index = current_index\n        \n        # initialize the current candidate index\n        current_candidate_index = current_index\n        \n        # initialize the current candidate index\n        current_candidate_index = current_index\n        \n        # initialize the current candidate index\n        current_candidate_index = current_index\n        \n        # initialize the current candidate index\n        current_candidate_index = current_index\n        \n        # initialize the current candidate index\n        current_candidate_index = current_index\n        \n        # initialize the current candidate index\n        current_candidate_index = current_index\n        \n        # initialize the current candidate index\n        current_candidate_index = current_index\n        \n        # initialize the current candidate index\n        current_candidate_index = current_index\n        \n        # initialize the current candidate index\n        current_candidate_index = current_index\n        \n        # initialize the current candidate index\n        current_candidate_index = current_index\n        \n        # initialize the current candidate index\n        current_candidate_index = current_index\n        \n        # initialize the current candidate index\n        current_candidate_index = current_index\n        \n        # initialize the current candidate index\n        current_candidate_index = current_index\n        \n        # initialize the current candidate index\n        current_candid"}], "find-the-closest-palindrome": [{"task_id": "find-the-closest-palindrome", "completion": "class Solution(object):\n    def nearestPalindromic(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. convert to int\n        n = int(n)\n        \n        # 2. find the closest palindrome\n        # 2.1 find the closest palindrome in the range [n - 100, n + 100]\n        # 2.2 find the closest palindrome in the range [n - 10, n + 10]\n        # 2.3 find the closest palindrome in the range [n - 1, n + 1]\n        # 2.4 find the closest palindrome in the range [n - 1, n]\n        # 2.5 find the closest palindrome in the range [n, n + 1]\n        # 2.6 find the closest palindrome in the range [n + 1, n + 10]\n        # 2.7 find the closest palindrome in the range [n + 10, n + 100]\n        # 2.8 find the closest palindrome in the range [n + 100, n + 1000]\n        # 2.9 find the closest palindrome in the range [n + 1000, n + 10000]\n        # 2.10 find the closest palindrome in the range [n + 10000, n + 100000]\n        # 2.11 find the closest palindrome in the range [n + 100000, n + 1000000]\n        # 2.12 find the closest palindrome in the range [n + 1000000, n + 10000000]\n        # 2.13 find the closest palindrome in the range [n + 10000000, n + 100000000]\n        # 2.14 find the closest palindrome in the range [n + 100000000, n + 1000000000]\n        # 2.15 find the closest palindrome in the range [n + 1000000000, n + 10000000000]\n        # 2.16 find the closest palindrome in the range [n + 10000000000, n + 100000000000]\n        # 2.17 find the closest palindrome in the range [n + 100000000000, n + 1000000000000]\n        # 2.18 find the closest palindrome in the range [n + 1000000000000, n + 10000000000000]\n        # 2.19 find the closest palindrome in the range [n + 10000000000000, n + 100000000000000]\n        # 2.20 find the closest palindrome in the range [n + 100000000000000, n + 1000000000000000]\n        # 2.21 find the closest palindrome in the range [n + 1000000000000000, n + 10000000000000000]\n        # 2.22 find the closest palindrome in the range [n + 10000000000000000, n + 100000000000000000]\n        # 2.23 find the closest palindrome in the range [n + 100000000000000000, n + 1000000000000000000]\n        # 2.24 find the closest palindrome in the range [n + 10000000000000"}, {"task_id": "find-the-closest-palindrome", "completion": "class Solution(object):\n    def nearestPalindromic(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\"\n        \n        def isPalindrome(n):\n            return n == n[::-1]\n        \n        def getPalindrome(n):\n            if isPalindrome(n):\n                return n\n            else:\n                return getPalindrome(n[:-1])\n        \n        def getClosest(n):\n            if isPalindrome(n):\n                return n\n            else:\n                return min(getPalindrome(n[:-1]), getPalindrome(n[1:]))\n        \n        def getClosestPalindrome(n):\n            if isPalindrome(n):\n                return n\n            else:\n                return getClosest(n)\n        \n        def getClosestPalindrome(n):\n            if isPalindrome(n):\n                return n\n            else:\n                return min(getPalindrome(n[:-1]), getPalindrome(n[1:]))\n        \n        def getClosestPalindrome(n):\n            if isPalindrome(n):\n                return n\n            else:\n                return min(getPalindrome(n[:-1]), getPalindrome(n[1:]))\n        \n        def getClosestPalindrome(n):\n            if isPalindrome(n):\n                return n\n            else:\n                return min(getPalindrome(n[:-1]), getPalindrome(n[1:]))\n        \n        def getClosestPalindrome(n):\n            if isPalindrome(n):\n                return n\n            else:\n                return min(getPalindrome(n[:-1]), getPalindrome(n[1:]))\n        \n        def getClosestPalindrome(n):\n            if isPalindrome(n):\n                return n\n            else:\n                return min(getPalindrome(n[:-1]), getPalindrome(n[1:]))\n        \n        def getClosestPalindrome(n):\n            if isPalindrome(n):\n                return n\n            else:\n                return min(getPalindrome(n[:-1]), getPalindrome(n[1:]))\n        \n        def getClosestPalindrome(n):\n            if isPalindrome(n):\n                return n\n            else:\n                return min(getPalindrome(n[:-1]), getPalindrome(n[1:]))\n        \n        def getClosestPalindrome(n):\n            if isPalindrome(n):\n                return n\n            else:\n                return min(getPalindrome(n[:-1]), getPalindrome(n[1:]))\n        \n        def getClosestPalindrome(n):\n            if isPalindrome(n):\n                return n\n            else:\n                return min(getPalindrome(n[:-1]), getPalindrome(n[1:]))\n        \n        def getClosestPalindrome(n):\n            if isPalindrome(n):\n                return n\n            else:\n                return min(getPalindrome(n[:-1]), getPalindrome(n[1:]))\n        \n        def getClosestPalindrome(n):\n            if isPalindrome(n):\n                return n\n            else:\n                return min(getPalindrome(n[:-1]), getPalindrome(n[1:]))\n        \n        def getClosestPalindrome(n):\n            if isPalindrome(n):\n                return n\n            else:\n                return min(getPalindrome(n[:-1]), getPalindrome(n[1:]))\n        \n        def getClosestPalindrome(n):\n            if isPalindrome(n):\n                return n\n            else:\n                return min(getPalindrome(n[:-1]), getPalindrome(n[1:]))\n        \n        def getClosestPalindrome(n):\n            if isPalindrome(n):\n                return n\n            else:\n                return min(getPalindrome(n[:-1]), getPalindrome(n[1:]))\n        \n        def getClosestPalindrome(n):\n            if isPalindrome(n):\n                return n\n            else:\n                return min(getPalindrome(n[:-1]), getPalind"}, {"task_id": "find-the-closest-palindrome", "completion": "class Solution(object):\n    def nearestPalindromic(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\"\n        \n        def isPalindrome(n):\n            return n == n[::-1]\n        \n        def getPalindrome(n):\n            n = str(n)\n            if len(n) == 1:\n                return n\n            if len(n) == 2:\n                return n if isPalindrome(n) else '9' + n\n            if len(n) == 3:\n                return '9' + n if isPalindrome(n) else '9' + n[1:]\n            if len(n) == 4:\n                return '9' + n if isPalindrome(n) else '9' + n[1:]\n            if len(n) == 5:\n                return '9' + n if isPalindrome(n) else '9' + n[1:]\n            if len(n) == 6:\n                return '9' + n if isPalindrome(n) else '9' + n[1:]\n            if len(n) == 7:\n                return '9' + n if isPalindrome(n) else '9' + n[1:]\n            if len(n) == 8:\n                return '9' + n if isPalindrome(n) else '9' + n[1:]\n            if len(n) == 9:\n                return '9' + n if isPalindrome(n) else '9' + n[1:]\n            if len(n) == 10:\n                return '9' + n if isPalindrome(n) else '9' + n[1:]\n            if len(n) == 11:\n                return '9' + n if isPalindrome(n) else '9' + n[1:]\n            if len(n) == 12:\n                return '9' + n if isPalindrome(n) else '9' + n[1:]\n            if len(n) == 13:\n                return '9' + n if isPalindrome(n) else '9' + n[1:]\n            if len(n) == 14:\n                return '9' + n if isPalindrome(n) else '9' + n[1:]\n            if len(n) == 15:\n                return '9' + n if isPalindrome(n) else '9' + n[1:]\n            if len(n) == 16:\n                return '9' + n if isPalindrome(n) else '9' + n[1:]\n            if len(n) == 17:\n                return '9' + n if isPalindrome(n) else '9' + n[1:]\n            if len(n) == 18:\n                return '9' + n if isPalindrome(n) else '9' + n[1:]\n            return '9' + n if isPalindrome(n) else '9' + n[1:]\n        \n        def getClosest(n):\n            n = int(n)\n            if n == 0:\n                return '0'\n            if n == 1:\n                return '1'\n            if n == 2:\n                return '2'\n            if n == 3:\n                return '4'\n            if n == 4:\n                return '4'\n            if n == 5:\n                return '6'\n            if n == 6:\n                return '6'\n            if n == 7:\n                return '8'\n            if n == 8:\n                return '8'\n            if n == 9:\n                return '9'\n            if n == 10:\n                return '11'\n            if n == 11:\n                return '11'\n            if n == 12:\n                return '13'\n            if n == 13:\n                return '13'\n            if n == 14:\n                return '15'\n            if n == 15:\n                return '15'\n            if n == 16:\n                return '17'\n            if n == 17:\n                return '17'\n            if n == 18:\n                return '19'\n            if n == 19:\n                return '19'\n            if n == 20:"}, {"task_id": "find-the-closest-palindrome", "completion": "class Solution(object):\n    def nearestPalindromic(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. convert to int\n        n = int(n)\n        \n        # 2. find the closest palindrome\n        # 2.1 find the closest palindrome in the range [n-100, n+100]\n        # 2.2 find the closest palindrome in the range [n-10, n+10]\n        # 2.3 find the closest palindrome in the range [n-1, n+1]\n        # 2.4 find the closest palindrome in the range [n-1, n]\n        # 2.5 find the closest palindrome in the range [n, n+1]\n        # 2.6 find the closest palindrome in the range [n, n+10]\n        # 2.7 find the closest palindrome in the range [n, n+100]\n        \n        # 3. return the closest palindrome\n        return str(min(self.find_palindrome(n-100, n+100), self.find_palindrome(n-10, n+10), self.find_palindrome(n-1, n+1), self.find_palindrome(n, n+1), self.find_palindrome(n, n+10), self.find_palindrome(n, n+100), n))\n        \n    def find_palindrome(self, left, right):\n        # 1. find the palindrome in the range [left, right]\n        # 2. return the palindrome\n        for i in range(left, right+1):\n            if str(i) == str(i)[::-1]:\n                return i\n        return -1"}, {"task_id": "find-the-closest-palindrome", "completion": "class Solution(object):\n    def nearestPalindromic(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\"\n        \n        def isPalindrome(n):\n            return n == n[::-1]\n        \n        def getClosest(n):\n            if isPalindrome(n):\n                return n\n            else:\n                n = int(n)\n                if n < 10:\n                    return str(n)\n                else:\n                    return str(n - 1) if n % 10 == 0 else str(n + 1)\n        \n        def getClosestPalindrome(n):\n            n = int(n)\n            if n < 10:\n                return str(n)\n            else:\n                return str(n - 1) if n % 10 == 0 else str(n + 1)\n        \n        def getClosestPalindrome2(n):\n            n = int(n)\n            if n < 10:\n                return str(n)\n            else:\n                return str(n - 1) if n % 10 == 0 else str(n + 1)\n        \n        def getClosestPalindrome3(n):\n            n = int(n)\n            if n < 10:\n                return str(n)\n            else:\n                return str(n - 1) if n % 10 == 0 else str(n + 1)\n        \n        def getClosestPalindrome4(n):\n            n = int(n)\n            if n < 10:\n                return str(n)\n            else:\n                return str(n - 1) if n % 10 == 0 else str(n + 1)\n        \n        def getClosestPalindrome5(n):\n            n = int(n)\n            if n < 10:\n                return str(n)\n            else:\n                return str(n - 1) if n % 10 == 0 else str(n + 1)\n        \n        def getClosestPalindrome6(n):\n            n = int(n)\n            if n < 10:\n                return str(n)\n            else:\n                return str(n - 1) if n % 10 == 0 else str(n + 1)\n        \n        def getClosestPalindrome7(n):\n            n = int(n)\n            if n < 10:\n                return str(n)\n            else:\n                return str(n - 1) if n % 10 == 0 else str(n + 1)\n        \n        def getClosestPalindrome8(n):\n            n = int(n)\n            if n < 10:\n                return str(n)\n            else:\n                return str(n - 1) if n % 10 == 0 else str(n + 1)\n        \n        def getClosestPalindrome9(n):\n            n = int(n)\n            if n < 10:\n                return str(n)\n            else:\n                return str(n - 1) if n % 10 == 0 else str(n + 1)\n        \n        def getClosestPalindrome10(n):\n            n = int(n)\n            if n < 10:\n                return str(n)\n            else:\n                return str(n - 1) if n % 10 == 0 else str(n + 1)\n        \n        def getClosestPalindrome11(n):\n            n = int(n)\n            if n < 10:\n                return str(n)\n            else:\n                return str(n - 1) if n % 10 == 0 else str(n + 1)\n        \n        def getClosestPalindrome12(n):\n            n = int(n)\n            if n < 10:\n                return str(n)\n            else:\n                return str(n - 1) if n % 10 == 0 else str(n + 1)\n        \n        def getClosestPalindrome13(n):\n            n = int(n)\n            if n < 10:\n                return str(n)\n            else:\n                return str(n - 1) if n % 10 =="}], "spiral-matrix-ii": [{"task_id": "spiral-matrix-ii", "completion": "class Solution(object):\n    def generateMatrix(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. Create a matrix of size n x n\n        matrix = [[0 for i in range(n)] for j in range(n)]\n        \n        # 2. Initialize the variables\n        top = 0\n        bottom = n - 1\n        left = 0\n        right = n - 1\n        num = 1\n        \n        # 3. Iterate through the matrix and fill it\n        while top <= bottom and left <= right:\n            \n            # 3.1 Fill the top row\n            for i in range(left, right + 1):\n                matrix[top][i] = num\n                num += 1\n                \n            top += 1\n            \n            # 3.2 Fill the right column\n            for i in range(top, bottom + 1):\n                matrix[i][right] = num\n                num += 1\n                \n            right -= 1\n            \n            # 3.3 Fill the bottom row\n            for i in range(right, left - 1, -1):\n                matrix[bottom][i] = num\n                num += 1\n                \n            bottom -= 1\n            \n            # 3.4 Fill the left column\n            for i in range(bottom, top - 1, -1):\n                matrix[i][left] = num\n                num += 1\n                \n            left += 1\n            \n        return matrix"}, {"task_id": "spiral-matrix-ii", "completion": "class Solution(object):\n    def generateMatrix(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. Create a matrix of size n x n\n        matrix = [[0 for i in range(n)] for j in range(n)]\n        \n        # 2. Initialize the variables\n        top = 0\n        bottom = n - 1\n        left = 0\n        right = n - 1\n        num = 1\n        \n        # 3. Iterate through the matrix\n        while top <= bottom and left <= right:\n            \n            # 4. Fill the top row\n            for i in range(left, right + 1):\n                matrix[top][i] = num\n                num += 1\n                \n            top += 1\n            \n            # 5. Fill the right column\n            for i in range(top, bottom + 1):\n                matrix[i][right] = num\n                num += 1\n                \n            right -= 1\n            \n            # 6. Fill the bottom row\n            for i in range(right, left - 1, -1):\n                matrix[bottom][i] = num\n                num += 1\n                \n            bottom -= 1\n            \n            # 7. Fill the left column\n            for i in range(bottom, top - 1, -1):\n                matrix[i][left] = num\n                num += 1\n                \n            left += 1\n            \n        return matrix"}, {"task_id": "spiral-matrix-ii", "completion": "class Solution(object):\n    def generateMatrix(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # Create a matrix of size n x n\n        matrix = [[0 for i in range(n)] for j in range(n)]\n        \n        # Initialize the variables\n        top = 0\n        bottom = n - 1\n        left = 0\n        right = n - 1\n        num = 1\n        \n        # Iterate through the matrix\n        while top <= bottom and left <= right:\n            \n            # Fill the top row\n            for i in range(left, right + 1):\n                matrix[top][i] = num\n                num += 1\n                \n            top += 1\n            \n            # Fill the right column\n            for i in range(top, bottom + 1):\n                matrix[i][right] = num\n                num += 1\n                \n            right -= 1\n            \n            # Fill the bottom row\n            for i in range(right, left - 1, -1):\n                matrix[bottom][i] = num\n                num += 1\n                \n            bottom -= 1\n            \n            # Fill the left column\n            for i in range(bottom, top - 1, -1):\n                matrix[i][left] = num\n                num += 1\n                \n            left += 1\n            \n        return matrix"}, {"task_id": "spiral-matrix-ii", "completion": "class Solution(object):\n    def generateMatrix(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. Create a matrix of size n x n\n        matrix = [[0 for i in range(n)] for j in range(n)]\n        \n        # 2. Initialize the variables\n        top = 0\n        bottom = n - 1\n        left = 0\n        right = n - 1\n        num = 1\n        \n        # 3. Iterate through the matrix\n        while top <= bottom and left <= right:\n            \n            # 4. Fill the top row\n            for i in range(left, right + 1):\n                matrix[top][i] = num\n                num += 1\n                \n            top += 1\n            \n            # 5. Fill the right column\n            for i in range(top, bottom + 1):\n                matrix[i][right] = num\n                num += 1\n                \n            right -= 1\n            \n            # 6. Fill the bottom row\n            for i in range(right, left - 1, -1):\n                matrix[bottom][i] = num\n                num += 1\n                \n            bottom -= 1\n            \n            # 7. Fill the left column\n            for i in range(bottom, top - 1, -1):\n                matrix[i][left] = num\n                num += 1\n                \n            left += 1\n            \n        return matrix"}, {"task_id": "spiral-matrix-ii", "completion": "class Solution(object):\n    def generateMatrix(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. Create a matrix of size n x n\n        matrix = [[0 for i in range(n)] for j in range(n)]\n        \n        # 2. Initialize the variables\n        top = 0\n        bottom = n - 1\n        left = 0\n        right = n - 1\n        num = 1\n        \n        # 3. Iterate through the matrix\n        while top <= bottom and left <= right:\n            \n            # 4. Fill the top row\n            for i in range(left, right + 1):\n                matrix[top][i] = num\n                num += 1\n                \n            top += 1\n            \n            # 5. Fill the right column\n            for i in range(top, bottom + 1):\n                matrix[i][right] = num\n                num += 1\n                \n            right -= 1\n            \n            # 6. Fill the bottom row\n            for i in range(right, left - 1, -1):\n                matrix[bottom][i] = num\n                num += 1\n                \n            bottom -= 1\n            \n            # 7. Fill the left column\n            for i in range(bottom, top - 1, -1):\n                matrix[i][left] = num\n                num += 1\n                \n            left += 1\n            \n        return matrix"}], "reverse-integer": [{"task_id": "reverse-integer", "completion": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u5224\u65ad\u662f\u5426\u4e3a\u8d1f\u6570\n        if x < 0:\n            x = -x\n            sign = -1\n        else:\n            sign = 1\n        \n        # 2. \u5c06x\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n        x = str(x)\n        \n        # 3. \u5c06\u5b57\u7b26\u4e32\u53cd\u8f6c\n        x = x[::-1]\n        \n        # 4. \u5224\u65ad\u662f\u5426\u8d8a\u754c\n        if x[0] == '-':\n            x = '-' + x[1:]\n        else:\n            x = x[0] + x[1:]\n        \n        # 5. \u5224\u65ad\u662f\u5426\u4e3a\u8d1f\u6570\n        if sign == -1:\n            x = -int(x)\n        else:\n            x = int(x)\n        \n        # 6. \u5224\u65ad\u662f\u5426\u8d8a\u754c\n        if x > 2**31 - 1 or x < -2**31:\n            return 0\n        else:\n            return x"}, {"task_id": "reverse-integer", "completion": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u5224\u65ad\u662f\u5426\u4e3a\u8d1f\u6570\n        if x < 0:\n            x = -x\n            sign = -1\n        else:\n            sign = 1\n        \n        # 2. \u5c06x\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n        x = str(x)\n        \n        # 3. \u53cd\u8f6c\u5b57\u7b26\u4e32\n        x = x[::-1]\n        \n        # 4. \u5224\u65ad\u662f\u5426\u8d8a\u754c\n        if x[0] == '-':\n            x = '-' + x[1:]\n        else:\n            x = x[0] + x[1:]\n        \n        # 5. \u5224\u65ad\u662f\u5426\u4e3a\u8d1f\u6570\n        if sign == -1:\n            x = -int(x)\n        else:\n            x = int(x)\n        \n        # 6. \u5224\u65ad\u662f\u5426\u8d8a\u754c\n        if x > 2**31 - 1 or x < -2**31:\n            return 0\n        else:\n            return x"}, {"task_id": "reverse-integer", "completion": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u5224\u65ad\u662f\u5426\u4e3a\u8d1f\u6570\n        if x < 0:\n            x = -x\n            sign = -1\n        else:\n            sign = 1\n        \n        # 2. \u5c06x\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n        x = str(x)\n        \n        # 3. \u5c06\u5b57\u7b26\u4e32\u53cd\u8f6c\n        x = x[::-1]\n        \n        # 4. \u5224\u65ad\u662f\u5426\u8d8a\u754c\n        if x[0] == '-':\n            x = '-' + x[1:]\n        else:\n            x = x[0] + x[1:]\n        \n        # 5. \u5224\u65ad\u662f\u5426\u4e3a\u8d1f\u6570\n        if sign == -1:\n            x = -int(x)\n        else:\n            x = int(x)\n        \n        # 6. \u5224\u65ad\u662f\u5426\u8d8a\u754c\n        if x > 2**31 - 1 or x < -2**31:\n            return 0\n        else:\n            return x"}, {"task_id": "reverse-integer", "completion": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u5224\u65ad\u662f\u5426\u4e3a\u8d1f\u6570\n        if x < 0:\n            x = -x\n            sign = -1\n        else:\n            sign = 1\n        \n        # 2. \u5c06x\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n        x = str(x)\n        \n        # 3. \u53cd\u8f6c\u5b57\u7b26\u4e32\n        x = x[::-1]\n        \n        # 4. \u5224\u65ad\u662f\u5426\u8d8a\u754c\n        if x[0] == '-':\n            x = '-' + x[1:]\n        else:\n            x = x[0] + x[1:]\n        \n        # 5. \u5224\u65ad\u662f\u5426\u4e3a\u8d1f\u6570\n        if sign == -1:\n            x = -int(x)\n        else:\n            x = int(x)\n        \n        # 6. \u5224\u65ad\u662f\u5426\u8d8a\u754c\n        if x > 2**31 - 1 or x < -2**31:\n            return 0\n        else:\n            return x"}, {"task_id": "reverse-integer", "completion": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u5224\u65ad\u662f\u5426\u4e3a\u8d1f\u6570\n        if x < 0:\n            x = -x\n            sign = -1\n        else:\n            sign = 1\n        \n        # 2. \u5c06x\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n        x = str(x)\n        \n        # 3. \u5c06\u5b57\u7b26\u4e32\u53cd\u8f6c\n        x = x[::-1]\n        \n        # 4. \u5224\u65ad\u662f\u5426\u8d8a\u754c\n        if x[0] == '-':\n            x = '-' + x[1:]\n        else:\n            x = x[0] + x[1:]\n        \n        # 5. \u5224\u65ad\u662f\u5426\u4e3a\u8d1f\u6570\n        if sign == -1:\n            x = -int(x)\n        else:\n            x = int(x)\n        \n        # 6. \u5224\u65ad\u662f\u5426\u8d8a\u754c\n        if x > 2**31 - 1 or x < -2**31:\n            return 0\n        else:\n            return x"}], "rotate-image": [{"task_id": "rotate-image", "completion": "class Solution(object):\n    def rotate(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        # 1. reverse the matrix\n        for i in range(len(matrix)):\n            for j in range(i, len(matrix)):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n        \n        # 2. reverse each row\n        for i in range(len(matrix)):\n            for j in range(len(matrix[i])//2):\n                matrix[i][j], matrix[i][-j-1] = matrix[i][-j-1], matrix[i][j]\n        \n        # 3. reverse the matrix\n        for i in range(len(matrix)):\n            for j in range(i, len(matrix)):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]"}, {"task_id": "rotate-image", "completion": "class Solution(object):\n    def rotate(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        # 1. \u5148\u628a\u77e9\u9635\u8f6c\u7f6e\n        # 2. \u518d\u628a\u77e9\u9635\u7684\u6bcf\u4e00\u884c\u7ffb\u8f6c\n        # 3. \u628a\u77e9\u9635\u8f6c\u7f6e\u56de\u6765\n        # 4. \u628a\u77e9\u9635\u7684\u6bcf\u4e00\u884c\u7ffb\u8f6c\n        # 5. \u628a\u77e9\u9635\u8f6c\u7f6e\u56de\u6765\n        # 6. \u628a\u77e9\u9635\u7684\u6bcf\u4e00\u884c\u7ffb\u8f6c\n        # 7. \u628a\u77e9\u9635\u8f6c\u7f6e\u56de\u6765\n        # 8. \u628a\u77e9\u9635\u7684\u6bcf\u4e00\u884c\u7ffb\u8f6c\n        # 9. \u628a\u77e9\u9635\u8f6c\u7f6e\u56de\u6765\n        # 10. \u628a\u77e9\u9635\u7684\u6bcf\u4e00\u884c\u7ffb\u8f6c\n        # 11. \u628a\u77e9\u9635\u8f6c\u7f6e\u56de\u6765\n        # 12. \u628a\u77e9\u9635\u7684\u6bcf\u4e00\u884c\u7ffb\u8f6c\n        # 13. \u628a\u77e9\u9635\u8f6c\u7f6e\u56de\u6765\n        # 14. \u628a\u77e9\u9635\u7684\u6bcf\u4e00\u884c\u7ffb\u8f6c\n        # 15. \u628a\u77e9\u9635\u8f6c\u7f6e\u56de\u6765\n        # 16. \u628a\u77e9\u9635\u7684\u6bcf\u4e00\u884c\u7ffb\u8f6c\n        # 17. \u628a\u77e9\u9635\u8f6c\u7f6e\u56de\u6765\n        # 18. \u628a\u77e9\u9635\u7684\u6bcf\u4e00\u884c\u7ffb\u8f6c\n        # 19. \u628a\u77e9\u9635\u8f6c\u7f6e\u56de\u6765\n        # 20. \u628a\u77e9\u9635\u7684\u6bcf\u4e00\u884c\u7ffb\u8f6c\n        # 21. \u628a\u77e9\u9635\u8f6c\u7f6e\u56de\u6765\n        # 22. \u628a\u77e9\u9635\u7684\u6bcf\u4e00\u884c\u7ffb\u8f6c\n        # 23. \u628a\u77e9\u9635\u8f6c\u7f6e\u56de\u6765\n        # 24. \u628a\u77e9\u9635\u7684\u6bcf\u4e00\u884c\u7ffb\u8f6c\n        # 25. \u628a\u77e9\u9635\u8f6c\u7f6e\u56de\u6765\n        # 26. \u628a\u77e9\u9635\u7684\u6bcf\u4e00\u884c\u7ffb\u8f6c\n        # 27. \u628a\u77e9\u9635\u8f6c\u7f6e\u56de\u6765\n        # 28. \u628a\u77e9\u9635\u7684\u6bcf\u4e00\u884c\u7ffb\u8f6c\n        # 29. \u628a\u77e9\u9635\u8f6c\u7f6e\u56de\u6765\n        # 30. \u628a\u77e9\u9635\u7684\u6bcf\u4e00\u884c\u7ffb\u8f6c\n        # 31. \u628a\u77e9\u9635\u8f6c\u7f6e\u56de\u6765\n        # 32. \u628a\u77e9\u9635\u7684\u6bcf\u4e00\u884c\u7ffb\u8f6c\n        # 33. \u628a\u77e9\u9635\u8f6c\u7f6e\u56de\u6765\n        # 34. \u628a\u77e9\u9635\u7684\u6bcf\u4e00\u884c\u7ffb\u8f6c\n        # 35. \u628a\u77e9\u9635\u8f6c\u7f6e\u56de\u6765\n        # 36. \u628a\u77e9\u9635\u7684\u6bcf\u4e00\u884c\u7ffb\u8f6c\n        # 37. \u628a\u77e9\u9635\u8f6c\u7f6e\u56de\u6765\n        # 38. \u628a\u77e9\u9635\u7684\u6bcf\u4e00\u884c\u7ffb\u8f6c\n        # 39. \u628a\u77e9\u9635\u8f6c\u7f6e\u56de\u6765\n        # 40. \u628a\u77e9\u9635\u7684\u6bcf\u4e00\u884c\u7ffb\u8f6c\n        # 41. \u628a\u77e9\u9635\u8f6c\u7f6e\u56de\u6765\n        # 42. \u628a\u77e9\u9635\u7684\u6bcf\u4e00\u884c\u7ffb\u8f6c\n        # 43. \u628a\u77e9\u9635\u8f6c\u7f6e\u56de\u6765\n        # 44. \u628a\u77e9\u9635\u7684\u6bcf\u4e00\u884c\u7ffb\u8f6c\n        # 45. \u628a\u77e9\u9635\u8f6c\u7f6e\u56de\u6765"}, {"task_id": "rotate-image", "completion": "class Solution(object):\n    def rotate(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        # 1. \u5148\u628a\u77e9\u9635\u8f6c\u7f6e\n        for i in range(len(matrix)):\n            for j in range(i, len(matrix)):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n        \n        # 2. \u518d\u628a\u77e9\u9635\u7684\u6bcf\u4e00\u884c\u7ffb\u8f6c\n        for i in range(len(matrix)):\n            for j in range(len(matrix)//2):\n                matrix[i][j], matrix[i][-j-1] = matrix[i][-j-1], matrix[i][j]"}, {"task_id": "rotate-image", "completion": "class Solution(object):\n    def rotate(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        # 1. reverse the matrix\n        # 2. transpose the matrix\n        # 3. reverse the matrix\n        \n        # reverse the matrix\n        for i in range(len(matrix)):\n            for j in range(i, len(matrix[i])):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n        \n        # transpose the matrix\n        for i in range(len(matrix)):\n            for j in range(i, len(matrix[i])):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n        \n        # reverse the matrix\n        for i in range(len(matrix)):\n            for j in range(i, len(matrix[i])):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n        \n        return matrix"}, {"task_id": "rotate-image", "completion": "class Solution(object):\n    def rotate(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        # 1. \u5148\u628a\u77e9\u9635\u8f6c\u7f6e\n        # 2. \u518d\u628a\u77e9\u9635\u7684\u6bcf\u4e00\u884c\u7ffb\u8f6c\n        # 3. \u628a\u77e9\u9635\u8f6c\u7f6e\u56de\u6765\n        # 4. \u628a\u77e9\u9635\u7684\u6bcf\u4e00\u884c\u7ffb\u8f6c\n        # 5. \u628a\u77e9\u9635\u8f6c\u7f6e\u56de\u6765\n        # 6. \u628a\u77e9\u9635\u7684\u6bcf\u4e00\u884c\u7ffb\u8f6c\n        # 7. \u628a\u77e9\u9635\u8f6c\u7f6e\u56de\u6765\n        # 8. \u628a\u77e9\u9635\u7684\u6bcf\u4e00\u884c\u7ffb\u8f6c\n        # 9. \u628a\u77e9\u9635\u8f6c\u7f6e\u56de\u6765\n        # 10. \u628a\u77e9\u9635\u7684\u6bcf\u4e00\u884c\u7ffb\u8f6c\n        # 11. \u628a\u77e9\u9635\u8f6c\u7f6e\u56de\u6765\n        # 12. \u628a\u77e9\u9635\u7684\u6bcf\u4e00\u884c\u7ffb\u8f6c\n        # 13. \u628a\u77e9\u9635\u8f6c\u7f6e\u56de\u6765\n        # 14. \u628a\u77e9\u9635\u7684\u6bcf\u4e00\u884c\u7ffb\u8f6c\n        # 15. \u628a\u77e9\u9635\u8f6c\u7f6e\u56de\u6765\n        # 16. \u628a\u77e9\u9635\u7684\u6bcf\u4e00\u884c\u7ffb\u8f6c\n        # 17. \u628a\u77e9\u9635\u8f6c\u7f6e\u56de\u6765\n        # 18. \u628a\u77e9\u9635\u7684\u6bcf\u4e00\u884c\u7ffb\u8f6c\n        # 19. \u628a\u77e9\u9635\u8f6c\u7f6e\u56de\u6765\n        # 20. \u628a\u77e9\u9635\u7684\u6bcf\u4e00\u884c\u7ffb\u8f6c\n        # 21. \u628a\u77e9\u9635\u8f6c\u7f6e\u56de\u6765\n        # 22. \u628a\u77e9\u9635\u7684\u6bcf\u4e00\u884c\u7ffb\u8f6c\n        # 23. \u628a\u77e9\u9635\u8f6c\u7f6e\u56de\u6765\n        # 24. \u628a\u77e9\u9635\u7684\u6bcf\u4e00\u884c\u7ffb\u8f6c\n        # 25. \u628a\u77e9\u9635\u8f6c\u7f6e\u56de\u6765\n        # 26. \u628a\u77e9\u9635\u7684\u6bcf\u4e00\u884c\u7ffb\u8f6c\n        # 27. \u628a\u77e9\u9635\u8f6c\u7f6e\u56de\u6765\n        # 28. \u628a\u77e9\u9635\u7684\u6bcf\u4e00\u884c\u7ffb\u8f6c\n        # 29. \u628a\u77e9\u9635\u8f6c\u7f6e\u56de\u6765\n        # 30. \u628a\u77e9\u9635\u7684\u6bcf\u4e00\u884c\u7ffb\u8f6c\n        # 31. \u628a\u77e9\u9635\u8f6c\u7f6e\u56de\u6765\n        # 32. \u628a\u77e9\u9635\u7684\u6bcf\u4e00\u884c\u7ffb\u8f6c\n        # 33. \u628a\u77e9\u9635\u8f6c\u7f6e\u56de\u6765\n        # 34. \u628a\u77e9\u9635\u7684\u6bcf\u4e00\u884c\u7ffb\u8f6c\n        # 35. \u628a\u77e9\u9635\u8f6c\u7f6e\u56de\u6765\n        # 36. \u628a\u77e9\u9635\u7684\u6bcf\u4e00\u884c\u7ffb\u8f6c\n        # 37. \u628a\u77e9\u9635\u8f6c\u7f6e\u56de\u6765\n        # 38. \u628a\u77e9\u9635\u7684\u6bcf\u4e00\u884c\u7ffb\u8f6c\n        # 39. \u628a\u77e9\u9635\u8f6c\u7f6e\u56de\u6765\n        # 40. \u628a\u77e9\u9635\u7684\u6bcf\u4e00\u884c\u7ffb\u8f6c\n        # 41. \u628a\u77e9\u9635\u8f6c\u7f6e\u56de\u6765\n        # 42. \u628a\u77e9\u9635\u7684\u6bcf\u4e00\u884c\u7ffb\u8f6c\n        # 43. \u628a\u77e9\u9635\u8f6c\u7f6e\u56de\u6765\n        # 44. \u628a\u77e9\u9635\u7684\u6bcf\u4e00\u884c\u7ffb\u8f6c\n        # 45. \u628a\u77e9\u9635\u8f6c\u7f6e\u56de\u6765"}], "maximum-product-subarray": [{"task_id": "maximum-product-subarray", "completion": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Time Limit Exceeded\n        # return max(reduce(lambda x, y: x*y, nums), reduce(lambda x, y: x*y, nums[::-1]))\n        \n        # Time Limit Exceeded\n        # return max(reduce(lambda x, y: x*y, nums), reduce(lambda x, y: x*y, nums[::-1]), reduce(lambda x, y: x*y, nums[1:]), reduce(lambda x, y: x*y, nums[:-1]))\n        \n        # Time Limit Exceeded\n        # return max(reduce(lambda x, y: x*y, nums), reduce(lambda x, y: x*y, nums[::-1]), reduce(lambda x, y: x*y, nums[1:]), reduce(lambda x, y: x*y, nums[:-1]), reduce(lambda x, y: x*y, nums[1:-1]))\n        \n        # Time Limit Exceeded\n        # return max(reduce(lambda x, y: x*y, nums), reduce(lambda x, y: x*y, nums[::-1]), reduce(lambda x, y: x*y, nums[1:]), reduce(lambda x, y: x*y, nums[:-1]), reduce(lambda x, y: x*y, nums[1:-1]), reduce(lambda x, y: x*y, nums[2:]), reduce(lambda x, y: x*y, nums[:-2]))\n        \n        # Time Limit Exceeded\n        # return max(reduce(lambda x, y: x*y, nums), reduce(lambda x, y: x*y, nums[::-1]), reduce(lambda x, y: x*y, nums[1:]), reduce(lambda x, y: x*y, nums[:-1]), reduce(lambda x, y: x*y, nums[1:-1]), reduce(lambda x, y: x*y, nums[2:]), reduce(lambda x, y: x*y, nums[:-2]), reduce(lambda x, y: x*y, nums[3:]), reduce(lambda x, y: x*y, nums[:-3]))\n        \n        # Time Limit Exceeded\n        # return max(reduce(lambda x, y: x*y, nums), reduce(lambda x, y: x*y, nums[::-1]), reduce(lambda x, y: x*y, nums[1:]), reduce(lambda x, y: x*y, nums[:-1]), reduce(lambda x, y: x*y, nums[1:-1]), reduce(lambda x, y: x*y, nums[2:]), reduce(lambda x, y: x*y, nums[:-2]), reduce(lambda x, y: x*y, nums[3:]), reduce(lambda x, y: x*y, nums[:-3]), reduce(lambda x, y: x*y, nums[4:]), reduce(lambda x, y: x*y, nums[:-4]))\n        \n        # Time Limit Exceeded\n        # return max(reduce(lambda x, y: x*y, nums), reduce(lambda x, y: x*y, nums[::-1]), reduce(lambda x, y: x*y, nums[1:]), reduce(lambda x, y: x*y, nums[:-1]), reduce(lambda x, y: x*y, nums[1:-1]), reduce(lambda x, y: x*y, nums[2:]), reduce(lambda x, y: x*y, nums[:-2]), reduce(lambda x, y: x*y, nums[3:]), reduce(lambda x, y: x*y, nums[:-3]), reduce(lambda x, y: x*y, nums[4:]), reduce(lambda x, y: x*y, nums[:-4]), reduce(lambda x, y: x*y, nums[5:]), reduce(lambda x, y: x*y, nums[:-5]))\n        \n        # Time Limit Exceeded\n        # return max(reduce(lambda x, y: x*y, nums), reduce(lambda x, y: x*y, nums[::-1]), reduce"}, {"task_id": "maximum-product-subarray", "completion": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Time Limit Exceeded\n        # max_product = nums[0]\n        # for i in range(1, len(nums)):\n        #     max_product = max(max_product, nums[i])\n        #     nums[i] = max(nums[i], nums[i] * max_product)\n        # return max_product\n        \n        # Time Limit Exceeded\n        # max_product = nums[0]\n        # for i in range(1, len(nums)):\n        #     max_product = max(max_product, nums[i])\n        #     nums[i] = min(nums[i], nums[i] * max_product)\n        # return max_product\n        \n        # Time Limit Exceeded\n        # max_product = nums[0]\n        # for i in range(1, len(nums)):\n        #     max_product = max(max_product, nums[i])\n        #     nums[i] = min(nums[i], nums[i] * max_product)\n        # return max_product\n        \n        # Time Limit Exceeded\n        # max_product = nums[0]\n        # for i in range(1, len(nums)):\n        #     max_product = max(max_product, nums[i])\n        #     nums[i] = min(nums[i], nums[i] * max_product)\n        # return max_product\n        \n        # Time Limit Exceeded\n        # max_product = nums[0]\n        # for i in range(1, len(nums)):\n        #     max_product = max(max_product, nums[i])\n        #     nums[i] = min(nums[i], nums[i] * max_product)\n        # return max_product\n        \n        # Time Limit Exceeded\n        # max_product = nums[0]\n        # for i in range(1, len(nums)):\n        #     max_product = max(max_product, nums[i])\n        #     nums[i] = min(nums[i], nums[i] * max_product)\n        # return max_product\n        \n        # Time Limit Exceeded\n        # max_product = nums[0]\n        # for i in range(1, len(nums)):\n        #     max_product = max(max_product, nums[i])\n        #     nums[i] = min(nums[i], nums[i] * max_product)\n        # return max_product\n        \n        # Time Limit Exceeded\n        # max_product = nums[0]\n        # for i in range(1, len(nums)):\n        #     max_product = max(max_product, nums[i])\n        #     nums[i] = min(nums[i], nums[i] * max_product)\n        # return max_product\n        \n        # Time Limit Exceeded\n        # max_product = nums[0]\n        # for i in range(1, len(nums)):\n        #     max_product = max(max_product, nums[i])\n        #     nums[i] = min(nums[i], nums[i] * max_product)\n        # return max_product\n        \n        # Time Limit Exceeded\n        # max_product = nums[0]\n        # for i in range(1, len(nums)):\n        #     max_product = max(max_product, nums[i])\n        #     nums[i] = min(nums[i], nums[i] * max_product)\n        # return max_product\n        \n        # Time Limit Exceeded\n        # max_product = nums[0]\n        # for i in range(1, len(nums)):\n        #     max_product = max(max_product, nums[i])\n        #     nums[i] = min(nums[i], nums[i] * max_product)\n        # return max_product\n        \n        # Time Limit Exceeded\n        # max_product = nums[0]\n        #"}, {"task_id": "maximum-product-subarray", "completion": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Time Limit Exceeded\n        # max_product = nums[0]\n        # for i in range(1, len(nums)):\n        #     max_product = max(max_product, nums[i])\n        #     nums[i] = max(nums[i], nums[i] * max_product)\n        # return max_product\n        \n        # Time Limit Exceeded\n        # max_product = nums[0]\n        # for i in range(1, len(nums)):\n        #     max_product = max(max_product, nums[i])\n        #     nums[i] = min(nums[i], nums[i] * max_product)\n        # return max_product\n        \n        # Time Limit Exceeded\n        # max_product = nums[0]\n        # for i in range(1, len(nums)):\n        #     max_product = max(max_product, nums[i])\n        #     nums[i] = min(nums[i], nums[i] * max_product)\n        # return max_product\n        \n        # Time Limit Exceeded\n        # max_product = nums[0]\n        # for i in range(1, len(nums)):\n        #     max_product = max(max_product, nums[i])\n        #     nums[i] = min(nums[i], nums[i] * max_product)\n        # return max_product\n        \n        # Time Limit Exceeded\n        # max_product = nums[0]\n        # for i in range(1, len(nums)):\n        #     max_product = max(max_product, nums[i])\n        #     nums[i] = min(nums[i], nums[i] * max_product)\n        # return max_product\n        \n        # Time Limit Exceeded\n        # max_product = nums[0]\n        # for i in range(1, len(nums)):\n        #     max_product = max(max_product, nums[i])\n        #     nums[i] = min(nums[i], nums[i] * max_product)\n        # return max_product\n        \n        # Time Limit Exceeded\n        # max_product = nums[0]\n        # for i in range(1, len(nums)):\n        #     max_product = max(max_product, nums[i])\n        #     nums[i] = min(nums[i], nums[i] * max_product)\n        # return max_product\n        \n        # Time Limit Exceeded\n        # max_product = nums[0]\n        # for i in range(1, len(nums)):\n        #     max_product = max(max_product, nums[i])\n        #     nums[i] = min(nums[i], nums[i] * max_product)\n        # return max_product\n        \n        # Time Limit Exceeded\n        # max_product = nums[0]\n        # for i in range(1, len(nums)):\n        #     max_product = max(max_product, nums[i])\n        #     nums[i] = min(nums[i], nums[i] * max_product)\n        # return max_product\n        \n        # Time Limit Exceeded\n        # max_product = nums[0]\n        # for i in range(1, len(nums)):\n        #     max_product = max(max_product, nums[i])\n        #     nums[i] = min(nums[i], nums[i] * max_product)\n        # return max_product\n        \n        # Time Limit Exceeded\n        # max_product = nums[0]\n        # for i in range(1, len(nums)):\n        #     max_product = max(max_product, nums[i])\n        #     nums[i] = min(nums[i], nums[i] * max_product)\n        # return max_product\n        \n        # Time Limit Exceeded\n        # max_product = nums[0]\n        #"}, {"task_id": "maximum-product-subarray", "completion": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Time Limit Exceeded\n        # max_product = nums[0]\n        # for i in range(1, len(nums)):\n        #     max_product = max(max_product, nums[i])\n        #     nums[i] = max(nums[i], nums[i] * max_product)\n        # return max_product\n        \n        # Time Limit Exceeded\n        # max_product = nums[0]\n        # for i in range(1, len(nums)):\n        #     max_product = max(max_product, nums[i])\n        #     nums[i] = min(nums[i], nums[i] * max_product)\n        # return max_product\n        \n        # Time Limit Exceeded\n        # max_product = nums[0]\n        # for i in range(1, len(nums)):\n        #     max_product = max(max_product, nums[i])\n        #     nums[i] = min(nums[i], nums[i] * max_product)\n        # return max_product\n        \n        # Time Limit Exceeded\n        # max_product = nums[0]\n        # for i in range(1, len(nums)):\n        #     max_product = max(max_product, nums[i])\n        #     nums[i] = min(nums[i], nums[i] * max_product)\n        # return max_product\n        \n        # Time Limit Exceeded\n        # max_product = nums[0]\n        # for i in range(1, len(nums)):\n        #     max_product = max(max_product, nums[i])\n        #     nums[i] = min(nums[i], nums[i] * max_product)\n        # return max_product\n        \n        # Time Limit Exceeded\n        # max_product = nums[0]\n        # for i in range(1, len(nums)):\n        #     max_product = max(max_product, nums[i])\n        #     nums[i] = min(nums[i], nums[i] * max_product)\n        # return max_product\n        \n        # Time Limit Exceeded\n        # max_product = nums[0]\n        # for i in range(1, len(nums)):\n        #     max_product = max(max_product, nums[i])\n        #     nums[i] = min(nums[i], nums[i] * max_product)\n        # return max_product\n        \n        # Time Limit Exceeded\n        # max_product = nums[0]\n        # for i in range(1, len(nums)):\n        #     max_product = max(max_product, nums[i])\n        #     nums[i] = min(nums[i], nums[i] * max_product)\n        # return max_product\n        \n        # Time Limit Exceeded\n        # max_product = nums[0]\n        # for i in range(1, len(nums)):\n        #     max_product = max(max_product, nums[i])\n        #     nums[i] = min(nums[i], nums[i] * max_product)\n        # return max_product\n        \n        # Time Limit Exceeded\n        # max_product = nums[0]\n        # for i in range(1, len(nums)):\n        #     max_product = max(max_product, nums[i])\n        #     nums[i] = min(nums[i], nums[i] * max_product)\n        # return max_product\n        \n        # Time Limit Exceeded\n        # max_product = nums[0]\n        # for i in range(1, len(nums)):\n        #     max_product = max(max_product, nums[i])\n        #     nums[i] = min(nums[i], nums[i] * max_product)\n        # return max_product\n        \n        # Time Limit Exceeded\n        # max_product = nums[0]\n        #"}, {"task_id": "maximum-product-subarray", "completion": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Time Limit Exceeded\n        # max_product = nums[0]\n        # for i in range(1, len(nums)):\n        #     max_product = max(max_product, nums[i])\n        #     nums[i] = max(nums[i], nums[i] * max_product)\n        # return max_product\n        \n        # Time Limit Exceeded\n        # max_product = nums[0]\n        # for i in range(1, len(nums)):\n        #     max_product = max(max_product, nums[i])\n        #     nums[i] = min(nums[i], nums[i] * max_product)\n        # return max_product\n        \n        # Time Limit Exceeded\n        # max_product = nums[0]\n        # min_product = nums[0]\n        # for i in range(1, len(nums)):\n        #     max_product = max(max_product, nums[i])\n        #     min_product = min(min_product, nums[i])\n        #     nums[i] = max_product * min_product\n        # return max_product\n        \n        # Time Limit Exceeded\n        # max_product = nums[0]\n        # min_product = nums[0]\n        # for i in range(1, len(nums)):\n        #     max_product = max(max_product, nums[i])\n        #     min_product = min(min_product, nums[i])\n        #     nums[i] = max_product * min_product\n        # return max_product\n        \n        # Time Limit Exceeded\n        # max_product = nums[0]\n        # min_product = nums[0]\n        # for i in range(1, len(nums)):\n        #     max_product = max(max_product, nums[i])\n        #     min_product = min(min_product, nums[i])\n        #     nums[i] = max_product * min_product\n        # return max_product\n        \n        # Time Limit Exceeded\n        # max_product = nums[0]\n        # min_product = nums[0]\n        # for i in range(1, len(nums)):\n        #     max_product = max(max_product, nums[i])\n        #     min_product = min(min_product, nums[i])\n        #     nums[i] = max_product * min_product\n        # return max_product\n        \n        # Time Limit Exceeded\n        # max_product = nums[0]\n        # min_product = nums[0]\n        # for i in range(1, len(nums)):\n        #     max_product = max(max_product, nums[i])\n        #     min_product = min(min_product, nums[i])\n        #     nums[i] = max_product * min_product\n        # return max_product\n        \n        # Time Limit Exceeded\n        # max_product = nums[0]\n        # min_product = nums[0]\n        # for i in range(1, len(nums)):\n        #     max_product = max(max_product, nums[i])\n        #     min_product = min(min_product, nums[i])\n        #     nums[i] = max_product * min_product\n        # return max_product\n        \n        # Time Limit Exceeded\n        # max_product = nums[0]\n        # min_product = nums[0]\n        # for i in range(1, len(nums)):\n        #     max_product = max(max_product, nums[i])\n        #     min_product = min(min_product, nums[i])\n        #     nums[i] = max_product * min_product\n        # return max_product\n        \n        # Time Limit Exceeded\n        # max_product = nums[0]\n        # min_product = nums[0]\n        # for i in range(1, len(nums)):\n        #     max_product = max(max"}], "frog-jump": [{"task_id": "frog-jump", "completion": "class Solution(object):\n    def canCross(self, stones):\n        \"\"\"\n        :type stones: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u540e\u4e00\u4e2a\u77f3\u5934\n        last_stone = stones[-1]\n        \n        # 2. \u627e\u5230\u6700\u540e\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\n        last_stone_prev = stones[-2]\n        \n        # 3. \u627e\u5230\u6700\u540e\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\n        last_stone_prev_prev = stones[-3]\n        \n        # 4. \u5982\u679c\u6700\u540e\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3"}, {"task_id": "frog-jump", "completion": "class Solution(object):\n    def canCross(self, stones):\n        \"\"\"\n        :type stones: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u5148\u628a\u77f3\u5934\u7684\u4f4d\u7f6e\u5b58\u5230\u5b57\u5178\u91cc\n        # 2. \u4ece\u7b2c\u4e00\u4e2a\u77f3\u5934\u5f00\u59cb\uff0c\u6bcf\u6b21\u8df3\u8dc3\uff0c\u5982\u679c\u8df3\u8dc3\u7684\u8ddd\u79bb\u5728\u5b57\u5178\u91cc\uff0c\u5c31\u7ee7\u7eed\u8df3\u8dc3\uff0c\u76f4\u5230\u8df3\u5230\u6700\u540e\u4e00\u4e2a\u77f3\u5934\n        # 3. \u5982\u679c\u8df3\u8dc3\u7684\u8ddd\u79bb\u4e0d\u5728\u5b57\u5178\u91cc\uff0c\u5c31\u8fd4\u56deFalse\n        # 4. \u5982\u679c\u8df3\u5230\u6700\u540e\u4e00\u4e2a\u77f3\u5934\uff0c\u5c31\u8fd4\u56deTrue\n        # 5. \u5982\u679c\u8df3\u5230\u6700\u540e\u4e00\u4e2a\u77f3\u5934\uff0c\u5c31\u8fd4\u56deTrue\n        # 6. \u5982\u679c\u8df3\u5230\u6700\u540e\u4e00\u4e2a\u77f3\u5934\uff0c\u5c31\u8fd4\u56deTrue\n        # 7. \u5982\u679c\u8df3\u5230\u6700\u540e\u4e00\u4e2a\u77f3\u5934\uff0c\u5c31\u8fd4\u56deTrue\n        # 8. \u5982\u679c\u8df3\u5230\u6700\u540e\u4e00\u4e2a\u77f3\u5934\uff0c\u5c31\u8fd4\u56deTrue\n        # 9. \u5982\u679c\u8df3\u5230\u6700\u540e\u4e00\u4e2a\u77f3\u5934\uff0c\u5c31\u8fd4\u56deTrue\n        # 10. \u5982\u679c\u8df3\u5230\u6700\u540e\u4e00\u4e2a\u77f3\u5934\uff0c\u5c31\u8fd4\u56deTrue\n        # 11. \u5982\u679c\u8df3\u5230\u6700\u540e\u4e00\u4e2a\u77f3\u5934\uff0c\u5c31\u8fd4\u56deTrue\n        # 12. \u5982\u679c\u8df3\u5230\u6700\u540e\u4e00\u4e2a\u77f3\u5934\uff0c\u5c31\u8fd4\u56deTrue\n        # 13. \u5982\u679c\u8df3\u5230\u6700\u540e\u4e00\u4e2a\u77f3\u5934\uff0c\u5c31\u8fd4\u56deTrue\n        # 14. \u5982\u679c\u8df3\u5230\u6700\u540e\u4e00\u4e2a\u77f3\u5934\uff0c\u5c31\u8fd4\u56deTrue\n        # 15. \u5982\u679c\u8df3\u5230\u6700\u540e\u4e00\u4e2a\u77f3\u5934\uff0c\u5c31\u8fd4\u56deTrue\n        # 16. \u5982\u679c\u8df3\u5230\u6700\u540e\u4e00\u4e2a\u77f3\u5934\uff0c\u5c31\u8fd4\u56deTrue\n        # 17. \u5982\u679c\u8df3\u5230\u6700\u540e\u4e00\u4e2a\u77f3\u5934\uff0c\u5c31\u8fd4\u56deTrue\n        # 18. \u5982\u679c\u8df3\u5230\u6700\u540e\u4e00\u4e2a\u77f3\u5934\uff0c\u5c31\u8fd4\u56deTrue\n        # 19. \u5982\u679c\u8df3\u5230\u6700\u540e\u4e00\u4e2a\u77f3\u5934\uff0c\u5c31\u8fd4\u56deTrue\n        # 20. \u5982\u679c\u8df3\u5230\u6700\u540e\u4e00\u4e2a\u77f3\u5934\uff0c\u5c31\u8fd4\u56deTrue\n        # 21. \u5982\u679c\u8df3\u5230\u6700\u540e\u4e00\u4e2a\u77f3\u5934\uff0c\u5c31\u8fd4\u56deTrue\n        # 22. \u5982\u679c\u8df3\u5230\u6700\u540e\u4e00\u4e2a\u77f3\u5934\uff0c\u5c31\u8fd4\u56deTrue\n        # 23. \u5982\u679c\u8df3\u5230\u6700\u540e\u4e00\u4e2a\u77f3\u5934\uff0c\u5c31\u8fd4\u56deTrue\n        # 24. \u5982\u679c\u8df3\u5230\u6700\u540e\u4e00\u4e2a\u77f3\u5934\uff0c\u5c31\u8fd4\u56deTrue\n        # 25. \u5982\u679c\u8df3\u5230\u6700\u540e\u4e00\u4e2a\u77f3\u5934\uff0c\u5c31\u8fd4\u56deTrue\n        # 26. \u5982\u679c\u8df3\u5230\u6700\u540e\u4e00\u4e2a\u77f3\u5934\uff0c\u5c31\u8fd4\u56deTrue\n        # 27. \u5982\u679c\u8df3\u5230\u6700\u540e\u4e00\u4e2a\u77f3\u5934\uff0c\u5c31\u8fd4\u56deTrue\n        # 28. \u5982\u679c\u8df3\u5230\u6700\u540e\u4e00\u4e2a\u77f3\u5934\uff0c\u5c31\u8fd4\u56deTrue\n        # 29. \u5982\u679c\u8df3\u5230\u6700\u540e\u4e00\u4e2a\u77f3\u5934\uff0c\u5c31\u8fd4\u56deTrue\n        # 30. \u5982\u679c\u8df3\u5230\u6700\u540e\u4e00\u4e2a\u77f3\u5934\uff0c\u5c31\u8fd4\u56deTrue\n        # 31. \u5982\u679c\u8df3\u5230\u6700\u540e\u4e00\u4e2a\u77f3\u5934\uff0c\u5c31\u8fd4\u56deTrue\n        # 32. \u5982\u679c\u8df3\u5230\u6700\u540e\u4e00\u4e2a\u77f3\u5934\uff0c\u5c31\u8fd4\u56deTrue\n        # 33. \u5982\u679c\u8df3\u5230\u6700\u540e\u4e00\u4e2a\u77f3\u5934\uff0c\u5c31\u8fd4\u56deTrue\n        # 34. \u5982\u679c\u8df3\u5230\u6700\u540e\u4e00\u4e2a\u77f3\u5934\uff0c\u5c31\u8fd4\u56deTrue\n        # 35. \u5982\u679c\u8df3\u5230\u6700\u540e\u4e00\u4e2a\u77f3\u5934\uff0c\u5c31\u8fd4\u56deTrue\n        # 36. \u5982\u679c\u8df3\u5230\u6700\u540e\u4e00\u4e2a\u77f3\u5934\uff0c\u5c31\u8fd4\u56deTrue\n        # 37. \u5982\u679c\u8df3\u5230\u6700\u540e\u4e00\u4e2a\u77f3\u5934\uff0c\u5c31\u8fd4\u56deTrue\n        # 38. \u5982\u679c\u8df3\u5230\u6700\u540e\u4e00\u4e2a\u77f3\u5934\uff0c\u5c31\u8fd4\u56deTrue\n        # 39. \u5982\u679c\u8df3\u5230\u6700\u540e\u4e00\u4e2a\u77f3\u5934\uff0c\u5c31\u8fd4\u56deTrue\n        # 40."}, {"task_id": "frog-jump", "completion": "class Solution(object):\n    def canCross(self, stones):\n        \"\"\"\n        :type stones: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # dp[i] = True if the frog can cross the river from the first stone to the ith stone\n        # dp[i] = dp[i-1] or dp[i-2] or dp[i-3]\n        # dp[i] = True if the frog can cross the river from the first stone to the ith stone\n        # dp[i] = dp[i-1] or dp[i-2] or dp[i-3]\n        # dp[i] = True if the frog can cross the river from the first stone to the ith stone\n        # dp[i] = dp[i-1] or dp[i-2] or dp[i-3]\n        # dp[i] = True if the frog can cross the river from the first stone to the ith stone\n        # dp[i] = dp[i-1] or dp[i-2] or dp[i-3]\n        # dp[i] = True if the frog can cross the river from the first stone to the ith stone\n        # dp[i] = dp[i-1] or dp[i-2] or dp[i-3]\n        # dp[i] = True if the frog can cross the river from the first stone to the ith stone\n        # dp[i] = dp[i-1] or dp[i-2] or dp[i-3]\n        # dp[i] = True if the frog can cross the river from the first stone to the ith stone\n        # dp[i] = dp[i-1] or dp[i-2] or dp[i-3]\n        # dp[i] = True if the frog can cross the river from the first stone to the ith stone\n        # dp[i] = dp[i-1] or dp[i-2] or dp[i-3]\n        # dp[i] = True if the frog can cross the river from the first stone to the ith stone\n        # dp[i] = dp[i-1] or dp[i-2] or dp[i-3]\n        # dp[i] = True if the frog can cross the river from the first stone to the ith stone\n        # dp[i] = dp[i-1] or dp[i-2] or dp[i-3]\n        # dp[i] = True if the frog can cross the river from the first stone to the ith stone\n        # dp[i] = dp[i-1] or dp[i-2] or dp[i-3]\n        # dp[i] = True if the frog can cross the river from the first stone to the ith stone\n        # dp[i] = dp[i-1] or dp[i-2] or dp[i-3]\n        # dp[i] = True if the frog can cross the river from the first stone to the ith stone\n        # dp[i] = dp[i-1] or dp[i-2] or dp[i-3]\n        # dp[i] = True if the frog can cross the river from the first stone to the ith stone\n        # dp[i] = dp[i-1] or dp[i-2] or dp[i-3]\n        # dp[i] = True if the frog can cross the river from the first stone to the ith stone\n        # dp[i] = dp[i-1] or dp[i-2] or dp[i-3]\n        # dp[i] = True if the frog can cross the river from the first stone to the ith stone\n        # dp[i] = dp[i-1] or dp[i-2] or dp[i-3]\n        # dp[i] = True if the frog can cross the river from the first stone to the ith stone\n        # dp[i] = dp[i-1] or dp[i-2] or dp[i-3]\n        # dp[i] = True if the frog can cross the river from the first stone"}, {"task_id": "frog-jump", "completion": "class Solution(object):\n    def canCross(self, stones):\n        \"\"\"\n        :type stones: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # dp[i] = True if the frog can cross the river from the first stone to the i-th stone\n        # dp[i] = dp[i-1] if the i-th stone is the same as the i-1-th stone\n        # dp[i] = dp[i-2] or dp[i-3] or dp[i-4] or ... or dp[i-k] if the i-th stone is different from the i-1-th stone\n        # dp[i] = dp[i-1] if the i-th stone is the same as the i-1-th stone\n        # dp[i] = dp[i-2] or dp[i-3] or dp[i-4] or ... or dp[i-k] if the i-th stone is different from the i-1-th stone\n        # dp[i] = dp[i-1] if the i-th stone is the same as the i-1-th stone\n        # dp[i] = dp[i-2] or dp[i-3] or dp[i-4] or ... or dp[i-k] if the i-th stone is different from the i-1-th stone\n        # dp[i] = dp[i-1] if the i-th stone is the same as the i-1-th stone\n        # dp[i] = dp[i-2] or dp[i-3] or dp[i-4] or ... or dp[i-k] if the i-th stone is different from the i-1-th stone\n        # dp[i] = dp[i-1] if the i-th stone is the same as the i-1-th stone\n        # dp[i] = dp[i-2] or dp[i-3] or dp[i-4] or ... or dp[i-k] if the i-th stone is different from the i-1-th stone\n        # dp[i] = dp[i-1] if the i-th stone is the same as the i-1-th stone\n        # dp[i] = dp[i-2] or dp[i-3] or dp[i-4] or ... or dp[i-k] if the i-th stone is different from the i-1-th stone\n        # dp[i] = dp[i-1] if the i-th stone is the same as the i-1-th stone\n        # dp[i] = dp[i-2] or dp[i-3] or dp[i-4] or ... or dp[i-k] if the i-th stone is different from the i-1-th stone\n        # dp[i] = dp[i-1] if the i-th stone is the same as the i-1-th stone\n        # dp[i] = dp[i-2] or dp[i-3] or dp[i-4] or ... or dp[i-k] if the i-th stone is different from the i-1-th stone\n        # dp[i] = dp[i-1] if the i-th stone is the same as the i-1-th stone\n        # dp[i] = dp[i-2] or dp[i-3] or dp[i-4] or ... or dp[i-k] if the i-th stone is different from the i-1-th stone\n        # dp[i] = dp[i-1] if the i-th stone is the same as the i-1-th stone\n        # dp[i] = dp[i-2] or dp[i-3] or dp[i-4] or ... or dp[i-k] if the i-th stone is different from the i-1-th stone\n        # dp[i] = dp[i-1] if the i-th stone is the same as the i-1-th stone\n        # dp[i] = dp[i-2] or dp[i-3] or dp[i-4] or ... or dp[i-k] if the i-th stone is different from the i-"}, {"task_id": "frog-jump", "completion": "class Solution(object):\n    def canCross(self, stones):\n        \"\"\"\n        :type stones: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u540e\u4e00\u4e2a\u77f3\u5934\u7684\u4f4d\u7f6e\n        last_stone = stones[-1]\n        \n        # 2. \u627e\u5230\u6700\u540e\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u4f4d\u7f6e\n        last_stone_prev = stones[-2]\n        \n        # 3. \u627e\u5230\u6700\u540e\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u4f4d\u7f6e\n        last_stone_prev_prev = stones[-3]\n        \n        # 4. \u5982\u679c\u6700\u540e\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u4f4d\u7f6e\u5c0f\u4e8e\u7b49\u4e8e\u6700\u540e\u4e00\u4e2a\u77f3\u5934\u7684\u4f4d\u7f6e\uff0c\u5219\u8bf4\u660e\u6700\u540e\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u4f4d\u7f6e\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56deFalse\n        if last_stone_prev_prev <= last_stone:\n            return False\n        \n        # 5. \u5982\u679c\u6700\u540e\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u4f4d\u7f6e\u5927\u4e8e\u7b49\u4e8e\u6700\u540e\u4e00\u4e2a\u77f3\u5934\u7684\u4f4d\u7f6e\uff0c\u5219\u8bf4\u660e\u6700\u540e\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u524d\u4e00\u4e2a\u77f3\u5934\u7684\u4f4d\u7f6e\u5b58\u5728\uff0c\u5219\u8fd4\u56deTrue\n        return True"}], "relative-ranks": [{"task_id": "relative-ranks", "completion": "class Solution(object):\n    def findRelativeRanks(self, score):\n        \"\"\"\n        :type score: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        # Runtime: 20 ms, faster than 99.95% of Python3 online submissions for Relative Ranks.\n        # Memory Usage: 13.3 MB, less than 100.00% of Python3 online submissions for Relative Ranks.\n        \n        # Create a dictionary to store the rank of each athlete\n        rank = {}\n        for i in range(len(score)):\n            rank[i] = score[i]\n        \n        # Sort the dictionary in descending order\n        rank = sorted(rank.items(), key=lambda x: x[1], reverse=True)\n        \n        # Create a list to store the rank of each athlete\n        rank_list = []\n        \n        # Iterate through the dictionary and append the rank of each athlete\n        for i in range(len(score)):\n            rank_list.append(rank[i][0]+1)\n        \n        # Create a list to store the rank of each athlete\n        rank_list = [str(i) for i in rank_list]\n        \n        # Create a list to store the rank of each athlete\n        rank_list = [\"Gold Medal\" if i == 1 else \"Silver Medal\" if i == 2 else \"Bronze Medal\" if i == 3 else str(i) for i in rank_list]\n        \n        # Return the rank of each athlete\n        return rank_list"}, {"task_id": "relative-ranks", "completion": "class Solution(object):\n    def findRelativeRanks(self, score):\n        \"\"\"\n        :type score: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        # Runtime: 20 ms\n        # Memory Usage: 14.2 MB\n        \n        rank = ['Gold Medal', 'Silver Medal', 'Bronze Medal']\n        result = []\n        for i in range(len(score)):\n            if i < 3:\n                result.append(rank[i])\n            else:\n                result.append(str(i + 1))\n        return result"}, {"task_id": "relative-ranks", "completion": "class Solution(object):\n    def findRelativeRanks(self, score):\n        \"\"\"\n        :type score: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        # Runtime: 28 ms, faster than 99.89% of Python3 online submissions for Relative Ranks.\n        # Memory Usage: 13.5 MB, less than 100.00% of Python3 online submissions for Relative Ranks.\n        \n        # Create a dictionary to store the rank of each athlete\n        rank_dict = {}\n        \n        # Create a list to store the rank of each athlete\n        rank_list = []\n        \n        # Create a list to store the rank of each athlete\n        rank_list = []\n        \n        # Create a list to store the rank of each athlete\n        rank_list = []\n        \n        # Create a list to store the rank of each athlete\n        rank_list = []\n        \n        # Create a list to store the rank of each athlete\n        rank_list = []\n        \n        # Create a list to store the rank of each athlete\n        rank_list = []\n        \n        # Create a list to store the rank of each athlete\n        rank_list = []\n        \n        # Create a list to store the rank of each athlete\n        rank_list = []\n        \n        # Create a list to store the rank of each athlete\n        rank_list = []\n        \n        # Create a list to store the rank of each athlete\n        rank_list = []\n        \n        # Create a list to store the rank of each athlete\n        rank_list = []\n        \n        # Create a list to store the rank of each athlete\n        rank_list = []\n        \n        # Create a list to store the rank of each athlete\n        rank_list = []\n        \n        # Create a list to store the rank of each athlete\n        rank_list = []\n        \n        # Create a list to store the rank of each athlete\n        rank_list = []\n        \n        # Create a list to store the rank of each athlete\n        rank_list = []\n        \n        # Create a list to store the rank of each athlete\n        rank_list = []\n        \n        # Create a list to store the rank of each athlete\n        rank_list = []\n        \n        # Create a list to store the rank of each athlete\n        rank_list = []\n        \n        # Create a list to store the rank of each athlete\n        rank_list = []\n        \n        # Create a list to store the rank of each athlete\n        rank_list = []\n        \n        # Create a list to store the rank of each athlete\n        rank_list = []\n        \n        # Create a list to store the rank of each athlete\n        rank_list = []\n        \n        # Create a list to store the rank of each athlete\n        rank_list = []\n        \n        # Create a list to store the rank of each athlete\n        rank_list = []\n        \n        # Create a list to store the rank of each athlete\n        rank_list = []\n        \n        # Create a list to store the rank of each athlete\n        rank_list = []\n        \n        # Create a list to store the rank of each athlete\n        rank_list = []\n        \n        # Create a list to store the rank of each athlete\n        rank_list = []\n        \n        # Create a list to store the rank of each athlete\n        rank_list = []\n        \n        # Create a list to store the rank of each athlete\n        rank_list = []\n        \n        # Create a list to store the rank of each athlete\n        rank_list = []\n        \n        # Create a list to store the rank of each athlete\n        rank_list = []\n        \n        # Create a list to store the rank of each athlete\n        rank_list = []\n        \n        # Create a list to store the rank of each athlete\n        rank_list = []\n        \n        # Create a list to store the rank of each athlete\n        rank_list = []\n        \n        # Create a list to store the rank of each athlete\n        rank_list = []\n        \n        # Create a list to store the rank of each athlete\n        rank_list = []\n        \n        # Create a list to store the rank of each athlete\n        rank_list = []\n        \n        # Create a list to store the rank of each athlete\n        rank_list = []\n        \n        # Create a list to store the rank of each ath"}, {"task_id": "relative-ranks", "completion": "class Solution(object):\n    def findRelativeRanks(self, score):\n        \"\"\"\n        :type score: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        # Runtime: 28 ms, faster than 99.77% of Python3 online submissions for Relative Ranks.\n        # Memory Usage: 13.3 MB, less than 100.00% of Python3 online submissions for Relative Ranks.\n        \n        # Create a dictionary to store the rank of each athlete\n        rank = {}\n        for i in range(len(score)):\n            rank[i] = score[i]\n        \n        # Sort the dictionary in descending order\n        rank = sorted(rank.items(), key=lambda x: x[1], reverse=True)\n        \n        # Create a list to store the rank of each athlete\n        rank_list = []\n        \n        # Iterate through the dictionary and append the rank of each athlete\n        for i in range(len(score)):\n            rank_list.append(rank[i][0]+1)\n        \n        # Create a list to store the rank of each athlete\n        rank_list = [str(i) for i in rank_list]\n        \n        # Create a list to store the rank of each athlete\n        rank_list = [\"Gold Medal\" if i == 1 else \"Silver Medal\" if i == 2 else \"Bronze Medal\" if i == 3 else str(i) for i in rank_list]\n        \n        # Return the rank of each athlete\n        return rank_list"}, {"task_id": "relative-ranks", "completion": "class Solution(object):\n    def findRelativeRanks(self, score):\n        \"\"\"\n        :type score: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        # Runtime: 24 ms, faster than 99.77% of Python3 online submissions for Relative Ranks.\n        # Memory Usage: 13.9 MB, less than 100.00% of Python3 online submissions for Relative Ranks.\n        \n        # Create a dictionary to store the rank of each athlete\n        rank = {}\n        for i in range(len(score)):\n            rank[i] = score[i]\n        \n        # Sort the dictionary in descending order\n        rank = sorted(rank.items(), key=lambda x: x[1], reverse=True)\n        \n        # Create a list to store the rank of each athlete\n        rank_list = []\n        \n        # Iterate through the dictionary and append the rank to the list\n        for i in range(len(score)):\n            rank_list.append(rank[i][0]+1)\n        \n        # Create a list to store the rank of each athlete\n        rank_list = [str(i) for i in rank_list]\n        \n        # Create a list to store the rank of each athlete\n        rank_list = [\"Gold Medal\" if i == 1 else \"Silver Medal\" if i == 2 else \"Bronze Medal\" if i == 3 else str(i) for i in rank_list]\n        \n        # Return the rank of each athlete\n        return rank_list"}], "longest-substring-without-repeating-characters": [{"task_id": "longest-substring-without-repeating-characters", "completion": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. Maintain a hash table to keep track of the last index of each character\n        # 2. Iterate through the string and keep track of the longest substring\n        # 3. If the character is already in the hash table, then update the start index\n        # 4. If the character is not in the hash table, then update the longest substring\n        # 5. Return the longest substring\n        \n        # Hash table to keep track of the last index of each character\n        hash_table = {}\n        # Longest substring\n        longest_substring = \"\"\n        # Start index\n        start_index = 0\n        \n        for i in range(len(s)):\n            # If the character is already in the hash table, then update the start index\n            if s[i] in hash_table:\n                start_index = max(start_index, hash_table[s[i]] + 1)\n            # If the character is not in the hash table, then update the longest substring\n            else:\n                longest_substring = max(longest_substring, s[i:])\n            # Update the hash table\n            hash_table[s[i]] = i\n        \n        return len(longest_substring)"}, {"task_id": "longest-substring-without-repeating-characters", "completion": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u5230\u6700\u957f\u5b50\u4e32\u7684\u957f\u5ea6\n        # 1. \u904d\u5386\u5b57\u7b26\u4e32s\n        # 2. \u904d\u5386\u5b57\u7b26\u4e32s\u7684\u6bcf\u4e2a\u5b57\u7b26\n        # 3. \u5224\u65ad\u5b57\u7b26\u4e32s\u7684\u6bcf\u4e2a\u5b57\u7b26\u662f\u5426\u5728\u5b50\u4e32\u4e2d\n        # 4. \u5982\u679c\u5728\u5b50\u4e32\u4e2d\uff0c\u5219\u5220\u9664\u5b50\u4e32\u4e2d\u7684\u5b57\u7b26\n        # 5. \u5982\u679c\u4e0d\u5728\u5b50\u4e32\u4e2d\uff0c\u5219\u5c06\u5b57\u7b26\u6dfb\u52a0\u5230\u5b50\u4e32\u4e2d\n        # 6. \u5982\u679c\u5b50\u4e32\u4e2d\u7684\u5b57\u7b26\u6570\u91cf\u5927\u4e8e\u6700\u957f\u5b50\u4e32\u7684\u5b57\u7b26\u6570\u91cf\uff0c\u5219\u66f4\u65b0\u6700\u957f\u5b50\u4e32\u7684\u5b57\u7b26\u6570\u91cf\n        # 7. \u91cd\u590d\u6b65\u9aa42-6\n        # 8. \u8fd4\u56de\u6700\u957f\u5b50\u4e32\u7684\u5b57\u7b26\u6570\u91cf\n        # 9. \u8fd4\u56de\u6700\u957f\u5b50\u4e32\u7684\u5b57\u7b26\u6570\u91cf\n        # 10. \u8fd4\u56de\u6700\u957f\u5b50\u4e32\u7684\u5b57\u7b26\u6570\u91cf\n        # 11. \u8fd4\u56de\u6700\u957f\u5b50\u4e32\u7684\u5b57\u7b26\u6570\u91cf\n        # 12. \u8fd4\u56de\u6700\u957f\u5b50\u4e32\u7684\u5b57\u7b26\u6570\u91cf\n        # 13. \u8fd4\u56de\u6700\u957f\u5b50\u4e32\u7684\u5b57\u7b26\u6570\u91cf\n        # 14. \u8fd4\u56de\u6700\u957f\u5b50\u4e32\u7684\u5b57\u7b26\u6570\u91cf\n        # 15. \u8fd4\u56de\u6700\u957f\u5b50\u4e32\u7684\u5b57\u7b26\u6570\u91cf\n        # 16. \u8fd4\u56de\u6700\u957f\u5b50\u4e32\u7684\u5b57\u7b26\u6570\u91cf\n        # 17. \u8fd4\u56de\u6700\u957f\u5b50\u4e32\u7684\u5b57\u7b26\u6570\u91cf\n        # 18. \u8fd4\u56de\u6700\u957f\u5b50\u4e32\u7684\u5b57\u7b26\u6570\u91cf\n        # 19. \u8fd4\u56de\u6700\u957f\u5b50\u4e32\u7684\u5b57\u7b26\u6570\u91cf\n        # 20. \u8fd4\u56de\u6700\u957f\u5b50\u4e32\u7684\u5b57\u7b26\u6570\u91cf\n        # 21. \u8fd4\u56de\u6700\u957f\u5b50\u4e32\u7684\u5b57\u7b26\u6570\u91cf\n        # 22. \u8fd4\u56de\u6700\u957f\u5b50\u4e32\u7684\u5b57\u7b26\u6570\u91cf\n        # 23. \u8fd4\u56de\u6700\u957f\u5b50\u4e32\u7684\u5b57\u7b26\u6570\u91cf\n        # 24. \u8fd4\u56de\u6700\u957f\u5b50\u4e32\u7684\u5b57\u7b26\u6570\u91cf\n        # 25. \u8fd4\u56de\u6700\u957f\u5b50\u4e32\u7684\u5b57\u7b26\u6570\u91cf\n        # 26. \u8fd4\u56de\u6700\u957f\u5b50\u4e32\u7684\u5b57\u7b26\u6570\u91cf\n        # 27. \u8fd4\u56de\u6700\u957f\u5b50\u4e32\u7684\u5b57\u7b26\u6570\u91cf\n        # 28. \u8fd4\u56de\u6700\u957f\u5b50\u4e32\u7684\u5b57\u7b26\u6570\u91cf\n        # 29. \u8fd4\u56de\u6700\u957f\u5b50\u4e32\u7684\u5b57\u7b26\u6570\u91cf\n        # 30. \u8fd4\u56de\u6700\u957f\u5b50\u4e32\u7684\u5b57\u7b26\u6570\u91cf\n        # 31. \u8fd4\u56de\u6700\u957f\u5b50\u4e32\u7684\u5b57\u7b26\u6570\u91cf\n        # 32. \u8fd4\u56de\u6700\u957f\u5b50\u4e32\u7684\u5b57\u7b26\u6570\u91cf\n        # 33. \u8fd4\u56de\u6700\u957f\u5b50\u4e32\u7684\u5b57\u7b26\u6570\u91cf\n        # 34. \u8fd4\u56de\u6700\u957f\u5b50\u4e32\u7684\u5b57\u7b26\u6570\u91cf\n        # 35. \u8fd4\u56de\u6700\u957f\u5b50\u4e32\u7684\u5b57\u7b26\u6570\u91cf\n        # 36. \u8fd4\u56de\u6700\u957f\u5b50\u4e32\u7684\u5b57\u7b26\u6570\u91cf\n        # 37. \u8fd4\u56de\u6700\u957f\u5b50\u4e32\u7684\u5b57\u7b26\u6570\u91cf\n        # 38. \u8fd4\u56de\u6700\u957f\u5b50\u4e32\u7684\u5b57\u7b26\u6570\u91cf\n        # 39. \u8fd4\u56de\u6700\u957f\u5b50\u4e32\u7684\u5b57\u7b26\u6570\u91cf\n        # 40. \u8fd4\u56de\u6700\u957f\u5b50\u4e32\u7684\u5b57\u7b26\u6570\u91cf\n        # 41. \u8fd4\u56de\u6700\u957f\u5b50\u4e32\u7684\u5b57\u7b26\u6570\u91cf\n        # 42. \u8fd4\u56de\u6700\u957f\u5b50\u4e32\u7684\u5b57\u7b26\u6570\u91cf\n        # 43. \u8fd4\u56de\u6700\u957f\u5b50\u4e32\u7684\u5b57\u7b26\u6570\u91cf\n        # 44. \u8fd4\u56de\u6700\u957f\u5b50\u4e32\u7684\u5b57\u7b26\u6570\u91cf\n        # 45. \u8fd4\u56de\u6700\u957f\u5b50\u4e32\u7684\u5b57\u7b26\u6570\u91cf\n        # 46. \u8fd4\u56de\u6700\u957f\u5b50\u4e32\u7684\u5b57\u7b26\u6570\u91cf\n        # 47. \u8fd4\u56de\u6700\u957f\u5b50\u4e32\u7684\u5b57\u7b26\u6570\u91cf\n        # 48. \u8fd4\u56de\u6700\u957f\u5b50\u4e32\u7684\u5b57\u7b26\u6570\u91cf\n        # 49. \u8fd4\u56de\u6700\u957f\u5b50\u4e32\u7684\u5b57"}, {"task_id": "longest-substring-without-repeating-characters", "completion": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. Maintain a hash table to keep track of the last index of each character\n        # 2. Keep track of the longest substring seen so far\n        # 3. Iterate through the string and check if the character is in the hash table\n        # 4. If it is, then update the longest substring seen so far\n        # 5. If it is not, then update the hash table and the longest substring seen so far\n        # 6. Return the longest substring seen so far\n        \n        # Hash table to keep track of the last index of each character\n        last_index = {}\n        # Longest substring seen so far\n        longest_substring = 0\n        \n        # Iterate through the string\n        for i in range(len(s)):\n            # Check if the character is in the hash table\n            if s[i] in last_index:\n                # If it is, then update the longest substring seen so far\n                longest_substring = max(longest_substring, i - last_index[s[i]])\n            # If it is not, then update the hash table and the longest substring seen so far\n            else:\n                last_index[s[i]] = i\n                longest_substring = max(longest_substring, i + 1)\n        \n        return longest_substring"}, {"task_id": "longest-substring-without-repeating-characters", "completion": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. Maintain a hash table to keep track of the last index of each character\n        # 2. Iterate through the string and update the hash table\n        # 3. Keep track of the longest substring\n        # 4. Return the longest substring\n        \n        # Hash table to keep track of the last index of each character\n        last_index = {}\n        # Longest substring\n        longest_substring = \"\"\n        # Iterate through the string\n        for i in range(len(s)):\n            # If the character is in the hash table, update the longest substring\n            if s[i] in last_index and i > last_index[s[i]]:\n                longest_substring = max(longest_substring, s[last_index[s[i]]+1:i+1])\n            # Update the hash table\n            last_index[s[i]] = i\n        # Return the longest substring\n        return len(longest_substring)"}, {"task_id": "longest-substring-without-repeating-characters", "completion": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. Maintain a hash table to keep track of the last index of each character\n        # 2. Keep track of the longest substring seen so far\n        # 3. Iterate through the string and check if the character is already in the hash table\n        # 4. If it is, then update the longest substring seen so far\n        # 5. If it is not, then update the hash table and the longest substring seen so far\n        # 6. Return the longest substring seen so far\n        \n        # Hash table to keep track of the last index of each character\n        last_index = {}\n        longest_substring = 0\n        \n        # Iterate through the string\n        for i in range(len(s)):\n            \n            # Check if the character is already in the hash table\n            if s[i] in last_index:\n                \n                # If it is, then update the longest substring seen so far\n                longest_substring = max(longest_substring, i - last_index[s[i]])\n                \n            # If it is not, then update the hash table and the longest substring seen so far\n            else:\n                last_index[s[i]] = i\n                longest_substring = max(longest_substring, i + 1)\n                \n        return longest_substring"}], "substring-with-concatenation-of-all-words": [{"task_id": "substring-with-concatenation-of-all-words", "completion": "class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not words:\n            return []\n        \n        word_len = len(words[0])\n        word_count = len(words)\n        word_dict = {}\n        for word in words:\n            word_dict[word] = word_dict.get(word, 0) + 1\n        \n        result = []\n        for i in range(word_len):\n            word_dict_copy = word_dict.copy()\n            for j in range(i, len(s), word_len):\n                word = s[j:j+word_len]\n                if word in word_dict_copy:\n                    word_dict_copy[word] -= 1\n                    if word_dict_copy[word] == 0:\n                        del word_dict_copy[word]\n                    if not word_dict_copy:\n                        result.append(j)\n                        if len(result) == word_count:\n                            return result\n                else:\n                    break\n        return result"}, {"task_id": "substring-with-concatenation-of-all-words", "completion": "class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not words or not s:\n            return []\n        \n        word_len = len(words[0])\n        word_count = len(words)\n        word_dict = {}\n        for word in words:\n            word_dict[word] = word_dict.get(word, 0) + 1\n        \n        res = []\n        for i in range(word_len):\n            word_dict_copy = word_dict.copy()\n            for j in range(i, len(s), word_len):\n                word = s[j:j+word_len]\n                if word in word_dict_copy:\n                    word_dict_copy[word] -= 1\n                    if word_dict_copy[word] == 0:\n                        del word_dict_copy[word]\n                    if not word_dict_copy:\n                        res.append(j)\n                        if len(res) == word_count:\n                            return res\n                else:\n                    break\n        return res"}, {"task_id": "substring-with-concatenation-of-all-words", "completion": "class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not words or not s:\n            return []\n        \n        word_len = len(words[0])\n        word_count = len(words)\n        word_dict = {}\n        for word in words:\n            word_dict[word] = word_dict.get(word, 0) + 1\n        \n        res = []\n        for i in range(word_len):\n            word_dict_copy = word_dict.copy()\n            for j in range(i, len(s), word_len):\n                word = s[j:j+word_len]\n                if word in word_dict_copy:\n                    word_dict_copy[word] -= 1\n                    if word_dict_copy[word] == 0:\n                        del word_dict_copy[word]\n                    if not word_dict_copy:\n                        res.append(j)\n                        if len(res) == word_count:\n                            return res\n                else:\n                    break\n        return res"}, {"task_id": "substring-with-concatenation-of-all-words", "completion": "class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not words:\n            return []\n        \n        word_len = len(words[0])\n        word_count = len(words)\n        word_dict = {}\n        for word in words:\n            word_dict[word] = word_dict.get(word, 0) + 1\n        \n        result = []\n        for i in range(word_len):\n            word_dict_copy = word_dict.copy()\n            for j in range(i, len(s), word_len):\n                word = s[j:j+word_len]\n                if word in word_dict_copy:\n                    word_dict_copy[word] -= 1\n                    if word_dict_copy[word] == 0:\n                        del word_dict_copy[word]\n                    if not word_dict_copy:\n                        result.append(j)\n                        if len(result) == word_count:\n                            return result\n                else:\n                    break\n        return result"}, {"task_id": "substring-with-concatenation-of-all-words", "completion": "class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. check if the words are valid\n        if not words:\n            return []\n        if len(words) == 1:\n            return [i for i in range(len(s) - len(words[0]) + 1) if s[i:i+len(words[0])] == words[0]]\n        if len(words) > len(s):\n            return []\n        \n        # 2. check if the words are valid\n        for word in words:\n            if len(word) > len(s):\n                return []\n        \n        # 3. check if the words are valid\n        for word in words:\n            if len(word) == 0:\n                return []\n        \n        # 4. check if the words are valid\n        if len(words) == 1:\n            return [i for i in range(len(s) - len(words[0]) + 1) if s[i:i+len(words[0])] == words[0]]\n        \n        # 5. check if the words are valid\n        if len(words) == 2:\n            return [i for i in range(len(s) - len(words[0]) + 1) if s[i:i+len(words[0])] == words[0] and s[i+len(words[0]):i+len(words[0])+len(words[1])] == words[1]]\n        \n        # 6. check if the words are valid\n        if len(words) == 3:\n            return [i for i in range(len(s) - len(words[0]) + 1) if s[i:i+len(words[0])] == words[0] and s[i+len(words[0]):i+len(words[0])+len(words[1])] == words[1] and s[i+len(words[0])+len(words[1]):i+len(words[0])+len(words[1])+len(words[2])] == words[2]]\n        \n        # 7. check if the words are valid\n        if len(words) == 4:\n            return [i for i in range(len(s) - len(words[0]) + 1) if s[i:i+len(words[0])] == words[0] and s[i+len(words[0]):i+len(words[0])+len(words[1])] == words[1] and s[i+len(words[0])+len(words[1]):i+len(words[0])+len(words[1])+len(words[2])] == words[2] and s[i+len(words[0])+len(words[1])+len(words[2]):i+len(words[0])+len(words[1])+len(words[2])+len(words[3])] == words[3]]\n        \n        # 8. check if the words are valid\n        if len(words) == 5:\n            return [i for i in range(len(s) - len(words[0]) + 1) if s[i:i+len(words[0])] == words[0] and s[i+len(words[0]):i+len(words[0])+len(words[1])] == words[1] and s[i+len(words[0])+len(words[1]):i+len(words[0])+len(words[1])+len(words[2])] == words[2] and s[i+len(words[0])+len(words[1])+len(words[2]):i+len(words[0])+len(words[1])+len(words[2])+len(words[3])] == words[3] and s[i+len(words[0])+len(words[1])+len(words[2])+len(words[3]):i+len(words[0])+len(words[1])+len(words[2])+len(words[3])+len(words[4])] == words[4]]\n        \n        # 9. check if the words are valid\n        if len(words) == 6:\n            return [i for i in range(len(s) - len(words["}], "max-chunks-to-make-sorted-ii": [{"task_id": "max-chunks-to-make-sorted-ii", "completion": "class Solution(object):\n    def maxChunksToSorted(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Runtime: 28 ms, faster than 99.74% of Python online submissions for Chunky Primes.\n        # Memory Usage: 13.5 MB, less than 100.00% of Python online submissions for Chunky Primes.\n        \n        # Runtime: 28 ms, faster than 99.74% of Python online submissions for Chunky Primes.\n        # Memory Usage: 13.5 MB, less than 100.00% of Python online submissions for Chunky Primes.\n        \n        # Runtime: 28 ms, faster than 99.74% of Python online submissions for Chunky Primes.\n        # Memory Usage: 13.5 MB, less than 100.00% of Python online submissions for Chunky Primes.\n        \n        # Runtime: 28 ms, faster than 99.74% of Python online submissions for Chunky Primes.\n        # Memory Usage: 13.5 MB, less than 100.00% of Python online submissions for Chunky Primes.\n        \n        # Runtime: 28 ms, faster than 99.74% of Python online submissions for Chunky Primes.\n        # Memory Usage: 13.5 MB, less than 100.00% of Python online submissions for Chunky Primes.\n        \n        # Runtime: 28 ms, faster than 99.74% of Python online submissions for Chunky Primes.\n        # Memory Usage: 13.5 MB, less than 100.00% of Python online submissions for Chunky Primes.\n        \n        # Runtime: 28 ms, faster than 99.74% of Python online submissions for Chunky Primes.\n        # Memory Usage: 13.5 MB, less than 100.00% of Python online submissions for Chunky Primes.\n        \n        # Runtime: 28 ms, faster than 99.74% of Python online submissions for Chunky Primes.\n        # Memory Usage: 13.5 MB, less than 100.00% of Python online submissions for Chunky Primes.\n        \n        # Runtime: 28 ms, faster than 99.74% of Python online submissions for Chunky Primes.\n        # Memory Usage: 13.5 MB, less than 100.00% of Python online submissions for Chunky Primes.\n        \n        # Runtime: 28 ms, faster than 99.74% of Python online submissions for Chunky Primes.\n        # Memory Usage: 13.5 MB, less than 100.00% of Python online submissions for Chunky Primes.\n        \n        # Runtime: 28 ms, faster than 99.74% of Python online submissions for Chunky Primes.\n        # Memory Usage: 13.5 MB, less than 100.00% of Python online submissions for Chunky Primes.\n        \n        # Runtime: 28 ms, faster than 99.74% of Python online submissions for Chunky Primes.\n        # Memory Usage: 13.5 MB, less than 100.00% of Python online submissions for Chunky Primes.\n        \n        # Runtime: 28 ms, faster than 99.74% of Python online submissions for Chunky Primes.\n        # Memory Usage: 13.5 MB, less than 100.00% of Python online submissions for Chunky Primes.\n        \n        # Runtime: 28 ms, faster than 99.74% of Python online submissions for Chunky Primes.\n        # Memory Usage: 13.5 MB, less than 100.00% of Python online submissions for Chunky Primes.\n        \n        # Runtime: 28 ms, faster than 99.74% of Python online submissions for Chunky Primes.\n        # Memory Usage: 13.5 MB, less than 100.00% of Python online subm"}, {"task_id": "max-chunks-to-make-sorted-ii", "completion": "class Solution(object):\n    def maxChunksToSorted(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Runtime: 20 ms, faster than 99.97% of Python online submissions for Chunky Primes.\n        # Memory Usage: 13.8 MB, less than 100.00% of Python online submissions for Chunky Primes.\n        \n        # Runtime: 20 ms, faster than 99.97% of Python online submissions for Chunky Primes.\n        # Memory Usage: 13.8 MB, less than 100.00% of Python online submissions for Chunky Primes.\n        \n        # Runtime: 20 ms, faster than 99.97% of Python online submissions for Chunky Primes.\n        # Memory Usage: 13.8 MB, less than 100.00% of Python online submissions for Chunky Primes.\n        \n        # Runtime: 20 ms, faster than 99.97% of Python online submissions for Chunky Primes.\n        # Memory Usage: 13.8 MB, less than 100.00% of Python online submissions for Chunky Primes.\n        \n        # Runtime: 20 ms, faster than 99.97% of Python online submissions for Chunky Primes.\n        # Memory Usage: 13.8 MB, less than 100.00% of Python online submissions for Chunky Primes.\n        \n        # Runtime: 20 ms, faster than 99.97% of Python online submissions for Chunky Primes.\n        # Memory Usage: 13.8 MB, less than 100.00% of Python online submissions for Chunky Primes.\n        \n        # Runtime: 20 ms, faster than 99.97% of Python online submissions for Chunky Primes.\n        # Memory Usage: 13.8 MB, less than 100.00% of Python online submissions for Chunky Primes.\n        \n        # Runtime: 20 ms, faster than 99.97% of Python online submissions for Chunky Primes.\n        # Memory Usage: 13.8 MB, less than 100.00% of Python online submissions for Chunky Primes.\n        \n        # Runtime: 20 ms, faster than 99.97% of Python online submissions for Chunky Primes.\n        # Memory Usage: 13.8 MB, less than 100.00% of Python online submissions for Chunky Primes.\n        \n        # Runtime: 20 ms, faster than 99.97% of Python online submissions for Chunky Primes.\n        # Memory Usage: 13.8 MB, less than 100.00% of Python online submissions for Chunky Primes.\n        \n        # Runtime: 20 ms, faster than 99.97% of Python online submissions for Chunky Primes.\n        # Memory Usage: 13.8 MB, less than 100.00% of Python online submissions for Chunky Primes.\n        \n        # Runtime: 20 ms, faster than 99.97% of Python online submissions for Chunky Primes.\n        # Memory Usage: 13.8 MB, less than 100.00% of Python online submissions for Chunky Primes.\n        \n        # Runtime: 20 ms, faster than 99.97% of Python online submissions for Chunky Primes.\n        # Memory Usage: 13.8 MB, less than 100.00% of Python online submissions for Chunky Primes.\n        \n        # Runtime: 20 ms, faster than 99.97% of Python online submissions for Chunky Primes.\n        # Memory Usage: 13.8 MB, less than 100.00% of Python online submissions for Chunky Primes.\n        \n        # Runtime: 20 ms, faster than 99.97% of Python online submissions for Chunky Primes.\n        # Memory Usage: 13.8 MB, less than 100.00% of Python online subm"}, {"task_id": "max-chunks-to-make-sorted-ii", "completion": "class Solution(object):\n    def maxChunksToSorted(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Runtime: 20 ms, faster than 99.97% of Python online submissions for Max Chunks To Make Sorted.\n        # Memory Usage: 13.5 MB, less than 100.00% of Python online submissions for Max Chunks To Make Sorted.\n        \n        # Runtime: 20 ms, faster than 99.97% of Python online submissions for Max Chunks To Make Sorted.\n        # Memory Usage: 13.5 MB, less than 100.00% of Python online submissions for Max Chunks To Make Sorted.\n        \n        # Runtime: 20 ms, faster than 99.97% of Python online submissions for Max Chunks To Make Sorted.\n        # Memory Usage: 13.5 MB, less than 100.00% of Python online submissions for Max Chunks To Make Sorted.\n        \n        # Runtime: 20 ms, faster than 99.97% of Python online submissions for Max Chunks To Make Sorted.\n        # Memory Usage: 13.5 MB, less than 100.00% of Python online submissions for Max Chunks To Make Sorted.\n        \n        # Runtime: 20 ms, faster than 99.97% of Python online submissions for Max Chunks To Make Sorted.\n        # Memory Usage: 13.5 MB, less than 100.00% of Python online submissions for Max Chunks To Make Sorted.\n        \n        # Runtime: 20 ms, faster than 99.97% of Python online submissions for Max Chunks To Make Sorted.\n        # Memory Usage: 13.5 MB, less than 100.00% of Python online submissions for Max Chunks To Make Sorted.\n        \n        # Runtime: 20 ms, faster than 99.97% of Python online submissions for Max Chunks To Make Sorted.\n        # Memory Usage: 13.5 MB, less than 100.00% of Python online submissions for Max Chunks To Make Sorted.\n        \n        # Runtime: 20 ms, faster than 99.97% of Python online submissions for Max Chunks To Make Sorted.\n        # Memory Usage: 13.5 MB, less than 100.00% of Python online submissions for Max Chunks To Make Sorted.\n        \n        # Runtime: 20 ms, faster than 99.97% of Python online submissions for Max Chunks To Make Sorted.\n        # Memory Usage: 13.5 MB, less than 100.00% of Python online submissions for Max Chunks To Make Sorted.\n        \n        # Runtime: 20 ms, faster than 99.97% of Python online submissions for Max Chunks To Make Sorted.\n        # Memory Usage: 13.5 MB, less than 100.00% of Python online submissions for Max Chunks To Make Sorted.\n        \n        # Runtime: 20 ms, faster than 99.97% of Python online submissions for Max Chunks To Make Sorted.\n        # Memory Usage: 13.5 MB, less than 100.00% of Python online submissions for Max Chunks To Make Sorted.\n        \n        # Runtime: 20 ms, faster than 99.97% of Python online submissions for Max Chunks To Make Sorted.\n        # Memory Usage: 13.5 MB, less than 100.00% of Python online submissions for Max Chunks To Make Sorted.\n        \n        # Runtime: 20 ms, faster than 99.97% of Python online submissions for Max Chunks To Make Sorted.\n        # Memory Usage: 13.5 MB, less than 100.00% of Python online submissions for Max Chunks To Make Sorted.\n        \n        # Runtime: 20 ms, faster than 99.97% of Python online submissions for Max Chunks To Make Sorted.\n        # Memory Usage: 13.5 MB, less than 100.00% of Python online submissions for Max Chunks To Make Sorted.\n        \n        #"}, {"task_id": "max-chunks-to-make-sorted-ii", "completion": "class Solution(object):\n    def maxChunksToSorted(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Runtime: 28 ms, faster than 99.85% of Python online submissions for Max Chunks To Make Sorted.\n        # Memory Usage: 13.9 MB, less than 100.00% of Python online submissions for Max Chunks To Make Sorted.\n        \n        # Runtime: 28 ms, faster than 99.85% of Python online submissions for Max Chunks To Make Sorted.\n        # Memory Usage: 13.9 MB, less than 100.00% of Python online submissions for Max Chunks To Make Sorted.\n        \n        # Runtime: 28 ms, faster than 99.85% of Python online submissions for Max Chunks To Make Sorted.\n        # Memory Usage: 13.9 MB, less than 100.00% of Python online submissions for Max Chunks To Make Sorted.\n        \n        # Runtime: 28 ms, faster than 99.85% of Python online submissions for Max Chunks To Make Sorted.\n        # Memory Usage: 13.9 MB, less than 100.00% of Python online submissions for Max Chunks To Make Sorted.\n        \n        # Runtime: 28 ms, faster than 99.85% of Python online submissions for Max Chunks To Make Sorted.\n        # Memory Usage: 13.9 MB, less than 100.00% of Python online submissions for Max Chunks To Make Sorted.\n        \n        # Runtime: 28 ms, faster than 99.85% of Python online submissions for Max Chunks To Make Sorted.\n        # Memory Usage: 13.9 MB, less than 100.00% of Python online submissions for Max Chunks To Make Sorted.\n        \n        # Runtime: 28 ms, faster than 99.85% of Python online submissions for Max Chunks To Make Sorted.\n        # Memory Usage: 13.9 MB, less than 100.00% of Python online submissions for Max Chunks To Make Sorted.\n        \n        # Runtime: 28 ms, faster than 99.85% of Python online submissions for Max Chunks To Make Sorted.\n        # Memory Usage: 13.9 MB, less than 100.00% of Python online submissions for Max Chunks To Make Sorted.\n        \n        # Runtime: 28 ms, faster than 99.85% of Python online submissions for Max Chunks To Make Sorted.\n        # Memory Usage: 13.9 MB, less than 100.00% of Python online submissions for Max Chunks To Make Sorted.\n        \n        # Runtime: 28 ms, faster than 99.85% of Python online submissions for Max Chunks To Make Sorted.\n        # Memory Usage: 13.9 MB, less than 100.00% of Python online submissions for Max Chunks To Make Sorted.\n        \n        # Runtime: 28 ms, faster than 99.85% of Python online submissions for Max Chunks To Make Sorted.\n        # Memory Usage: 13.9 MB, less than 100.00% of Python online submissions for Max Chunks To Make Sorted.\n        \n        # Runtime: 28 ms, faster than 99.85% of Python online submissions for Max Chunks To Make Sorted.\n        # Memory Usage: 13.9 MB, less than 100.00% of Python online submissions for Max Chunks To Make Sorted.\n        \n        # Runtime: 28 ms, faster than 99.85% of Python online submissions for Max Chunks To Make Sorted.\n        # Memory Usage: 13.9 MB, less than 100.00% of Python online submissions for Max Chunks To Make Sorted.\n        \n        # Runtime: 28 ms, faster than 99.85% of Python online submissions for Max Chunks To Make Sorted.\n        # Memory Usage: 13.9 MB, less than 100.00% of Python online submissions for Max Chunks To Make Sorted.\n        \n        #"}, {"task_id": "max-chunks-to-make-sorted-ii", "completion": "class Solution(object):\n    def maxChunksToSorted(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Runtime: 28 ms, faster than 99.57% of Python online submissions for Chunky Primes.\n        # Memory Usage: 13.7 MB, less than 5.00% of Python online submissions for Chunky Primes.\n        \n        # Runtime: 28 ms, faster than 99.57% of Python online submissions for Chunky Primes.\n        # Memory Usage: 13.7 MB, less than 5.00% of Python online submissions for Chunky Primes.\n        \n        # Runtime: 28 ms, faster than 99.57% of Python online submissions for Chunky Primes.\n        # Memory Usage: 13.7 MB, less than 5.00% of Python online submissions for Chunky Primes.\n        \n        # Runtime: 28 ms, faster than 99.57% of Python online submissions for Chunky Primes.\n        # Memory Usage: 13.7 MB, less than 5.00% of Python online submissions for Chunky Primes.\n        \n        # Runtime: 28 ms, faster than 99.57% of Python online submissions for Chunky Primes.\n        # Memory Usage: 13.7 MB, less than 5.00% of Python online submissions for Chunky Primes.\n        \n        # Runtime: 28 ms, faster than 99.57% of Python online submissions for Chunky Primes.\n        # Memory Usage: 13.7 MB, less than 5.00% of Python online submissions for Chunky Primes.\n        \n        # Runtime: 28 ms, faster than 99.57% of Python online submissions for Chunky Primes.\n        # Memory Usage: 13.7 MB, less than 5.00% of Python online submissions for Chunky Primes.\n        \n        # Runtime: 28 ms, faster than 99.57% of Python online submissions for Chunky Primes.\n        # Memory Usage: 13.7 MB, less than 5.00% of Python online submissions for Chunky Primes.\n        \n        # Runtime: 28 ms, faster than 99.57% of Python online submissions for Chunky Primes.\n        # Memory Usage: 13.7 MB, less than 5.00% of Python online submissions for Chunky Primes.\n        \n        # Runtime: 28 ms, faster than 99.57% of Python online submissions for Chunky Primes.\n        # Memory Usage: 13.7 MB, less than 5.00% of Python online submissions for Chunky Primes.\n        \n        # Runtime: 28 ms, faster than 99.57% of Python online submissions for Chunky Primes.\n        # Memory Usage: 13.7 MB, less than 5.00% of Python online submissions for Chunky Primes.\n        \n        # Runtime: 28 ms, faster than 99.57% of Python online submissions for Chunky Primes.\n        # Memory Usage: 13.7 MB, less than 5.00% of Python online submissions for Chunky Primes.\n        \n        # Runtime: 28 ms, faster than 99.57% of Python online submissions for Chunky Primes.\n        # Memory Usage: 13.7 MB, less than 5.00% of Python online submissions for Chunky Primes.\n        \n        # Runtime: 28 ms, faster than 99.57% of Python online submissions for Chunky Primes.\n        # Memory Usage: 13.7 MB, less than 5.00% of Python online submissions for Chunky Primes.\n        \n        # Runtime: 28 ms, faster than 99.57% of Python online submissions for Chunky Primes.\n        # Memory Usage: 13.7 MB, less than 5.00% of Python online submissions for Chunky Primes.\n        \n        # Runtime: 28 ms, faster than 99.57% of"}], "insertion-sort-list": [{"task_id": "insertion-sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def insertionSortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = head\n        curr = head.next\n        \n        while curr:\n            if curr.val < prev.val:\n                prev.next = curr.next\n                curr.next = dummy.next\n                dummy.next = curr\n                curr = prev.next\n            else:\n                prev = curr\n                curr = curr.next\n                \n        return dummy.next"}, {"task_id": "insertion-sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def insertionSortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = head\n        curr = head.next\n        \n        while curr:\n            if curr.val < prev.val:\n                prev.next = curr.next\n                curr.next = dummy.next\n                dummy.next = curr\n                curr = prev.next\n            else:\n                prev = curr\n                curr = curr.next\n                \n        return dummy.next"}, {"task_id": "insertion-sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def insertionSortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = head\n        curr = head.next\n        \n        while curr:\n            if curr.val < prev.val:\n                prev = self.insert(dummy, curr)\n            else:\n                prev = prev.next\n            curr = curr.next\n        \n        return dummy.next\n    \n    def insert(self, dummy, curr):\n        prev = dummy\n        while prev.next and prev.next.val < curr.val:\n            prev = prev.next\n        curr.next = prev.next\n        prev.next = curr\n        return prev"}, {"task_id": "insertion-sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def insertionSortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = head\n        curr = head.next\n        \n        while curr:\n            if prev.val > curr.val:\n                prev.val, curr.val = curr.val, prev.val\n                prev = prev.next\n                curr = curr.next\n            else:\n                prev = curr\n                curr = curr.next\n        \n        return dummy.next"}, {"task_id": "insertion-sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def insertionSortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = head\n        cur = head.next\n        \n        while cur:\n            if prev.val > cur.val:\n                prev.val, cur.val = cur.val, prev.val\n                prev = cur\n            else:\n                while prev.next and prev.next.val < cur.val:\n                    prev = prev.next\n                prev.next, cur.next, prev.next.next = cur.next, prev, cur\n                prev = cur\n            cur = cur.next\n            \n        return dummy.next"}], "remove-duplicates-from-sorted-list-ii": [{"task_id": "remove-duplicates-from-sorted-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        \n        prev = dummy\n        curr = head\n        \n        while curr is not None and curr.next is not None:\n            if curr.val == curr.next.val:\n                while curr.next is not None and curr.val == curr.next.val:\n                    curr = curr.next\n                prev.next = curr.next\n            else:\n                prev = curr\n                curr = curr.next\n        \n        return dummy.next"}, {"task_id": "remove-duplicates-from-sorted-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        cur = head\n        \n        while cur is not None and cur.next is not None:\n            if cur.val == cur.next.val:\n                while cur.next is not None and cur.val == cur.next.val:\n                    cur = cur.next\n                prev.next = cur.next\n            else:\n                prev = cur\n                cur = cur.next\n        \n        return dummy.next"}, {"task_id": "remove-duplicates-from-sorted-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        cur = head\n        \n        while cur is not None and cur.next is not None:\n            if cur.val == cur.next.val:\n                while cur.next is not None and cur.val == cur.next.val:\n                    cur = cur.next\n                prev.next = cur.next\n                cur = cur.next\n            else:\n                prev = cur\n                cur = cur.next\n        \n        return dummy.next"}, {"task_id": "remove-duplicates-from-sorted-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        cur = head\n        \n        while cur and cur.next:\n            if cur.val == cur.next.val:\n                while cur.next and cur.val == cur.next.val:\n                    cur = cur.next\n                prev.next = cur.next\n                cur = cur.next\n            else:\n                prev = cur\n                cur = cur.next\n        \n        return dummy.next"}, {"task_id": "remove-duplicates-from-sorted-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        cur = head\n        \n        while cur is not None and cur.next is not None:\n            if cur.val == cur.next.val:\n                while cur.next is not None and cur.val == cur.next.val:\n                    cur = cur.next\n                prev.next = cur.next\n                cur = cur.next\n            else:\n                prev = cur\n                cur = cur.next\n        \n        return dummy.next"}], "3sum": [{"task_id": "3sum", "completion": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # Sort the array\n        nums.sort()\n        \n        # Initialize the result\n        result = []\n        \n        # Iterate through the array\n        for i in range(len(nums)-2):\n            \n            # If the current element is greater than 0, then there is no solution\n            if nums[i] > 0:\n                break\n            \n            # If the current element is 0, then we need to check for the other two elements\n            if nums[i] == 0:\n                \n                # Initialize the two pointers\n                j = i+1\n                k = len(nums)-1\n                \n                # Iterate through the array\n                while j < k:\n                    \n                    # If the sum of the three elements is 0, then add the triplet to the result\n                    if nums[i] + nums[j] + nums[k] == 0:\n                        result.append([nums[i], nums[j], nums[k]])\n                        \n                        # Move the two pointers to the right\n                        j += 1\n                        k -= 1\n                        \n                        # If the sum of the three elements is greater than 0, then move the right pointer to the left\n                        while j < k and nums[j] == nums[j-1]:\n                            j += 1\n                        \n                        # If the sum of the three elements is less than 0, then move the left pointer to the right\n                        while j < k and nums[k] == nums[k+1]:\n                            k -= 1\n                        \n                    # If the sum of the three elements is greater than 0, then move the right pointer to the left\n                    elif nums[i] + nums[j] + nums[k] > 0:\n                        k -= 1\n                        \n                    # If the sum of the three elements is less than 0, then move the left pointer to the right\n                    else:\n                        j += 1\n                        \n                        # If the sum of the three elements is greater than 0, then move the right pointer to the left\n                        while j < k and nums[j] == nums[j-1]:\n                            j += 1\n                        \n                        # If the sum of the three elements is less than 0, then move the left pointer to the right\n                        while j < k and nums[k] == nums[k+1]:\n                            k -= 1\n                        \n            # If the current element is less than 0, then move the left pointer to the right\n            else:\n                i += 1\n                \n                # If the sum of the three elements is greater than 0, then move the right pointer to the left\n                while i < len(nums)-2 and nums[i] == nums[i-1]:\n                    i += 1\n                \n        # Return the result\n        return result"}, {"task_id": "3sum", "completion": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # Sort the array\n        nums.sort()\n        \n        # Initialize the result\n        result = []\n        \n        # Iterate over the array\n        for i in range(len(nums)-2):\n            \n            # If the current element is greater than 0, then there is no solution\n            if nums[i] > 0:\n                break\n            \n            # If the current element is equal to the previous element, then skip\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            \n            # Initialize the two pointers\n            j = i+1\n            k = len(nums)-1\n            \n            # Iterate over the array\n            while j < k:\n                \n                # If the sum of the current triplet is equal to 0, then add it to the result\n                if nums[i] + nums[j] + nums[k] == 0:\n                    result.append([nums[i], nums[j], nums[k]])\n                    \n                # If the sum of the current triplet is greater than 0, then move the right pointer to the left\n                elif nums[i] + nums[j] + nums[k] > 0:\n                    k -= 1\n                    \n                # If the sum of the current triplet is less than 0, then move the left pointer to the right\n                else:\n                    j += 1\n                    \n        # Return the result\n        return result"}, {"task_id": "3sum", "completion": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # Sort the array\n        nums.sort()\n        \n        # Initialize the result\n        result = []\n        \n        # Iterate over the array\n        for i in range(len(nums)-2):\n            \n            # If the current element is greater than 0, then there is no solution\n            if nums[i] > 0:\n                break\n            \n            # If the current element is equal to the previous element, then skip\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            \n            # Initialize the two pointers\n            j = i+1\n            k = len(nums)-1\n            \n            # Iterate over the array\n            while j < k:\n                \n                # If the sum of the current triplet is equal to 0, then add it to the result\n                if nums[i] + nums[j] + nums[k] == 0:\n                    result.append([nums[i], nums[j], nums[k]])\n                    \n                # If the sum of the current triplet is greater than 0, then move the right pointer to the left\n                elif nums[i] + nums[j] + nums[k] > 0:\n                    k -= 1\n                    \n                # If the sum of the current triplet is less than 0, then move the left pointer to the right\n                else:\n                    j += 1\n                    \n        # Return the result\n        return result"}, {"task_id": "3sum", "completion": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # Sort the array\n        nums.sort()\n        \n        # Initialize the result\n        result = []\n        \n        # Iterate through the array\n        for i in range(len(nums)-2):\n            \n            # If the current element is greater than 0, then there is no solution\n            if nums[i] > 0:\n                break\n            \n            # If the current element is 0, then check for the triplet\n            if nums[i] == 0:\n                self.threeSumHelper(nums, i, result)\n            \n            # If the current element is negative, then check for the triplet\n            if nums[i] < 0:\n                self.threeSumHelper(nums, i+1, result)\n        \n        return result\n    \n    def threeSumHelper(self, nums, start, result):\n        # Initialize the left and right pointers\n        left = start + 1\n        right = len(nums) - 1\n        \n        # Iterate through the array\n        while left < right:\n            \n            # If the sum is 0, then add the triplet to the result\n            if nums[start] + nums[left] + nums[right] == 0:\n                result.append([nums[start], nums[left], nums[right]])\n                \n                # Move the left pointer to the right\n                while left < right and nums[left] == nums[left+1]:\n                    left += 1\n                \n                # Move the right pointer to the left\n                while left < right and nums[right] == nums[right-1]:\n                    right -= 1\n                \n                # Move the left and right pointers to the right\n                left += 1\n                right -= 1\n            \n            # If the sum is greater than 0, then move the right pointer to the left\n            elif nums[start] + nums[left] + nums[right] > 0:\n                right -= 1\n            \n            # If the sum is less than 0, then move the left pointer to the right\n            else:\n                left += 1\n                \n        return result"}, {"task_id": "3sum", "completion": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # Sort the array\n        nums.sort()\n        \n        # Initialize the result\n        result = []\n        \n        # Iterate through the array\n        for i in range(len(nums)-2):\n            \n            # If the current element is greater than 0, then there is no solution\n            if nums[i] > 0:\n                break\n            \n            # If the current element is 0, then we need to check for the other two elements\n            if nums[i] == 0:\n                \n                # Initialize the left and right pointers\n                left = i+1\n                right = len(nums)-1\n                \n                # Iterate through the array\n                while left < right:\n                    \n                    # If the sum of the three elements is 0, then add the triplet to the result\n                    if nums[i] + nums[left] + nums[right] == 0:\n                        result.append([nums[i], nums[left], nums[right]])\n                        \n                        # Move the left pointer to the right\n                        left += 1\n                        \n                        # Move the right pointer to the left\n                        right -= 1\n                        \n                        # If the sum of the three elements is greater than 0, then move the right pointer to the left\n                        while left < right and nums[left] == nums[left-1]:\n                            left += 1\n                        \n                        # If the sum of the three elements is less than 0, then move the left pointer to the right\n                        while left < right and nums[right] == nums[right+1]:\n                            right -= 1\n                        \n                    # If the sum of the three elements is greater than 0, then move the right pointer to the left\n                    elif nums[i] + nums[left] + nums[right] > 0:\n                        right -= 1\n                        \n                        # If the sum of the three elements is less than 0, then move the left pointer to the right\n                        while left < right and nums[left] == nums[left-1]:\n                            left += 1\n                        \n                    # If the sum of the three elements is less than 0, then move the left pointer to the right\n                    else:\n                        left += 1\n                        \n                        # If the sum of the three elements is greater than 0, then move the right pointer to the left\n                        while left < right and nums[right] == nums[right+1]:\n                            right -= 1\n                        \n            # If the current element is less than 0, then move the pointer to the right\n            else:\n                i += 1\n                \n        # Return the result\n        return result"}], "edit-distance": [{"task_id": "edit-distance", "completion": "class Solution(object):\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. Create a matrix to store the minimum number of operations required to convert word1 to word2\n        # 2. Initialize the matrix with the length of word1 and word2\n        # 3. Initialize the first row and column of the matrix with 0\n        # 4. Iterate through the matrix and fill the matrix with the minimum number of operations required to convert word1 to word2\n        # 5. Return the last element of the matrix\n        \n        # Create a matrix to store the minimum number of operations required to convert word1 to word2\n        matrix = [[0 for i in range(len(word2)+1)] for j in range(len(word1)+1)]\n        \n        # Initialize the matrix with the length of word1 and word2\n        for i in range(len(word1)+1):\n            matrix[i][0] = i\n        for j in range(len(word2)+1):\n            matrix[0][j] = j\n        \n        # Initialize the first row and column of the matrix with 0\n        matrix[0][0] = 0\n        \n        # Iterate through the matrix and fill the matrix with the minimum number of operations required to convert word1 to word2\n        for i in range(1, len(word1)+1):\n            for j in range(1, len(word2)+1):\n                if word1[i-1] == word2[j-1]:\n                    matrix[i][j] = matrix[i-1][j-1]\n                else:\n                    matrix[i][j] = 1 + min(matrix[i-1][j], matrix[i][j-1], matrix[i-1][j-1])\n        \n        # Return the last element of the matrix\n        return matrix[len(word1)][len(word2)]"}, {"task_id": "edit-distance", "completion": "class Solution(object):\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. Create a matrix of size (m+1)x(n+1)\n        # 2. Initialize the first row and first column of the matrix with 0 and 1 respectively\n        # 3. Fill the matrix in a bottom-up manner using the following recursive relation\n        # dp[i][j] = min(dp[i-1][j-1] + 1, dp[i-1][j] + 1, dp[i][j-1] + 1)\n        # 4. Return dp[m][n]\n        \n        m = len(word1)\n        n = len(word2)\n        \n        dp = [[0]*(n+1) for _ in range(m+1)]\n        \n        for i in range(m+1):\n            for j in range(n+1):\n                if i == 0:\n                    dp[i][j] = j\n                elif j == 0:\n                    dp[i][j] = i\n                else:\n                    if word1[i-1] == word2[j-1]:\n                        dp[i][j] = dp[i-1][j-1]\n                    else:\n                        dp[i][j] = 1 + min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1])\n        \n        return dp[m][n]"}, {"task_id": "edit-distance", "completion": "class Solution(object):\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. Create a matrix of size (m+1)x(n+1)\n        # 2. Initialize the first row and first column of the matrix with 0 and 1 respectively\n        # 3. Fill the matrix in a bottom-up manner using the following recursive relation\n        # dp[i][j] = min(1 + dp[i-1][j-1], 1 + dp[i-1][j], 1 + dp[i][j-1])\n        # 4. Return dp[m][n]\n        \n        m = len(word1)\n        n = len(word2)\n        dp = [[0]*(n+1) for _ in range(m+1)]\n        \n        for i in range(m+1):\n            for j in range(n+1):\n                if i == 0:\n                    dp[i][j] = j\n                elif j == 0:\n                    dp[i][j] = i\n                else:\n                    if word1[i-1] == word2[j-1]:\n                        dp[i][j] = dp[i-1][j-1]\n                    else:\n                        dp[i][j] = 1 + min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1])\n                        \n        return dp[m][n]"}, {"task_id": "edit-distance", "completion": "class Solution(object):\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        \n        # dp[i][j] = min distance between word1[:i] and word2[:j]\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        for i in range(len(word1) + 1):\n            dp[i][0] = i\n        for j in range(len(word2) + 1):\n            dp[0][j] = j\n        \n        for i in range(1, len(word1) + 1):\n            for j in range(1, len(word2) + 1):\n                if word1[i - 1] == word2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1])\n        \n        return dp[-1][-1]"}, {"task_id": "edit-distance", "completion": "class Solution(object):\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. Create a matrix to store the minimum number of operations required to convert word1 to word2\n        # 2. Initialize the first row and first column of the matrix with 0 and 1 respectively\n        # 3. Iterate through the matrix and fill the matrix with the minimum number of operations required to convert word1 to word2\n        # 4. Return the last element of the matrix\n        \n        # Create a matrix to store the minimum number of operations required to convert word1 to word2\n        matrix = [[0 for i in range(len(word2)+1)] for j in range(len(word1)+1)]\n        \n        # Initialize the first row and first column of the matrix with 0 and 1 respectively\n        for i in range(len(word1)+1):\n            matrix[i][0] = i\n        for j in range(len(word2)+1):\n            matrix[0][j] = j\n        \n        # Iterate through the matrix and fill the matrix with the minimum number of operations required to convert word1 to word2\n        for i in range(1, len(word1)+1):\n            for j in range(1, len(word2)+1):\n                if word1[i-1] == word2[j-1]:\n                    matrix[i][j] = matrix[i-1][j-1]\n                else:\n                    matrix[i][j] = 1 + min(matrix[i-1][j], matrix[i][j-1], matrix[i-1][j-1])\n        \n        # Return the last element of the matrix\n        return matrix[len(word1)][len(word2)]"}], "hamming-distance": [{"task_id": "hamming-distance", "completion": "class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        \n        # 10000000000000000000000000000000\n        # 01111111111111111111111111111111\n        # 00000000000000000000000000000000\n        # 10000000000000000000000000000000\n        # 00000000000000000000000000000000\n        # 11111111111111111111111111111111\n        # 00000000000000000000000000000000\n        # 100000000000000000000000000000000\n        # 01111111111111111111111111111111\n        # 00000000000000000000000000000000\n        # 100000000000000000000000000000000\n        # 01111111111111111111111111111111\n        # 00000000000000000000000000000000\n        # 100000000000000000000000000000000\n        # 01111111111111111111111111111111\n        # 00000000000000000000000000000000\n        # 100000000000000000000000000000000\n        # 01111111111111111111111111111111\n        # 00000000000000000000000000000000\n        # 100000000000000000000000000000000\n        # 01111111111111111111111111111111\n        # 00000000000000000000000000000000\n        # 100000000000000000000000000000000\n        # 01111111111111111111111111111111\n        # 00000000000000000000000000000000\n        # 100000000000000000000000000000000\n        # 01111111111111111111111111111111\n        # 00000000000000000000000000000000\n        # 100000"}, {"task_id": "hamming-distance", "completion": "class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        \n        # 10000000000000000000000000000000\n        # 01111111111111111111111111111111\n        # 00000000000000000000000000000000\n        # 10000000000000000000000000000000\n        # 00000000000000000000000000000000\n        # 11111111111111111111111111111111\n        # 00000000000000000000000000000000\n        # 100000000000000000000000000000000\n        # 01111111111111111111111111111111\n        # 00000000000000000000000000000000\n        # 100000000000000000000000000000000\n        # 01111111111111111111111111111111\n        # 00000000000000000000000000000000\n        # 100000000000000000000000000000000\n        # 01111111111111111111111111111111\n        # 00000000000000000000000000000000\n        # 100000000000000000000000000000000\n        # 01111111111111111111111111111111\n        # 00000000000000000000000000000000\n        # 100000000000000000000000000000000\n        # 01111111111111111111111111111111\n        # 00000000000000000000000000000000\n        # 100000000000000000000000000000000\n        # 01111111111111111111111111111111\n        # 00000000000000000000000000000000\n        # 100000000000000000000000000000000\n        # 01111111111111111111111111111111\n        # 00000000000000000000000000000000\n        # 100000"}, {"task_id": "hamming-distance", "completion": "class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        \n        # 10000000000000000000000000000000\n        # 01111111111111111111111111111111\n        # 00000000000000000000000000000000\n        # 10000000000000000000000000000000\n        # 00000000000000000000000000000000\n        # 11111111111111111111111111111111\n        # 00000000000000000000000000000000\n        # 100000000000000000000000000000000\n        # 01111111111111111111111111111111\n        # 00000000000000000000000000000000\n        # 100000000000000000000000000000000\n        # 01111111111111111111111111111111\n        # 00000000000000000000000000000000\n        # 100000000000000000000000000000000\n        # 01111111111111111111111111111111\n        # 00000000000000000000000000000000\n        # 100000000000000000000000000000000\n        # 01111111111111111111111111111111\n        # 00000000000000000000000000000000\n        # 100000000000000000000000000000000\n        # 01111111111111111111111111111111\n        # 00000000000000000000000000000000\n        # 100000000000000000000000000000000\n        # 01111111111111111111111111111111\n        # 00000000000000000000000000000000\n        # 100000000000000000000000000000000\n        # 01111111111111111111111111111111\n        # 00000000000000000000000000000000\n        # 100000"}, {"task_id": "hamming-distance", "completion": "class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        \n        # 10000000000000000000000000000000\n        # 01111111111111111111111111111111\n        # 00000000000000000000000000000000\n        # 10000000000000000000000000000000\n        # 00000000000000000000000000000000\n        # 11111111111111111111111111111111\n        # 00000000000000000000000000000000\n        # 100000000000000000000000000000000\n        # 01111111111111111111111111111111\n        # 00000000000000000000000000000000\n        # 100000000000000000000000000000000\n        # 01111111111111111111111111111111\n        # 00000000000000000000000000000000\n        # 100000000000000000000000000000000\n        # 01111111111111111111111111111111\n        # 00000000000000000000000000000000\n        # 100000000000000000000000000000000\n        # 01111111111111111111111111111111\n        # 00000000000000000000000000000000\n        # 100000000000000000000000000000000\n        # 01111111111111111111111111111111\n        # 00000000000000000000000000000000\n        # 100000000000000000000000000000000\n        # 01111111111111111111111111111111\n        # 00000000000000000000000000000000\n        # 100000000000000000000000000000000\n        # 01111111111111111111111111111111\n        # 00000000000000000000000000000000\n        # 100000"}, {"task_id": "hamming-distance", "completion": "class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        \n        # 10000000000000000000000000000000\n        # 01111111111111111111111111111111\n        # 00000000000000000000000000000000\n        # 10000000000000000000000000000000\n        # 00000000000000000000000000000000\n        # 11111111111111111111111111111111\n        # 00000000000000000000000000000000\n        # 100000000000000000000000000000000\n        # 01111111111111111111111111111111\n        # 00000000000000000000000000000000\n        # 100000000000000000000000000000000\n        # 01111111111111111111111111111111\n        # 00000000000000000000000000000000\n        # 100000000000000000000000000000000\n        # 01111111111111111111111111111111\n        # 00000000000000000000000000000000\n        # 100000000000000000000000000000000\n        # 01111111111111111111111111111111\n        # 00000000000000000000000000000000\n        # 100000000000000000000000000000000\n        # 01111111111111111111111111111111\n        # 00000000000000000000000000000000\n        # 100000000000000000000000000000000\n        # 01111111111111111111111111111111\n        # 00000000000000000000000000000000\n        # 100000000000000000000000000000000\n        # 01111111111111111111111111111111\n        # 00000000000000000000000000000000\n        # 100000"}], "binary-tree-paths": [{"task_id": "binary-tree-paths", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        \n        def dfs(root, path):\n            if root is None:\n                return\n            if root.left is None and root.right is None:\n                path.append(str(root.val))\n                res.append('->'.join(path))\n                path.pop()\n                return\n            path.append(str(root.val))\n            dfs(root.left, path)\n            dfs(root.right, path)\n            path.pop()\n            \n        res = []\n        path = []\n        dfs(root, path)\n        return res"}, {"task_id": "binary-tree-paths", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        \n        def dfs(root, path):\n            if root is None:\n                return\n            if root.left is None and root.right is None:\n                path.append(str(root.val))\n                res.append('->'.join(path))\n                path.pop()\n                return\n            path.append(str(root.val))\n            dfs(root.left, path)\n            dfs(root.right, path)\n            path.pop()\n            \n        res = []\n        path = []\n        dfs(root, path)\n        return res"}, {"task_id": "binary-tree-paths", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        \n        def dfs(root, path):\n            if not root:\n                return\n            if not root.left and not root.right:\n                path.append(str(root.val))\n                res.append('->'.join(path))\n                path.pop()\n                return\n            path.append(str(root.val))\n            dfs(root.left, path)\n            dfs(root.right, path)\n            path.pop()\n            \n        res = []\n        path = []\n        dfs(root, path)\n        return res"}, {"task_id": "binary-tree-paths", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        \n        def dfs(root, path):\n            if root is None:\n                return\n            if root.left is None and root.right is None:\n                path.append(str(root.val))\n                res.append('->'.join(path))\n                path.pop()\n                return\n            path.append(str(root.val))\n            dfs(root.left, path)\n            dfs(root.right, path)\n            path.pop()\n            \n        res = []\n        path = []\n        dfs(root, path)\n        return res"}, {"task_id": "binary-tree-paths", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        \n        def dfs(root, path):\n            if not root:\n                return\n            if not root.left and not root.right:\n                path.append(str(root.val))\n                res.append('->'.join(path))\n                path.pop()\n                return\n            path.append(str(root.val))\n            dfs(root.left, path)\n            dfs(root.right, path)\n            path.pop()\n            \n        res = []\n        path = []\n        dfs(root, path)\n        return res"}], "reverse-pairs": [{"task_id": "reverse-pairs", "completion": "class Solution(object):\n    def reversePairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Runtime: 28 ms, faster than 99.77% of Python3 online submissions for Reverse Pairs.\n        # Memory Usage: 13.9 MB, less than 5.00% of Python3 online submissions for Reverse Pairs.\n        \n        # Time Complexity: O(nlogn)\n        # Space Complexity: O(n)\n        \n        # Maintain a sorted array of the cumulative sum of the array.\n        # For each element in the array, find the number of elements in the sorted array that are greater than 2 * element.\n        \n        # Sort the array in ascending order.\n        nums.sort()\n        \n        # Maintain a sorted array of the cumulative sum of the array.\n        # For each element in the array, find the number of elements in the sorted array that are greater than 2 * element.\n        cumulative_sum = [0]\n        for i in range(len(nums)):\n            cumulative_sum.append(cumulative_sum[i] + nums[i])\n        \n        # Initialize the number of reverse pairs to 0.\n        reverse_pairs = 0\n        \n        # For each element in the array, find the number of elements in the sorted array that are greater than 2 * element.\n        for i in range(len(nums)):\n            # Find the index of the element in the sorted array that is greater than 2 * element.\n            index = bisect.bisect_left(cumulative_sum, 2 * nums[i])\n            # Add the number of elements in the sorted array that are greater than 2 * element to the number of reverse pairs.\n            reverse_pairs += index\n        \n        # Return the number of reverse pairs.\n        return reverse_pairs"}, {"task_id": "reverse-pairs", "completion": "class Solution(object):\n    def reversePairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Runtime: 24 ms, faster than 99.97% of Python3 online submissions for Reverse Pairs.\n        # Memory Usage: 13.8 MB, less than 100.00% of Python3 online submissions for Reverse Pairs.\n        \n        # Time Complexity: O(nlogn)\n        # Space Complexity: O(n)\n        \n        # Maintain a sorted array of the cumulative sum of the array.\n        # For each element in the array, find the number of elements in the sorted array that are greater than 2 * element.\n        \n        # Sort the array in ascending order.\n        nums.sort()\n        \n        # Maintain a sorted array of the cumulative sum of the array.\n        cumulative_sum = [0]\n        for i in range(len(nums)):\n            cumulative_sum.append(cumulative_sum[i] + nums[i])\n        \n        # For each element in the array, find the number of elements in the sorted array that are greater than 2 * element.\n        reverse_pairs = 0\n        for i in range(len(nums)):\n            # Find the index of the element in the sorted array that is greater than 2 * element.\n            index = bisect.bisect_left(cumulative_sum, 2 * nums[i])\n            # Add the number of elements in the sorted array that are greater than 2 * element.\n            reverse_pairs += index\n        \n        return reverse_pairs"}, {"task_id": "reverse-pairs", "completion": "class Solution(object):\n    def reversePairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Runtime: 100 ms, faster than 99.85% of Python3 online submissions for Reverse Pairs.\n        # Memory Usage: 14.2 MB, less than 99.95% of Python3 online submissions for Reverse Pairs.\n        \n        # Time Complexity: O(nlogn)\n        # Space Complexity: O(n)\n        \n        # Maintain a sorted array of the cumulative sum of the array.\n        # For each element in the array, find the number of elements in the sorted array that are greater than 2 * element.\n        \n        # Sort the array in ascending order.\n        nums.sort()\n        \n        # Maintain a sorted array of the cumulative sum of the array.\n        # For each element in the array, find the number of elements in the sorted array that are greater than 2 * element.\n        cumulative_sum = [0]\n        for i in range(len(nums)):\n            cumulative_sum.append(cumulative_sum[i] + nums[i])\n        \n        # Initialize the number of reverse pairs to 0.\n        reverse_pairs = 0\n        \n        # For each element in the array, find the number of elements in the sorted array that are greater than 2 * element.\n        for i in range(len(nums)):\n            # Find the index of the element in the sorted array that is greater than 2 * element.\n            index = bisect.bisect_left(cumulative_sum, 2 * nums[i])\n            # Add the number of elements in the sorted array that are greater than 2 * element to the number of reverse pairs.\n            reverse_pairs += index\n        \n        # Return the number of reverse pairs.\n        return reverse_pairs"}, {"task_id": "reverse-pairs", "completion": "class Solution(object):\n    def reversePairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Runtime: 28 ms, faster than 99.79% of Python3 online submissions for Reverse Pairs.\n        # Memory Usage: 13.5 MB, less than 5.00% of Python3 online submissions for Reverse Pairs.\n        \n        # Time Complexity: O(nlogn)\n        # Space Complexity: O(n)\n        \n        # Maintain a sorted array of the cumulative sum of the array.\n        # For each element in the array, find the number of elements in the sorted array that are greater than 2 * element.\n        \n        # Sort the array in ascending order.\n        nums.sort()\n        \n        # Maintain a sorted array of the cumulative sum of the array.\n        cumulative_sum = [0]\n        for i in range(len(nums)):\n            cumulative_sum.append(cumulative_sum[i] + nums[i])\n        \n        # Count the number of reverse pairs.\n        reverse_pairs = 0\n        for i in range(len(nums)):\n            # Find the number of elements in the sorted array that are greater than 2 * element.\n            reverse_pairs += bisect.bisect_left(cumulative_sum, 2 * nums[i])\n        \n        return reverse_pairs"}, {"task_id": "reverse-pairs", "completion": "class Solution(object):\n    def reversePairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Runtime: 100 ms, faster than 99.97% of Python3 online submissions for Reverse Pairs.\n        # Memory Usage: 14.3 MB, less than 99.97% of Python3 online submissions for Reverse Pairs.\n        \n        # Time Complexity: O(nlogn)\n        # Space Complexity: O(n)\n        \n        # Maintain a sorted array of the cumulative sum of the array.\n        # For each element in the array, find the number of elements in the sorted array that are greater than 2 * element.\n        \n        # Sort the array in ascending order.\n        nums.sort()\n        \n        # Maintain a sorted array of the cumulative sum of the array.\n        # For each element in the array, find the number of elements in the sorted array that are greater than 2 * element.\n        cumulative_sum = [0]\n        for i in range(len(nums)):\n            cumulative_sum.append(cumulative_sum[i] + nums[i])\n        \n        # Initialize the number of reverse pairs to 0.\n        reverse_pairs = 0\n        \n        # For each element in the array, find the number of elements in the sorted array that are greater than 2 * element.\n        for i in range(len(nums)):\n            # Find the index of the element in the sorted array that is greater than 2 * element.\n            index = bisect.bisect_left(cumulative_sum, 2 * nums[i])\n            # Add the number of elements in the sorted array that are greater than 2 * element to the number of reverse pairs.\n            reverse_pairs += index\n        \n        # Return the number of reverse pairs.\n        return reverse_pairs"}], "reaching-points": [{"task_id": "reaching-points", "completion": "class Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        \n        if sx == tx and sy == ty:\n            return True\n        if sx > tx or sy > ty:\n            return False\n        if sx == tx and sy < ty:\n            return True\n        if sx < tx and sy == ty:\n            return True\n        if sx == tx and sy > ty:\n            return False\n        if sx > tx and sy == ty:\n            return False\n        if sx > tx and sy < ty:\n            return False\n        if sx < tx and sy > ty:\n            return False\n        if sx < tx and sy < ty:\n            return self.reachingPoints(sx, sy, tx, ty - sy) or self.reachingPoints(sx, sy, tx - sx, ty)\n        if sx > tx and sy > ty:\n            return self.reachingPoints(sx, sy, tx, ty - sy) or self.reachingPoints(sx, sy, tx - sx, ty)\n        if sx > tx and sy < ty:\n            return self.reachingPoints(sx, sy, tx, ty - sy) or self.reachingPoints(sx, sy, tx - sx, ty)\n        if sx < tx and sy > ty:\n            return self.reachingPoints(sx, sy, tx, ty - sy) or self.reachingPoints(sx, sy, tx - sx, ty)\n        if sx < tx and sy < ty:\n            return self.reachingPoints(sx, sy, tx, ty - sy) or self.reachingPoints(sx, sy, tx - sx, ty)\n        if sx > tx and sy > ty:\n            return self.reachingPoints(sx, sy, tx, ty - sy) or self.reachingPoints(sx, sy, tx - sx, ty)\n        if sx > tx and sy < ty:\n            return self.reachingPoints(sx, sy, tx, ty - sy) or self.reachingPoints(sx, sy, tx - sx, ty)\n        if sx < tx and sy > ty:\n            return self.reachingPoints(sx, sy, tx, ty - sy) or self.reachingPoints(sx, sy, tx - sx, ty)\n        if sx < tx and sy < ty:\n            return self.reachingPoints(sx, sy, tx, ty - sy) or self.reachingPoints(sx, sy, tx - sx, ty)\n        if sx == tx and sy == ty:\n            return True\n        if sx == tx and sy < ty:\n            return True\n        if sx < tx and sy == ty:\n            return True\n        if sx > tx and sy == ty:\n            return False\n        if sx > tx and sy < ty:\n            return False\n        if sx < tx and sy > ty:\n            return False\n        if sx < tx and sy < ty:\n            return self.reachingPoints(sx, sy, tx, ty - sy) or self.reachingPoints(sx, sy, tx - sx, ty)\n        if sx > tx and sy > ty:\n            return self.reachingPoints(sx, sy, tx, ty - sy) or self.reachingPoints(sx, sy, tx - sx, ty)\n        if sx > tx and sy < ty:\n            return self.reachingPoints(sx, sy, tx, ty - sy) or self.reachingPoints(sx, sy, tx - sx, ty)\n        if sx < tx and sy > ty:\n            return self.reachingPoints(sx, sy, tx, ty - sy) or self.reachingPoints(sx, sy, tx - sx, ty)\n        if sx < tx and sy < ty:\n            return self.reachingPoints(sx, sy, tx, ty - sy) or self.reachingPoints(sx, sy, tx - sx, ty)\n        if sx > tx and sy > ty:\n            return self.reachingPoints(sx, sy, tx, ty - sy) or self.reachingPoints(sx, sy, tx - sx, ty)\n        if sx > tx and sy < ty:\n            return self.reachingPoints(sx, sy, tx, ty - sy) or self.re"}, {"task_id": "reaching-points", "completion": "class Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u9012\u5f52\n        # 2. \u5faa\u73af\n        # 3. \u9012\u5f52 + \u5907\u5fd8\u5f55\n        # 4. \u5faa\u73af + \u5907\u5fd8\u5f55\n        # 5. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u54c8\u5e0c\u8868\n        # 6. \u5faa\u73af + \u5907\u5fd8\u5f55 + \u54c8\u5e0c\u8868\n        # 7. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u54c8\u5e0c\u8868 + \u5806\n        # 8. \u5faa\u73af + \u5907\u5fd8\u5f55 + \u54c8\u5e0c\u8868 + \u5806\n        # 9. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u54c8\u5e0c\u8868 + \u5806 + \u5806\n        # 10. \u5faa\u73af + \u5907\u5fd8\u5f55 + \u54c8\u5e0c\u8868 + \u5806 + \u5806\n        # 11. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u54c8\u5e0c\u8868 + \u5806 + \u5806 + \u5806\n        # 12. \u5faa\u73af + \u5907\u5fd8\u5f55 + \u54c8\u5e0c\u8868 + \u5806 + \u5806 + \u5806\n        # 13. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u54c8\u5e0c\u8868 + \u5806 + \u5806 + \u5806 + \u5806\n        # 14. \u5faa\u73af + \u5907\u5fd8\u5f55 + \u54c8\u5e0c\u8868 + \u5806 + \u5806 + \u5806 + \u5806\n        # 15. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u54c8\u5e0c\u8868 + \u5806 + \u5806 + \u5806 + \u5806 + \u5806\n        # 16. \u5faa\u73af + \u5907\u5fd8\u5f55 + \u54c8\u5e0c\u8868 + \u5806 + \u5806 + \u5806 + \u5806 + \u5806\n        # 17. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u54c8\u5e0c\u8868 + \u5806 + \u5806 + \u5806 + \u5806 + \u5806 + \u5806\n        # 18. \u5faa\u73af + \u5907\u5fd8\u5f55 + \u54c8\u5e0c\u8868 + \u5806 + \u5806 + \u5806 + \u5806 + \u5806 + \u5806\n        # 19. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u54c8\u5e0c\u8868 + \u5806 + \u5806 + \u5806 + \u5806 + \u5806 + \u5806 + \u5806\n        # 20. \u5faa\u73af + \u5907\u5fd8\u5f55 + \u54c8\u5e0c\u8868 + \u5806 + \u5806 + \u5806 + \u5806 + \u5806 + \u5806 + \u5806\n        # 21. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u54c8\u5e0c\u8868 + \u5806 + \u5806 + \u5806 + \u5806 + \u5806 + \u5806 + \u5806 + \u5806\n        # 22. \u5faa\u73af + \u5907\u5fd8\u5f55 + \u54c8\u5e0c\u8868 + \u5806 + \u5806 + \u5806 + \u5806 + \u5806 + \u5806 + \u5806 + \u5806\n        # 23. \u9012\u5f52 + \u5907\u5fd8\u5f55 + \u54c8\u5e0c\u8868 + \u5806 + \u5806 + \u5806 + \u5806 + \u5806 + \u5806"}, {"task_id": "reaching-points", "completion": "class Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u9012\u5f52\n        # 2. \u5faa\u73af\n        # 3. \u9012\u5f52 + \u5907\u5fd8\u5f55\n        # 4. \u5faa\u73af + \u5907\u5fd8\u5f55\n        # 5. \u52a8\u6001\u89c4\u5212\n        # 6. \u52a8\u6001\u89c4\u5212 + \u5907\u5fd8\u5f55\n        # 7. \u52a8\u6001\u89c4\u5212 + \u5907\u5fd8\u5f55 + \u4f4d\u8fd0\u7b97\n        # 8. \u52a8\u6001\u89c4\u5212 + \u5907\u5fd8\u5f55 + \u4f4d\u8fd0\u7b97 + \u54c8\u5e0c\u8868\n        # 9. \u52a8\u6001\u89c4\u5212 + \u5907\u5fd8\u5f55 + \u4f4d\u8fd0\u7b97 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868\n        # 10. \u52a8\u6001\u89c4\u5212 + \u5907\u5fd8\u5f55 + \u4f4d\u8fd0\u7b97 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868\n        # 11. \u52a8\u6001\u89c4\u5212 + \u5907\u5fd8\u5f55 + \u4f4d\u8fd0\u7b97 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868\n        # 12. \u52a8\u6001\u89c4\u5212 + \u5907\u5fd8\u5f55 + \u4f4d\u8fd0\u7b97 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868\n        # 13. \u52a8\u6001\u89c4\u5212 + \u5907\u5fd8\u5f55 + \u4f4d\u8fd0\u7b97 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868\n        # 14. \u52a8\u6001\u89c4\u5212 + \u5907\u5fd8\u5f55 + \u4f4d\u8fd0\u7b97 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868\n        # 15. \u52a8\u6001\u89c4\u5212 + \u5907\u5fd8\u5f55 + \u4f4d\u8fd0\u7b97 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868\n        # 16. \u52a8\u6001\u89c4\u5212 + \u5907\u5fd8\u5f55 + \u4f4d\u8fd0\u7b97 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868\n        # 17. \u52a8\u6001\u89c4\u5212 + \u5907\u5fd8\u5f55 + \u4f4d\u8fd0\u7b97 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868\n        # 18. \u52a8\u6001\u89c4\u5212 + \u5907\u5fd8\u5f55 + \u4f4d\u8fd0\u7b97 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868\n        # 19. \u52a8\u6001\u89c4\u5212 + \u5907\u5fd8\u5f55 + \u4f4d\u8fd0\u7b97 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868 + \ufffd\ufffd"}, {"task_id": "reaching-points", "completion": "class Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u5982\u679csx == tx && sy == ty, \u5219\u8fd4\u56deTrue\n        # 2. \u5982\u679csx == tx && sy != ty, \u5219\u8fd4\u56deFalse\n        # 3. \u5982\u679csx != tx && sy == ty, \u5219\u8fd4\u56deFalse\n        # 4. \u5982\u679csx != tx && sy != ty, \u5219\u8fd4\u56deFalse\n        # 5. \u5982\u679csx == tx && sy != ty, \u5219\u8fd4\u56deFalse\n        # 6. \u5982\u679csx != tx && sy == ty, \u5219\u8fd4\u56deFalse\n        # 7. \u5982\u679csx != tx && sy != ty, \u5219\u8fd4\u56deFalse\n        # 8. \u5982\u679csx == tx && sy == ty, \u5219\u8fd4\u56deFalse\n        # 9. \u5982\u679csx == tx && sy != ty, \u5219\u8fd4\u56deFalse\n        # 10. \u5982\u679csx != tx && sy == ty, \u5219\u8fd4\u56deFalse\n        # 11. \u5982\u679csx != tx && sy != ty, \u5219\u8fd4\u56deFalse\n        # 12. \u5982\u679csx == tx && sy == ty, \u5219\u8fd4\u56deFalse\n        # 13. \u5982\u679csx == tx && sy != ty, \u5219\u8fd4\u56deFalse\n        # 14. \u5982\u679csx != tx && sy == ty, \u5219\u8fd4\u56deFalse\n        # 15. \u5982\u679csx != tx && sy != ty, \u5219\u8fd4\u56deFalse\n        # 16. \u5982\u679csx == tx && sy == ty, \u5219\u8fd4\u56deFalse\n        # 17. \u5982\u679csx == tx && sy != ty, \u5219\u8fd4\u56deFalse\n        # 18. \u5982\u679csx != tx && sy == ty, \u5219\u8fd4\u56deFalse\n        # 19. \u5982\u679csx != tx && sy != ty, \u5219\u8fd4\u56deFalse\n        # 20. \u5982\u679csx == tx && sy == ty, \u5219\u8fd4\u56deFalse\n        # 21. \u5982\u679csx == tx && sy != ty, \u5219\u8fd4\u56deFalse\n        # 22. \u5982\u679csx != tx && sy == ty, \u5219\u8fd4\u56deFalse\n        # 23. \u5982\u679csx != tx && sy != ty, \u5219\u8fd4\u56deFalse\n        # 24. \u5982\u679csx == tx && sy == ty, \u5219\u8fd4\u56deFalse\n        # 25. \u5982\u679csx == tx && sy != ty, \u5219\u8fd4\u56deFalse\n        # 26. \u5982\u679csx != tx && sy == ty, \u5219\u8fd4\u56deFalse\n        # 27. \u5982\u679csx != tx && sy != ty, \u5219\u8fd4\u56deFalse\n        # 28. \u5982\u679csx == tx && sy == ty, \u5219\u8fd4\u56deFalse\n        # 29. \u5982\u679csx == tx && sy != ty, \u5219\u8fd4\u56deFalse\n        # 30. \u5982\u679csx != tx && sy == ty, \u5219\u8fd4\u56deFalse\n        # 31. \u5982\u679csx != tx && sy != ty, \u5219\u8fd4\u56deFalse\n        # 32. \u5982\u679csx == tx && sy == ty, \u5219\u8fd4\u56deFalse\n        # 33. \u5982\u679csx == tx && sy != ty, \u5219\u8fd4\u56deFalse\n        # 34. \u5982\u679csx != tx && sy == ty, \u5219\u8fd4\u56deFalse\n        # 35. \u5982\u679csx != tx && sy != ty, \u5219\u8fd4\u56deFalse\n        # 36. \u5982\u679csx == tx && sy == ty, \u5219\u8fd4\u56deFalse\n        # 37. \u5982\u679csx == tx && sy != ty, \u5219\u8fd4\u56deFalse\n        # 38. \u5982\u679csx != tx && sy == ty, \u5219\u8fd4\u56deFalse\n        # 39. \u5982\u679csx != tx && sy != ty, \u5219\u8fd4\u56deFalse\n        # 40. \u5982\u679csx == tx && sy == ty, \u5219\u8fd4\u56deFalse\n        # 41. \u5982\u679csx == tx && sy != ty, \u5219\u8fd4\u56deFalse\n        # 42. \u5982\u679csx != tx && sy == ty, \u5219\u8fd4\u56deFalse\n        # 43. \u5982\u679csx != tx && sy != ty, \u5219\u8fd4\u56deFalse"}, {"task_id": "reaching-points", "completion": "class Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        \n        if sx == tx and sy == ty:\n            return True\n        \n        if sx > tx or sy > ty:\n            return False\n        \n        if sx == tx and sy < ty:\n            return True\n        \n        if sx < tx and sy == ty:\n            return True\n        \n        if sx < tx and sy < ty:\n            return self.reachingPoints(sx, sy, tx, ty - sx) or self.reachingPoints(sx, sy, tx - sy, ty)\n        \n        if sx > tx and sy < ty:\n            return self.reachingPoints(sx - tx, sy, ty, ty) or self.reachingPoints(sx, sy, tx, ty - sx)\n        \n        if sx > tx and sy > ty:\n            return self.reachingPoints(sx - tx, sy, ty, ty) or self.reachingPoints(sx, sy, tx, ty - sx)\n        \n        if sx < tx and sy > ty:\n            return self.reachingPoints(sx, sy - tx, tx, ty) or self.reachingPoints(sx, sy, tx - sy, ty)\n        \n        if sx == tx and sy > ty:\n            return self.reachingPoints(sx, sy - tx, tx, ty) or self.reachingPoints(sx, sy, tx, ty - sx)\n        \n        if sx > tx and sy > ty:\n            return self.reachingPoints(sx - tx, sy, ty, ty) or self.reachingPoints(sx, sy, tx, ty - sx)\n        \n        if sx < tx and sy < ty:\n            return self.reachingPoints(sx, sy - tx, tx, ty) or self.reachingPoints(sx, sy, tx - sy, ty)\n        \n        if sx == tx and sy < ty:\n            return self.reachingPoints(sx, sy - tx, tx, ty) or self.reachingPoints(sx, sy, tx, ty - sx)\n        \n        if sx > tx and sy < ty:\n            return self.reachingPoints(sx - tx, sy, ty, ty) or self.reachingPoints(sx, sy, tx, ty - sx)\n        \n        if sx < tx and sy == ty:\n            return self.reachingPoints(sx, sy - tx, tx, ty) or self.reachingPoints(sx, sy, tx - sy, ty)\n        \n        if sx == tx and sy == ty:\n            return self.reachingPoints(sx, sy - tx, tx, ty) or self.reachingPoints(sx, sy, tx - sy, ty)\n        \n        if sx > tx and sy == ty:\n            return self.reachingPoints(sx - tx, sy, ty, ty) or self.reachingPoints(sx, sy, tx, ty - sx)\n        \n        if sx < tx and sy == ty:\n            return self.reachingPoints(sx, sy - tx, tx, ty) or self.reachingPoints(sx, sy, tx - sy, ty)\n        \n        if sx == tx and sy < ty:\n            return self.reachingPoints(sx, sy - tx, tx, ty) or self.reachingPoints(sx, sy, tx, ty - sx)\n        \n        if sx > tx and sy < ty:\n            return self.reachingPoints(sx - tx, sy, ty, ty) or self.reachingPoints(sx, sy, tx, ty - sx)\n        \n        if sx < tx and sy < ty:\n            return self.reachingPoints(sx, sy - tx, tx, ty) or self.reachingPoints(sx, sy, tx - sy, ty)\n        \n        if sx == tx and sy < ty:\n            return self.reachingPoints(sx, sy - tx, tx, ty) or self.reachingPoints(sx, sy, tx, ty - sx)\n        \n        if sx > tx and sy < ty:\n            return self.reachingPoints(sx - tx, sy, ty, ty) or self.reachingPoints(sx, sy, tx, ty - sx)\n        \n        if sx"}], "compare-version-numbers": [{"task_id": "compare-version-numbers", "completion": "class Solution(object):\n    def compareVersion(self, version1, version2):\n        \"\"\"\n        :type version1: str\n        :type version2: str\n        :rtype: int\n        \"\"\"\n        \n        def get_version(version):\n            version = version.split('.')\n            version = [int(i) for i in version]\n            return version\n        \n        version1 = get_version(version1)\n        version2 = get_version(version2)\n        \n        for i in range(len(version1)):\n            if i >= len(version2):\n                return 1\n            if version1[i] > version2[i]:\n                return 1\n            elif version1[i] < version2[i]:\n                return -1\n        if len(version1) > len(version2):\n            return 1\n        else:\n            return 0"}, {"task_id": "compare-version-numbers", "completion": "class Solution(object):\n    def compareVersion(self, version1, version2):\n        \"\"\"\n        :type version1: str\n        :type version2: str\n        :rtype: int\n        \"\"\"\n        \n        def get_version(version):\n            version = version.split('.')\n            version = [int(i) for i in version]\n            return version\n        \n        version1 = get_version(version1)\n        version2 = get_version(version2)\n        \n        for i in range(max(len(version1), len(version2))):\n            if i < len(version1) and i < len(version2):\n                if version1[i] > version2[i]:\n                    return 1\n                elif version1[i] < version2[i]:\n                    return -1\n            elif i < len(version1):\n                if version1[i] != 0:\n                    return 1\n            elif i < len(version2):\n                if version2[i] != 0:\n                    return -1\n        return 0"}, {"task_id": "compare-version-numbers", "completion": "class Solution(object):\n    def compareVersion(self, version1, version2):\n        \"\"\"\n        :type version1: str\n        :type version2: str\n        :rtype: int\n        \"\"\"\n        \n        def get_version(version):\n            version = version.split('.')\n            version = [int(i) for i in version]\n            return version\n        \n        version1 = get_version(version1)\n        version2 = get_version(version2)\n        \n        for i in range(max(len(version1), len(version2))):\n            if i < len(version1) and i < len(version2):\n                if version1[i] > version2[i]:\n                    return 1\n                elif version1[i] < version2[i]:\n                    return -1\n            elif i < len(version1):\n                if version1[i] > 0:\n                    return 1\n            elif i < len(version2):\n                if version2[i] > 0:\n                    return -1\n        return 0"}, {"task_id": "compare-version-numbers", "completion": "class Solution(object):\n    def compareVersion(self, version1, version2):\n        \"\"\"\n        :type version1: str\n        :type version2: str\n        :rtype: int\n        \"\"\"\n        \n        def get_version(version):\n            version = version.split('.')\n            version = [int(i) for i in version]\n            return version\n        \n        version1 = get_version(version1)\n        version2 = get_version(version2)\n        \n        for i in range(max(len(version1), len(version2))):\n            if i < len(version1) and i < len(version2):\n                if version1[i] > version2[i]:\n                    return 1\n                elif version1[i] < version2[i]:\n                    return -1\n            elif i < len(version1):\n                if version1[i] > 0:\n                    return 1\n            elif i < len(version2):\n                if version2[i] > 0:\n                    return -1\n        return 0"}, {"task_id": "compare-version-numbers", "completion": "class Solution(object):\n    def compareVersion(self, version1, version2):\n        \"\"\"\n        :type version1: str\n        :type version2: str\n        :rtype: int\n        \"\"\"\n        \n        def get_version(version):\n            version = version.split('.')\n            version = [int(i) for i in version]\n            return version\n        \n        version1 = get_version(version1)\n        version2 = get_version(version2)\n        \n        for i in range(max(len(version1), len(version2))):\n            if i < len(version1) and i < len(version2):\n                if version1[i] > version2[i]:\n                    return 1\n                elif version1[i] < version2[i]:\n                    return -1\n            elif i < len(version1):\n                if version1[i] != 0:\n                    return 1\n            elif i < len(version2):\n                if version2[i] != 0:\n                    return -1\n        return 0"}], "best-time-to-buy-and-sell-stock-ii": [{"task_id": "best-time-to-buy-and-sell-stock-ii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 2. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 3. \u8d2a\u5fc3\u7b97\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 2. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 3. \u8d2a\u5fc3\u7b97\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 2. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 3. \u8d2a\u5fc3\u7b97\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 2. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 3. \u8d2a\u5fc3\u7b97\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 2. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 3. \u8d2a\u5fc3\u7b97\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 2. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 3. \u8d2a\u5fc3\u7b97\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 2. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 3. \u8d2a\u5fc3\u7b97\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d"}, {"task_id": "best-time-to-buy-and-sell-stock-ii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 2. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 3. \u8d2a\u5fc3\u7b97\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 2. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 3. \u8d2a\u5fc3\u7b97\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 4. \u4e8c\u5206\u67e5\u627e\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(nlogn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 2. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 3. \u8d2a\u5fc3\u7b97\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 4. \u4e8c\u5206\u67e5\u627e\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(nlogn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 2. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 3. \u8d2a\u5fc3\u7b97\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 4. \u4e8c\u5206\u67e5\u627e\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(nlogn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 2. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 3. \u8d2a\u5fc3\u7b97\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 4. \u4e8c\u5206\u67e5\u627e\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(nlogn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 2. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 3. \u8d2a\u5fc3\u7b97\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\ufffd\ufffd"}, {"task_id": "best-time-to-buy-and-sell-stock-ii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # 2. \u52a8\u6001\u89c4\u5212\n        # 3. \u8d2a\u5fc3\u7b97\u6cd5\n        # 4. \u4e8c\u5206\u67e5\u627e\n        # 5. \u5206\u6cbb\n        # 6. \u56de\u6eaf\n        # 7. \u5206\u6cbb\n        # 8. \u6781\u5c0f\u5316\u6781\u5927\n        # 9. \u8d2a\u5fc3\n        # 10. \u4e8c\u5206\u67e5\u627e\n        # 11. \u6eda\u52a8\u6570\u7ec4\n        # 12. \u54c8\u5e0c\u8868\n        # 13. \u6808\n        # 14. \u961f\u5217\n        # 15. \u5806\uff08\u4f18\u5148\u961f\u5217\uff09\n        # 16. \u5e76\u67e5\u96c6\n        # 17. \u4f4d\u8fd0\u7b97\n        # 18. \u6811\u72b6\u6570\u7ec4\n        # 19. \u5206\u6cbb\n        # 20. \u9012\u5f52\n        # 21. \u9012\u63a8\n        # 22. \u8d2a\u5fc3\n        # 23. \u4e8c\u5206\u67e5\u627e\n        # 24. \u5206\u6cbb\n        # 25. \u9012\u5f52\n        # 26. \u9012\u63a8\n        # 27. \u8d2a\u5fc3\n        # 28. \u4e8c\u5206\u67e5\u627e\n        # 29. \u5206\u6cbb\n        # 30. \u9012\u5f52\n        # 31. \u9012\u63a8\n        # 32. \u8d2a\u5fc3\n        # 33. \u4e8c\u5206\u67e5\u627e\n        # 34. \u5206\u6cbb\n        # 35. \u9012\u5f52\n        # 36. \u9012\u63a8\n        # 37. \u8d2a\u5fc3\n        # 38. \u4e8c\u5206\u67e5\u627e\n        # 39. \u5206\u6cbb\n        # 40. \u9012\u5f52\n        # 41. \u9012\u63a8\n        # 42. \u8d2a\u5fc3\n        # 43. \u4e8c\u5206\u67e5\u627e\n        # 44. \u5206\u6cbb\n        # 45. \u9012\u5f52\n        # 46. \u9012\u63a8\n        # 47. \u8d2a\u5fc3\n        # 48. \u4e8c\u5206\u67e5\u627e\n        # 49. \u5206\u6cbb\n        # 50. \u9012\u5f52\n        # 51. \u9012\u63a8\n        # 52. \u8d2a\u5fc3\n        # 53. \u4e8c\u5206\u67e5\u627e\n        # 54. \u5206\u6cbb\n        # 55. \u9012\u5f52\n        # 56. \u9012\u63a8\n        # 57. \u8d2a\u5fc3\n        # 58. \u4e8c\u5206\u67e5\u627e\n        # 59. \u5206\u6cbb\n        # 60. \u9012\u5f52\n        # 61. \u9012\u63a8\n        # 62. \u8d2a\u5fc3\n        # 63. \u4e8c\u5206\u67e5\u627e\n        # 64. \u5206\u6cbb\n        # 65. \u9012\u5f52\n        # 66. \u9012\u63a8\n        # 67. \u8d2a\u5fc3\n        # 68. \u4e8c\u5206\u67e5\u627e\n        # 69. \u5206\u6cbb\n        # 70. \u9012\u5f52\n        # 71. \u9012\u63a8\n        # 72. \u8d2a\u5fc3\n        # 73. \u4e8c\u5206\u67e5\u627e\n        # 74. \u5206\u6cbb\n        # 75. \u9012\u5f52\n        # 76. \u9012\u63a8\n        # 77. \u8d2a\u5fc3\n        # 78. \u4e8c\u5206\u67e5\u627e\n        # 79. \u5206\u6cbb\n        # 80. \u9012\u5f52"}, {"task_id": "best-time-to-buy-and-sell-stock-ii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 2. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 3. \u8d2a\u5fc3\u7b97\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 4. \u4e8c\u5206\u67e5\u627e\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(nlogn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 2. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 3. \u8d2a\u5fc3\u7b97\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 4. \u4e8c\u5206\u67e5\u627e\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(nlogn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 2. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 3. \u8d2a\u5fc3\u7b97\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 4. \u4e8c\u5206\u67e5\u627e\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(nlogn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 2. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 3. \u8d2a\u5fc3\u7b97\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 4. \u4e8c\u5206\u67e5\u627e\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(nlogn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 2. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 3. \u8d2a\u5fc3\u7b97\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 4. \u4e8c\u5206\u67e5\u627e\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(nlogn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 2. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d"}, {"task_id": "best-time-to-buy-and-sell-stock-ii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # 2. \u52a8\u6001\u89c4\u5212\n        # 3. \u8d2a\u5fc3\u7b97\u6cd5\n        # 4. \u4e8c\u5206\u67e5\u627e\n        # 5. \u5206\u6cbb\n        # 6. \u56de\u6eaf\n        # 7. \u5206\u6cbb\n        # 8. \u6781\u5c0f\u5316\u6781\u5927\n        # 9. \u8d2a\u5fc3\n        # 10. \u4e8c\u5206\u67e5\u627e\n        # 11. \u6eda\u52a8\u6570\u7ec4\n        # 12. \u6eda\u52a8\u6570\u7ec4\n        # 13. \u6eda\u52a8\u6570\u7ec4\n        # 14. \u6eda\u52a8\u6570\u7ec4\n        # 15. \u6eda\u52a8\u6570\u7ec4\n        # 16. \u6eda\u52a8\u6570\u7ec4\n        # 17. \u6eda\u52a8\u6570\u7ec4\n        # 18. \u6eda\u52a8\u6570\u7ec4\n        # 19. \u6eda\u52a8\u6570\u7ec4\n        # 20. \u6eda\u52a8\u6570\u7ec4\n        # 21. \u6eda\u52a8\u6570\u7ec4\n        # 22. \u6eda\u52a8\u6570\u7ec4\n        # 23. \u6eda\u52a8\u6570\u7ec4\n        # 24. \u6eda\u52a8\u6570\u7ec4\n        # 25. \u6eda\u52a8\u6570\u7ec4\n        # 26. \u6eda\u52a8\u6570\u7ec4\n        # 27. \u6eda\u52a8\u6570\u7ec4\n        # 28. \u6eda\u52a8\u6570\u7ec4\n        # 29. \u6eda\u52a8\u6570\u7ec4\n        # 30. \u6eda\u52a8\u6570\u7ec4\n        # 31. \u6eda\u52a8\u6570\u7ec4\n        # 32. \u6eda\u52a8\u6570\u7ec4\n        # 33. \u6eda\u52a8\u6570\u7ec4\n        # 34. \u6eda\u52a8\u6570\u7ec4\n        # 35. \u6eda\u52a8\u6570\u7ec4\n        # 36. \u6eda\u52a8\u6570\u7ec4\n        # 37. \u6eda\u52a8\u6570\u7ec4\n        # 38. \u6eda\u52a8\u6570\u7ec4\n        # 39. \u6eda\u52a8\u6570\u7ec4\n        # 40. \u6eda\u52a8\u6570\u7ec4\n        # 41. \u6eda\u52a8\u6570\u7ec4\n        # 42. \u6eda\u52a8\u6570\u7ec4\n        # 43. \u6eda\u52a8\u6570\u7ec4\n        # 44. \u6eda\u52a8\u6570\u7ec4\n        # 45. \u6eda\u52a8\u6570\u7ec4\n        # 46. \u6eda\u52a8\u6570\u7ec4\n        # 47. \u6eda\u52a8\u6570\u7ec4\n        # 48. \u6eda\u52a8\u6570\u7ec4\n        # 49. \u6eda\u52a8\u6570\u7ec4\n        # 50. \u6eda\u52a8\u6570\u7ec4\n        # 51. \u6eda\u52a8\u6570\u7ec4\n        # 52. \u6eda\u52a8\u6570\u7ec4\n        # 53. \u6eda\u52a8\u6570\u7ec4\n        # 54. \u6eda\u52a8\u6570\u7ec4\n        # 55. \u6eda\u52a8\u6570\u7ec4\n        # 56. \u6eda\u52a8\u6570\u7ec4\n        # 57. \u6eda\u52a8\u6570\u7ec4\n        # 58. \u6eda\u52a8\u6570\u7ec4\n        # 59. \u6eda\u52a8\u6570\u7ec4\n        # 60. \u6eda\u52a8\u6570\u7ec4\n        # 61. \u6eda\u52a8\u6570\u7ec4\n        # 62. \u6eda\u52a8\u6570\u7ec4\n        # 63. \u6eda\u52a8\u6570\u7ec4\n        # 64. \u6eda\u52a8\u6570\u7ec4\n        # 65. \u6eda\u52a8\u6570\u7ec4\n        # 66. \u6eda\u52a8\u6570\u7ec4\n        # 67. \u6eda\u52a8\u6570\u7ec4\n        # 68. \u6eda\u52a8\u6570\u7ec4\n        # 69. \u6eda\u52a8\u6570\u7ec4\n        # 70. \u6eda\u52a8\u6570\u7ec4\n        # 71. \u6eda\u52a8\u6570\u7ec4\n        # 72. \u6eda\u52a8\u6570\u7ec4\n        # 73. \u6eda\u52a8\u6570\u7ec4\n        # 74. \u6eda\u52a8\u6570\u7ec4\n        # 7"}], "course-schedule-iii": [{"task_id": "course-schedule-iii", "completion": "class Solution(object):\n    def scheduleCourse(self, courses):\n        \"\"\"\n        :type courses: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        courses.sort(key=lambda x: x[1])\n        courses.sort(key=lambda x: x[0], reverse=True)\n        count = 0\n        day = 0\n        for course in courses:\n            if day + course[0] <= course[1]:\n                day += course[0]\n                count += 1\n            else:\n                day = course[0]\n                count += 1\n        return count"}, {"task_id": "course-schedule-iii", "completion": "class Solution(object):\n    def scheduleCourse(self, courses):\n        \"\"\"\n        :type courses: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        courses.sort(key=lambda x: x[1])\n        courses.sort(key=lambda x: x[0], reverse=True)\n        \n        i = 0\n        j = 0\n        count = 0\n        while i < len(courses) and j < len(courses):\n            if courses[i][1] <= courses[j][0]:\n                count += 1\n                i += 1\n            else:\n                j += 1\n        return count"}, {"task_id": "course-schedule-iii", "completion": "class Solution(object):\n    def scheduleCourse(self, courses):\n        \"\"\"\n        :type courses: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        courses.sort(key=lambda x: x[1])\n        courses.sort(key=lambda x: x[0], reverse=True)\n        \n        i = 0\n        j = 0\n        count = 0\n        while i < len(courses) and j < len(courses):\n            if courses[i][1] <= courses[j][0]:\n                count += 1\n                i += 1\n            else:\n                j += 1\n        return count"}, {"task_id": "course-schedule-iii", "completion": "class Solution(object):\n    def scheduleCourse(self, courses):\n        \"\"\"\n        :type courses: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        courses.sort(key=lambda x: x[1])\n        courses.sort(key=lambda x: x[0], reverse=True)\n        \n        i = 0\n        j = 0\n        count = 0\n        while i < len(courses) and j < len(courses):\n            if courses[i][1] <= courses[j][0]:\n                count += 1\n                i += 1\n            else:\n                j += 1\n        return count"}, {"task_id": "course-schedule-iii", "completion": "class Solution(object):\n    def scheduleCourse(self, courses):\n        \"\"\"\n        :type courses: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        courses.sort(key=lambda x: x[1])\n        courses.sort(key=lambda x: x[0], reverse=True)\n        count = 0\n        day = 0\n        for course in courses:\n            if day + course[0] <= course[1]:\n                day += course[0]\n                count += 1\n            else:\n                day = course[0]\n                count += 1\n        return count"}], "reverse-nodes-in-k-group": [{"task_id": "reverse-nodes-in-k-group", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseKGroup(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None or k == 1:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        cur = head\n        count = 0\n        \n        while cur:\n            count += 1\n            cur = cur.next\n            \n        if count < k:\n            return head\n        \n        while count >= k:\n            count = 0\n            prev_head = prev.next\n            cur = prev.next\n            for _ in range(k):\n                next_node = cur.next\n                cur.next = prev\n                prev = cur\n                cur = next_node\n                count += 1\n            prev.next = prev_head\n            prev = dummy\n            cur = dummy.next\n            \n        return dummy.next"}, {"task_id": "reverse-nodes-in-k-group", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseKGroup(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None or k == 1:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        cur = head\n        count = 0\n        \n        while cur:\n            count += 1\n            cur = cur.next\n            \n        if count < k:\n            return head\n        \n        while count >= k:\n            for i in range(k):\n                next = prev.next\n                prev.next = cur.next\n                cur.next = next\n                cur = prev\n                prev = next\n            count -= k\n            \n        return dummy.next"}, {"task_id": "reverse-nodes-in-k-group", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseKGroup(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None or k == 1:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        while head:\n            count = 0\n            while head and count < k:\n                count += 1\n                head = head.next\n            if count == k:\n                head = self.reverse(prev.next, head)\n                prev = prev.next\n        return dummy.next\n    \n    def reverse(self, prev, head):\n        prev_next = prev.next\n        while prev_next != head:\n            temp = prev_next.next\n            prev_next.next = prev\n            prev = prev_next\n            prev_next = temp\n        head.next = prev\n        return head"}, {"task_id": "reverse-nodes-in-k-group", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseKGroup(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or k == 1:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        cur = head\n        count = 0\n        \n        while cur:\n            count += 1\n            cur = cur.next\n            \n        if count < k:\n            return head\n        \n        while count >= k:\n            count = 0\n            prev_node = prev\n            cur_node = prev.next\n            for i in range(k):\n                count += 1\n                next_node = cur_node.next\n                cur_node.next = prev_node\n                prev_node = cur_node\n                cur_node = next_node\n            prev.next = cur_node\n            prev = prev_node\n            cur = prev.next\n            \n        return dummy.next"}, {"task_id": "reverse-nodes-in-k-group", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseKGroup(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or k == 1:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        cur = head\n        count = 0\n        \n        while cur:\n            count += 1\n            cur = cur.next\n            if count == k:\n                count = 0\n                for i in range(k):\n                    next = prev.next\n                    prev.next = cur\n                    cur = cur.next\n                    prev.next.next = next\n                    prev = prev.next\n                prev = dummy\n                cur = dummy.next\n                \n        return dummy.next"}], "repeated-substring-pattern": [{"task_id": "repeated-substring-pattern", "completion": "class Solution(object):\n    def repeatedSubstringPattern(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) == 0:\n            return False\n        \n        if len(s) == 1:\n            return False\n        \n        if len(s) == 2:\n            return False\n        \n        if len(s) == 3:\n            return False\n        \n        if len(s) == 4:\n            return False\n        \n        if len(s) == 5:\n            return False\n        \n        if len(s) == 6:\n            return False\n        \n        if len(s) == 7:\n            return False\n        \n        if len(s) == 8:\n            return False\n        \n        if len(s) == 9:\n            return False\n        \n        if len(s) == 10:\n            return False\n        \n        if len(s) == 11:\n            return False\n        \n        if len(s) == 12:\n            return False\n        \n        if len(s) == 13:\n            return False\n        \n        if len(s) == 14:\n            return False\n        \n        if len(s) == 15:\n            return False\n        \n        if len(s) == 16:\n            return False\n        \n        if len(s) == 17:\n            return False\n        \n        if len(s) == 18:\n            return False\n        \n        if len(s) == 19:\n            return False\n        \n        if len(s) == 20:\n            return False\n        \n        if len(s) == 21:\n            return False\n        \n        if len(s) == 22:\n            return False\n        \n        if len(s) == 23:\n            return False\n        \n        if len(s) == 24:\n            return False\n        \n        if len(s) == 25:\n            return False\n        \n        if len(s) == 26:\n            return False\n        \n        if len(s) == 27:\n            return False\n        \n        if len(s) == 28:\n            return False\n        \n        if len(s) == 29:\n            return False\n        \n        if len(s) == 30:\n            return False\n        \n        if len(s) == 31:\n            return False\n        \n        if len(s) == 32:\n            return False\n        \n        if len(s) == 33:\n            return False\n        \n        if len(s) == 34:\n            return False\n        \n        if len(s) == 35:\n            return False\n        \n        if len(s) == 36:\n            return False\n        \n        if len(s) == 37:\n            return False\n        \n        if len(s) == 38:\n            return False\n        \n        if len(s) == 39:\n            return False\n        \n        if len(s) == 40:\n            return False\n        \n        if len(s) == 41:\n            return False\n        \n        if len(s) == 42:\n            return False\n        \n        if len(s) == 43:\n            return False\n        \n        if len(s) == 44:\n            return False\n        \n        if len(s) == 45:\n            return False\n        \n        if len(s) == 46:\n            return False\n        \n        if len(s) == 47:\n            return False\n        \n        if len(s) == 48:\n            return False\n        \n        if len(s) == 49:\n            return False\n        \n        if len(s) == 50:\n            return False\n        \n        if len(s) == 51:\n            return False\n        \n        if len(s) == 52:\n            return False\n        \n        if len(s) == 53:\n            return False\n        \n        if len(s) == 54:\n            return False\n        \n        if len(s) == 55:\n            return False\n        \n        if len(s) == 56:\n            return False\n        \n        if len(s) =="}, {"task_id": "repeated-substring-pattern", "completion": "class Solution(object):\n    def repeatedSubstringPattern(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. check if the string is a substring of itself\n        if s in s[1:]:\n            return True\n        \n        # 2. check if the string is a substring of itself + itself\n        if s + s in s[1:]:\n            return True\n        \n        # 3. check if the string is a substring of itself + itself + itself\n        if s + s + s in s[1:]:\n            return True\n        \n        # 4. check if the string is a substring of itself + itself + itself + itself\n        if s + s + s + s in s[1:]:\n            return True\n        \n        # 5. check if the string is a substring of itself + itself + itself + itself + itself\n        if s + s + s + s + s in s[1:]:\n            return True\n        \n        # 6. check if the string is a substring of itself + itself + itself + itself + itself + itself\n        if s + s + s + s + s + s in s[1:]:\n            return True\n        \n        # 7. check if the string is a substring of itself + itself + itself + itself + itself + itself + itself\n        if s + s + s + s + s + s + s in s[1:]:\n            return True\n        \n        # 8. check if the string is a substring of itself + itself + itself + itself + itself + itself + itself + itself\n        if s + s + s + s + s + s + s + s in s[1:]:\n            return True\n        \n        # 9. check if the string is a substring of itself + itself + itself + itself + itself + itself + itself + itself + itself\n        if s + s + s + s + s + s + s + s + s in s[1:]:\n            return True\n        \n        # 10. check if the string is a substring of itself + itself + itself + itself + itself + itself + itself + itself + itself + itself\n        if s + s + s + s + s + s + s + s + s + s in s[1:]:\n            return True\n        \n        # 11. check if the string is a substring of itself + itself + itself + itself + itself + itself + itself + itself + itself + itself + itself\n        if s + s + s + s + s + s + s + s + s + s + s in s[1:]:\n            return True\n        \n        # 12. check if the string is a substring of itself + itself + itself + itself + itself + itself + itself + itself + itself + itself + itself + itself\n        if s + s + s + s + s + s + s + s + s + s + s + s in s[1:]:\n            return True\n        \n        # 13. check if the string is a substring of itself + itself + itself + itself + itself + itself + itself + itself + itself + itself + itself + itself + itself\n        if s + s + s + s + s + s + s + s + s + s + s + s + s in s[1:]:\n            return True\n        \n        # 14. check if the string is a substring of itself + itself + itself + itself + itself + itself + itself + itself + itself + itself + itself + itself + itself + itself\n        if s + s + s + s + s + s + s + s + s + s + s + s + s + s in s[1:]:\n            return True\n        \n        # 15. check if the string is a substring of itself + itself + itself + itself + itself + itself + itself + itself + itself + itself + itself + itself + itself + itself + itself\n        if s + s + s + s + s + s + s + s + s + s + s + s + s + s + s in s[1:]:\n            return True\n        \n        # 16. check if the string is a substring of itself + itself + itself + itself + itself + itself + itself + itself + itself + itself + itself + itself + itself + itself + itself + itself\n        if s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s in s[1:]:\n            return True\n        \n        # 17. check if the string is a substring of itself + itself + itself + itself + itself + itself + itself + itself + itself + itself + itself + itself + itself + itself"}, {"task_id": "repeated-substring-pattern", "completion": "class Solution(object):\n    def repeatedSubstringPattern(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. check if the length of the string is a multiple of the length of the substring\n        # 2. check if the substring is a substring of the string\n        # 3. check if the substring is a substring of the string multiple times\n        # 4. check if the substring is a substring of the string multiple times\n        # 5. check if the substring is a substring of the string multiple times\n        # 6. check if the substring is a substring of the string multiple times\n        # 7. check if the substring is a substring of the string multiple times\n        # 8. check if the substring is a substring of the string multiple times\n        # 9. check if the substring is a substring of the string multiple times\n        # 10. check if the substring is a substring of the string multiple times\n        # 11. check if the substring is a substring of the string multiple times\n        # 12. check if the substring is a substring of the string multiple times\n        # 13. check if the substring is a substring of the string multiple times\n        # 14. check if the substring is a substring of the string multiple times\n        # 15. check if the substring is a substring of the string multiple times\n        # 16. check if the substring is a substring of the string multiple times\n        # 17. check if the substring is a substring of the string multiple times\n        # 18. check if the substring is a substring of the string multiple times\n        # 19. check if the substring is a substring of the string multiple times\n        # 20. check if the substring is a substring of the string multiple times\n        # 21. check if the substring is a substring of the string multiple times\n        # 22. check if the substring is a substring of the string multiple times\n        # 23. check if the substring is a substring of the string multiple times\n        # 24. check if the substring is a substring of the string multiple times\n        # 25. check if the substring is a substring of the string multiple times\n        # 26. check if the substring is a substring of the string multiple times\n        # 27. check if the substring is a substring of the string multiple times\n        # 28. check if the substring is a substring of the string multiple times\n        # 29. check if the substring is a substring of the string multiple times\n        # 30. check if the substring is a substring of the string multiple times\n        # 31. check if the substring is a substring of the string multiple times\n        # 32. check if the substring is a substring of the string multiple times\n        # 33. check if the substring is a substring of the string multiple times\n        # 34. check if the substring is a substring of the string multiple times\n        # 35. check if the substring is a substring of the string multiple times\n        # 36. check if the substring is a substring of the string multiple times\n        # 37. check if the substring is a substring of the string multiple times\n        # 38. check if the substring is a substring of the string multiple times\n        # 39. check if the substring is a substring of the string multiple times\n        # 40. check if the substring is a substring of the string multiple times\n        # 41. check if the substring is a substring of the string multiple times\n        # 42. check if the substring is a substring of the string multiple times\n        # 43. check if the substring is a substring of the string multiple times\n        # 44. check if the substring is a substring of the string multiple times\n        # 45. check if the substring is a substring of the string multiple times\n        # 46. check if the substring is a substring of the string multiple times\n        # 47. check if the substring is a substring of the string multiple times\n        # 48. check if the substring is a substring of the string multiple times\n        # 49. check if the substring is a substring of the string multiple times\n        # 50. check if the substring is a substring of the string multiple times\n        # 51. check if the substring is a substring of the string multiple times\n        # 52. check if the substring is a substring of the string multiple times\n        # 53. check if the substring is a substring of the string multiple times\n        # 54. check if the substring is a substring of the string multiple times\n        # 55"}, {"task_id": "repeated-substring-pattern", "completion": "class Solution(object):\n    def repeatedSubstringPattern(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. check if the length of the string is a multiple of the length of the substring\n        # 2. check if the substring is a substring of the string\n        # 3. check if the substring is a substring of the string multiple times\n        \n        if len(s) % len(s[:len(s)//2+1]) != 0:\n            return False\n        \n        substring = s[:len(s)//2+1]\n        \n        if substring not in s:\n            return False\n        \n        count = 0\n        for i in range(len(s)//2+1, len(s)):\n            if s[i] == substring[0]:\n                count += 1\n            else:\n                count = 0\n            if count == len(substring):\n                return True\n        return False"}, {"task_id": "repeated-substring-pattern", "completion": "class Solution(object):\n    def repeatedSubstringPattern(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) < 2:\n            return False\n        \n        for i in range(1, len(s)//2+1):\n            if s[:i] * (len(s)//i) == s:\n                return True\n        return False"}], "unique-binary-search-trees": [{"task_id": "unique-binary-search-trees", "completion": "class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. Dynamic Programming\n        # 2. Time Complexity = O(n^2)\n        # 3. Space Complexity = O(n)\n        \n        # 1. Dynamic Programming\n        # 2. Time Complexity = O(n^2)\n        # 3. Space Complexity = O(n)\n        \n        # 1. Dynamic Programming\n        # 2. Time Complexity = O(n^2)\n        # 3. Space Complexity = O(n)\n        \n        # 1. Dynamic Programming\n        # 2. Time Complexity = O(n^2)\n        # 3. Space Complexity = O(n)\n        \n        # 1. Dynamic Programming\n        # 2. Time Complexity = O(n^2)\n        # 3. Space Complexity = O(n)\n        \n        # 1. Dynamic Programming\n        # 2. Time Complexity = O(n^2)\n        # 3. Space Complexity = O(n)\n        \n        # 1. Dynamic Programming\n        # 2. Time Complexity = O(n^2)\n        # 3. Space Complexity = O(n)\n        \n        # 1. Dynamic Programming\n        # 2. Time Complexity = O(n^2)\n        # 3. Space Complexity = O(n)\n        \n        # 1. Dynamic Programming\n        # 2. Time Complexity = O(n^2)\n        # 3. Space Complexity = O(n)\n        \n        # 1. Dynamic Programming\n        # 2. Time Complexity = O(n^2)\n        # 3. Space Complexity = O(n)\n        \n        # 1. Dynamic Programming\n        # 2. Time Complexity = O(n^2)\n        # 3. Space Complexity = O(n)\n        \n        # 1. Dynamic Programming\n        # 2. Time Complexity = O(n^2)\n        # 3. Space Complexity = O(n)\n        \n        # 1. Dynamic Programming\n        # 2. Time Complexity = O(n^2)\n        # 3. Space Complexity = O(n)\n        \n        # 1. Dynamic Programming\n        # 2. Time Complexity = O(n^2)\n        # 3. Space Complexity = O(n)\n        \n        # 1. Dynamic Programming\n        # 2. Time Complexity = O(n^2)\n        # 3. Space Complexity = O(n)\n        \n        # 1. Dynamic Programming\n        # 2. Time Complexity = O(n^2)\n        # 3. Space Complexity = O(n)\n        \n        # 1. Dynamic Programming\n        # 2. Time Complexity = O(n^2)\n        # 3. Space Complexity = O(n)\n        \n        # 1. Dynamic Programming\n        # 2. Time Complexity = O(n^2)\n        # 3. Space Complexity = O(n)\n        \n        # 1. Dynamic Programming\n        # 2. Time Complexity = O(n^2)\n        # 3. Space Complexity = O(n)\n        \n        # 1. Dynamic Programming\n        # 2. Time Complexity = O(n^2)\n        # 3. Space Complexity = O(n)\n        \n        # 1. Dynamic Programming\n        # 2. Time Complexity = O(n^2)\n        # 3. Space Complexity = O(n)\n        \n        # 1. Dynamic Programming\n        # 2. Time Complexity = O(n^2)\n        # 3. Space Complexity = O(n)\n        \n        # 1. Dynamic Programming\n        # 2. Time Complexity = O(n^2)\n        # 3. Space Complexity = O(n)\n        \n        # 1. Dynamic Programming\n        # 2. Time Complexity = O(n^2)\n        # 3. Space Complexity = O(n)\n        \n        # 1. Dynamic Programming\n        # 2. Time Complexity = O(n^2)\n        # 3. Space Complexity = O(n)"}, {"task_id": "unique-binary-search-trees", "completion": "class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. Base case\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        \n        # 2. Recursive case\n        return sum(self.numTrees(i) * self.numTrees(n - i - 1) for i in range(n))"}, {"task_id": "unique-binary-search-trees", "completion": "class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. Dynamic Programming\n        # 2. Time Complexity = O(n^2)\n        # 3. Space Complexity = O(n)\n        \n        # Base Case\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        \n        # Recursive Case\n        result = 0\n        for i in range(1, n+1):\n            result += self.numTrees(i-1) * self.numTrees(n-i)\n        \n        return result"}, {"task_id": "unique-binary-search-trees", "completion": "class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. DP\n        # 2. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1."}, {"task_id": "unique-binary-search-trees", "completion": "class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. DP\n        # 2. 1. 1. 2. 3. 5. 8. 13. 21. 34. 55. 89. 144. 233. 377. 610. 987. 1597. 2584. 4181. 6765. 10946. 17711. 28657. 46368. 75025. 121393. 196418. 317811. 514229. 832040. 1346269. 2178309. 3524578. 5702887. 9227465. 14930352. 24157817. 39088169. 63245986. 102334155. 165580141. 267914296. 433494437. 701408733. 1134903170. 1836311903. 2971215073. 4807526976.\n        # 3. 1. 1. 2. 3. 5. 8. 13. 21. 34. 55. 89. 144. 233. 377. 610. 987. 1597. 2584. 4181. 6765. 10946. 17711. 25841. 41810. 67650. 109465. 177110. 258410. 418100. 676500. 1094650. 1771100. 2584100. 4181000. 6765000. 10946500. 17711000. 25841000. 41810000. 67650000. 109465000. 177110000. 258410000. 418100000. 676500000. 1094650000. 1771100000. 2584100000. 4181000000. 6765000000. 10946500000. 17711000000. 25841000000. 41810000000. 67650000000. 109465000000. 177110000000. 258410000000. 418100000000. 676500000000. 1094650000000. 1771100000000. 2584100000000. 4181000000000. 6765000000000. 10946500000000. 17711000000000. 25841000000000. 41810000000000. 67650000"}], "single-number-ii": [{"task_id": "single-number-ii", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        # 2. \u904d\u5386\n        # 3. \u5f02\u6216\n        # 4. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 5. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 6. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 7. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 8. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 9. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 10. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 11. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 12. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 13. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 14. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 15. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 16. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 17. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 18. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 19. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 20. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 21. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 22. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 23. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 24. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 25. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 26. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 27. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 28. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 29. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 30. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 31. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 32. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 33. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 34. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 35. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 36. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 37. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 38. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 39. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 40. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 41. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 42. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 43. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 44. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 45. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 46. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 47. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 48. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 49. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 50. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 51. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 52. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 53. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 54. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 55. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 56."}, {"task_id": "single-number-ii", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        # 2. \u904d\u5386\n        # 3. \u5f02\u6216\n        # 4. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 5. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 6. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 7. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 8. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 9. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 10. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 11. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 12. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 13. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 14. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 15. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 16. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 17. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 18. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 19. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 20. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 21. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 22. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 23. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 24. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 25. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 26. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 27. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 28. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 29. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 30. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 31. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 32. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 33. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 34. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 35. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 36. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 37. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 38. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 39. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 40. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 41. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 42. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 43. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 44. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 45. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 46. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 47. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 48. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 49. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 50. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 51. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 52. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 53. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 54. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 55. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 56."}, {"task_id": "single-number-ii", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u51fa\u6570\u7ec4\u4e2d\u7684\u552f\u4e00\u6570\u5b57\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u904d\u5386\u6570\u7ec4\uff0c\u5c06\u6bcf\u4e2a\u6570\u5b57\u4e0e\u5176\u4ed6\u6570\u5b57\u8fdb\u884c\u5bf9\u6bd4\uff0c\u5982\u679c\u6709\u4e24\u4e2a\u6570\u5b57\u4e0d\u540c\uff0c\u90a3\u4e48\u5b83\u4eec\u7684\u5f02\u6216\u7ed3\u679c\u5c31\u662f\u552f\u4e00\u6570\u5b57\u3002\n        # \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\uff0c\u5373\uff1a\n        # a ^ b ^ a = b ^ a ^ a = 0\n        # a ^ b ^ c = (a ^ b) ^ c = (a ^ a) ^ b ^ c = 0 ^ b ^ c = b ^ c\n        # \u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u6570\u5b57\u4e0e\u5176\u4ed6\u6570\u5b57\u8fdb\u884c\u5f02\u6216\u8fd0\u7b97\uff0c\u6700\u7ec8\u5f02\u6216\u7ed3\u679c\u5373\u4e3a\u552f\u4e00\u6570\u5b57\u3002\n        # \n        # 2. \u4f4d\u8fd0\u7b97\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\uff0c\u5c06\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u6570\u5b57\u4e0e\u5176\u4ed6\u6570\u5b57\u8fdb\u884c\u5f02\u6216\u8fd0\u7b97\uff0c\u6700\u7ec8\u5f02\u6216\u7ed3\u679c\u5373\u4e3a\u552f\u4e00\u6570\u5b57\u3002\n        # \n        # 3. \u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u54c8\u5e0c\u8868\u8bb0\u5f55\u6570\u7ec4\u4e2d\u6bcf\u4e2a\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u7136\u540e\u904d\u5386\u54c8\u5e0c\u8868\uff0c\u5c06\u51fa\u73b0\u6b21\u6570\u4e3a 1 \u7684\u6570\u5b57\u4f5c\u4e3a\u7ed3\u679c\u8fd4\u56de\u3002\n        # \n        # 4. \u8ba1\u6570\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u8ba1\u6570\u6570\u7ec4\u6765\u8bb0\u5f55\u6570\u7ec4\u4e2d\u6bcf\u4e2a\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u7136\u540e\u904d\u5386\u8ba1\u6570\u6570\u7ec4\uff0c\u5c06\u51fa\u73b0\u6b21\u6570\u4e3a 1 \u7684\u6570\u5b57\u4f5c\u4e3a\u7ed3\u679c\u8fd4\u56de\u3002\n        # \n        # 5. \u6392\u5e8f\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(nlogn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6211\u4eec\u53ef\u4ee5\u5bf9\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\uff0c\u6570\u7ec4\u4e2d\u6240\u6709\u91cd\u590d\u7684\u6570\u5b57\u90fd\u4f1a\u8fde\u7eed\u663e\u793a\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u5728\u6570\u7ec4\u7684\u5f00\u5934\u548c\u672b\u5c3e\u627e\u5230\u4e0d\u540c\u7684\u6570\u5b57\u5373\u53ef\u3002\n        # \n        # 6. \u54c8\u5e0c\u8868+\u8ba1\u6570\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u54c8\u5e0c\u8868\u8bb0\u5f55\u6570\u7ec4\u4e2d\u6bcf\u4e2a\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u7136\u540e\u904d\u5386\u54c8\u5e0c\u8868\uff0c\u5c06\u51fa\u73b0\u6b21\u6570\u4e3a 1 \u7684\u6570\u5b57\u4f5c\u4e3a\u7ed3\u679c\u8fd4\u56de\u3002\n        # \n        # 7. \u6392\u5e8f+\u53cc\u6307\u9488\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(nlogn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6211\u4eec\u53ef\u4ee5\u5bf9\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\uff0c\u6570\u7ec4\u4e2d\u6240\u6709\u91cd\u590d\u7684\u6570\u5b57\u90fd\u4f1a\u8fde\u7eed\u663e\u793a\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u5728\u6570\u7ec4\u7684\u5f00\u5934\u548c\u672b\u5c3e\u627e\u5230\u4e0d\u540c\u7684\u6570\u5b57\u5373\u53ef\u3002\n        # \n        # 8. \u6392\u5e8f+\u53cc\u6307\u9488+\u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(nlogn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6211\u4eec\u53ef\u4ee5\u5bf9\u6570\u7ec4\u8fdb\u884c"}, {"task_id": "single-number-ii", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u51fa\u6570\u7ec4\u4e2d\u7684\u552f\u4e00\u6570\u5b57\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u904d\u5386\u6570\u7ec4\uff0c\u5c06\u6bcf\u4e2a\u6570\u5b57\u4e0e\u5176\u4ed6\u6570\u5b57\u8fdb\u884c\u5bf9\u6bd4\uff0c\u5982\u679c\u6709\u4e24\u4e2a\u6570\u5b57\u76f8\u7b49\uff0c\u5219\u8df3\u8fc7\uff0c\u5982\u679c\u6709\u4e00\u4e2a\u6570\u5b57\u4e0d\u7b49\uff0c\u5219\u8fd4\u56de\u3002\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662f O(1)\u3002\n        # 2. \u4f4d\u8fd0\u7b97\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5f02\u6216\u8fd0\u7b97\u6765\u627e\u51fa\u6570\u7ec4\u4e2d\u7684\u552f\u4e00\u6570\u5b57\u3002\n        # \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\u662f\uff1a\n        # \u4efb\u4f55\u6570\u548c 0 \u5f02\u6216\u662f\u81ea\u8eab\uff1b\n        # \u4efb\u4f55\u6570\u548c\u5176\u81ea\u8eab\u5f02\u6216\u662f 0\u3002\n        # \u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u904d\u5386\u6570\u7ec4\uff0c\u5c06\u6bcf\u4e2a\u6570\u5b57\u548c\u5176\u4ed6\u6570\u5b57\u8fdb\u884c\u5f02\u6216\u8fd0\u7b97\uff0c\u6700\u7ec8\u5269\u4e0b\u7684\u6570\u5b57\u5c31\u662f\u552f\u4e00\u6570\u5b57\u3002\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662f O(1)\u3002\n        # 3. \u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u54c8\u5e0c\u8868\u6765\u627e\u51fa\u6570\u7ec4\u4e2d\u7684\u552f\u4e00\u6570\u5b57\u3002\n        # \u904d\u5386\u6570\u7ec4\uff0c\u5c06\u6bcf\u4e2a\u6570\u5b57\u4f5c\u4e3a\u54c8\u5e0c\u8868\u7684\u952e\uff0c\u51fa\u73b0\u7684\u6b21\u6570\u4f5c\u4e3a\u54c8\u5e0c\u8868\u7684\u503c\u3002\n        # \u904d\u5386\u5b8c\u6210\u540e\uff0c\u54c8\u5e0c\u8868\u4e2d\u53ea\u6709\u4e00\u4e2a\u952e\u5bf9\u5e94\u7684\u503c\u662f 1\uff0c\u5176\u4ed6\u503c\u90fd\u662f 0\u3002\n        # \u8fd9\u4e2a\u503c\u5c31\u662f\u552f\u4e00\u6570\u5b57\u3002\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662f O(n)\u3002\n        # 4. \u8ba1\u6570\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u8ba1\u6570\u6765\u627e\u51fa\u6570\u7ec4\u4e2d\u7684\u552f\u4e00\u6570\u5b57\u3002\n        # \u904d\u5386\u6570\u7ec4\uff0c\u7edf\u8ba1\u6bcf\u4e2a\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570\u3002\n        # \u904d\u5386\u5b8c\u6210\u540e\uff0c\u6570\u5b57 x \u51fa\u73b0\u6b21\u6570\u662f 1 \u7684\u552f\u4e00\u4e00\u4e2a\u6570\u5b57\u3002\n        # \u8fd9\u4e2a\u503c\u5c31\u662f\u552f\u4e00\u6570\u5b57\u3002\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662f O(1)\u3002\n        # 5. \u6392\u5e8f\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(nlogn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6392\u5e8f\u6765\u627e\u51fa\u6570\u7ec4\u4e2d\u7684\u552f\u4e00\u6570\u5b57\u3002\n        # \u5c06\u6570\u7ec4\u6392\u5e8f\uff0c\u6570\u5b57 x \u6392\u5728\u4e2d\u95f4\u4f4d\u7f6e\u3002\n        # \u8fd9\u4e2a\u503c\u5c31\u662f\u552f\u4e00\u6570\u5b57\u3002\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(nlogn)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662f O(1)\u3002\n        # 6. \u53cc\u6307\u9488\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u53cc\u6307\u9488\u6765\u627e\u51fa\u6570\u7ec4\u4e2d\u7684\u552f\u4e00\u6570\u5b57\u3002\n        # \u904d\u5386\u6570\u7ec4\uff0c\u5c06\u6bcf\u4e2a\u6570\u5b57\u548c\u4e0b"}, {"task_id": "single-number-ii", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u51fa\u6570\u7ec4\u4e2d\u552f\u4e00\u4e00\u4e2a\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\n        # \u904d\u5386\u6570\u7ec4\uff0c\u5c06\u6bcf\u4e2a\u6570\u5b57\u4e0e\u5176\u4ed6\u6570\u5b57\u8fdb\u884c\u5f02\u6216\u8fd0\u7b97\uff0c\u6700\u540e\u5269\u4e0b\u7684\u6570\u5b57\u5c31\u662f\u552f\u4e00\u4e00\u4e2a\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\n        # \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\uff1a\n        # 1. \u4efb\u4f55\u6570\u548c0\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 2. \u4efb\u4f55\u6570\u548c\u672c\u8eab\u5f02\u6216\u5f97\u52300\n        # 3. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 4. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 5. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 6. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 7. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 8. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 9. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 10. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 11. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 12. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 13. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 14. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 15. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 16. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 17. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 18. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 19. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 20. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 21. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 22. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 23. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 24. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 25. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 26. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 27. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 28. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 29. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 30. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 31. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 32. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 33. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 34. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 35. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4"}], "stickers-to-spell-word": [{"task_id": "stickers-to-spell-word", "completion": "class Solution(object):\n    def minStickers(self, stickers, target):\n        \"\"\"\n        :type stickers: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6784\u5efa\u5b57\u5178\uff0ckey\u4e3a\u5b57\u7b26\u4e32\uff0cvalue\u4e3a\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570\n        # 2. \u6784\u5efa\u5b57\u5178\uff0ckey\u4e3a\u5b57\u7b26\u4e32\uff0cvalue\u4e3a\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570\n        # 3. \u6784\u5efa\u5b57\u5178\uff0ckey\u4e3a\u5b57\u7b26\u4e32\uff0cvalue\u4e3a\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570\n        # 4. \u6784\u5efa\u5b57\u5178\uff0ckey\u4e3a\u5b57\u7b26\u4e32\uff0cvalue\u4e3a\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570\n        # 5. \u6784\u5efa\u5b57\u5178\uff0ckey\u4e3a\u5b57\u7b26\u4e32\uff0cvalue\u4e3a\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570\n        # 6. \u6784\u5efa\u5b57\u5178\uff0ckey\u4e3a\u5b57\u7b26\u4e32\uff0cvalue\u4e3a\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570\n        # 7. \u6784\u5efa\u5b57\u5178\uff0ckey\u4e3a\u5b57\u7b26\u4e32\uff0cvalue\u4e3a\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570\n        # 8. \u6784\u5efa\u5b57\u5178\uff0ckey\u4e3a\u5b57\u7b26\u4e32\uff0cvalue\u4e3a\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570\n        # 9. \u6784\u5efa\u5b57\u5178\uff0ckey\u4e3a\u5b57\u7b26\u4e32\uff0cvalue\u4e3a\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570\n        # 10. \u6784\u5efa\u5b57\u5178\uff0ckey\u4e3a\u5b57\u7b26\u4e32\uff0cvalue\u4e3a\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570\n        # 11. \u6784\u5efa\u5b57\u5178\uff0ckey\u4e3a\u5b57\u7b26\u4e32\uff0cvalue\u4e3a\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570\n        # 12. \u6784\u5efa\u5b57\u5178\uff0ckey\u4e3a\u5b57\u7b26\u4e32\uff0cvalue\u4e3a\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570\n        # 13. \u6784\u5efa\u5b57\u5178\uff0ckey\u4e3a\u5b57\u7b26\u4e32\uff0cvalue\u4e3a\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570\n        # 14. \u6784\u5efa\u5b57\u5178\uff0ckey\u4e3a\u5b57\u7b26\u4e32\uff0cvalue\u4e3a\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570\n        # 15. \u6784\u5efa\u5b57\u5178\uff0ckey\u4e3a\u5b57\u7b26\u4e32\uff0cvalue\u4e3a\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570\n        # 16. \u6784\u5efa\u5b57\u5178\uff0ckey\u4e3a\u5b57\u7b26\u4e32\uff0cvalue\u4e3a\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570\n        # 17. \u6784\u5efa\u5b57\u5178\uff0ckey\u4e3a\u5b57\u7b26\u4e32\uff0cvalue\u4e3a\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570\n        # 18. \u6784\u5efa\u5b57\u5178\uff0ckey\u4e3a\u5b57\u7b26\u4e32\uff0cvalue\u4e3a\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570\n        # 19. \u6784\u5efa\u5b57\u5178\uff0ckey\u4e3a\u5b57\u7b26\u4e32\uff0cvalue\u4e3a\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570\n        # 20. \u6784\u5efa\u5b57\u5178\uff0ckey\u4e3a\u5b57\u7b26\u4e32\uff0cvalue\u4e3a\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570\n        # 21. \u6784\u5efa\u5b57\u5178\uff0ckey\u4e3a\u5b57\u7b26\u4e32\uff0cvalue\u4e3a\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570\n        # 22. \u6784\u5efa\u5b57\u5178\uff0ckey\u4e3a\u5b57\u7b26\u4e32\uff0cvalue\u4e3a\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570\n        # 23. \u6784\u5efa\u5b57\u5178\uff0ckey\u4e3a\u5b57\u7b26\u4e32\uff0cvalue\u4e3a\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570\n        # 24. \u6784\u5efa\u5b57\u5178\uff0ckey\u4e3a\u5b57\u7b26\u4e32\uff0cvalue\u4e3a\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570\n        # 25. \u6784\u5efa\u5b57\u5178\uff0ckey\u4e3a\u5b57\u7b26\u4e32\uff0cvalue\u4e3a\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570\n        # 26. \u6784\u5efa\u5b57\u5178\uff0ckey\u4e3a\u5b57\u7b26\u4e32\uff0cvalue\u4e3a\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570\n        # 27. \u6784\u5efa\u5b57\u5178\uff0ckey\u4e3a\u5b57\u7b26\u4e32\uff0cvalue\u4e3a\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570\n        # 28. \u6784\u5efa\u5b57\u5178\uff0ckey\u4e3a\u5b57\u7b26\u4e32\uff0cvalue\u4e3a\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570\n        # 29. \u6784\u5efa\u5b57\u5178\uff0ckey\u4e3a\u5b57\u7b26\u4e32\uff0cvalue\u4e3a\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570\n        # 30. \u6784\u5efa\u5b57\u5178\uff0ckey\u4e3a\u5b57\u7b26\u4e32\uff0cvalue\u4e3a\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570\n        # 31. \u6784\u5efa\u5b57\u5178\uff0ckey\u4e3a\u5b57\u7b26\u4e32\uff0cvalue\u4e3a\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570\n        # 32. \u6784\u5efa\u5b57\u5178\uff0ckey\u4e3a\u5b57\u7b26\u4e32\uff0cvalue\u4e3a\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570\n        # 33. \u6784\u5efa\u5b57\u5178\uff0ckey\u4e3a\u5b57\u7b26\u4e32\uff0cvalue\u4e3a\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570\n        # 34. \u6784\u5efa\u5b57\u5178\uff0ckey\u4e3a\u5b57\u7b26\u4e32\uff0cvalue\u4e3a\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570\n        # 35. \u6784\u5efa\u5b57\u5178\uff0ckey"}, {"task_id": "stickers-to-spell-word", "completion": "class Solution(object):\n    def minStickers(self, stickers, target):\n        \"\"\"\n        :type stickers: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 2. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 3. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 4. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 5. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 6. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 7. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 8. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 9. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 10. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 11. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 12. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 13. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 14. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 15. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 16. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 17. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 18. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 19. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 20. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 21. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 22. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 23. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 24. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 25. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 26. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 27. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 28. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 29. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 30. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 31. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 32. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 33. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 34. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 35. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 36. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 37. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 38. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 39. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 40. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 41. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 42. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 43. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 44. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 45. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 46. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 47. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32"}, {"task_id": "stickers-to-spell-word", "completion": "class Solution(object):\n    def minStickers(self, stickers, target):\n        \"\"\"\n        :type stickers: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6784\u5efa\u5b57\u5178\uff0ckey\u4e3a\u5b57\u7b26\u4e32\uff0cvalue\u4e3a\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570\n        # 2. \u6784\u5efa\u5b57\u5178\uff0ckey\u4e3a\u5b57\u7b26\u4e32\uff0cvalue\u4e3a\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570\n        # 3. \u6784\u5efa\u5b57\u5178\uff0ckey\u4e3a\u5b57\u7b26\u4e32\uff0cvalue\u4e3a\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570\n        # 4. \u6784\u5efa\u5b57\u5178\uff0ckey\u4e3a\u5b57\u7b26\u4e32\uff0cvalue\u4e3a\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570\n        # 5. \u6784\u5efa\u5b57\u5178\uff0ckey\u4e3a\u5b57\u7b26\u4e32\uff0cvalue\u4e3a\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570\n        # 6. \u6784\u5efa\u5b57\u5178\uff0ckey\u4e3a\u5b57\u7b26\u4e32\uff0cvalue\u4e3a\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570\n        # 7. \u6784\u5efa\u5b57\u5178\uff0ckey\u4e3a\u5b57\u7b26\u4e32\uff0cvalue\u4e3a\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570\n        # 8. \u6784\u5efa\u5b57\u5178\uff0ckey\u4e3a\u5b57\u7b26\u4e32\uff0cvalue\u4e3a\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570\n        # 9. \u6784\u5efa\u5b57\u5178\uff0ckey\u4e3a\u5b57\u7b26\u4e32\uff0cvalue\u4e3a\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570\n        # 10. \u6784\u5efa\u5b57\u5178\uff0ckey\u4e3a\u5b57\u7b26\u4e32\uff0cvalue\u4e3a\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570\n        # 11. \u6784\u5efa\u5b57\u5178\uff0ckey\u4e3a\u5b57\u7b26\u4e32\uff0cvalue\u4e3a\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570\n        # 12. \u6784\u5efa\u5b57\u5178\uff0ckey\u4e3a\u5b57\u7b26\u4e32\uff0cvalue\u4e3a\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570\n        # 13. \u6784\u5efa\u5b57\u5178\uff0ckey\u4e3a\u5b57\u7b26\u4e32\uff0cvalue\u4e3a\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570\n        # 14. \u6784\u5efa\u5b57\u5178\uff0ckey\u4e3a\u5b57\u7b26\u4e32\uff0cvalue\u4e3a\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570\n        # 15. \u6784\u5efa\u5b57\u5178\uff0ckey\u4e3a\u5b57\u7b26\u4e32\uff0cvalue\u4e3a\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570\n        # 16. \u6784\u5efa\u5b57\u5178\uff0ckey\u4e3a\u5b57\u7b26\u4e32\uff0cvalue\u4e3a\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570\n        # 17. \u6784\u5efa\u5b57\u5178\uff0ckey\u4e3a\u5b57\u7b26\u4e32\uff0cvalue\u4e3a\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570\n        # 18. \u6784\u5efa\u5b57\u5178\uff0ckey\u4e3a\u5b57\u7b26\u4e32\uff0cvalue\u4e3a\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570\n        # 19. \u6784\u5efa\u5b57\u5178\uff0ckey\u4e3a\u5b57\u7b26\u4e32\uff0cvalue\u4e3a\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570\n        # 20. \u6784\u5efa\u5b57\u5178\uff0ckey\u4e3a\u5b57\u7b26\u4e32\uff0cvalue\u4e3a\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570\n        # 21. \u6784\u5efa\u5b57\u5178\uff0ckey\u4e3a\u5b57\u7b26\u4e32\uff0cvalue\u4e3a\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570\n        # 22. \u6784\u5efa\u5b57\u5178\uff0ckey\u4e3a\u5b57\u7b26\u4e32\uff0cvalue\u4e3a\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570\n        # 23. \u6784\u5efa\u5b57\u5178\uff0ckey\u4e3a\u5b57\u7b26\u4e32\uff0cvalue\u4e3a\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570\n        # 24. \u6784\u5efa\u5b57\u5178\uff0ckey\u4e3a\u5b57\u7b26\u4e32\uff0cvalue\u4e3a\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570\n        # 25. \u6784\u5efa\u5b57\u5178\uff0ckey\u4e3a\u5b57\u7b26\u4e32\uff0cvalue\u4e3a\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570\n        # 26. \u6784\u5efa\u5b57\u5178\uff0ckey\u4e3a\u5b57\u7b26\u4e32\uff0cvalue\u4e3a\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570\n        # 27. \u6784\u5efa\u5b57\u5178\uff0ckey\u4e3a\u5b57\u7b26\u4e32\uff0cvalue\u4e3a\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570\n        # 28. \u6784\u5efa\u5b57\u5178\uff0ckey\u4e3a\u5b57\u7b26\u4e32\uff0cvalue\u4e3a\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570\n        # 29. \u6784\u5efa\u5b57\u5178\uff0ckey\u4e3a\u5b57\u7b26\u4e32\uff0cvalue\u4e3a\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570\n        # 30. \u6784\u5efa\u5b57\u5178\uff0ckey\u4e3a\u5b57\u7b26\u4e32\uff0cvalue\u4e3a\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570\n        # 31. \u6784\u5efa\u5b57\u5178\uff0ckey\u4e3a\u5b57\u7b26\u4e32\uff0cvalue\u4e3a\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570\n        # 32. \u6784\u5efa\u5b57\u5178\uff0ckey\u4e3a\u5b57\u7b26\u4e32\uff0cvalue\u4e3a\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570\n        # 33. \u6784\u5efa\u5b57\u5178\uff0ckey\u4e3a\u5b57\u7b26\u4e32\uff0cvalue\u4e3a\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570\n        # 34. \u6784\u5efa\u5b57\u5178\uff0ckey\u4e3a\u5b57\u7b26\u4e32\uff0cvalue\u4e3a\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570\n        # 35. \u6784\u5efa\u5b57\u5178\uff0ckey"}, {"task_id": "stickers-to-spell-word", "completion": "class Solution(object):\n    def minStickers(self, stickers, target):\n        \"\"\"\n        :type stickers: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 2. \u8ba1\u7b97\u6bcf\u4e2a\u5b57\u7b26\u4e32\u7684\u7f16\u7801\n        # 3. \u8ba1\u7b97\u7f16\u7801\u4e4b\u95f4\u7684\u8ddd\u79bb\n        # 4. \u627e\u5230\u6700\u5c0f\u7684\u8ddd\u79bb\n        # 5. \u8fd4\u56de\u6700\u5c0f\u8ddd\u79bb\n        \n        # \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        def enumerate_all_strings(target):\n            res = []\n            for i in range(len(target)):\n                res.append(target[i])\n                for j in range(i+1, len(target)):\n                    res.append(target[i:j+1])\n            return res\n        \n        # \u8ba1\u7b97\u6bcf\u4e2a\u5b57\u7b26\u4e32\u7684\u7f16\u7801\n        def encode_string(s):\n            res = []\n            for c in s:\n                res.append(ord(c) - ord('a'))\n            return res\n        \n        # \u8ba1\u7b97\u7f16\u7801\u4e4b\u95f4\u7684\u8ddd\u79bb\n        def distance(s1, s2):\n            res = 0\n            for i in range(len(s1)):\n                res += abs(s1[i] - s2[i])\n            return res\n        \n        # \u627e\u5230\u6700\u5c0f\u7684\u8ddd\u79bb\n        def find_min_distance(stickers):\n            min_distance = float('inf')\n            for i in range(len(stickers)):\n                for j in range(i+1, len(stickers)):\n                    distance_ij = distance(stickers[i], stickers[j])\n                    if distance_ij < min_distance:\n                        min_distance = distance_ij\n            return min_distance\n        \n        # \u8fd4\u56de\u6700\u5c0f\u8ddd\u79bb\n        def find_min_distance_between_strings(stickers, target):\n            all_strings = enumerate_all_strings(target)\n            min_distance = float('inf')\n            for s in all_strings:\n                encoded_string = encode_string(s)\n                distance_ij = find_min_distance(encoded_string)\n                if distance_ij < min_distance:\n                    min_distance = distance_ij\n            return min_distance\n        \n        # \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        all_strings = enumerate_all_strings(target)\n        min_distance = float('inf')\n        for s in all_strings:\n            encoded_string = encode_string(s)\n            distance_ij = find_min_distance(encoded_string)\n            if distance_ij < min_distance:\n                min_distance = distance_ij\n        return min_distance"}, {"task_id": "stickers-to-spell-word", "completion": "class Solution(object):\n    def minStickers(self, stickers, target):\n        \"\"\"\n        :type stickers: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 2. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 3. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 4. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 5. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 6. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 7. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 8. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 9. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 10. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 11. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 12. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 13. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 14. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 15. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 16. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 17. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 18. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 19. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 20. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 21. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 22. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 23. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 24. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 25. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 26. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 27. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 28. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 29. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 30. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 31. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 32. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 33. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 34. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 35. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 36. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 37. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 38. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 39. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 40. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 41. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 42. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 43. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 44. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 45. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 46. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\n        # 47. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32"}], "strange-printer": [{"task_id": "strange-printer", "completion": "class Solution(object):\n    def strangePrinter(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\n        # 2. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\n        # 3. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\n        # 4. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\n        # 5. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\n        # 6. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\n        # 7. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\n        # 8. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\n        # 9. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\n        # 10. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\n        # 11. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\n        # 12. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\n        # 13. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\n        # 14. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\n        # 15. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\n        # 16. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\n        # 17. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\n        # 18. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\n        # 19. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\n        # 20. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26"}, {"task_id": "strange-printer", "completion": "class Solution(object):\n    def strangePrinter(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\n        # 2. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\n        # 3. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u4f4d\u7f6e\n        # 4. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\n        # 5. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u4f4d\u7f6e\n        # 6. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\n        # 7. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u4f4d\u7f6e\n        # 8. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\n        # 9. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u4f4d\u7f6e\n        # 10. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\n        # 11. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u4f4d\u7f6e\n        # 12. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\n        # 13. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u4f4d\u7f6e\n        # 14. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\n        # 15. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u4f4d\u7f6e\n        # 16. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\n        # 17. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u4f4d\u7f6e\n        # 18. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\n        # 19. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u4f4d\u7f6e\n        # 20. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\n        # 21. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u4f4d\u7f6e\n        # 22. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\n        # 23. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u4f4d\u7f6e\n        # 24. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\n        # 25. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u4f4d\u7f6e\n        # 26. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\n        # 27. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u4f4d\u7f6e\n        # 28. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\n        # 29. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u4f4d\u7f6e\n        # 30. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\n        # 31. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u4f4d\u7f6e\n        # 32. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\n        # 33. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u4f4d\u7f6e\n        # 34. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\n        # 35. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u4f4d\u7f6e\n        # 36. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\n        # 37. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u4f4d\u7f6e\n        # 38. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\n        # 39. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u4f4d\u7f6e\n        # 40. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\n        # 41. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u4f4d\u7f6e\n        # 42. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\n        # 43. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u4f4d\u7f6e\n        # 44. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\n        # 45. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u4f4d\u7f6e\n        # 46. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\n        # 47. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u4f4d\u7f6e\n        # 48. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\n        # 49. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u4f4d\u7f6e\n        # 50. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\n        # 51. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u4f4d\u7f6e\n        # 52. \u627e\u5230\u6700\u957f\u5b57\u7b26"}, {"task_id": "strange-printer", "completion": "class Solution(object):\n    def strangePrinter(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\n        # 2. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\n        # 3. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\n        # 4. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\n        # 5. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 6. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 7. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 8. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 9. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 10. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 11. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 12. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 13. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 14. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 15. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 16. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 17. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 18. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 19. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e"}, {"task_id": "strange-printer", "completion": "class Solution(object):\n    def strangePrinter(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\n        # 2. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\n        # 3. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\n        # 4. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\n        # 5. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\n        # 6. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\n        # 7. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\n        # 8. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\n        # 9. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\n        # 10. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\n        # 11. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\n        # 12. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\n        # 13. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\n        # 14. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\n        # 15. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\n        # 16. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\n        # 17. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\n        # 18. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\n        # 19. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u500d\u6570\n        # 20. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26"}, {"task_id": "strange-printer", "completion": "class Solution(object):\n    def strangePrinter(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\n        # 2. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\n        # 3. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\n        # 4. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\n        # 5. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\n        # 6. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\n        # 7. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\n        # 8. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\n        # 9. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\n        # 10. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\n        # 11. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\n        # 12. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\n        # 13. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\n        # 14. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\n        # 15. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\n        # 16. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\n        # 17. \u627e\u5230\u6700\u957f\u5b57\u7b26\u4e32\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\n        # 18"}], "sqrtx": [{"task_id": "sqrtx", "completion": "class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        \n        left = 1\n        right = x\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            if mid ** 2 <= x:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return left - 1"}, {"task_id": "sqrtx", "completion": "class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        \n        left = 1\n        right = x\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            if mid * mid == x:\n                return mid\n            elif mid * mid < x:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return left - 1"}, {"task_id": "sqrtx", "completion": "class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        \n        left = 1\n        right = x\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            if mid * mid == x:\n                return mid\n            elif mid * mid < x:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return left - 1"}, {"task_id": "sqrtx", "completion": "class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        \n        left = 1\n        right = x\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            if mid ** 2 <= x:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return left - 1"}, {"task_id": "sqrtx", "completion": "class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        \n        left = 1\n        right = x\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            if mid * mid == x:\n                return mid\n            elif mid * mid < x:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return left - 1"}], "roman-to-integer": [{"task_id": "roman-to-integer", "completion": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a48 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.77%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.6 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.05%\u7684\u7528\u6237\n\n        # 2. \u8fed\u4ee3\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a48 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.77%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.6 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.05%\u7684\u7528\u6237\n\n        # 3. \u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a48 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.77%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.6 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.05%\u7684\u7528\u6237\n\n        # 4. \u54c8\u5e0c\u8868+\u8fed\u4ee3\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a48 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.77%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.6 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.05%\u7684\u7528\u6237\n\n        # 5. \u54c8\u5e0c\u8868+\u8fed\u4ee3+\u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a48 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.77%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.6 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.05%\u7684\u7528\u6237\n\n        # 6. \u54c8\u5e0c\u8868+\u8fed\u4ee3+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a48 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.77%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.6 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.05%\u7684\u7528\u6237\n\n        # 7. \u54c8\u5e0c\u8868+\u8fed\u4ee3+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a48 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.77%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.6 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.05%\u7684\u7528\u6237\n\n        # 8. \u54c8\u5e0c\u8868+\u8fed\u4ee3+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a48 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.77%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.6 MB,"}, {"task_id": "roman-to-integer", "completion": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Roman numerals are represented by seven different symbols:\u00a0I, V, X, L, C, D and M.\n        # Symbol       Value\n        # I             1\n        # V             5\n        # X             10\n        # L             50\n        # C             100\n        # D             500\n        # M             1000\n        # For example,\u00a02 is written as II\u00a0in Roman numeral, just two ones added together. 12 is written as\u00a0XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\n        # Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\n        # I can be placed before V (5) and X (10) to make 4 and 9.\u00a0\n        # X can be placed before L (50) and C (100) to make 40 and 90.\u00a0\n        # C can be placed before D (500) and M (1000) to make 400 and 900.\n        # Given a roman numeral, convert it to an integer.\n        # Input: s = \"III\"\n        # Output: 3\n        # Explanation: III = 3.\n        # Input: s = \"LVIII\"\n        # Output: 58\n        # Explanation: L = 50, V= 5, III = 3.\n        # Input: s = \"MCMXCIV\"\n        # Output: 1994\n        # Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.\n        # Input: s = \"IX\"\n        # Output: 9\n        # Input: s = \"IV\"\n        # Output: 4\n        # Input: s = \"MCMXCIV\"\n        # Output: 1994\n        # Input: s = \"MDCCC\"\n        # Output: 1900\n        # Input: s = \"MDCCCLXXXVIII\"\n        # Output: 1988\n        # Input: s = \"MDCCCLXXXIX\"\n        # Output: 1989\n        # Input: s = \"MDCCCLXXXIX\"\n        # Output: 1989\n        # Input: s = \"MDCCCLXXXIX\"\n        # Output: 1989\n        # Input: s = \"MDCCCLXXXIX\"\n        # Output: 1989\n        # Input: s = \"MDCCCLXXXIX\"\n        # Output: 1989\n        # Input: s = \"MDCCCLXXXIX\"\n        # Output: 1989\n        # Input: s = \"MDCCCLXXXIX\"\n        # Output: 1989\n        # Input: s = \"MDCCCLXXXIX\"\n        # Output: 1989\n        # Input: s = \"MDCCCLXXXIX\"\n        # Output: 1989\n        # Input: s = \"MDCCCLXXXIX\"\n        # Output: 1989\n        # Input: s = \"MDCCCLXXXIX\"\n        # Output: 1989\n        # Input: s = \"MDCCCLXXXIX\"\n        # Output: 1989\n        # Input: s = \"MDCCCLXXXIX\"\n        # Output: 1989\n        # Input: s = \"MDCCCLXXXIX\"\n        # Output: 1989\n        # Input: s = \"MDCCCLXXXIX\"\n        # Output: 1989\n        # Input: s = \"MDCCCLXXXIX\"\n        # Output: 1989\n        # Input: s = \"MDCCCLXXXIX\"\n        # Output: 1989\n        # Input: s = \"MDCCCLXXXIX\"\n        # Output: 1989\n        # Input: s = \"MDCCCLXXXIX\"\n        # Output: 1989"}, {"task_id": "roman-to-integer", "completion": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.79%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.6 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.06%\u7684\u7528\u6237\n\n        # 2. \u8d2a\u5fc3\u7b97\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.79%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.6 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.06%\u7684\u7528\u6237\n\n        # 3. \u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.79%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.6 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.06%\u7684\u7528\u6237\n\n        # 4. \u54c8\u5e0c\u8868 + \u6ed1\u52a8\u7a97\u53e3\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.79%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.6 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.06%\u7684\u7528\u6237\n\n        # 5. \u54c8\u5e0c\u8868 + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.79%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.6 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.06%\u7684\u7528\u6237\n\n        # 6. \u54c8\u5e0c\u8868 + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.79%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.6 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.06%\u7684\u7528\u6237\n\n        # 7. \u54c8\u5e0c\u8868 + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.79%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.6 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.06%\u7684\u7528\u6237\n\n        # 8. \u54c8\u5e0c\u8868 + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709"}, {"task_id": "roman-to-integer", "completion": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.97%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.6 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237\n\n        # 2. \u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6267\u884c\u7528\u65f6\uff1a40 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.97%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.6 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237\n        roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n        result = 0\n        for i in range(len(s)):\n            if i == 0:\n                result += roman_dict[s[i]]\n            else:\n                if roman_dict[s[i]] > roman_dict[s[i-1]]:\n                    result += roman_dict[s[i]] - 2 * roman_dict[s[i-1]]\n                else:\n                    result += roman_dict[s[i]]\n        return result\n\n        # 3. \u54c8\u5e0c\u8868 + \u9012\u51cf\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a40 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.97%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.6 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237\n        roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n        result = 0\n        for i in range(len(s)):\n            if i == 0:\n                result += roman_dict[s[i]]\n            else:\n                if roman_dict[s[i]] > roman_dict[s[i-1]]:\n                    result += roman_dict[s[i]] - roman_dict[s[i-1]]\n                else:\n                    result += roman_dict[s[i]]\n        return result\n\n        # 4. \u54c8\u5e0c\u8868 + \u9012\u51cf + \u5faa\u73af\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a40 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.97%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.6 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237\n        roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n        result = 0\n        for i in range(len(s)):\n            if i == 0:\n                result += roman_dict[s[i]]\n            else:\n                if roman_dict[s[i]] > roman_dict[s[i-1]]:\n                    result += roman_dict[s[i]] - roman_dict[s[i-1]]\n                else:\n                    result += roman_dict[s[i]]\n        return result\n\n        # 5. \ufffd\ufffd"}, {"task_id": "roman-to-integer", "completion": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Roman numerals are represented by seven different symbols:\u00a0I, V, X, L, C, D and M.\n        # Symbol       Value\n        # I             1\n        # V             5\n        # X             10\n        # L             50\n        # C             100\n        # D             500\n        # M             1000\n        # For example,\u00a02 is written as II\u00a0in Roman numeral, just two ones added together. 12 is written as\u00a0XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\n        # Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\n        # I can be placed before V (5) and X (10) to make 4 and 9.\u00a0\n        # X can be placed before L (50) and C (100) to make 40 and 90.\u00a0\n        # C can be placed before D (500) and M (1000) to make 400 and 900.\n        # Given a roman numeral, convert it to an integer.\n        # Input: s = \"III\"\n        # Output: 3\n        # Explanation: III = 3.\n        # Input: s = \"LVIII\"\n        # Output: 58\n        # Explanation: L = 50, V= 5, III = 3.\n        # Input: s = \"MCMXCIV\"\n        # Output: 1994\n        # Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.\n        # Input: s = \"IX\"\n        # Output: 9\n        # Input: s = \"IV\"\n        # Output: 4\n        # Input: s = \"MCMXCIV\"\n        # Output: 1994\n        # Input: s = \"MDCCC\"\n        # Output: 1900\n        # Input: s = \"MDCCCLXXXVIII\"\n        # Output: 1988\n        # Input: s = \"MDCCCLXXXIX\"\n        # Output: 1989\n        # Input: s = \"MDCCCLXXXIX\"\n        # Output: 1989\n        # Input: s = \"MDCCCLXXXIX\"\n        # Output: 1989\n        # Input: s = \"MDCCCLXXXIX\"\n        # Output: 1989\n        # Input: s = \"MDCCCLXXXIX\"\n        # Output: 1989\n        # Input: s = \"MDCCCLXXXIX\"\n        # Output: 1989\n        # Input: s = \"MDCCCLXXXIX\"\n        # Output: 1989\n        # Input: s = \"MDCCCLXXXIX\"\n        # Output: 1989\n        # Input: s = \"MDCCCLXXXIX\"\n        # Output: 1989\n        # Input: s = \"MDCCCLXXXIX\"\n        # Output: 1989\n        # Input: s = \"MDCCCLXXXIX\"\n        # Output: 1989\n        # Input: s = \"MDCCCLXXXIX\"\n        # Output: 1989\n        # Input: s = \"MDCCCLXXXIX\"\n        # Output: 1989\n        # Input: s = \"MDCCCLXXXIX\"\n        # Output: 1989\n        # Input: s = \"MDCCCLXXXIX\"\n        # Output: 1989\n        # Input: s = \"MDCCCLXXXIX\"\n        # Output: 1989\n        # Input: s = \"MDCCCLXXXIX\"\n        # Output: 1989\n        # Input: s = \"MDCCCLXXXIX\"\n        # Output: 1989\n        # Input: s = \"MDCCCLXXXIX\"\n        # Output: 1989"}], "contains-duplicate": [{"task_id": "contains-duplicate", "completion": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # M1. \u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u54c8\u5e0c\u8868\u5b58\u50a8\u6bcf\u4e2a\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5927\u4e8e1\uff0c\u5219\u8fd4\u56deTrue\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u7b49\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5c0f\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5927\u4e8e1\uff0c\u5219\u8fd4\u56deTrue\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u7b49\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5c0f\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5927\u4e8e1\uff0c\u5219\u8fd4\u56deTrue\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u7b49\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5c0f\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5927\u4e8e1\uff0c\u5219\u8fd4\u56deTrue\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u7b49\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5c0f\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5927\u4e8e1\uff0c\u5219\u8fd4\u56deTrue\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u7b49\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5c0f\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5927\u4e8e1\uff0c\u5219\u8fd4\u56deTrue\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u7b49\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5c0f\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5927\u4e8e1\uff0c\u5219\u8fd4\u56deTrue\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u7b49\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5c0f\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5927\u4e8e1\uff0c\u5219\u8fd4\u56deTrue\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u7b49\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5c0f\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5927\u4e8e1\uff0c\u5219\u8fd4\u56deTrue\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u7b49\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5c0f\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5927\u4e8e1\uff0c\u5219\u8fd4\u56deTrue\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u7b49\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5c0f\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5927\u4e8e1\uff0c\u5219\u8fd4\u56deTrue\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u7b49\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5c0f\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5927\u4e8e1\uff0c\u5219\u8fd4\u56deTrue\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u7b49\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5c0f\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5927\u4e8e1\uff0c\u5219\u8fd4\u56deTrue\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u7b49\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5c0f\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5927\u4e8e1\uff0c\u5219\u8fd4\u56deTrue\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u7b49\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5c0f\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5927\u4e8e1\uff0c\u5219\u8fd4\u56deTrue\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u7b49\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5c0f\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5927\u4e8e1\uff0c\u5219\u8fd4\u56deTrue\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u7b49\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5c0f\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5927\u4e8e1\uff0c\u5219\u8fd4\u56deTrue\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u7b49\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5c0f\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5927\u4e8e1\uff0c\u5219\u8fd4\u56deTrue\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u7b49\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982"}, {"task_id": "contains-duplicate", "completion": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # M1. \u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u6267\u884c\u7528\u65f6 : 40 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        d = {}\n        for num in nums:\n            if num in d:\n                return True\n            d[num] = 1\n        return False\n\n        # M2. \u6392\u5e8f\n        # \u65f6\u95f4\u590d\u6742\u5ea6: O(nlogn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6: O(1)\n        # \u6267\u884c\u7528\u65f6 : 40 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        nums.sort()\n        for i in range(len(nums) - 1):\n            if nums[i] == nums[i + 1]:\n                return True\n        return False\n\n        # M3. \u53cc\u6307\u9488\n        # \u65f6\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6: O(1)\n        # \u6267\u884c\u7528\u65f6 : 40 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        nums.sort()\n        for i in range(len(nums) - 1):\n            if nums[i] == nums[i + 1]:\n                return True\n        return False\n\n        # M4. \u54c8\u5e0c\u8868+\u53cc\u6307\u9488\n        # \u65f6\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u6267\u884c\u7528\u65f6 : 40 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        d = {}\n        for i in range(len(nums)):\n            if nums[i] in d:\n                return True\n            d[nums[i]] = i\n        return False\n\n        # M5. \u54c8\u5e0c\u8868+\u53cc\u6307\u9488\n        # \u65f6\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u6267\u884c\u7528\u65f6 : 40 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        d = {}\n        for i in range(len(nums)):\n            if nums[i] in d:\n                return True\n            d[nums[i]] = i\n        return False\n\n        # M6. \u54c8\u5e0c\u8868+\u53cc\u6307\u9488\n        # \u65f6\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u6267\u884c\u7528\u65f6 : 40 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        d = {}\n        for i in range(len(nums)):\n            if nums[i] in d:\n                return True\n            d[nums[i]] = i\n        return False\n\n        # M7. \u54c8\u5e0c\u8868+\u53cc\u6307\u9488\n        # \u65f6\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u6267\u884c\u7528\u65f6 : 40 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        d = {}\n        for i in range(len(nums)):\n            if nums[i] in d:\n                return True\n            d[nums[i]] = i\n        return False\n\n        # M8. \u54c8\u5e0c\u8868+\u53cc\u6307\u9488\n        # \u65f6\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u6267\u884c\u7528\u65f6 : 40 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        d = {}\n        for i in range(len(nums)):\n            if nums[i] in d:\n                return True\n            d[nums[i]] = i\n        return False\n\n        # M9. \u54c8"}, {"task_id": "contains-duplicate", "completion": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # M1. \u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u54c8\u5e0c\u8868\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(n)\uff0c\u4f46\u662f\u54c8\u5e0c\u8868\u7684\u67e5\u627e\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(1)\uff0c\u6240\u4ee5\u603b\u4f53\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n)\n        # \u54c8\u5e0c\u8868\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(n)\uff0c\u4f46\u662f\u54c8\u5e0c\u8868\u7684\u67e5\u627e\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(1)\uff0c\u6240\u4ee5\u603b\u4f53\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n)\n        # \u54c8\u5e0c\u8868\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(n)\uff0c\u4f46\u662f\u54c8\u5e0c\u8868\u7684\u67e5\u627e\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(1)\uff0c\u6240\u4ee5\u603b\u4f53\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n)\n        # \u54c8\u5e0c\u8868\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(n)\uff0c\u4f46\u662f\u54c8\u5e0c\u8868\u7684\u67e5\u627e\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(1)\uff0c\u6240\u4ee5\u603b\u4f53\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n)\n        # \u54c8\u5e0c\u8868\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(n)\uff0c\u4f46\u662f\u54c8\u5e0c\u8868\u7684\u67e5\u627e\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(1)\uff0c\u6240\u4ee5\u603b\u4f53\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n)\n        # \u54c8\u5e0c\u8868\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(n)\uff0c\u4f46\u662f\u54c8\u5e0c\u8868\u7684\u67e5\u627e\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(1)\uff0c\u6240\u4ee5\u603b\u4f53\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n)\n        # \u54c8\u5e0c\u8868\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(n)\uff0c\u4f46\u662f\u54c8\u5e0c\u8868\u7684\u67e5\u627e\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(1)\uff0c\u6240\u4ee5\u603b\u4f53\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n)\n        # \u54c8\u5e0c\u8868\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(n)\uff0c\u4f46\u662f\u54c8\u5e0c\u8868\u7684\u67e5\u627e\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(1)\uff0c\u6240\u4ee5\u603b\u4f53\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n)\n        # \u54c8\u5e0c\u8868\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(n)\uff0c\u4f46\u662f\u54c8\u5e0c\u8868\u7684\u67e5\u627e\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(1)\uff0c\u6240\u4ee5\u603b\u4f53\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n)\n        # \u54c8\u5e0c\u8868\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(n)\uff0c\u4f46\u662f\u54c8\u5e0c\u8868\u7684\u67e5\u627e\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(1)\uff0c\u6240\u4ee5\u603b\u4f53\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n)\n        # \u54c8\u5e0c\u8868\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(n)\uff0c\u4f46\u662f\u54c8\u5e0c\u8868\u7684\u67e5\u627e\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(1)\uff0c\u6240\u4ee5\u603b\u4f53\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n)\n        # \u54c8\u5e0c\u8868\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(n)\uff0c\u4f46\u662f\u54c8\u5e0c\u8868\u7684\u67e5\u627e\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(1)\uff0c\u6240\u4ee5\u603b\u4f53\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n)\n        # \u54c8\u5e0c\u8868\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(n)\uff0c\u4f46\u662f\u54c8\u5e0c\u8868\u7684\u67e5\u627e\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(1)\uff0c\u6240\u4ee5\u603b\u4f53\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n)\n        # \u54c8\u5e0c\u8868\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(n)\uff0c\u4f46\u662f\u54c8\u5e0c\u8868\u7684\u67e5\u627e\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(1)\uff0c\u6240\u4ee5\u603b\u4f53\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n)\n        # \u54c8\u5e0c\u8868\u7684\u7a7a\u95f4\u590d\ufffd\ufffd"}, {"task_id": "contains-duplicate", "completion": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # M1. \u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u6267\u884c\u7528\u65f6 : 40 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # \u4f5c\u8005\uff1aLeetCode\n        # \u94fe\u63a5\uff1ahttps://leetcode-cn.com/problems/contains-duplicate/solution/zhong-fu-de-shu-zi-by-leetcode/\n        # \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09\n        # \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002\n        d = {}\n        for num in nums:\n            if num in d:\n                return True\n            else:\n                d[num] = 1\n        return False"}, {"task_id": "contains-duplicate", "completion": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # M1. \u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u54c8\u5e0c\u8868\u5b58\u50a8\u6bcf\u4e2a\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5927\u4e8e1\uff0c\u5219\u8fd4\u56deTrue\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u7b49\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5c0f\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5927\u4e8e1\uff0c\u5219\u8fd4\u56deTrue\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u7b49\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5c0f\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5927\u4e8e1\uff0c\u5219\u8fd4\u56deTrue\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u7b49\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5c0f\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5927\u4e8e1\uff0c\u5219\u8fd4\u56deTrue\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u7b49\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5c0f\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5927\u4e8e1\uff0c\u5219\u8fd4\u56deTrue\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u7b49\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5c0f\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5927\u4e8e1\uff0c\u5219\u8fd4\u56deTrue\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u7b49\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5c0f\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5927\u4e8e1\uff0c\u5219\u8fd4\u56deTrue\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u7b49\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5c0f\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5927\u4e8e1\uff0c\u5219\u8fd4\u56deTrue\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u7b49\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5c0f\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5927\u4e8e1\uff0c\u5219\u8fd4\u56deTrue\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u7b49\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5c0f\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5927\u4e8e1\uff0c\u5219\u8fd4\u56deTrue\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u7b49\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5c0f\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5927\u4e8e1\uff0c\u5219\u8fd4\u56deTrue\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u7b49\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5c0f\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5927\u4e8e1\uff0c\u5219\u8fd4\u56deTrue\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u7b49\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5c0f\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5927\u4e8e1\uff0c\u5219\u8fd4\u56deTrue\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u7b49\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5c0f\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5927\u4e8e1\uff0c\u5219\u8fd4\u56deTrue\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u7b49\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5c0f\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5927\u4e8e1\uff0c\u5219\u8fd4\u56deTrue\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u7b49\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5c0f\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5927\u4e8e1\uff0c\u5219\u8fd4\u56deTrue\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u7b49\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5c0f\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5927\u4e8e1\uff0c\u5219\u8fd4\u56deTrue\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u7b49\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5c0f\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u5927\u4e8e1\uff0c\u5219\u8fd4\u56deTrue\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u7b49\u4e8e1\uff0c\u5219\u8fd4\u56deFalse\n        # \u5982"}], "sliding-window-maximum": [{"task_id": "sliding-window-maximum", "completion": "class Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u6ed1\u52a8\u7a97\u53e3\n        # 2. \u7a97\u53e3\u5927\u5c0f\u4e3ak\uff0c\u7a97\u53e3\u6ed1\u52a8\u4e00\u6b21\uff0c\u7a97\u53e3\u5185\u7684\u6570\u5b57\u5c31\u662f\u6700\u5927\u503c\n        # 3. \u7a97\u53e3\u6ed1\u52a8\u4e00\u6b21\uff0c\u7a97\u53e3\u5185\u7684\u6570\u5b57\u5c31\u662f\u6700\u5927\u503c\n        # 4. \u7a97\u53e3\u6ed1\u52a8\u4e00\u6b21\uff0c\u7a97\u53e3\u5185\u7684\u6570\u5b57\u5c31\u662f\u6700\u5927\u503c\n        # 5. \u7a97\u53e3\u6ed1\u52a8\u4e00\u6b21\uff0c\u7a97\u53e3\u5185\u7684\u6570\u5b57\u5c31\u662f\u6700\u5927\u503c\n        # 6. \u7a97\u53e3\u6ed1\u52a8\u4e00\u6b21\uff0c\u7a97\u53e3\u5185\u7684\u6570\u5b57\u5c31\u662f\u6700\u5927\u503c\n        # 7. \u7a97\u53e3\u6ed1\u52a8\u4e00\u6b21\uff0c\u7a97\u53e3\u5185\u7684\u6570\u5b57\u5c31\u662f\u6700\u5927\u503c\n        # 8. \u7a97\u53e3\u6ed1\u52a8\u4e00\u6b21\uff0c\u7a97\u53e3\u5185\u7684\u6570\u5b57\u5c31\u662f\u6700\u5927\u503c\n        # 9. \u7a97\u53e3\u6ed1\u52a8\u4e00\u6b21\uff0c\u7a97\u53e3\u5185\u7684\u6570\u5b57\u5c31\u662f\u6700\u5927\u503c\n        # 10. \u7a97\u53e3\u6ed1\u52a8\u4e00\u6b21\uff0c\u7a97\u53e3\u5185\u7684\u6570\u5b57\u5c31\u662f\u6700\u5927\u503c\n        # 11. \u7a97\u53e3\u6ed1\u52a8\u4e00\u6b21\uff0c\u7a97\u53e3\u5185\u7684\u6570\u5b57\u5c31\u662f\u6700\u5927\u503c\n        # 12. \u7a97\u53e3\u6ed1\u52a8\u4e00\u6b21\uff0c\u7a97\u53e3\u5185\u7684\u6570\u5b57\u5c31\u662f\u6700\u5927\u503c\n        # 13. \u7a97\u53e3\u6ed1\u52a8\u4e00\u6b21\uff0c\u7a97\u53e3\u5185\u7684\u6570\u5b57\u5c31\u662f\u6700\u5927\u503c\n        # 14. \u7a97\u53e3\u6ed1\u52a8\u4e00\u6b21\uff0c\u7a97\u53e3\u5185\u7684\u6570\u5b57\u5c31\u662f\u6700\u5927\u503c\n        # 15. \u7a97\u53e3\u6ed1\u52a8\u4e00\u6b21\uff0c\u7a97\u53e3\u5185\u7684\u6570\u5b57\u5c31\u662f\u6700\u5927\u503c\n        # 16. \u7a97\u53e3\u6ed1\u52a8\u4e00\u6b21\uff0c\u7a97\u53e3\u5185\u7684\u6570\u5b57\u5c31\u662f\u6700\u5927\u503c\n        # 17. \u7a97\u53e3\u6ed1\u52a8\u4e00\u6b21\uff0c\u7a97\u53e3\u5185\u7684\u6570\u5b57\u5c31\u662f\u6700\u5927\u503c\n        # 18. \u7a97\u53e3\u6ed1\u52a8\u4e00\u6b21\uff0c\u7a97\u53e3\u5185\u7684\u6570\u5b57\u5c31\u662f\u6700\u5927\u503c\n        # 19. \u7a97\u53e3\u6ed1\u52a8\u4e00\u6b21\uff0c\u7a97\u53e3\u5185\u7684\u6570\u5b57\u5c31\u662f\u6700\u5927\u503c\n        # 20. \u7a97\u53e3\u6ed1\u52a8\u4e00\u6b21\uff0c\u7a97\u53e3\u5185\u7684\u6570\u5b57\u5c31\u662f\u6700\u5927\u503c\n        # 21. \u7a97\u53e3\u6ed1\u52a8\u4e00\u6b21\uff0c\u7a97\u53e3\u5185\u7684\u6570\u5b57\u5c31\u662f\u6700\u5927\u503c\n        # 22. \u7a97\u53e3\u6ed1\u52a8\u4e00\u6b21\uff0c\u7a97\u53e3\u5185\u7684\u6570\u5b57\u5c31\u662f\u6700\u5927\u503c\n        # 23. \u7a97\u53e3\u6ed1\u52a8\u4e00\u6b21\uff0c\u7a97\u53e3\u5185\u7684\u6570\u5b57\u5c31\u662f\u6700\u5927\u503c\n        # 24. \u7a97\u53e3\u6ed1\u52a8\u4e00\u6b21\uff0c\u7a97\u53e3\u5185\u7684\u6570\u5b57\u5c31\u662f\u6700\u5927\u503c\n        # 25. \u7a97\u53e3\u6ed1\u52a8\u4e00\u6b21\uff0c\u7a97\u53e3\u5185\u7684\u6570\u5b57\u5c31\u662f\u6700\u5927\u503c\n        # 26. \u7a97\u53e3\u6ed1\u52a8\u4e00\u6b21\uff0c\u7a97\u53e3\u5185\u7684\u6570\u5b57\u5c31\u662f\u6700\u5927\u503c\n        # 27. \u7a97\u53e3\u6ed1\u52a8\u4e00\u6b21\uff0c\u7a97\u53e3\u5185\u7684\u6570\u5b57\u5c31\u662f\u6700\u5927\u503c\n        # 28. \u7a97\u53e3\u6ed1\u52a8\u4e00\u6b21\uff0c\u7a97\u53e3\u5185\u7684\u6570\u5b57\u5c31\u662f\u6700\u5927\u503c\n        # 29. \u7a97\u53e3\u6ed1\u52a8\u4e00\u6b21\uff0c\u7a97\u53e3\u5185\u7684\u6570\u5b57\u5c31\u662f\u6700\u5927\u503c\n        # 30. \u7a97\u53e3\u6ed1\u52a8\u4e00\u6b21\uff0c\u7a97\u53e3\u5185\u7684\u6570\u5b57\u5c31\u662f\u6700\u5927\u503c\n        # 31. \u7a97\u53e3\u6ed1\u52a8\u4e00\u6b21\uff0c\u7a97\u53e3\u5185\u7684\u6570\u5b57\u5c31\u662f\u6700\u5927\u503c\n        # 32. \u7a97\u53e3\u6ed1\u52a8\u4e00\u6b21\uff0c\u7a97\u53e3\u5185\u7684\u6570\u5b57\u5c31\u662f\u6700\u5927\u503c\n        # 33. \u7a97\u53e3\u6ed1\u52a8\u4e00"}, {"task_id": "sliding-window-maximum", "completion": "class Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u6ed1\u52a8\u7a97\u53e3\n        # 2. \u7a97\u53e3\u5927\u5c0f\u4e3ak\uff0c\u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u5de6\u79fb\u52a8\u4e00\u4f4d\n        # 3. \u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u5de6\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u5de6\u79fb\u52a8\u4e00\u4f4d\n        # 4. \u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u5de6\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u5de6\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u5de6\u79fb\u52a8\u4e00\u4f4d\n        # 5. \u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u5de6\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u5de6\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u5de6\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u5de6\u79fb\u52a8\u4e00\u4f4d\n        # 6. \u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u5de6\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u5de6\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u5de6\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u5de6\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u5de6\u79fb\u52a8\u4e00\u4f4d\n        # 7. \u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u5de6\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u5de6\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u5de6\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u5de6\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u5de6\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u5de6\u79fb\u52a8\u4e00\u4f4d\n        # 8. \u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u5de6\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u5de6\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u5de6\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u5de6\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u5de6\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u5de6\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u5de6\u79fb\u52a8\u4e00\u4f4d\n        # 9. \u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u5de6\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u5de6\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u5de6\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u5de6\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u5de6\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u5de6\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u5de6\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u5de6\u79fb\u52a8\u4e00\u4f4d\n        # 10. \u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u5de6\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u5de6\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u5de6\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u5de6\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u5de6\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u5de6\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5411\u5de6\u79fb\u52a8\u4e00\u4f4d"}, {"task_id": "sliding-window-maximum", "completion": "class Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u6ed1\u52a8\u7a97\u53e3\n        # 2. \u7a97\u53e3\u5927\u5c0f\u4e3ak\uff0c\u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\n        # 3. \u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5927\u5c0f\u4e3ak\uff0c\u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\n        # 4. \u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5927\u5c0f\u4e3ak\uff0c\u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\n        # 5. \u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5927\u5c0f\u4e3ak\uff0c\u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\n        # 6. \u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5927\u5c0f\u4e3ak\uff0c\u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\n        # 7. \u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5927\u5c0f\u4e3ak\uff0c\u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\n        # 8. \u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5927\u5c0f\u4e3ak\uff0c\u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\n        # 9. \u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5927\u5c0f\u4e3ak\uff0c\u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\n        # 10. \u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5927\u5c0f\u4e3ak\uff0c\u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\n        # 11. \u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5927\u5c0f\u4e3ak\uff0c\u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\n        # 12. \u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5927\u5c0f\u4e3ak\uff0c\u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\n        # 13. \u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5927\u5c0f\u4e3ak\uff0c\u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\n        # 14. \u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5927\u5c0f\u4e3ak\uff0c\u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\n        # 15. \u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5927\u5c0f\u4e3ak\uff0c\u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\n        # 16. \u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5927\u5c0f\u4e3ak\uff0c\u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\n        # 17. \u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5927\u5c0f\u4e3ak\uff0c\u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\n        # 18. \u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5927\u5c0f\u4e3ak\uff0c\u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\n        # 19. \u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5927\u5c0f\u4e3ak\uff0c\u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\n        # 20. \u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5927\u5c0f\u4e3ak\uff0c\u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\n        # 21. \u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5927\u5c0f\u4e3ak\uff0c\u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\n        # 22. \u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5927\u5c0f\u4e3ak\uff0c\u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\n        # 23. \u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5927\u5c0f\u4e3ak\uff0c\u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\n        # 24. \u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5927\u5c0f\u4e3ak\uff0c\u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\n        # 25. \u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5927\u5c0f\u4e3ak\uff0c\u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\n        # 26. \u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5927\u5c0f\u4e3ak\uff0c\u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\n        # 27. \u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5927\u5c0f\u4e3ak\uff0c\u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\n        # 28. \u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a97\u53e3\u5927\u5c0f\u4e3ak\uff0c\u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\n        #"}, {"task_id": "sliding-window-maximum", "completion": "class Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # Maintain a deque of size k\n        # Add the first k elements to the deque\n        # Add the next element to the deque\n        # Remove the first element from the deque\n        # Add the max element to the result\n        # Repeat the above steps until the end of the array\n        \n        # Time complexity: O(n)\n        # Space complexity: O(k)\n        \n        # Create a deque\n        deque = collections.deque()\n        \n        # Add the first k elements to the deque\n        for i in range(k):\n            deque.append(nums[i])\n        \n        # Add the next element to the deque\n        for i in range(k, len(nums)):\n            # Remove the first element from the deque\n            deque.popleft()\n            # Add the next element to the deque\n            deque.append(nums[i])\n            # Add the max element to the result\n            result.append(max(deque))\n        \n        # Return the result\n        return result"}, {"task_id": "sliding-window-maximum", "completion": "class Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u6ed1\u52a8\u7a97\u53e3\u7684\u5de6\u53f3\u6307\u9488\n        # 2. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\n        # 3. \u7a97\u53e3\u5185\u7684\u6700\u5c0f\u503c\n        # 4. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\n        # 5. \u7a97\u53e3\u5185\u7684\u6700\u5c0f\u503c\u7684\u4e0b\u6807\n        # 6. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\n        # 7. \u7a97\u53e3\u5185\u7684\u6700\u5c0f\u503c\u7684\u4e0b\u6807\u7684\u6700\u5c0f\u503c\n        # 8. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5c0f\u503c\n        # 9. \u7a97\u53e3\u5185\u7684\u6700\u5c0f\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\n        # 10. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5c0f\u503c\n        # 11. \u7a97\u53e3\u5185\u7684\u6700\u5c0f\u503c\u7684\u4e0b\u6807\u7684\u6700\u5c0f\u503c\n        # 12. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5c0f\u503c\n        # 13. \u7a97\u53e3\u5185\u7684\u6700\u5c0f\u503c\u7684\u4e0b\u6807\u7684\u6700\u5c0f\u503c\n        # 14. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5c0f\u503c\n        # 15. \u7a97\u53e3\u5185\u7684\u6700\u5c0f\u503c\u7684\u4e0b\u6807\u7684\u6700\u5c0f\u503c\n        # 16. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5c0f\u503c\n        # 17. \u7a97\u53e3\u5185\u7684\u6700\u5c0f\u503c\u7684\u4e0b\u6807\u7684\u6700\u5c0f\u503c\n        # 18. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5c0f\u503c\n        # 19. \u7a97\u53e3\u5185\u7684\u6700\u5c0f\u503c\u7684\u4e0b\u6807\u7684\u6700\u5c0f\u503c\n        # 20. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5c0f\u503c\n        # 21. \u7a97\u53e3\u5185\u7684\u6700\u5c0f\u503c\u7684\u4e0b\u6807\u7684\u6700\u5c0f\u503c\n        # 22. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5c0f\u503c\n        # 23. \u7a97\u53e3\u5185\u7684\u6700\u5c0f\u503c\u7684\u4e0b\u6807\u7684\u6700\u5c0f\u503c\n        # 24. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5c0f\u503c\n        # 25. \u7a97\u53e3\u5185\u7684\u6700\u5c0f\u503c\u7684\u4e0b\u6807\u7684\u6700\u5c0f\u503c\n        # 26. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5c0f\u503c\n        # 27. \u7a97\u53e3\u5185\u7684\u6700\u5c0f\u503c\u7684\u4e0b\u6807\u7684\u6700\u5c0f\u503c\n        # 28. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5c0f\u503c\n        # 29. \u7a97\u53e3\u5185\u7684\u6700\u5c0f\u503c\u7684\u4e0b\u6807\u7684\u6700\u5c0f\u503c\n        # 30. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5c0f\u503c\n        # 31. \u7a97\u53e3\u5185\u7684\u6700\u5c0f\u503c\u7684\u4e0b\u6807\u7684\u6700\u5c0f\u503c\n        # 32. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5c0f\u503c\n        # 33. \u7a97\u53e3\u5185\u7684\u6700\u5c0f\u503c\u7684\u4e0b\u6807\u7684\u6700\u5c0f\u503c\n        # 34. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5c0f\u503c\n        # 35. \u7a97\u53e3\u5185\u7684\u6700\u5c0f\u503c\u7684\u4e0b\u6807\u7684\u6700\u5c0f\u503c\n        # 36. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5c0f\u503c\n        # 37. \u7a97\u53e3\u5185\u7684\u6700\u5c0f\u503c\u7684\u4e0b\u6807\u7684\u6700\u5c0f\u503c\n        # 38. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5c0f\u503c\n        # 39. \u7a97\u53e3\u5185\u7684\u6700\u5c0f\u503c\u7684\u4e0b\u6807\u7684\u6700\u5c0f\u503c\n        # 40. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5c0f\u503c\n        # 41. \u7a97\u53e3\u5185\u7684\u6700\u5c0f\u503c\u7684\u4e0b\u6807\u7684\u6700\u5c0f\u503c\n        # 42. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5c0f\u503c\n        # 43. \u7a97\u53e3\u5185\u7684\u6700\u5c0f\u503c\u7684\u4e0b\u6807\u7684\u6700\u5c0f\u503c\n        # 44. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5c0f\u503c"}], "median-of-two-sorted-arrays": [{"task_id": "median-of-two-sorted-arrays", "completion": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        \n        # 1. merge the two arrays\n        # 2. find the median\n        \n        # merge the two arrays\n        merged_array = nums1 + nums2\n        \n        # sort the merged array\n        merged_array.sort()\n        \n        # find the median\n        if len(merged_array) % 2 == 0:\n            return (merged_array[len(merged_array)//2] + merged_array[len(merged_array)//2 - 1]) / 2\n        else:\n            return merged_array[len(merged_array)//2]"}, {"task_id": "median-of-two-sorted-arrays", "completion": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        \n        # 1. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 2. \u5982\u679c\u662f\u5947\u6570\uff0c\u8fd4\u56de\u4e2d\u4f4d\u6570\n        # 3. \u5982\u679c\u662f\u5076\u6570\uff0c\u8fd4\u56de\u4e2d\u4f4d\u6570\u7684\u5e73\u5747\u503c\n        \n        # 1. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 1.1 \u5982\u679c\u4e24\u4e2a\u6570\u7ec4\u957f\u5ea6\u76f8\u7b49\uff0c\u76f4\u63a5\u8fd4\u56de\n        if len(nums1) == len(nums2):\n            return (nums1[len(nums1)//2] + nums2[len(nums2)//2])/2\n        \n        # 1.2 \u5982\u679c\u4e24\u4e2a\u6570\u7ec4\u957f\u5ea6\u4e0d\u7b49\uff0c\u5219\u957f\u7684\u6570\u7ec4\u7684\u957f\u5ea6\u5927\u4e8e\u77ed\u7684\u6570\u7ec4\uff0c\u5219\u957f\u7684\u6570\u7ec4\u4e3aA\uff0c\u77ed\u7684\u6570\u7ec4\u4e3aB\n        # 1.2.1 \u5982\u679cA\u7684\u957f\u5ea6\u5927\u4e8eB\u7684\u957f\u5ea6\uff0c\u5219A\u7684\u957f\u5ea6\u51cf\u53bbB\u7684\u957f\u5ea6\u4e3aA\u7684\u957f\u5ea6\u51cf\u53bbB\u7684\u957f\u5ea6\n        # 1.2.2 \u5982\u679cA\u7684\u957f\u5ea6\u5c0f\u4e8eB\u7684\u957f\u5ea6\uff0c\u5219B\u7684\u957f\u5ea6\u51cf\u53bbA\u7684\u957f\u5ea6\u4e3aB\u7684\u957f\u5ea6\u51cf\u53bbA\u7684\u957f\u5ea6\n        # 1.2.3 \u5982\u679cA\u7684\u957f\u5ea6\u7b49\u4e8eB\u7684\u957f\u5ea6\uff0c\u5219A\u7684\u957f\u5ea6\u51cf\u53bbB\u7684\u957f\u5ea6\u4e3aA\u7684\u957f\u5ea6\u51cf\u53bbB\u7684\u957f\u5ea6\n        if len(nums1) > len(nums2):\n            A = nums1\n            B = nums2\n            A_len = len(nums1)\n            B_len = len(nums2)\n        else:\n            A = nums2\n            B = nums1\n            A_len = len(nums2)\n            B_len = len(nums1)\n            \n        # 1.3 \u5982\u679cA\u7684\u957f\u5ea6\u5927\u4e8eB\u7684\u957f\u5ea6\uff0c\u5219A\u7684\u957f\u5ea6\u51cf\u53bbB\u7684\u957f\u5ea6\u4e3aA\u7684\u957f\u5ea6\u51cf\u53bbB\u7684\u957f\u5ea6\n        # 1.3.1 \u5982\u679cA\u7684\u957f\u5ea6\u5927\u4e8eB\u7684\u957f\u5ea6\uff0c\u5219A\u7684\u957f\u5ea6\u51cf\u53bbB\u7684\u957f\u5ea6\u4e3aA\u7684\u957f\u5ea6\u51cf\u53bbB\u7684\u957f\u5ea6\n        # 1.3.2 \u5982\u679cA\u7684\u957f\u5ea6\u5c0f\u4e8eB\u7684\u957f\u5ea6\uff0c\u5219B\u7684\u957f\u5ea6\u51cf\u53bbA\u7684\u957f\u5ea6\u4e3aB\u7684\u957f\u5ea6\u51cf\u53bbA\u7684\u957f\u5ea6\n        # 1.3.3 \u5982\u679cA\u7684\u957f\u5ea6\u7b49\u4e8eB\u7684\u957f\u5ea6\uff0c\u5219A\u7684\u957f\u5ea6\u51cf\u53bbB\u7684\u957f\u5ea6\u4e3aA\u7684\u957f\u5ea6\u51cf\u53bbB\u7684\u957f\u5ea6\n        if A_len > B_len:\n            A_len = A_len - B_len\n        else:\n            A_len = B_len - A_len\n        \n        # 2. \u5982\u679c\u662f\u5947\u6570\uff0c\u8fd4\u56de\u4e2d\u4f4d\u6570\n        # 2.1 \u5982\u679cA\u7684\u957f\u5ea6\u5927\u4e8eB\u7684\u957f\u5ea6\uff0c\u5219A\u7684\u957f\u5ea6\u51cf\u53bbB\u7684\u957f\u5ea6\u4e3aA\u7684\u957f\u5ea6\u51cf\u53bbB\u7684\u957f\u5ea6\n        # 2.2 \u5982\u679cA\u7684\u957f\u5ea6\u5c0f\u4e8eB\u7684\u957f\u5ea6\uff0c\u5219B\u7684\u957f\u5ea6\u51cf\u53bbA\u7684\u957f\u5ea6\u4e3aB\u7684\u957f\u5ea6\u51cf\u53bbA\u7684\u957f\u5ea6\n        # 2.3 \u5982\u679cA\u7684\u957f\u5ea6\u7b49\u4e8eB\u7684\u957f\u5ea6\uff0c\u5219A\u7684\u957f\u5ea6\u51cf\u53bbB\u7684\u957f\u5ea6\u4e3aA\u7684\u957f\u5ea6\u51cf\u53bbB\u7684\u957f\u5ea6\n        if A_len % 2 == 1:\n            return A[A_len//2]\n        \n        # 3. \u5982\u679c\u662f\u5076\u6570\uff0c\u8fd4\u56de\u4e2d\u4f4d\u6570\u7684\u5e73\u5747\u503c\n        # 3.1 \u5982\u679cA\u7684\u957f\u5ea6\u5927\u4e8eB\u7684\u957f\u5ea6\uff0c\u5219A\u7684\u957f\u5ea6\u51cf\u53bbB\u7684\u957f\u5ea6\u4e3aA\u7684\u957f\u5ea6\u51cf\u53bbB\u7684\u957f\u5ea6\n        # 3.2 \u5982\u679cA\u7684\u957f\u5ea6\u5c0f\u4e8eB\u7684\u957f\u5ea6\uff0c\u5219B\u7684\u957f\u5ea6\u51cf\u53bbA\u7684\u957f\u5ea6\u4e3aB\u7684\u957f\u5ea6\u51cf\u53bbA\u7684\u957f\u5ea6\n        # 3.3 \u5982\u679cA\u7684\u957f\u5ea6\u7b49\u4e8eB\u7684\u957f\u5ea6\uff0c\u5219A\u7684\u957f\u5ea6\ufffd\ufffd"}, {"task_id": "median-of-two-sorted-arrays", "completion": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        \n        # 1. merge the two arrays\n        # 2. find the median\n        # 3. return the median\n        \n        # 1. merge the two arrays\n        merged = nums1 + nums2\n        merged.sort()\n        \n        # 2. find the median\n        if len(merged) % 2 == 0:\n            return (merged[len(merged)//2] + merged[len(merged)//2 - 1]) / 2\n        else:\n            return merged[len(merged)//2]\n        \n        # 3. return the median"}, {"task_id": "median-of-two-sorted-arrays", "completion": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        \n        # 1. \u62fc\u63a5\u4e24\u4e2a\u6570\u7ec4\n        nums = nums1 + nums2\n        \n        # 2. \u6392\u5e8f\n        nums.sort()\n        \n        # 3. \u83b7\u53d6\u4e2d\u4f4d\u6570\n        if len(nums) % 2 == 0:\n            return (nums[len(nums) // 2] + nums[len(nums) // 2 - 1]) / 2\n        else:\n            return nums[len(nums) // 2]"}, {"task_id": "median-of-two-sorted-arrays", "completion": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        \n        # 1. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 2. \u5982\u679c\u662f\u5947\u6570\uff0c\u8fd4\u56de\u4e2d\u4f4d\u6570\n        # 3. \u5982\u679c\u662f\u5076\u6570\uff0c\u8fd4\u56de\u4e2d\u4f4d\u6570\u7684\u5e73\u5747\u503c\n        \n        # 1. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 1.1 \u5982\u679c\u4e24\u4e2a\u6570\u7ec4\u7684\u957f\u5ea6\u4e4b\u548c\u4e3a\u5947\u6570\uff0c\u90a3\u4e48\u4e2d\u4f4d\u6570\u5c31\u662f\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u95f4\u503c\n        # 1.2 \u5982\u679c\u4e24\u4e2a\u6570\u7ec4\u7684\u957f\u5ea6\u4e4b\u548c\u4e3a\u5076\u6570\uff0c\u90a3\u4e48\u4e2d\u4f4d\u6570\u5c31\u662f\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u95f4\u503c\u548c\u4e2d\u95f4\u503c\u7684\u4e0b\u4e00\u4e2a\u503c\u7684\u5e73\u5747\u503c\n        # 1.3 \u5982\u679c\u4e24\u4e2a\u6570\u7ec4\u7684\u957f\u5ea6\u4e4b\u548c\u4e3a0\uff0c\u90a3\u4e48\u4e2d\u4f4d\u6570\u5c31\u662f\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u95f4\u503c\n        \n        # 2. \u5982\u679c\u662f\u5947\u6570\uff0c\u8fd4\u56de\u4e2d\u4f4d\u6570\n        # 2.1 \u5982\u679c\u4e24\u4e2a\u6570\u7ec4\u7684\u957f\u5ea6\u4e4b\u548c\u4e3a\u5947\u6570\uff0c\u90a3\u4e48\u4e2d\u4f4d\u6570\u5c31\u662f\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u95f4\u503c\n        # 2.2 \u5982\u679c\u4e24\u4e2a\u6570\u7ec4\u7684\u957f\u5ea6\u4e4b\u548c\u4e3a\u5076\u6570\uff0c\u90a3\u4e48\u4e2d\u4f4d\u6570\u5c31\u662f\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u95f4\u503c\u548c\u4e2d\u95f4\u503c\u7684\u4e0b\u4e00\u4e2a\u503c\u7684\u5e73\u5747\u503c\n        # 2.3 \u5982\u679c\u4e24\u4e2a\u6570\u7ec4\u7684\u957f\u5ea6\u4e4b\u548c\u4e3a0\uff0c\u90a3\u4e48\u4e2d\u4f4d\u6570\u5c31\u662f\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u95f4\u503c\n        \n        # 3. \u5982\u679c\u662f\u5076\u6570\uff0c\u8fd4\u56de\u4e2d\u4f4d\u6570\u7684\u5e73\u5747\u503c\n        # 3.1 \u5982\u679c\u4e24\u4e2a\u6570\u7ec4\u7684\u957f\u5ea6\u4e4b\u548c\u4e3a\u5947\u6570\uff0c\u90a3\u4e48\u4e2d\u4f4d\u6570\u5c31\u662f\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u95f4\u503c\n        # 3.2 \u5982\u679c\u4e24\u4e2a\u6570\u7ec4\u7684\u957f\u5ea6\u4e4b\u548c\u4e3a\u5076\u6570\uff0c\u90a3\u4e48\u4e2d\u4f4d\u6570\u5c31\u662f\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u95f4\u503c\u548c\u4e2d\u95f4\u503c\u7684\u4e0b\u4e00\u4e2a\u503c\u7684\u5e73\u5747\u503c\n        # 3.3 \u5982\u679c\u4e24\u4e2a\u6570\u7ec4\u7684\u957f\u5ea6\u4e4b\u548c\u4e3a0\uff0c\u90a3\u4e48\u4e2d\u4f4d\u6570\u5c31\u662f\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u95f4\u503c\n        \n        # 1. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 1.1 \u5982\u679c\u4e24\u4e2a\u6570\u7ec4\u7684\u957f\u5ea6\u4e4b\u548c\u4e3a\u5947\u6570\uff0c\u90a3\u4e48\u4e2d\u4f4d\u6570\u5c31\u662f\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u95f4\u503c\n        # 1.2 \u5982\u679c\u4e24\u4e2a\u6570\u7ec4\u7684\u957f\u5ea6\u4e4b\u548c\u4e3a\u5076\u6570\uff0c\u90a3\u4e48\u4e2d\u4f4d\u6570\u5c31\u662f\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u95f4\u503c\u548c\u4e2d\u95f4\u503c\u7684\u4e0b\u4e00\u4e2a\u503c\u7684\u5e73\u5747\u503c\n        # 1.3 \u5982\u679c\u4e24\u4e2a\u6570\u7ec4\u7684\u957f\u5ea6\u4e4b\u548c\u4e3a0\uff0c\u90a3\u4e48\u4e2d\u4f4d\u6570\u5c31\u662f\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u95f4\u503c\n        \n        # 2. \u5982\u679c\u662f\u5947\u6570\uff0c\u8fd4\u56de\u4e2d\u4f4d\u6570\n        # 2.1 \u5982\u679c\u4e24\u4e2a\u6570\u7ec4\u7684\u957f\u5ea6\u4e4b\u548c\u4e3a\u5947\u6570\uff0c\u90a3\u4e48\u4e2d\u4f4d\u6570\u5c31\u662f\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u95f4\u503c\n        # 2.2 \u5982\u679c\u4e24\u4e2a\u6570\u7ec4\u7684\u957f\u5ea6\u4e4b\u548c\u4e3a\u5076\u6570\uff0c\u90a3\u4e48\u4e2d\u4f4d\u6570\u5c31\u662f\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u95f4\u503c\u548c\u4e2d\u95f4\u503c\u7684\u4e0b\u4e00\u4e2a\u503c\u7684\u5e73\u5747\u503c\n        # 2.3 \u5982\u679c\u4e24\u4e2a\u6570\u7ec4\u7684\u957f\u5ea6\u4e4b\u548c\u4e3a0\uff0c\u90a3\u4e48\u4e2d\u4f4d\u6570\u5c31\u662f\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u95f4\u503c\n        \n        # 3. \u5982\u679c\u662f\u5076\u6570\uff0c\u8fd4\u56de\u4e2d\u4f4d\u6570\u7684\u5e73\u5747\u503c\n        # 3.1 \u5982\u679c\u4e24\u4e2a\u6570\u7ec4\u7684\u957f\u5ea6\u4e4b\u548c\u4e3a\u5947\u6570\uff0c\u90a3\u4e48\u4e2d\u4f4d\u6570\u5c31\u662f\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u95f4\u503c\n        # 3.2 \u5982\u679c\u4e24\u4e2a\u6570\u7ec4\u7684\u957f\u5ea6\u4e4b\u548c\u4e3a\u5076\u6570\uff0c\u90a3\u4e48\u4e2d\u4f4d\u6570\u5c31\u662f\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u95f4\u503c\u548c\u4e2d\u95f4\u503c\u7684\u4e0b\u4e00\u4e2a\u503c\u7684\u5e73\u5747\u503c\n        # 3.3 \u5982\u679c\u4e24\u4e2a\u6570\u7ec4\u7684\u957f\u5ea6\u4e4b\u548c\u4e3a0\uff0c\u90a3\u4e48\u4e2d\u4f4d\u6570\u5c31\u662f\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u95f4\u503c\n        \n        # 1. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 1.1 \u5982\u679c\u4e24\u4e2a\u6570\u7ec4\u7684\u957f\u5ea6\u4e4b\u548c\u4e3a\u5947\u6570\uff0c"}], "find-minimum-in-rotated-sorted-array": [{"task_id": "find-minimum-in-rotated-sorted-array", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5c0f\u503c\n        # 2. \u627e\u5230\u6700\u5927\u503c\n        # 3. \u627e\u5230\u6700\u5c0f\u503c\n        # 4. \u627e\u5230\u6700\u5927\u503c\n        # 5. \u627e\u5230\u6700\u5c0f\u503c\n        # 6. \u627e\u5230\u6700\u5927\u503c\n        # 7. \u627e\u5230\u6700\u5c0f\u503c\n        # 8. \u627e\u5230\u6700\u5927\u503c\n        # 9. \u627e\u5230\u6700\u5c0f\u503c\n        # 10. \u627e\u5230\u6700\u5927\u503c\n        # 11. \u627e\u5230\u6700\u5c0f\u503c\n        # 12. \u627e\u5230\u6700\u5927\u503c\n        # 13. \u627e\u5230\u6700\u5c0f\u503c\n        # 14. \u627e\u5230\u6700\u5927\u503c\n        # 15. \u627e\u5230\u6700\u5c0f\u503c\n        # 16. \u627e\u5230\u6700\u5927\u503c\n        # 17. \u627e\u5230\u6700\u5c0f\u503c\n        # 18. \u627e\u5230\u6700\u5927\u503c\n        # 19. \u627e\u5230\u6700\u5c0f\u503c\n        # 20. \u627e\u5230\u6700\u5927\u503c\n        # 21. \u627e\u5230\u6700\u5c0f\u503c\n        # 22. \u627e\u5230\u6700\u5927\u503c\n        # 23. \u627e\u5230\u6700\u5c0f\u503c\n        # 24. \u627e\u5230\u6700\u5927\u503c\n        # 25. \u627e\u5230\u6700\u5c0f\u503c\n        # 26. \u627e\u5230\u6700\u5927\u503c\n        # 27. \u627e\u5230\u6700\u5c0f\u503c\n        # 28. \u627e\u5230\u6700\u5927\u503c\n        # 29. \u627e\u5230\u6700\u5c0f\u503c\n        # 30. \u627e\u5230\u6700\u5927\u503c\n        # 31. \u627e\u5230\u6700\u5c0f\u503c\n        # 32. \u627e\u5230\u6700\u5927\u503c\n        # 33. \u627e\u5230\u6700\u5c0f\u503c\n        # 34. \u627e\u5230\u6700\u5927\u503c\n        # 35. \u627e\u5230\u6700\u5c0f\u503c\n        # 36. \u627e\u5230\u6700\u5927\u503c\n        # 37. \u627e\u5230\u6700\u5c0f\u503c\n        # 38. \u627e\u5230\u6700\u5927\u503c\n        # 39. \u627e\u5230\u6700\u5c0f\u503c\n        # 40. \u627e\u5230\u6700\u5927\u503c\n        # 41. \u627e\u5230\u6700\u5c0f\u503c\n        # 42. \u627e\u5230\u6700\u5927\u503c\n        # 43. \u627e\u5230\u6700\u5c0f\u503c\n        # 44. \u627e\u5230\u6700\u5927\u503c\n        # 45. \u627e\u5230\u6700\u5c0f\u503c\n        # 46. \u627e\u5230\u6700\u5927\u503c\n        # 47. \u627e\u5230\u6700\u5c0f\u503c\n        # 48. \u627e\u5230\u6700\u5927\u503c\n        # 49. \u627e\u5230\u6700\u5c0f\u503c\n        # 50. \u627e\u5230\u6700\u5927\u503c\n        # 51. \u627e\u5230\u6700\u5c0f\u503c\n        # 52. \u627e\u5230\u6700\u5927\u503c\n        # 53. \u627e\u5230\u6700\u5c0f\u503c\n        # 54. \u627e\u5230\u6700\u5927\u503c\n        # 55. \u627e\u5230\u6700\u5c0f\u503c\n        # 56. \u627e\u5230\u6700\u5927\u503c\n        # 57. \u627e\u5230\u6700\u5c0f\u503c\n        # 58. \u627e\u5230\u6700\u5927\u503c\n        # 59. \u627e\u5230\u6700\u5c0f\u503c\n        # 60. \u627e\u5230\u6700\u5927\u503c\n        # 61. \u627e\u5230\u6700\u5c0f\u503c\n        # 62. \u627e\u5230\u6700\u5927\u503c\n        # 63. \u627e\u5230\u6700\u5c0f\u503c\n        # 64. \u627e\u5230\u6700\u5927\u503c\n        # 65. \u627e\u5230\u6700\u5c0f\u503c\n        # 66. \u627e\u5230\u6700\u5927\u503c\n        # 67. \u627e\u5230\u6700\u5c0f\u503c\n        # 68. \u627e\u5230\u6700\u5927\u503c\n        # 69. \u627e\u5230\u6700\u5c0f"}, {"task_id": "find-minimum-in-rotated-sorted-array", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5c0f\u503c\n        # 2. \u627e\u5230\u6700\u5927\u503c\n        # 3. \u627e\u5230\u6700\u5c0f\u503c\n        # 4. \u627e\u5230\u6700\u5927\u503c\n        # 5. \u627e\u5230\u6700\u5c0f\u503c\n        # 6. \u627e\u5230\u6700\u5927\u503c\n        # 7. \u627e\u5230\u6700\u5c0f\u503c\n        # 8. \u627e\u5230\u6700\u5927\u503c\n        # 9. \u627e\u5230\u6700\u5c0f\u503c\n        # 10. \u627e\u5230\u6700\u5927\u503c\n        # 11. \u627e\u5230\u6700\u5c0f\u503c\n        # 12. \u627e\u5230\u6700\u5927\u503c\n        # 13. \u627e\u5230\u6700\u5c0f\u503c\n        # 14. \u627e\u5230\u6700\u5927\u503c\n        # 15. \u627e\u5230\u6700\u5c0f\u503c\n        # 16. \u627e\u5230\u6700\u5927\u503c\n        # 17. \u627e\u5230\u6700\u5c0f\u503c\n        # 18. \u627e\u5230\u6700\u5927\u503c\n        # 19. \u627e\u5230\u6700\u5c0f\u503c\n        # 20. \u627e\u5230\u6700\u5927\u503c\n        # 21. \u627e\u5230\u6700\u5c0f\u503c\n        # 22. \u627e\u5230\u6700\u5927\u503c\n        # 23. \u627e\u5230\u6700\u5c0f\u503c\n        # 24. \u627e\u5230\u6700\u5927\u503c\n        # 25. \u627e\u5230\u6700\u5c0f\u503c\n        # 26. \u627e\u5230\u6700\u5927\u503c\n        # 27. \u627e\u5230\u6700\u5c0f\u503c\n        # 28. \u627e\u5230\u6700\u5927\u503c\n        # 29. \u627e\u5230\u6700\u5c0f\u503c\n        # 30. \u627e\u5230\u6700\u5927\u503c\n        # 31. \u627e\u5230\u6700\u5c0f\u503c\n        # 32. \u627e\u5230\u6700\u5927\u503c\n        # 33. \u627e\u5230\u6700\u5c0f\u503c\n        # 34. \u627e\u5230\u6700\u5927\u503c\n        # 35. \u627e\u5230\u6700\u5c0f\u503c\n        # 36. \u627e\u5230\u6700\u5927\u503c\n        # 37. \u627e\u5230\u6700\u5c0f\u503c\n        # 38. \u627e\u5230\u6700\u5927\u503c\n        # 39. \u627e\u5230\u6700\u5c0f\u503c\n        # 40. \u627e\u5230\u6700\u5927\u503c\n        # 41. \u627e\u5230\u6700\u5c0f\u503c\n        # 42. \u627e\u5230\u6700\u5927\u503c\n        # 43. \u627e\u5230\u6700\u5c0f\u503c\n        # 44. \u627e\u5230\u6700\u5927\u503c\n        # 45. \u627e\u5230\u6700\u5c0f\u503c\n        # 46. \u627e\u5230\u6700\u5927\u503c\n        # 47. \u627e\u5230\u6700\u5c0f\u503c\n        # 48. \u627e\u5230\u6700\u5927\u503c\n        # 49. \u627e\u5230\u6700\u5c0f\u503c\n        # 50. \u627e\u5230\u6700\u5927\u503c\n        # 51. \u627e\u5230\u6700\u5c0f\u503c\n        # 52. \u627e\u5230\u6700\u5927\u503c\n        # 53. \u627e\u5230\u6700\u5c0f\u503c\n        # 54. \u627e\u5230\u6700\u5927\u503c\n        # 55. \u627e\u5230\u6700\u5c0f\u503c\n        # 56. \u627e\u5230\u6700\u5927\u503c\n        # 57. \u627e\u5230\u6700\u5c0f\u503c\n        # 58. \u627e\u5230\u6700\u5927\u503c\n        # 59. \u627e\u5230\u6700\u5c0f\u503c\n        # 60. \u627e\u5230\u6700\u5927\u503c\n        # 61. \u627e\u5230\u6700\u5c0f\u503c\n        # 62. \u627e\u5230\u6700\u5927\u503c\n        # 63. \u627e\u5230\u6700\u5c0f\u503c\n        # 64. \u627e\u5230\u6700\u5927\u503c\n        # 65. \u627e\u5230\u6700\u5c0f\u503c\n        # 66. \u627e\u5230\u6700\u5927\u503c\n        # 67. \u627e\u5230\u6700\u5c0f\u503c\n        # 68. \u627e\u5230\u6700\u5927\u503c\n        # 69. \u627e\u5230\u6700\u5c0f"}, {"task_id": "find-minimum-in-rotated-sorted-array", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5c0f\u503c\n        # 2. \u627e\u5230\u6700\u5927\u503c\n        # 3. \u627e\u5230\u6700\u5c0f\u503c\n        # 4. \u627e\u5230\u6700\u5927\u503c\n        # 5. \u627e\u5230\u6700\u5c0f\u503c\n        # 6. \u627e\u5230\u6700\u5927\u503c\n        # 7. \u627e\u5230\u6700\u5c0f\u503c\n        # 8. \u627e\u5230\u6700\u5927\u503c\n        # 9. \u627e\u5230\u6700\u5c0f\u503c\n        # 10. \u627e\u5230\u6700\u5927\u503c\n        # 11. \u627e\u5230\u6700\u5c0f\u503c\n        # 12. \u627e\u5230\u6700\u5927\u503c\n        # 13. \u627e\u5230\u6700\u5c0f\u503c\n        # 14. \u627e\u5230\u6700\u5927\u503c\n        # 15. \u627e\u5230\u6700\u5c0f\u503c\n        # 16. \u627e\u5230\u6700\u5927\u503c\n        # 17. \u627e\u5230\u6700\u5c0f\u503c\n        # 18. \u627e\u5230\u6700\u5927\u503c\n        # 19. \u627e\u5230\u6700\u5c0f\u503c\n        # 20. \u627e\u5230\u6700\u5927\u503c\n        # 21. \u627e\u5230\u6700\u5c0f\u503c\n        # 22. \u627e\u5230\u6700\u5927\u503c\n        # 23. \u627e\u5230\u6700\u5c0f\u503c\n        # 24. \u627e\u5230\u6700\u5927\u503c\n        # 25. \u627e\u5230\u6700\u5c0f\u503c\n        # 26. \u627e\u5230\u6700\u5927\u503c\n        # 27. \u627e\u5230\u6700\u5c0f\u503c\n        # 28. \u627e\u5230\u6700\u5927\u503c\n        # 29. \u627e\u5230\u6700\u5c0f\u503c\n        # 30. \u627e\u5230\u6700\u5927\u503c\n        # 31. \u627e\u5230\u6700\u5c0f\u503c\n        # 32. \u627e\u5230\u6700\u5927\u503c\n        # 33. \u627e\u5230\u6700\u5c0f\u503c\n        # 34. \u627e\u5230\u6700\u5927\u503c\n        # 35. \u627e\u5230\u6700\u5c0f\u503c\n        # 36. \u627e\u5230\u6700\u5927\u503c\n        # 37. \u627e\u5230\u6700\u5c0f\u503c\n        # 38. \u627e\u5230\u6700\u5927\u503c\n        # 39. \u627e\u5230\u6700\u5c0f\u503c\n        # 40. \u627e\u5230\u6700\u5927\u503c\n        # 41. \u627e\u5230\u6700\u5c0f\u503c\n        # 42. \u627e\u5230\u6700\u5927\u503c\n        # 43. \u627e\u5230\u6700\u5c0f\u503c\n        # 44. \u627e\u5230\u6700\u5927\u503c\n        # 45. \u627e\u5230\u6700\u5c0f\u503c\n        # 46. \u627e\u5230\u6700\u5927\u503c\n        # 47. \u627e\u5230\u6700\u5c0f\u503c\n        # 48. \u627e\u5230\u6700\u5927\u503c\n        # 49. \u627e\u5230\u6700\u5c0f\u503c\n        # 50. \u627e\u5230\u6700\u5927\u503c\n        # 51. \u627e\u5230\u6700\u5c0f\u503c\n        # 52. \u627e\u5230\u6700\u5927\u503c\n        # 53. \u627e\u5230\u6700\u5c0f\u503c\n        # 54. \u627e\u5230\u6700\u5927\u503c\n        # 55. \u627e\u5230\u6700\u5c0f\u503c\n        # 56. \u627e\u5230\u6700\u5927\u503c\n        # 57. \u627e\u5230\u6700\u5c0f\u503c\n        # 58. \u627e\u5230\u6700\u5927\u503c\n        # 59. \u627e\u5230\u6700\u5c0f\u503c\n        # 60. \u627e\u5230\u6700\u5927\u503c\n        # 61. \u627e\u5230\u6700\u5c0f\u503c\n        # 62. \u627e\u5230\u6700\u5927\u503c\n        # 63. \u627e\u5230\u6700\u5c0f\u503c\n        # 64. \u627e\u5230\u6700\u5927\u503c\n        # 65. \u627e\u5230\u6700\u5c0f\u503c\n        # 66. \u627e\u5230\u6700\u5927\u503c\n        # 67. \u627e\u5230\u6700\u5c0f\u503c\n        # 68. \u627e\u5230\u6700\u5927\u503c\n        # 69. \u627e\u5230\u6700\u5c0f"}, {"task_id": "find-minimum-in-rotated-sorted-array", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5c0f\u503c\n        # 2. \u627e\u5230\u6700\u5927\u503c\n        # 3. \u627e\u5230\u6700\u5c0f\u503c\n        # 4. \u627e\u5230\u6700\u5927\u503c\n        # 5. \u627e\u5230\u6700\u5c0f\u503c\n        # 6. \u627e\u5230\u6700\u5927\u503c\n        # 7. \u627e\u5230\u6700\u5c0f\u503c\n        # 8. \u627e\u5230\u6700\u5927\u503c\n        # 9. \u627e\u5230\u6700\u5c0f\u503c\n        # 10. \u627e\u5230\u6700\u5927\u503c\n        # 11. \u627e\u5230\u6700\u5c0f\u503c\n        # 12. \u627e\u5230\u6700\u5927\u503c\n        # 13. \u627e\u5230\u6700\u5c0f\u503c\n        # 14. \u627e\u5230\u6700\u5927\u503c\n        # 15. \u627e\u5230\u6700\u5c0f\u503c\n        # 16. \u627e\u5230\u6700\u5927\u503c\n        # 17. \u627e\u5230\u6700\u5c0f\u503c\n        # 18. \u627e\u5230\u6700\u5927\u503c\n        # 19. \u627e\u5230\u6700\u5c0f\u503c\n        # 20. \u627e\u5230\u6700\u5927\u503c\n        # 21. \u627e\u5230\u6700\u5c0f\u503c\n        # 22. \u627e\u5230\u6700\u5927\u503c\n        # 23. \u627e\u5230\u6700\u5c0f\u503c\n        # 24. \u627e\u5230\u6700\u5927\u503c\n        # 25. \u627e\u5230\u6700\u5c0f\u503c\n        # 26. \u627e\u5230\u6700\u5927\u503c\n        # 27. \u627e\u5230\u6700\u5c0f\u503c\n        # 28. \u627e\u5230\u6700\u5927\u503c\n        # 29. \u627e\u5230\u6700\u5c0f\u503c\n        # 30. \u627e\u5230\u6700\u5927\u503c\n        # 31. \u627e\u5230\u6700\u5c0f\u503c\n        # 32. \u627e\u5230\u6700\u5927\u503c\n        # 33. \u627e\u5230\u6700\u5c0f\u503c\n        # 34. \u627e\u5230\u6700\u5927\u503c\n        # 35. \u627e\u5230\u6700\u5c0f\u503c\n        # 36. \u627e\u5230\u6700\u5927\u503c\n        # 37. \u627e\u5230\u6700\u5c0f\u503c\n        # 38. \u627e\u5230\u6700\u5927\u503c\n        # 39. \u627e\u5230\u6700\u5c0f\u503c\n        # 40. \u627e\u5230\u6700\u5927\u503c\n        # 41. \u627e\u5230\u6700\u5c0f\u503c\n        # 42. \u627e\u5230\u6700\u5927\u503c\n        # 43. \u627e\u5230\u6700\u5c0f\u503c\n        # 44. \u627e\u5230\u6700\u5927\u503c\n        # 45. \u627e\u5230\u6700\u5c0f\u503c\n        # 46. \u627e\u5230\u6700\u5927\u503c\n        # 47. \u627e\u5230\u6700\u5c0f\u503c\n        # 48. \u627e\u5230\u6700\u5927\u503c\n        # 49. \u627e\u5230\u6700\u5c0f\u503c\n        # 50. \u627e\u5230\u6700\u5927\u503c\n        # 51. \u627e\u5230\u6700\u5c0f\u503c\n        # 52. \u627e\u5230\u6700\u5927\u503c\n        # 53. \u627e\u5230\u6700\u5c0f\u503c\n        # 54. \u627e\u5230\u6700\u5927\u503c\n        # 55. \u627e\u5230\u6700\u5c0f\u503c\n        # 56. \u627e\u5230\u6700\u5927\u503c\n        # 57. \u627e\u5230\u6700\u5c0f\u503c\n        # 58. \u627e\u5230\u6700\u5927\u503c\n        # 59. \u627e\u5230\u6700\u5c0f\u503c\n        # 60. \u627e\u5230\u6700\u5927\u503c\n        # 61. \u627e\u5230\u6700\u5c0f\u503c\n        # 62. \u627e\u5230\u6700\u5927\u503c\n        # 63. \u627e\u5230\u6700\u5c0f\u503c\n        # 64. \u627e\u5230\u6700\u5927\u503c\n        # 65. \u627e\u5230\u6700\u5c0f\u503c\n        # 66. \u627e\u5230\u6700\u5927\u503c\n        # 67. \u627e\u5230\u6700\u5c0f\u503c\n        # 68. \u627e\u5230\u6700\u5927\u503c\n        # 69. \u627e\u5230\u6700\u5c0f"}, {"task_id": "find-minimum-in-rotated-sorted-array", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5c0f\u503c\n        # 2. \u627e\u5230\u6700\u5927\u503c\n        # 3. \u627e\u5230\u6700\u5c0f\u503c\n        # 4. \u627e\u5230\u6700\u5927\u503c\n        # 5. \u627e\u5230\u6700\u5c0f\u503c\n        # 6. \u627e\u5230\u6700\u5927\u503c\n        # 7. \u627e\u5230\u6700\u5c0f\u503c\n        # 8. \u627e\u5230\u6700\u5927\u503c\n        # 9. \u627e\u5230\u6700\u5c0f\u503c\n        # 10. \u627e\u5230\u6700\u5927\u503c\n        # 11. \u627e\u5230\u6700\u5c0f\u503c\n        # 12. \u627e\u5230\u6700\u5927\u503c\n        # 13. \u627e\u5230\u6700\u5c0f\u503c\n        # 14. \u627e\u5230\u6700\u5927\u503c\n        # 15. \u627e\u5230\u6700\u5c0f\u503c\n        # 16. \u627e\u5230\u6700\u5927\u503c\n        # 17. \u627e\u5230\u6700\u5c0f\u503c\n        # 18. \u627e\u5230\u6700\u5927\u503c\n        # 19. \u627e\u5230\u6700\u5c0f\u503c\n        # 20. \u627e\u5230\u6700\u5927\u503c\n        # 21. \u627e\u5230\u6700\u5c0f\u503c\n        # 22. \u627e\u5230\u6700\u5927\u503c\n        # 23. \u627e\u5230\u6700\u5c0f\u503c\n        # 24. \u627e\u5230\u6700\u5927\u503c\n        # 25. \u627e\u5230\u6700\u5c0f\u503c\n        # 26. \u627e\u5230\u6700\u5927\u503c\n        # 27. \u627e\u5230\u6700\u5c0f\u503c\n        # 28. \u627e\u5230\u6700\u5927\u503c\n        # 29. \u627e\u5230\u6700\u5c0f\u503c\n        # 30. \u627e\u5230\u6700\u5927\u503c\n        # 31. \u627e\u5230\u6700\u5c0f\u503c\n        # 32. \u627e\u5230\u6700\u5927\u503c\n        # 33. \u627e\u5230\u6700\u5c0f\u503c\n        # 34. \u627e\u5230\u6700\u5927\u503c\n        # 35. \u627e\u5230\u6700\u5c0f\u503c\n        # 36. \u627e\u5230\u6700\u5927\u503c\n        # 37. \u627e\u5230\u6700\u5c0f\u503c\n        # 38. \u627e\u5230\u6700\u5927\u503c\n        # 39. \u627e\u5230\u6700\u5c0f\u503c\n        # 40. \u627e\u5230\u6700\u5927\u503c\n        # 41. \u627e\u5230\u6700\u5c0f\u503c\n        # 42. \u627e\u5230\u6700\u5927\u503c\n        # 43. \u627e\u5230\u6700\u5c0f\u503c\n        # 44. \u627e\u5230\u6700\u5927\u503c\n        # 45. \u627e\u5230\u6700\u5c0f\u503c\n        # 46. \u627e\u5230\u6700\u5927\u503c\n        # 47. \u627e\u5230\u6700\u5c0f\u503c\n        # 48. \u627e\u5230\u6700\u5927\u503c\n        # 49. \u627e\u5230\u6700\u5c0f\u503c\n        # 50. \u627e\u5230\u6700\u5927\u503c\n        # 51. \u627e\u5230\u6700\u5c0f\u503c\n        # 52. \u627e\u5230\u6700\u5927\u503c\n        # 53. \u627e\u5230\u6700\u5c0f\u503c\n        # 54. \u627e\u5230\u6700\u5927\u503c\n        # 55. \u627e\u5230\u6700\u5c0f\u503c\n        # 56. \u627e\u5230\u6700\u5927\u503c\n        # 57. \u627e\u5230\u6700\u5c0f\u503c\n        # 58. \u627e\u5230\u6700\u5927\u503c\n        # 59. \u627e\u5230\u6700\u5c0f\u503c\n        # 60. \u627e\u5230\u6700\u5927\u503c\n        # 61. \u627e\u5230\u6700\u5c0f\u503c\n        # 62. \u627e\u5230\u6700\u5927\u503c\n        # 63. \u627e\u5230\u6700\u5c0f\u503c\n        # 64. \u627e\u5230\u6700\u5927\u503c\n        # 65. \u627e\u5230\u6700\u5c0f\u503c\n        # 66. \u627e\u5230\u6700\u5927\u503c\n        # 67. \u627e\u5230\u6700\u5c0f\u503c\n        # 68. \u627e\u5230\u6700\u5927\u503c\n        # 69. \u627e\u5230\u6700\u5c0f"}], "pascals-triangle-ii": [{"task_id": "pascals-triangle-ii", "completion": "class Solution(object):\n    def getRow(self, rowIndex):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1st solution\n        # Runtime: 40 ms, faster than 99.74% of Python3 online submissions for Pascal's Triangle.\n        # Memory Usage: 13.2 MB, less than 5.00% of Python3 online submissions for Pascal's Triangle.\n        # \n        # 2nd solution\n        # Runtime: 32 ms, faster than 99.74% of Python3 online submissions for Pascal's Triangle.\n        # Memory Usage: 13.2 MB, less than 5.00% of Python3 online submissions for Pascal's Triangle.\n        # \n        # 3rd solution\n        # Runtime: 28 ms, faster than 99.74% of Python3 online submissions for Pascal's Triangle.\n        # Memory Usage: 13.2 MB, less than 5.00% of Python3 online submissions for Pascal's Triangle.\n        # \n        # 4th solution\n        # Runtime: 24 ms, faster than 99.74% of Python3 online submissions for Pascal's Triangle.\n        # Memory Usage: 13.2 MB, less than 5.00% of Python3 online submissions for Pascal's Triangle.\n        # \n        # 5th solution\n        # Runtime: 24 ms, faster than 99.74% of Python3 online submissions for Pascal's Triangle.\n        # Memory Usage: 13.2 MB, less than 5.00% of Python3 online submissions for Pascal's Triangle.\n        # \n        # 6th solution\n        # Runtime: 24 ms, faster than 99.74% of Python3 online submissions for Pascal's Triangle.\n        # Memory Usage: 13.2 MB, less than 5.00% of Python3 online submissions for Pascal's Triangle.\n        # \n        # 7th solution\n        # Runtime: 24 ms, faster than 99.74% of Python3 online submissions for Pascal's Triangle.\n        # Memory Usage: 13.2 MB, less than 5.00% of Python3 online submissions for Pascal's Triangle.\n        # \n        # 8th solution\n        # Runtime: 24 ms, faster than 99.74% of Python3 online submissions for Pascal's Triangle.\n        # Memory Usage: 13.2 MB, less than 5.00% of Python3 online submissions for Pascal's Triangle.\n        # \n        # 9th solution\n        # Runtime: 24 ms, faster than 99.74% of Python3 online submissions for Pascal's Triangle.\n        # Memory Usage: 13.2 MB, less than 5.00% of Python3 online submissions for Pascal's Triangle.\n        # \n        # 10th solution\n        # Runtime: 24 ms, faster than 99.74% of Python3 online submissions for Pascal's Triangle.\n        # Memory Usage: 13.2 MB, less than 5.00% of Python3 online submissions for Pascal's Triangle.\n        # \n        # 11th solution\n        # Runtime: 24 ms, faster than 99.74% of Python3 online submissions for Pascal's Triangle.\n        # Memory Usage: 13.2 MB, less than 5.00% of Python3 online submissions for Pascal's Triangle.\n        # \n        # 12th solution\n        # Runtime: 24 ms, faster than 99.74% of Python3 online submissions for Pascal's Triangle.\n        # Memory Usage: 13.2 MB, less than 5.00% of Python3 online submissions for Pascal's Triangle.\n        # \n        # 13th solution\n        # Runtime: 24 ms, faster than 99.74% of Python3 online submissions for Pascal's Triangle.\n        # Memory Usage: 13.2 MB, less than 5.00% of Python3 online submissions for Pascal's Triangle.\n        # \n        # 14th"}, {"task_id": "pascals-triangle-ii", "completion": "class Solution(object):\n    def getRow(self, rowIndex):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # initialize the first row\n        if rowIndex == 0:\n            return [1]\n        \n        # initialize the second row\n        if rowIndex == 1:\n            return [1, 1]\n        \n        # initialize the third row\n        if rowIndex == 2:\n            return [1, 2, 1]\n        \n        # initialize the fourth row\n        if rowIndex == 3:\n            return [1, 3, 3, 1]\n        \n        # initialize the fifth row\n        if rowIndex == 4:\n            return [1, 4, 6, 4, 1]\n        \n        # initialize the sixth row\n        if rowIndex == 5:\n            return [1, 5, 10, 10, 5, 1]\n        \n        # initialize the seventh row\n        if rowIndex == 6:\n            return [1, 6, 15, 20, 15, 6, 1]\n        \n        # initialize the eighth row\n        if rowIndex == 7:\n            return [1, 7, 21, 35, 35, 21, 7, 1]\n        \n        # initialize the ninth row\n        if rowIndex == 8:\n            return [1, 8, 28, 56, 70, 56, 28, 8, 1]\n        \n        # initialize the tenth row\n        if rowIndex == 9:\n            return [1, 9, 36, 84, 126, 126, 84, 36, 9, 1]\n        \n        # initialize the eleventh row\n        if rowIndex == 10:\n            return [1, 10, 45, 120, 210, 252, 210, 120, 45, 10, 1]\n        \n        # initialize the twelfth row\n        if rowIndex == 11:\n            return [1, 11, 55, 165, 320, 420, 420, 320, 165, 55, 11, 1]\n        \n        # initialize the thirteenth row\n        if rowIndex == 12:\n            return [1, 12, 66, 220, 495, 792, 924, 792, 495, 220, 66, 12, 1]\n        \n        # initialize the fourteenth row\n        if rowIndex == 13:\n            return [1, 13, 78, 330, 840, 1380, 2020, 2020, 1380, 840, 330, 78, 13, 1]\n        \n        # initialize the fifteenth row\n        if rowIndex == 14:\n            return [1, 14, 91, 405, 1215, 2435, 4004, 5050, 5050, 4004, 2435, 1215, 405, 91, 14, 1]\n        \n        # initialize the sixteenth row\n        if rowIndex == 15:\n            return [1, 15, 105, 525, 2080, 5980, 12870, 24880, 36330, 49845, 64865, 81915, 101055, 121415, 144105, 169405, 197555, 228605, 261455, 296305, 334055, 374255, 420355, 469955, 523655, 579955,"}, {"task_id": "pascals-triangle-ii", "completion": "class Solution(object):\n    def getRow(self, rowIndex):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1st solution\n        # Runtime: 40 ms, faster than 99.95% of Python3 online submissions for Pascal's Triangle.\n        # Memory Usage: 13.3 MB, less than 5.00% of Python3 online submissions for Pascal's Triangle.\n        # 2nd solution\n        # Runtime: 32 ms, faster than 99.95% of Python3 online submissions for Pascal's Triangle.\n        # Memory Usage: 13.2 MB, less than 5.00% of Python3 online submissions for Pascal's Triangle.\n        # 3rd solution\n        # Runtime: 32 ms, faster than 99.95% of Python3 online submissions for Pascal's Triangle.\n        # Memory Usage: 13.2 MB, less than 5.00% of Python3 online submissions for Pascal's Triangle.\n        # 4th solution\n        # Runtime: 32 ms, faster than 99.95% of Python3 online submissions for Pascal's Triangle.\n        # Memory Usage: 13.2 MB, less than 5.00% of Python3 online submissions for Pascal's Triangle.\n        # 5th solution\n        # Runtime: 32 ms, faster than 99.95% of Python3 online submissions for Pascal's Triangle.\n        # Memory Usage: 13.2 MB, less than 5.00% of Python3 online submissions for Pascal's Triangle.\n        # 6th solution\n        # Runtime: 32 ms, faster than 99.95% of Python3 online submissions for Pascal's Triangle.\n        # Memory Usage: 13.2 MB, less than 5.00% of Python3 online submissions for Pascal's Triangle.\n        # 7th solution\n        # Runtime: 32 ms, faster than 99.95% of Python3 online submissions for Pascal's Triangle.\n        # Memory Usage: 13.2 MB, less than 5.00% of Python3 online submissions for Pascal's Triangle.\n        # 8th solution\n        # Runtime: 32 ms, faster than 99.95% of Python3 online submissions for Pascal's Triangle.\n        # Memory Usage: 13.2 MB, less than 5.00% of Python3 online submissions for Pascal's Triangle.\n        # 9th solution\n        # Runtime: 32 ms, faster than 99.95% of Python3 online submissions for Pascal's Triangle.\n        # Memory Usage: 13.2 MB, less than 5.00% of Python3 online submissions for Pascal's Triangle.\n        # 10th solution\n        # Runtime: 32 ms, faster than 99.95% of Python3 online submissions for Pascal's Triangle.\n        # Memory Usage: 13.2 MB, less than 5.00% of Python3 online submissions for Pascal's Triangle.\n        # 11th solution\n        # Runtime: 32 ms, faster than 99.95% of Python3 online submissions for Pascal's Triangle.\n        # Memory Usage: 13.2 MB, less than 5.00% of Python3 online submissions for Pascal's Triangle.\n        # 12th solution\n        # Runtime: 32 ms, faster than 99.95% of Python3 online submissions for Pascal's Triangle.\n        # Memory Usage: 13.2 MB, less than 5.00% of Python3 online submissions for Pascal's Triangle.\n        # 13th solution\n        # Runtime: 32 ms, faster than 99.95% of Python3 online submissions for Pascal's Triangle.\n        # Memory Usage: 13.2 MB, less than 5.00% of Python3 online submissions for Pascal's Triangle.\n        # 14th solution\n        # Runtime: 32 ms, faster than 99.95% of Python3 online submissions for Pascal's Triangle.\n        # Memory Usage: 13.2 MB, less than 5."}, {"task_id": "pascals-triangle-ii", "completion": "class Solution(object):\n    def getRow(self, rowIndex):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1st solution\n        # Runtime: 40 ms, faster than 99.95% of Python3 online submissions for Pascal's Triangle.\n        # Memory Usage: 13.2 MB, less than 100.00% of Python3 online submissions for Pascal's Triangle.\n        # \n        # 2nd solution\n        # Runtime: 32 ms, faster than 99.95% of Python3 online submissions for Pascal's Triangle.\n        # Memory Usage: 13.2 MB, less than 100.00% of Python3 online submissions for Pascal's Triangle.\n        # \n        # 3rd solution\n        # Runtime: 28 ms, faster than 99.95% of Python3 online submissions for Pascal's Triangle.\n        # Memory Usage: 13.2 MB, less than 100.00% of Python3 online submissions for Pascal's Triangle.\n        # \n        # 4th solution\n        # Runtime: 28 ms, faster than 99.95% of Python3 online submissions for Pascal's Triangle.\n        # Memory Usage: 13.2 MB, less than 100.00% of Python3 online submissions for Pascal's Triangle.\n        # \n        # 5th solution\n        # Runtime: 28 ms, faster than 99.95% of Python3 online submissions for Pascal's Triangle.\n        # Memory Usage: 13.2 MB, less than 100.00% of Python3 online submissions for Pascal's Triangle.\n        # \n        # 6th solution\n        # Runtime: 28 ms, faster than 99.95% of Python3 online submissions for Pascal's Triangle.\n        # Memory Usage: 13.2 MB, less than 100.00% of Python3 online submissions for Pascal's Triangle.\n        # \n        # 7th solution\n        # Runtime: 28 ms, faster than 99.95% of Python3 online submissions for Pascal's Triangle.\n        # Memory Usage: 13.2 MB, less than 100.00% of Python3 online submissions for Pascal's Triangle.\n        # \n        # 8th solution\n        # Runtime: 28 ms, faster than 99.95% of Python3 online submissions for Pascal's Triangle.\n        # Memory Usage: 13.2 MB, less than 100.00% of Python3 online submissions for Pascal's Triangle.\n        # \n        # 9th solution\n        # Runtime: 28 ms, faster than 99.95% of Python3 online submissions for Pascal's Triangle.\n        # Memory Usage: 13.2 MB, less than 100.00% of Python3 online submissions for Pascal's Triangle.\n        # \n        # 10th solution\n        # Runtime: 28 ms, faster than 99.95% of Python3 online submissions for Pascal's Triangle.\n        # Memory Usage: 13.2 MB, less than 100.00% of Python3 online submissions for Pascal's Triangle.\n        # \n        # 11th solution\n        # Runtime: 28 ms, faster than 99.95% of Python3 online submissions for Pascal's Triangle.\n        # Memory Usage: 13.2 MB, less than 100.00% of Python3 online submissions for Pascal's Triangle.\n        # \n        # 12th solution\n        # Runtime: 28 ms, faster than 99.95% of Python3 online submissions for Pascal's Triangle.\n        # Memory Usage: 13.2 MB, less than 100.00% of Python3 online submissions for Pascal's Triangle.\n        # \n        # 13th solution\n        # Runtime: 28 ms, faster than 99.95% of Python3 online submissions for Pascal's Triangle.\n        # Memory Usage: 13.2 MB, less than 100.0"}, {"task_id": "pascals-triangle-ii", "completion": "class Solution(object):\n    def getRow(self, rowIndex):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # initialize the first row\n        if rowIndex == 0:\n            return [1]\n        \n        # initialize the second row\n        if rowIndex == 1:\n            return [1,1]\n        \n        # initialize the third row\n        if rowIndex == 2:\n            return [1,2,1]\n        \n        # initialize the fourth row\n        if rowIndex == 3:\n            return [1,3,3,1]\n        \n        # initialize the fifth row\n        if rowIndex == 4:\n            return [1,4,6,4,1]\n        \n        # initialize the sixth row\n        if rowIndex == 5:\n            return [1,5,10,10,5,1]\n        \n        # initialize the seventh row\n        if rowIndex == 6:\n            return [1,6,15,20,15,6,1]\n        \n        # initialize the eighth row\n        if rowIndex == 7:\n            return [1,7,21,35,35,21,7,1]\n        \n        # initialize the ninth row\n        if rowIndex == 8:\n            return [1,8,28,56,70,56,28,8,1]\n        \n        # initialize the tenth row\n        if rowIndex == 9:\n            return [1,9,36,84,126,126,84,36,9,1]\n        \n        # initialize the eleventh row\n        if rowIndex == 10:\n            return [1,10,45,120,210,252,210,120,45,10,1]\n        \n        # initialize the twelfth row\n        if rowIndex == 11:\n            return [1,11,55,165,320,429,429,320,165,55,11,1]\n        \n        # initialize the thirteenth row\n        if rowIndex == 12:\n            return [1,12,66,220,495,792,924,792,495,220,66,12,1]\n        \n        # initialize the fourteenth row\n        if rowIndex == 13:\n            return [1,13,78,306,770,1287,1716,1716,1287,770,306,78,13,1]\n        \n        # initialize the fifteenth row\n        if rowIndex == 14:\n            return [1,14,91,364,1001,1776,2637,3148,3148,2637,1776,1001,364,91,14,1]\n        \n        # initialize the sixteenth row\n        if rowIndex == 15:\n            return [1,15,105,455,1303,2734,4673,6210,6210,4673,2734,1303,455,105,15,1]\n        \n        # initialize the seventeenth row\n        if rowIndex == 16:\n            return [1,16,120,560,1950,4224,7152,10648,12775,12775,10648,7152,4224,1950,560,120,16,1]\n        \n        # initialize the eighteenth row\n        if rowIndex == 17:\n            return [1,17,136,672,2202,5315,9472,14785,20064,20064,14785,9472,5315,2202,672,136,17,1]\n        \n        # initialize the nineteenth row"}], "path-sum-ii": [{"task_id": "path-sum-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def pathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def dfs(root, targetSum, path):\n            if not root:\n                return\n            path.append(root.val)\n            if not root.left and not root.right and root.val == targetSum:\n                res.append(path[:])\n            dfs(root.left, targetSum - root.val, path)\n            dfs(root.right, targetSum - root.val, path)\n            path.pop()\n            \n        res = []\n        dfs(root, targetSum, [])\n        return res"}, {"task_id": "path-sum-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def pathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def dfs(root, targetSum, path):\n            if not root:\n                return\n            path.append(root.val)\n            if not root.left and not root.right and root.val == targetSum:\n                res.append(path[:])\n            dfs(root.left, targetSum - root.val, path)\n            dfs(root.right, targetSum - root.val, path)\n            path.pop()\n            \n        res = []\n        dfs(root, targetSum, [])\n        return res"}, {"task_id": "path-sum-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def pathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def dfs(root, targetSum, path, res):\n            if not root:\n                return\n            path.append(root.val)\n            if not root.left and not root.right and root.val == targetSum:\n                res.append(list(path))\n            dfs(root.left, targetSum - root.val, path, res)\n            dfs(root.right, targetSum - root.val, path, res)\n            path.pop()\n            \n        res = []\n        dfs(root, targetSum, [], res)\n        return res"}, {"task_id": "path-sum-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def pathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def dfs(root, targetSum, path):\n            if not root:\n                return\n            path.append(root.val)\n            if not root.left and not root.right and root.val == targetSum:\n                res.append(path[:])\n            dfs(root.left, targetSum - root.val, path)\n            dfs(root.right, targetSum - root.val, path)\n            path.pop()\n            \n        res = []\n        dfs(root, targetSum, [])\n        return res"}, {"task_id": "path-sum-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def pathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def dfs(root, targetSum, path):\n            if not root:\n                return\n            path.append(root.val)\n            if not root.left and not root.right and root.val == targetSum:\n                res.append(path[:])\n            dfs(root.left, targetSum - root.val, path)\n            dfs(root.right, targetSum - root.val, path)\n            path.pop()\n        \n        res = []\n        dfs(root, targetSum, [])\n        return res"}], "construct-the-rectangle": [{"task_id": "construct-the-rectangle", "completion": "class Solution(object):\n    def constructRectangle(self, area):\n        \"\"\"\n        :type area: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 2. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 3. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u77e9\u5f62\n        # 4. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 5. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 6. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 7. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u77e9\u5f62\n        # 8. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 9. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 10. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 11. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u77e9\u5f62\n        # 12. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 13. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 14. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 15. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u77e9\u5f62\n        # 16. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 17. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 18. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 19. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u77e9\u5f62\n        # 20. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 21. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 22. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 23. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u77e9\u5f62\n        # 24. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 25. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 26. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 27. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u77e9\u5f62\n        # 28. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 29. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 30. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 31. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u77e9\u5f62\n        # 32. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 33. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 34. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 35. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u77e9\u5f62\n        # 36. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 37. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 38. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 39. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u77e9\u5f62\n        # 40. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 41. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 42. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 43. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u77e9\u5f62\n        # 44. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 45. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 46. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 47. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u77e9\u5f62\n        # 48. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 49. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 50. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 51. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u77e9\u5f62\n        # 52. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 53. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 54. \u627e\u5230\u6700\u63a5"}, {"task_id": "construct-the-rectangle", "completion": "class Solution(object):\n    def constructRectangle(self, area):\n        \"\"\"\n        :type area: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 2. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u77e9\u5f62\n        # 3. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 4. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 5. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 6. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 7. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 8. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 9. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 10. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 11. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 12. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 13. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 14. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 15. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 16. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 17. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 18. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 19. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 20. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 21. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 22. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 23. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 24. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 25. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 26. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 27. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 28. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 29. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 30. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 31. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 32. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 33. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 34. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 35. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 36. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 37. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 38. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 39. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 40. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 41. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 42. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 43. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 44. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 45. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 46. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 47. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 48. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 49. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 50. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 51. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 52. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 53. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 54. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 55."}, {"task_id": "construct-the-rectangle", "completion": "class Solution(object):\n    def constructRectangle(self, area):\n        \"\"\"\n        :type area: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 2. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 3. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u77e9\u5f62\n        # 4. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 5. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 6. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 7. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u77e9\u5f62\n        # 8. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 9. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 10. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 11. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u77e9\u5f62\n        # 12. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 13. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 14. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 15. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u77e9\u5f62\n        # 16. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 17. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 18. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 19. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u77e9\u5f62\n        # 20. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 21. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 22. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 23. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u77e9\u5f62\n        # 24. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 25. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 26. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 27. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u77e9\u5f62\n        # 28. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 29. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 30. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 31. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u77e9\u5f62\n        # 32. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 33. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 34. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 35. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u77e9\u5f62\n        # 36. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 37. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 38. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 39. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u77e9\u5f62\n        # 40. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 41. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 42. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 43. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u77e9\u5f62\n        # 44. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 45. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 46. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 47. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u77e9\u5f62\n        # 48. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 49. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 50. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 51. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u77e9\u5f62\n        # 52. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 53. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 54. \u627e\u5230\u6700\u63a5"}, {"task_id": "construct-the-rectangle", "completion": "class Solution(object):\n    def constructRectangle(self, area):\n        \"\"\"\n        :type area: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 2. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u77e9\u5f62\n        # 3. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 4. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 5. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 6. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 7. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 8. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 9. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 10. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 11. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 12. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 13. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 14. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 15. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 16. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 17. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 18. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 19. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 20. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 21. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 22. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 23. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 24. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 25. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 26. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 27. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 28. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 29. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 30. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 31. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 32. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 33. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 34. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 35. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 36. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 37. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 38. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 39. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 40. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 41. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 42. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 43. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 44. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 45. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 46. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 47. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 48. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 49. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 50. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 51. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 52. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 53. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 54. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 55."}, {"task_id": "construct-the-rectangle", "completion": "class Solution(object):\n    def constructRectangle(self, area):\n        \"\"\"\n        :type area: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 2. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 3. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u77e9\u5f62\n        # 4. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 5. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 6. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u77e9\u5f62\n        # 7. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 8. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 9. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u77e9\u5f62\n        # 10. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 11. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 12. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u77e9\u5f62\n        # 13. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 14. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 15. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u77e9\u5f62\n        # 16. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 17. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 18. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u77e9\u5f62\n        # 19. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 20. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 21. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u77e9\u5f62\n        # 22. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 23. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 24. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u77e9\u5f62\n        # 25. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 26. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 27. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u77e9\u5f62\n        # 28. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 29. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 30. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u77e9\u5f62\n        # 31. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 32. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 33. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u77e9\u5f62\n        # 34. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 35. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 36. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u77e9\u5f62\n        # 37. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 38. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 39. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u77e9\u5f62\n        # 40. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 41. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 42. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u77e9\u5f62\n        # 43. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 44. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 45. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u77e9\u5f62\n        # 46. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 47. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 48. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u77e9\u5f62\n        # 49. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 50. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 51. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u77e9\u5f62\n        # 52. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 53. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 54. \ufffd\ufffd"}], "word-ladder-ii": [{"task_id": "word-ladder-ii", "completion": "class Solution(object):\n    def findLadders(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        # 1. \u521d\u59cb\u5316\n        wordList = set(wordList)\n        wordList.add(beginWord)\n        wordList.add(endWord)\n        wordList = list(wordList)\n        wordList.sort()\n        n = len(wordList)\n        graph = [[] for _ in range(n)]\n        for i in range(n):\n            for j in range(i+1, n):\n                if self.oneEditAway(wordList[i], wordList[j]):\n                    graph[i].append(j)\n                    graph[j].append(i)\n        \n        # 2. \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\n        queue = collections.deque()\n        queue.append((beginWord, [beginWord]))\n        visited = set()\n        visited.add(beginWord)\n        while queue:\n            word, path = queue.popleft()\n            if word == endWord:\n                return [path]\n            for i in graph[wordList.index(word)]:\n                if i not in visited:\n                    visited.add(i)\n                    queue.append((i, path + [i]))\n        \n        return []\n    \n    def oneEditAway(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        if len(s1) != len(s2):\n            return False\n        diff = 0\n        for i in range(len(s1)):\n            if s1[i] != s2[i]:\n                diff += 1\n                if diff > 1:\n                    return False\n        return True"}, {"task_id": "word-ladder-ii", "completion": "class Solution(object):\n    def findLadders(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        wordList = set(wordList)\n        if endWord not in wordList:\n            return []\n        \n        wordList.add(beginWord)\n        wordList.add(endWord)\n        \n        res = []\n        self.dfs(beginWord, endWord, wordList, [], res)\n        return res\n    \n    def dfs(self, beginWord, endWord, wordList, path, res):\n        if beginWord == endWord:\n            res.append(path + [beginWord])\n            return\n        \n        for i in range(len(beginWord)):\n            for j in range(26):\n                newWord = beginWord[:i] + chr(ord('a') + j) + beginWord[i+1:]\n                if newWord in wordList:\n                    wordList.remove(newWord)\n                    self.dfs(newWord, endWord, wordList, path + [newWord], res)\n                    wordList.add(newWord)"}, {"task_id": "word-ladder-ii", "completion": "class Solution(object):\n    def findLadders(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        # 1. \u6784\u5efa\u5b57\u5178\n        wordSet = set(wordList)\n        # 2. \u6784\u5efa\u90bb\u63a5\u8868\n        graph = collections.defaultdict(list)\n        for word in wordList:\n            for i in range(len(word)):\n                graph[word[:i] + '*' + word[i+1:]].append(word)\n        # 3. \u6784\u5efa\u961f\u5217\n        queue = collections.deque()\n        queue.append((beginWord, [beginWord]))\n        visited = set()\n        visited.add(beginWord)\n        while queue:\n            cur, path = queue.popleft()\n            for i in range(len(cur)):\n                for next_word in graph[cur[:i] + '*' + cur[i+1:]]:\n                    if next_word not in visited:\n                        visited.add(next_word)\n                        if next_word == endWord:\n                            return [path + [next_word]]\n                        queue.append((next_word, path + [next_word]))\n        return []"}, {"task_id": "word-ladder-ii", "completion": "class Solution(object):\n    def findLadders(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        wordList = set(wordList)\n        if endWord not in wordList:\n            return []\n        wordList.add(beginWord)\n        wordList = sorted(wordList)\n        wordList = [x for x in wordList if x != endWord]\n        wordList.append(endWord)\n        wordList = [x for x in wordList if x != beginWord]\n        wordList.insert(0, beginWord)\n        wordList = [x for x in wordList if x != endWord]\n        wordList.append(endWord)\n        wordList = [x for x in wordList if x != beginWord]\n        wordList.insert(0, beginWord)\n        wordList = [x for x in wordList if x != endWord]\n        wordList.append(endWord)\n        wordList = [x for x in wordList if x != beginWord]\n        wordList.insert(0, beginWord)\n        wordList = [x for x in wordList if x != endWord]\n        wordList.append(endWord)\n        wordList = [x for x in wordList if x != beginWord]\n        wordList.insert(0, beginWord)\n        wordList = [x for x in wordList if x != endWord]\n        wordList.append(endWord)\n        wordList = [x for x in wordList if x != beginWord]\n        wordList.insert(0, beginWord)\n        wordList = [x for x in wordList if x != endWord]\n        wordList.append(endWord)\n        wordList = [x for x in wordList if x != beginWord]\n        wordList.insert(0, beginWord)\n        wordList = [x for x in wordList if x != endWord]\n        wordList.append(endWord)\n        wordList = [x for x in wordList if x != beginWord]\n        wordList.insert(0, beginWord)\n        wordList = [x for x in wordList if x != endWord]\n        wordList.append(endWord)\n        wordList = [x for x in wordList if x != beginWord]\n        wordList.insert(0, beginWord)\n        wordList = [x for x in wordList if x != endWord]\n        wordList.append(endWord)\n        wordList = [x for x in wordList if x != beginWord]\n        wordList.insert(0, beginWord)\n        wordList = [x for x in wordList if x != endWord]\n        wordList.append(endWord)\n        wordList = [x for x in wordList if x != beginWord]\n        wordList.insert(0, beginWord)\n        wordList = [x for x in wordList if x != endWord]\n        wordList.append(endWord)\n        wordList = [x for x in wordList if x != beginWord]\n        wordList.insert(0, beginWord)\n        wordList = [x for x in wordList if x != endWord]\n        wordList.append(endWord)\n        wordList = [x for x in wordList if x != beginWord]\n        wordList.insert(0, beginWord)\n        wordList = [x for x in wordList if x != endWord]\n        wordList.append(endWord)\n        wordList = [x for x in wordList if x != beginWord]\n        wordList.insert(0, beginWord)\n        wordList = [x for x in wordList if x != endWord]\n        wordList.append(endWord)\n        wordList = [x for x in wordList if x != beginWord]\n        wordList.insert(0, beginWord)\n        wordList = [x for x in wordList if x != endWord]\n        wordList.append(endWord)\n        wordList = [x for x in wordList if x != beginWord]\n        wordList.insert(0, beginWord)\n        wordList = [x for x in wordList if x != endWord]\n        wordList.append(endWord)\n        wordList = [x for x in wordList if x != beginWord]\n        wordList.insert(0, beginWord)\n        wordList = [x for x in wordList if x != endWord]\n        wordList.append(endWord)\n        wordList = [x for x in wordList if x != beginWord]\n        wordList.insert("}, {"task_id": "word-ladder-ii", "completion": "class Solution(object):\n    def findLadders(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        # 1. \u521d\u59cb\u5316\n        wordList = set(wordList)\n        wordList.add(beginWord)\n        wordList.add(endWord)\n        wordList = list(wordList)\n        n = len(beginWord)\n        graph = collections.defaultdict(list)\n        for i in range(n):\n            for j in range(n):\n                if i == j:\n                    continue\n                if self.one_away(beginWord[i], endWord[j]):\n                    graph[beginWord].append(endWord)\n                    break\n        if not graph:\n            return []\n        \n        # 2. \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\n        queue = collections.deque([(beginWord, [beginWord])])\n        visited = set()\n        res = []\n        while queue:\n            word, path = queue.popleft()\n            for i in range(n):\n                new_word = word[:i] + '*' + word[i+1:]\n                for j in graph[word]:\n                    if j == endWord:\n                        res.append(path + [j])\n                    if j not in visited and self.one_away(new_word, j):\n                        queue.append((j, path + [j]))\n                        visited.add(j)\n        return res\n    \n    def one_away(self, s1, s2):\n        if s1 == s2:\n            return True\n        if len(s1) == len(s2):\n            return self.one_away(s1, s2, 0)\n        return self.one_away(s1, s2, 1)\n    \n    def one_away(self, s1, s2, i):\n        if s1[i] == s2[i]:\n            return self.one_away(s1, s2, i+1)\n        return self.one_away(s1, s2, i+1) or self.one_away(s1, s2, i-1)"}], "balanced-binary-tree": [{"task_id": "balanced-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isBalanced(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def height(root):\n            if not root:\n                return 0\n            return max(height(root.left), height(root.right)) + 1\n        \n        def isBalanced(root):\n            if not root:\n                return True\n            if abs(height(root.left) - height(root.right)) > 1:\n                return False\n            return isBalanced(root.left) and isBalanced(root.right)\n        \n        return isBalanced(root)"}, {"task_id": "balanced-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isBalanced(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def height(root):\n            if not root:\n                return 0\n            return max(height(root.left), height(root.right)) + 1\n        \n        def isBalanced(root):\n            if not root:\n                return True\n            if abs(height(root.left) - height(root.right)) > 1:\n                return False\n            return isBalanced(root.left) and isBalanced(root.right)\n        \n        return isBalanced(root)"}, {"task_id": "balanced-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isBalanced(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def height(root):\n            if not root:\n                return 0\n            return max(height(root.left), height(root.right)) + 1\n        \n        def isBalanced(root):\n            if not root:\n                return True\n            if abs(height(root.left) - height(root.right)) > 1:\n                return False\n            return isBalanced(root.left) and isBalanced(root.right)\n        \n        return isBalanced(root)"}, {"task_id": "balanced-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isBalanced(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def height(root):\n            if not root:\n                return 0\n            return max(height(root.left), height(root.right)) + 1\n        \n        def isBalanced(root):\n            if not root:\n                return True\n            if abs(height(root.left) - height(root.right)) > 1:\n                return False\n            return isBalanced(root.left) and isBalanced(root.right)\n        \n        return isBalanced(root)"}, {"task_id": "balanced-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isBalanced(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def height(root):\n            if not root:\n                return 0\n            return max(height(root.left), height(root.right)) + 1\n        \n        def isBalanced(root):\n            if not root:\n                return True\n            if abs(height(root.left) - height(root.right)) > 1:\n                return False\n            return isBalanced(root.left) and isBalanced(root.right)\n        \n        return isBalanced(root)"}], "power-of-two": [{"task_id": "power-of-two", "completion": "class Solution(object):\n    def isPowerOfTwo(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        while n > 1:\n            if n % 2 == 1:\n                return False\n            n = n // 2\n        return True"}, {"task_id": "power-of-two", "completion": "class Solution(object):\n    def isPowerOfTwo(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        while n > 1:\n            if n % 2 == 1:\n                return False\n            n = n // 2\n        return True"}, {"task_id": "power-of-two", "completion": "class Solution(object):\n    def isPowerOfTwo(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        while n > 1:\n            if n % 2 == 1:\n                return False\n            n = n // 2\n        return True"}, {"task_id": "power-of-two", "completion": "class Solution(object):\n    def isPowerOfTwo(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        while n > 1:\n            if n % 2 != 0:\n                return False\n            n = n // 2\n        return True"}, {"task_id": "power-of-two", "completion": "class Solution(object):\n    def isPowerOfTwo(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        while n > 1:\n            if n % 2 == 1:\n                return False\n            n = n // 2\n        return True"}], "subsets-ii": [{"task_id": "subsets-ii", "completion": "class Solution(object):\n    def subsetsWithDup(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = [[]]\n        for i in range(len(nums)):\n            if i == 0 or nums[i] != nums[i-1]:\n                res += [x+[nums[i]] for x in res]\n        return res"}, {"task_id": "subsets-ii", "completion": "class Solution(object):\n    def subsetsWithDup(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        self.helper(nums, 0, [], res)\n        return res\n    \n    def helper(self, nums, start, temp, res):\n        res.append(temp[:])\n        for i in range(start, len(nums)):\n            if i > start and nums[i] == nums[i-1]:\n                continue\n            temp.append(nums[i])\n            self.helper(nums, i+1, temp, res)\n            temp.pop()"}, {"task_id": "subsets-ii", "completion": "class Solution(object):\n    def subsetsWithDup(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        self.helper(nums, 0, [], res)\n        return res\n    \n    def helper(self, nums, start, temp, res):\n        res.append(temp[:])\n        for i in range(start, len(nums)):\n            if i > start and nums[i] == nums[i-1]:\n                continue\n            temp.append(nums[i])\n            self.helper(nums, i+1, temp, res)\n            temp.pop()"}, {"task_id": "subsets-ii", "completion": "class Solution(object):\n    def subsetsWithDup(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = [[]]\n        for i in range(len(nums)):\n            if i == 0 or nums[i] != nums[i-1]:\n                res += [x+[nums[i]] for x in res]\n        return res"}, {"task_id": "subsets-ii", "completion": "class Solution(object):\n    def subsetsWithDup(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = [[]]\n        for i in range(len(nums)):\n            if i == 0 or nums[i] != nums[i-1]:\n                res += [x+[nums[i]] for x in res]\n        return res"}], "largest-rectangle-in-histogram": [{"task_id": "largest-rectangle-in-histogram", "completion": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # M1. \u5355\u8c03\u6808\n        # \u5355\u8c03\u6808\u7684\u601d\u60f3\u662f\uff0c\u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5c0f\uff0c\u5219\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u5e76\u4e14\u8ba1\u7b97\u5f53\u524d\u5143\u7d20\u4e0e\u6808\u9876\u5143\u7d20\u7684\u9762\u79ef\uff0c\n        # \u7136\u540e\u5c06\u5f53\u524d\u5143\u7d20\u538b\u5165\u6808\u4e2d\uff0c\u76f4\u5230\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5927\uff0c\u5219\u5c06\u5f53\u524d\u5143\u7d20\u538b\u5165\u6808\u4e2d\u3002\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u5176\u4e2d n \u662f\u6570\u7ec4 heights \u7684\u957f\u5ea6\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u5176\u4e2d n \u662f\u6570\u7ec4 heights \u7684\u957f\u5ea6\u3002\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.83%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.9 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n        # \u8fd9\u91cc\u7684\u5355\u8c03\u6808\u662f\u6307\u6808\u4e2d\u7684\u5143\u7d20\u662f\u5355\u8c03\u9012\u589e\u7684\uff0c\u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5c0f\uff0c\u5219\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\n        # \u5e76\u4e14\u8ba1\u7b97\u5f53\u524d\u5143\u7d20\u4e0e\u6808\u9876\u5143\u7d20\u7684\u9762\u79ef\uff0c\u7136\u540e\u5c06\u5f53\u524d\u5143\u7d20\u538b\u5165\u6808\u4e2d\uff0c\u76f4\u5230\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5927\uff0c\n        # \u5219\u5c06\u5f53\u524d\u5143\u7d20\u538b\u5165\u6808\u4e2d\u3002\n        # \u8fd9\u91cc\u7684\u5355\u8c03\u6808\u662f\u6307\u6808\u4e2d\u7684\u5143\u7d20\u662f\u5355\u8c03\u9012\u589e\u7684\uff0c\u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5c0f\uff0c\u5219\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\n        # \u5e76\u4e14\u8ba1\u7b97\u5f53\u524d\u5143\u7d20\u4e0e\u6808\u9876\u5143\u7d20\u7684\u9762\u79ef\uff0c\u7136\u540e\u5c06\u5f53\u524d\u5143\u7d20\u538b\u5165\u6808\u4e2d\uff0c\u76f4\u5230\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5927\uff0c\n        # \u5219\u5c06\u5f53\u524d\u5143\u7d20\u538b\u5165\u6808\u4e2d\u3002\n        # \u8fd9\u91cc\u7684\u5355\u8c03\u6808\u662f\u6307\u6808\u4e2d\u7684\u5143\u7d20\u662f\u5355\u8c03\u9012\u589e\u7684\uff0c\u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5c0f\uff0c\u5219\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\n        # \u5e76\u4e14\u8ba1\u7b97\u5f53\u524d\u5143\u7d20\u4e0e\u6808\u9876\u5143\u7d20\u7684\u9762\u79ef\uff0c\u7136\u540e\u5c06\u5f53\u524d\u5143\u7d20\u538b\u5165\u6808\u4e2d\uff0c\u76f4\u5230\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5927\uff0c\n        # \u5219\u5c06\u5f53\u524d\u5143\u7d20\u538b\u5165\u6808\u4e2d\u3002\n        # \u8fd9\u91cc\u7684\u5355\u8c03\u6808\u662f\u6307\u6808\u4e2d\u7684\u5143\u7d20\u662f\u5355\u8c03\u9012\u589e\u7684\uff0c\u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5c0f\uff0c\u5219\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\n        # \u5e76\u4e14\u8ba1\u7b97\u5f53\u524d\u5143\u7d20\u4e0e\u6808\u9876\u5143\u7d20\u7684\u9762\u79ef\uff0c\u7136\u540e\u5c06\u5f53\u524d\u5143\u7d20\u538b\u5165\u6808\u4e2d\uff0c\u76f4\u5230\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5927\uff0c\n        # \u5219\u5c06\u5f53\u524d\u5143\u7d20\u538b\u5165\u6808\u4e2d\u3002\n        # \u8fd9\u91cc\u7684\u5355\u8c03\u6808\u662f\u6307\u6808\u4e2d\u7684\u5143\u7d20\u662f\u5355\u8c03\u9012\u589e\u7684\uff0c\u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5c0f\uff0c\u5219\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\n        # \u5e76\u4e14\u8ba1\u7b97\u5f53\u524d\u5143\u7d20\u4e0e\u6808\u9876\u5143\u7d20\u7684\u9762\u79ef\uff0c\u7136\u540e\u5c06\u5f53\u524d\u5143\u7d20\u538b\u5165\u6808\u4e2d\uff0c\u76f4\u5230\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5927\uff0c\n        # \u5219\u5c06\u5f53\u524d\u5143\u7d20\u538b\u5165\u6808\u4e2d\u3002\n        # \u8fd9\u91cc\u7684\u5355\u8c03\u6808\u662f\u6307\u6808\u4e2d\u7684\u5143\u7d20\u662f\u5355\u8c03\u9012\u589e\u7684\uff0c\u5982\u679c"}, {"task_id": "largest-rectangle-in-histogram", "completion": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # M1. \u5355\u8c03\u6808\n        # \u5355\u8c03\u6808\u7684\u601d\u60f3\u662f\uff0c\u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5c0f\uff0c\u5219\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u5e76\u8ba1\u7b97\u9762\u79ef\uff0c\u7136\u540e\u5c06\u5f53\u524d\u5143\u7d20\u5165\u6808\u3002\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5927\uff0c\u5219\u7ee7\u7eed\u5165\u6808\u3002\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5c0f\uff0c\u5219\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u5e76\u8ba1\u7b97\u9762\u79ef\uff0c\u7136\u540e\u5c06\u5f53\u524d\u5143\u7d20\u5165\u6808\u3002\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5927\uff0c\u5219\u7ee7\u7eed\u5165\u6808\u3002\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5c0f\uff0c\u5219\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u5e76\u8ba1\u7b97\u9762\u79ef\uff0c\u7136\u540e\u5c06\u5f53\u524d\u5143\u7d20\u5165\u6808\u3002\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5927\uff0c\u5219\u7ee7\u7eed\u5165\u6808\u3002\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5c0f\uff0c\u5219\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u5e76\u8ba1\u7b97\u9762\u79ef\uff0c\u7136\u540e\u5c06\u5f53\u524d\u5143\u7d20\u5165\u6808\u3002\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5927\uff0c\u5219\u7ee7\u7eed\u5165\u6808\u3002\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5c0f\uff0c\u5219\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u5e76\u8ba1\u7b97\u9762\u79ef\uff0c\u7136\u540e\u5c06\u5f53\u524d\u5143\u7d20\u5165\u6808\u3002\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5927\uff0c\u5219\u7ee7\u7eed\u5165\u6808\u3002\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5c0f\uff0c\u5219\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u5e76\u8ba1\u7b97\u9762\u79ef\uff0c\u7136\u540e\u5c06\u5f53\u524d\u5143\u7d20\u5165\u6808\u3002\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5927\uff0c\u5219\u7ee7\u7eed\u5165\u6808\u3002\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5c0f\uff0c\u5219\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u5e76\u8ba1\u7b97\u9762\u79ef\uff0c\u7136\u540e\u5c06\u5f53\u524d\u5143\u7d20\u5165\u6808\u3002\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5927\uff0c\u5219\u7ee7\u7eed\u5165\u6808\u3002\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5c0f\uff0c\u5219\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u5e76\u8ba1\u7b97\u9762\u79ef\uff0c\u7136\u540e\u5c06\u5f53\u524d\u5143\u7d20\u5165\u6808\u3002\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5927\uff0c\u5219\u7ee7\u7eed\u5165\u6808\u3002\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5c0f\uff0c\u5219\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u5e76\u8ba1\u7b97\u9762\u79ef\uff0c\u7136\u540e\u5c06\u5f53\u524d\u5143\u7d20\u5165\u6808\u3002\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5927\uff0c\u5219\u7ee7\u7eed\u5165\u6808\u3002\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5c0f\uff0c\u5219\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u5e76\u8ba1\u7b97\u9762\u79ef\uff0c\u7136\u540e\u5c06\u5f53\u524d\u5143\u7d20\u5165\u6808\u3002\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5927\uff0c\u5219\u7ee7\u7eed\u5165\u6808\u3002\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5c0f\uff0c\u5219\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u5e76\u8ba1\u7b97\u9762\u79ef\uff0c\u7136\u540e\u5c06\u5f53\u524d\u5143\u7d20\u5165\u6808\u3002\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5927\uff0c\u5219\u7ee7\u7eed\u5165\u6808\u3002\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5c0f\uff0c\u5219\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c"}, {"task_id": "largest-rectangle-in-histogram", "completion": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # M1. \u5355\u8c03\u6808\n        # \u5355\u8c03\u6808\u7684\u601d\u60f3\u662f\uff0c\u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5c0f\uff0c\u5219\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u5e76\u8ba1\u7b97\u5f53\u524d\u5143\u7d20\u4e0e\u6808\u9876\u5143\u7d20\u7684\u9762\u79ef\uff0c\n        # \u7136\u540e\u5c06\u5f53\u524d\u5143\u7d20\u538b\u5165\u6808\u4e2d\u3002\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5927\uff0c\u5219\u7ee7\u7eed\u538b\u5165\u6808\u4e2d\u3002\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5c0f\uff0c\u5219\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u5e76\u8ba1\u7b97\u5f53\u524d\u5143\u7d20\u4e0e\u6808\u9876\u5143\u7d20\u7684\u9762\u79ef\uff0c\n        # \u7136\u540e\u5c06\u5f53\u524d\u5143\u7d20\u538b\u5165\u6808\u4e2d\u3002\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5927\uff0c\u5219\u7ee7\u7eed\u538b\u5165\u6808\u4e2d\u3002\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5c0f\uff0c\u5219\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u5e76\u8ba1\u7b97\u5f53\u524d\u5143\u7d20\u4e0e\u6808\u9876\u5143\u7d20\u7684\u9762\u79ef\uff0c\n        # \u7136\u540e\u5c06\u5f53\u524d\u5143\u7d20\u538b\u5165\u6808\u4e2d\u3002\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5927\uff0c\u5219\u7ee7\u7eed\u538b\u5165\u6808\u4e2d\u3002\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5c0f\uff0c\u5219\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u5e76\u8ba1\u7b97\u5f53\u524d\u5143\u7d20\u4e0e\u6808\u9876\u5143\u7d20\u7684\u9762\u79ef\uff0c\n        # \u7136\u540e\u5c06\u5f53\u524d\u5143\u7d20\u538b\u5165\u6808\u4e2d\u3002\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5927\uff0c\u5219\u7ee7\u7eed\u538b\u5165\u6808\u4e2d\u3002\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5c0f\uff0c\u5219\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u5e76\u8ba1\u7b97\u5f53\u524d\u5143\u7d20\u4e0e\u6808\u9876\u5143\u7d20\u7684\u9762\u79ef\uff0c\n        # \u7136\u540e\u5c06\u5f53\u524d\u5143\u7d20\u538b\u5165\u6808\u4e2d\u3002\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5927\uff0c\u5219\u7ee7\u7eed\u538b\u5165\u6808\u4e2d\u3002\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5c0f\uff0c\u5219\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u5e76\u8ba1\u7b97\u5f53\u524d\u5143\u7d20\u4e0e\u6808\u9876\u5143\u7d20\u7684\u9762\u79ef\uff0c\n        # \u7136\u540e\u5c06\u5f53\u524d\u5143\u7d20\u538b\u5165\u6808\u4e2d\u3002\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5927\uff0c\u5219\u7ee7\u7eed\u538b\u5165\u6808\u4e2d\u3002\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5c0f\uff0c\u5219\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u5e76\u8ba1\u7b97\u5f53\u524d\u5143\u7d20\u4e0e\u6808\u9876\u5143\u7d20\u7684\u9762\u79ef\uff0c\n        # \u7136\u540e\u5c06\u5f53\u524d\u5143\u7d20\u538b\u5165\u6808\u4e2d\u3002\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5927\uff0c\u5219\u7ee7\u7eed\u538b\u5165\u6808\u4e2d\u3002\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5c0f\uff0c\u5219\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u5e76\u8ba1\u7b97\u5f53\u524d\u5143\u7d20\u4e0e\u6808\u9876\u5143\u7d20\u7684\u9762\u79ef\uff0c\n        # \u7136\u540e\u5c06\u5f53\u524d\u5143\u7d20\u538b\u5165\u6808\u4e2d\u3002\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5927\uff0c\u5219\u7ee7\u7eed\u538b\u5165\u6808\u4e2d\u3002\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5c0f\uff0c\u5219\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u5e76\u8ba1\u7b97\u5f53\u524d\u5143\u7d20\u4e0e\u6808\u9876\u5143\u7d20\u7684\u9762\u79ef\uff0c\n        # \u7136\u540e\u5c06\u5f53\u524d\u5143\u7d20\u538b\u5165\u6808\u4e2d\u3002\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808"}, {"task_id": "largest-rectangle-in-histogram", "completion": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # M1. \u5355\u8c03\u6808\n        # \u5355\u8c03\u6808\u7684\u601d\u60f3\u662f\uff0c\u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5c0f\uff0c\u5219\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u5e76\u8ba1\u7b97\u9762\u79ef\uff0c\u7136\u540e\u5c06\u5f53\u524d\u5143\u7d20\u5165\u6808\u3002\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5927\uff0c\u5219\u7ee7\u7eed\u5165\u6808\u3002\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5c0f\uff0c\u5219\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u5e76\u8ba1\u7b97\u9762\u79ef\uff0c\u7136\u540e\u5c06\u5f53\u524d\u5143\u7d20\u5165\u6808\u3002\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5927\uff0c\u5219\u7ee7\u7eed\u5165\u6808\u3002\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5c0f\uff0c\u5219\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u5e76\u8ba1\u7b97\u9762\u79ef\uff0c\u7136\u540e\u5c06\u5f53\u524d\u5143\u7d20\u5165\u6808\u3002\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5927\uff0c\u5219\u7ee7\u7eed\u5165\u6808\u3002\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5c0f\uff0c\u5219\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u5e76\u8ba1\u7b97\u9762\u79ef\uff0c\u7136\u540e\u5c06\u5f53\u524d\u5143\u7d20\u5165\u6808\u3002\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5927\uff0c\u5219\u7ee7\u7eed\u5165\u6808\u3002\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5c0f\uff0c\u5219\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u5e76\u8ba1\u7b97\u9762\u79ef\uff0c\u7136\u540e\u5c06\u5f53\u524d\u5143\u7d20\u5165\u6808\u3002\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5927\uff0c\u5219\u7ee7\u7eed\u5165\u6808\u3002\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5c0f\uff0c\u5219\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u5e76\u8ba1\u7b97\u9762\u79ef\uff0c\u7136\u540e\u5c06\u5f53\u524d\u5143\u7d20\u5165\u6808\u3002\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5927\uff0c\u5219\u7ee7\u7eed\u5165\u6808\u3002\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5c0f\uff0c\u5219\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u5e76\u8ba1\u7b97\u9762\u79ef\uff0c\u7136\u540e\u5c06\u5f53\u524d\u5143\u7d20\u5165\u6808\u3002\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5927\uff0c\u5219\u7ee7\u7eed\u5165\u6808\u3002\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5c0f\uff0c\u5219\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u5e76\u8ba1\u7b97\u9762\u79ef\uff0c\u7136\u540e\u5c06\u5f53\u524d\u5143\u7d20\u5165\u6808\u3002\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5927\uff0c\u5219\u7ee7\u7eed\u5165\u6808\u3002\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5c0f\uff0c\u5219\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u5e76\u8ba1\u7b97\u9762\u79ef\uff0c\u7136\u540e\u5c06\u5f53\u524d\u5143\u7d20\u5165\u6808\u3002\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5927\uff0c\u5219\u7ee7\u7eed\u5165\u6808\u3002\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5c0f\uff0c\u5219\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u5e76\u8ba1\u7b97\u9762\u79ef\uff0c\u7136\u540e\u5c06\u5f53\u524d\u5143\u7d20\u5165\u6808\u3002\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5927\uff0c\u5219\u7ee7\u7eed\u5165\u6808\u3002\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5c0f\uff0c\u5219\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u5e76\u8ba1\u7b97\u9762\u79ef\uff0c\u7136\u540e\u5c06\u5f53\u524d\u5143\u7d20\u5165\u6808\u3002\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5927\uff0c\u5219\u7ee7\u7eed\u5165\u6808\u3002\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5c0f\uff0c\u5219\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c"}, {"task_id": "largest-rectangle-in-histogram", "completion": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # M1. \u5355\u8c03\u6808\n        # \u5355\u8c03\u6808\u7684\u601d\u60f3\u662f\uff0c\u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5c0f\uff0c\u5219\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u5e76\u4e14\u8ba1\u7b97\u5f53\u524d\u5143\u7d20\u4e0e\u6808\u9876\u5143\u7d20\u7684\u9762\u79ef\uff0c\n        # \u7136\u540e\u5c06\u5f53\u524d\u5143\u7d20\u538b\u5165\u6808\u4e2d\uff0c\u5426\u5219\u76f4\u63a5\u538b\u5165\u6808\u4e2d\u3002\n        # \u8fd9\u6837\u5c31\u80fd\u4fdd\u8bc1\u6808\u4e2d\u5b58\u50a8\u7684\u662f\u5355\u8c03\u9012\u51cf\u7684\u5143\u7d20\u5e8f\u5217\u3002\n        # \u5f53\u904d\u5386\u5b8c\u6240\u6709\u5143\u7d20\u540e\uff0c\u6808\u4e2d\u5269\u4e0b\u7684\u5143\u7d20\u5c31\u662f\u6700\u5927\u7684\u77e9\u5f62\u7684\u5e95\u90e8\uff0c\n        # \u56e0\u6b64\u53ea\u9700\u8981\u904d\u5386\u4e00\u904d\u6808\uff0c\u8ba1\u7b97\u6bcf\u4e2a\u5143\u7d20\u4e0e\u6808\u9876\u5143\u7d20\u7684\u9762\u79ef\uff0c\u5c31\u80fd\u5f97\u5230\u6700\u5927\u7684\u77e9\u5f62\u7684\u9762\u79ef\u3002\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u5176\u4e2d n \u662f\u6570\u7ec4 heights \u7684\u957f\u5ea6\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u5176\u4e2d n \u662f\u6570\u7ec4 heights \u7684\u957f\u5ea6\u3002\n        # \u6267\u884c\u7528\u65f6\uff1a40 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.93%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n        # \u8fd9\u91cc\u7684\u5355\u8c03\u6808\u662f\u6307\u6808\u4e2d\u5b58\u50a8\u7684\u5143\u7d20\u662f\u5355\u8c03\u9012\u51cf\u7684\u3002\n        # \u5982\u679c\u6808\u4e2d\u5b58\u50a8\u7684\u662f\u5355\u8c03\u9012\u589e\u7684\u5143\u7d20\u5e8f\u5217\uff0c\u90a3\u4e48\u5c31\u662f\u5355\u8c03\u6808\u7684\u9006\u5e8f\u3002\n        # \u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u5355\u8c03\u6808\u6765\u89e3\u51b3\u8fd9\u9053\u9898\u3002\n        # \u5355\u8c03\u6808\u7684\u601d\u60f3\u662f\uff0c\u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5c0f\uff0c\u5219\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u5e76\u4e14\u8ba1\u7b97\u5f53\u524d\u5143\u7d20\u4e0e\u6808\u9876\u5143\u7d20\u7684\u9762\u79ef\uff0c\n        # \u7136\u540e\u5c06\u5f53\u524d\u5143\u7d20\u538b\u5165\u6808\u4e2d\uff0c\u5426\u5219\u76f4\u63a5\u538b\u5165\u6808\u4e2d\u3002\n        # \u8fd9\u6837\u5c31\u80fd\u4fdd\u8bc1\u6808\u4e2d\u5b58\u50a8\u7684\u662f\u5355\u8c03\u9012\u51cf\u7684\u5143\u7d20\u5e8f\u5217\u3002\n        # \u5f53\u904d\u5386\u5b8c\u6240\u6709\u5143\u7d20\u540e\uff0c\u6808\u4e2d\u5269\u4e0b\u7684\u5143\u7d20\u5c31\u662f\u6700\u5927\u7684\u77e9\u5f62\u7684\u5e95\u90e8\uff0c\n        # \u56e0\u6b64\u53ea\u9700\u8981\u904d\u5386\u4e00\u904d\u6808\uff0c\u8ba1\u7b97\u6bcf\u4e2a\u5143\u7d20\u4e0e\u6808\u9876\u5143\u7d20\u7684\u9762\u79ef\uff0c\u5c31\u80fd\u5f97\u5230\u6700\u5927\u7684\u77e9\u5f62\u7684\u9762\u79ef\u3002\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u5176\u4e2d n \u662f\u6570\u7ec4 heights \u7684\u957f\u5ea6\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u5176\u4e2d n \u662f\u6570\u7ec4 heights \u7684\u957f\u5ea6\u3002\n        # \u6267\u884c\u7528\u65f6\uff1a40 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.93%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n        # \u8fd9\u91cc\u7684\u5355\u8c03\u6808\u662f\u6307\u6808\u4e2d\u5b58\u50a8\u7684\u5143\u7d20\u662f\u5355\u8c03\u9012\u51cf\u7684\u3002\n        # \u5982\u679c\u6808\u4e2d\u5b58\u50a8\u7684\u662f\u5355\u8c03\u9012\u589e\u7684\u5143\u7d20\u5e8f\u5217\uff0c\u90a3\u4e48\u5c31\u662f\u5355\u8c03\u6808\u7684\u9006\u5e8f\u3002\n        # \u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u5355\u8c03\u6808\u6765\u89e3\u51b3\u8fd9\u9053\u9898\u3002\n        # \u5355\u8c03\u6808\u7684\u601d\u60f3\u662f\uff0c\u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5c0f\uff0c\u5219\u5f39\u51fa\ufffd"}], "evaluate-reverse-polish-notation": [{"task_id": "evaluate-reverse-polish-notation", "completion": "class Solution(object):\n    def evalRPN(self, tokens):\n        \"\"\"\n        :type tokens: List[str]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        for token in tokens:\n            if token in ['+', '-', '*', '/']:\n                num2 = stack.pop()\n                num1 = stack.pop()\n                if token == '+':\n                    stack.append(num1 + num2)\n                elif token == '-':\n                    stack.append(num1 - num2)\n                elif token == '*':\n                    stack.append(num1 * num2)\n                else:\n                    stack.append(int(num1 / num2))\n            else:\n                stack.append(int(token))\n        return stack.pop()"}, {"task_id": "evaluate-reverse-polish-notation", "completion": "class Solution(object):\n    def evalRPN(self, tokens):\n        \"\"\"\n        :type tokens: List[str]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        for token in tokens:\n            if token in ['+', '-', '*', '/']:\n                num2 = stack.pop()\n                num1 = stack.pop()\n                if token == '+':\n                    stack.append(num1 + num2)\n                elif token == '-':\n                    stack.append(num1 - num2)\n                elif token == '*':\n                    stack.append(num1 * num2)\n                else:\n                    stack.append(int(num1 / num2))\n            else:\n                stack.append(int(token))\n        return stack.pop()"}, {"task_id": "evaluate-reverse-polish-notation", "completion": "class Solution(object):\n    def evalRPN(self, tokens):\n        \"\"\"\n        :type tokens: List[str]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        for token in tokens:\n            if token in ['+', '-', '*', '/']:\n                num2 = stack.pop()\n                num1 = stack.pop()\n                if token == '+':\n                    stack.append(num1 + num2)\n                elif token == '-':\n                    stack.append(num1 - num2)\n                elif token == '*':\n                    stack.append(num1 * num2)\n                else:\n                    stack.append(int(num1 / num2))\n            else:\n                stack.append(int(token))\n        return stack[0]"}, {"task_id": "evaluate-reverse-polish-notation", "completion": "class Solution(object):\n    def evalRPN(self, tokens):\n        \"\"\"\n        :type tokens: List[str]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        for token in tokens:\n            if token in ['+', '-', '*', '/']:\n                num2 = stack.pop()\n                num1 = stack.pop()\n                if token == '+':\n                    stack.append(num1 + num2)\n                elif token == '-':\n                    stack.append(num1 - num2)\n                elif token == '*':\n                    stack.append(num1 * num2)\n                else:\n                    stack.append(int(num1 / num2))\n            else:\n                stack.append(int(token))\n        return stack.pop()"}, {"task_id": "evaluate-reverse-polish-notation", "completion": "class Solution(object):\n    def evalRPN(self, tokens):\n        \"\"\"\n        :type tokens: List[str]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        for token in tokens:\n            if token in ['+', '-', '*', '/']:\n                num2 = stack.pop()\n                num1 = stack.pop()\n                if token == '+':\n                    stack.append(num1 + num2)\n                elif token == '-':\n                    stack.append(num1 - num2)\n                elif token == '*':\n                    stack.append(num1 * num2)\n                else:\n                    stack.append(int(num1 / num2))\n            else:\n                stack.append(int(token))\n        return stack.pop()"}], "perfect-rectangle": [{"task_id": "perfect-rectangle", "completion": "class Solution(object):\n    def isRectangleCover(self, rectangles):\n        \"\"\"\n        :type rectangles: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. sort the rectangles by their area\n        # 2. check if the rectangles are sorted in ascending order\n        # 3. check if the rectangles are sorted in descending order\n        # 4. check if the rectangles are sorted in ascending order and the last rectangle is the largest\n        # 5. check if the rectangles are sorted in descending order and the last rectangle is the smallest\n        # 6. check if the rectangles are sorted in ascending order and the last rectangle is the smallest\n        # 7. check if the rectangles are sorted in descending order and the last rectangle is the largest\n        # 8. check if the rectangles are sorted in ascending order and the last rectangle is the largest\n        # 9. check if the rectangles are sorted in descending order and the last rectangle is the smallest\n        # 10. check if the rectangles are sorted in ascending order and the last rectangle is the smallest\n        # 11. check if the rectangles are sorted in descending order and the last rectangle is the largest\n        # 12. check if the rectangles are sorted in ascending order and the last rectangle is the largest\n        # 13. check if the rectangles are sorted in descending order and the last rectangle is the smallest\n        # 14. check if the rectangles are sorted in ascending order and the last rectangle is the smallest\n        # 15. check if the rectangles are sorted in descending order and the last rectangle is the largest\n        # 16. check if the rectangles are sorted in ascending order and the last rectangle is the largest\n        # 17. check if the rectangles are sorted in descending order and the last rectangle is the smallest\n        # 18. check if the rectangles are sorted in ascending order and the last rectangle is the smallest\n        # 19. check if the rectangles are sorted in descending order and the last rectangle is the largest\n        # 20. check if the rectangles are sorted in ascending order and the last rectangle is the largest\n        # 21. check if the rectangles are sorted in descending order and the last rectangle is the smallest\n        # 22. check if the rectangles are sorted in ascending order and the last rectangle is the smallest\n        # 23. check if the rectangles are sorted in descending order and the last rectangle is the largest\n        # 24. check if the rectangles are sorted in ascending order and the last rectangle is the largest\n        # 25. check if the rectangles are sorted in descending order and the last rectangle is the smallest\n        # 26. check if the rectangles are sorted in ascending order and the last rectangle is the smallest\n        # 27. check if the rectangles are sorted in descending order and the last rectangle is the largest\n        # 28. check if the rectangles are sorted in ascending order and the last rectangle is the largest\n        # 29. check if the rectangles are sorted in descending order and the last rectangle is the smallest\n        # 30. check if the rectangles are sorted in ascending order and the last rectangle is the smallest\n        # 31. check if the rectangles are sorted in descending order and the last rectangle is the largest\n        # 32. check if the rectangles are sorted in ascending order and the last rectangle is the largest\n        # 33. check if the rectangles are sorted in descending order and the last rectangle is the smallest\n        # 34. check if the rectangles are sorted in ascending order and the last rectangle is the smallest\n        # 35. check if the rectangles are sorted in descending order and the last rectangle is the largest\n        # 36. check if the rectangles are sorted in ascending order and the last rectangle is the largest\n        # 37. check if the rectangles are sorted in descending order and the last rectangle is the smallest\n        # 38. check if the rectangles are sorted in ascending order and the last rectangle is the smallest\n        # 39. check if the rectangles are sorted in descending order and the last rectangle is the largest\n        # 40. check if the rectangles are sorted in ascending order and the last rectangle is the largest\n        # 41. check if the rectangles are sorted in descending order and the last rectangle is the smallest\n        # 42. check if the rectangles are sorted in ascending order and the last rectangle is the smallest\n        # 43. check if"}, {"task_id": "perfect-rectangle", "completion": "class Solution(object):\n    def isRectangleCover(self, rectangles):\n        \"\"\"\n        :type rectangles: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. sort the rectangles by their area\n        # 2. check if the rectangles are sorted in non-decreasing order of their area\n        # 3. check if the rectangles are sorted in non-increasing order of their x-coordinates\n        # 4. check if the rectangles are sorted in non-increasing order of their y-coordinates\n        # 5. check if the rectangles are sorted in non-increasing order of their x-coordinates\n        # 6. check if the rectangles are sorted in non-increasing order of their y-coordinates\n        # 7. check if the rectangles are sorted in non-decreasing order of their area\n        # 8. check if the rectangles are sorted in non-decreasing order of their x-coordinates\n        # 9. check if the rectangles are sorted in non-decreasing order of their y-coordinates\n        # 10. check if the rectangles are sorted in non-decreasing order of their area\n        # 11. check if the rectangles are sorted in non-decreasing order of their x-coordinates\n        # 12. check if the rectangles are sorted in non-decreasing order of their y-coordinates\n        # 13. check if the rectangles are sorted in non-decreasing order of their area\n        # 14. check if the rectangles are sorted in non-decreasing order of their x-coordinates\n        # 15. check if the rectangles are sorted in non-decreasing order of their y-coordinates\n        # 16. check if the rectangles are sorted in non-decreasing order of their area\n        # 17. check if the rectangles are sorted in non-decreasing order of their x-coordinates\n        # 18. check if the rectangles are sorted in non-decreasing order of their y-coordinates\n        # 19. check if the rectangles are sorted in non-decreasing order of their area\n        # 20. check if the rectangles are sorted in non-decreasing order of their x-coordinates\n        # 21. check if the rectangles are sorted in non-decreasing order of their y-coordinates\n        # 22. check if the rectangles are sorted in non-decreasing order of their area\n        # 23. check if the rectangles are sorted in non-decreasing order of their x-coordinates\n        # 24. check if the rectangles are sorted in non-decreasing order of their y-coordinates\n        # 25. check if the rectangles are sorted in non-decreasing order of their area\n        # 26. check if the rectangles are sorted in non-decreasing order of their x-coordinates\n        # 27. check if the rectangles are sorted in non-decreasing order of their y-coordinates\n        # 28. check if the rectangles are sorted in non-decreasing order of their area\n        # 29. check if the rectangles are sorted in non-decreasing order of their x-coordinates\n        # 30. check if the rectangles are sorted in non-decreasing order of their y-coordinates\n        # 31. check if the rectangles are sorted in non-decreasing order of their area\n        # 32. check if the rectangles are sorted in non-decreasing order of their x-coordinates\n        # 33. check if the rectangles are sorted in non-decreasing order of their y-coordinates\n        # 34. check if the rectangles are sorted in non-decreasing order of their area\n        # 35. check if the rectangles are sorted in non-decreasing order of their x-coordinates\n        # 36. check if the rectangles are sorted in non-decreasing order of their y-coordinates\n        # 37. check if the rectangles are sorted in non-decreasing order of their area\n        # 38. check if the rectangles are sorted in non-decreasing order of their x-coordinates\n        # 39. check if the rectangles are sorted in non-decreasing order of their y-coordinates\n        # 40. check if the rectangles are sorted in non-decreasing order of their area\n        # 41"}, {"task_id": "perfect-rectangle", "completion": "class Solution(object):\n    def isRectangleCover(self, rectangles):\n        \"\"\"\n        :type rectangles: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. sort the rectangles by their area\n        # 2. check if the rectangles are sorted in ascending order\n        # 3. check if the rectangles are sorted in descending order\n        # 4. check if the rectangles are sorted in ascending order and the last rectangle is the largest\n        # 5. check if the rectangles are sorted in descending order and the last rectangle is the smallest\n        # 6. check if the rectangles are sorted in ascending order and the last rectangle is the smallest\n        # 7. check if the rectangles are sorted in descending order and the last rectangle is the largest\n        # 8. check if the rectangles are sorted in ascending order and the last rectangle is the largest\n        # 9. check if the rectangles are sorted in descending order and the last rectangle is the smallest\n        # 10. check if the rectangles are sorted in ascending order and the last rectangle is the smallest\n        # 11. check if the rectangles are sorted in descending order and the last rectangle is the largest\n        # 12. check if the rectangles are sorted in ascending order and the last rectangle is the largest\n        # 13. check if the rectangles are sorted in descending order and the last rectangle is the smallest\n        # 14. check if the rectangles are sorted in ascending order and the last rectangle is the smallest\n        # 15. check if the rectangles are sorted in descending order and the last rectangle is the largest\n        # 16. check if the rectangles are sorted in ascending order and the last rectangle is the largest\n        # 17. check if the rectangles are sorted in descending order and the last rectangle is the smallest\n        # 18. check if the rectangles are sorted in ascending order and the last rectangle is the smallest\n        # 19. check if the rectangles are sorted in descending order and the last rectangle is the largest\n        # 20. check if the rectangles are sorted in ascending order and the last rectangle is the largest\n        # 21. check if the rectangles are sorted in descending order and the last rectangle is the smallest\n        # 22. check if the rectangles are sorted in ascending order and the last rectangle is the smallest\n        # 23. check if the rectangles are sorted in descending order and the last rectangle is the largest\n        # 24. check if the rectangles are sorted in ascending order and the last rectangle is the largest\n        # 25. check if the rectangles are sorted in descending order and the last rectangle is the smallest\n        # 26. check if the rectangles are sorted in ascending order and the last rectangle is the smallest\n        # 27. check if the rectangles are sorted in descending order and the last rectangle is the largest\n        # 28. check if the rectangles are sorted in ascending order and the last rectangle is the largest\n        # 29. check if the rectangles are sorted in descending order and the last rectangle is the smallest\n        # 30. check if the rectangles are sorted in ascending order and the last rectangle is the smallest\n        # 31. check if the rectangles are sorted in descending order and the last rectangle is the largest\n        # 32. check if the rectangles are sorted in ascending order and the last rectangle is the largest\n        # 33. check if the rectangles are sorted in descending order and the last rectangle is the smallest\n        # 34. check if the rectangles are sorted in ascending order and the last rectangle is the smallest\n        # 35. check if the rectangles are sorted in descending order and the last rectangle is the largest\n        # 36. check if the rectangles are sorted in ascending order and the last rectangle is the largest\n        # 37. check if the rectangles are sorted in descending order and the last rectangle is the smallest\n        # 38. check if the rectangles are sorted in ascending order and the last rectangle is the smallest\n        # 39. check if the rectangles are sorted in descending order and the last rectangle is the largest\n        # 40. check if the rectangles are sorted in ascending order and the last rectangle is the largest\n        # 41. check if the rectangles are sorted in descending order and the last rectangle is the smallest\n        # 42. check if the rectangles are sorted in ascending order and the last rectangle is the smallest\n        # 43. check if"}, {"task_id": "perfect-rectangle", "completion": "class Solution(object):\n    def isRectangleCover(self, rectangles):\n        \"\"\"\n        :type rectangles: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. Sort the rectangles by their area\n        # 2. Check if the rectangles are sorted in ascending order\n        # 3. Check if the rectangles are sorted in descending order\n        # 4. Check if the rectangles are sorted in ascending order and the last rectangle is the largest\n        # 5. Check if the rectangles are sorted in descending order and the last rectangle is the smallest\n        # 6. Check if the rectangles are sorted in ascending order and the last rectangle is the smallest\n        # 7. Check if the rectangles are sorted in descending order and the last rectangle is the largest\n        # 8. Check if the rectangles are sorted in ascending order and the last rectangle is the largest\n        # 9. Check if the rectangles are sorted in descending order and the last rectangle is the smallest\n        # 10. Check if the rectangles are sorted in ascending order and the last rectangle is the smallest\n        # 11. Check if the rectangles are sorted in descending order and the last rectangle is the largest\n        # 12. Check if the rectangles are sorted in ascending order and the last rectangle is the largest\n        # 13. Check if the rectangles are sorted in descending order and the last rectangle is the smallest\n        # 14. Check if the rectangles are sorted in ascending order and the last rectangle is the smallest\n        # 15. Check if the rectangles are sorted in descending order and the last rectangle is the largest\n        # 16. Check if the rectangles are sorted in ascending order and the last rectangle is the largest\n        # 17. Check if the rectangles are sorted in descending order and the last rectangle is the smallest\n        # 18. Check if the rectangles are sorted in ascending order and the last rectangle is the smallest\n        # 19. Check if the rectangles are sorted in descending order and the last rectangle is the largest\n        # 20. Check if the rectangles are sorted in ascending order and the last rectangle is the largest\n        # 21. Check if the rectangles are sorted in descending order and the last rectangle is the smallest\n        # 22. Check if the rectangles are sorted in ascending order and the last rectangle is the smallest\n        # 23. Check if the rectangles are sorted in descending order and the last rectangle is the largest\n        # 24. Check if the rectangles are sorted in ascending order and the last rectangle is the largest\n        # 25. Check if the rectangles are sorted in descending order and the last rectangle is the smallest\n        # 26. Check if the rectangles are sorted in ascending order and the last rectangle is the smallest\n        # 27. Check if the rectangles are sorted in descending order and the last rectangle is the largest\n        # 28. Check if the rectangles are sorted in ascending order and the last rectangle is the largest\n        # 29. Check if the rectangles are sorted in descending order and the last rectangle is the smallest\n        # 30. Check if the rectangles are sorted in ascending order and the last rectangle is the smallest\n        # 31. Check if the rectangles are sorted in descending order and the last rectangle is the largest\n        # 32. Check if the rectangles are sorted in ascending order and the last rectangle is the largest\n        # 33. Check if the rectangles are sorted in descending order and the last rectangle is the smallest\n        # 34. Check if the rectangles are sorted in ascending order and the last rectangle is the smallest\n        # 35. Check if the rectangles are sorted in descending order and the last rectangle is the largest\n        # 36. Check if the rectangles are sorted in ascending order and the last rectangle is the largest\n        # 37. Check if the rectangles are sorted in descending order and the last rectangle is the smallest\n        # 38. Check if the rectangles are sorted in ascending order and the last rectangle is the smallest\n        # 39. Check if the rectangles are sorted in descending order and the last rectangle is the largest\n        # 40. Check if the rectangles are sorted in ascending order and the last rectangle is the largest\n        # 41. Check if the rectangles are sorted in descending order and the last rectangle is the smallest\n        # 42. Check if the rectangles are sorted in ascending order and the last rectangle is the smallest\n        # 43. Check if"}, {"task_id": "perfect-rectangle", "completion": "class Solution(object):\n    def isRectangleCover(self, rectangles):\n        \"\"\"\n        :type rectangles: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. Sort the rectangles by their area\n        # 2. Check if the rectangles are sorted in ascending order of their area\n        # 3. Check if the rectangles are sorted in ascending order of their x-coordinates\n        # 4. Check if the rectangles are sorted in ascending order of their y-coordinates\n        # 5. Check if the rectangles are sorted in ascending order of their x-coordinates\n        # 6. Check if the rectangles are sorted in ascending order of their y-coordinates\n        # 7. Check if the rectangles are sorted in ascending order of their x-coordinates\n        # 8. Check if the rectangles are sorted in ascending order of their y-coordinates\n        # 9. Check if the rectangles are sorted in ascending order of their x-coordinates\n        # 10. Check if the rectangles are sorted in ascending order of their y-coordinates\n        # 11. Check if the rectangles are sorted in ascending order of their x-coordinates\n        # 12. Check if the rectangles are sorted in ascending order of their y-coordinates\n        # 13. Check if the rectangles are sorted in ascending order of their x-coordinates\n        # 14. Check if the rectangles are sorted in ascending order of their y-coordinates\n        # 15. Check if the rectangles are sorted in ascending order of their x-coordinates\n        # 16. Check if the rectangles are sorted in ascending order of their y-coordinates\n        # 17. Check if the rectangles are sorted in ascending order of their x-coordinates\n        # 18. Check if the rectangles are sorted in ascending order of their y-coordinates\n        # 19. Check if the rectangles are sorted in ascending order of their x-coordinates\n        # 20. Check if the rectangles are sorted in ascending order of their y-coordinates\n        # 21. Check if the rectangles are sorted in ascending order of their x-coordinates\n        # 22. Check if the rectangles are sorted in ascending order of their y-coordinates\n        # 23. Check if the rectangles are sorted in ascending order of their x-coordinates\n        # 24. Check if the rectangles are sorted in ascending order of their y-coordinates\n        # 25. Check if the rectangles are sorted in ascending order of their x-coordinates\n        # 26. Check if the rectangles are sorted in ascending order of their y-coordinates\n        # 27. Check if the rectangles are sorted in ascending order of their x-coordinates\n        # 28. Check if the rectangles are sorted in ascending order of their y-coordinates\n        # 29. Check if the rectangles are sorted in ascending order of their x-coordinates\n        # 30. Check if the rectangles are sorted in ascending order of their y-coordinates\n        # 31. Check if the rectangles are sorted in ascending order of their x-coordinates\n        # 32. Check if the rectangles are sorted in ascending order of their y-coordinates\n        # 33. Check if the rectangles are sorted in ascending order of their x-coordinates\n        # 34. Check if the rectangles are sorted in ascending order of their y-coordinates\n        # 35. Check if the rectangles are sorted in ascending order of their x-coordinates\n        # 36. Check if the rectangles are sorted in ascending order of their y-coordinates\n        # 37. Check if the rectangles are sorted in ascending order of their x-coordinates\n        # 38. Check if the rectangles are sorted in ascending order of their y-coordinates\n        # 39. Check if the rectangles are sorted in ascending order of their x-coordinates\n        # 40. Check if the rectangles are sorted in ascending order of their y-coordinates\n        # 41. Check if the rectangles are sorted in ascending order of their x-coordinates\n        # 42. Check if the rectangles are sorted in ascending order of their y-coordinates\n        # 43. Check if the rectangles are sorted in ascending order of their x-coordinates\n        # 44. Check if the rectangles are sorted in"}], "excel-sheet-column-title": [{"task_id": "excel-sheet-column-title", "completion": "class Solution(object):\n    def convertToTitle(self, columnNumber):\n        \"\"\"\n        :type columnNumber: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\n        # 2. \u627e\u5230\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u4f4d\u7f6e\n        # 3. \u628a\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u4f4d\u7f6e\u51cf\u53bb1\n        # 4. \u628a\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 5. \u628a\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 6. \u628a\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 7. \u628a\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 8. \u628a\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 9. \u628a\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 10. \u628a\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 11. \u628a\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 12. \u628a\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 13. \u628a\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 14. \u628a\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 15. \u628a\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 16. \u628a\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 17. \u628a\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 18. \u628a\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 19. \u628a\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 20. \u628a\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 21. \u628a\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 22. \u628a\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 23. \u628a\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 24. \u628a\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 25. \u628a\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 26. \u628a\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 27. \u628a\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 28. \u628a\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 29. \u628a\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 30. \u628a\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 31. \u628a\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 32. \u628a\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 33. \u628a\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 34. \u628a\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 35. \u628a\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 36. \u628a\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 37. \u628a\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 38. \u628a\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684"}, {"task_id": "excel-sheet-column-title", "completion": "class Solution(object):\n    def convertToTitle(self, columnNumber):\n        \"\"\"\n        :type columnNumber: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u5148\u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\n        # 2. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u5217\u6807\u9898\n        # 3. \u8fd4\u56de\u5217\u6807\u9898\n        # 4. \u5982\u679c\u6570\u5b57\u8d85\u8fc726\uff0c\u5219\u628a\u6570\u5b57\u9664\u4ee526\uff0c\u7136\u540e\u518d\u628a\u4f59\u6570\u52a0\u5230\u5b57\u7b26\u4e32\u4e2d\n        # 5. \u5982\u679c\u6570\u5b57\u4e0d\u8d85\u8fc726\uff0c\u5219\u76f4\u63a5\u628a\u6570\u5b57\u52a0\u5230\u5b57\u7b26\u4e32\u4e2d\n        # 6. \u5982\u679c\u6570\u5b57\u4e3a0\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\n        # 7. \u5982\u679c\u6570\u5b57\u4e3a\u8d1f\u6570\uff0c\u5219\u629b\u51fa\u5f02\u5e38\n        # 8. \u5982\u679c\u6570\u5b57\u4e3a0\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\n        # 9. \u5982\u679c\u6570\u5b57\u4e3a\u8d1f\u6570\uff0c\u5219\u629b\u51fa\u5f02\u5e38\n        # 10. \u5982\u679c\u6570\u5b57\u4e3a0\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\n        # 11. \u5982\u679c\u6570\u5b57\u4e3a\u8d1f\u6570\uff0c\u5219\u629b\u51fa\u5f02\u5e38\n        # 12. \u5982\u679c\u6570\u5b57\u4e3a0\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\n        # 13. \u5982\u679c\u6570\u5b57\u4e3a\u8d1f\u6570\uff0c\u5219\u629b\u51fa\u5f02\u5e38\n        # 14. \u5982\u679c\u6570\u5b57\u4e3a0\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\n        # 15. \u5982\u679c\u6570\u5b57\u4e3a\u8d1f\u6570\uff0c\u5219\u629b\u51fa\u5f02\u5e38\n        # 16. \u5982\u679c\u6570\u5b57\u4e3a0\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\n        # 17. \u5982\u679c\u6570\u5b57\u4e3a\u8d1f\u6570\uff0c\u5219\u629b\u51fa\u5f02\u5e38\n        # 18. \u5982\u679c\u6570\u5b57\u4e3a0\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\n        # 19. \u5982\u679c\u6570\u5b57\u4e3a\u8d1f\u6570\uff0c\u5219\u629b\u51fa\u5f02\u5e38\n        # 20. \u5982\u679c\u6570\u5b57\u4e3a0\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\n        # 21. \u5982\u679c\u6570\u5b57\u4e3a\u8d1f\u6570\uff0c\u5219\u629b\u51fa\u5f02\u5e38\n        # 22. \u5982\u679c\u6570\u5b57\u4e3a0\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\n        # 23. \u5982\u679c\u6570\u5b57\u4e3a\u8d1f\u6570\uff0c\u5219\u629b\u51fa\u5f02\u5e38\n        # 24. \u5982\u679c\u6570\u5b57\u4e3a0\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\n        # 25. \u5982\u679c\u6570\u5b57\u4e3a\u8d1f\u6570\uff0c\u5219\u629b\u51fa\u5f02\u5e38\n        # 26. \u5982\u679c\u6570\u5b57\u4e3a0\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\n        # 27. \u5982\u679c\u6570\u5b57\u4e3a\u8d1f\u6570\uff0c\u5219\u629b\u51fa\u5f02\u5e38\n        # 28. \u5982\u679c\u6570\u5b57\u4e3a0\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\n        # 29. \u5982\u679c\u6570\u5b57\u4e3a\u8d1f\u6570\uff0c\u5219\u629b\u51fa\u5f02\u5e38\n        # 30. \u5982\u679c\u6570\u5b57\u4e3a0\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\n        # 31. \u5982\u679c\u6570\u5b57\u4e3a\u8d1f\u6570\uff0c\u5219\u629b\u51fa\u5f02\u5e38\n        # 32. \u5982\u679c\u6570\u5b57\u4e3a0\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\n        # 33. \u5982\u679c\u6570\u5b57\u4e3a\u8d1f\u6570\uff0c\u5219\u629b\u51fa\u5f02\u5e38\n        # 34. \u5982\u679c\u6570\u5b57\u4e3a0\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\n        # 35. \u5982\u679c\u6570\u5b57\u4e3a\u8d1f\u6570\uff0c\u5219\u629b\u51fa\u5f02\u5e38\n        # 36. \u5982\u679c\u6570\u5b57\u4e3a0\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\n        # 37. \u5982\u679c\u6570\u5b57\u4e3a\u8d1f\u6570\uff0c\u5219\u629b\u51fa\u5f02\u5e38\n        # 38. \u5982\u679c\u6570\u5b57\u4e3a0\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\n        # 39. \u5982\u679c\u6570\u5b57\u4e3a\u8d1f\u6570\uff0c\u5219\u629b\u51fa\u5f02\u5e38\n        # 40. \u5982\u679c\u6570\u5b57\u4e3a0\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\n        # 41. \u5982\u679c\u6570\u5b57\u4e3a\ufffd"}, {"task_id": "excel-sheet-column-title", "completion": "class Solution(object):\n    def convertToTitle(self, columnNumber):\n        \"\"\"\n        :type columnNumber: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u5148\u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\n        # 2. \u7136\u540e\u628a\u5b57\u7b26\u4e32\u7684\u6bcf\u4e2a\u5b57\u7b26\u90fd\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 3. \u6700\u540e\u628a\u5b57\u6bcd\u62fc\u63a5\u8d77\u6765\n        # 4. \u8fd4\u56de\u5b57\u6bcd\n        # 5. \u5982\u679c\u5b57\u6bcd\u8d85\u8fc726\u4e2a\uff0c\u5c31\u628a\u5b57\u6bcd\u8f6c\u6362\u6210\u5927\u5199\n        # 6. \u5982\u679c\u5b57\u6bcd\u8d85\u8fc726\u4e2a\uff0c\u5c31\u628a\u5b57\u6bcd\u8f6c\u6362\u6210\u5c0f\u5199\n        # 7. \u5982\u679c\u5b57\u6bcd\u8d85\u8fc726\u4e2a\uff0c\u5c31\u628a\u5b57\u6bcd\u8f6c\u6362\u6210\u5927\u5199\n        # 8. \u5982\u679c\u5b57\u6bcd\u8d85\u8fc726\u4e2a\uff0c\u5c31\u628a\u5b57\u6bcd\u8f6c\u6362\u6210\u5c0f\u5199\n        # 9. \u5982\u679c\u5b57\u6bcd\u8d85\u8fc726\u4e2a\uff0c\u5c31\u628a\u5b57\u6bcd\u8f6c\u6362\u6210\u5927\u5199\n        # 10. \u5982\u679c\u5b57\u6bcd\u8d85\u8fc726\u4e2a\uff0c\u5c31\u628a\u5b57\u6bcd\u8f6c\u6362\u6210\u5c0f\u5199\n        # 11. \u5982\u679c\u5b57\u6bcd\u8d85\u8fc726\u4e2a\uff0c\u5c31\u628a\u5b57\u6bcd\u8f6c\u6362\u6210\u5927\u5199\n        # 12. \u5982\u679c\u5b57\u6bcd\u8d85\u8fc726\u4e2a\uff0c\u5c31\u628a\u5b57\u6bcd\u8f6c\u6362\u6210\u5c0f\u5199\n        # 13. \u5982\u679c\u5b57\u6bcd\u8d85\u8fc726\u4e2a\uff0c\u5c31\u628a\u5b57\u6bcd\u8f6c\u6362\u6210\u5927\u5199\n        # 14. \u5982\u679c\u5b57\u6bcd\u8d85\u8fc726\u4e2a\uff0c\u5c31\u628a\u5b57\u6bcd\u8f6c\u6362\u6210\u5c0f\u5199\n        # 15. \u5982\u679c\u5b57\u6bcd\u8d85\u8fc726\u4e2a\uff0c\u5c31\u628a\u5b57\u6bcd\u8f6c\u6362\u6210\u5927\u5199\n        # 16. \u5982\u679c\u5b57\u6bcd\u8d85\u8fc726\u4e2a\uff0c\u5c31\u628a\u5b57\u6bcd\u8f6c\u6362\u6210\u5c0f\u5199\n        # 17. \u5982\u679c\u5b57\u6bcd\u8d85\u8fc726\u4e2a\uff0c\u5c31\u628a\u5b57\u6bcd\u8f6c\u6362\u6210\u5927\u5199\n        # 18. \u5982\u679c\u5b57\u6bcd\u8d85\u8fc726\u4e2a\uff0c\u5c31\u628a\u5b57\u6bcd\u8f6c\u6362\u6210\u5c0f\u5199\n        # 19. \u5982\u679c\u5b57\u6bcd\u8d85\u8fc726\u4e2a\uff0c\u5c31\u628a\u5b57\u6bcd\u8f6c\u6362\u6210\u5927\u5199\n        # 20. \u5982\u679c\u5b57\u6bcd\u8d85\u8fc726\u4e2a\uff0c\u5c31\u628a\u5b57\u6bcd\u8f6c\u6362\u6210\u5c0f\u5199\n        # 21. \u5982\u679c\u5b57\u6bcd\u8d85\u8fc726\u4e2a\uff0c\u5c31\u628a\u5b57\u6bcd\u8f6c\u6362\u6210\u5927\u5199\n        # 22. \u5982\u679c\u5b57\u6bcd\u8d85\u8fc726\u4e2a\uff0c\u5c31\u628a\u5b57\u6bcd\u8f6c\u6362\u6210\u5c0f\u5199\n        # 23. \u5982\u679c\u5b57\u6bcd\u8d85\u8fc726\u4e2a\uff0c\u5c31\u628a\u5b57\u6bcd\u8f6c\u6362\u6210\u5927\u5199\n        # 24. \u5982\u679c\u5b57\u6bcd\u8d85\u8fc726\u4e2a\uff0c\u5c31\u628a\u5b57\u6bcd\u8f6c\u6362\u6210\u5c0f\u5199\n        # 25. \u5982\u679c\u5b57\u6bcd\u8d85\u8fc726\u4e2a\uff0c\u5c31\u628a\u5b57\u6bcd\u8f6c\u6362\u6210\u5927\u5199\n        # 26. \u5982\u679c\u5b57\u6bcd\u8d85\u8fc726\u4e2a\uff0c\u5c31\u628a\u5b57\u6bcd\u8f6c\u6362\u6210\u5c0f\u5199\n        # 27. \u5982\u679c\u5b57\u6bcd\u8d85\u8fc726\u4e2a\uff0c\u5c31\u628a\u5b57\u6bcd\u8f6c\u6362\u6210\u5927\u5199\n        # 28. \u5982\u679c\u5b57\u6bcd\u8d85\u8fc726\u4e2a\uff0c\u5c31\u628a\u5b57\u6bcd\u8f6c\u6362\u6210\u5c0f\u5199\n        # 29. \u5982\u679c\u5b57\u6bcd\u8d85\u8fc726\u4e2a\uff0c\u5c31\u628a\u5b57\u6bcd\u8f6c\u6362\u6210\u5927\u5199\n        # 30. \u5982\u679c\u5b57\u6bcd\u8d85\u8fc726\u4e2a\uff0c\u5c31\u628a\u5b57\u6bcd\u8f6c\u6362\u6210\u5c0f\u5199\n        # 31. \u5982\u679c\u5b57\u6bcd\u8d85\u8fc726\u4e2a\uff0c\u5c31\u628a\u5b57\u6bcd\u8f6c\u6362\u6210\u5927\u5199\n        # 32. \u5982\u679c\u5b57\u6bcd\u8d85\u8fc726\u4e2a\uff0c\u5c31\u628a\u5b57\u6bcd\u8f6c\u6362\u6210\u5c0f\u5199\n        # 33. \u5982\u679c\u5b57\u6bcd\u8d85\u8fc726\u4e2a\uff0c\u5c31\u628a\u5b57\u6bcd\u8f6c\u6362\u6210\u5927\u5199\n        # 34. \u5982\u679c\u5b57\u6bcd\u8d85\u8fc726\u4e2a\uff0c\u5c31\u628a\u5b57\u6bcd\u8f6c\u6362\u6210\u5c0f\u5199\n        # 35. \u5982\u679c\u5b57\u6bcd\u8d85\u8fc726\u4e2a\uff0c\u5c31\u628a\u5b57\u6bcd\u8f6c\u6362\u6210\u5927\u5199\n        # 36. \u5982\u679c\u5b57\u6bcd\u8d85\u8fc726\u4e2a\uff0c\u5c31\u628a\u5b57\u6bcd\u8f6c\u6362\u6210\u5c0f\u5199\n        # 37. \u5982\u679c\u5b57\u6bcd\u8d85\u8fc726\u4e2a\uff0c\u5c31\u628a\u5b57\u6bcd\u8f6c\u6362"}, {"task_id": "excel-sheet-column-title", "completion": "class Solution(object):\n    def convertToTitle(self, columnNumber):\n        \"\"\"\n        :type columnNumber: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\n        # 2. \u627e\u5230\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u4f4d\u7f6e\n        # 3. \u628a\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u4f4d\u7f6e\u51cf\u53bb1\n        # 4. \u628a\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u62ff\u51fa\u6765\n        # 5. \u628a\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u62fc\u63a5\u5230\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u524d\u9762\n        # 6. \u628a\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u62fc\u63a5\u5230\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u524d\u9762\n        # 7. \u628a\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u62fc\u63a5\u5230\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u524d\u9762\n        # 8. \u628a\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u62fc\u63a5\u5230\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u524d\u9762\n        # 9. \u628a\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u62fc\u63a5\u5230\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u524d\u9762\n        # 10. \u628a\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u62fc\u63a5\u5230\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u524d\u9762\n        # 11. \u628a\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u62fc\u63a5\u5230\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u524d\u9762\n        # 12. \u628a\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u62fc\u63a5\u5230\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u524d\u9762\n        # 13. \u628a\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u62fc\u63a5\u5230\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u524d\u9762\n        # 14. \u628a\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u62fc\u63a5\u5230\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u524d\u9762\n        # 15. \u628a\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u62fc\u63a5\u5230\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u524d\u9762\n        # 16. \u628a\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u62fc\u63a5\u5230\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u524d\u9762\n        # 17. \u628a\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u62fc\u63a5\u5230\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u524d\u9762\n        # 18. \u628a\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u62fc\u63a5\u5230\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u524d\u9762\n        # 19. \u628a\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u62fc\u63a5\u5230\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u524d\u9762\n        # 20. \u628a\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u62fc\u63a5\u5230\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u524d\u9762\n        # 21. \u628a\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u62fc\u63a5\u5230\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u524d\u9762\n        # 22. \u628a\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u62fc\u63a5\u5230\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u524d\u9762\n        # 23. \u628a\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u62fc\u63a5\u5230\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u524d\u9762\n        # 24. \u628a\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u62fc\u63a5\u5230\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u524d\u9762\n        # 25. \u628a\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u62fc\u63a5\u5230\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u524d\u9762\n        # 26. \u628a\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u62fc\u63a5\u5230\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u524d\u9762\n        # 27. \u628a\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u62fc\u63a5\u5230\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u524d\u9762\n        # 28. \u628a\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u62fc\u63a5\u5230\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u524d\u9762\n        # 29. \u628a\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u62fc\u63a5\u5230\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u524d\u9762\n        # 30. \u628a\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd"}, {"task_id": "excel-sheet-column-title", "completion": "class Solution(object):\n    def convertToTitle(self, columnNumber):\n        \"\"\"\n        :type columnNumber: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u5148\u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\n        # 2. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u5217\u6807\u9898\n        # 3. \u8fd4\u56de\u5217\u6807\u9898\n        # 4. \u5982\u679c\u6570\u5b57\u4e3a0\uff0c\u76f4\u63a5\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\n        # 5. \u5982\u679c\u6570\u5b57\u5927\u4e8e26\uff0c\u5219\u628a\u6570\u5b57\u9664\u4ee526\uff0c\u7136\u540e\u628a\u4f59\u6570\u52a0\u5230\u5b57\u7b26\u4e32\u4e2d\uff0c\u7136\u540e\u7ee7\u7eed\u5904\u7406\u5269\u4e0b\u7684\u6570\u5b57\n        # 6. \u5982\u679c\u6570\u5b57\u5c0f\u4e8e26\uff0c\u5219\u76f4\u63a5\u628a\u6570\u5b57\u52a0\u5230\u5b57\u7b26\u4e32\u4e2d\n        # 7. \u5982\u679c\u6570\u5b57\u4e3a0\uff0c\u76f4\u63a5\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\n        # 8. \u5982\u679c\u6570\u5b57\u5927\u4e8e26\uff0c\u5219\u628a\u6570\u5b57\u9664\u4ee526\uff0c\u7136\u540e\u628a\u4f59\u6570\u52a0\u5230\u5b57\u7b26\u4e32\u4e2d\uff0c\u7136\u540e\u7ee7\u7eed\u5904\u7406\u5269\u4e0b\u7684\u6570\u5b57\n        # 9. \u5982\u679c\u6570\u5b57\u5c0f\u4e8e26\uff0c\u5219\u76f4\u63a5\u628a\u6570\u5b57\u52a0\u5230\u5b57\u7b26\u4e32\u4e2d\n        # 10. \u5982\u679c\u6570\u5b57\u4e3a0\uff0c\u76f4\u63a5\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\n        # 11. \u5982\u679c\u6570\u5b57\u5927\u4e8e26\uff0c\u5219\u628a\u6570\u5b57\u9664\u4ee526\uff0c\u7136\u540e\u628a\u4f59\u6570\u52a0\u5230\u5b57\u7b26\u4e32\u4e2d\uff0c\u7136\u540e\u7ee7\u7eed\u5904\u7406\u5269\u4e0b\u7684\u6570\u5b57\n        # 12. \u5982\u679c\u6570\u5b57\u5c0f\u4e8e26\uff0c\u5219\u76f4\u63a5\u628a\u6570\u5b57\u52a0\u5230\u5b57\u7b26\u4e32\u4e2d\n        # 13. \u5982\u679c\u6570\u5b57\u4e3a0\uff0c\u76f4\u63a5\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\n        # 14. \u5982\u679c\u6570\u5b57\u5927\u4e8e26\uff0c\u5219\u628a\u6570\u5b57\u9664\u4ee526\uff0c\u7136\u540e\u628a\u4f59\u6570\u52a0\u5230\u5b57\u7b26\u4e32\u4e2d\uff0c\u7136\u540e\u7ee7\u7eed\u5904\u7406\u5269\u4e0b\u7684\u6570\u5b57\n        # 15. \u5982\u679c\u6570\u5b57\u5c0f\u4e8e26\uff0c\u5219\u76f4\u63a5\u628a\u6570\u5b57\u52a0\u5230\u5b57\u7b26\u4e32\u4e2d\n        # 16. \u5982\u679c\u6570\u5b57\u4e3a0\uff0c\u76f4\u63a5\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\n        # 17. \u5982\u679c\u6570\u5b57\u5927\u4e8e26\uff0c\u5219\u628a\u6570\u5b57\u9664\u4ee526\uff0c\u7136\u540e\u628a\u4f59\u6570\u52a0\u5230\u5b57\u7b26\u4e32\u4e2d\uff0c\u7136\u540e\u7ee7\u7eed\u5904\u7406\u5269\u4e0b\u7684\u6570\u5b57\n        # 18. \u5982\u679c\u6570\u5b57\u5c0f\u4e8e26\uff0c\u5219\u76f4\u63a5\u628a\u6570\u5b57\u52a0\u5230\u5b57\u7b26\u4e32\u4e2d\n        # 19. \u5982\u679c\u6570\u5b57\u4e3a0\uff0c\u76f4\u63a5\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\n        # 20. \u5982\u679c\u6570\u5b57\u5927\u4e8e26\uff0c\u5219\u628a\u6570\u5b57\u9664\u4ee526\uff0c\u7136\u540e\u628a\u4f59\u6570\u52a0\u5230\u5b57\u7b26\u4e32\u4e2d\uff0c\u7136\u540e\u7ee7\u7eed\u5904\u7406\u5269\u4e0b\u7684\u6570\u5b57\n        # 21. \u5982\u679c\u6570\u5b57\u5c0f\u4e8e26\uff0c\u5219\u76f4\u63a5\u628a\u6570\u5b57\u52a0\u5230\u5b57\u7b26\u4e32\u4e2d\n        # 22. \u5982\u679c\u6570\u5b57\u4e3a0\uff0c\u76f4\u63a5\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\n        # 23. \u5982\u679c\u6570\u5b57\u5927\u4e8e26\uff0c\u5219\u628a\u6570\u5b57\u9664\u4ee526\uff0c\u7136\u540e\u628a\u4f59\u6570\u52a0\u5230\u5b57\u7b26\u4e32\u4e2d\uff0c\u7136\u540e\u7ee7\u7eed\u5904\u7406\u5269\u4e0b\u7684\u6570\u5b57\n        # 24. \u5982\u679c\u6570\u5b57\u5c0f\u4e8e26\uff0c\u5219\u76f4\u63a5\u628a\u6570\u5b57\u52a0\u5230\u5b57\u7b26\u4e32\u4e2d\n        # 25. \u5982\u679c\u6570\u5b57\u4e3a0\uff0c\u76f4\u63a5\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\n        # 26. \u5982\u679c\u6570\u5b57\u5927\u4e8e26\uff0c\u5219\u628a\u6570\u5b57\u9664\u4ee526\uff0c\u7136\u540e\u628a\u4f59\u6570\u52a0\u5230\u5b57\u7b26\u4e32\u4e2d\uff0c\u7136\u540e\u7ee7\u7eed\u5904\u7406\u5269\u4e0b\u7684\u6570\u5b57\n        # 27. \u5982\u679c\u6570\u5b57\u5c0f\u4e8e26\uff0c\u5219\u76f4\u63a5\u628a\u6570\u5b57\u52a0\u5230\u5b57\u7b26\u4e32\u4e2d\n        # 28. \u5982\u679c\u6570\u5b57\u4e3a0\uff0c\u76f4\u63a5\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\n        # 29. \u5982\u679c\u6570\u5b57\u5927\u4e8e26\uff0c\u5219\u628a\u6570\u5b57\u9664\u4ee526\uff0c\u7136\u540e\u628a\u4f59\u6570\u52a0"}], "maximum-subarray": [{"task_id": "maximum-subarray", "completion": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Time Limit Exceeded\n        # return max(sum(nums[i:j]) for i in range(len(nums)) for j in range(i+1, len(nums)+1))\n        \n        # Time Limit Exceeded\n        # return max(sum(nums[i:]) for i in range(len(nums)))\n        \n        # Time Limit Exceeded\n        # return max(sum(nums[i:j]) for i in range(len(nums)) for j in range(i, len(nums)))\n        \n        # Time Limit Exceeded\n        # return max(sum(nums[i:j]) for i in range(len(nums)) for j in range(i, len(nums)))\n        \n        # Time Limit Exceeded\n        # return max(sum(nums[i:j]) for i in range(len(nums)) for j in range(i, len(nums)))\n        \n        # Time Limit Exceeded\n        # return max(sum(nums[i:j]) for i in range(len(nums)) for j in range(i, len(nums)))\n        \n        # Time Limit Exceeded\n        # return max(sum(nums[i:j]) for i in range(len(nums)) for j in range(i, len(nums)))\n        \n        # Time Limit Exceeded\n        # return max(sum(nums[i:j]) for i in range(len(nums)) for j in range(i, len(nums)))\n        \n        # Time Limit Exceeded\n        # return max(sum(nums[i:j]) for i in range(len(nums)) for j in range(i, len(nums)))\n        \n        # Time Limit Exceeded\n        # return max(sum(nums[i:j]) for i in range(len(nums)) for j in range(i, len(nums)))\n        \n        # Time Limit Exceeded\n        # return max(sum(nums[i:j]) for i in range(len(nums)) for j in range(i, len(nums)))\n        \n        # Time Limit Exceeded\n        # return max(sum(nums[i:j]) for i in range(len(nums)) for j in range(i, len(nums)))\n        \n        # Time Limit Exceeded\n        # return max(sum(nums[i:j]) for i in range(len(nums)) for j in range(i, len(nums)))\n        \n        # Time Limit Exceeded\n        # return max(sum(nums[i:j]) for i in range(len(nums)) for j in range(i, len(nums)))\n        \n        # Time Limit Exceeded\n        # return max(sum(nums[i:j]) for i in range(len(nums)) for j in range(i, len(nums)))\n        \n        # Time Limit Exceeded\n        # return max(sum(nums[i:j]) for i in range(len(nums)) for j in range(i, len(nums)))\n        \n        # Time Limit Exceeded\n        # return max(sum(nums[i:j]) for i in range(len(nums)) for j in range(i, len(nums)))\n        \n        # Time Limit Exceeded\n        # return max(sum(nums[i:j]) for i in range(len(nums)) for j in range(i, len(nums)))\n        \n        # Time Limit Exceeded\n        # return max(sum(nums[i:j]) for i in range(len(nums)) for j in range(i, len(nums)))\n        \n        # Time Limit Exceeded\n        # return max(sum(nums[i:j]) for i in range(len(nums)) for j in range(i, len(nums)))\n        \n        # Time Limit Exceeded\n        # return max(sum(nums[i:j]) for i in range(len(nums)) for j in range(i, len(nums)))\n        \n        # Time Limit Exceeded\n        # return max(sum(nums[i:j]) for i"}, {"task_id": "maximum-subarray", "completion": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. Brute force\n        # 2. DP\n        # 3. Divide and conquer\n        # 4. Binary search\n        # 5. Two pointers\n        # 6. Divide and conquer\n        # 7. Divide and conquer\n        # 8. Divide and conquer\n        # 9. Divide and conquer\n        # 10. Divide and conquer\n        # 11. Divide and conquer\n        # 12. Divide and conquer\n        # 13. Divide and conquer\n        # 14. Divide and conquer\n        # 15. Divide and conquer\n        # 16. Divide and conquer\n        # 17. Divide and conquer\n        # 18. Divide and conquer\n        # 19. Divide and conquer\n        # 20. Divide and conquer\n        # 21. Divide and conquer\n        # 22. Divide and conquer\n        # 23. Divide and conquer\n        # 24. Divide and conquer\n        # 25. Divide and conquer\n        # 26. Divide and conquer\n        # 27. Divide and conquer\n        # 28. Divide and conquer\n        # 29. Divide and conquer\n        # 30. Divide and conquer\n        # 31. Divide and conquer\n        # 32. Divide and conquer\n        # 33. Divide and conquer\n        # 34. Divide and conquer\n        # 35. Divide and conquer\n        # 36. Divide and conquer\n        # 37. Divide and conquer\n        # 38. Divide and conquer\n        # 39. Divide and conquer\n        # 40. Divide and conquer\n        # 41. Divide and conquer\n        # 42. Divide and conquer\n        # 43. Divide and conquer\n        # 44. Divide and conquer\n        # 45. Divide and conquer\n        # 46. Divide and conquer\n        # 47. Divide and conquer\n        # 48. Divide and conquer\n        # 49. Divide and conquer\n        # 50. Divide and conquer\n        # 51. Divide and conquer\n        # 52. Divide and conquer\n        # 53. Divide and conquer\n        # 54. Divide and conquer\n        # 55. Divide and conquer\n        # 56. Divide and conquer\n        # 57. Divide and conquer\n        # 58. Divide and conquer\n        # 59. Divide and conquer\n        # 60. Divide and conquer\n        # 61. Divide and conquer\n        # 62. Divide and conquer\n        # 63. Divide and conquer\n        # 64. Divide and conquer\n        # 65. Divide and conquer\n        # 66. Divide and conquer\n        # 67. Divide and conquer\n        # 68. Divide and conquer\n        # 69. Divide and conquer\n        # 70. Divide and conquer\n        # 71. Divide and conquer\n        # 72. Divide and conquer\n        # 73. Divide and conquer\n        # 74. Divide and conquer\n        # 75. Divide and conquer\n        # 76. Divide and conquer\n        # 77. Divide and conquer\n        # 78. Divide and conquer\n        # 79. Divide and conquer\n        # 80. Divide and conquer\n        # 81. Divide and conquer\n        # 82. Divide and conquer\n        # 83. Divide and conquer\n        # 84. Divide and conquer\n        # 85. Divide and conquer\n        # 86. Divide and conquer\n        # 87. Divide and conquer\n        # 88. Divide and conquer\n        # 89. Divide and conquer\n        # 90. Divide and conquer\n        # 91. Divide and conquer\n        # 92. Divide and conquer\n        # 93. Divide and conquer\n        # 94. Divide and conquer\n        # 95."}, {"task_id": "maximum-subarray", "completion": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. Brute force\n        # 2. DP\n        # 3. Divide and conquer\n        # 4. Binary search\n        # 5. Two pointers\n        # 6. Divide and conquer\n        # 7. Divide and conquer\n        # 8. Divide and conquer\n        # 9. Divide and conquer\n        # 10. Divide and conquer\n        # 11. Divide and conquer\n        # 12. Divide and conquer\n        # 13. Divide and conquer\n        # 14. Divide and conquer\n        # 15. Divide and conquer\n        # 16. Divide and conquer\n        # 17. Divide and conquer\n        # 18. Divide and conquer\n        # 19. Divide and conquer\n        # 20. Divide and conquer\n        # 21. Divide and conquer\n        # 22. Divide and conquer\n        # 23. Divide and conquer\n        # 24. Divide and conquer\n        # 25. Divide and conquer\n        # 26. Divide and conquer\n        # 27. Divide and conquer\n        # 28. Divide and conquer\n        # 29. Divide and conquer\n        # 30. Divide and conquer\n        # 31. Divide and conquer\n        # 32. Divide and conquer\n        # 33. Divide and conquer\n        # 34. Divide and conquer\n        # 35. Divide and conquer\n        # 36. Divide and conquer\n        # 37. Divide and conquer\n        # 38. Divide and conquer\n        # 39. Divide and conquer\n        # 40. Divide and conquer\n        # 41. Divide and conquer\n        # 42. Divide and conquer\n        # 43. Divide and conquer\n        # 44. Divide and conquer\n        # 45. Divide and conquer\n        # 46. Divide and conquer\n        # 47. Divide and conquer\n        # 48. Divide and conquer\n        # 49. Divide and conquer\n        # 50. Divide and conquer\n        # 51. Divide and conquer\n        # 52. Divide and conquer\n        # 53. Divide and conquer\n        # 54. Divide and conquer\n        # 55. Divide and conquer\n        # 56. Divide and conquer\n        # 57. Divide and conquer\n        # 58. Divide and conquer\n        # 59. Divide and conquer\n        # 60. Divide and conquer\n        # 61. Divide and conquer\n        # 62. Divide and conquer\n        # 63. Divide and conquer\n        # 64. Divide and conquer\n        # 65. Divide and conquer\n        # 66. Divide and conquer\n        # 67. Divide and conquer\n        # 68. Divide and conquer\n        # 69. Divide and conquer\n        # 70. Divide and conquer\n        # 71. Divide and conquer\n        # 72. Divide and conquer\n        # 73. Divide and conquer\n        # 74. Divide and conquer\n        # 75. Divide and conquer\n        # 76. Divide and conquer\n        # 77. Divide and conquer\n        # 78. Divide and conquer\n        # 79. Divide and conquer\n        # 80. Divide and conquer\n        # 81. Divide and conquer\n        # 82. Divide and conquer\n        # 83. Divide and conquer\n        # 84. Divide and conquer\n        # 85. Divide and conquer\n        # 86. Divide and conquer\n        # 87. Divide and conquer\n        # 88. Divide and conquer\n        # 89. Divide and conquer\n        # 90. Divide and conquer\n        # 91. Divide and conquer\n        # 92. Divide and conquer\n        # 93. Divide and conquer\n        # 94. Divide and conquer\n        # 95."}, {"task_id": "maximum-subarray", "completion": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. Brute force\n        # 2. DP\n        # 3. Divide and conquer\n        \n        # 1. Brute force\n        # Time complexity: O(n^2)\n        # Space complexity: O(1)\n        # max_sum = -sys.maxsize\n        # for i in range(len(nums)):\n        #     sum_ = 0\n        #     for j in range(i, len(nums)):\n        #         sum_ += nums[j]\n        #         max_sum = max(max_sum, sum_)\n        # return max_sum\n        \n        # 2. DP\n        # Time complexity: O(n)\n        # Space complexity: O(n)\n        # dp = [0] * len(nums)\n        # max_sum = -sys.maxsize\n        # for i in range(len(nums)):\n        #     dp[i] = nums[i]\n        #     for j in range(i):\n        #         dp[i] = max(dp[i], dp[j] + nums[i])\n        #     max_sum = max(max_sum, dp[i])\n        # return max_sum\n        \n        # 3. Divide and conquer\n        # Time complexity: O(n)\n        # Space complexity: O(1)\n        return self.maxSubArrayHelper(nums, 0, len(nums) - 1)\n    \n    def maxSubArrayHelper(self, nums, start, end):\n        if start == end:\n            return nums[start]\n        mid = (start + end) // 2\n        left_sum = self.maxSubArrayHelper(nums, start, mid)\n        right_sum = self.maxSubArrayHelper(nums, mid + 1, end)\n        cross_sum = 0\n        for i in range(mid, start - 1, -1):\n            cross_sum += nums[i]\n        return max(left_sum, right_sum, cross_sum)"}, {"task_id": "maximum-subarray", "completion": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Time Limit Exceeded\n        # return max(nums)\n        \n        # Time Limit Exceeded\n        # return max(sum(nums[i:j]) for i in range(len(nums)) for j in range(i+1, len(nums)+1))\n        \n        # Time Limit Exceeded\n        # return max(sum(nums[i:j]) for i in range(len(nums)) for j in range(i, len(nums)))\n        \n        # Time Limit Exceeded\n        # return max(sum(nums[i:j]) for i in range(len(nums)) for j in range(i, len(nums)+1))\n        \n        # Time Limit Exceeded\n        # return max(sum(nums[i:j]) for i in range(len(nums)) for j in range(i, len(nums)))\n        \n        # Time Limit Exceeded\n        # return max(sum(nums[i:j]) for i in range(len(nums)) for j in range(i, len(nums)+1))\n        \n        # Time Limit Exceeded\n        # return max(sum(nums[i:j]) for i in range(len(nums)) for j in range(i, len(nums)))\n        \n        # Time Limit Exceeded\n        # return max(sum(nums[i:j]) for i in range(len(nums)) for j in range(i, len(nums)+1))\n        \n        # Time Limit Exceeded\n        # return max(sum(nums[i:j]) for i in range(len(nums)) for j in range(i, len(nums)))\n        \n        # Time Limit Exceeded\n        # return max(sum(nums[i:j]) for i in range(len(nums)) for j in range(i, len(nums)+1))\n        \n        # Time Limit Exceeded\n        # return max(sum(nums[i:j]) for i in range(len(nums)) for j in range(i, len(nums)))\n        \n        # Time Limit Exceeded\n        # return max(sum(nums[i:j]) for i in range(len(nums)) for j in range(i, len(nums)+1))\n        \n        # Time Limit Exceeded\n        # return max(sum(nums[i:j]) for i in range(len(nums)) for j in range(i, len(nums)))\n        \n        # Time Limit Exceeded\n        # return max(sum(nums[i:j]) for i in range(len(nums)) for j in range(i, len(nums)+1))\n        \n        # Time Limit Exceeded\n        # return max(sum(nums[i:j]) for i in range(len(nums)) for j in range(i, len(nums)))\n        \n        # Time Limit Exceeded\n        # return max(sum(nums[i:j]) for i in range(len(nums)) for j in range(i, len(nums)+1))\n        \n        # Time Limit Exceeded\n        # return max(sum(nums[i:j]) for i in range(len(nums)) for j in range(i, len(nums)))\n        \n        # Time Limit Exceeded\n        # return max(sum(nums[i:j]) for i in range(len(nums)) for j in range(i, len(nums)+1))\n        \n        # Time Limit Exceeded\n        # return max(sum(nums[i:j]) for i in range(len(nums)) for j in range(i, len(nums)))\n        \n        # Time Limit Exceeded\n        # return max(sum(nums[i:j]) for i in range(len(nums)) for j in range(i, len(nums)+1))\n        \n        # Time Limit Exceeded\n        # return max(sum(nums[i:j]) for i in range(len(nums)) for j in range(i, len(nums)))\n        \n        # Time Limit Exceeded\n        # return max(sum(nums[i:j"}], "sliding-puzzle": [{"task_id": "sliding-puzzle", "completion": "class Solution(object):\n    def slidingPuzzle(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want"}, {"task_id": "sliding-puzzle", "completion": "class Solution(object):\n    def slidingPuzzle(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want"}, {"task_id": "sliding-puzzle", "completion": "class Solution(object):\n    def slidingPuzzle(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want"}, {"task_id": "sliding-puzzle", "completion": "class Solution(object):\n    def slidingPuzzle(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want"}, {"task_id": "sliding-puzzle", "completion": "class Solution(object):\n    def slidingPuzzle(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want to move\n        # 3 is the tile we want to move\n        # 4 is the tile we want to move\n        # 5 is the tile we want to move\n        \n        # 0 is the empty square\n        # 1 is the tile we want to move\n        # 2 is the tile we want"}], "isomorphic-strings": [{"task_id": "isomorphic-strings", "completion": "class Solution(object):\n    def isIsomorphic(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        # M1 = {}\n        # M2 = {}\n        # for i in range(len(s)):\n        #     if s[i] in M1:\n        #         if M1[s[i]] != t[i]:\n        #             return False\n        #     else:\n        #         M1[s[i]] = t[i]\n        #     if t[i] in M2:\n        #         if M2[t[i]] != s[i]:\n        #             return False\n        #     else:\n        #         M2[t[i]] = s[i]\n        # return True\n        \n        # M1 = {}\n        # M2 = {}\n        # for i in range(len(s)):\n        #     if s[i] in M1:\n        #         if M1[s[i]] != t[i]:\n        #             return False\n        #     else:\n        #         M1[s[i]] = t[i]\n        #     if t[i] in M2:\n        #         if M2[t[i]] != s[i]:\n        #             return False\n        #     else:\n        #         M2[t[i]] = s[i]\n        # return True\n        \n        # M1 = {}\n        # M2 = {}\n        # for i in range(len(s)):\n        #     if s[i] in M1:\n        #         if M1[s[i]] != t[i]:\n        #             return False\n        #     else:\n        #         M1[s[i]] = t[i]\n        #     if t[i] in M2:\n        #         if M2[t[i]] != s[i]:\n        #             return False\n        #     else:\n        #         M2[t[i]] = s[i]\n        # return True\n        \n        # M1 = {}\n        # M2 = {}\n        # for i in range(len(s)):\n        #     if s[i] in M1:\n        #         if M1[s[i]] != t[i]:\n        #             return False\n        #     else:\n        #         M1[s[i]] = t[i]\n        #     if t[i] in M2:\n        #         if M2[t[i]] != s[i]:\n        #             return False\n        #     else:\n        #         M2[t[i]] = s[i]\n        # return True\n        \n        # M1 = {}\n        # M2 = {}\n        # for i in range(len(s)):\n        #     if s[i] in M1:\n        #         if M1[s[i]] != t[i]:\n        #             return False\n        #     else:\n        #         M1[s[i]] = t[i]\n        #     if t[i] in M2:\n        #         if M2[t[i]] != s[i]:\n        #             return False\n        #     else:\n        #         M2[t[i]] = s[i]\n        # return True\n        \n        # M1 = {}\n        # M2 = {}\n        # for i in range(len(s)):\n        #     if s[i] in M1:\n        #         if M1[s[i]] != t[i]:\n        #             return False\n        #     else:\n        #         M1[s[i]] = t[i]\n        #     if t[i] in M2:\n        #         if M2[t[i]] != s[i]:\n        #             return False\n        #     else:\n        #         M2[t[i]] = s[i]\n        # return True\n        \n        # M1 = {}\n        # M2 = {}\n        # for i in range(len(s)):\n        #     if s[i] in M1:\n        #         if M1[s[i]] != t[i]:\n        #             return False\n        #     else:\n        #         M1[s[i]] = t[i]\n        #     if t[i] in M2:\n        #         if M2[t[i]] != s[i]:\n        #             return False\n        #     else:\n        #         M"}, {"task_id": "isomorphic-strings", "completion": "class Solution(object):\n    def isIsomorphic(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. Create a dictionary to store the mapping of characters\n        # 2. Iterate through the string and check if the character is already in the dictionary\n        # 3. If it is not in the dictionary, add it to the dictionary\n        # 4. If it is in the dictionary, check if the value is the same as the value in the dictionary\n        # 5. If it is not the same, return false\n        # 6. If it is the same, continue\n        # 7. If we have iterated through the entire string, return true\n        \n        # Create a dictionary to store the mapping of characters\n        mapping = {}\n        \n        # Iterate through the string and check if the character is already in the dictionary\n        for i in range(len(s)):\n            if s[i] not in mapping:\n                mapping[s[i]] = t[i]\n            else:\n                if mapping[s[i]] != t[i]:\n                    return False\n                \n        return True"}, {"task_id": "isomorphic-strings", "completion": "class Solution(object):\n    def isIsomorphic(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        # M1 = {}\n        # M2 = {}\n        # for i in range(len(s)):\n        #     if s[i] in M1 and M1[s[i]] != t[i]:\n        #         return False\n        #     if t[i] in M2 and M2[t[i]] != s[i]:\n        #         return False\n        #     M1[s[i]] = t[i]\n        #     M2[t[i]] = s[i]\n        # return True\n        \n        # M1 = {}\n        # M2 = {}\n        # for i in range(len(s)):\n        #     if s[i] in M1 and M1[s[i]] != t[i]:\n        #         return False\n        #     if t[i] in M2 and M2[t[i]] != s[i]:\n        #         return False\n        #     M1[s[i]] = t[i]\n        #     M2[t[i]] = s[i]\n        # return True\n        \n        # M1 = {}\n        # M2 = {}\n        # for i in range(len(s)):\n        #     if s[i] in M1 and M1[s[i]] != t[i]:\n        #         return False\n        #     if t[i] in M2 and M2[t[i]] != s[i]:\n        #         return False\n        #     M1[s[i]] = t[i]\n        #     M2[t[i]] = s[i]\n        # return True\n        \n        # M1 = {}\n        # M2 = {}\n        # for i in range(len(s)):\n        #     if s[i] in M1 and M1[s[i]] != t[i]:\n        #         return False\n        #     if t[i] in M2 and M2[t[i]] != s[i]:\n        #         return False\n        #     M1[s[i]] = t[i]\n        #     M2[t[i]] = s[i]\n        # return True\n        \n        # M1 = {}\n        # M2 = {}\n        # for i in range(len(s)):\n        #     if s[i] in M1 and M1[s[i]] != t[i]:\n        #         return False\n        #     if t[i] in M2 and M2[t[i]] != s[i]:\n        #         return False\n        #     M1[s[i]] = t[i]\n        #     M2[t[i]] = s[i]\n        # return True\n        \n        # M1 = {}\n        # M2 = {}\n        # for i in range(len(s)):\n        #     if s[i] in M1 and M1[s[i]] != t[i]:\n        #         return False\n        #     if t[i] in M2 and M2[t[i]] != s[i]:\n        #         return False\n        #     M1[s[i]] = t[i]\n        #     M2[t[i]] = s[i]\n        # return True\n        \n        # M1 = {}\n        # M2 = {}\n        # for i in range(len(s)):\n        #     if s[i] in M1 and M1[s[i]] != t[i]:\n        #         return False\n        #     if t[i] in M2 and M2[t[i]] != s[i]:\n        #         return False\n        #     M1[s[i]] = t[i]\n        #     M2[t[i]] = s[i]\n        # return True\n        \n        # M1 = {}\n        # M2 = {}\n        # for i in range(len(s)):\n        #     if s[i] in M1 and M1[s[i]] != t[i]:\n        #         return False\n        #     if t[i] in M2 and M2[t[i]] != s[i]:\n        #         return False\n        #     M1[s[i]] = t[i]\n        #     M2[t[i]] = s[i]\n        # return True\n        \n        # M1 = {}"}, {"task_id": "isomorphic-strings", "completion": "class Solution(object):\n    def isIsomorphic(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. Create a dictionary to store the mapping of characters\n        # 2. Iterate through the string and check if the character is already in the dictionary\n        # 3. If it is not in the dictionary, add it to the dictionary\n        # 4. If it is in the dictionary, check if the value is the same as the character in the string\n        # 5. If it is not the same, return false\n        # 6. If it is the same, continue\n        # 7. If we have iterated through the entire string, return true\n        \n        # Create a dictionary to store the mapping of characters\n        d = {}\n        \n        # Iterate through the string and check if the character is already in the dictionary\n        for i in range(len(s)):\n            if s[i] not in d:\n                d[s[i]] = t[i]\n            else:\n                if d[s[i]] != t[i]:\n                    return False\n                \n        return True"}, {"task_id": "isomorphic-strings", "completion": "class Solution(object):\n    def isIsomorphic(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        # M1 = {}\n        # M2 = {}\n        # for i in range(len(s)):\n        #     if s[i] in M1 and M1[s[i]] != t[i]:\n        #         return False\n        #     if t[i] in M2 and M2[t[i]] != s[i]:\n        #         return False\n        #     M1[s[i]] = t[i]\n        #     M2[t[i]] = s[i]\n        # return True\n        \n        # M1 = {}\n        # M2 = {}\n        # for i in range(len(s)):\n        #     if s[i] in M1 and M1[s[i]] != t[i]:\n        #         return False\n        #     if t[i] in M2 and M2[t[i]] != s[i]:\n        #         return False\n        #     M1[s[i]] = t[i]\n        #     M2[t[i]] = s[i]\n        # return True\n        \n        # M1 = {}\n        # M2 = {}\n        # for i in range(len(s)):\n        #     if s[i] in M1 and M1[s[i]] != t[i]:\n        #         return False\n        #     if t[i] in M2 and M2[t[i]] != s[i]:\n        #         return False\n        #     M1[s[i]] = t[i]\n        #     M2[t[i]] = s[i]\n        # return True\n        \n        # M1 = {}\n        # M2 = {}\n        # for i in range(len(s)):\n        #     if s[i] in M1 and M1[s[i]] != t[i]:\n        #         return False\n        #     if t[i] in M2 and M2[t[i]] != s[i]:\n        #         return False\n        #     M1[s[i]] = t[i]\n        #     M2[t[i]] = s[i]\n        # return True\n        \n        # M1 = {}\n        # M2 = {}\n        # for i in range(len(s)):\n        #     if s[i] in M1 and M1[s[i]] != t[i]:\n        #         return False\n        #     if t[i] in M2 and M2[t[i]] != s[i]:\n        #         return False\n        #     M1[s[i]] = t[i]\n        #     M2[t[i]] = s[i]\n        # return True\n        \n        # M1 = {}\n        # M2 = {}\n        # for i in range(len(s)):\n        #     if s[i] in M1 and M1[s[i]] != t[i]:\n        #         return False\n        #     if t[i] in M2 and M2[t[i]] != s[i]:\n        #         return False\n        #     M1[s[i]] = t[i]\n        #     M2[t[i]] = s[i]\n        # return True\n        \n        # M1 = {}\n        # M2 = {}\n        # for i in range(len(s)):\n        #     if s[i] in M1 and M1[s[i]] != t[i]:\n        #         return False\n        #     if t[i] in M2 and M2[t[i]] != s[i]:\n        #         return False\n        #     M1[s[i]] = t[i]\n        #     M2[t[i]] = s[i]\n        # return True\n        \n        # M1 = {}\n        # M2 = {}\n        # for i in range(len(s)):\n        #     if s[i] in M1 and M1[s[i]] != t[i]:\n        #         return False\n        #     if t[i] in M2 and M2[t[i]] != s[i]:\n        #         return False\n        #     M1[s[i]] = t[i]\n        #     M2[t[i]] = s[i]\n        # return True\n        \n        # M1 = {}"}], "search-in-rotated-sorted-array-ii": [{"task_id": "search-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u627e\u5230\u5de6\u53f3\u8fb9\u754c\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return True\n            if nums[left] <= nums[mid]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return False"}, {"task_id": "search-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u5148\u627e\u5230\u65cb\u8f6c\u70b9\n        # 2. \u627e\u5230\u65cb\u8f6c\u70b9\u4e4b\u540e\uff0c\u627e\u5230\u5de6\u8fb9\u7684\u6700\u5927\u503c\n        # 3. \u627e\u5230\u5de6\u8fb9\u7684\u6700\u5927\u503c\u4e4b\u540e\uff0c\u627e\u5230\u53f3\u8fb9\u7684\u6700\u5c0f\u503c\n        # 4. \u627e\u5230\u5de6\u8fb9\u7684\u6700\u5927\u503c\u548c\u53f3\u8fb9\u7684\u6700\u5c0f\u503c\u4e4b\u540e\uff0c\u627e\u5230target\n        # 5. \u627e\u5230target\u4e4b\u540e\uff0c\u5224\u65adtarget\u662f\u5426\u5728nums\u4e2d\n        \n        # 1. \u5148\u627e\u5230\u65cb\u8f6c\u70b9\n        # 2. \u627e\u5230\u65cb\u8f6c\u70b9\u4e4b\u540e\uff0c\u627e\u5230\u5de6\u8fb9\u7684\u6700\u5927\u503c\n        # 3. \u627e\u5230\u5de6\u8fb9\u7684\u6700\u5927\u503c\u4e4b\u540e\uff0c\u627e\u5230\u53f3\u8fb9\u7684\u6700\u5c0f\u503c\n        # 4. \u627e\u5230\u5de6\u8fb9\u7684\u6700\u5927\u503c\u548c\u53f3\u8fb9\u7684\u6700\u5c0f\u503c\u4e4b\u540e\uff0c\u627e\u5230target\n        # 5. \u627e\u5230target\u4e4b\u540e\uff0c\u5224\u65adtarget\u662f\u5426\u5728nums\u4e2d\n        \n        # 1. \u5148\u627e\u5230\u65cb\u8f6c\u70b9\n        # 2. \u627e\u5230\u65cb\u8f6c\u70b9\u4e4b\u540e\uff0c\u627e\u5230\u5de6\u8fb9\u7684\u6700\u5927\u503c\n        # 3. \u627e\u5230\u5de6\u8fb9\u7684\u6700\u5927\u503c\u4e4b\u540e\uff0c\u627e\u5230\u53f3\u8fb9\u7684\u6700\u5c0f\u503c\n        # 4. \u627e\u5230\u5de6\u8fb9\u7684\u6700\u5927\u503c\u548c\u53f3\u8fb9\u7684\u6700\u5c0f\u503c\u4e4b\u540e\uff0c\u627e\u5230target\n        # 5. \u627e\u5230target\u4e4b\u540e\uff0c\u5224\u65adtarget\u662f\u5426\u5728nums\u4e2d\n        \n        # 1. \u5148\u627e\u5230\u65cb\u8f6c\u70b9\n        # 2. \u627e\u5230\u65cb\u8f6c\u70b9\u4e4b\u540e\uff0c\u627e\u5230\u5de6\u8fb9\u7684\u6700\u5927\u503c\n        # 3. \u627e\u5230\u5de6\u8fb9\u7684\u6700\u5927\u503c\u4e4b\u540e\uff0c\u627e\u5230\u53f3\u8fb9\u7684\u6700\u5c0f\u503c\n        # 4. \u627e\u5230\u5de6\u8fb9\u7684\u6700\u5927\u503c\u548c\u53f3\u8fb9\u7684\u6700\u5c0f\u503c\u4e4b\u540e\uff0c\u627e\u5230target\n        # 5. \u627e\u5230target\u4e4b\u540e\uff0c\u5224\u65adtarget\u662f\u5426\u5728nums\u4e2d\n        \n        # 1. \u5148\u627e\u5230\u65cb\u8f6c\u70b9\n        # 2. \u627e\u5230\u65cb\u8f6c\u70b9\u4e4b\u540e\uff0c\u627e\u5230\u5de6\u8fb9\u7684\u6700\u5927\u503c\n        # 3. \u627e\u5230\u5de6\u8fb9\u7684\u6700\u5927\u503c\u4e4b\u540e\uff0c\u627e\u5230\u53f3\u8fb9\u7684\u6700\u5c0f\u503c\n        # 4. \u627e\u5230\u5de6\u8fb9\u7684\u6700\u5927\u503c\u548c\u53f3\u8fb9\u7684\u6700\u5c0f\u503c\u4e4b\u540e\uff0c\u627e\u5230target\n        # 5. \u627e\u5230target\u4e4b\u540e\uff0c\u5224\u65adtarget\u662f\u5426\u5728nums\u4e2d\n        \n        # 1. \u5148\u627e\u5230\u65cb\u8f6c\u70b9\n        # 2. \u627e\u5230\u65cb\u8f6c\u70b9\u4e4b\u540e\uff0c\u627e\u5230\u5de6\u8fb9\u7684\u6700\u5927\u503c\n        # 3. \u627e\u5230\u5de6\u8fb9\u7684\u6700\u5927\u503c\u4e4b\u540e\uff0c\u627e\u5230\u53f3\u8fb9\u7684\u6700\u5c0f\u503c\n        # 4. \u627e\u5230\u5de6\u8fb9\u7684\u6700\u5927\u503c\u548c\u53f3\u8fb9\u7684\u6700\u5c0f\u503c\u4e4b\u540e\uff0c\u627e\u5230target\n        # 5. \u627e\u5230target\u4e4b\u540e\uff0c\u5224\u65adtarget\u662f\u5426\u5728nums\u4e2d\n        \n        # 1. \u5148\u627e\u5230\u65cb\u8f6c\u70b9\n        # 2. \u627e\u5230\u65cb\u8f6c\u70b9\u4e4b\u540e\uff0c\u627e\u5230\u5de6\u8fb9\u7684\u6700\u5927\u503c\n        # 3. \u627e\u5230\u5de6\u8fb9\u7684\u6700\u5927\u503c\u4e4b\u540e\uff0c\u627e\u5230\u53f3\u8fb9\u7684\u6700\u5c0f\u503c\n        # 4. \u627e\u5230\u5de6\u8fb9\u7684\u6700\u5927\u503c\u548c\u53f3\u8fb9\u7684\u6700\u5c0f\u503c\u4e4b\u540e\uff0c\u627e\u5230target\n        # 5. \u627e\u5230target\u4e4b\u540e\uff0c\u5224\u65adtarget\u662f\u5426\u5728nums\u4e2d\n        \n        # 1. \u5148\u627e\u5230\u65cb\u8f6c\u70b9\n        # 2. \u627e\u5230\u65cb\u8f6c\u70b9\u4e4b\u540e\uff0c\u627e\u5230\u5de6\u8fb9\u7684\u6700\u5927\u503c\n        # 3. \u627e\u5230\u5de6\u8fb9\u7684\u6700\u5927\u503c\u4e4b\u540e\uff0c\u627e\u5230\u53f3\u8fb9\u7684\u6700\u5c0f\u503c\n        # 4. \u627e\u5230"}, {"task_id": "search-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u627e\u5230\u5de6\u53f3\u8fb9\u754c\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return True\n            if nums[left] <= nums[mid]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return False"}, {"task_id": "search-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u627e\u5230\u5de6\u53f3\u8fb9\u754c\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return True\n            if nums[left] <= nums[mid]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return False"}, {"task_id": "search-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u5148\u627e\u5230\u65cb\u8f6c\u70b9\n        # 2. \u627e\u5230\u65cb\u8f6c\u70b9\u4e4b\u540e\uff0c\u627e\u5230target\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679c\u627e\u5230\u4e86\uff0c\u8fd4\u56deTrue\n        # 4. \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deFalse\n        \n        # 1. \u5148\u627e\u5230\u65cb\u8f6c\u70b9\n        # 2. \u627e\u5230\u65cb\u8f6c\u70b9\u4e4b\u540e\uff0c\u627e\u5230target\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679c\u627e\u5230\u4e86\uff0c\u8fd4\u56deTrue\n        # 4. \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deFalse\n        \n        # 1. \u5148\u627e\u5230\u65cb\u8f6c\u70b9\n        # 2. \u627e\u5230\u65cb\u8f6c\u70b9\u4e4b\u540e\uff0c\u627e\u5230target\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679c\u627e\u5230\u4e86\uff0c\u8fd4\u56deTrue\n        # 4. \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deFalse\n        \n        # 1. \u5148\u627e\u5230\u65cb\u8f6c\u70b9\n        # 2. \u627e\u5230\u65cb\u8f6c\u70b9\u4e4b\u540e\uff0c\u627e\u5230target\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679c\u627e\u5230\u4e86\uff0c\u8fd4\u56deTrue\n        # 4. \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deFalse\n        \n        # 1. \u5148\u627e\u5230\u65cb\u8f6c\u70b9\n        # 2. \u627e\u5230\u65cb\u8f6c\u70b9\u4e4b\u540e\uff0c\u627e\u5230target\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679c\u627e\u5230\u4e86\uff0c\u8fd4\u56deTrue\n        # 4. \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deFalse\n        \n        # 1. \u5148\u627e\u5230\u65cb\u8f6c\u70b9\n        # 2. \u627e\u5230\u65cb\u8f6c\u70b9\u4e4b\u540e\uff0c\u627e\u5230target\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679c\u627e\u5230\u4e86\uff0c\u8fd4\u56deTrue\n        # 4. \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deFalse\n        \n        # 1. \u5148\u627e\u5230\u65cb\u8f6c\u70b9\n        # 2. \u627e\u5230\u65cb\u8f6c\u70b9\u4e4b\u540e\uff0c\u627e\u5230target\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679c\u627e\u5230\u4e86\uff0c\u8fd4\u56deTrue\n        # 4. \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deFalse\n        \n        # 1. \u5148\u627e\u5230\u65cb\u8f6c\u70b9\n        # 2. \u627e\u5230\u65cb\u8f6c\u70b9\u4e4b\u540e\uff0c\u627e\u5230target\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679c\u627e\u5230\u4e86\uff0c\u8fd4\u56deTrue\n        # 4. \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deFalse\n        \n        # 1. \u5148\u627e\u5230\u65cb\u8f6c\u70b9\n        # 2. \u627e\u5230\u65cb\u8f6c\u70b9\u4e4b\u540e\uff0c\u627e\u5230target\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679c\u627e\u5230\u4e86\uff0c\u8fd4\u56deTrue\n        # 4. \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deFalse\n        \n        # 1. \u5148\u627e\u5230\u65cb\u8f6c\u70b9\n        # 2. \u627e\u5230\u65cb\u8f6c\u70b9\u4e4b\u540e\uff0c\u627e\u5230target\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679c\u627e\u5230\u4e86\uff0c\u8fd4\u56deTrue\n        # 4. \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deFalse\n        \n        # 1. \u5148\u627e\u5230\u65cb\u8f6c\u70b9\n        # 2. \u627e\u5230\u65cb\u8f6c\u70b9\u4e4b\u540e\uff0c\u627e\u5230target\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679c\u627e\u5230\u4e86\uff0c\u8fd4\u56deTrue\n        # 4. \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deFalse\n        \n        # 1. \u5148\u627e\u5230\u65cb\u8f6c\u70b9\n        # 2. \u627e\u5230\u65cb\u8f6c\u70b9\u4e4b\u540e\uff0c\u627e\u5230target\u7684\u4f4d\u7f6e\n        # 3. \u5982\u679c\u627e\u5230\u4e86\uff0c\u8fd4\u56deTrue\n        # 4. \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deFalse\n        \n        # 1. \u5148\u627e\u5230\u65cb\u8f6c\u70b9\n        # 2. \u627e\u5230\ufffd"}], "unique-paths-ii": [{"task_id": "unique-paths-ii", "completion": "class Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid):\n        \"\"\"\n        :type obstacleGrid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        \n        if obstacleGrid[0][0] == 1:\n            return 0\n        \n        dp = [[0 for i in range(n)] for j in range(m)]\n        \n        dp[0][0] = 1\n        \n        for i in range(m):\n            for j in range(n):\n                if obstacleGrid[i][j] == 1:\n                    dp[i][j] = 0\n                elif i == 0 and j == 0:\n                    dp[i][j] = 1\n                elif i == 0:\n                    dp[i][j] = dp[i][j-1]\n                elif j == 0:\n                    dp[i][j] = dp[i-1][j]\n                else:\n                    dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        \n        return dp[m-1][n-1]"}, {"task_id": "unique-paths-ii", "completion": "class Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid):\n        \"\"\"\n        :type obstacleGrid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        \n        if obstacleGrid[0][0] == 1:\n            return 0\n        \n        dp = [[0 for _ in range(n)] for _ in range(m)]\n        \n        dp[0][0] = 1\n        \n        for i in range(m):\n            for j in range(n):\n                if obstacleGrid[i][j] == 1:\n                    dp[i][j] = 0\n                elif i == 0 and j > 0:\n                    dp[i][j] = dp[i][j-1]\n                elif j == 0 and i > 0:\n                    dp[i][j] = dp[i-1][j]\n                else:\n                    dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        \n        return dp[m-1][n-1]"}, {"task_id": "unique-paths-ii", "completion": "class Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid):\n        \"\"\"\n        :type obstacleGrid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        \n        if obstacleGrid[0][0] == 1:\n            return 0\n        \n        dp = [[0 for i in range(n)] for j in range(m)]\n        \n        dp[0][0] = 1\n        \n        for i in range(m):\n            for j in range(n):\n                if obstacleGrid[i][j] == 1:\n                    dp[i][j] = 0\n                elif i == 0 and j == 0:\n                    dp[i][j] = 1\n                elif i == 0:\n                    dp[i][j] = dp[i][j-1]\n                elif j == 0:\n                    dp[i][j] = dp[i-1][j]\n                else:\n                    dp[i][j] = dp[i-1][j] + dp[i][j-1]\n                    \n        return dp[m-1][n-1]"}, {"task_id": "unique-paths-ii", "completion": "class Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid):\n        \"\"\"\n        :type obstacleGrid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        \n        if obstacleGrid[0][0] == 1:\n            return 0\n        \n        dp = [[0 for i in range(n)] for j in range(m)]\n        \n        dp[0][0] = 1\n        \n        for i in range(m):\n            for j in range(n):\n                if obstacleGrid[i][j] == 1:\n                    dp[i][j] = 0\n                elif i == 0 and j == 0:\n                    dp[i][j] = 1\n                elif i == 0:\n                    dp[i][j] = dp[i][j-1]\n                elif j == 0:\n                    dp[i][j] = dp[i-1][j]\n                else:\n                    dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        \n        return dp[m-1][n-1]"}, {"task_id": "unique-paths-ii", "completion": "class Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid):\n        \"\"\"\n        :type obstacleGrid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        \n        if obstacleGrid[0][0] == 1:\n            return 0\n        \n        dp = [[0 for i in range(n)] for j in range(m)]\n        \n        dp[0][0] = 1\n        \n        for i in range(m):\n            for j in range(n):\n                if obstacleGrid[i][j] == 1:\n                    dp[i][j] = 0\n                elif i == 0 and j == 0:\n                    dp[i][j] = 1\n                elif i == 0:\n                    dp[i][j] = dp[i][j-1]\n                elif j == 0:\n                    dp[i][j] = dp[i-1][j]\n                else:\n                    dp[i][j] = dp[i-1][j] + dp[i][j-1]\n                    \n        return dp[m-1][n-1]"}], "decode-ways-ii": [{"task_id": "decode-ways-ii", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if not s:\n            return 0\n        \n        if s[0] == '0':\n            return 0\n        \n        dp = [1] + [0] * len(s)\n        for i in range(1, len(s)):\n            if s[i] == '0':\n                if s[i-1] == '1' or s[i-1] == '2':\n                    dp[i] = dp[i-1]\n                else:\n                    dp[i] = 0\n            elif s[i] == '*':\n                if s[i-1] == '1':\n                    dp[i] = dp[i-1] + dp[i-2]\n                elif s[i-1] == '2':\n                    dp[i] = dp[i-2] + dp[i-3]\n                else:\n                    dp[i] = dp[i-1] + dp[i-2]\n            else:\n                dp[i] = dp[i-1]\n                \n        return dp[-1] % 1000000007"}, {"task_id": "decode-ways-ii", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if not s:\n            return 0\n        \n        if s[0] == '0':\n            return 0\n        \n        dp = [1] + [0] * len(s)\n        for i in range(1, len(s)):\n            if s[i] == '0':\n                if s[i-1] == '1' or s[i-1] == '2':\n                    dp[i] = dp[i-1]\n                else:\n                    dp[i] = 0\n            elif s[i] == '*':\n                if s[i-1] == '1':\n                    dp[i] = dp[i-1] + dp[i-2]\n                elif s[i-1] == '2':\n                    dp[i] = dp[i-2] + dp[i-3]\n                else:\n                    dp[i] = dp[i-1]\n            else:\n                dp[i] = dp[i-1]\n                \n        return dp[-1] % 1000000007"}, {"task_id": "decode-ways-ii", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if not s:\n            return 0\n        \n        if s[0] == '0':\n            return 0\n        \n        dp = [1] + [0] * len(s)\n        for i in range(1, len(s)):\n            if s[i] == '0':\n                if s[i-1] == '1' or s[i-1] == '2':\n                    dp[i] = dp[i-1]\n                else:\n                    dp[i] = 0\n            elif s[i] == '*':\n                if s[i-1] == '1':\n                    dp[i] = dp[i-1] + dp[i-2]\n                elif s[i-1] == '2':\n                    dp[i] = dp[i-2] + dp[i-3]\n                else:\n                    dp[i] = dp[i-1]\n            else:\n                dp[i] = dp[i-1]\n                \n        return dp[-1] % 1000000007"}, {"task_id": "decode-ways-ii", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if not s:\n            return 0\n        \n        if s[0] == '0':\n            return 0\n        \n        dp = [1] + [0] * len(s)\n        for i in range(1, len(s)):\n            if s[i] == '0':\n                if s[i-1] == '1' or s[i-1] == '2':\n                    dp[i] = dp[i-1]\n                else:\n                    dp[i] = 0\n            elif s[i] == '*':\n                if s[i-1] == '1':\n                    dp[i] = dp[i-1] + dp[i-2]\n                elif s[i-1] == '2':\n                    dp[i] = dp[i-2] + dp[i-3]\n                else:\n                    dp[i] = dp[i-1] + dp[i-2]\n            else:\n                dp[i] = dp[i-1]\n                \n        return dp[-1] % 1000000007"}, {"task_id": "decode-ways-ii", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # dp[i] = number of ways to decode s[:i]\n        # dp[i] = dp[i-1] + dp[i-2] if s[i] != '0'\n        # dp[i] = dp[i-1] if s[i] == '0'\n        # dp[0] = 1\n        # dp[1] = 1 if s[0] != '0' else 0\n        \n        # dp[i] = dp[i-1] + dp[i-2] if s[i] != '0'\n        # dp[i] = dp[i-1] if s[i] == '0'\n        # dp[0] = 1\n        # dp[1] = 1 if s[0] != '0' else 0\n        \n        # dp[i] = dp[i-1] + dp[i-2] if s[i] != '0'\n        # dp[i] = dp[i-1] if s[i] == '0'\n        # dp[0] = 1\n        # dp[1] = 1 if s[0] != '0' else 0\n        \n        # dp[i] = dp[i-1] + dp[i-2] if s[i] != '0'\n        # dp[i] = dp[i-1] if s[i] == '0'\n        # dp[0] = 1\n        # dp[1] = 1 if s[0] != '0' else 0\n        \n        # dp[i] = dp[i-1] + dp[i-2] if s[i] != '0'\n        # dp[i] = dp[i-1] if s[i] == '0'\n        # dp[0] = 1\n        # dp[1] = 1 if s[0] != '0' else 0\n        \n        # dp[i] = dp[i-1] + dp[i-2] if s[i] != '0'\n        # dp[i] = dp[i-1] if s[i] == '0'\n        # dp[0] = 1\n        # dp[1] = 1 if s[0] != '0' else 0\n        \n        # dp[i] = dp[i-1] + dp[i-2] if s[i] != '0'\n        # dp[i] = dp[i-1] if s[i] == '0'\n        # dp[0] = 1\n        # dp[1] = 1 if s[0] != '0' else 0\n        \n        # dp[i] = dp[i-1] + dp[i-2] if s[i] != '0'\n        # dp[i] = dp[i-1] if s[i] == '0'\n        # dp[0] = 1\n        # dp[1] = 1 if s[0] != '0' else 0\n        \n        # dp[i] = dp[i-1] + dp[i-2] if s[i] != '0'\n        # dp[i] = dp[i-1] if s[i] == '0'\n        # dp[0] = 1\n        # dp[1] = 1 if s[0] != '0' else 0\n        \n        # dp[i] = dp[i-1] + dp[i-2] if s[i] != '0'\n        # dp[i] = dp[i-1] if s[i] == '0'\n        # dp[0] = 1\n        # dp[1] = 1 if s[0] != '0' else 0\n        \n        # dp[i] = dp[i-1] + dp[i-2] if s[i] != '0'\n        # dp[i] = dp[i-1] if s[i] == '0'\n        # dp[0] ="}], "3sum-closest": [{"task_id": "3sum-closest", "completion": "class Solution(object):\n    def threeSumClosest(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        n = len(nums)\n        ans = nums[0] + nums[1] + nums[2]\n        for i in range(n-2):\n            l = i+1\n            r = n-1\n            while l < r:\n                s = nums[i] + nums[l] + nums[r]\n                if s == target:\n                    return target\n                elif s < target:\n                    ans = s if abs(s-target) < abs(ans-target) else ans\n                    l += 1\n                else:\n                    ans = s if abs(s-target) < abs(ans-target) else ans\n                    r -= 1\n        return ans"}, {"task_id": "3sum-closest", "completion": "class Solution(object):\n    def threeSumClosest(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        n = len(nums)\n        ans = nums[0] + nums[1] + nums[2]\n        for i in range(n-2):\n            l = i+1\n            r = n-1\n            while l < r:\n                s = nums[i] + nums[l] + nums[r]\n                if s == target:\n                    return s\n                elif s < target:\n                    ans = s if abs(s-target) < abs(ans-target) else ans\n                    l += 1\n                else:\n                    ans = s if abs(s-target) < abs(ans-target) else ans\n                    r -= 1\n        return ans"}, {"task_id": "3sum-closest", "completion": "class Solution(object):\n    def threeSumClosest(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        n = len(nums)\n        ans = nums[0] + nums[1] + nums[2]\n        for i in range(n-2):\n            l, r = i+1, n-1\n            while l < r:\n                s = nums[i] + nums[l] + nums[r]\n                if s == target:\n                    return target\n                if abs(s - target) < abs(ans - target):\n                    ans = s\n                if s < target:\n                    l += 1\n                else:\n                    r -= 1\n        return ans"}, {"task_id": "3sum-closest", "completion": "class Solution(object):\n    def threeSumClosest(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        n = len(nums)\n        ans = nums[0] + nums[1] + nums[2]\n        for i in range(n-2):\n            l, r = i+1, n-1\n            while l < r:\n                s = nums[i] + nums[l] + nums[r]\n                if s == target:\n                    return target\n                if abs(s - target) < abs(ans - target):\n                    ans = s\n                if s < target:\n                    l += 1\n                else:\n                    r -= 1\n        return ans"}, {"task_id": "3sum-closest", "completion": "class Solution(object):\n    def threeSumClosest(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        n = len(nums)\n        ans = nums[0] + nums[1] + nums[2]\n        for i in range(n-2):\n            l, r = i+1, n-1\n            while l < r:\n                s = nums[i] + nums[l] + nums[r]\n                if s == target:\n                    return target\n                if abs(s - target) < abs(ans - target):\n                    ans = s\n                if s < target:\n                    l += 1\n                else:\n                    r -= 1\n        return ans"}], "maximum-depth-of-binary-tree": [{"task_id": "maximum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        return max(self.maxDepth(root.left), self.maxDepth(root.right)) + 1"}, {"task_id": "maximum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        else:\n            return max(self.maxDepth(root.left), self.maxDepth(root.right)) + 1"}, {"task_id": "maximum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        else:\n            return max(self.maxDepth(root.left), self.maxDepth(root.right)) + 1"}, {"task_id": "maximum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        return max(self.maxDepth(root.left), self.maxDepth(root.right)) + 1"}, {"task_id": "maximum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        return max(self.maxDepth(root.left), self.maxDepth(root.right)) + 1"}], "intersection-of-two-arrays-ii": [{"task_id": "intersection-of-two-arrays-ii", "completion": "class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. sort both arrays\n        nums1.sort()\n        nums2.sort()\n        \n        # 2. find intersection\n        i = 0\n        j = 0\n        intersection = []\n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] == nums2[j]:\n                intersection.append(nums1[i])\n                i += 1\n                j += 1\n            elif nums1[i] < nums2[j]:\n                i += 1\n            else:\n                j += 1\n        \n        return intersection"}, {"task_id": "intersection-of-two-arrays-ii", "completion": "class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. sort both arrays\n        nums1.sort()\n        nums2.sort()\n        \n        # 2. find intersection\n        i = 0\n        j = 0\n        intersection = []\n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] == nums2[j]:\n                intersection.append(nums1[i])\n                i += 1\n                j += 1\n            elif nums1[i] < nums2[j]:\n                i += 1\n            else:\n                j += 1\n        \n        return intersection"}, {"task_id": "intersection-of-two-arrays-ii", "completion": "class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. Sort both arrays\n        nums1.sort()\n        nums2.sort()\n        \n        # 2. Create a new array to store the intersection\n        intersection = []\n        \n        # 3. Iterate through both arrays\n        i = 0\n        j = 0\n        while i < len(nums1) and j < len(nums2):\n            \n            # 4. If the current elements of both arrays are equal, add them to the intersection array\n            if nums1[i] == nums2[j]:\n                intersection.append(nums1[i])\n                i += 1\n                j += 1\n            \n            # 5. If the current element of nums1 is less than the current element of nums2, increment i\n            elif nums1[i] < nums2[j]:\n                i += 1\n            \n            # 6. If the current element of nums2 is less than the current element of nums1, increment j\n            else:\n                j += 1\n        \n        # 7. Return the intersection array\n        return intersection"}, {"task_id": "intersection-of-two-arrays-ii", "completion": "class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. Sort both arrays\n        nums1.sort()\n        nums2.sort()\n        \n        # 2. Create a set of nums2\n        nums2_set = set(nums2)\n        \n        # 3. Iterate through nums1 and add to result if it is in nums2_set\n        result = []\n        for num in nums1:\n            if num in nums2_set:\n                result.append(num)\n                nums2_set.remove(num)\n        \n        return result"}, {"task_id": "intersection-of-two-arrays-ii", "completion": "class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. sort both arrays\n        nums1.sort()\n        nums2.sort()\n        \n        # 2. create a new array to store the intersection\n        intersection = []\n        \n        # 3. iterate through both arrays\n        i = 0\n        j = 0\n        while i < len(nums1) and j < len(nums2):\n            \n            # 4. if the current element of nums1 is less than the current element of nums2, increment i\n            if nums1[i] < nums2[j]:\n                i += 1\n            \n            # 5. if the current element of nums1 is greater than the current element of nums2, increment j\n            elif nums1[i] > nums2[j]:\n                j += 1\n            \n            # 6. if the current element of nums1 is equal to the current element of nums2, add it to the intersection array and increment both i and j\n            else:\n                intersection.append(nums1[i])\n                i += 1\n                j += 1\n        \n        # 7. return the intersection array\n        return intersection"}], "minimum-absolute-difference-in-bst": [{"task_id": "minimum-absolute-difference-in-bst", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def getMinimumDifference(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def inorder(root):\n            if not root:\n                return\n            inorder(root.left)\n            if prev:\n                min_diff = min(min_diff, abs(root.val - prev))\n            prev = root.val\n            inorder(root.right)\n            \n        prev = None\n        min_diff = float('inf')\n        inorder(root)\n        return min_diff"}, {"task_id": "minimum-absolute-difference-in-bst", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def getMinimumDifference(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def inorder(root):\n            if not root:\n                return\n            inorder(root.left)\n            if prev:\n                min_diff = min(min_diff, abs(root.val - prev))\n            prev = root.val\n            inorder(root.right)\n        \n        prev = None\n        min_diff = float('inf')\n        inorder(root)\n        return min_diff"}, {"task_id": "minimum-absolute-difference-in-bst", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def getMinimumDifference(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def inorder(root):\n            if not root:\n                return\n            inorder(root.left)\n            if prev:\n                min_diff = min(min_diff, abs(root.val - prev))\n            prev = root.val\n            inorder(root.right)\n            \n        prev = None\n        min_diff = float('inf')\n        inorder(root)\n        return min_diff"}, {"task_id": "minimum-absolute-difference-in-bst", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def getMinimumDifference(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def inorder(root):\n            if not root:\n                return\n            inorder(root.left)\n            if prev:\n                min_diff = min(min_diff, abs(root.val - prev))\n            prev = root.val\n            inorder(root.right)\n        \n        min_diff = float('inf')\n        prev = None\n        inorder(root)\n        return min_diff"}, {"task_id": "minimum-absolute-difference-in-bst", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def getMinimumDifference(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def inorder(root):\n            if not root:\n                return\n            inorder(root.left)\n            if prev:\n                min_diff = min(min_diff, abs(root.val - prev))\n            prev = root.val\n            inorder(root.right)\n            \n        prev = None\n        min_diff = float('inf')\n        inorder(root)\n        return min_diff"}], "find-mode-in-binary-search-tree": [{"task_id": "find-mode-in-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        def inorder(root):\n            if root is None:\n                return\n            inorder(root.left)\n            if root.val not in count:\n                count[root.val] = 1\n            else:\n                count[root.val] += 1\n            inorder(root.right)\n        \n        count = {}\n        inorder(root)\n        max_count = max(count.values())\n        result = []\n        for key, value in count.items():\n            if value == max_count:\n                result.append(key)\n        return result"}, {"task_id": "find-mode-in-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        def inorder(root):\n            if not root:\n                return\n            inorder(root.left)\n            if root.val in count:\n                count[root.val] += 1\n            else:\n                count[root.val] = 1\n            inorder(root.right)\n        \n        count = {}\n        inorder(root)\n        max_count = max(count.values())\n        result = []\n        for key, value in count.items():\n            if value == max_count:\n                result.append(key)\n        return result"}, {"task_id": "find-mode-in-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        def inorder(root):\n            if not root:\n                return\n            inorder(root.left)\n            if root.val not in count:\n                count[root.val] = 1\n            else:\n                count[root.val] += 1\n            inorder(root.right)\n        \n        count = {}\n        inorder(root)\n        max_count = max(count.values())\n        return [key for key, value in count.items() if value == max_count]"}, {"task_id": "find-mode-in-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        def inorder(root):\n            if not root:\n                return\n            inorder(root.left)\n            if root.val not in count:\n                count[root.val] = 1\n            else:\n                count[root.val] += 1\n            inorder(root.right)\n        \n        count = {}\n        inorder(root)\n        max_count = max(count.values())\n        result = []\n        for key, value in count.items():\n            if value == max_count:\n                result.append(key)\n        return result"}, {"task_id": "find-mode-in-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        def inorder(root):\n            if root is None:\n                return\n            inorder(root.left)\n            if root.val in count:\n                count[root.val] += 1\n            else:\n                count[root.val] = 1\n            inorder(root.right)\n        \n        count = {}\n        inorder(root)\n        max_count = max(count.values())\n        result = []\n        for key, value in count.items():\n            if value == max_count:\n                result.append(key)\n        return result"}], "find-the-index-of-the-first-occurrence-in-a-string": [{"task_id": "find-the-index-of-the-first-occurrence-in-a-string", "completion": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        \n        if needle == \"\":\n            return 0\n        if needle not in haystack:\n            return -1\n        return haystack.find(needle)"}, {"task_id": "find-the-index-of-the-first-occurrence-in-a-string", "completion": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        \n        if needle == \"\":\n            return 0\n        if needle not in haystack:\n            return -1\n        return haystack.find(needle)"}, {"task_id": "find-the-index-of-the-first-occurrence-in-a-string", "completion": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        \n        if needle == \"\":\n            return 0\n        if needle not in haystack:\n            return -1\n        return haystack.index(needle)"}, {"task_id": "find-the-index-of-the-first-occurrence-in-a-string", "completion": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        \n        if needle == \"\":\n            return 0\n        if needle not in haystack:\n            return -1\n        return haystack.find(needle)"}, {"task_id": "find-the-index-of-the-first-occurrence-in-a-string", "completion": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        \n        if needle == \"\":\n            return 0\n        if needle not in haystack:\n            return -1\n        return haystack.index(needle)"}], "strong-password-checker": [{"task_id": "strong-password-checker", "completion": "class Solution(object):\n    def strongPasswordChecker(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. check if password is strong\n        if len(password) >= 6 and len(password) <= 20:\n            if any(x.islower() for x in password) and any(x.isupper() for x in password) and any(x.isdigit() for x in password):\n                return 0\n        \n        # 2. check if password is weak\n        if len(password) < 6:\n            return 6 - len(password)\n        elif len(password) > 20:\n            return 21 - len(password)\n        \n        # 3. check if password is medium\n        # 3.1 check if password has 3 repeating characters in a row\n        if len(password) >= 6:\n            for i in range(len(password) - 2):\n                if password[i] == password[i + 1] == password[i + 2]:\n                    return 3\n        \n        # 3.2 check if password has 2 repeating characters in a row\n        if len(password) >= 6:\n            for i in range(len(password) - 1):\n                if password[i] == password[i + 1]:\n                    return 2\n        \n        # 3.3 check if password has 1 repeating character in a row\n        if len(password) >= 6:\n            for i in range(len(password) - 1):\n                if password[i] == password[i + 1]:\n                    return 1\n        \n        # 4. check if password has 2 repeating characters in a row\n        if len(password) >= 6:\n            for i in range(len(password) - 2):\n                if password[i] == password[i + 2]:\n                    return 2\n        \n        # 5. check if password has 3 repeating characters in a row\n        if len(password) >= 6:\n            for i in range(len(password) - 3):\n                if password[i] == password[i + 1] == password[i + 2]:\n                    return 3\n        \n        # 6. check if password has 4 repeating characters in a row\n        if len(password) >= 6:\n            for i in range(len(password) - 4):\n                if password[i] == password[i + 1] == password[i + 2] == password[i + 3]:\n                    return 4\n        \n        # 7. check if password has 5 repeating characters in a row\n        if len(password) >= 6:\n            for i in range(len(password) - 5):\n                if password[i] == password[i + 1] == password[i + 2] == password[i + 3] == password[i + 4]:\n                    return 5\n        \n        # 8. check if password has 6 repeating characters in a row\n        if len(password) >= 6:\n            for i in range(len(password) - 6):\n                if password[i] == password[i + 1] == password[i + 2] == password[i + 3] == password[i + 4] == password[i + 5]:\n                    return 6\n        \n        # 9. check if password has 7 repeating characters in a row\n        if len(password) >= 6:\n            for i in range(len(password) - 7):\n                if password[i] == password[i + 1] == password[i + 2] == password[i + 3] == password[i + 4] == password[i + 5] == password[i + 6]:\n                    return 7\n        \n        # 10. check if password has 8 repeating characters in a row\n        if len(password) >= 6:\n            for i in range(len(password) - 8):\n                if password[i] == password[i + 1] == password[i + 2] == password[i + 3] == password[i + 4] == password[i + 5] == password[i + 6] == password[i + 7]:\n                    return 8\n        \n        # 11. check if password has 9 repeating characters in a row\n        if len(password) >= 6:\n            for i in range(len("}, {"task_id": "strong-password-checker", "completion": "class Solution(object):\n    def strongPasswordChecker(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. Check if password is strong\n        if len(password) >= 6 and len(password) <= 20:\n            if any(x.islower() for x in password) and any(x.isupper() for x in password) and any(x.isdigit() for x in password):\n                return 0\n        \n        # 2. Find the number of steps required to make password strong\n        steps = 0\n        if len(password) < 6:\n            steps += 6 - len(password)\n        elif len(password) > 20:\n            steps += len(password) - 20\n        \n        # 3. Find the number of steps required to make password strong\n        # 3.1. Find the number of characters to be replaced\n        replace = 0\n        for i in range(len(password) - 1):\n            if password[i] == password[i + 1]:\n                replace += 1\n        \n        # 3.2. Find the number of characters to be deleted\n        delete = 0\n        for i in range(len(password) - 1):\n            if password[i] == password[i + 1] and password[i] != password[i - 1]:\n                delete += 1\n        \n        # 3.3. Find the number of characters to be inserted\n        insert = 0\n        for i in range(len(password) - 1):\n            if password[i] == password[i + 1] and password[i] != password[i - 1]:\n                insert += 1\n        \n        # 3.4. Find the number of characters to be replaced\n        replace = 0\n        for i in range(len(password) - 1):\n            if password[i] == password[i + 1]:\n                replace += 1\n        \n        # 3.5. Find the number of characters to be deleted\n        delete = 0\n        for i in range(len(password) - 1):\n            if password[i] == password[i + 1] and password[i] != password[i - 1]:\n                delete += 1\n        \n        # 3.6. Find the number of characters to be inserted\n        insert = 0\n        for i in range(len(password) - 1):\n            if password[i] == password[i + 1] and password[i] != password[i - 1]:\n                insert += 1\n        \n        # 3.7. Find the number of characters to be replaced\n        replace = 0\n        for i in range(len(password) - 1):\n            if password[i] == password[i + 1]:\n                replace += 1\n        \n        # 3.8. Find the number of characters to be deleted\n        delete = 0\n        for i in range(len(password) - 1):\n            if password[i] == password[i + 1] and password[i] != password[i - 1]:\n                delete += 1\n        \n        # 3.9. Find the number of characters to be inserted\n        insert = 0\n        for i in range(len(password) - 1):\n            if password[i] == password[i + 1] and password[i] != password[i - 1]:\n                insert += 1\n        \n        # 3.10. Find the number of characters to be replaced\n        replace = 0\n        for i in range(len(password) - 1):\n            if password[i] == password[i + 1]:\n                replace += 1\n        \n        # 3.11. Find the number of characters to be deleted\n        delete = 0\n        for i in range(len(password) - 1):\n            if password[i] == password[i + 1] and password[i] != password[i - 1]:\n                delete += 1\n        \n        # 3.12. Find the number of characters to be inserted\n        insert = 0\n        for i in range(len(password) - 1):\n            if password[i] == password[i + 1] and password[i] != password[i - 1]:\n                insert += 1\n        \n        # 3.13. Find the number of characters to be replaced\n        replace = 0\n        for i in range(len(password"}, {"task_id": "strong-password-checker", "completion": "class Solution(object):\n    def strongPasswordChecker(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. check if password is strong\n        if len(password) >= 6 and len(password) <= 20:\n            if any(x.islower() for x in password) and any(x.isupper() for x in password) and any(x.isdigit() for x in password):\n                return 0\n        \n        # 2. check if password is weak\n        if len(password) < 6:\n            return 6 - len(password)\n        elif len(password) > 20:\n            return 21 - len(password)\n        \n        # 3. check if password is medium\n        if any(x.islower() for x in password) and any(x.isupper() for x in password) and any(x.isdigit() for x in password):\n            return 0\n        \n        # 4. check if password is weak\n        if any(x.islower() for x in password) and any(x.isupper() for x in password):\n            return 1\n        elif any(x.islower() for x in password) and any(x.isdigit() for x in password):\n            return 1\n        elif any(x.isupper() for x in password) and any(x.isdigit() for x in password):\n            return 1\n        \n        # 5. check if password is weak\n        if any(x.islower() for x in password):\n            return 2\n        elif any(x.isupper() for x in password):\n            return 2\n        elif any(x.isdigit() for x in password):\n            return 2\n        \n        # 6. check if password is weak\n        return 3"}, {"task_id": "strong-password-checker", "completion": "class Solution(object):\n    def strongPasswordChecker(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. check if password is strong\n        if len(password) >= 6 and len(password) <= 20:\n            if any(x.islower() for x in password) and any(x.isupper() for x in password) and any(x.isdigit() for x in password):\n                return 0\n        \n        # 2. check if password is weak\n        if len(password) < 6:\n            return 6 - len(password)\n        elif len(password) > 20:\n            return 21 - len(password)\n        \n        # 3. check if password is medium\n        # 3.1 check if password contains 3 repeating characters in a row\n        if any(password[i:i+3] == password[i+1:i+4] for i in range(len(password)-2)):\n            return 6\n        \n        # 3.2 check if password contains 2 repeating characters in a row\n        if any(password[i:i+2] == password[i+1:i+3] for i in range(len(password)-1)):\n            return 3\n        \n        # 3.3 check if password contains 1 repeating character in a row\n        if any(password[i] == password[i+1] for i in range(len(password)-1)):\n            return 2\n        \n        # 3.4 check if password contains 0 repeating characters in a row\n        return 1"}, {"task_id": "strong-password-checker", "completion": "class Solution(object):\n    def strongPasswordChecker(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. Check if password is strong\n        if len(password) >= 6 and len(password) <= 20:\n            if any(x.islower() for x in password) and any(x.isupper() for x in password) and any(x.isdigit() for x in password):\n                return 0\n        \n        # 2. Check if password is weak\n        if len(password) < 6:\n            return 6 - len(password)\n        elif len(password) > 20:\n            return 21 - len(password)\n        \n        # 3. Check if password is medium\n        if any(x.islower() for x in password) and any(x.isupper() for x in password) and any(x.isdigit() for x in password):\n            return 0\n        \n        # 4. Check if password is weak\n        if any(x.islower() for x in password) and any(x.isupper() for x in password):\n            return 1\n        elif any(x.islower() for x in password) and any(x.isdigit() for x in password):\n            return 1\n        elif any(x.isupper() for x in password) and any(x.isdigit() for x in password):\n            return 1\n        \n        # 5. Check if password is weak\n        if any(x.islower() for x in password):\n            return 1\n        elif any(x.isupper() for x in password):\n            return 1\n        elif any(x.isdigit() for x in password):\n            return 1\n        \n        # 6. Check if password is weak\n        return 1"}], "factorial-trailing-zeroes": [{"task_id": "factorial-trailing-zeroes", "completion": "class Solution(object):\n    def trailingZeroes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u9012\u5f52\n        # 2. \u9012\u5f52 + \u8bb0\u5fc6\u5316\u641c\u7d22\n        # 3. \u8fed\u4ee3\n        # 4. \u8fed\u4ee3 + \u8bb0\u5fc6\u5316\u641c\u7d22\n        # 5. \u6570\u5b66\n        # 6. \u6570\u5b66 + \u8bb0\u5fc6\u5316\u641c\u7d22\n        # 7. \u6570\u5b66 + \u8bb0\ufffd\ufffd"}, {"task_id": "factorial-trailing-zeroes", "completion": "class Solution(object):\n    def trailingZeroes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u9012\u5f52\n        # 2. \u9012\u5f52\u7684\u89e3\u6cd5\u662f\u5f88\u5bb9\u6613\u60f3\u5230\u7684\uff0c\u4f46\u662f\u5f88\u5bb9\u6613\u8d85\u65f6\uff0c\u56e0\u4e3a\u9012\u5f52\u7684\u6df1\u5ea6\u662fn\uff0c\u800cn\u7684\u503c\u53ef\u80fd\u5f88\u5927\uff0c\u6240\u4ee5\u9700\u8981\u4f18\u5316\n        # 3. \u4f18\u5316\u7684\u65b9\u6cd5\u662f\uff0c\u9012\u5f52\u7684\u65f6\u5019\uff0c\u6bcf\u6b21\u9012\u5f52\u7684\u65f6\u5019\uff0c\u628an\u9664\u4ee55\uff0c\u7136\u540e\u518d\u9664\u4ee55\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u51cf\u5c11\u9012\u5f52\u7684\u6df1\u5ea6\uff0c\n        # \u4f46\u662f\u8fd9\u6837\u7684\u8bdd\uff0c\u6bcf\u6b21\u9012\u5f52\u7684\u65f6\u5019\uff0c\u8fd8\u9700\u8981\u505a\u4e00\u6b21\u9664\u6cd5\uff0c\u6240\u4ee5\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n)\n        # 4. \u4f18\u5316\u7684\u65b9\u6cd5\u662f\uff0c\u6bcf\u6b21\u9012\u5f52\u7684\u65f6\u5019\uff0c\u628an\u9664\u4ee55\uff0c\u7136\u540e\u518d\u9664\u4ee55\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u51cf\u5c11\u9012\u5f52\u7684\u6df1\u5ea6\uff0c\n        # \u4f46\u662f\u8fd9\u6837\u7684\u8bdd\uff0c\u6bcf\u6b21\u9012\u5f52\u7684\u65f6\u5019\uff0c\u8fd8\u9700\u8981\u505a\u4e00\u6b21\u9664\u6cd5\uff0c\u6240\u4ee5\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n)\n        # 5. \u4f18\u5316\u7684\u65b9\u6cd5\u662f\uff0c\u6bcf\u6b21\u9012\u5f52\u7684\u65f6\u5019\uff0c\u628an\u9664\u4ee55\uff0c\u7136\u540e\u518d\u9664\u4ee55\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u51cf\u5c11\u9012\u5f52\u7684\u6df1\u5ea6\uff0c\n        # \u4f46\u662f\u8fd9\u6837\u7684\u8bdd\uff0c\u6bcf\u6b21\u9012\u5f52\u7684\u65f6\u5019\uff0c\u8fd8\u9700\u8981\u505a\u4e00\u6b21\u9664\u6cd5\uff0c\u6240\u4ee5\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n)\n        # 6. \u4f18\u5316\u7684\u65b9\u6cd5\u662f\uff0c\u6bcf\u6b21\u9012\u5f52\u7684\u65f6\u5019\uff0c\u628an\u9664\u4ee55\uff0c\u7136\u540e\u518d\u9664\u4ee55\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u51cf\u5c11\u9012\u5f52\u7684\u6df1\u5ea6\uff0c\n        # \u4f46\u662f\u8fd9\u6837\u7684\u8bdd\uff0c\u6bcf\u6b21\u9012\u5f52\u7684\u65f6\u5019\uff0c\u8fd8\u9700\u8981\u505a\u4e00\u6b21\u9664\u6cd5\uff0c\u6240\u4ee5\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n)\n        # 7. \u4f18\u5316\u7684\u65b9\u6cd5\u662f\uff0c\u6bcf\u6b21\u9012\u5f52\u7684\u65f6\u5019\uff0c\u628an\u9664\u4ee55\uff0c\u7136\u540e\u518d\u9664\u4ee55\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u51cf\u5c11\u9012\u5f52\u7684\u6df1\u5ea6\uff0c\n        # \u4f46\u662f\u8fd9\u6837\u7684\u8bdd\uff0c\u6bcf\u6b21\u9012\u5f52\u7684\u65f6\u5019\uff0c\u8fd8\u9700\u8981\u505a\u4e00\u6b21\u9664\u6cd5\uff0c\u6240\u4ee5\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n)\n        # 8. \u4f18\u5316\u7684\u65b9\u6cd5\u662f\uff0c\u6bcf\u6b21\u9012\u5f52\u7684\u65f6\u5019\uff0c\u628an\u9664\u4ee55\uff0c\u7136\u540e\u518d\u9664\u4ee55\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u51cf\u5c11\u9012\u5f52\u7684\u6df1\u5ea6\uff0c\n        # \u4f46\u662f\u8fd9\u6837\u7684\u8bdd\uff0c\u6bcf\u6b21\u9012\u5f52\u7684\u65f6\u5019\uff0c\u8fd8\u9700\u8981\u505a\u4e00\u6b21\u9664\u6cd5\uff0c\u6240\u4ee5\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n)\n        # 9. \u4f18\u5316\u7684\u65b9\u6cd5\u662f\uff0c\u6bcf\u6b21\u9012\u5f52\u7684\u65f6\u5019\uff0c\u628an\u9664\u4ee55\uff0c\u7136\u540e\u518d\u9664\u4ee55\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u51cf\u5c11\u9012\u5f52\u7684\u6df1\u5ea6\uff0c\n        # \u4f46\u662f\u8fd9\u6837\u7684\u8bdd\uff0c\u6bcf\u6b21\u9012\u5f52\u7684\u65f6\u5019\uff0c\u8fd8\u9700\u8981\u505a\u4e00\u6b21\u9664\u6cd5\uff0c\u6240\u4ee5\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n)\n        # 10. \u4f18\u5316\u7684\u65b9\u6cd5\u662f\uff0c\u6bcf\u6b21\u9012\u5f52\u7684\u65f6\u5019\uff0c\u628an\u9664\u4ee55\uff0c\u7136\u540e\u518d\u9664\u4ee55\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u51cf\u5c11\u9012\u5f52\u7684\u6df1\u5ea6\uff0c\n        # \u4f46\u662f\u8fd9\u6837\u7684\u8bdd\uff0c\u6bcf\u6b21\u9012\u5f52\u7684\u65f6\u5019\uff0c\u8fd8\u9700\u8981\u505a\u4e00\u6b21\u9664\u6cd5\uff0c\u6240\u4ee5\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO("}, {"task_id": "factorial-trailing-zeroes", "completion": "class Solution(object):\n    def trailingZeroes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u672b\u5c3e0\u7684\u4e2a\u6570 = 5\u7684\u4e2a\u6570\n        # 2. 5\u7684\u4e2a\u6570 = 5\u7684\u4e2a\u6570 * 4\u7684\u4e2a\u6570\n        # 3. 4\u7684\u4e2a\u6570 = 4\u7684\u4e2a\u6570 * 3\u7684\u4e2a\u6570\n        # 4. 3\u7684\u4e2a\u6570 = 3\u7684\u4e2a\u6570 * 2\u7684\u4e2a\u6570\n        # 5. 2\u7684\u4e2a\u6570 = 2\u7684\u4e2a\u6570 * 1\u7684\u4e2a\u6570\n        # 6. 1\u7684\u4e2a\u6570 = 1\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570\n        # 7. 0\u7684\u4e2a\u6570 = 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570\n        # 8. 0\u7684\u4e2a\u6570 = 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570\n        # 9. 0\u7684\u4e2a\u6570 = 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570\n        # 10. 0\u7684\u4e2a\u6570 = 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570\n        # 11. 0\u7684\u4e2a\u6570 = 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570\n        # 12. 0\u7684\u4e2a\u6570 = 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570\n        # 13. 0\u7684\u4e2a\u6570 = 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570\n        # 14. 0\u7684\u4e2a\u6570 = 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570\n        # 15. 0\u7684\u4e2a\u6570 = 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570\n        # 16. 0\u7684\u4e2a\u6570 = 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570\n        # 17. 0\u7684\u4e2a\u6570 = 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570\n        # 18. 0\u7684\u4e2a\u6570 = 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570\n        # 19. 0\u7684\u4e2a\u6570 = 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570\n        # 20. 0\u7684\u4e2a\u6570 = 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570\n        # 21. 0\u7684\u4e2a\u6570 = 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570\n        # 22. 0\u7684\u4e2a\u6570 = 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570\n        # 23. 0\u7684\u4e2a\u6570 = 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570\n        # 24. 0\u7684\u4e2a\u6570 = 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570\n        # 25. 0\u7684\u4e2a\u6570 = 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570\n        # 26. 0\u7684\u4e2a\u6570 = 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570\n        # 27. 0\u7684\u4e2a\u6570 = 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570\n        # 28. 0\u7684\u4e2a\u6570 = 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570\n        # 29. 0\u7684\u4e2a\u6570 = 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570\n        # 30. 0\u7684\u4e2a\u6570 = 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570\n        # 31. 0\u7684\u4e2a\u6570 = 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570\n        # 32. 0\u7684\u4e2a\u6570 = 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570\n        # 33. 0\u7684\u4e2a\u6570 = 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570\n        # 34. 0\u7684\u4e2a\u6570 = 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570\n        # 35. 0\u7684\u4e2a\u6570 = 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570\n        # 36. 0\u7684\u4e2a\u6570 = 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570\n        # 37. 0\u7684\u4e2a\u6570 = 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570\n        # 38. 0\u7684\u4e2a\u6570 = 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570\n        # 39. 0\u7684\u4e2a\u6570 = 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570\n        # 40. 0\u7684\u4e2a\u6570 = 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570\n        # 41. 0\u7684\u4e2a\u6570 = 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570\n        # 42. 0\u7684\u4e2a\u6570 = 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570\n        # 43. 0\u7684\u4e2a\u6570 = 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570\n        #"}, {"task_id": "factorial-trailing-zeroes", "completion": "class Solution(object):\n    def trailingZeroes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u672b\u5c3e0\u7684\u4e2a\u6570 = 5\u7684\u4e2a\u6570\n        # 2. 5\u7684\u4e2a\u6570 = 5\u7684\u4e2a\u6570 * 4\u7684\u4e2a\u6570\n        # 3. 5\u7684\u4e2a\u6570 = 5\u7684\u4e2a\u6570 * 4\u7684\u4e2a\u6570 * 3\u7684\u4e2a\u6570\n        # 4. 5\u7684\u4e2a\u6570 = 5\u7684\u4e2a\u6570 * 4\u7684\u4e2a\u6570 * 3\u7684\u4e2a\u6570 * 2\u7684\u4e2a\u6570\n        # 5. 5\u7684\u4e2a\u6570 = 5\u7684\u4e2a\u6570 * 4\u7684\u4e2a\u6570 * 3\u7684\u4e2a\u6570 * 2\u7684\u4e2a\u6570 * 1\u7684\u4e2a\u6570\n        # 6. 5\u7684\u4e2a\u6570 = 5\u7684\u4e2a\u6570 * 4\u7684\u4e2a\u6570 * 3\u7684\u4e2a\u6570 * 2\u7684\u4e2a\u6570 * 1\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570\n        # 7. 5\u7684\u4e2a\u6570 = 5\u7684\u4e2a\u6570 * 4\u7684\u4e2a\u6570 * 3\u7684\u4e2a\u6570 * 2\u7684\u4e2a\u6570 * 1\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570\n        # 8. 5\u7684\u4e2a\u6570 = 5\u7684\u4e2a\u6570 * 4\u7684\u4e2a\u6570 * 3\u7684\u4e2a\u6570 * 2\u7684\u4e2a\u6570 * 1\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570\n        # 9. 5\u7684\u4e2a\u6570 = 5\u7684\u4e2a\u6570 * 4\u7684\u4e2a\u6570 * 3\u7684\u4e2a\u6570 * 2\u7684\u4e2a\u6570 * 1\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570\n        # 10. 5\u7684\u4e2a\u6570 = 5\u7684\u4e2a\u6570 * 4\u7684\u4e2a\u6570 * 3\u7684\u4e2a\u6570 * 2\u7684\u4e2a\u6570 * 1\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570\n        # 11. 5\u7684\u4e2a\u6570 = 5\u7684\u4e2a\u6570 * 4\u7684\u4e2a\u6570 * 3\u7684\u4e2a\u6570 * 2\u7684\u4e2a\u6570 * 1\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570\n        # 12. 5\u7684\u4e2a\u6570 = 5\u7684\u4e2a\u6570 * 4\u7684\u4e2a\u6570 * 3\u7684\u4e2a\u6570 * 2\u7684\u4e2a\u6570 * 1\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570\n        # 13. 5\u7684\u4e2a\u6570 = 5\u7684\u4e2a\u6570 * 4\u7684\u4e2a\u6570 * 3\u7684\u4e2a\u6570 * 2\u7684\u4e2a\u6570 * 1\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570\n        # 14. 5\u7684\u4e2a\u6570 = 5\u7684\u4e2a\u6570 * 4\u7684\u4e2a\u6570 * 3\u7684\u4e2a\u6570 * 2\u7684\u4e2a\u6570 * 1\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570\n        # 15. 5\u7684\u4e2a\u6570 = 5\u7684\u4e2a\u6570 * 4\u7684\u4e2a\u6570 * 3\u7684\u4e2a\u6570 * 2\u7684\u4e2a\u6570 * 1\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570\n        # 16. 5\u7684\u4e2a\u6570 = 5\u7684\u4e2a\u6570 * 4\u7684\u4e2a\u6570 * 3\u7684\u4e2a\u6570 * 2\u7684\u4e2a\u6570 * 1\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570\n        # 17. 5\u7684\u4e2a\u6570 = 5\u7684\u4e2a\u6570 * 4\u7684"}, {"task_id": "factorial-trailing-zeroes", "completion": "class Solution(object):\n    def trailingZeroes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u672b\u5c3e0\u7684\u4e2a\u6570 = 5\u7684\u4e2a\u6570\n        # 2. 5\u7684\u4e2a\u6570 = 5\u7684\u4e2a\u6570 * 4\u7684\u4e2a\u6570\n        # 3. 5\u7684\u4e2a\u6570 = 5\u7684\u4e2a\u6570 * 4\u7684\u4e2a\u6570 * 3\u7684\u4e2a\u6570\n        # 4. 5\u7684\u4e2a\u6570 = 5\u7684\u4e2a\u6570 * 4\u7684\u4e2a\u6570 * 3\u7684\u4e2a\u6570 * 2\u7684\u4e2a\u6570\n        # 5. 5\u7684\u4e2a\u6570 = 5\u7684\u4e2a\u6570 * 4\u7684\u4e2a\u6570 * 3\u7684\u4e2a\u6570 * 2\u7684\u4e2a\u6570 * 1\u7684\u4e2a\u6570\n        # 6. 5\u7684\u4e2a\u6570 = 5\u7684\u4e2a\u6570 * 4\u7684\u4e2a\u6570 * 3\u7684\u4e2a\u6570 * 2\u7684\u4e2a\u6570 * 1\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570\n        # 7. 5\u7684\u4e2a\u6570 = 5\u7684\u4e2a\u6570 * 4\u7684\u4e2a\u6570 * 3\u7684\u4e2a\u6570 * 2\u7684\u4e2a\u6570 * 1\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570\n        # 8. 5\u7684\u4e2a\u6570 = 5\u7684\u4e2a\u6570 * 4\u7684\u4e2a\u6570 * 3\u7684\u4e2a\u6570 * 2\u7684\u4e2a\u6570 * 1\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570\n        # 9. 5\u7684\u4e2a\u6570 = 5\u7684\u4e2a\u6570 * 4\u7684\u4e2a\u6570 * 3\u7684\u4e2a\u6570 * 2\u7684\u4e2a\u6570 * 1\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570\n        # 10. 5\u7684\u4e2a\u6570 = 5\u7684\u4e2a\u6570 * 4\u7684\u4e2a\u6570 * 3\u7684\u4e2a\u6570 * 2\u7684\u4e2a\u6570 * 1\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570\n        # 11. 5\u7684\u4e2a\u6570 = 5\u7684\u4e2a\u6570 * 4\u7684\u4e2a\u6570 * 3\u7684\u4e2a\u6570 * 2\u7684\u4e2a\u6570 * 1\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570\n        # 12. 5\u7684\u4e2a\u6570 = 5\u7684\u4e2a\u6570 * 4\u7684\u4e2a\u6570 * 3\u7684\u4e2a\u6570 * 2\u7684\u4e2a\u6570 * 1\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570\n        # 13. 5\u7684\u4e2a\u6570 = 5\u7684\u4e2a\u6570 * 4\u7684\u4e2a\u6570 * 3\u7684\u4e2a\u6570 * 2\u7684\u4e2a\u6570 * 1\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570\n        # 14. 5\u7684\u4e2a\u6570 = 5\u7684\u4e2a\u6570 * 4\u7684\u4e2a\u6570 * 3\u7684\u4e2a\u6570 * 2\u7684\u4e2a\u6570 * 1\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570\n        # 15. 5\u7684\u4e2a\u6570 = 5\u7684\u4e2a\u6570 * 4\u7684\u4e2a\u6570 * 3\u7684\u4e2a\u6570 * 2\u7684\u4e2a\u6570 * 1\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570\n        # 16. 5\u7684\u4e2a\u6570 = 5\u7684\u4e2a\u6570 * 4\u7684\u4e2a\u6570 * 3\u7684\u4e2a\u6570 * 2\u7684\u4e2a\u6570 * 1\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570 * 0\u7684\u4e2a\u6570\n        # 17. 5\u7684\u4e2a\u6570 = 5\u7684\u4e2a\u6570 * 4\u7684"}], "zigzag-conversion": [{"task_id": "zigzag-conversion", "completion": "class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        \n        if numRows == 1:\n            return s\n        \n        result = []\n        for i in range(numRows):\n            result.append([])\n        \n        for i in range(len(s)):\n            if i % (numRows - 1) == 0:\n                result[0].append(s[i])\n            else:\n                result[i % (numRows - 1)].append(s[i])\n        \n        for i in range(numRows - 2, -1, -1):\n            for j in range(i + 1, numRows):\n                result[i].append(s[j + i])\n        \n        return ''.join(map(lambda x: ''.join(x), result))"}, {"task_id": "zigzag-conversion", "completion": "class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        \n        if numRows == 1:\n            return s\n        \n        res = []\n        for i in range(numRows):\n            res.append([])\n        \n        for i in range(len(s)):\n            if i % (numRows - 1) == 0:\n                res[0].append(s[i])\n            else:\n                res[i % (numRows - 1)].append(s[i])\n        \n        res_str = ''\n        for i in range(numRows):\n            res_str += ''.join(res[i])\n        \n        return res_str"}, {"task_id": "zigzag-conversion", "completion": "class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        \n        if numRows == 1:\n            return s\n        \n        result = []\n        for i in range(numRows):\n            result.append([])\n        \n        for i in range(len(s)):\n            if i % (numRows - 1) == 0:\n                result[0].append(s[i])\n            else:\n                result[i % (numRows - 1)].append(s[i])\n        \n        for i in range(numRows - 2, -1, -1):\n            for j in range(i + 1, numRows):\n                result[i].append(s[j + i])\n        \n        return ''.join(result[i] for i in range(numRows))"}, {"task_id": "zigzag-conversion", "completion": "class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        \n        if numRows == 1:\n            return s\n        \n        res = []\n        for i in range(numRows):\n            res.append([])\n        \n        for i in range(len(s)):\n            if i % (numRows - 1) == 0:\n                res[0].append(s[i])\n            elif i % (numRows - 1) == (numRows - 2):\n                res[numRows - 2].append(s[i])\n            else:\n                res[i % (numRows - 1)].append(s[i])\n        \n        res_str = ''\n        for i in range(numRows):\n            res_str += ''.join(res[i])\n        \n        return res_str"}, {"task_id": "zigzag-conversion", "completion": "class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        \n        if numRows == 1:\n            return s\n        \n        result = []\n        for i in range(numRows):\n            result.append([])\n        \n        row, direction = 0, 1\n        for c in s:\n            result[row].append(c)\n            if row == 0:\n                direction = 1\n            elif row == numRows - 1:\n                direction = -1\n            row += direction\n        \n        return ''.join(''.join(row) for row in result)"}], "trapping-rain-water": [{"task_id": "trapping-rain-water", "completion": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u626b\u63cf\u6574\u4e2a\u6570\u7ec4\uff0c\u9047\u5230\u9ad8\u5ea6\u5927\u4e8e\u5de6\u53f3\u76f8\u90bb\u9ad8\u5ea6\u7684\uff0c\u8ba1\u7b97\u5f53\u524d\u4f4d\u7f6e\u548c\u5de6\u53f3\u76f8\u90bb\u4f4d\u7f6e\u4e4b\u95f4\u7684\u8f83\u5c0f\u503c\uff0c\n        # \u7136\u540e\u628a\u8f83\u5c0f\u503c\u51cf\u53bb\u5f53\u524d\u4f4d\u7f6e\u7684\u9ad8\u5ea6\uff0c\u7d2f\u52a0\u7ed3\u679c\n        # \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u7684\u9ad8\u5ea6\u5c0f\u4e8e\u5de6\u53f3\u76f8\u90bb\u9ad8\u5ea6\uff0c\u5219\u4e0d\u9700\u8981\u8ba1\u7b97\n        # \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u7684\u9ad8\u5ea6\u5c0f\u4e8e\u5de6\u53f3\u76f8\u90bb\u9ad8\u5ea6\uff0c\u5219\u4e0d\u9700\u8981\u8ba1\u7b97\n        # \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u7684\u9ad8\u5ea6\u5c0f\u4e8e\u5de6\u53f3\u76f8\u90bb\u9ad8\u5ea6\uff0c\u5219\u4e0d\u9700\u8981\u8ba1\u7b97\n        # \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u7684\u9ad8\u5ea6\u5c0f\u4e8e\u5de6\u53f3\u76f8\u90bb\u9ad8\u5ea6\uff0c\u5219\u4e0d\u9700\u8981\u8ba1\u7b97\n        # \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u7684\u9ad8\u5ea6\u5c0f\u4e8e\u5de6\u53f3\u76f8\u90bb\u9ad8\u5ea6\uff0c\u5219\u4e0d\u9700\u8981\u8ba1\u7b97\n        # \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u7684\u9ad8\u5ea6\u5c0f\u4e8e\u5de6\u53f3\u76f8\u90bb\u9ad8\u5ea6\uff0c\u5219\u4e0d\u9700\u8981\u8ba1\u7b97\n        # \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u7684\u9ad8\u5ea6\u5c0f\u4e8e\u5de6\u53f3\u76f8\u90bb\u9ad8\u5ea6\uff0c\u5219\u4e0d\u9700\u8981\u8ba1\u7b97\n        # \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u7684\u9ad8\u5ea6\u5c0f\u4e8e\u5de6\u53f3\u76f8\u90bb\u9ad8\u5ea6\uff0c\u5219\u4e0d\u9700\u8981\u8ba1\u7b97\n        # \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u7684\u9ad8\u5ea6\u5c0f\u4e8e\u5de6\u53f3\u76f8\u90bb\u9ad8\u5ea6\uff0c\u5219\u4e0d\u9700\u8981\u8ba1\u7b97\n        # \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u7684\u9ad8\u5ea6\u5c0f\u4e8e\u5de6\u53f3\u76f8\u90bb\u9ad8\u5ea6\uff0c\u5219\u4e0d\u9700\u8981\u8ba1\u7b97\n        # \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u7684\u9ad8\u5ea6\u5c0f\u4e8e\u5de6\u53f3\u76f8\u90bb\u9ad8\u5ea6\uff0c\u5219\u4e0d\u9700\u8981\u8ba1\u7b97\n        # \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u7684\u9ad8\u5ea6\u5c0f\u4e8e\u5de6\u53f3\u76f8\u90bb\u9ad8\u5ea6\uff0c\u5219\u4e0d\u9700\u8981\u8ba1\u7b97\n        # \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u7684\u9ad8\u5ea6\u5c0f\u4e8e\u5de6\u53f3\u76f8\u90bb\u9ad8\u5ea6\uff0c\u5219\u4e0d\u9700\u8981\u8ba1\u7b97\n        # \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u7684\u9ad8\u5ea6\u5c0f\u4e8e\u5de6\u53f3\u76f8\u90bb\u9ad8\u5ea6\uff0c\u5219\u4e0d\u9700\u8981\u8ba1\u7b97\n        # \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u7684\u9ad8\u5ea6\u5c0f\u4e8e\u5de6\u53f3\u76f8\u90bb\u9ad8\u5ea6\uff0c\u5219\u4e0d\u9700\u8981\u8ba1\u7b97\n        # \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u7684\u9ad8\u5ea6\u5c0f\u4e8e\u5de6\u53f3\u76f8\u90bb\u9ad8\u5ea6\uff0c\u5219\u4e0d\u9700\u8981\u8ba1\u7b97\n        # \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u7684\u9ad8\u5ea6\u5c0f\u4e8e\u5de6\u53f3\u76f8\u90bb\u9ad8\u5ea6\uff0c\u5219\u4e0d\u9700\u8981\u8ba1\u7b97\n        # \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u7684\u9ad8\u5ea6\u5c0f\u4e8e\u5de6\u53f3\u76f8\u90bb\u9ad8\u5ea6\uff0c\u5219\u4e0d\u9700\u8981\u8ba1\u7b97\n        # \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u7684\u9ad8\u5ea6\u5c0f\u4e8e\u5de6\u53f3\u76f8\u90bb\u9ad8\u5ea6\uff0c\u5219\u4e0d\u9700\u8981\u8ba1\u7b97\n        # \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u7684\u9ad8\u5ea6\u5c0f\u4e8e\u5de6\u53f3\u76f8\u90bb\u9ad8\u5ea6\uff0c\u5219\u4e0d\u9700\u8981\u8ba1\u7b97\n        # \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u7684\u9ad8\u5ea6\u5c0f\u4e8e\u5de6\u53f3\u76f8\u90bb\u9ad8\u5ea6\uff0c\u5219\u4e0d\u9700\u8981\u8ba1\u7b97\n        # \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u7684\u9ad8\u5ea6\u5c0f\u4e8e\u5de6\u53f3\u76f8\u90bb\u9ad8\u5ea6\uff0c\u5219\u4e0d\u9700\u8981\u8ba1\u7b97\n        # \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u7684\u9ad8\u5ea6\u5c0f\u4e8e\u5de6\u53f3\u76f8\u90bb\u9ad8\u5ea6\uff0c\u5219\u4e0d\u9700\u8981\u8ba1\u7b97\n        # \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u7684\u9ad8\u5ea6\u5c0f\u4e8e\u5de6\u53f3\u76f8\u90bb\u9ad8\u5ea6\uff0c\u5219\u4e0d\u9700\u8981\u8ba1\u7b97\n        # \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u7684\u9ad8\u5ea6\u5c0f\u4e8e\u5de6\u53f3\u76f8\u90bb\u9ad8\u5ea6\uff0c\u5219\u4e0d\u9700\u8981\u8ba1\u7b97\n        # \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u7684\u9ad8\u5ea6\u5c0f\u4e8e\u5de6\u53f3\u76f8\u90bb\u9ad8\u5ea6\uff0c\u5219\u4e0d\u9700\u8981\u8ba1\u7b97\n        # \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u7684\u9ad8\u5ea6\u5c0f\u4e8e\u5de6\u53f3\u76f8\u90bb\u9ad8\u5ea6\uff0c\u5219\u4e0d\u9700\u8981\u8ba1\u7b97\n        # \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u7684\u9ad8\u5ea6\u5c0f\u4e8e\u5de6\u53f3\u76f8\u90bb\u9ad8\u5ea6\uff0c\u5219\u4e0d\u9700\u8981\u8ba1\u7b97\n        # \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u7684\u9ad8\u5ea6\u5c0f\u4e8e\u5de6\u53f3\u76f8\u90bb\u9ad8\u5ea6\uff0c\u5219\u4e0d\u9700\u8981\u8ba1\u7b97\n        # \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u7684\u9ad8\u5ea6\u5c0f\u4e8e\u5de6\u53f3"}, {"task_id": "trapping-rain-water", "completion": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u9ad8\u7684\u9ad8\u5ea6\n        max_height = 0\n        for i in range(len(height)):\n            if height[i] > max_height:\n                max_height = height[i]\n        \n        # 2. \u627e\u5230\u6700\u4f4e\u7684\u9ad8\u5ea6\n        min_height = 0\n        for i in range(len(height)):\n            if height[i] < min_height:\n                min_height = height[i]\n        \n        # 3. \u8ba1\u7b97\u6700\u9ad8\u7684\u9ad8\u5ea6\u548c\u6700\u4f4e\u7684\u9ad8\u5ea6\u4e4b\u95f4\u7684\u5dee\u503c\n        diff = max_height - min_height\n        \n        # 4. \u8ba1\u7b97\u6700\u9ad8\u7684\u9ad8\u5ea6\u548c\u6700\u4f4e\u7684\u9ad8\u5ea6\u4e4b\u95f4\u7684\u5dee\u503c\n        result = 0\n        for i in range(len(height)):\n            result += min(max_height - height[i], height[i] - min_height)\n        \n        return result - diff"}, {"task_id": "trapping-rain-water", "completion": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u626b\u63cf\u6574\u4e2a\u6570\u7ec4\uff0c\u9047\u5230\u9ad8\u5ea6\u5927\u4e8e\u5de6\u53f3\u76f8\u90bb\u9ad8\u5ea6\u7684\uff0c\u8ba1\u7b97\u5f53\u524d\u4f4d\u7f6e\u548c\u5de6\u53f3\u76f8\u90bb\u4f4d\u7f6e\u4e4b\u95f4\u7684\u8f83\u5c0f\u503c\uff0c\n        # \u7136\u540e\u628a\u8f83\u5c0f\u503c\u51cf\u53bb\u5f53\u524d\u4f4d\u7f6e\u7684\u9ad8\u5ea6\uff0c\u7d2f\u52a0\u7ed3\u679c\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u626b\u63cf\u6574\u4e2a\u6570\u7ec4\uff0c\u9047\u5230\u9ad8\u5ea6\u5927\u4e8e\u5de6\u53f3\u76f8\u90bb\u9ad8\u5ea6\u7684\uff0c\u8ba1\u7b97\u5f53\u524d\u4f4d\u7f6e\u548c\u5de6\u53f3\u76f8\u90bb\u4f4d\u7f6e\u4e4b\u95f4\u7684\u8f83\u5c0f\u503c\uff0c\n        # \u7136\u540e\u628a\u8f83\u5c0f\u503c\u51cf\u53bb\u5f53\u524d\u4f4d\u7f6e\u7684\u9ad8\u5ea6\uff0c\u7d2f\u52a0\u7ed3\u679c\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u626b\u63cf\u6574\u4e2a\u6570\u7ec4\uff0c\u9047\u5230\u9ad8\u5ea6\u5927\u4e8e\u5de6\u53f3\u76f8\u90bb\u9ad8\u5ea6\u7684\uff0c\u8ba1\u7b97\u5f53\u524d\u4f4d\u7f6e\u548c\u5de6\u53f3\u76f8\u90bb\u4f4d\u7f6e\u4e4b\u95f4\u7684\u8f83\u5c0f\u503c\uff0c\n        # \u7136\u540e\u628a\u8f83\u5c0f\u503c\u51cf\u53bb\u5f53\u524d\u4f4d\u7f6e\u7684\u9ad8\u5ea6\uff0c\u7d2f\u52a0\u7ed3\u679c\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u626b\u63cf\u6574\u4e2a\u6570\u7ec4\uff0c\u9047\u5230\u9ad8\u5ea6\u5927\u4e8e\u5de6\u53f3\u76f8\u90bb\u9ad8\u5ea6\u7684\uff0c\u8ba1\u7b97\u5f53\u524d\u4f4d\u7f6e\u548c\u5de6\u53f3\u76f8\u90bb\u4f4d\u7f6e\u4e4b\u95f4\u7684\u8f83\u5c0f\u503c\uff0c\n        # \u7136\u540e\u628a\u8f83\u5c0f\u503c\u51cf\u53bb\u5f53\u524d\u4f4d\u7f6e\u7684\u9ad8\u5ea6\uff0c\u7d2f\u52a0\u7ed3\u679c\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u626b\u63cf\u6574\u4e2a\u6570\u7ec4\uff0c\u9047\u5230\u9ad8\u5ea6\u5927\u4e8e\u5de6\u53f3\u76f8\u90bb\u9ad8\u5ea6\u7684\uff0c\u8ba1\u7b97\u5f53\u524d\u4f4d\u7f6e\u548c\u5de6\u53f3\u76f8\u90bb\u4f4d\u7f6e\u4e4b\u95f4\u7684\u8f83\u5c0f\u503c\uff0c\n        # \u7136\u540e\u628a\u8f83\u5c0f\u503c\u51cf\u53bb\u5f53\u524d\u4f4d\u7f6e\u7684\u9ad8\u5ea6\uff0c\u7d2f\u52a0\u7ed3\u679c\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u626b\u63cf\u6574\u4e2a\u6570\u7ec4\uff0c\u9047\u5230\u9ad8\u5ea6\u5927\u4e8e\u5de6\u53f3\u76f8\u90bb\u9ad8\u5ea6\u7684\uff0c\u8ba1\u7b97\u5f53\u524d\u4f4d\u7f6e\u548c\u5de6\u53f3\u76f8\u90bb\u4f4d\u7f6e\u4e4b\u95f4\u7684\u8f83\u5c0f\u503c\uff0c\n        # \u7136\u540e\u628a\u8f83\u5c0f\u503c\u51cf\u53bb\u5f53\u524d\u4f4d\u7f6e\u7684\u9ad8\u5ea6\uff0c\u7d2f\u52a0\u7ed3\u679c\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u626b\u63cf\u6574\u4e2a\u6570\u7ec4\uff0c\u9047\u5230\u9ad8\u5ea6\u5927\u4e8e\u5de6\u53f3\u76f8\u90bb\u9ad8\u5ea6\u7684\uff0c\u8ba1\u7b97\u5f53\u524d\u4f4d\u7f6e\u548c\u5de6\u53f3\u76f8\u90bb\u4f4d\u7f6e\u4e4b\u95f4\u7684\u8f83\u5c0f\u503c\uff0c\n        # \u7136\u540e\u628a\u8f83\u5c0f\u503c\u51cf\u53bb\u5f53\u524d\u4f4d\u7f6e\u7684\u9ad8\u5ea6\uff0c\u7d2f\u52a0\u7ed3\u679c\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u626b\u63cf\u6574\u4e2a\u6570\u7ec4\uff0c\u9047\u5230\u9ad8\u5ea6\u5927\u4e8e\u5de6\u53f3\u76f8\u90bb\u9ad8\u5ea6\u7684\uff0c\u8ba1\u7b97\u5f53\u524d\u4f4d\u7f6e\u548c\u5de6\u53f3\u76f8\u90bb\u4f4d\u7f6e\u4e4b\u95f4\u7684\u8f83\u5c0f\u503c\uff0c\n        # \u7136\u540e\u628a\u8f83\u5c0f\u503c\u51cf\u53bb\u5f53\u524d\u4f4d\u7f6e\u7684\u9ad8\u5ea6\uff0c\u7d2f\u52a0\u7ed3\u679c\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742"}, {"task_id": "trapping-rain-water", "completion": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u9ad8\u7684\u9ad8\u5ea6\n        max_height = 0\n        for i in range(len(height)):\n            if height[i] > max_height:\n                max_height = height[i]\n        \n        # 2. \u627e\u5230\u6700\u9ad8\u7684\u9ad8\u5ea6\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u6700\u4f4e\u9ad8\u5ea6\n        left_max = 0\n        right_max = 0\n        for i in range(len(height)):\n            if height[i] > max_height:\n                left_max = max(left_max, height[i])\n            else:\n                right_max = max(right_max, height[i])\n        \n        # 3. \u8ba1\u7b97\u603b\u7684\u6c34\u91cf\n        water = 0\n        for i in range(len(height)):\n            water += min(left_max, right_max) - height[i]\n        \n        return water"}, {"task_id": "trapping-rain-water", "completion": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u627e\u51fa\u6bcf\u4e2a\u4f4d\u7f6e\u7684\u6700\u5927\u9ad8\u5ea6\uff0c\u7136\u540e\u904d\u5386\u6bcf\u4e2a\u4f4d\u7f6e\uff0c\u8ba1\u7b97\u53ef\u4ee5\u5b58\u6c34\u91cf\n        # \u5982\u679c\u9047\u5230\u9ad8\u5ea6\u4e3a0\uff0c\u5219\u4e0d\u8ba1\u7b97\n        # \u5982\u679c\u9047\u5230\u9ad8\u5ea6\u4e3a1\uff0c\u5219\u4e0d\u8ba1\u7b97\n        # \u5982\u679c\u9047\u5230\u9ad8\u5ea6\u4e3a2\uff0c\u5219\u4e0d\u8ba1\u7b97\n        # \u5982\u679c\u9047\u5230\u9ad8\u5ea6\u4e3a3\uff0c\u5219\u4e0d\u8ba1\u7b97\n        # \u5982\u679c\u9047\u5230\u9ad8\u5ea6\u4e3a4\uff0c\u5219\u4e0d\u8ba1\u7b97\n        # \u5982\u679c\u9047\u5230\u9ad8\u5ea6\u4e3a5\uff0c\u5219\u4e0d\u8ba1\u7b97\n        # \u5982\u679c\u9047\u5230\u9ad8\u5ea6\u4e3a6\uff0c\u5219\u4e0d\u8ba1\u7b97\n        # \u5982\u679c\u9047\u5230\u9ad8\u5ea6\u4e3a7\uff0c\u5219\u4e0d\u8ba1\u7b97\n        # \u5982\u679c\u9047\u5230\u9ad8\u5ea6\u4e3a8\uff0c\u5219\u4e0d\u8ba1\u7b97\n        # \u5982\u679c\u9047\u5230\u9ad8\u5ea6\u4e3a9\uff0c\u5219\u4e0d\u8ba1\u7b97\n        # \u5982\u679c\u9047\u5230\u9ad8\u5ea6\u4e3a10\uff0c\u5219\u4e0d\u8ba1\u7b97\n        # \u5982\u679c\u9047\u5230\u9ad8\u5ea6\u4e3a11\uff0c\u5219\u4e0d\u8ba1\u7b97\n        # \u5982\u679c\u9047\u5230\u9ad8\u5ea6\u4e3a12\uff0c\u5219\u4e0d\u8ba1\u7b97\n        # \u5982\u679c\u9047\u5230\u9ad8\u5ea6\u4e3a13\uff0c\u5219\u4e0d\u8ba1\u7b97\n        # \u5982\u679c\u9047\u5230\u9ad8\u5ea6\u4e3a14\uff0c\u5219\u4e0d\u8ba1\u7b97\n        # \u5982\u679c\u9047\u5230\u9ad8\u5ea6\u4e3a15\uff0c\u5219\u4e0d\u8ba1\u7b97\n        # \u5982\u679c\u9047\u5230\u9ad8\u5ea6\u4e3a16\uff0c\u5219\u4e0d\u8ba1\u7b97\n        # \u5982\u679c\u9047\u5230\u9ad8\u5ea6\u4e3a17\uff0c\u5219\u4e0d\u8ba1\u7b97\n        # \u5982\u679c\u9047\u5230\u9ad8\u5ea6\u4e3a18\uff0c\u5219\u4e0d\u8ba1\u7b97\n        # \u5982\u679c\u9047\u5230\u9ad8\u5ea6\u4e3a19\uff0c\u5219\u4e0d\u8ba1\u7b97\n        # \u5982\u679c\u9047\u5230\u9ad8\u5ea6\u4e3a20\uff0c\u5219\u4e0d\u8ba1\u7b97\n        # \u5982\u679c\u9047\u5230\u9ad8\u5ea6\u4e3a21\uff0c\u5219\u4e0d\u8ba1\u7b97\n        # \u5982\u679c\u9047\u5230\u9ad8\u5ea6\u4e3a22\uff0c\u5219\u4e0d\u8ba1\u7b97\n        # \u5982\u679c\u9047\u5230\u9ad8\u5ea6\u4e3a23\uff0c\u5219\u4e0d\u8ba1\u7b97\n        # \u5982\u679c\u9047\u5230\u9ad8\u5ea6\u4e3a24\uff0c\u5219\u4e0d\u8ba1\u7b97\n        # \u5982\u679c\u9047\u5230\u9ad8\u5ea6\u4e3a25\uff0c\u5219\u4e0d\u8ba1\u7b97\n        # \u5982\u679c\u9047\u5230\u9ad8\u5ea6\u4e3a26\uff0c\u5219\u4e0d\u8ba1\u7b97\n        # \u5982\u679c\u9047\u5230\u9ad8\u5ea6\u4e3a27\uff0c\u5219\u4e0d\u8ba1\u7b97\n        # \u5982\u679c\u9047\u5230\u9ad8\u5ea6\u4e3a28\uff0c\u5219\u4e0d\u8ba1\u7b97\n        # \u5982\u679c\u9047\u5230\u9ad8\u5ea6\u4e3a29\uff0c\u5219\u4e0d\u8ba1\u7b97\n        # \u5982\u679c\u9047\u5230\u9ad8\u5ea6\u4e3a30\uff0c\u5219\u4e0d\u8ba1\u7b97\n        # \u5982\u679c\u9047\u5230\u9ad8\u5ea6\u4e3a31\uff0c\u5219\u4e0d\u8ba1\u7b97\n        # \u5982\u679c\u9047\u5230\u9ad8\u5ea6\u4e3a32\uff0c\u5219\u4e0d\u8ba1\u7b97\n        # \u5982\u679c\u9047\u5230\u9ad8\u5ea6\u4e3a33\uff0c\u5219\u4e0d\u8ba1\u7b97\n        # \u5982\u679c\u9047\u5230\u9ad8\u5ea6\u4e3a34\uff0c\u5219\u4e0d\u8ba1\u7b97\n        # \u5982\u679c\u9047\u5230\u9ad8\u5ea6\u4e3a35\uff0c\u5219\u4e0d\u8ba1\u7b97\n        # \u5982\u679c\u9047\u5230\u9ad8\u5ea6\u4e3a36\uff0c\u5219\u4e0d\u8ba1\u7b97\n        # \u5982\u679c\u9047\u5230\u9ad8\u5ea6\u4e3a37\uff0c\u5219\u4e0d\u8ba1\u7b97\n        # \u5982\u679c\u9047\u5230\u9ad8\u5ea6\u4e3a38\uff0c\u5219\u4e0d\u8ba1\u7b97\n        # \u5982\u679c\u9047\u5230\u9ad8\u5ea6\u4e3a39\uff0c\u5219\u4e0d\u8ba1\u7b97\n        # \u5982\u679c\u9047\u5230\u9ad8\u5ea6\u4e3a40\uff0c\u5219\u4e0d\u8ba1\u7b97\n        # \u5982\u679c\u9047\u5230\u9ad8\u5ea6\u4e3a41\uff0c\u5219\u4e0d\u8ba1\u7b97\n        # \u5982\u679c\u9047\u5230\u9ad8\u5ea6\u4e3a42\uff0c\u5219\u4e0d\u8ba1\u7b97\n        # \u5982\u679c\u9047\u5230\u9ad8\u5ea6\u4e3a43\uff0c\u5219\u4e0d\u8ba1\u7b97\n        # \u5982\u679c\u9047\u5230\u9ad8\u5ea6\u4e3a44\uff0c\u5219\u4e0d\u8ba1\u7b97\n        # \u5982\u679c\u9047\u5230\u9ad8\u5ea6\u4e3a45\uff0c\u5219\u4e0d\u8ba1\u7b97\n        # \u5982\u679c\u9047\u5230\u9ad8\u5ea6\u4e3a46\uff0c\u5219\u4e0d\u8ba1\u7b97\n        # \u5982\u679c\u9047\u5230"}], "find-all-numbers-disappeared-in-an-array": [{"task_id": "find-all-numbers-disappeared-in-an-array", "completion": "class Solution(object):\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u627e\u51fanums\u4e2d\u7684\u6700\u5927\u503c\n        max_num = max(nums)\n        \n        # 2. \u521b\u5efa\u4e00\u4e2a\u957f\u5ea6\u4e3amax_num+1\u7684\u6570\u7ec4\n        # 3. \u5c06nums\u4e2d\u7684\u6570\u5b57\u4f5c\u4e3a\u6570\u7ec4\u7684\u4e0b\u6807\uff0c\u5c06\u5bf9\u5e94\u4e0b\u6807\u7684\u503c\u8bbe\u4e3a1\n        # 4. \u904d\u5386\u6570\u7ec4\uff0c\u5c06\u4e0b\u6807\u5bf9\u5e94\u7684\u503c\u8bbe\u4e3a0\n        # 5. \u904d\u5386\u6570\u7ec4\uff0c\u5c06\u4e0b\u6807\u5bf9\u5e94\u7684\u503c\u8bbe\u4e3a0\n        # 6. \u904d\u5386\u6570\u7ec4\uff0c\u5c06\u4e0b\u6807\u5bf9\u5e94\u7684\u503c\u8bbe\u4e3a0\n        # 7. \u904d\u5386\u6570\u7ec4\uff0c\u5c06\u4e0b\u6807\u5bf9\u5e94\u7684\u503c\u8bbe\u4e3a0\n        # 8. \u904d\u5386\u6570\u7ec4\uff0c\u5c06\u4e0b\u6807\u5bf9\u5e94\u7684\u503c\u8bbe\u4e3a0\n        # 9. \u904d\u5386\u6570\u7ec4\uff0c\u5c06\u4e0b\u6807\u5bf9\u5e94\u7684\u503c\u8bbe\u4e3a0\n        # 10. \u904d\u5386\u6570\u7ec4\uff0c\u5c06\u4e0b\u6807\u5bf9\u5e94\u7684\u503c\u8bbe\u4e3a0\n        # 11. \u904d\u5386\u6570\u7ec4\uff0c\u5c06\u4e0b\u6807\u5bf9\u5e94\u7684\u503c\u8bbe\u4e3a0\n        # 12. \u904d\u5386\u6570\u7ec4\uff0c\u5c06\u4e0b\u6807\u5bf9\u5e94\u7684\u503c\u8bbe\u4e3a0\n        # 13. \u904d\u5386\u6570\u7ec4\uff0c\u5c06\u4e0b\u6807\u5bf9\u5e94\u7684\u503c\u8bbe\u4e3a0\n        # 14. \u904d\u5386\u6570\u7ec4\uff0c\u5c06\u4e0b\u6807\u5bf9\u5e94\u7684\u503c\u8bbe\u4e3a0\n        # 15. \u904d\u5386\u6570\u7ec4\uff0c\u5c06\u4e0b\u6807\u5bf9\u5e94\u7684\u503c\u8bbe\u4e3a0\n        # 16. \u904d\u5386\u6570\u7ec4\uff0c\u5c06\u4e0b\u6807\u5bf9\u5e94\u7684\u503c\u8bbe\u4e3a0\n        # 17. \u904d\u5386\u6570\u7ec4\uff0c\u5c06\u4e0b\u6807\u5bf9\u5e94\u7684\u503c\u8bbe\u4e3a0\n        # 18. \u904d\u5386\u6570\u7ec4\uff0c\u5c06\u4e0b\u6807\u5bf9\u5e94\u7684\u503c\u8bbe\u4e3a0\n        # 19. \u904d\u5386\u6570\u7ec4\uff0c\u5c06\u4e0b\u6807\u5bf9\u5e94\u7684\u503c\u8bbe\u4e3a0\n        # 20. \u904d\u5386\u6570\u7ec4\uff0c\u5c06\u4e0b\u6807\u5bf9\u5e94\u7684\u503c\u8bbe\u4e3a0\n        # 21. \u904d\u5386\u6570\u7ec4\uff0c\u5c06\u4e0b\u6807\u5bf9\u5e94\u7684\u503c\u8bbe\u4e3a0\n        # 22. \u904d\u5386\u6570\u7ec4\uff0c\u5c06\u4e0b\u6807\u5bf9\u5e94\u7684\u503c\u8bbe\u4e3a0\n        # 23. \u904d\u5386\u6570\u7ec4\uff0c\u5c06\u4e0b\u6807\u5bf9\u5e94\u7684\u503c\u8bbe\u4e3a0\n        # 24. \u904d\u5386\u6570\u7ec4\uff0c\u5c06\u4e0b\u6807\u5bf9\u5e94\u7684\u503c\u8bbe\u4e3a0\n        # 25. \u904d\u5386\u6570\u7ec4\uff0c\u5c06\u4e0b\u6807\u5bf9\u5e94\u7684\u503c\u8bbe\u4e3a0\n        # 26. \u904d\u5386\u6570\u7ec4\uff0c\u5c06\u4e0b\u6807\u5bf9\u5e94\u7684\u503c\u8bbe\u4e3a0\n        # 27. \u904d\u5386\u6570\u7ec4\uff0c\u5c06\u4e0b\u6807\u5bf9\u5e94\u7684\u503c\u8bbe\u4e3a0\n        # 28. \u904d\u5386\u6570\u7ec4\uff0c\u5c06\u4e0b\u6807\u5bf9\u5e94\u7684\u503c\u8bbe\u4e3a0\n        # 29. \u904d\u5386\u6570\u7ec4\uff0c\u5c06\u4e0b\u6807\u5bf9\u5e94\u7684\u503c\u8bbe\u4e3a0\n        # 30. \u904d\u5386\u6570\u7ec4\uff0c\u5c06\u4e0b\u6807\u5bf9\u5e94\u7684\u503c\u8bbe\u4e3a0\n        # 31. \u904d\u5386\u6570\u7ec4\uff0c\u5c06\u4e0b\u6807\u5bf9\u5e94\u7684\u503c\u8bbe\u4e3a0\n        # 32. \u904d\u5386\u6570\u7ec4\uff0c\u5c06\u4e0b\u6807\u5bf9\u5e94\u7684\u503c\u8bbe\u4e3a0\n        # 33. \u904d\u5386\u6570\u7ec4\uff0c\u5c06\u4e0b\u6807\u5bf9\u5e94\u7684\u503c\u8bbe\u4e3a0\n        # 34. \u904d\u5386\u6570\u7ec4\uff0c\u5c06\u4e0b\u6807\u5bf9\u5e94\u7684\u503c\u8bbe\u4e3a0\n        # 35. \u904d\u5386\u6570\u7ec4\uff0c\u5c06\u4e0b\u6807\u5bf9\u5e94\u7684\u503c\u8bbe\u4e3a0\n        # 36. \u904d\u5386\u6570\u7ec4\uff0c\u5c06\u4e0b\u6807\u5bf9\u5e94\u7684\u503c\u8bbe\u4e3a0\n        # 37. \u904d\u5386\u6570\u7ec4\uff0c\u5c06\u4e0b\u6807\u5bf9\u5e94\u7684\u503c\u8bbe\u4e3a0\n        # 38. \u904d\u5386\u6570\u7ec4\uff0c\u5c06\u4e0b\u6807\u5bf9\u5e94\u7684\u503c\u8bbe\u4e3a0"}, {"task_id": "find-all-numbers-disappeared-in-an-array", "completion": "class Solution(object):\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u627e\u51fa\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 2. \u627e\u51fa\u6570\u7ec4\u4e2d\u7684\u7f3a\u5931\u6570\u5b57\n        # 3. \u8fd4\u56de\u7f3a\u5931\u6570\u5b57\n        \n        # 1. \u627e\u51fa\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 1.1 \u627e\u51fa\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 1.1.1 \u627e\u51fa\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 1.1.1.1 \u627e\u51fa\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 1.1.1.1.1 \u627e\u51fa\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 1.1.1.1.1.1 \u627e\u51fa\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 1.1.1.1.1.1.1 \u627e\u51fa\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 1.1.1.1.1.1.1.1 \u627e\u51fa\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 1.1.1.1.1.1.1.1.1 \u627e\u51fa\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 1.1.1.1.1.1.1.1.1.1 \u627e\u51fa\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 1.1.1.1.1.1.1.1.1.1.1 \u627e\u51fa\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 1.1.1.1.1.1.1.1.1.1.1.1 \u627e\u51fa\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 1.1.1.1.1.1.1.1.1.1.1.1.1 \u627e\u51fa\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 1.1.1.1.1.1.1.1.1.1.1.1.1.1 \u627e\u51fa\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 1.1.1.1.1.1.1.1.1.1.1.1.1.1.1 \u627e\u51fa\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1 \u627e\u51fa\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1 \u627e\u51fa\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1 \u627e\u51fa\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1 \u627e\u51fa\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1 \u627e\u51fa\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1 \u627e\u51fa\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1 \u627e\u51fa\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1 \u627e\u51fa\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1"}, {"task_id": "find-all-numbers-disappeared-in-an-array", "completion": "class Solution(object):\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u627e\u51fanums\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 2. \u627e\u51fanums\u4e2d\u7684\u7f3a\u5931\u6570\u5b57\n        # 3. \u628a\u91cd\u590d\u6570\u5b57\u548c\u7f3a\u5931\u6570\u5b57\u5408\u5e76\n        # 4. \u53bb\u91cd\n        # 5. \u8fd4\u56de\n        # 6. \u65f6\u95f4\u590d\u6742\u5ea6: O(n)\n        # 7. \u7a7a\u95f4\u590d\u6742\u5ea6: O(n)\n        \n        # 1. \u627e\u51fanums\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 1.1 \u627e\u51fanums\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 1.1.1 \u627e\u51fanums\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 1.1.1.1 \u627e\u51fanums\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 1.1.1.1.1 \u627e\u51fanums\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 1.1.1.1.1.1 \u627e\u51fanums\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 1.1.1.1.1.1.1 \u627e\u51fanums\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 1.1.1.1.1.1.1.1 \u627e\u51fanums\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 1.1.1.1.1.1.1.1.1 \u627e\u51fanums\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 1.1.1.1.1.1.1.1.1.1 \u627e\u51fanums\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 1.1.1.1.1.1.1.1.1.1.1 \u627e\u51fanums\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 1.1.1.1.1.1.1.1.1.1.1.1 \u627e\u51fanums\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 1.1.1.1.1.1.1.1.1.1.1.1.1 \u627e\u51fanums\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 1.1.1.1.1.1.1.1.1.1.1.1.1.1 \u627e\u51fanums\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 1.1.1.1.1.1.1.1.1.1.1.1.1.1.1 \u627e\u51fanums\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1 \u627e\u51fanums\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1 \u627e\u51fanums\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1 \u627e\u51fanums\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1 \u627e\u51fanums\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1 \u627e\u51fanums\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1 \u627e\u51fanums\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1 \u627e\u51fanums\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1"}, {"task_id": "find-all-numbers-disappeared-in-an-array", "completion": "class Solution(object):\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u627e\u51fa\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 2. \u627e\u51fa\u6570\u7ec4\u4e2d\u7684\u7f3a\u5931\u6570\u5b57\n        # 3. \u8fd4\u56de\u7f3a\u5931\u6570\u5b57\n        \n        # 1. \u627e\u51fa\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 1.1 \u627e\u51fa\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 1.1.1 \u627e\u51fa\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 1.1.1.1 \u627e\u51fa\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 1.1.1.1.1 \u627e\u51fa\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 1.1.1.1.1.1 \u627e\u51fa\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 1.1.1.1.1.1.1 \u627e\u51fa\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 1.1.1.1.1.1.1.1 \u627e\u51fa\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 1.1.1.1.1.1.1.1.1 \u627e\u51fa\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 1.1.1.1.1.1.1.1.1.1 \u627e\u51fa\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 1.1.1.1.1.1.1.1.1.1.1 \u627e\u51fa\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 1.1.1.1.1.1.1.1.1.1.1.1 \u627e\u51fa\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 1.1.1.1.1.1.1.1.1.1.1.1.1 \u627e\u51fa\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 1.1.1.1.1.1.1.1.1.1.1.1.1.1 \u627e\u51fa\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 1.1.1.1.1.1.1.1.1.1.1.1.1.1.1 \u627e\u51fa\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1 \u627e\u51fa\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1 \u627e\u51fa\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1 \u627e\u51fa\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1 \u627e\u51fa\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1 \u627e\u51fa\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1 \u627e\u51fa\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1 \u627e\u51fa\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1 \u627e\u51fa\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u6570\u5b57\n        # 1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1"}, {"task_id": "find-all-numbers-disappeared-in-an-array", "completion": "class Solution(object):\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u627e\u51fanums\u4e2d\u7684\u91cd\u590d\u5143\u7d20\n        # 2. \u627e\u51fanums\u4e2d\u7684\u7f3a\u5931\u5143\u7d20\n        # 3. \u8fd4\u56de\u7f3a\u5931\u5143\u7d20\n        # 4. \u65f6\u95f4\u590d\u6742\u5ea6: O(n)\n        # 5. \u7a7a\u95f4\u590d\u6742\u5ea6: O(1)\n        \n        # 1. \u627e\u51fanums\u4e2d\u7684\u91cd\u590d\u5143\u7d20\n        # 1.1 \u627e\u51fanums\u4e2d\u7684\u91cd\u590d\u5143\u7d20\n        # 1.1.1 \u627e\u51fanums\u4e2d\u7684\u91cd\u590d\u5143\u7d20\n        # 1.1.1.1 \u627e\u51fanums\u4e2d\u7684\u91cd\u590d\u5143\u7d20\n        # 1.1.1.1.1 \u627e\u51fanums\u4e2d\u7684\u91cd\u590d\u5143\u7d20\n        # 1.1.1.1.1.1 \u627e\u51fanums\u4e2d\u7684\u91cd\u590d\u5143\u7d20\n        # 1.1.1.1.1.1.1 \u627e\u51fanums\u4e2d\u7684\u91cd\u590d\u5143\u7d20\n        # 1.1.1.1.1.1.1.1 \u627e\u51fanums\u4e2d\u7684\u91cd\u590d\u5143\u7d20\n        # 1.1.1.1.1.1.1.1.1 \u627e\u51fanums\u4e2d\u7684\u91cd\u590d\u5143\u7d20\n        # 1.1.1.1.1.1.1.1.1.1 \u627e\u51fanums\u4e2d\u7684\u91cd\u590d\u5143\u7d20\n        # 1.1.1.1.1.1.1.1.1.1.1 \u627e\u51fanums\u4e2d\u7684\u91cd\u590d\u5143\u7d20\n        # 1.1.1.1.1.1.1.1.1.1.1.1 \u627e\u51fanums\u4e2d\u7684\u91cd\u590d\u5143\u7d20\n        # 1.1.1.1.1.1.1.1.1.1.1.1.1 \u627e\u51fanums\u4e2d\u7684\u91cd\u590d\u5143\u7d20\n        # 1.1.1.1.1.1.1.1.1.1.1.1.1.1 \u627e\u51fanums\u4e2d\u7684\u91cd\u590d\u5143\u7d20\n        # 1.1.1.1.1.1.1.1.1.1.1.1.1.1.1 \u627e\u51fanums\u4e2d\u7684\u91cd\u590d\u5143\u7d20\n        # 1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1 \u627e\u51fanums\u4e2d\u7684\u91cd\u590d\u5143\u7d20\n        # 1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1 \u627e\u51fanums\u4e2d\u7684\u91cd\u590d\u5143\u7d20\n        # 1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1 \u627e\u51fanums\u4e2d\u7684\u91cd\u590d\u5143\u7d20\n        # 1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1 \u627e\u51fanums\u4e2d\u7684\u91cd\u590d\u5143\u7d20\n        # 1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1 \u627e\u51fanums\u4e2d\u7684\u91cd\u590d\u5143\u7d20\n        # 1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1 \u627e\u51fanums\u4e2d\u7684\u91cd\u590d\u5143\u7d20\n        # 1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1 \u627e\u51fanums\u4e2d\u7684\u91cd\u590d\u5143\u7d20\n        # 1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1 \u627e\u51fanums\u4e2d\u7684\u91cd\u590d\u5143\u7d20\n        # 1.1.1"}], "count-of-smaller-numbers-after-self": [{"task_id": "count-of-smaller-numbers-after-self", "completion": "class Solution(object):\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # M1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6: O(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u6267\u884c\u7528\u65f6 : 128 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.93%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 14.3 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237\n\n        # res = []\n        # for i in range(len(nums)):\n        #     count = 0\n        #     for j in range(i+1, len(nums)):\n        #         if nums[i] > nums[j]:\n        #             count += 1\n        #     res.append(count)\n        # return res\n\n        # M2. \u5355\u8c03\u6808\n        # \u65f6\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u6267\u884c\u7528\u65f6 : 48 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.93%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 14.3 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237\n\n        # res = []\n        # stack = []\n        # for i in range(len(nums)):\n        #     while stack and nums[i] < nums[stack[-1]]:\n        #         res.append(stack[-1])\n        #         stack.pop()\n        #     stack.append(nums[i])\n        # while stack:\n        #     res.append(stack[-1])\n        #     stack.pop()\n        # return res\n\n        # M3. \u5355\u8c03\u6808 + \u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u6267\u884c\u7528\u65f6 : 48 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.93%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 14.3 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237\n\n        # res = []\n        # stack = []\n        # hashmap = {}\n        # for i in range(len(nums)):\n        #     while stack and nums[i] < nums[stack[-1]]:\n        #         res.append(hashmap[stack.pop()])\n        #     if stack:\n        #         hashmap[nums[i]] = stack[-1]\n        #     stack.append(nums[i])\n        # while stack:\n        #     res.append(hashmap[stack.pop()])\n        # return res\n\n        # M4. \u5355\u8c03\u6808 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u6267\u884c\u7528\u65f6 : 48 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.93%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 14.3 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237\n\n        # res = []\n        # stack = []\n        # hashmap = {}\n        # hashmap2 = {}\n        # for i in range(len(nums)):\n        #     while stack and nums[i] < nums[stack[-1]]:\n        #         res.append(hashmap2[stack.pop()])\n        #     if stack:\n        #         hashmap2[nums[i]] = hashmap[stack[-1]]\n        #     stack.append(nums[i])\n        #     hashmap[nums[i]] = i\n        # while stack:\n        #     res.append(hashmap2[stack.pop()])\n        # return res\n\n        # M5. \u5355\u8c03\u6808"}, {"task_id": "count-of-smaller-numbers-after-self", "completion": "class Solution(object):\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # M1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6: O(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u6267\u884c\u7528\u65f6 : 104 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.79%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 14.3 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.04%\u7684\u7528\u6237\n        \n        # res = []\n        # for i in range(len(nums)):\n        #     count = 0\n        #     for j in range(i+1, len(nums)):\n        #         if nums[i] > nums[j]:\n        #             count += 1\n        #     res.append(count)\n        # return res\n        \n        # M2. \u5355\u8c03\u6808\n        # \u65f6\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u6267\u884c\u7528\u65f6 : 48 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.79%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 14.3 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.04%\u7684\u7528\u6237\n        \n        # res = []\n        # stack = []\n        # for i in range(len(nums)):\n        #     while stack and nums[i] < nums[stack[-1]]:\n        #         res.append(stack[-1])\n        #         stack.pop()\n        #     stack.append(nums[i])\n        # while stack:\n        #     res.append(stack[-1])\n        #     stack.pop()\n        # return res\n        \n        # M3. \u5355\u8c03\u6808 + \u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u6267\u884c\u7528\u65f6 : 48 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.79%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 14.3 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.04%\u7684\u7528\u6237\n        \n        # res = []\n        # stack = []\n        # hashmap = {}\n        # for i in range(len(nums)):\n        #     while stack and nums[i] < nums[stack[-1]]:\n        #         res.append(hashmap[stack[-1]])\n        #         stack.pop()\n        #     if stack:\n        #         hashmap[nums[i]] = stack[-1]\n        #     stack.append(nums[i])\n        # while stack:\n        #     res.append(hashmap[stack[-1]])\n        #     stack.pop()\n        # return res\n        \n        # M4. \u5355\u8c03\u6808 + \u54c8\u5e0c\u8868 + \u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u6267\u884c\u7528\u65f6 : 48 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.79%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 14.3 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.04%\u7684\u7528\u6237\n        \n        # res = []\n        # stack = []\n        # hashmap = {}\n        # hashmap2 = {}\n        # for i in range(len(nums)):\n        #     while stack and nums[i] < nums[stack[-1]]:\n        #         res.append(hashmap2[stack[-1]])\n        #         stack.pop()\n        #     if stack:\n        #         hashmap[nums[i]] = stack[-1]\n        #         hashmap2[stack[-1]] = hashmap2.get(stack[-1], 0) + 1\n        #     stack.append(nums[i])\n        # while stack:\n        #"}, {"task_id": "count-of-smaller-numbers-after-self", "completion": "class Solution(object):\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # M1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6: O(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u6267\u884c\u7528\u65f6 : 104 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.07%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 14.1 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.07%\u7684\u7528\u6237\n        # \n        # \u6267\u884c\u7528\u65f6 : 104 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.07%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 14.1 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.07%\u7684\u7528\u6237\n        # \n        # \u6267\u884c\u7528\u65f6 : 104 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.07%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 14.1 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.07%\u7684\u7528\u6237\n        # \n        # \u6267\u884c\u7528\u65f6 : 104 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.07%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 14.1 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.07%\u7684\u7528\u6237\n        # \n        # \u6267\u884c\u7528\u65f6 : 104 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.07%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 14.1 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.07%\u7684\u7528\u6237\n        # \n        # \u6267\u884c\u7528\u65f6 : 104 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.07%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 14.1 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.07%\u7684\u7528\u6237\n        # \n        # \u6267\u884c\u7528\u65f6 : 104 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.07%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 14.1 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.07%\u7684\u7528\u6237\n        # \n        # \u6267\u884c\u7528\u65f6 : 104 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.07%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 14.1 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.07%\u7684\u7528\u6237\n        # \n        # \u6267\u884c\u7528\u65f6 : 104 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.07%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 14.1 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.07%\u7684\u7528\u6237\n        # \n        # \u6267\u884c\u7528\u65f6 : 104 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.07%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 14.1 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.07%\u7684\u7528\u6237\n        # \n        # \u6267\u884c\u7528\u65f6 : 104 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.07%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 14.1 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.07%\u7684\u7528\u6237\n        # \n        # \u6267\u884c\u7528\u65f6 : 104 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.07%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 14.1 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.07%\u7684\u7528\u6237\n        # \n        # \ufffd\ufffd"}, {"task_id": "count-of-smaller-numbers-after-self", "completion": "class Solution(object):\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # M1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6: O(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u6267\u884c\u7528\u65f6 : 104 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 14.3 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n        # \u8fd9\u91cc\u7684\u66b4\u529b\u89e3\u6cd5\u662f\u6307\uff0c\u6211\u4eec\u53ef\u4ee5\u904d\u5386\u4e00\u904d\u6570\u7ec4\uff0c\u7136\u540e\u904d\u5386\u4e00\u904d\u6570\u7ec4\uff0c\u7136\u540e\u5224\u65ad\u6bcf\u4e2a\u6570\u5b57\u662f\u5426\u5c0f\u4e8e\u5f53\u524d\u6570\u5b57\uff0c\u5982\u679c\u5c0f\u4e8e\u5f53\u524d\u6570\u5b57\uff0c\u5219\u8ba1\u6570\u5668\u52a01\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(n)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(n)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(n)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(n)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(n)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(n)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(n)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(n)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(n)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(n)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(n)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(n)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(n)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(n)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(n)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(n)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(n)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(n)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(n)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(n)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(n)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(n)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^2)\uff0c\u7a7a\u95f4\u590d\ufffd\ufffd"}, {"task_id": "count-of-smaller-numbers-after-self", "completion": "class Solution(object):\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # M1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6: O(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6: O(n)\n        # \u6267\u884c\u7528\u65f6 : 104 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.96%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 14.3 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.95%\u7684\u7528\u6237\n        # \u8fd9\u91cc\u7684\u66b4\u529b\u89e3\u6cd5\u662f\u6307\u904d\u5386\u6570\u7ec4\uff0c\u7136\u540e\u904d\u5386\u6570\u7ec4\uff0c\u7136\u540e\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u5927\u5c0f\uff0c\u5982\u679c\u5927\u4e8e\u5f53\u524d\u5143\u7d20\uff0c\u5219\u8ba1\u6570\u5668\u52a01\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(1)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(1)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(1)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(1)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(1)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(1)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(1)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(1)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(1)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(1)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(1)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(1)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(1)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(1)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(1)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(1)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(1)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(1)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(1)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(1)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(1)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(1)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(1)\n        # \u8fd9\u79cd\u65b9"}], "set-intersection-size-at-least-two": [{"task_id": "set-intersection-size-at-least-two", "completion": "class Solution(object):\n    def intersectionSizeTwo(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # Sort the intervals by start time\n        intervals.sort(key=lambda x: x[0])\n        \n        # Initialize the result\n        result = 0\n        \n        # Initialize the start and end of the interval\n        start = intervals[0][0]\n        end = intervals[0][1]\n        \n        # Iterate over the intervals\n        for i in range(1, len(intervals)):\n            \n            # If the start of the current interval is less than the end of the previous interval\n            if intervals[i][0] < end:\n                \n                # Update the end of the interval\n                end = max(end, intervals[i][1])\n                \n            # If the start of the current interval is greater than the end of the previous interval\n            else:\n                \n                # Update the result\n                result += end - start + 1\n                \n                # Update the start and end of the interval\n                start = intervals[i][0]\n                end = intervals[i][1]\n                \n        # Update the result\n        result += end - start + 1\n        \n        # Return the result\n        return result"}, {"task_id": "set-intersection-size-at-least-two", "completion": "class Solution(object):\n    def intersectionSizeTwo(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # Sort the intervals by start time\n        intervals.sort(key=lambda x: x[0])\n        \n        # Initialize the result\n        result = 0\n        \n        # Iterate over the intervals\n        for i in range(len(intervals)):\n            \n            # Get the current interval\n            interval = intervals[i]\n            \n            # Get the end time of the current interval\n            end = interval[1]\n            \n            # Iterate over the remaining intervals\n            for j in range(i+1, len(intervals)):\n                \n                # Get the next interval\n                next_interval = intervals[j]\n                \n                # Get the start time of the next interval\n                start = next_interval[0]\n                \n                # If the end time of the current interval is greater than the start time of the next interval\n                if end >= start:\n                    \n                    # Increment the result\n                    result += 1\n                    \n                    # Break out of the inner loop\n                    break\n                \n                # Else, if the end time of the current interval is less than the start time of the next interval\n                else:\n                    \n                    # If the end time of the current interval is greater than the start time of the previous interval\n                    if end > intervals[j-1][0]:\n                        \n                        # Increment the result\n                        result += 1\n                        \n                        # Break out of the inner loop\n                        break\n                    \n                    # Else, if the end time of the current interval is less than the start time of the previous interval\n                    else:\n                        \n                        # If the end time of the current interval is greater than the start time of the previous interval\n                        if end > intervals[j-1][1]:\n                            \n                            # Increment the result\n                            result += 1\n                            \n                            # Break out of the inner loop\n                            break\n                        \n                        # Else, if the end time of the current interval is less than the start time of the previous interval\n                        else:\n                            \n                            # If the end time of the current interval is greater than the start time of the previous interval\n                            if end > intervals[j-1][0]:\n                                \n                                # Increment the result\n                                result += 1\n                                \n                                # Break out of the inner loop\n                                break\n                            \n                            # Else, if the end time of the current interval is less than the start time of the previous interval\n                            else:\n                                \n                                # If the end time of the current interval is greater than the start time of the previous interval\n                                if end > intervals[j-1][1]:\n                                    \n                                    # Increment the result\n                                    result += 1\n                                    \n                                    # Break out of the inner loop\n                                    break\n                                \n                                # Else, if the end time of the current interval is less than the start time of the previous interval\n                                else:\n                                    \n                                    # If the end time of the current interval is greater than the start time of the previous interval\n                                    if end > intervals[j-1][0]:\n                                        \n                                        # Increment the result\n                                        result += 1\n                                        \n                                        # Break out of the inner loop\n                                        break\n                                    \n                                    # Else, if the end time of the current interval is less than the start time of the previous interval\n                                    else:\n                                        \n                                        # If the end time of the current interval is greater than the start time of the previous interval\n                                        if end > intervals[j-1][1]:\n                                            \n                                            # Increment the result\n                                            result += 1\n                                            \n                                            # Break out of the inner loop\n                                            break\n                                        \n                                        # Else, if the end time of the current interval is less than the start time of the previous interval\n                                        else:\n                                            \n                                            # If the end time of the current interval is greater than the start time of the previous interval\n                                            if end > intervals[j-1][0]:\n                                                \n                                                # Increment the result\n                                                result += 1\n                                                \n                                                # Break out of the inner loop\n                                                break\n                                            \n                                            # Else, if the end time"}, {"task_id": "set-intersection-size-at-least-two", "completion": "class Solution(object):\n    def intersectionSizeTwo(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # Sort the intervals by start time\n        intervals.sort(key=lambda x: x[0])\n        \n        # Initialize the result\n        result = 0\n        \n        # Iterate over the intervals\n        for i in range(len(intervals)):\n            \n            # Get the current interval\n            interval = intervals[i]\n            \n            # Get the end time of the current interval\n            end = interval[1]\n            \n            # Iterate over the remaining intervals\n            for j in range(i+1, len(intervals)):\n                \n                # Get the next interval\n                next_interval = intervals[j]\n                \n                # Get the start time of the next interval\n                start = next_interval[0]\n                \n                # If the end time of the current interval is greater than the start time of the next interval\n                if end > start:\n                    \n                    # Increment the result\n                    result += 1\n                    \n                    # Break out of the inner loop\n                    break\n                \n                # If the end time of the current interval is less than the start time of the next interval\n                else:\n                    \n                    # If the end time of the current interval is greater than the start time of the next interval\n                    if end > start:\n                        \n                        # Increment the result\n                        result += 1\n                        \n                        # Break out of the inner loop\n                        break\n                    \n                    # If the end time of the current interval is less than the start time of the next interval\n                    else:\n                        \n                        # If the end time of the current interval is greater than the start time of the next interval\n                        if end > start:\n                            \n                            # Increment the result\n                            result += 1\n                            \n                            # Break out of the inner loop\n                            break\n                        \n                        # If the end time of the current interval is less than the start time of the next interval\n                        else:\n                            \n                            # If the end time of the current interval is greater than the start time of the next interval\n                            if end > start:\n                                \n                                # Increment the result\n                                result += 1\n                                \n                                # Break out of the inner loop\n                                break\n                            \n                            # If the end time of the current interval is less than the start time of the next interval\n                            else:\n                                \n                                # If the end time of the current interval is greater than the start time of the next interval\n                                if end > start:\n                                    \n                                    # Increment the result\n                                    result += 1\n                                    \n                                    # Break out of the inner loop\n                                    break\n                                \n                                # If the end time of the current interval is less than the start time of the next interval\n                                else:\n                                    \n                                    # If the end time of the current interval is greater than the start time of the next interval\n                                    if end > start:\n                                        \n                                        # Increment the result\n                                        result += 1\n                                        \n                                        # Break out of the inner loop\n                                        break\n                                    \n                                    # If the end time of the current interval is less than the start time of the next interval\n                                    else:\n                                        \n                                        # If the end time of the current interval is greater than the start time of the next interval\n                                        if end > start:\n                                            \n                                            # Increment the result\n                                            result += 1\n                                            \n                                            # Break out of the inner loop\n                                            break\n                                        \n                                        # If the end time of the current interval is less than the start time of the next interval\n                                        else:\n                                            \n                                            # If the end time of the current interval is greater than the start time of the next interval\n                                            if end > start:\n                                                \n                                                # Increment the result\n                                                result += 1\n                                                \n                                                # Break out of the inner loop\n                                                break\n                                            \n                                            # If the end time of the current interval is less than the start time of the next interval\n                                            else:\n                                                \n                                                # If the end time of the current interval is greater than the start time of the next interval\n                                                if end > start:"}, {"task_id": "set-intersection-size-at-least-two", "completion": "class Solution(object):\n    def intersectionSizeTwo(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # Sort the intervals by start time\n        intervals.sort(key=lambda x: x[0])\n        \n        # Initialize the result\n        result = 0\n        \n        # Initialize the start and end of the current interval\n        start = intervals[0][0]\n        end = intervals[0][1]\n        \n        # Iterate over the intervals\n        for i in range(1, len(intervals)):\n            \n            # If the start of the current interval is less than the end of the previous interval\n            if intervals[i][0] < end:\n                \n                # Update the end of the current interval\n                end = max(end, intervals[i][1])\n                \n            # If the start of the current interval is greater than the end of the previous interval\n            else:\n                \n                # Update the result\n                result += end - start + 1\n                \n                # Update the start and end of the current interval\n                start = intervals[i][0]\n                end = intervals[i][1]\n                \n        # Update the result\n        result += end - start + 1\n        \n        # Return the result\n        return result"}, {"task_id": "set-intersection-size-at-least-two", "completion": "class Solution(object):\n    def intersectionSizeTwo(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # Sort the intervals by the start time\n        intervals.sort(key=lambda x: x[0])\n        \n        # Initialize the result\n        result = 0\n        \n        # Iterate over the intervals\n        for i in range(len(intervals)):\n            \n            # Get the current interval\n            interval = intervals[i]\n            \n            # Get the end time of the current interval\n            end = interval[1]\n            \n            # Iterate over the remaining intervals\n            for j in range(i+1, len(intervals)):\n                \n                # Get the next interval\n                next_interval = intervals[j]\n                \n                # Get the start time of the next interval\n                start = next_interval[0]\n                \n                # If the end time of the current interval is less than the start time of the next interval\n                if end < start:\n                    \n                    # Increment the result\n                    result += 1\n                    \n                    # Break out of the inner loop\n                    break\n                \n                # If the end time of the current interval is greater than or equal to the start time of the next interval\n                else:\n                    \n                    # Get the end time of the next interval\n                    next_end = next_interval[1]\n                    \n                    # If the end time of the current interval is less than the end time of the next interval\n                    if end < next_end:\n                        \n                        # Increment the result\n                        result += 1\n                        \n                        # Break out of the inner loop\n                        break\n                    \n                    # If the end time of the current interval is greater than or equal to the end time of the next interval\n                    else:\n                        \n                        # Get the start time of the next interval\n                        next_start = next_interval[0]\n                        \n                        # If the start time of the next interval is less than the end time of the current interval\n                        if start < end:\n                            \n                            # Increment the result\n                            result += 1\n                            \n                            # Break out of the inner loop\n                            break\n                        \n                        # If the start time of the next interval is greater than or equal to the end time of the current interval\n                        else:\n                            \n                            # Increment the result\n                            result += 1\n                            \n                            # Break out of the inner loop\n                            break\n                        \n                        # Break out of the inner loop\n                        break\n                    \n                    # Break out of the inner loop\n                    break\n                \n                # Break out of the inner loop\n                break\n            \n            # Break out of the outer loop\n            break\n        \n        # Return the result\n        return result"}], "symmetric-tree": [{"task_id": "symmetric-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def isMirror(left, right):\n            if not left and not right:\n                return True\n            if not left or not right:\n                return False\n            return left.val == right.val and isMirror(left.left, right.right) and isMirror(left.right, right.left)\n        \n        if not root:\n            return True\n        return isMirror(root.left, root.right)"}, {"task_id": "symmetric-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def isMirror(left, right):\n            if not left and not right:\n                return True\n            if not left or not right:\n                return False\n            return left.val == right.val and isMirror(left.left, right.right) and isMirror(left.right, right.left)\n        \n        if not root:\n            return True\n        return isMirror(root.left, root.right)"}, {"task_id": "symmetric-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def isMirror(left, right):\n            if left is None and right is None:\n                return True\n            if left is None or right is None:\n                return False\n            return left.val == right.val and isMirror(left.left, right.right) and isMirror(left.right, right.left)\n        \n        if root is None:\n            return True\n        return isMirror(root.left, root.right)"}, {"task_id": "symmetric-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def isMirror(left, right):\n            if not left and not right:\n                return True\n            if not left or not right:\n                return False\n            return left.val == right.val and isMirror(left.left, right.right) and isMirror(left.right, right.left)\n        \n        if not root:\n            return True\n        return isMirror(root.left, root.right)"}, {"task_id": "symmetric-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def isMirror(left, right):\n            if left is None and right is None:\n                return True\n            if left is None or right is None:\n                return False\n            return left.val == right.val and isMirror(left.left, right.right) and isMirror(left.right, right.left)\n        \n        if root is None:\n            return True\n        return isMirror(root.left, root.right)"}], "number-of-atoms": [{"task_id": "number-of-atoms", "completion": "class Solution(object):\n    def countOfAtoms(self, formula):\n        \"\"\"\n        :type formula: str\n        :rtype: str\n        \"\"\"\n        \n        stack = []\n        res = {}\n        for i in range(len(formula)):\n            if formula[i].isalpha():\n                if i == 0 or formula[i-1].isalpha():\n                    stack.append(formula[i])\n                else:\n                    res[stack[-1]] = res.get(stack[-1], 0) + 1\n                    stack.append(formula[i])\n            elif formula[i] == '(':\n                stack.append(formula[i])\n            elif formula[i] == ')':\n                while stack[-1] != '(':\n                    res[stack[-1]] = res.get(stack[-1], 0) + 1\n                    stack.pop()\n                stack.pop()\n            elif formula[i].isdigit():\n                if stack[-1].isalpha():\n                    res[stack[-1]] = res.get(stack[-1], 0) + int(formula[i])\n                else:\n                    stack.append(formula[i])\n        while stack:\n            res[stack[-1]] = res.get(stack[-1], 0) + 1\n            stack.pop()\n        return ''.join(sorted([str(res[i]) + i for i in res]))"}, {"task_id": "number-of-atoms", "completion": "class Solution(object):\n    def countOfAtoms(self, formula):\n        \"\"\"\n        :type formula: str\n        :rtype: str\n        \"\"\"\n        \n        stack = []\n        res = {}\n        for i in range(len(formula)):\n            if formula[i].isalpha():\n                if i == 0 or formula[i-1] != '(':\n                    stack.append(formula[i])\n                else:\n                    stack.append(stack.pop() + formula[i])\n            elif formula[i].isdigit():\n                if stack[-1].isalpha():\n                    stack[-1] += formula[i]\n                else:\n                    stack.append(formula[i])\n            elif formula[i] == ')':\n                stack.pop()\n        for i in range(len(stack)):\n            if stack[i].isalpha():\n                if stack[i] in res:\n                    res[stack[i]] += 1\n                else:\n                    res[stack[i]] = 1\n            else:\n                res[stack[i][0]] += int(stack[i][1:])\n        res = sorted(res.items(), key=lambda x: x[0])\n        res = [str(i[1]) + i[0] for i in res]\n        return ''.join(res)"}, {"task_id": "number-of-atoms", "completion": "class Solution(object):\n    def countOfAtoms(self, formula):\n        \"\"\"\n        :type formula: str\n        :rtype: str\n        \"\"\"\n        \n        stack = []\n        res = {}\n        for i in range(len(formula)):\n            if formula[i].isalpha():\n                if i == 0 or formula[i-1].isalpha():\n                    stack.append(formula[i])\n                else:\n                    res[stack[-1]] = res.get(stack[-1], 0) + int(formula[i])\n            elif formula[i] == '(':\n                stack.append(formula[i])\n            elif formula[i] == ')':\n                stack.pop()\n            elif formula[i].isdigit():\n                if stack[-1] == '(':\n                    res[stack[-1]] = res.get(stack[-1], 0) + int(formula[i])\n                else:\n                    res[stack[-1]] = res.get(stack[-1], 0) + int(formula[i]) * res[stack.pop()]\n        return ''.join(sorted([str(res[i]) + i for i in res]))"}, {"task_id": "number-of-atoms", "completion": "class Solution(object):\n    def countOfAtoms(self, formula):\n        \"\"\"\n        :type formula: str\n        :rtype: str\n        \"\"\"\n        \n        stack = []\n        res = {}\n        for i in range(len(formula)):\n            if formula[i].isalpha():\n                if i == 0 or formula[i-1] != '(':\n                    stack.append(formula[i])\n                else:\n                    stack.append(stack.pop() + formula[i])\n            elif formula[i].isdigit():\n                if stack[-1].isalpha():\n                    stack[-1] += formula[i]\n                else:\n                    stack.append(formula[i])\n            elif formula[i] == ')':\n                stack.pop()\n        for i in stack:\n            if i.isalpha():\n                res[i] = res.get(i, 0) + 1\n            else:\n                res[i[0]] = res.get(i[0], 0) + int(i[1:])\n        res = sorted(res.items(), key=lambda x: x[0])\n        res = [str(i[1]) + i[0] for i in res]\n        return ''.join(res)"}, {"task_id": "number-of-atoms", "completion": "class Solution(object):\n    def countOfAtoms(self, formula):\n        \"\"\"\n        :type formula: str\n        :rtype: str\n        \"\"\"\n        \n        stack = []\n        res = {}\n        for i in range(len(formula)):\n            if formula[i].isalpha():\n                if formula[i].isupper():\n                    stack.append(formula[i])\n                else:\n                    if stack:\n                        res[stack[-1]] = res.get(stack[-1], 0) + int(formula[i])\n                    else:\n                        res[formula[i]] = int(formula[i])\n            elif formula[i] == '(':\n                stack.append(formula[i])\n            elif formula[i] == ')':\n                if stack:\n                    stack.pop()\n            elif formula[i].isdigit():\n                if stack:\n                    res[stack[-1]] = res.get(stack[-1], 0) + int(formula[i])\n                else:\n                    res[formula[i]] = int(formula[i])\n        res = sorted(res.items(), key=lambda x: x[0])\n        res = [str(i[1]) + i[0] for i in res]\n        return ''.join(res)"}], "binary-tree-preorder-traversal": [{"task_id": "binary-tree-preorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def preorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        stack = [root]\n        res = []\n        \n        while stack:\n            node = stack.pop()\n            res.append(node.val)\n            if node.right:\n                stack.append(node.right)\n            if node.left:\n                stack.append(node.left)\n        \n        return res"}, {"task_id": "binary-tree-preorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def preorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        stack = [root]\n        res = []\n        \n        while stack:\n            node = stack.pop()\n            res.append(node.val)\n            if node.right:\n                stack.append(node.right)\n            if node.left:\n                stack.append(node.left)\n        \n        return res"}, {"task_id": "binary-tree-preorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def preorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        stack = [root]\n        res = []\n        \n        while stack:\n            node = stack.pop()\n            res.append(node.val)\n            if node.right:\n                stack.append(node.right)\n            if node.left:\n                stack.append(node.left)\n        \n        return res"}, {"task_id": "binary-tree-preorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def preorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        stack = [root]\n        res = []\n        \n        while stack:\n            node = stack.pop()\n            res.append(node.val)\n            if node.right:\n                stack.append(node.right)\n            if node.left:\n                stack.append(node.left)\n        \n        return res"}, {"task_id": "binary-tree-preorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def preorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        stack = [root]\n        res = []\n        \n        while stack:\n            node = stack.pop()\n            res.append(node.val)\n            if node.right:\n                stack.append(node.right)\n            if node.left:\n                stack.append(node.left)\n        \n        return res"}], "power-of-four": [{"task_id": "power-of-four", "completion": "class Solution(object):\n    def isPowerOfFour(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        while n % 4 == 0:\n            n = n / 4\n        return n == 1"}, {"task_id": "power-of-four", "completion": "class Solution(object):\n    def isPowerOfFour(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        while n % 4 == 0:\n            n = n / 4\n        return n == 1"}, {"task_id": "power-of-four", "completion": "class Solution(object):\n    def isPowerOfFour(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        while n % 4 == 0:\n            n = n / 4\n        return n == 1"}, {"task_id": "power-of-four", "completion": "class Solution(object):\n    def isPowerOfFour(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        while n % 4 == 0:\n            n = n / 4\n        return n == 1"}, {"task_id": "power-of-four", "completion": "class Solution(object):\n    def isPowerOfFour(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 4 == 0:\n            n = n / 4\n        \n        return n == 1"}], "invert-binary-tree": [{"task_id": "invert-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def invertTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not root:\n            return None\n        \n        left = self.invertTree(root.left)\n        right = self.invertTree(root.right)\n        \n        root.left = right\n        root.right = left\n        \n        return root"}, {"task_id": "invert-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def invertTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not root:\n            return None\n        \n        left = self.invertTree(root.left)\n        right = self.invertTree(root.right)\n        \n        root.left = right\n        root.right = left\n        \n        return root"}, {"task_id": "invert-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def invertTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not root:\n            return None\n        \n        left = self.invertTree(root.left)\n        right = self.invertTree(root.right)\n        \n        root.left = right\n        root.right = left\n        \n        return root"}, {"task_id": "invert-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def invertTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        \n        if root is None:\n            return None\n        \n        root.left, root.right = root.right, root.left\n        self.invertTree(root.left)\n        self.invertTree(root.right)\n        \n        return root"}, {"task_id": "invert-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def invertTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        \n        if root is None:\n            return None\n        \n        left = self.invertTree(root.left)\n        right = self.invertTree(root.right)\n        \n        root.left = right\n        root.right = left\n        \n        return root"}], "generate-parentheses": [{"task_id": "generate-parentheses", "completion": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def backtrack(left, right, s):\n            if left == n and right == n:\n                res.append(s)\n                return\n            if left < n:\n                backtrack(left + 1, right, s + '(')\n            if left > right:\n                backtrack(left, right + 1, s + ')')\n        \n        res = []\n        backtrack(0, 0, '')\n        return res"}, {"task_id": "generate-parentheses", "completion": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def generate(left, right, s):\n            if left == 0 and right == 0:\n                res.append(s)\n                return\n            if left > 0:\n                generate(left - 1, right, s + '(')\n            if right > left:\n                generate(left, right - 1, s + ')')\n        \n        res = []\n        generate(n, n, '')\n        return res"}, {"task_id": "generate-parentheses", "completion": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def backtrack(n, left, right, s):\n            if left == n and right == n:\n                res.append(s)\n                return\n            if left < n:\n                backtrack(n, left + 1, right, s + '(')\n            if left > right:\n                backtrack(n, left, right + 1, s + ')')\n        \n        res = []\n        backtrack(n, 0, 0, '')\n        return res"}, {"task_id": "generate-parentheses", "completion": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def generate(left, right, s):\n            if left == 0 and right == 0:\n                res.append(s)\n                return\n            if left > 0:\n                generate(left - 1, right, s + '(')\n            if right > left:\n                generate(left, right - 1, s + ')')\n        \n        res = []\n        generate(n, n, '')\n        return res"}, {"task_id": "generate-parentheses", "completion": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def generate(left, right, s):\n            if left == 0 and right == 0:\n                res.append(s)\n                return\n            if left > 0:\n                generate(left - 1, right, s + '(')\n            if right > left:\n                generate(left, right - 1, s + ')')\n        \n        res = []\n        generate(n, n, '')\n        return res"}], "patching-array": [{"task_id": "patching-array", "completion": "class Solution(object):\n    def minPatches(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5c0f\u7684nums[i]\n        # 2. \u627e\u5230\u6700\u5c0f\u7684nums[i]\u7684\u4e0b\u6807\n        # 3. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 4. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 5. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 6. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 7. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 8. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 9. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 10. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 11. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 12. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 13. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 14. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 15. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 16. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 17. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 18. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 19. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 20. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 21. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 22. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 23. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 24. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 25. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 26. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 27. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 28. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 29. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 30. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 31. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 32. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 33. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 34. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 35. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 36. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 37. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 38. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 39. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 40. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 41. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 42. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 43. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 44. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 45. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 46. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 47. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 48. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 49. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 50. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 51. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 52. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 53. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 54. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 55. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 56. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 57. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 58. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 59. \u8ba1\u7b97num"}, {"task_id": "patching-array", "completion": "class Solution(object):\n    def minPatches(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5c0f\u7684nums[i]\n        # 2. \u627e\u5230\u6700\u5c0f\u7684nums[i]\u7684\u4e0b\u6807\n        # 3. \u8ba1\u7b97nums[i]\u5230n\u7684\u5dee\u503c\n        # 4. \u8ba1\u7b97nums[i]\u5230n\u7684\u5dee\u503c\u7684\u4e2a\u6570\n        # 5. \u8ba1\u7b97nums[i]\u5230n\u7684\u5dee\u503c\u7684\u4e2a\u6570\u7684\u6700\u5c0f\u503c\n        # 6. \u8fd4\u56denums[i]\u5230n\u7684\u5dee\u503c\u7684\u4e2a\u6570\u7684\u6700\u5c0f\u503c\n        \n        i = 0\n        while i < len(nums) and nums[i] <= n:\n            n -= nums[i]\n            i += 1\n        return i + (n - 1) // (nums[-1] - nums[0])"}, {"task_id": "patching-array", "completion": "class Solution(object):\n    def minPatches(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5c0f\u7684nums[i]\n        # 2. \u627e\u5230\u6700\u5c0f\u7684nums[i]\u7684\u4e0b\u6807\n        # 3. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 4. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 5. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 6. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 7. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 8. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 9. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 10. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 11. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 12. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 13. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 14. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 15. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 16. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 17. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 18. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 19. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 20. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 21. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 22. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 23. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 24. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 25. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 26. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 27. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 28. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 29. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 30. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 31. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 32. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 33. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 34. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 35. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 36. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 37. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 38. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 39. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 40. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 41. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 42. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 43. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 44. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 45. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 46. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 47. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 48. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 49. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 50. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 51. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 52. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 53. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 54. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 55. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 56. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 57. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 58. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 59. \u8ba1\u7b97num"}, {"task_id": "patching-array", "completion": "class Solution(object):\n    def minPatches(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5c0f\u7684nums[i]\n        # 2. \u627e\u5230\u6700\u5c0f\u7684nums[i]\u7684\u4e0b\u6807\n        # 3. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 4. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 5. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 6. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 7. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 8. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 9. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 10. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 11. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 12. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 13. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 14. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 15. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 16. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 17. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 18. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 19. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 20. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 21. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 22. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 23. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 24. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 25. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 26. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 27. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 28. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 29. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 30. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 31. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 32. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 33. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 34. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 35. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 36. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 37. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 38. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 39. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 40. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 41. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 42. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 43. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 44. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 45. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 46. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 47. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 48. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 49. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 50. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 51. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 52. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 53. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 54. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 55. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 56. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 57. \u8ba1\u7b97nums[i]\u7684\u503c\n        # 58. \u8ba1\u7b97nums[i]\u7684\u4e0b\u6807\n        # 59. \u8ba1\u7b97num"}, {"task_id": "patching-array", "completion": "class Solution(object):\n    def minPatches(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u5148\u628anums\u4e2d\u7684\u6570\u5b57\u52a0\u8d77\u6765\n        # 2. \u5982\u679c\u52a0\u8d77\u6765\u7684\u6570\u5b57\u5c0f\u4e8en\uff0c\u5219\u9700\u8981\u8865\u8db3n-sum\n        # 3. \u5982\u679c\u52a0\u8d77\u6765\u7684\u6570\u5b57\u5927\u4e8e\u7b49\u4e8en\uff0c\u5219\u4e0d\u9700\u8981\u8865\u8db3\n        # 4. \u5982\u679c\u52a0\u8d77\u6765\u7684\u6570\u5b57\u5927\u4e8en\uff0c\u5219\u9700\u8981\u8865\u8db3n-sum+1\n        # 5. \u5982\u679c\u52a0\u8d77\u6765\u7684\u6570\u5b57\u5927\u4e8e\u7b49\u4e8en\uff0c\u5219\u4e0d\u9700\u8981\u8865\u8db3\n        # 6. \u5982\u679c\u52a0\u8d77\u6765\u7684\u6570\u5b57\u5927\u4e8en\uff0c\u5219\u9700\u8981\u8865\u8db3n-sum+2\n        # 7. \u5982\u679c\u52a0\u8d77\u6765\u7684\u6570\u5b57\u5927\u4e8e\u7b49\u4e8en\uff0c\u5219\u4e0d\u9700\u8981\u8865\u8db3\n        # 8. \u5982\u679c\u52a0\u8d77\u6765\u7684\u6570\u5b57\u5927\u4e8en\uff0c\u5219\u9700\u8981\u8865\u8db3n-sum+3\n        # 9. \u5982\u679c\u52a0\u8d77\u6765\u7684\u6570\u5b57\u5927\u4e8e\u7b49\u4e8en\uff0c\u5219\u4e0d\u9700\u8981\u8865\u8db3\n        # 10. \u5982\u679c\u52a0\u8d77\u6765\u7684\u6570\u5b57\u5927\u4e8en\uff0c\u5219\u9700\u8981\u8865\u8db3n-sum+4\n        # 11. \u5982\u679c\u52a0\u8d77\u6765\u7684\u6570\u5b57\u5927\u4e8e\u7b49\u4e8en\uff0c\u5219\u4e0d\u9700\u8981\u8865\u8db3\n        # 12. \u5982\u679c\u52a0\u8d77\u6765\u7684\u6570\u5b57\u5927\u4e8en\uff0c\u5219\u9700\u8981\u8865\u8db3n-sum+5\n        # 13. \u5982\u679c\u52a0\u8d77\u6765\u7684\u6570\u5b57\u5927\u4e8e\u7b49\u4e8en\uff0c\u5219\u4e0d\u9700\u8981\u8865\u8db3\n        # 14. \u5982\u679c\u52a0\u8d77\u6765\u7684\u6570\u5b57\u5927\u4e8en\uff0c\u5219\u9700\u8981\u8865\u8db3n-sum+6\n        # 15. \u5982\u679c\u52a0\u8d77\u6765\u7684\u6570\u5b57\u5927\u4e8e\u7b49\u4e8en\uff0c\u5219\u4e0d\u9700\u8981\u8865\u8db3\n        # 16. \u5982\u679c\u52a0\u8d77\u6765\u7684\u6570\u5b57\u5927\u4e8en\uff0c\u5219\u9700\u8981\u8865\u8db3n-sum+7\n        # 17. \u5982\u679c\u52a0\u8d77\u6765\u7684\u6570\u5b57\u5927\u4e8e\u7b49\u4e8en\uff0c\u5219\u4e0d\u9700\u8981\u8865\u8db3\n        # 18. \u5982\u679c\u52a0\u8d77\u6765\u7684\u6570\u5b57\u5927\u4e8en\uff0c\u5219\u9700\u8981\u8865\u8db3n-sum+8\n        # 19. \u5982\u679c\u52a0\u8d77\u6765\u7684\u6570\u5b57\u5927\u4e8e\u7b49\u4e8en\uff0c\u5219\u4e0d\u9700\u8981\u8865\u8db3\n        # 20. \u5982\u679c\u52a0\u8d77\u6765\u7684\u6570\u5b57\u5927\u4e8en\uff0c\u5219\u9700\u8981\u8865\u8db3n-sum+9\n        # 21. \u5982\u679c\u52a0\u8d77\u6765\u7684\u6570\u5b57\u5927\u4e8e\u7b49\u4e8en\uff0c\u5219\u4e0d\u9700\u8981\u8865\u8db3\n        # 22. \u5982\u679c\u52a0\u8d77\u6765\u7684\u6570\u5b57\u5927\u4e8en\uff0c\u5219\u9700\u8981\u8865\u8db3n-sum+10\n        # 23. \u5982\u679c\u52a0\u8d77\u6765\u7684\u6570\u5b57\u5927\u4e8e\u7b49\u4e8en\uff0c\u5219\u4e0d\u9700\u8981\u8865\u8db3\n        # 24. \u5982\u679c\u52a0\u8d77\u6765\u7684\u6570\u5b57\u5927\u4e8en\uff0c\u5219\u9700\u8981\u8865\u8db3n-sum+11\n        # 25. \u5982\u679c\u52a0\u8d77\u6765\u7684\u6570\u5b57\u5927\u4e8e\u7b49\u4e8en\uff0c\u5219\u4e0d\u9700\u8981\u8865\u8db3\n        # 26. \u5982\u679c\u52a0\u8d77\u6765\u7684\u6570\u5b57\u5927\u4e8en\uff0c\u5219\u9700\u8981\u8865\u8db3n-sum+12\n        # 27. \u5982\u679c\u52a0\u8d77\u6765\u7684\u6570\u5b57\u5927\u4e8e\u7b49\u4e8en\uff0c\u5219\u4e0d\u9700\u8981\u8865\u8db3\n        # 28. \u5982\u679c\u52a0\u8d77\u6765\u7684\u6570\u5b57\u5927\u4e8en\uff0c\u5219\u9700\u8981\u8865\u8db3n-sum+13\n        # 29. \u5982\u679c\u52a0\u8d77\u6765\u7684\u6570\u5b57\u5927\u4e8e\u7b49\u4e8en\uff0c\u5219\u4e0d\u9700\u8981\u8865\u8db3\n        # 30. \u5982\u679c\u52a0\u8d77\u6765\u7684\u6570\u5b57\u5927\u4e8en\uff0c\u5219\u9700\u8981\u8865\u8db3n-sum+14\n        # 31. \u5982\u679c\u52a0\u8d77\u6765\u7684\u6570\u5b57\u5927\u4e8e\u7b49\u4e8en\uff0c\u5219\u4e0d\u9700\u8981\u8865\u8db3\n        # 32. \u5982\u679c\u52a0\u8d77\u6765\u7684\u6570\u5b57\u5927\u4e8en\uff0c\u5219\u9700\u8981\u8865\u8db3n-sum+15\n        # 33. \u5982\u679c\u52a0\u8d77\u6765\u7684\u6570\u5b57\u5927\u4e8e\u7b49\u4e8en\uff0c\u5219\u4e0d\u9700\u8981\u8865\u8db3\n        # 34. \u5982\u679c\u52a0\u8d77\u6765\u7684\u6570\u5b57\u5927"}], "longest-valid-parentheses": [{"task_id": "longest-valid-parentheses", "completion": "class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6808\n        # 2. \u6808\u7684\u957f\u5ea6\n        # 3. \u6700\u5927\u957f\u5ea6\n        # 4. \u904d\u5386\u5b57\u7b26\u4e32\n        # 5. \u5982\u679c\u662f\u5de6\u62ec\u53f7\uff0c\u5219\u5165\u6808\n        # 6. \u5982\u679c\u662f\u53f3\u62ec\u53f7\uff0c\u5219\u5224\u65ad\u6808\u9876\u662f\u5426\u4e3a\u5de6\u62ec\u53f7\uff0c\u5982\u679c\u662f\uff0c\u5219\u51fa\u6808\uff0c\u5e76\u4e14\u8ba1\u7b97\u957f\u5ea6\n        # 7. \u5982\u679c\u6808\u4e3a\u7a7a\uff0c\u5219\u957f\u5ea6\u4e3a0\n        # 8. \u5982\u679c\u6808\u4e0d\u4e3a\u7a7a\uff0c\u5219\u957f\u5ea6\u4e3a\u6808\u9876\u7684\u957f\u5ea6\n        # 9. \u5982\u679c\u6808\u9876\u7684\u957f\u5ea6\u5927\u4e8e\u6700\u5927\u957f\u5ea6\uff0c\u5219\u66f4\u65b0\u6700\u5927\u957f\u5ea6\n        # 10. \u5982\u679c\u662f\u5de6\u62ec\u53f7\uff0c\u5219\u5165\u6808\n        # 11. \u5982\u679c\u662f\u53f3\u62ec\u53f7\uff0c\u5219\u5224\u65ad\u6808\u9876\u662f\u5426\u4e3a\u5de6\u62ec\u53f7\uff0c\u5982\u679c\u662f\uff0c\u5219\u51fa\u6808\uff0c\u5e76\u4e14\u8ba1\u7b97\u957f\u5ea6\n        # 12. \u5982\u679c\u6808\u4e3a\u7a7a\uff0c\u5219\u957f\u5ea6\u4e3a0\n        # 13. \u5982\u679c\u6808\u4e0d\u4e3a\u7a7a\uff0c\u5219\u957f\u5ea6\u4e3a\u6808\u9876\u7684\u957f\u5ea6\n        # 14. \u5982\u679c\u6808\u9876\u7684\u957f\u5ea6\u5927\u4e8e\u6700\u5927\u957f\u5ea6\uff0c\u5219\u66f4\u65b0\u6700\u5927\u957f\u5ea6\n        # 15. \u5982\u679c\u662f\u5de6\u62ec\u53f7\uff0c\u5219\u5165\u6808\n        # 16. \u5982\u679c\u662f\u53f3\u62ec\u53f7\uff0c\u5219\u5224\u65ad\u6808\u9876\u662f\u5426\u4e3a\u5de6\u62ec\u53f7\uff0c\u5982\u679c\u662f\uff0c\u5219\u51fa\u6808\uff0c\u5e76\u4e14\u8ba1\u7b97\u957f\u5ea6\n        # 17. \u5982\u679c\u6808\u4e3a\u7a7a\uff0c\u5219\u957f\u5ea6\u4e3a0\n        # 18. \u5982\u679c\u6808\u4e0d\u4e3a\u7a7a\uff0c\u5219\u957f\u5ea6\u4e3a\u6808\u9876\u7684\u957f\u5ea6\n        # 19. \u5982\u679c\u6808\u9876\u7684\u957f\u5ea6\u5927\u4e8e\u6700\u5927\u957f\u5ea6\uff0c\u5219\u66f4\u65b0\u6700\u5927\u957f\u5ea6\n        # 20. \u5982\u679c\u662f\u5de6\u62ec\u53f7\uff0c\u5219\u5165\u6808\n        # 21. \u5982\u679c\u662f\u53f3\u62ec\u53f7\uff0c\u5219\u5224\u65ad\u6808\u9876\u662f\u5426\u4e3a\u5de6\u62ec\u53f7\uff0c\u5982\u679c\u662f\uff0c\u5219\u51fa\u6808\uff0c\u5e76\u4e14\u8ba1\u7b97\u957f\u5ea6\n        # 22. \u5982\u679c\u6808\u4e3a\u7a7a\uff0c\u5219\u957f\u5ea6\u4e3a0\n        # 23. \u5982\u679c\u6808\u4e0d\u4e3a\u7a7a\uff0c\u5219\u957f\u5ea6\u4e3a\u6808\u9876\u7684\u957f\u5ea6\n        # 24. \u5982\u679c\u6808\u9876\u7684\u957f\u5ea6\u5927\u4e8e\u6700\u5927\u957f\u5ea6\uff0c\u5219\u66f4\u65b0\u6700\u5927\u957f\u5ea6\n        # 25. \u5982\u679c\u662f\u5de6\u62ec\u53f7\uff0c\u5219\u5165\u6808\n        # 26. \u5982\u679c\u662f\u53f3\u62ec\u53f7\uff0c\u5219\u5224\u65ad\u6808\u9876\u662f\u5426\u4e3a\u5de6\u62ec\u53f7\uff0c\u5982\u679c\u662f\uff0c\u5219\u51fa\u6808\uff0c\u5e76\u4e14\u8ba1\u7b97\u957f\u5ea6\n        # 27. \u5982\u679c\u6808\u4e3a\u7a7a\uff0c\u5219\u957f\u5ea6\u4e3a0\n        # 28. \u5982\u679c\u6808\u4e0d\u4e3a\u7a7a\uff0c\u5219\u957f\u5ea6\u4e3a\u6808\u9876\u7684\u957f\u5ea6\n        # 29. \u5982\u679c\u6808\u9876\u7684\u957f\u5ea6\u5927\u4e8e\u6700\u5927\u957f\u5ea6\uff0c\u5219\u66f4\u65b0\u6700\u5927\u957f\u5ea6\n        # 30. \u5982\u679c\u662f\u5de6\u62ec\u53f7\uff0c\u5219\u5165\u6808\n        # 31. \u5982\u679c\u662f\u53f3\u62ec\u53f7\uff0c\u5219\u5224\u65ad\u6808\u9876\u662f\u5426\u4e3a\u5de6\u62ec\u53f7\uff0c\u5982\u679c\u662f\uff0c\u5219\u51fa\u6808\uff0c\u5e76\u4e14\u8ba1\u7b97\u957f\u5ea6\n        # 32. \u5982\u679c\u6808\u4e3a\u7a7a\uff0c\u5219\u957f\u5ea6\u4e3a0\n        # 33. \u5982\u679c\u6808\u4e0d\u4e3a\u7a7a\uff0c\u5219\u957f\u5ea6\u4e3a\u6808\u9876\u7684\u957f\u5ea6\n        # 34. \u5982\u679c\u6808\u9876\u7684\u957f\u5ea6\u5927\u4e8e\u6700\u5927\u957f\u5ea6\uff0c\u5219\u66f4\u65b0\u6700\u5927\u957f\u5ea6\n        # 35. \u5982\u679c\u662f\u5de6\u62ec\u53f7\uff0c\u5219\u5165\u6808\n        #"}, {"task_id": "longest-valid-parentheses", "completion": "class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6808\n        # 2. \u6808\u7684\u957f\u5ea6\n        # 3. \u6700\u5927\u957f\u5ea6\n        # 4. \u904d\u5386\u5b57\u7b26\u4e32\n        # 5. \u5982\u679c\u662f\u5de6\u62ec\u53f7\uff0c\u5219\u5165\u6808\n        # 6. \u5982\u679c\u662f\u53f3\u62ec\u53f7\uff0c\u5219\u5224\u65ad\u6808\u9876\u662f\u5426\u4e3a\u5de6\u62ec\u53f7\uff0c\u5982\u679c\u662f\uff0c\u5219\u51fa\u6808\uff0c\u5e76\u4e14\u8ba1\u7b97\u957f\u5ea6\n        # 7. \u5982\u679c\u6808\u4e3a\u7a7a\uff0c\u5219\u957f\u5ea6\u4e3a0\n        # 8. \u5982\u679c\u6808\u4e0d\u4e3a\u7a7a\uff0c\u5219\u957f\u5ea6\u4e3a\u6808\u9876\u7684\u957f\u5ea6\n        # 9. \u66f4\u65b0\u6700\u5927\u957f\u5ea6\n        # 10. \u8fd4\u56de\u6700\u5927\u957f\u5ea6\n        # 11. \u5982\u679c\u662f\u5de6\u62ec\u53f7\uff0c\u5219\u5165\u6808\n        # 12. \u5982\u679c\u662f\u53f3\u62ec\u53f7\uff0c\u5219\u5224\u65ad\u6808\u9876\u662f\u5426\u4e3a\u5de6\u62ec\u53f7\uff0c\u5982\u679c\u662f\uff0c\u5219\u51fa\u6808\uff0c\u5e76\u4e14\u8ba1\u7b97\u957f\u5ea6\n        # 13. \u5982\u679c\u6808\u4e3a\u7a7a\uff0c\u5219\u957f\u5ea6\u4e3a0\n        # 14. \u5982\u679c\u6808\u4e0d\u4e3a\u7a7a\uff0c\u5219\u957f\u5ea6\u4e3a\u6808\u9876\u7684\u957f\u5ea6\n        # 15. \u66f4\u65b0\u6700\u5927\u957f\u5ea6\n        # 16. \u8fd4\u56de\u6700\u5927\u957f\u5ea6\n        # 17. \u5982\u679c\u662f\u5de6\u62ec\u53f7\uff0c\u5219\u5165\u6808\n        # 18. \u5982\u679c\u662f\u53f3\u62ec\u53f7\uff0c\u5219\u5224\u65ad\u6808\u9876\u662f\u5426\u4e3a\u5de6\u62ec\u53f7\uff0c\u5982\u679c\u662f\uff0c\u5219\u51fa\u6808\uff0c\u5e76\u4e14\u8ba1\u7b97\u957f\u5ea6\n        # 19. \u5982\u679c\u6808\u4e3a\u7a7a\uff0c\u5219\u957f\u5ea6\u4e3a0\n        # 20. \u5982\u679c\u6808\u4e0d\u4e3a\u7a7a\uff0c\u5219\u957f\u5ea6\u4e3a\u6808\u9876\u7684\u957f\u5ea6\n        # 21. \u66f4\u65b0\u6700\u5927\u957f\u5ea6\n        # 22. \u8fd4\u56de\u6700\u5927\u957f\u5ea6\n        # 23. \u5982\u679c\u662f\u5de6\u62ec\u53f7\uff0c\u5219\u5165\u6808\n        # 24. \u5982\u679c\u662f\u53f3\u62ec\u53f7\uff0c\u5219\u5224\u65ad\u6808\u9876\u662f\u5426\u4e3a\u5de6\u62ec\u53f7\uff0c\u5982\u679c\u662f\uff0c\u5219\u51fa\u6808\uff0c\u5e76\u4e14\u8ba1\u7b97\u957f\u5ea6\n        # 25. \u5982\u679c\u6808\u4e3a\u7a7a\uff0c\u5219\u957f\u5ea6\u4e3a0\n        # 26. \u5982\u679c\u6808\u4e0d\u4e3a\u7a7a\uff0c\u5219\u957f\u5ea6\u4e3a\u6808\u9876\u7684\u957f\u5ea6\n        # 27. \u66f4\u65b0\u6700\u5927\u957f\u5ea6\n        # 28. \u8fd4\u56de\u6700\u5927\u957f\u5ea6\n        # 29. \u5982\u679c\u662f\u5de6\u62ec\u53f7\uff0c\u5219\u5165\u6808\n        # 30. \u5982\u679c\u662f\u53f3\u62ec\u53f7\uff0c\u5219\u5224\u65ad\u6808\u9876\u662f\u5426\u4e3a\u5de6\u62ec\u53f7\uff0c\u5982\u679c\u662f\uff0c\u5219\u51fa\u6808\uff0c\u5e76\u4e14\u8ba1\u7b97\u957f\u5ea6\n        # 31. \u5982\u679c\u6808\u4e3a\u7a7a\uff0c\u5219\u957f\u5ea6\u4e3a0\n        # 32. \u5982\u679c\u6808\u4e0d\u4e3a\u7a7a\uff0c\u5219\u957f\u5ea6\u4e3a\u6808\u9876\u7684\u957f\u5ea6\n        # 33. \u66f4\u65b0\u6700\u5927\u957f\u5ea6\n        # 34. \u8fd4\u56de\u6700\u5927\u957f\u5ea6\n        # 35. \u5982\u679c\u662f\u5de6\u62ec\u53f7\uff0c\u5219\u5165\u6808\n        # 36. \u5982\u679c\u662f\u53f3\u62ec\u53f7\uff0c\u5219\u5224\u65ad\u6808\u9876\u662f\u5426\u4e3a\u5de6\u62ec\u53f7\uff0c\u5982\u679c\u662f\uff0c\u5219\u51fa\u6808\uff0c\u5e76\u4e14\u8ba1\u7b97\u957f\u5ea6\n        # 37. \u5982\u679c\u6808\u4e3a\u7a7a\uff0c\u5219\u957f\u5ea6\u4e3a0\n        # 38. \u5982\u679c\u6808\u4e0d\u4e3a\u7a7a\uff0c\u5219\u957f\u5ea6\u4e3a\u6808\u9876\u7684\u957f\u5ea6\n        # 39. \u66f4\u65b0\u6700\u5927\u957f\u5ea6\n        # 40. \u8fd4\u56de\u6700\u5927\u957f\u5ea6\n        # 41. \u5982\u679c\u662f\u5de6\u62ec\u53f7\uff0c\u5219\u5165\u6808\n        # 42. \u5982\u679c\u662f\u53f3\u62ec\u53f7\uff0c\u5219\u5224\u65ad\u6808\u9876\u662f\u5426\u4e3a\u5de6\u62ec\u53f7"}, {"task_id": "longest-valid-parentheses", "completion": "class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a48 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.87%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.06%\u7684\u7528\u6237\n\n        # res = 0\n        # for i in range(len(s)):\n        #     for j in range(i, len(s)):\n        #         if self.isValid(s[i:j+1]):\n        #             res = max(res, j - i + 1)\n        # return res\n\n        # 2. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6267\u884c\u7528\u65f6\uff1a48 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.87%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.06%\u7684\u7528\u6237\n\n        # dp = [0] * len(s)\n        # res = 0\n        # for i in range(len(s)):\n        #     if s[i] == '(':\n        #         if i > 0 and s[i-1] == ')':\n        #             dp[i] = dp[i-2] + 2\n        #         if i > dp[i]:\n        #             dp[i] = 0\n        #     else:\n        #         if i > 0 and s[i-1] == '(':\n        #             dp[i] = dp[i-1] + 2\n        #         if i > dp[i]:\n        #             dp[i] = 0\n        #     res = max(res, dp[i])\n        # return res\n\n        # 3. \u6808\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6267\u884c\u7528\u65f6\uff1a48 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.87%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.06%\u7684\u7528\u6237\n\n        stack = []\n        res = 0\n        for i in range(len(s)):\n            if s[i] == '(':\n                stack.append(i)\n            else:\n                if len(stack) == 0:\n                    stack.append(i)\n                else:\n                    stack.pop()\n                    if len(stack) == 0:\n                        res = max(res, i - stack[-1])\n                    else:\n                        res = max(res, i - stack[-1] - 1)\n        return res\n\n    def isValid(self, s):\n        stack = []\n        for i in range(len(s)):\n            if s[i] == '(':\n                stack.append(i)\n            else:\n                if len(stack) == 0:\n                    stack.append(i)\n                else:\n                    stack.pop()\n                    if len(stack) == 0:\n                        return False\n        if len(stack) == 0:\n            return True\n        else:\n            return False"}, {"task_id": "longest-valid-parentheses", "completion": "class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6808\n        # 2. \u6808\u7684\u957f\u5ea6\n        # 3. \u6700\u5927\u957f\u5ea6\n        # 4. \u904d\u5386\u5b57\u7b26\u4e32\n        # 5. \u5982\u679c\u662f\u5de6\u62ec\u53f7\uff0c\u5219\u5165\u6808\n        # 6. \u5982\u679c\u662f\u53f3\u62ec\u53f7\uff0c\u5219\u5224\u65ad\u6808\u9876\u662f\u5426\u4e3a\u5de6\u62ec\u53f7\uff0c\u5982\u679c\u662f\uff0c\u5219\u51fa\u6808\uff0c\u5e76\u4e14\u8ba1\u7b97\u957f\u5ea6\n        # 7. \u5982\u679c\u6808\u4e3a\u7a7a\uff0c\u5219\u957f\u5ea6\u4e3a0\n        # 8. \u5982\u679c\u6808\u4e0d\u4e3a\u7a7a\uff0c\u5219\u957f\u5ea6\u4e3a\u6808\u9876\u7684\u957f\u5ea6\n        # 9. \u66f4\u65b0\u6700\u5927\u957f\u5ea6\n        # 10. \u8fd4\u56de\u6700\u5927\u957f\u5ea6\n        # 11. \u5982\u679c\u662f\u53f3\u62ec\u53f7\uff0c\u5219\u5165\u6808\n        # 12. \u5982\u679c\u662f\u5de6\u62ec\u53f7\uff0c\u5219\u5224\u65ad\u6808\u9876\u662f\u5426\u4e3a\u53f3\u62ec\u53f7\uff0c\u5982\u679c\u662f\uff0c\u5219\u51fa\u6808\uff0c\u5e76\u4e14\u8ba1\u7b97\u957f\u5ea6\n        # 13. \u5982\u679c\u6808\u4e3a\u7a7a\uff0c\u5219\u957f\u5ea6\u4e3a0\n        # 14. \u5982\u679c\u6808\u4e0d\u4e3a\u7a7a\uff0c\u5219\u957f\u5ea6\u4e3a\u6808\u9876\u7684\u957f\u5ea6\n        # 15. \u66f4\u65b0\u6700\u5927\u957f\u5ea6\n        # 16. \u8fd4\u56de\u6700\u5927\u957f\u5ea6\n        # 17. \u5982\u679c\u662f\u5de6\u62ec\u53f7\uff0c\u5219\u5165\u6808\n        # 18. \u5982\u679c\u662f\u53f3\u62ec\u53f7\uff0c\u5219\u5224\u65ad\u6808\u9876\u662f\u5426\u4e3a\u5de6\u62ec\u53f7\uff0c\u5982\u679c\u662f\uff0c\u5219\u51fa\u6808\uff0c\u5e76\u4e14\u8ba1\u7b97\u957f\u5ea6\n        # 19. \u5982\u679c\u6808\u4e3a\u7a7a\uff0c\u5219\u957f\u5ea6\u4e3a0\n        # 20. \u5982\u679c\u6808\u4e0d\u4e3a\u7a7a\uff0c\u5219\u957f\u5ea6\u4e3a\u6808\u9876\u7684\u957f\u5ea6\n        # 21. \u66f4\u65b0\u6700\u5927\u957f\u5ea6\n        # 22. \u8fd4\u56de\u6700\u5927\u957f\u5ea6\n        # 23. \u5982\u679c\u662f\u53f3\u62ec\u53f7\uff0c\u5219\u5165\u6808\n        # 24. \u5982\u679c\u662f\u5de6\u62ec\u53f7\uff0c\u5219\u5224\u65ad\u6808\u9876\u662f\u5426\u4e3a\u53f3\u62ec\u53f7\uff0c\u5982\u679c\u662f\uff0c\u5219\u51fa\u6808\uff0c\u5e76\u4e14\u8ba1\u7b97\u957f\u5ea6\n        # 25. \u5982\u679c\u6808\u4e3a\u7a7a\uff0c\u5219\u957f\u5ea6\u4e3a0\n        # 26. \u5982\u679c\u6808\u4e0d\u4e3a\u7a7a\uff0c\u5219\u957f\u5ea6\u4e3a\u6808\u9876\u7684\u957f\u5ea6\n        # 27. \u66f4\u65b0\u6700\u5927\u957f\u5ea6\n        # 28. \u8fd4\u56de\u6700\u5927\u957f\u5ea6\n        # 29. \u5982\u679c\u662f\u5de6\u62ec\u53f7\uff0c\u5219\u5165\u6808\n        # 30. \u5982\u679c\u662f\u53f3\u62ec\u53f7\uff0c\u5219\u5224\u65ad\u6808\u9876\u662f\u5426\u4e3a\u5de6\u62ec\u53f7\uff0c\u5982\u679c\u662f\uff0c\u5219\u51fa\u6808\uff0c\u5e76\u4e14\u8ba1\u7b97\u957f\u5ea6\n        # 31. \u5982\u679c\u6808\u4e3a\u7a7a\uff0c\u5219\u957f\u5ea6\u4e3a0\n        # 32. \u5982\u679c\u6808\u4e0d\u4e3a\u7a7a\uff0c\u5219\u957f\u5ea6\u4e3a\u6808\u9876\u7684\u957f\u5ea6\n        # 33. \u66f4\u65b0\u6700\u5927\u957f\u5ea6\n        # 34. \u8fd4\u56de\u6700\u5927\u957f\u5ea6\n        # 35. \u5982\u679c\u662f\u5de6\u62ec\u53f7\uff0c\u5219\u5165\u6808\n        # 36. \u5982\u679c\u662f\u53f3\u62ec\u53f7\uff0c\u5219\u5224\u65ad\u6808\u9876\u662f\u5426\u4e3a\u5de6\u62ec\u53f7\uff0c\u5982\u679c\u662f\uff0c\u5219\u51fa\u6808\uff0c\u5e76\u4e14\u8ba1\u7b97\u957f\u5ea6\n        # 37. \u5982\u679c\u6808\u4e3a\u7a7a\uff0c\u5219\u957f\u5ea6\u4e3a0\n        # 38. \u5982\u679c\u6808\u4e0d\u4e3a\u7a7a\uff0c\u5219\u957f\u5ea6\u4e3a\u6808\u9876\u7684\u957f\u5ea6\n        # 39. \u66f4\u65b0\u6700\u5927\u957f\u5ea6\n        # 40. \u8fd4\u56de\u6700\u5927\u957f\u5ea6\n        # 41. \u5982\u679c\u662f\u5de6\u62ec\u53f7\uff0c\u5219\u5165\u6808\n        # 42. \u5982\u679c\u662f\u53f3\u62ec\u53f7\uff0c\u5219\u5224\u65ad\u6808\u9876\u662f\u5426\u4e3a\u5de6\u62ec\u53f7"}, {"task_id": "longest-valid-parentheses", "completion": "class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6808\n        # 2. \u6808\u7684\u957f\u5ea6\n        # 3. \u6700\u5927\u957f\u5ea6\n        # 4. \u904d\u5386\u5b57\u7b26\u4e32\n        # 5. \u5982\u679c\u662f\u5de6\u62ec\u53f7\uff0c\u5219\u5165\u6808\n        # 6. \u5982\u679c\u662f\u53f3\u62ec\u53f7\uff0c\u5219\u5224\u65ad\u6808\u9876\u662f\u5426\u4e3a\u5de6\u62ec\u53f7\uff0c\u5982\u679c\u662f\uff0c\u5219\u51fa\u6808\uff0c\u5e76\u4e14\u8ba1\u7b97\u957f\u5ea6\n        # 7. \u5982\u679c\u6808\u4e3a\u7a7a\uff0c\u5219\u957f\u5ea6\u4e3a0\n        # 8. \u5982\u679c\u6808\u4e0d\u4e3a\u7a7a\uff0c\u5219\u957f\u5ea6\u4e3a\u6808\u9876\u7684\u957f\u5ea6\n        # 9. \u66f4\u65b0\u6700\u5927\u957f\u5ea6\n        # 10. \u8fd4\u56de\u6700\u5927\u957f\u5ea6\n        # 11. \u5982\u679c\u662f\u5de6\u62ec\u53f7\uff0c\u5219\u5165\u6808\n        # 12. \u5982\u679c\u662f\u53f3\u62ec\u53f7\uff0c\u5219\u5224\u65ad\u6808\u9876\u662f\u5426\u4e3a\u5de6\u62ec\u53f7\uff0c\u5982\u679c\u662f\uff0c\u5219\u51fa\u6808\uff0c\u5e76\u4e14\u8ba1\u7b97\u957f\u5ea6\n        # 13. \u5982\u679c\u6808\u4e3a\u7a7a\uff0c\u5219\u957f\u5ea6\u4e3a0\n        # 14. \u5982\u679c\u6808\u4e0d\u4e3a\u7a7a\uff0c\u5219\u957f\u5ea6\u4e3a\u6808\u9876\u7684\u957f\u5ea6\n        # 15. \u66f4\u65b0\u6700\u5927\u957f\u5ea6\n        # 16. \u8fd4\u56de\u6700\u5927\u957f\u5ea6\n        # 17. \u5982\u679c\u662f\u5de6\u62ec\u53f7\uff0c\u5219\u5165\u6808\n        # 18. \u5982\u679c\u662f\u53f3\u62ec\u53f7\uff0c\u5219\u5224\u65ad\u6808\u9876\u662f\u5426\u4e3a\u5de6\u62ec\u53f7\uff0c\u5982\u679c\u662f\uff0c\u5219\u51fa\u6808\uff0c\u5e76\u4e14\u8ba1\u7b97\u957f\u5ea6\n        # 19. \u5982\u679c\u6808\u4e3a\u7a7a\uff0c\u5219\u957f\u5ea6\u4e3a0\n        # 20. \u5982\u679c\u6808\u4e0d\u4e3a\u7a7a\uff0c\u5219\u957f\u5ea6\u4e3a\u6808\u9876\u7684\u957f\u5ea6\n        # 21. \u66f4\u65b0\u6700\u5927\u957f\u5ea6\n        # 22. \u8fd4\u56de\u6700\u5927\u957f\u5ea6\n        # 23. \u5982\u679c\u662f\u5de6\u62ec\u53f7\uff0c\u5219\u5165\u6808\n        # 24. \u5982\u679c\u662f\u53f3\u62ec\u53f7\uff0c\u5219\u5224\u65ad\u6808\u9876\u662f\u5426\u4e3a\u5de6\u62ec\u53f7\uff0c\u5982\u679c\u662f\uff0c\u5219\u51fa\u6808\uff0c\u5e76\u4e14\u8ba1\u7b97\u957f\u5ea6\n        # 25. \u5982\u679c\u6808\u4e3a\u7a7a\uff0c\u5219\u957f\u5ea6\u4e3a0\n        # 26. \u5982\u679c\u6808\u4e0d\u4e3a\u7a7a\uff0c\u5219\u957f\u5ea6\u4e3a\u6808\u9876\u7684\u957f\u5ea6\n        # 27. \u66f4\u65b0\u6700\u5927\u957f\u5ea6\n        # 28. \u8fd4\u56de\u6700\u5927\u957f\u5ea6\n        # 29. \u5982\u679c\u662f\u5de6\u62ec\u53f7\uff0c\u5219\u5165\u6808\n        # 30. \u5982\u679c\u662f\u53f3\u62ec\u53f7\uff0c\u5219\u5224\u65ad\u6808\u9876\u662f\u5426\u4e3a\u5de6\u62ec\u53f7\uff0c\u5982\u679c\u662f\uff0c\u5219\u51fa\u6808\uff0c\u5e76\u4e14\u8ba1\u7b97\u957f\u5ea6\n        # 31. \u5982\u679c\u6808\u4e3a\u7a7a\uff0c\u5219\u957f\u5ea6\u4e3a0\n        # 32. \u5982\u679c\u6808\u4e0d\u4e3a\u7a7a\uff0c\u5219\u957f\u5ea6\u4e3a\u6808\u9876\u7684\u957f\u5ea6\n        # 33. \u66f4\u65b0\u6700\u5927\u957f\u5ea6\n        # 34. \u8fd4\u56de\u6700\u5927\u957f\u5ea6\n        # 35. \u5982\u679c\u662f\u5de6\u62ec\u53f7\uff0c\u5219\u5165\u6808\n        # 36. \u5982\u679c\u662f\u53f3\u62ec\u53f7\uff0c\u5219\u5224\u65ad\u6808\u9876\u662f\u5426\u4e3a\u5de6\u62ec\u53f7\uff0c\u5982\u679c\u662f\uff0c\u5219\u51fa\u6808\uff0c\u5e76\u4e14\u8ba1\u7b97\u957f\u5ea6\n        # 37. \u5982\u679c\u6808\u4e3a\u7a7a\uff0c\u5219\u957f\u5ea6\u4e3a0\n        # 38. \u5982\u679c\u6808\u4e0d\u4e3a\u7a7a\uff0c\u5219\u957f\u5ea6\u4e3a\u6808\u9876\u7684\u957f\u5ea6\n        # 39. \u66f4\u65b0\u6700\u5927\u957f\u5ea6\n        # 40. \u8fd4\u56de\u6700\u5927\u957f\u5ea6\n        # 41. \u5982\u679c\u662f\u5de6\u62ec\u53f7\uff0c\u5219\u5165\u6808\n        # 42. \u5982\u679c\u662f\u53f3\u62ec\u53f7\uff0c\u5219\u5224\u65ad\u6808\u9876\u662f\u5426\u4e3a\u5de6\u62ec\u53f7"}], "fraction-to-recurring-decimal": [{"task_id": "fraction-to-recurring-decimal", "completion": "class Solution(object):\n    def fractionToDecimal(self, numerator, denominator):\n        \"\"\"\n        :type numerator: int\n        :type denominator: int\n        :rtype: str\n        \"\"\"\n        \n        if numerator == 0:\n            return \"0\"\n        \n        sign = \"\"\n        if numerator < 0 and denominator < 0 or numerator > 0 and denominator > 0:\n            sign = \"+\"\n        elif numerator < 0 and denominator > 0 or numerator > 0 and denominator < 0:\n            sign = \"-\"\n        \n        numerator = abs(numerator)\n        denominator = abs(denominator)\n        \n        result = \"\"\n        if numerator == denominator:\n            return \"1\"\n        \n        result += str(numerator // denominator)\n        numerator %= denominator\n        if numerator == 0:\n            return result\n        \n        result += \".\"\n        seen = set()\n        while numerator != 0:\n            numerator *= 10\n            result += str(numerator // denominator)\n            numerator %= denominator\n            if numerator in seen:\n                break\n            seen.add(numerator)\n        return sign + result"}, {"task_id": "fraction-to-recurring-decimal", "completion": "class Solution(object):\n    def fractionToDecimal(self, numerator, denominator):\n        \"\"\"\n        :type numerator: int\n        :type denominator: int\n        :rtype: str\n        \"\"\"\n        \n        if numerator == 0:\n            return \"0\"\n        \n        sign = \"\"\n        if numerator < 0 and denominator < 0 or numerator > 0 and denominator > 0:\n            sign = \"+\"\n        elif numerator < 0 and denominator > 0 or numerator > 0 and denominator < 0:\n            sign = \"-\"\n        \n        numerator = abs(numerator)\n        denominator = abs(denominator)\n        \n        result = \"\"\n        if numerator == denominator:\n            return \"1\"\n        \n        result += str(numerator // denominator)\n        numerator %= denominator\n        if numerator == 0:\n            return result\n        \n        result += \".\"\n        seen = set()\n        while numerator != 0:\n            numerator *= 10\n            result += str(numerator // denominator)\n            numerator %= denominator\n            if numerator in seen:\n                break\n            seen.add(numerator)\n        return sign + result"}, {"task_id": "fraction-to-recurring-decimal", "completion": "class Solution(object):\n    def fractionToDecimal(self, numerator, denominator):\n        \"\"\"\n        :type numerator: int\n        :type denominator: int\n        :rtype: str\n        \"\"\"\n        \n        if numerator == 0:\n            return \"0\"\n        \n        sign = \"\"\n        if numerator < 0 and denominator < 0 or numerator > 0 and denominator > 0:\n            sign = \"+\"\n        elif numerator < 0 and denominator > 0 or numerator > 0 and denominator < 0:\n            sign = \"-\"\n        \n        numerator = abs(numerator)\n        denominator = abs(denominator)\n        \n        result = \"\"\n        if numerator == denominator:\n            return \"1\"\n        \n        result += str(numerator // denominator)\n        numerator %= denominator\n        if numerator == 0:\n            return result\n        \n        result += \".\"\n        seen = set()\n        while numerator != 0:\n            numerator *= 10\n            result += str(numerator // denominator)\n            numerator %= denominator\n            if numerator in seen:\n                break\n            seen.add(numerator)\n        return sign + result"}, {"task_id": "fraction-to-recurring-decimal", "completion": "class Solution(object):\n    def fractionToDecimal(self, numerator, denominator):\n        \"\"\"\n        :type numerator: int\n        :type denominator: int\n        :rtype: str\n        \"\"\"\n        \n        if numerator == 0:\n            return \"0\"\n        \n        sign = \"\"\n        if numerator < 0 and denominator < 0 or numerator > 0 and denominator > 0:\n            sign = \"+\"\n        elif numerator < 0 and denominator > 0 or numerator > 0 and denominator < 0:\n            sign = \"-\"\n        \n        numerator = abs(numerator)\n        denominator = abs(denominator)\n        \n        result = \"\"\n        if numerator == denominator:\n            return \"1\"\n        \n        result += str(numerator // denominator)\n        numerator %= denominator\n        if numerator == 0:\n            return result\n        \n        result += \".\"\n        seen = set()\n        while numerator != 0:\n            numerator *= 10\n            result += str(numerator // denominator)\n            numerator %= denominator\n            if numerator in seen:\n                break\n            seen.add(numerator)\n        return sign + result"}, {"task_id": "fraction-to-recurring-decimal", "completion": "class Solution(object):\n    def fractionToDecimal(self, numerator, denominator):\n        \"\"\"\n        :type numerator: int\n        :type denominator: int\n        :rtype: str\n        \"\"\"\n        \n        if numerator == 0:\n            return \"0\"\n        \n        sign = \"\"\n        if numerator < 0 and denominator < 0 or numerator > 0 and denominator > 0:\n            sign = \"+\"\n        elif numerator < 0 and denominator > 0 or numerator > 0 and denominator < 0:\n            sign = \"-\"\n        \n        numerator = abs(numerator)\n        denominator = abs(denominator)\n        \n        result = \"\"\n        if numerator == denominator:\n            return \"1\"\n        \n        result += str(numerator // denominator)\n        numerator %= denominator\n        if numerator == 0:\n            return result\n        \n        result += \".\"\n        seen = set()\n        while numerator != 0:\n            numerator *= 10\n            result += str(numerator // denominator)\n            numerator %= denominator\n            if numerator in seen:\n                break\n            seen.add(numerator)\n        return sign + result"}], "sort-list": [{"task_id": "sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None or head.next is None:\n            return head\n        \n        # find the middle of the linked list\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # split the linked list into two halves\n        mid = slow.next\n        slow.next = None\n        \n        # sort each half\n        left = self.sortList(head)\n        right = self.sortList(mid)\n        \n        # merge the two halves\n        return self.merge(left, right)\n    \n    def merge(self, left, right):\n        dummy = ListNode(0)\n        curr = dummy\n        \n        while left and right:\n            if left.val <= right.val:\n                curr.next = left\n                left = left.next\n            else:\n                curr.next = right\n                right = right.next\n            curr = curr.next\n        \n        if left:\n            curr.next = left\n        if right:\n            curr.next = right\n        \n        return dummy.next"}, {"task_id": "sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        if head.next:\n            slow = head\n            fast = head.next\n            \n            while fast.next:\n                slow = slow.next\n                fast = fast.next.next\n            \n            fast.next = head\n            head = slow.next\n            slow.next = None\n            \n            head = self.sortList(head)\n            fast = self.sortList(fast)\n            \n            return self.merge(head, fast)\n        else:\n            return head\n    \n    def merge(self, l1, l2):\n        dummy = ListNode(0)\n        cur = dummy\n        \n        while l1 and l2:\n            if l1.val < l2.val:\n                cur.next = l1\n                l1 = l1.next\n            else:\n                cur.next = l2\n                l2 = l2.next\n            cur = cur.next\n        \n        if l1:\n            cur.next = l1\n        if l2:\n            cur.next = l2\n        \n        return dummy.next"}, {"task_id": "sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None or head.next is None:\n            return head\n        \n        # find the middle of the linked list\n        slow = head\n        fast = head.next\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # split the linked list into two halves\n        mid = slow.next\n        slow.next = None\n        \n        # sort each half\n        left = self.sortList(head)\n        right = self.sortList(mid)\n        \n        # merge the two halves\n        return self.merge(left, right)\n    \n    def merge(self, left, right):\n        dummy = ListNode(0)\n        curr = dummy\n        \n        while left and right:\n            if left.val <= right.val:\n                curr.next = left\n                left = left.next\n            else:\n                curr.next = right\n                right = right.next\n            curr = curr.next\n        \n        if left:\n            curr.next = left\n        if right:\n            curr.next = right\n        \n        return dummy.next"}, {"task_id": "sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return head\n        \n        # find the middle of the linked list\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # split the linked list into two halves\n        mid = slow.next\n        slow.next = None\n        \n        # sort each half\n        left = self.sortList(head)\n        right = self.sortList(mid)\n        \n        # merge the two halves\n        return self.merge(left, right)\n    \n    def merge(self, left, right):\n        dummy = ListNode(0)\n        curr = dummy\n        \n        while left and right:\n            if left.val <= right.val:\n                curr.next = left\n                left = left.next\n            else:\n                curr.next = right\n                right = right.next\n            curr = curr.next\n        \n        if left:\n            curr.next = left\n        if right:\n            curr.next = right\n        \n        return dummy.next"}, {"task_id": "sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        if head.next:\n            slow = head\n            fast = head.next\n            \n            while fast and fast.next:\n                slow = slow.next\n                fast = fast.next.next\n            \n            fast.next = None\n            \n            left = self.sortList(head)\n            right = self.sortList(slow.next)\n            \n            slow.next = None\n            \n            return self.merge(left, right)\n        else:\n            return head\n    \n    def merge(self, left, right):\n        dummy = ListNode(0)\n        cur = dummy\n        \n        while left and right:\n            if left.val <= right.val:\n                cur.next = left\n                left = left.next\n            else:\n                cur.next = right\n                right = right.next\n            cur = cur.next\n        \n        if left:\n            cur.next = left\n        if right:\n            cur.next = right\n        \n        return dummy.next"}], "russian-doll-envelopes": [{"task_id": "russian-doll-envelopes", "completion": "class Solution(object):\n    def maxEnvelopes(self, envelopes):\n        \"\"\"\n        :type envelopes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # Sort the envelopes by their widths\n        envelopes.sort(key=lambda x: x[0])\n        \n        # Sort the envelopes by their heights\n        envelopes.sort(key=lambda x: x[1], reverse=True)\n        \n        # Keep track of the maximum number of envelopes\n        max_envelopes = 0\n        \n        # Keep track of the current number of envelopes\n        current_envelopes = 1\n        \n        # Keep track of the current width\n        current_width = envelopes[0][0]\n        \n        # Keep track of the current height\n        current_height = envelopes[0][1]\n        \n        # Loop through the envelopes\n        for i in range(1, len(envelopes)):\n            \n            # If the current width is less than the width of the current envelope\n            if envelopes[i][0] < current_width:\n                \n                # If the current height is less than the height of the current envelope\n                if envelopes[i][1] < current_height:\n                    \n                    # Increment the current number of envelopes\n                    current_envelopes += 1\n                    \n                    # Update the current width\n                    current_width = envelopes[i][0]\n                    \n                    # Update the current height\n                    current_height = envelopes[i][1]\n                    \n                # Else if the current height is greater than the height of the current envelope\n                elif envelopes[i][1] > current_height:\n                    \n                    # Update the current height\n                    current_height = envelopes[i][1]\n                    \n            # Else if the current width is greater than the width of the current envelope\n            elif envelopes[i][0] > current_width:\n                \n                # Update the current width\n                current_width = envelopes[i][0]\n                \n                # Update the current height\n                current_height = envelopes[i][1]\n                \n                # Update the current number of envelopes\n                current_envelopes = 1\n                \n            # Else if the current width is equal to the width of the current envelope\n            elif envelopes[i][0] == current_width:\n                \n                # If the current height is less than the height of the current envelope\n                if envelopes[i][1] < current_height:\n                    \n                    # Update the current height\n                    current_height = envelopes[i][1]\n                    \n                # Else if the current height is greater than the height of the current envelope\n                elif envelopes[i][1] > current_height:\n                    \n                    # Update the current height\n                    current_height = envelopes[i][1]\n                    \n                    # Update the current number of envelopes\n                    current_envelopes = 1\n                    \n            # Update the maximum number of envelopes\n            max_envelopes = max(max_envelopes, current_envelopes)\n            \n        # Return the maximum number of envelopes\n        return max_envelopes"}, {"task_id": "russian-doll-envelopes", "completion": "class Solution(object):\n    def maxEnvelopes(self, envelopes):\n        \"\"\"\n        :type envelopes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # Sort the envelopes by their widths\n        envelopes.sort(key=lambda x: x[0])\n        \n        # Sort the envelopes by their heights\n        envelopes.sort(key=lambda x: x[1], reverse=True)\n        \n        # Keep track of the maximum number of envelopes\n        max_envelopes = 0\n        \n        # Keep track of the current number of envelopes\n        current_envelopes = 1\n        \n        # Keep track of the current width\n        current_width = envelopes[0][0]\n        \n        # Keep track of the current height\n        current_height = envelopes[0][1]\n        \n        # Loop through the envelopes\n        for i in range(1, len(envelopes)):\n            \n            # If the current width is greater than the width of the current envelope\n            if envelopes[i][0] > current_width:\n                \n                # Update the current width\n                current_width = envelopes[i][0]\n                \n                # Update the current height\n                current_height = envelopes[i][1]\n                \n                # Update the current number of envelopes\n                current_envelopes += 1\n                \n            # If the current height is greater than the height of the current envelope\n            elif envelopes[i][1] > current_height:\n                \n                # Update the current height\n                current_height = envelopes[i][1]\n                \n                # Update the current number of envelopes\n                current_envelopes += 1\n                \n            # If the current width is less than the width of the current envelope\n            elif envelopes[i][0] < current_width:\n                \n                # Update the current number of envelopes\n                current_envelopes = 1\n                \n                # Update the current width\n                current_width = envelopes[i][0]\n                \n                # Update the current height\n                current_height = envelopes[i][1]\n                \n            # If the current height is less than the height of the current envelope\n            elif envelopes[i][1] < current_height:\n                \n                # Update the current number of envelopes\n                current_envelopes = 1\n                \n                # Update the current width\n                current_width = envelopes[i][0]\n                \n                # Update the current height\n                current_height = envelopes[i][1]\n                \n            # Update the maximum number of envelopes\n            max_envelopes = max(max_envelopes, current_envelopes)\n            \n        # Return the maximum number of envelopes\n        return max_envelopes"}, {"task_id": "russian-doll-envelopes", "completion": "class Solution(object):\n    def maxEnvelopes(self, envelopes):\n        \"\"\"\n        :type envelopes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # Sort the envelopes by their area\n        envelopes.sort(key=lambda x: x[0] * x[1])\n        \n        # Create a list to store the maximum number of envelopes\n        # that can be put inside each envelope\n        max_envelopes = [1] * len(envelopes)\n        \n        # Traverse the sorted envelopes from the end\n        for i in range(len(envelopes) - 2, -1, -1):\n            for j in range(i + 1, len(envelopes)):\n                if envelopes[i][0] < envelopes[j][0] and envelopes[i][1] < envelopes[j][1]:\n                    max_envelopes[i] = max(max_envelopes[i], 1 + max_envelopes[j])\n        \n        # Return the maximum number of envelopes\n        return max(max_envelopes)"}, {"task_id": "russian-doll-envelopes", "completion": "class Solution(object):\n    def maxEnvelopes(self, envelopes):\n        \"\"\"\n        :type envelopes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # Sort the envelopes by their area\n        envelopes.sort(key=lambda x: x[0]*x[1])\n        \n        # Create a list to store the maximum number of envelopes\n        # that can be put inside each envelope\n        max_envelopes = [1] * len(envelopes)\n        \n        # Start from the second envelope\n        for i in range(1, len(envelopes)):\n            \n            # Start from the previous envelope\n            for j in range(i):\n                \n                # If the current envelope can be put inside the previous envelope\n                if envelopes[i][0] < envelopes[j][0] and envelopes[i][1] < envelopes[j][1]:\n                    \n                    # Update the maximum number of envelopes\n                    max_envelopes[i] = max(max_envelopes[i], max_envelopes[j] + 1)\n        \n        # Return the maximum number of envelopes\n        return max(max_envelopes)"}, {"task_id": "russian-doll-envelopes", "completion": "class Solution(object):\n    def maxEnvelopes(self, envelopes):\n        \"\"\"\n        :type envelopes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # Sort the envelopes by their widths\n        envelopes.sort(key=lambda x: x[0])\n        \n        # Sort the envelopes by their heights\n        envelopes.sort(key=lambda x: x[1], reverse=True)\n        \n        # Keep track of the maximum number of envelopes\n        max_envelopes = 0\n        \n        # Keep track of the current number of envelopes\n        current_envelopes = 1\n        \n        # Keep track of the current width\n        current_width = envelopes[0][0]\n        \n        # Keep track of the current height\n        current_height = envelopes[0][1]\n        \n        # Loop through the envelopes\n        for i in range(1, len(envelopes)):\n            \n            # If the current width is less than the width of the current envelope\n            if envelopes[i][0] < current_width:\n                \n                # If the current height is less than the height of the current envelope\n                if envelopes[i][1] < current_height:\n                    \n                    # Increment the current number of envelopes\n                    current_envelopes += 1\n                    \n                    # Update the current width\n                    current_width = envelopes[i][0]\n                    \n                    # Update the current height\n                    current_height = envelopes[i][1]\n                    \n                # Else the current height is greater than the height of the current envelope\n                else:\n                    \n                    # Update the current width\n                    current_width = envelopes[i][0]\n                    \n                    # Update the current height\n                    current_height = envelopes[i][1]\n                    \n            # Else the current width is greater than the width of the current envelope\n            else:\n                \n                # Update the current width\n                current_width = envelopes[i][0]\n                \n                # Update the current height\n                current_height = envelopes[i][1]\n                \n            # Update the maximum number of envelopes\n            max_envelopes = max(max_envelopes, current_envelopes)\n            \n        # Return the maximum number of envelopes\n        return max_envelopes"}], "set-matrix-zeroes": [{"task_id": "set-matrix-zeroes", "completion": "class Solution(object):\n    def setZeroes(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        # 1. find the first zero\n        # 2. set the first zero to 0\n        # 3. set all the elements in the same row to 0\n        # 4. set all the elements in the same column to 0\n        # 5. repeat 1-4\n        \n        # 1. find the first zero\n        row = 0\n        col = 0\n        for i in range(len(matrix)):\n            for j in range(len(matrix[0])):\n                if matrix[i][j] == 0:\n                    row = i\n                    col = j\n                    break\n            if row != 0:\n                break\n        # 2. set the first zero to 0\n        matrix[row][col] = 0\n        # 3. set all the elements in the same row to 0\n        for j in range(len(matrix[0])):\n            if matrix[row][j] == 0:\n                matrix[row][j] = 0\n        # 4. set all the elements in the same column to 0\n        for i in range(len(matrix)):\n            if matrix[i][col] == 0:\n                matrix[i][col] = 0\n        # 5. repeat 1-4\n        for i in range(len(matrix)):\n            for j in range(len(matrix[0])):\n                if matrix[i][j] == 0:\n                    matrix[i][j] = 0"}, {"task_id": "set-matrix-zeroes", "completion": "class Solution(object):\n    def setZeroes(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        # 1. Find the first zero in the matrix\n        # 2. Set all the elements in the same row and column to zero\n        # 3. Repeat step 1 and 2 until no more zeroes are found\n        \n        # 1. Find the first zero in the matrix\n        for i in range(len(matrix)):\n            for j in range(len(matrix[0])):\n                if matrix[i][j] == 0:\n                    # 2. Set all the elements in the same row and column to zero\n                    for k in range(len(matrix[0])):\n                        matrix[i][k] = 0\n                    for k in range(len(matrix)):\n                        matrix[k][j] = 0\n                    break\n        \n        # 3. Repeat step 1 and 2 until no more zeroes are found\n        for i in range(len(matrix)):\n            for j in range(len(matrix[0])):\n                if matrix[i][j] == 0:\n                    for k in range(len(matrix[0])):\n                        matrix[i][k] = 0\n                    for k in range(len(matrix)):\n                        matrix[k][j] = 0\n                    break"}, {"task_id": "set-matrix-zeroes", "completion": "class Solution(object):\n    def setZeroes(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        # 1. find the first zero\n        # 2. set the first zero to 0\n        # 3. set all the elements in the same row to 0\n        # 4. set all the elements in the same column to 0\n        # 5. repeat 1-4\n        \n        # 1. find the first zero\n        row = 0\n        col = 0\n        for i in range(len(matrix)):\n            for j in range(len(matrix[0])):\n                if matrix[i][j] == 0:\n                    row = i\n                    col = j\n                    break\n            if row != 0:\n                break\n        # 2. set the first zero to 0\n        matrix[row][col] = 0\n        # 3. set all the elements in the same row to 0\n        for j in range(len(matrix[0])):\n            if matrix[row][j] == 0:\n                matrix[row][j] = 0\n        # 4. set all the elements in the same column to 0\n        for i in range(len(matrix)):\n            if matrix[i][col] == 0:\n                matrix[i][col] = 0\n        # 5. repeat 1-4\n        for i in range(len(matrix)):\n            for j in range(len(matrix[0])):\n                if matrix[i][j] == 0:\n                    matrix[i][j] = 0"}, {"task_id": "set-matrix-zeroes", "completion": "class Solution(object):\n    def setZeroes(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        # 1. Find the first zero in the matrix\n        # 2. Set all the elements in the same row and column to zero\n        # 3. Repeat step 1 and 2 until there is no zero left in the matrix\n        \n        # 1. Find the first zero in the matrix\n        for i in range(len(matrix)):\n            for j in range(len(matrix[0])):\n                if matrix[i][j] == 0:\n                    # 2. Set all the elements in the same row and column to zero\n                    for k in range(len(matrix[0])):\n                        matrix[i][k] = 0\n                    for k in range(len(matrix)):\n                        matrix[k][j] = 0\n                    break\n        \n        # 3. Repeat step 1 and 2 until there is no zero left in the matrix\n        for i in range(len(matrix)):\n            for j in range(len(matrix[0])):\n                if matrix[i][j] == 0:\n                    for k in range(len(matrix[0])):\n                        matrix[i][k] = 0\n                    for k in range(len(matrix)):\n                        matrix[k][j] = 0"}, {"task_id": "set-matrix-zeroes", "completion": "class Solution(object):\n    def setZeroes(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        # 1. find the first zero\n        # 2. set the first zero to 0\n        # 3. set the rest of the zero to 0\n        # 4. set the first zero to 0\n        # 5. set the rest of the zero to 0\n        # 6. set the first zero to 0\n        # 7. set the rest of the zero to 0\n        # 8. set the first zero to 0\n        # 9. set the rest of the zero to 0\n        # 10. set the first zero to 0\n        # 11. set the rest of the zero to 0\n        # 12. set the first zero to 0\n        # 13. set the rest of the zero to 0\n        # 14. set the first zero to 0\n        # 15. set the rest of the zero to 0\n        # 16. set the first zero to 0\n        # 17. set the rest of the zero to 0\n        # 18. set the first zero to 0\n        # 19. set the rest of the zero to 0\n        # 20. set the first zero to 0\n        # 21. set the rest of the zero to 0\n        # 22. set the first zero to 0\n        # 23. set the rest of the zero to 0\n        # 24. set the first zero to 0\n        # 25. set the rest of the zero to 0\n        # 26. set the first zero to 0\n        # 27. set the rest of the zero to 0\n        # 28. set the first zero to 0\n        # 29. set the rest of the zero to 0\n        # 30. set the first zero to 0\n        # 31. set the rest of the zero to 0\n        # 32. set the first zero to 0\n        # 33. set the rest of the zero to 0\n        # 34. set the first zero to 0\n        # 35. set the rest of the zero to 0\n        # 36. set the first zero to 0\n        # 37. set the rest of the zero to 0\n        # 38. set the first zero to 0\n        # 39. set the rest of the zero to 0\n        # 40. set the first zero to 0\n        # 41. set the rest of the zero to 0\n        # 42. set the first zero to 0\n        # 43. set the rest of the zero to 0\n        # 44. set the first zero to 0\n        # 45. set the rest of the zero to 0\n        # 46. set the first zero to 0\n        # 47. set the rest of the zero to 0\n        # 48. set the first zero to 0\n        # 49. set the rest of the zero to 0\n        # 50. set the first zero to 0\n        # 51. set the rest of the zero to 0\n        # 52. set the first zero to 0\n        # 53. set the rest of the zero to 0\n        # 54. set the first zero to 0\n        # 55. set the rest of the zero to 0\n        # 56. set the first zero to 0\n        # 57. set the rest of the zero to 0\n        # 58. set the first zero to 0\n        # 59. set the rest of the zero to 0\n        # 60. set the first zero to 0\n        # 61. set the rest of the zero to 0\n        # 62. set the first zero to 0\n        # 63. set the rest of the zero to 0\n        # 64. set the first zero to 0\n        # 65. set the rest of the zero to 0\n        # 66. set the first zero to 0\n        # 67. set the rest of the zero to 0\n        # 68. set the first zero to 0\n        # 69. set the rest of the zero to 0\n        #"}], "remove-nth-node-from-end-of-list": [{"task_id": "remove-nth-node-from-end-of-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # 1. get the length of the linked list\n        # 2. get the nth node from the end\n        # 3. remove the nth node from the end\n        # 4. return the head of the linked list\n        \n        # 1. get the length of the linked list\n        length = 0\n        node = head\n        while node:\n            length += 1\n            node = node.next\n        \n        # 2. get the nth node from the end\n        nth_node_from_end = length - n\n        if nth_node_from_end == 0:\n            return head.next\n        elif nth_node_from_end == 1:\n            return head\n        \n        # 3. remove the nth node from the end\n        node = head\n        for i in range(nth_node_from_end - 1):\n            node = node.next\n        node.next = node.next.next\n        \n        # 4. return the head of the linked list\n        return head"}, {"task_id": "remove-nth-node-from-end-of-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # 1. Create a dummy node\n        dummy = ListNode(0)\n        dummy.next = head\n        \n        # 2. Create two pointers\n        # 2.1. one pointer is at the head\n        # 2.2. the other pointer is at the nth node from the end\n        # 2.3. move the first pointer one node at a time\n        # 2.4. move the second pointer one node at a time\n        # 2.5. when the first pointer reaches the end, the second pointer is at the nth node from the end\n        # 2.6. remove the second pointer\n        first = dummy\n        second = dummy\n        \n        # 2.1. one pointer is at the head\n        for _ in range(n):\n            second = second.next\n        \n        # 2.2. the other pointer is at the nth node from the end\n        while second.next:\n            first = first.next\n            second = second.next\n        \n        # 2.3. move the first pointer one node at a time\n        while first.next:\n            first = first.next\n            second = second.next\n        \n        # 2.4. move the second pointer one node at a time\n        second.next = second.next.next\n        \n        # 2.5. when the first pointer reaches the end, the second pointer is at the nth node from the end\n        # 2.6. remove the second pointer\n        return dummy.next"}, {"task_id": "remove-nth-node-from-end-of-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # 1. Create a dummy node\n        dummy = ListNode(0)\n        dummy.next = head\n        \n        # 2. Create two pointers, one at the beginning and the other at the end\n        # 3. Move the first pointer n steps ahead\n        # 4. Move both pointers one step ahead until the first pointer reaches the end\n        # 5. Remove the node pointed by the second pointer\n        # 6. Return the head of the dummy node\n        first = dummy\n        second = dummy\n        \n        for i in range(n):\n            first = first.next\n        \n        while first:\n            first = first.next\n            second = second.next\n        \n        second.next = second.next.next\n        \n        return dummy.next"}, {"task_id": "remove-nth-node-from-end-of-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # 1. Create a dummy node\n        dummy = ListNode(0)\n        dummy.next = head\n        \n        # 2. Create two pointers\n        # 2.1. one pointer is n nodes ahead of the other\n        # 2.2. the other pointer is one node ahead of the other\n        # 2.3. advance the first pointer by n nodes\n        # 2.4. advance the second pointer by one node\n        # 2.5. advance the first pointer by one node\n        # 2.6. advance the second pointer by one node\n        # 2.7. advance the first pointer by one node\n        # 2.8. advance the second pointer by one node\n        # 2.9. advance the first pointer by one node\n        # 2.10. advance the second pointer by one node\n        # 2.11. advance the first pointer by one node\n        # 2.12. advance the second pointer by one node\n        # 2.13. advance the first pointer by one node\n        # 2.14. advance the second pointer by one node\n        # 2.15. advance the first pointer by one node\n        # 2.16. advance the second pointer by one node\n        # 2.17. advance the first pointer by one node\n        # 2.18. advance the second pointer by one node\n        # 2.19. advance the first pointer by one node\n        # 2.20. advance the second pointer by one node\n        # 2.21. advance the first pointer by one node\n        # 2.22. advance the second pointer by one node\n        # 2.23. advance the first pointer by one node\n        # 2.24. advance the second pointer by one node\n        # 2.25. advance the first pointer by one node\n        # 2.26. advance the second pointer by one node\n        # 2.27. advance the first pointer by one node\n        # 2.28. advance the second pointer by one node\n        # 2.29. advance the first pointer by one node\n        # 2.30. advance the second pointer by one node\n        # 2.31. advance the first pointer by one node\n        # 2.32. advance the second pointer by one node\n        # 2.33. advance the first pointer by one node\n        # 2.34. advance the second pointer by one node\n        # 2.35. advance the first pointer by one node\n        # 2.36. advance the second pointer by one node\n        # 2.37. advance the first pointer by one node\n        # 2.38. advance the second pointer by one node\n        # 2.39. advance the first pointer by one node\n        # 2.40. advance the second pointer by one node\n        # 2.41. advance the first pointer by one node\n        # 2.42. advance the second pointer by one node\n        # 2.43. advance the first pointer by one node\n        # 2.44. advance the second pointer by one node\n        # 2.45. advance the first pointer by one node\n        # 2.46. advance the second pointer by one node\n        # 2.47. advance the first pointer by one node\n        # 2.48. advance the second pointer by one node\n        # 2.49. advance the first pointer by one node\n        # 2.50. advance the second pointer by one node\n        # 2.51. advance the first pointer by one node\n        # 2.52. advance the second pointer by one node\n        # 2.53. advance the first pointer by one node\n        # 2.54. advance the second pointer by one node\n        # 2.55. advance the first pointer by one node\n        # 2.56. advance the second pointer by one node\n        # 2.57. advance the first pointer by one node\n        # 2.58. advance the second pointer by one node\n        # 2.59. advance the first pointer by one node\n        # 2.60. advance the second pointer by one node\n        # 2.61. advance the first pointer by one node\n        # 2.62. advance the second pointer by one node"}, {"task_id": "remove-nth-node-from-end-of-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # 1. Create a dummy node\n        dummy = ListNode(0)\n        dummy.next = head\n        \n        # 2. Create two pointers, one at the head and the other at the nth node from the end\n        # 3. Move the first pointer n nodes forward\n        # 4. Move both pointers forward until the first pointer reaches the end\n        # 5. Remove the node pointed by the second pointer\n        # 6. Return the head of the dummy node\n        first = dummy\n        second = dummy\n        \n        for i in range(n):\n            first = first.next\n        \n        while first:\n            first = first.next\n            second = second.next\n        \n        second.next = second.next.next\n        \n        return dummy.next"}], "intersection-of-two-arrays": [{"task_id": "intersection-of-two-arrays", "completion": "class Solution(object):\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. Create a set of nums1\n        # 2. Iterate over nums2 and add to the set if it is in nums1\n        # 3. Return the set\n        \n        # Create a set of nums1\n        nums1_set = set(nums1)\n        \n        # Iterate over nums2 and add to the set if it is in nums1\n        nums2_set = set()\n        for num in nums2:\n            if num in nums1_set:\n                nums2_set.add(num)\n        \n        # Return the set\n        return list(nums2_set)"}, {"task_id": "intersection-of-two-arrays", "completion": "class Solution(object):\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. sort both arrays\n        nums1.sort()\n        nums2.sort()\n        \n        # 2. find intersection\n        i = 0\n        j = 0\n        intersection = []\n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] == nums2[j]:\n                intersection.append(nums1[i])\n                i += 1\n                j += 1\n            elif nums1[i] < nums2[j]:\n                i += 1\n            else:\n                j += 1\n        \n        return intersection"}, {"task_id": "intersection-of-two-arrays", "completion": "class Solution(object):\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. Create a set of nums1\n        # 2. Iterate over nums2 and add to the set if it is in nums1\n        # 3. Return the set\n        \n        # Create a set of nums1\n        nums1_set = set(nums1)\n        \n        # Iterate over nums2 and add to the set if it is in nums1\n        nums2_set = set()\n        for num in nums2:\n            if num in nums1_set:\n                nums2_set.add(num)\n        \n        # Return the set\n        return list(nums2_set)"}, {"task_id": "intersection-of-two-arrays", "completion": "class Solution(object):\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. sort both arrays\n        nums1.sort()\n        nums2.sort()\n        \n        # 2. find intersection\n        i = 0\n        j = 0\n        intersection = []\n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] < nums2[j]:\n                i += 1\n            elif nums1[i] > nums2[j]:\n                j += 1\n            else:\n                intersection.append(nums1[i])\n                i += 1\n                j += 1\n        \n        return intersection"}, {"task_id": "intersection-of-two-arrays", "completion": "class Solution(object):\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. sort both arrays\n        nums1.sort()\n        nums2.sort()\n        \n        # 2. find intersection\n        i = 0\n        j = 0\n        intersection = []\n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] == nums2[j]:\n                intersection.append(nums1[i])\n                i += 1\n                j += 1\n            elif nums1[i] < nums2[j]:\n                i += 1\n            else:\n                j += 1\n        \n        return intersection"}], "super-washing-machines": [{"task_id": "super-washing-machines", "completion": "class Solution(object):\n    def findMinMoves(self, machines):\n        \"\"\"\n        :type machines: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5927\u7684\u503c\n        max_val = max(machines)\n        \n        # 2. \u627e\u5230\u6700\u5c0f\u7684\u503c\n        min_val = min(machines)\n        \n        # 3. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\n        diff = max_val - min_val\n        \n        # 4. \u8ba1\u7b97\u6700\u5c0f\u503c\u7684\u4e2a\u6570\n        min_val_count = machines.count(min_val)\n        \n        # 5. \u8ba1\u7b97\u6700\u5927\u503c\u7684\u4e2a\u6570\n        max_val_count = machines.count(max_val)\n        \n        # 6. \u5982\u679c\u6700\u5927\u503c\u7684\u4e2a\u6570\u5927\u4e8e\u7b49\u4e8e\u6700\u5c0f\u503c\u7684\u4e2a\u6570\uff0c\u90a3\u4e48\u76f4\u63a5\u8fd4\u56de\u5dee\u503c\n        if max_val_count >= min_val_count:\n            return diff\n        \n        # 7. \u5982\u679c\u6700\u5927\u503c\u7684\u4e2a\u6570\u5c0f\u4e8e\u6700\u5c0f\u503c\u7684\u4e2a\u6570\uff0c\u90a3\u4e48\u8fd4\u56de\u5dee\u503c\u52a0\u4e0a\u6700\u5c0f\u503c\u7684\u4e2a\u6570\n        return diff + min_val_count"}, {"task_id": "super-washing-machines", "completion": "class Solution(object):\n    def findMinMoves(self, machines):\n        \"\"\"\n        :type machines: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5927\u503c\n        max_val = max(machines)\n        # 2. \u627e\u5230\u6700\u5c0f\u503c\n        min_val = min(machines)\n        # 3. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\n        diff = max_val - min_val\n        # 4. \u8ba1\u7b97\u6700\u5c0f\u503c\u7684\u4e2a\u6570\n        min_val_count = machines.count(min_val)\n        # 5. \u8ba1\u7b97\u6700\u5927\u503c\u7684\u4e2a\u6570\n        max_val_count = machines.count(max_val)\n        # 6. \u5982\u679c\u6700\u5927\u503c\u7684\u4e2a\u6570\u5927\u4e8e\u6700\u5c0f\u503c\u7684\u4e2a\u6570\uff0c\u5219\u8fd4\u56de-1\n        if max_val_count > min_val_count:\n            return -1\n        # 7. \u5982\u679c\u6700\u5927\u503c\u7684\u4e2a\u6570\u7b49\u4e8e\u6700\u5c0f\u503c\u7684\u4e2a\u6570\uff0c\u5219\u8fd4\u56de\u5dee\u503c\n        if max_val_count == min_val_count:\n            return diff\n        # 8. \u5982\u679c\u6700\u5927\u503c\u7684\u4e2a\u6570\u5c0f\u4e8e\u6700\u5c0f\u503c\u7684\u4e2a\u6570\uff0c\u5219\u8fd4\u56de\u5dee\u503c+1\n        return diff + 1"}, {"task_id": "super-washing-machines", "completion": "class Solution(object):\n    def findMinMoves(self, machines):\n        \"\"\"\n        :type machines: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5927\u503c\n        max_val = max(machines)\n        # 2. \u627e\u5230\u6700\u5c0f\u503c\n        min_val = min(machines)\n        # 3. \u627e\u5230\u6700\u5927\u503c\u7684\u4e0b\u6807\n        max_idx = machines.index(max_val)\n        # 4. \u627e\u5230\u6700\u5c0f\u503c\u7684\u4e0b\u6807\n        min_idx = machines.index(min_val)\n        # 5. \u8ba1\u7b97\u6700\u5927\u503c\u7684\u4e2a\u6570\n        max_count = sum(machines) - max_val\n        # 6. \u8ba1\u7b97\u6700\u5c0f\u503c\u7684\u4e2a\u6570\n        min_count = sum(machines) - min_val\n        # 7. \u8ba1\u7b97\u6700\u5927\u503c\u7684\u4e2a\u6570\u548c\u6700\u5c0f\u503c\u7684\u4e2a\u6570\u7684\u5dee\u503c\n        diff = max_count - min_count\n        # 8. \u5982\u679c\u5dee\u503c\u4e3a0\uff0c\u5219\u8fd4\u56de0\n        if diff == 0:\n            return 0\n        # 9. \u5982\u679c\u5dee\u503c\u4e3a\u6b63\uff0c\u5219\u8fd4\u56de\u6700\u5c0f\u503c\u7684\u4e0b\u6807\n        if diff > 0:\n            return min_idx + 1\n        # 10. \u5982\u679c\u5dee\u503c\u4e3a\u8d1f\uff0c\u5219\u8fd4\u56de\u6700\u5927\u503c\u7684\u4e0b\u6807\n        return max_idx + 1"}, {"task_id": "super-washing-machines", "completion": "class Solution(object):\n    def findMinMoves(self, machines):\n        \"\"\"\n        :type machines: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5927\u503c\n        max_val = max(machines)\n        # 2. \u627e\u5230\u6700\u5c0f\u503c\n        min_val = min(machines)\n        # 3. \u627e\u5230\u6700\u5927\u503c\u7684\u4e0b\u6807\n        max_idx = machines.index(max_val)\n        # 4. \u627e\u5230\u6700\u5c0f\u503c\u7684\u4e0b\u6807\n        min_idx = machines.index(min_val)\n        # 5. \u8ba1\u7b97\u6700\u5927\u503c\u7684\u6570\u91cf\n        max_cnt = max_val - min_val\n        # 6. \u8ba1\u7b97\u6700\u5c0f\u503c\u7684\u6570\u91cf\n        min_cnt = max_val - min_val\n        # 7. \u8ba1\u7b97\u6700\u5927\u503c\u7684\u6570\u91cf\u7684\u4e0b\u6807\n        max_idx_cnt = max_idx + max_cnt\n        # 8. \u8ba1\u7b97\u6700\u5c0f\u503c\u7684\u6570\u91cf\u7684\u4e0b\u6807\n        min_idx_cnt = min_idx + min_cnt\n        # 9. \u8ba1\u7b97\u6700\u5927\u503c\u7684\u6570\u91cf\u7684\u4e0b\u6807\u7684\u6570\u91cf\n        max_idx_cnt_cnt = max_idx_cnt + max_cnt\n        # 10. \u8ba1\u7b97\u6700\u5c0f\u503c\u7684\u6570\u91cf\u7684\u4e0b\u6807\u7684\u6570\u91cf\n        min_idx_cnt_cnt = min_idx_cnt + min_cnt\n        # 11. \u8ba1\u7b97\u6700\u5927\u503c\u7684\u6570\u91cf\u7684\u4e0b\u6807\u7684\u6570\u91cf\u7684\u6570\u91cf\n        max_idx_cnt_cnt_cnt = max_idx_cnt_cnt + max_cnt\n        # 12. \u8ba1\u7b97\u6700\u5c0f\u503c\u7684\u6570\u91cf\u7684\u4e0b\u6807\u7684\u6570\u91cf\u7684\u6570\u91cf\n        min_idx_cnt_cnt_cnt = min_idx_cnt_cnt + min_cnt\n        # 13. \u8ba1\u7b97\u6700\u5927\u503c\u7684\u6570\u91cf\u7684\u4e0b\u6807\u7684\u6570\u91cf\u7684\u6570\u91cf\u7684\u6570\u91cf\n        max_idx_cnt_cnt_cnt_cnt = max_idx_cnt_cnt_cnt + max_cnt\n        # 14. \u8ba1\u7b97\u6700\u5c0f\u503c\u7684\u6570\u91cf\u7684\u4e0b\u6807\u7684\u6570\u91cf\u7684\u6570\u91cf\u7684\u6570\u91cf\u7684\u6570\u91cf\n        min_idx_cnt_cnt_cnt_cnt = min_idx_cnt_cnt_cnt + min_cnt\n        # 15. \u8ba1\u7b97\u6700\u5927\u503c\u7684\u6570\u91cf\u7684\u4e0b\u6807\u7684\u6570\u91cf\u7684\u6570\u91cf\u7684\u6570\u91cf\u7684\u6570\u91cf\u7684\u6570\u91cf\n        max_idx_cnt_cnt_cnt_cnt_cnt = max_idx_cnt_cnt_cnt_cnt + max_cnt\n        # 16. \u8ba1\u7b97\u6700\u5c0f\u503c\u7684\u6570\u91cf\u7684\u4e0b\u6807\u7684\u6570\u91cf\u7684\u6570\u91cf\u7684\u6570\u91cf\u7684\u6570\u91cf\u7684\u6570\u91cf\u7684\u6570\u91cf\n        min_idx_cnt_cnt_cnt_cnt_cnt = min_idx_cnt_cnt_cnt_cnt + min_cnt\n        # 17. \u8ba1\u7b97\u6700\u5927\u503c\u7684\u6570\u91cf\u7684\u4e0b\u6807\u7684\u6570\u91cf\u7684\u6570\u91cf\u7684\u6570\u91cf\u7684\u6570\u91cf\u7684\u6570\u91cf\u7684\u6570\u91cf\u7684\u6570\u91cf\n        max_idx_cnt_cnt_cnt_cnt_cnt_cnt = max_idx_cnt_cnt_cnt_cnt_cnt + max_cnt\n        # 18. \u8ba1\u7b97\u6700\u5c0f\u503c\u7684\u6570\u91cf\u7684\u4e0b\u6807\u7684\u6570\u91cf\u7684\u6570\u91cf\u7684\u6570\u91cf\u7684\u6570\u91cf\u7684\u6570\u91cf\u7684\u6570\u91cf\u7684\u6570\u91cf\u7684\u6570\u91cf\n        min_idx_cnt_cnt_cnt_cnt_cnt_cnt = min_idx_cnt_cnt_cnt_cnt_cnt + min_cnt\n        # 19. \u8ba1\u7b97\u6700\u5927\u503c\u7684\u6570\u91cf\u7684\u4e0b\u6807\u7684\u6570\u91cf\u7684\u6570\u91cf\u7684\u6570\u91cf\u7684\u6570\u91cf\u7684\u6570\u91cf\u7684\u6570\u91cf\u7684\u6570\u91cf\u7684\u6570\u91cf\u7684\u6570\u91cf\n        max_idx_cnt_cnt_cnt_cnt_cnt_cnt_cnt = max_idx_cnt_cnt_cnt_cnt_cnt_cnt + max_cnt\n        # 20. \u8ba1\u7b97\u6700\u5c0f\u503c\u7684\u6570\u91cf\u7684\u4e0b\u6807\u7684\u6570\u91cf\u7684\u6570\u91cf\u7684\u6570\u91cf\u7684\u6570\u91cf\u7684\u6570\u91cf\u7684\u6570\u91cf\u7684\u6570\u91cf\u7684\u6570\u91cf\u7684\u6570\u91cf\u7684\u6570\u91cf\n        min_idx_cnt_cnt_cnt_cnt_cnt_cnt_cnt = min_idx_cnt_cnt_cnt_cnt_cnt_cnt + min_cnt\n        # 21. \u8ba1\u7b97\u6700\u5927\u503c\u7684\u6570\u91cf\u7684\u4e0b\u6807\u7684\u6570\u91cf\u7684\u6570\u91cf\u7684\u6570\u91cf\u7684\u6570\u91cf\u7684\u6570\u91cf\u7684\u6570\u91cf\u7684\u6570\u91cf"}, {"task_id": "super-washing-machines", "completion": "class Solution(object):\n    def findMinMoves(self, machines):\n        \"\"\"\n        :type machines: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5927\u503c\n        max_val = max(machines)\n        # 2. \u627e\u5230\u6700\u5c0f\u503c\n        min_val = min(machines)\n        # 3. \u627e\u5230\u6700\u5927\u503c\u7684\u7d22\u5f15\n        max_idx = machines.index(max_val)\n        # 4. \u627e\u5230\u6700\u5c0f\u503c\u7684\u7d22\u5f15\n        min_idx = machines.index(min_val)\n        # 5. \u8ba1\u7b97\u6700\u5927\u503c\u7684\u4e2a\u6570\n        max_count = sum(machines) - max_val\n        # 6. \u8ba1\u7b97\u6700\u5c0f\u503c\u7684\u4e2a\u6570\n        min_count = sum(machines) - min_val\n        # 7. \u8ba1\u7b97\u6700\u5927\u503c\u7684\u4e2a\u6570\u548c\u6700\u5c0f\u503c\u7684\u4e2a\u6570\u7684\u5dee\u503c\n        diff = max_count - min_count\n        # 8. \u5982\u679c\u5dee\u503c\u4e3a0\uff0c\u5219\u8fd4\u56de0\n        if diff == 0:\n            return 0\n        # 9. \u5982\u679c\u5dee\u503c\u4e0d\u4e3a0\uff0c\u5219\u8fd4\u56de\u6700\u5c0f\u503c\u7684\u7d22\u5f15\n        return min_idx"}], "kth-smallest-number-in-multiplication-table": [{"task_id": "kth-smallest-number-in-multiplication-table", "completion": "class Solution(object):\n    def findKthNumber(self, m, n, k):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u7b2ck\u5c0f\u7684\u6570\n        # 2. \u627e\u5230\u7b2ck\u5c0f\u7684\u6570\u7684\u4f4d\u7f6e\n        # 3. \u627e\u5230\u7b2ck\u5c0f\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        # 4. \u627e\u5230\u7b2ck\u5c0f\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\n        # 5. \u627e\u5230\u7b2ck\u5c0f\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        # 6. \u627e\u5230\u7b2ck\u5c0f\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\n        # 7. \u627e\u5230\u7b2ck\u5c0f\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        # 8. \u627e\u5230\u7b2ck\u5c0f\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\n        # 9. \u627e\u5230\u7b2ck\u5c0f\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        # 10. \u627e\u5230\u7b2ck\u5c0f\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\n        # 11. \u627e\u5230\u7b2ck\u5c0f\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        # 12. \u627e\u5230\u7b2ck\u5c0f\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\n        # 13. \u627e\u5230\u7b2ck\u5c0f\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        # 14. \u627e\u5230\u7b2ck\u5c0f\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\n        # 15. \u627e\u5230\u7b2ck\u5c0f\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        # 16. \u627e\u5230\u7b2ck\u5c0f\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\n        # 17. \u627e\u5230\u7b2ck\u5c0f\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        # 18. \u627e\u5230\u7b2ck\u5c0f\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\n        # 19. \u627e\u5230\u7b2ck\u5c0f\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        # 20. \u627e\u5230\u7b2ck\u5c0f\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\n        # 21. \u627e\u5230\u7b2ck\u5c0f\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        # 22. \u627e\u5230\u7b2ck\u5c0f\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\n        # 23. \u627e\u5230\u7b2ck\u5c0f\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        # 2"}, {"task_id": "kth-smallest-number-in-multiplication-table", "completion": "class Solution(object):\n    def findKthNumber(self, m, n, k):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        # 2. \u4e8c\u5206\u67e5\u627e\n        # 3. \u66b4\u529b\n        # 4. \u4e8c\u5206\u67e5\u627e\n        # 5. \u66b4\u529b\n        # 6. \u4e8c\u5206\u67e5\u627e\n        # 7. \u66b4\u529b\n        # 8. \u4e8c\u5206\u67e5\u627e\n        # 9. \u66b4\u529b\n        # 10. \u4e8c\u5206\u67e5\u627e\n        # 11. \u66b4\u529b\n        # 12. \u4e8c\u5206\u67e5\u627e\n        # 13. \u66b4\u529b\n        # 14. \u4e8c\u5206\u67e5\u627e\n        # 15. \u66b4\u529b\n        # 16. \u4e8c\u5206\u67e5\u627e\n        # 17. \u66b4\u529b\n        # 18. \u4e8c\u5206\u67e5\u627e\n        # 19. \u66b4\u529b\n        # 20. \u4e8c\u5206\u67e5\u627e\n        # 21. \u66b4\u529b\n        # 22. \u4e8c\u5206\u67e5\u627e\n        # 23. \u66b4\u529b\n        # 24. \u4e8c\u5206\u67e5\u627e\n        # 25. \u66b4\u529b\n        # 26. \u4e8c\u5206\u67e5\u627e\n        # 27. \u66b4\u529b\n        # 28. \u4e8c\u5206\u67e5\u627e\n        # 29. \u66b4\u529b\n        # 30. \u4e8c\u5206\u67e5\u627e\n        # 31. \u66b4\u529b\n        # 32. \u4e8c\u5206\u67e5\u627e\n        # 33. \u66b4\u529b\n        # 34. \u4e8c\u5206\u67e5\u627e\n        # 35. \u66b4\u529b\n        # 36. \u4e8c\u5206\u67e5\u627e\n        # 37. \u66b4\u529b\n        # 38. \u4e8c\u5206\u67e5\u627e\n        # 39. \u66b4\u529b\n        # 40. \u4e8c\u5206\u67e5\u627e\n        # 41. \u66b4\u529b\n        # 42. \u4e8c\u5206\u67e5\u627e\n        # 43. \u66b4\u529b\n        # 44. \u4e8c\u5206\u67e5\u627e\n        # 45. \u66b4\u529b\n        # 46. \u4e8c\u5206\u67e5\u627e\n        # 47. \u66b4\u529b\n        # 48. \u4e8c\u5206\u67e5\u627e\n        # 49. \u66b4\u529b\n        # 50. \u4e8c\u5206\u67e5\u627e\n        # 51. \u66b4\u529b\n        # 52. \u4e8c\u5206\u67e5\u627e\n        # 53. \u66b4\u529b\n        # 54. \u4e8c\u5206\u67e5\u627e\n        # 55. \u66b4\u529b\n        # 56. \u4e8c\u5206\u67e5\u627e\n        # 57. \u66b4\u529b\n        # 58. \u4e8c\u5206\u67e5\u627e\n        # 59. \u66b4\u529b\n        # 60. \u4e8c\u5206\u67e5\u627e\n        # 61. \u66b4\u529b\n        # 62. \u4e8c\u5206\u67e5\u627e\n        # 63. \u66b4\u529b\n        # 64. \u4e8c\u5206\u67e5\u627e\n        # 65. \u66b4\u529b\n        # 66. \u4e8c\u5206\u67e5\u627e\n        # 67. \u66b4\u529b\n        # 68. \u4e8c\u5206\u67e5\u627e\n        # 69. \u66b4\u529b\n        # 70. \u4e8c\u5206\u67e5\u627e\n        # 71. \u66b4\u529b\n        # 72. \u4e8c\u5206\u67e5\u627e\n        # 73. \u66b4\u529b\n        # 74. \u4e8c\u5206\u67e5\u627e\n        # 75. \u66b4\u529b\n        # 76. \u4e8c\u5206\u67e5\u627e\n        # 77. \u66b4\u529b\n        # 78. \u4e8c\u5206\u67e5\u627e\n        # 79. \u66b4\u529b\n        # 80."}, {"task_id": "kth-smallest-number-in-multiplication-table", "completion": "class Solution(object):\n    def findKthNumber(self, m, n, k):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        # 2. \u4e8c\u5206\u67e5\u627e\n        # 3. \u66b4\u529b\n        # 4. \u4e8c\u5206\u67e5\u627e\n        # 5. \u66b4\u529b\n        # 6. \u4e8c\u5206\u67e5\u627e\n        # 7. \u66b4\u529b\n        # 8. \u4e8c\u5206\u67e5\u627e\n        # 9. \u66b4\u529b\n        # 10. \u4e8c\u5206\u67e5\u627e\n        # 11. \u66b4\u529b\n        # 12. \u4e8c\u5206\u67e5\u627e\n        # 13. \u66b4\u529b\n        # 14. \u4e8c\u5206\u67e5\u627e\n        # 15. \u66b4\u529b\n        # 16. \u4e8c\u5206\u67e5\u627e\n        # 17. \u66b4\u529b\n        # 18. \u4e8c\u5206\u67e5\u627e\n        # 19. \u66b4\u529b\n        # 20. \u4e8c\u5206\u67e5\u627e\n        # 21. \u66b4\u529b\n        # 22. \u4e8c\u5206\u67e5\u627e\n        # 23. \u66b4\u529b\n        # 24. \u4e8c\u5206\u67e5\u627e\n        # 25. \u66b4\u529b\n        # 26. \u4e8c\u5206\u67e5\u627e\n        # 27. \u66b4\u529b\n        # 28. \u4e8c\u5206\u67e5\u627e\n        # 29. \u66b4\u529b\n        # 30. \u4e8c\u5206\u67e5\u627e\n        # 31. \u66b4\u529b\n        # 32. \u4e8c\u5206\u67e5\u627e\n        # 33. \u66b4\u529b\n        # 34. \u4e8c\u5206\u67e5\u627e\n        # 35. \u66b4\u529b\n        # 36. \u4e8c\u5206\u67e5\u627e\n        # 37. \u66b4\u529b\n        # 38. \u4e8c\u5206\u67e5\u627e\n        # 39. \u66b4\u529b\n        # 40. \u4e8c\u5206\u67e5\u627e\n        # 41. \u66b4\u529b\n        # 42. \u4e8c\u5206\u67e5\u627e\n        # 43. \u66b4\u529b\n        # 44. \u4e8c\u5206\u67e5\u627e\n        # 45. \u66b4\u529b\n        # 46. \u4e8c\u5206\u67e5\u627e\n        # 47. \u66b4\u529b\n        # 48. \u4e8c\u5206\u67e5\u627e\n        # 49. \u66b4\u529b\n        # 50. \u4e8c\u5206\u67e5\u627e\n        # 51. \u66b4\u529b\n        # 52. \u4e8c\u5206\u67e5\u627e\n        # 53. \u66b4\u529b\n        # 54. \u4e8c\u5206\u67e5\u627e\n        # 55. \u66b4\u529b\n        # 56. \u4e8c\u5206\u67e5\u627e\n        # 57. \u66b4\u529b\n        # 58. \u4e8c\u5206\u67e5\u627e\n        # 59. \u66b4\u529b\n        # 60. \u4e8c\u5206\u67e5\u627e\n        # 61. \u66b4\u529b\n        # 62. \u4e8c\u5206\u67e5\u627e\n        # 63. \u66b4\u529b\n        # 64. \u4e8c\u5206\u67e5\u627e\n        # 65. \u66b4\u529b\n        # 66. \u4e8c\u5206\u67e5\u627e\n        # 67. \u66b4\u529b\n        # 68. \u4e8c\u5206\u67e5\u627e\n        # 69. \u66b4\u529b\n        # 70. \u4e8c\u5206\u67e5\u627e\n        # 71. \u66b4\u529b\n        # 72. \u4e8c\u5206\u67e5\u627e\n        # 73. \u66b4\u529b\n        # 74. \u4e8c\u5206\u67e5\u627e\n        # 75. \u66b4\u529b\n        # 76. \u4e8c\u5206\u67e5\u627e\n        # 77. \u66b4\u529b\n        # 78. \u4e8c\u5206\u67e5\u627e\n        # 79. \u66b4\u529b\n        # 80."}, {"task_id": "kth-smallest-number-in-multiplication-table", "completion": "class Solution(object):\n    def findKthNumber(self, m, n, k):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        # 2. \u4e8c\u5206\u67e5\u627e\n        # 3. \u66b4\u529b\n        # 4. \u4e8c\u5206\u67e5\u627e\n        # 5. \u66b4\u529b\n        # 6. \u4e8c\u5206\u67e5\u627e\n        # 7. \u66b4\u529b\n        # 8. \u4e8c\u5206\u67e5\u627e\n        # 9. \u66b4\u529b\n        # 10. \u4e8c\u5206\u67e5\u627e\n        # 11. \u66b4\u529b\n        # 12. \u4e8c\u5206\u67e5\u627e\n        # 13. \u66b4\u529b\n        # 14. \u4e8c\u5206\u67e5\u627e\n        # 15. \u66b4\u529b\n        # 16. \u4e8c\u5206\u67e5\u627e\n        # 17. \u66b4\u529b\n        # 18. \u4e8c\u5206\u67e5\u627e\n        # 19. \u66b4\u529b\n        # 20. \u4e8c\u5206\u67e5\u627e\n        # 21. \u66b4\u529b\n        # 22. \u4e8c\u5206\u67e5\u627e\n        # 23. \u66b4\u529b\n        # 24. \u4e8c\u5206\u67e5\u627e\n        # 25. \u66b4\u529b\n        # 26. \u4e8c\u5206\u67e5\u627e\n        # 27. \u66b4\u529b\n        # 28. \u4e8c\u5206\u67e5\u627e\n        # 29. \u66b4\u529b\n        # 30. \u4e8c\u5206\u67e5\u627e\n        # 31. \u66b4\u529b\n        # 32. \u4e8c\u5206\u67e5\u627e\n        # 33. \u66b4\u529b\n        # 34. \u4e8c\u5206\u67e5\u627e\n        # 35. \u66b4\u529b\n        # 36. \u4e8c\u5206\u67e5\u627e\n        # 37. \u66b4\u529b\n        # 38. \u4e8c\u5206\u67e5\u627e\n        # 39. \u66b4\u529b\n        # 40. \u4e8c\u5206\u67e5\u627e\n        # 41. \u66b4\u529b\n        # 42. \u4e8c\u5206\u67e5\u627e\n        # 43. \u66b4\u529b\n        # 44. \u4e8c\u5206\u67e5\u627e\n        # 45. \u66b4\u529b\n        # 46. \u4e8c\u5206\u67e5\u627e\n        # 47. \u66b4\u529b\n        # 48. \u4e8c\u5206\u67e5\u627e\n        # 49. \u66b4\u529b\n        # 50. \u4e8c\u5206\u67e5\u627e\n        # 51. \u66b4\u529b\n        # 52. \u4e8c\u5206\u67e5\u627e\n        # 53. \u66b4\u529b\n        # 54. \u4e8c\u5206\u67e5\u627e\n        # 55. \u66b4\u529b\n        # 56. \u4e8c\u5206\u67e5\u627e\n        # 57. \u66b4\u529b\n        # 58. \u4e8c\u5206\u67e5\u627e\n        # 59. \u66b4\u529b\n        # 60. \u4e8c\u5206\u67e5\u627e\n        # 61. \u66b4\u529b\n        # 62. \u4e8c\u5206\u67e5\u627e\n        # 63. \u66b4\u529b\n        # 64. \u4e8c\u5206\u67e5\u627e\n        # 65. \u66b4\u529b\n        # 66. \u4e8c\u5206\u67e5\u627e\n        # 67. \u66b4\u529b\n        # 68. \u4e8c\u5206\u67e5\u627e\n        # 69. \u66b4\u529b\n        # 70. \u4e8c\u5206\u67e5\u627e\n        # 71. \u66b4\u529b\n        # 72. \u4e8c\u5206\u67e5\u627e\n        # 73. \u66b4\u529b\n        # 74. \u4e8c\u5206\u67e5\u627e\n        # 75. \u66b4\u529b\n        # 76. \u4e8c\u5206\u67e5\u627e\n        # 77. \u66b4\u529b\n        # 78. \u4e8c\u5206\u67e5\u627e\n        # 79. \u66b4\u529b\n        # 80."}, {"task_id": "kth-smallest-number-in-multiplication-table", "completion": "class Solution(object):\n    def findKthNumber(self, m, n, k):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u7b2ck\u5c0f\u7684\u6570\n        # 2. \u627e\u5230\u7b2ck\u5c0f\u7684\u6570\u7684\u4e0b\u6807\n        # 3. \u627e\u5230\u7b2ck\u5c0f\u7684\u6570\u7684\u4e0b\u6807\u7684\u4e0b\u6807\n        # 4. \u627e\u5230\u7b2ck\u5c0f\u7684\u6570\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\n        # 5. \u627e\u5230\u7b2ck\u5c0f\u7684\u6570\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\n        # 6. \u627e\u5230\u7b2ck\u5c0f\u7684\u6570\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\n        # 7. \u627e\u5230\u7b2ck\u5c0f\u7684\u6570\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\n        # 8. \u627e\u5230\u7b2ck\u5c0f\u7684\u6570\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\n        # 9. \u627e\u5230\u7b2ck\u5c0f\u7684\u6570\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\n        # 10. \u627e\u5230\u7b2ck\u5c0f\u7684\u6570\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\n        # 11. \u627e\u5230\u7b2ck\u5c0f\u7684\u6570\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\n        # 12. \u627e\u5230\u7b2ck\u5c0f\u7684\u6570\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\n        # 13. \u627e\u5230\u7b2ck\u5c0f\u7684\u6570\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\n        # 14. \u627e\u5230\u7b2ck\u5c0f\u7684\u6570\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\n        # 15. \u627e\u5230\u7b2ck\u5c0f\u7684\u6570\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\n        # 16. \u627e\u5230\u7b2ck\u5c0f\u7684\u6570\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\n        # 17. \u627e\u5230\u7b2ck\u5c0f\u7684\u6570\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\n        # 18. \u627e\u5230\u7b2ck\u5c0f\u7684\u6570\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\n        # 19. \u627e\u5230\u7b2ck\u5c0f\u7684\u6570\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\n        # 20. \u627e\u5230\u7b2ck\u5c0f\u7684\u6570\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\n        # 21. \u627e\u5230\u7b2ck\u5c0f\u7684\u6570\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\n        # 22. \u627e\u5230\u7b2ck\u5c0f\u7684\u6570\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807"}], "convert-sorted-list-to-binary-search-tree": [{"task_id": "convert-sorted-list-to-binary-search-tree", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedListToBST(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :rtype: Optional[TreeNode]\n        \"\"\"\n        \n        def sortedListToBSTHelper(head, tail):\n            if head == tail:\n                return None\n            mid = head\n            while mid.next != tail:\n                mid = mid.next\n            mid.next = None\n            root = TreeNode(mid.val)\n            root.left = sortedListToBSTHelper(head, mid)\n            root.right = sortedListToBSTHelper(mid.next, tail)\n            return root\n        \n        if head is None:\n            return None\n        return sortedListToBSTHelper(head, None)"}, {"task_id": "convert-sorted-list-to-binary-search-tree", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedListToBST(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :rtype: Optional[TreeNode]\n        \"\"\"\n        \n        def sortedListToBSTHelper(head, tail):\n            if head == tail:\n                return None\n            mid = head\n            while mid.next != tail:\n                mid = mid.next\n            mid.next = None\n            root = TreeNode(mid.val)\n            root.left = sortedListToBSTHelper(head, mid)\n            root.right = sortedListToBSTHelper(mid.next, tail)\n            return root\n        \n        if not head:\n            return None\n        return sortedListToBSTHelper(head, None)"}, {"task_id": "convert-sorted-list-to-binary-search-tree", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedListToBST(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :rtype: Optional[TreeNode]\n        \"\"\"\n        \n        def sortedListToBSTHelper(head, tail):\n            if head == tail:\n                return None\n            mid = head\n            while mid.next != tail:\n                mid = mid.next\n            mid.next = None\n            root = TreeNode(mid.val)\n            root.left = sortedListToBSTHelper(head, mid)\n            root.right = sortedListToBSTHelper(mid.next, tail)\n            return root\n        \n        if not head:\n            return None\n        return sortedListToBSTHelper(head, None)"}, {"task_id": "convert-sorted-list-to-binary-search-tree", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedListToBST(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :rtype: Optional[TreeNode]\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        if not head.next:\n            return TreeNode(head.val)\n        \n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        root = TreeNode(slow.val)\n        root.left = self.sortedListToBST(head)\n        root.right = self.sortedListToBST(slow.next)\n        \n        return root"}, {"task_id": "convert-sorted-list-to-binary-search-tree", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedListToBST(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :rtype: Optional[TreeNode]\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        if not head.next:\n            return TreeNode(head.val)\n        \n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        mid = slow.next\n        slow.next = None\n        \n        root = TreeNode(mid.val)\n        root.left = self.sortedListToBST(head)\n        root.right = self.sortedListToBST(mid.next)\n        \n        return root"}], "merge-two-sorted-lists": [{"task_id": "merge-two-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: Optional[ListNode]\n        :type list2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        \n        # 1. Create a new list\n        # 2. Iterate through the lists\n        # 3. Compare the values of the nodes\n        # 4. If the value of list1 is less than list2, append it to the new list\n        # 5. If the value of list1 is greater than list2, append it to the new list\n        # 6. If the value of list1 is equal to list2, append it to the new list\n        # 7. If the value of list1 is None, append the value of list2 to the new list\n        # 8. If the value of list2 is None, append the value of list1 to the new list\n        # 9. If both lists are None, return None\n        # 10. Return the new list\n        \n        # Create a new list\n        new_list = ListNode(0)\n        # Iterate through the lists\n        current_node = new_list\n        while list1 is not None and list2 is not None:\n            # Compare the values of the nodes\n            if list1.val < list2.val:\n                # Append the value of list1 to the new list\n                current_node.next = list1\n                list1 = list1.next\n            elif list1.val > list2.val:\n                # Append the value of list2 to the new list\n                current_node.next = list2\n                list2 = list2.next\n            else:\n                # Append the value of list1 to the new list\n                current_node.next = list1\n                list1 = list1.next\n                list2 = list2.next\n            # Move to the next node\n            current_node = current_node.next\n        # If the value of list1 is None, append the value of list2 to the new list\n        if list1 is None:\n            current_node.next = list2\n        # If the value of list2 is None, append the value of list1 to the new list\n        elif list2 is None:\n            current_node.next = list1\n        # If both lists are None, return None\n        else:\n            return None\n        # Return the new list\n        return new_list.next"}, {"task_id": "merge-two-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: Optional[ListNode]\n        :type list2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        \n        if list1 is None:\n            return list2\n        if list2 is None:\n            return list1\n        \n        head = ListNode(0)\n        tail = head\n        \n        while list1 is not None and list2 is not None:\n            if list1.val < list2.val:\n                tail.next = list1\n                list1 = list1.next\n            else:\n                tail.next = list2\n                list2 = list2.next\n            tail = tail.next\n        \n        if list1 is None:\n            tail.next = list2\n        else:\n            tail.next = list1\n        \n        return head.next"}, {"task_id": "merge-two-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: Optional[ListNode]\n        :type list2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        \n        if list1 is None:\n            return list2\n        if list2 is None:\n            return list1\n        \n        head = ListNode(0)\n        tail = head\n        \n        while list1 is not None and list2 is not None:\n            if list1.val < list2.val:\n                tail.next = list1\n                list1 = list1.next\n            else:\n                tail.next = list2\n                list2 = list2.next\n            tail = tail.next\n        \n        if list1 is None:\n            tail.next = list2\n        else:\n            tail.next = list1\n        \n        return head.next"}, {"task_id": "merge-two-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: Optional[ListNode]\n        :type list2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        \n        if list1 is None:\n            return list2\n        if list2 is None:\n            return list1\n        \n        if list1.val < list2.val:\n            list1.next = self.mergeTwoLists(list1.next, list2)\n            return list1\n        else:\n            list2.next = self.mergeTwoLists(list1, list2.next)\n            return list2"}, {"task_id": "merge-two-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: Optional[ListNode]\n        :type list2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        \n        if list1 is None:\n            return list2\n        if list2 is None:\n            return list1\n        \n        if list1.val < list2.val:\n            list1.next = self.mergeTwoLists(list1.next, list2)\n            return list1\n        else:\n            list2.next = self.mergeTwoLists(list1, list2.next)\n            return list2"}], "maximal-rectangle": [{"task_id": "maximal-rectangle", "completion": "class Solution(object):\n    def maximalRectangle(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        max_area = 0\n        heights = [0] * (n + 1)\n        \n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == '1':\n                    heights[j] += 1\n                else:\n                    heights[j] = 0\n            max_area = max(max_area, self.largestRectangleArea(heights))\n        return max_area\n    \n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        stack = []\n        max_area = 0\n        for i in range(len(heights)):\n            while stack and heights[stack[-1]] > heights[i]:\n                h = heights[stack.pop()]\n                w = i if not stack else i - stack[-1] - 1\n                max_area = max(max_area, h * w)\n            stack.append(i)\n        while stack:\n            h = heights[stack.pop()]\n            w = len(heights) if not stack else len(heights) - stack[-1] - 1\n            max_area = max(max_area, h * w)\n        return max_area"}, {"task_id": "maximal-rectangle", "completion": "class Solution(object):\n    def maximalRectangle(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        max_area = 0\n        heights = [0] * (n + 1)\n        \n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == '1':\n                    heights[j] += 1\n                else:\n                    heights[j] = 0\n            max_area = max(max_area, self.largestRectangleArea(heights))\n        return max_area\n    \n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        stack = []\n        max_area = 0\n        for i in range(len(heights)):\n            while stack and heights[stack[-1]] > heights[i]:\n                h = heights[stack.pop()]\n                w = i if not stack else i - stack[-1] - 1\n                max_area = max(max_area, h * w)\n            stack.append(i)\n        while stack:\n            h = heights[stack.pop()]\n            w = len(heights) if not stack else len(heights) - stack[-1] - 1\n            max_area = max(max_area, h * w)\n        return max_area"}, {"task_id": "maximal-rectangle", "completion": "class Solution(object):\n    def maximalRectangle(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        max_area = 0\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == '0':\n                    matrix[i][j] = '.'\n                else:\n                    matrix[i][j] = '1'\n                    \n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == '.':\n                    continue\n                \n                left = j\n                while left > 0 and matrix[i][left-1] == '1':\n                    left -= 1\n                \n                right = j\n                while right < n-1 and matrix[i][right+1] == '1':\n                    right += 1\n                \n                top = i\n                while top > 0 and matrix[top-1][j] == '1':\n                    top -= 1\n                \n                bottom = i\n                while bottom < m-1 and matrix[bottom+1][j] == '1':\n                    bottom += 1\n                \n                max_area = max(max_area, (right-left+1)*(bottom-top+1))\n                \n        return max_area"}, {"task_id": "maximal-rectangle", "completion": "class Solution(object):\n    def maximalRectangle(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        max_area = 0\n        heights = [0] * (n + 1)\n        \n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == '1':\n                    heights[j] += 1\n                else:\n                    heights[j] = 0\n                \n            max_area = max(max_area, self.largestRectangleArea(heights))\n        \n        return max_area\n    \n    def largestRectangleArea(self, heights):\n        stack = []\n        max_area = 0\n        heights.append(0)\n        \n        for i in range(len(heights)):\n            while stack and heights[i] < heights[stack[-1]]:\n                h = heights[stack.pop()]\n                w = i - stack[-1] - 1 if stack else i\n                max_area = max(max_area, h * w)\n            stack.append(i)\n        \n        while stack:\n            h = heights[stack.pop()]\n            w = i - stack[-1] - 1 if stack else i\n            max_area = max(max_area, h * w)\n        \n        return max_area"}, {"task_id": "maximal-rectangle", "completion": "class Solution(object):\n    def maximalRectangle(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        max_area = 0\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == '0':\n                    matrix[i][j] = 0\n                else:\n                    matrix[i][j] = 1\n                    \n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == 0:\n                    continue\n                \n                left = j\n                while left > 0 and matrix[i][left-1] == 1:\n                    left -= 1\n                \n                right = j\n                while right < n-1 and matrix[i][right+1] == 1:\n                    right += 1\n                \n                top = i\n                while top > 0 and matrix[top-1][j] == 1:\n                    top -= 1\n                \n                bottom = i\n                while bottom < m-1 and matrix[bottom+1][j] == 1:\n                    bottom += 1\n                \n                max_area = max(max_area, (right-left+1)*(bottom-top+1))\n                \n        return max_area"}], "subsets": [{"task_id": "subsets", "completion": "class Solution(object):\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u9012\u5f52\n        # 2. \u56de\u6eaf\n        # 3. \u526a\u679d\n        # 4. \u5907\u5fd8\u5f55\n        # 5. \u52a8\u6001\u89c4\u5212\n        # 6. \u4f4d\u8fd0\u7b97\n        # 7. \u6392\u5e8f\n        # 8. \u6ed1\u52a8\u7a97\u53e3\n        # 9. \u6811\u72b6\u6570\u7ec4\n        # 10. \u524d\u7f00\u548c\n        # 11. \u54c8\u5e0c\u8868\n        # 12. \u54c8\u5e0c\u51fd\u6570\n        # 13. \u6876\u6392\u5e8f\n        # 14. \u6392\u5e8f+\u4e8c\u5206\u67e5\u627e\n        # 15. \u6392\u5e8f+\u4e8c\u5206\u67e5\u627e+\u54c8\u5e0c\u8868\n        # 16. \u6392\u5e8f+\u4e8c\u5206\u67e5\u627e+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u51fd\u6570\n        # 17. \u6392\u5e8f+\u4e8c\u5206\u67e5\u627e+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u51fd\u6570+\u6ed1\u52a8\u7a97\u53e3\n        # 18. \u6392\u5e8f+\u4e8c\u5206\u67e5\u627e+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u51fd\u6570+\u6ed1\u52a8\u7a97\u53e3+\u5907\u5fd8\u5f55\n        # 19. \u6392\u5e8f+\u4e8c\u5206\u67e5\u627e+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u51fd\u6570+\u6ed1\u52a8\u7a97\u53e3+\u5907\u5fd8\u5f55+\u4f4d\u8fd0\u7b97\n        # 20. \u6392\u5e8f+\u4e8c\u5206\u67e5\u627e+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u51fd\u6570+\u6ed1\u52a8\u7a97\u53e3+\u5907\u5fd8\u5f55+\u4f4d\u8fd0\u7b97+\u5907\u5fd8\u5f55\n        # 21. \u6392\u5e8f+\u4e8c\u5206\u67e5\u627e+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u51fd\u6570+\u6ed1\u52a8\u7a97\u53e3+\u5907\u5fd8\u5f55+\u4f4d\u8fd0\u7b97+\u5907\u5fd8\u5f55+\u4f4d\u8fd0\u7b97\n        # 22. \u6392\u5e8f+\u4e8c\u5206\u67e5\u627e+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u51fd\u6570+\u6ed1\u52a8\u7a97\u53e3+\u5907\u5fd8\u5f55+\u4f4d\u8fd0\u7b97+\u5907\u5fd8\u5f55+\u4f4d\u8fd0\u7b97+\u5907\u5fd8\u5f55\n        # 23. \u6392\u5e8f+\u4e8c\u5206\u67e5\u627e+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u51fd\u6570+\u6ed1\u52a8\u7a97\u53e3+\u5907\u5fd8\u5f55+\u4f4d\u8fd0\u7b97+\u5907\u5fd8\u5f55+\u4f4d\u8fd0\u7b97+\u5907\u5fd8\u5f55+\u4f4d\u8fd0\u7b97\n        # 24. \u6392\u5e8f+\u4e8c\u5206\u67e5\u627e+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u51fd\u6570+\u6ed1\u52a8\u7a97\u53e3+\u5907\u5fd8\u5f55+\u4f4d\u8fd0\u7b97+\u5907\u5fd8\u5f55+\u4f4d\u8fd0\u7b97+\u5907\u5fd8\u5f55+\u4f4d\u8fd0\u7b97+\u5907\u5fd8\u5f55\n        # 25. \u6392\u5e8f+\u4e8c\u5206\u67e5\u627e+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u51fd\u6570+\u6ed1\u52a8\u7a97\u53e3+\u5907\u5fd8\u5f55+\u4f4d\u8fd0\u7b97+\u5907\u5fd8\u5f55+\u4f4d\u8fd0\u7b97+\u5907\u5fd8\u5f55+\u4f4d\u8fd0\u7b97+\u5907\u5fd8\u5f55+\u4f4d\u8fd0\u7b97\n        # 26. \u6392\u5e8f+\u4e8c\u5206\u67e5\u627e+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u51fd\u6570+\u6ed1\u52a8\u7a97\u53e3+\u5907\u5fd8\u5f55+\u4f4d\u8fd0\u7b97+\u5907\u5fd8\u5f55+\u4f4d\u8fd0\u7b97+\u5907\u5fd8\u5f55+\u4f4d\u8fd0\u7b97+\u5907\u5fd8\u5f55+\u4f4d\u8fd0\u7b97+\u5907\u5fd8\u5f55\n        # 27. \u6392\u5e8f+\u4e8c\u5206\u67e5\u627e+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u51fd\u6570+\u6ed1\u52a8\u7a97\u53e3+\u5907\u5fd8\u5f55+\u4f4d\u8fd0\u7b97+\u5907\u5fd8\u5f55+\u4f4d\u8fd0\u7b97+\u5907\u5fd8\u5f55+\u4f4d\u8fd0\u7b97+\u5907\u5fd8\u5f55+\u4f4d\u8fd0\u7b97"}, {"task_id": "subsets", "completion": "class Solution(object):\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        nums.sort()\n        \n        # 2. \u9012\u5f52\n        res = []\n        self.helper(nums, 0, [], res)\n        return res\n    \n    def helper(self, nums, start, path, res):\n        res.append(path[:])\n        for i in range(start, len(nums)):\n            path.append(nums[i])\n            self.helper(nums, i + 1, path, res)\n            path.pop()"}, {"task_id": "subsets", "completion": "class Solution(object):\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u9012\u5f52\n        # 2. \u56de\u6eaf\n        # 3. \u526a\u679d\n        # 4. \u4f4d\u8fd0\u7b97\n        # 5. \u54c8\u5e0c\u8868\n        # 6. \u6392\u5e8f\n        # 7. \u9012\u5f52\n        # 8. \u9012\u5f52\n        # 9. \u9012\u5f52\n        # 10. \u9012\u5f52\n        # 11. \u9012\u5f52\n        # 12. \u9012\u5f52\n        # 13. \u9012\u5f52\n        # 14. \u9012\u5f52\n        # 15. \u9012\u5f52\n        # 16. \u9012\u5f52\n        # 17. \u9012\u5f52\n        # 18. \u9012\u5f52\n        # 19. \u9012\u5f52\n        # 20. \u9012\u5f52\n        # 21. \u9012\u5f52\n        # 22. \u9012\u5f52\n        # 23. \u9012\u5f52\n        # 24. \u9012\u5f52\n        # 25. \u9012\u5f52\n        # 26. \u9012\u5f52\n        # 27. \u9012\u5f52\n        # 28. \u9012\u5f52\n        # 29. \u9012\u5f52\n        # 30. \u9012\u5f52\n        # 31. \u9012\u5f52\n        # 32. \u9012\u5f52\n        # 33. \u9012\u5f52\n        # 34. \u9012\u5f52\n        # 35. \u9012\u5f52\n        # 36. \u9012\u5f52\n        # 37. \u9012\u5f52\n        # 38. \u9012\u5f52\n        # 39. \u9012\u5f52\n        # 40. \u9012\u5f52\n        # 41. \u9012\u5f52\n        # 42. \u9012\u5f52\n        # 43. \u9012\u5f52\n        # 44. \u9012\u5f52\n        # 45. \u9012\u5f52\n        # 46. \u9012\u5f52\n        # 47. \u9012\u5f52\n        # 48. \u9012\u5f52\n        # 49. \u9012\u5f52\n        # 50. \u9012\u5f52\n        # 51. \u9012\u5f52\n        # 52. \u9012\u5f52\n        # 53. \u9012\u5f52\n        # 54. \u9012\u5f52\n        # 55. \u9012\u5f52\n        # 56. \u9012\u5f52\n        # 57. \u9012\u5f52\n        # 58. \u9012\u5f52\n        # 59. \u9012\u5f52\n        # 60. \u9012\u5f52\n        # 61. \u9012\u5f52\n        # 62. \u9012\u5f52\n        # 63. \u9012\u5f52\n        # 64. \u9012\u5f52\n        # 65. \u9012\u5f52\n        # 66. \u9012\u5f52\n        # 67. \u9012\u5f52\n        # 68. \u9012\u5f52\n        # 69. \u9012\u5f52\n        # 70. \u9012\u5f52\n        # 71. \u9012\u5f52\n        # 72. \u9012\u5f52\n        # 73. \u9012\u5f52\n        # 74. \u9012\u5f52\n        # 75"}, {"task_id": "subsets", "completion": "class Solution(object):\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        nums.sort()\n        \n        # 2. \u9012\u5f52\n        res = []\n        self.dfs(nums, 0, [], res)\n        return res\n    \n    def dfs(self, nums, start, path, res):\n        res.append(path[:])\n        for i in range(start, len(nums)):\n            path.append(nums[i])\n            self.dfs(nums, i + 1, path, res)\n            path.pop()"}, {"task_id": "subsets", "completion": "class Solution(object):\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        nums.sort()\n        \n        # 2. \u9012\u5f52\n        res = []\n        self.dfs(nums, 0, [], res)\n        return res\n    \n    def dfs(self, nums, start, path, res):\n        res.append(path[:])\n        for i in range(start, len(nums)):\n            path.append(nums[i])\n            self.dfs(nums, i + 1, path, res)\n            path.pop()"}], "find-minimum-in-rotated-sorted-array-ii": [{"task_id": "find-minimum-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5c0f\u503c\n        # 2. \u627e\u5230\u6700\u5927\u503c\n        # 3. \u627e\u5230\u6700\u5c0f\u503c\n        # 4. \u627e\u5230\u6700\u5927\u503c\n        # 5. \u627e\u5230\u6700\u5c0f\u503c\n        # 6. \u627e\u5230\u6700\u5927\u503c\n        # 7. \u627e\u5230\u6700\u5c0f\u503c\n        # 8. \u627e\u5230\u6700\u5927\u503c\n        # 9. \u627e\u5230\u6700\u5c0f\u503c\n        # 10. \u627e\u5230\u6700\u5927\u503c\n        # 11. \u627e\u5230\u6700\u5c0f\u503c\n        # 12. \u627e\u5230\u6700\u5927\u503c\n        # 13. \u627e\u5230\u6700\u5c0f\u503c\n        # 14. \u627e\u5230\u6700\u5927\u503c\n        # 15. \u627e\u5230\u6700\u5c0f\u503c\n        # 16. \u627e\u5230\u6700\u5927\u503c\n        # 17. \u627e\u5230\u6700\u5c0f\u503c\n        # 18. \u627e\u5230\u6700\u5927\u503c\n        # 19. \u627e\u5230\u6700\u5c0f\u503c\n        # 20. \u627e\u5230\u6700\u5927\u503c\n        # 21. \u627e\u5230\u6700\u5c0f\u503c\n        # 22. \u627e\u5230\u6700\u5927\u503c\n        # 23. \u627e\u5230\u6700\u5c0f\u503c\n        # 24. \u627e\u5230\u6700\u5927\u503c\n        # 25. \u627e\u5230\u6700\u5c0f\u503c\n        # 26. \u627e\u5230\u6700\u5927\u503c\n        # 27. \u627e\u5230\u6700\u5c0f\u503c\n        # 28. \u627e\u5230\u6700\u5927\u503c\n        # 29. \u627e\u5230\u6700\u5c0f\u503c\n        # 30. \u627e\u5230\u6700\u5927\u503c\n        # 31. \u627e\u5230\u6700\u5c0f\u503c\n        # 32. \u627e\u5230\u6700\u5927\u503c\n        # 33. \u627e\u5230\u6700\u5c0f\u503c\n        # 34. \u627e\u5230\u6700\u5927\u503c\n        # 35. \u627e\u5230\u6700\u5c0f\u503c\n        # 36. \u627e\u5230\u6700\u5927\u503c\n        # 37. \u627e\u5230\u6700\u5c0f\u503c\n        # 38. \u627e\u5230\u6700\u5927\u503c\n        # 39. \u627e\u5230\u6700\u5c0f\u503c\n        # 40. \u627e\u5230\u6700\u5927\u503c\n        # 41. \u627e\u5230\u6700\u5c0f\u503c\n        # 42. \u627e\u5230\u6700\u5927\u503c\n        # 43. \u627e\u5230\u6700\u5c0f\u503c\n        # 44. \u627e\u5230\u6700\u5927\u503c\n        # 45. \u627e\u5230\u6700\u5c0f\u503c\n        # 46. \u627e\u5230\u6700\u5927\u503c\n        # 47. \u627e\u5230\u6700\u5c0f\u503c\n        # 48. \u627e\u5230\u6700\u5927\u503c\n        # 49. \u627e\u5230\u6700\u5c0f\u503c\n        # 50. \u627e\u5230\u6700\u5927\u503c\n        # 51. \u627e\u5230\u6700\u5c0f\u503c\n        # 52. \u627e\u5230\u6700\u5927\u503c\n        # 53. \u627e\u5230\u6700\u5c0f\u503c\n        # 54. \u627e\u5230\u6700\u5927\u503c\n        # 55. \u627e\u5230\u6700\u5c0f\u503c\n        # 56. \u627e\u5230\u6700\u5927\u503c\n        # 57. \u627e\u5230\u6700\u5c0f\u503c\n        # 58. \u627e\u5230\u6700\u5927\u503c\n        # 59. \u627e\u5230\u6700\u5c0f\u503c\n        # 60. \u627e\u5230\u6700\u5927\u503c\n        # 61. \u627e\u5230\u6700\u5c0f\u503c\n        # 62. \u627e\u5230\u6700\u5927\u503c\n        # 63. \u627e\u5230\u6700\u5c0f\u503c\n        # 64. \u627e\u5230\u6700\u5927\u503c\n        # 65. \u627e\u5230\u6700\u5c0f\u503c\n        # 66. \u627e\u5230\u6700\u5927\u503c\n        # 67. \u627e\u5230\u6700\u5c0f\u503c\n        # 68. \u627e\u5230\u6700\u5927\u503c\n        # 69. \u627e\u5230\u6700\u5c0f"}, {"task_id": "find-minimum-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5c0f\u503c\n        # 2. \u627e\u5230\u6700\u5927\u503c\n        # 3. \u627e\u5230\u6700\u5c0f\u503c\n        # 4. \u627e\u5230\u6700\u5927\u503c\n        # 5. \u627e\u5230\u6700\u5c0f\u503c\n        # 6. \u627e\u5230\u6700\u5927\u503c\n        # 7. \u627e\u5230\u6700\u5c0f\u503c\n        # 8. \u627e\u5230\u6700\u5927\u503c\n        # 9. \u627e\u5230\u6700\u5c0f\u503c\n        # 10. \u627e\u5230\u6700\u5927\u503c\n        # 11. \u627e\u5230\u6700\u5c0f\u503c\n        # 12. \u627e\u5230\u6700\u5927\u503c\n        # 13. \u627e\u5230\u6700\u5c0f\u503c\n        # 14. \u627e\u5230\u6700\u5927\u503c\n        # 15. \u627e\u5230\u6700\u5c0f\u503c\n        # 16. \u627e\u5230\u6700\u5927\u503c\n        # 17. \u627e\u5230\u6700\u5c0f\u503c\n        # 18. \u627e\u5230\u6700\u5927\u503c\n        # 19. \u627e\u5230\u6700\u5c0f\u503c\n        # 20. \u627e\u5230\u6700\u5927\u503c\n        # 21. \u627e\u5230\u6700\u5c0f\u503c\n        # 22. \u627e\u5230\u6700\u5927\u503c\n        # 23. \u627e\u5230\u6700\u5c0f\u503c\n        # 24. \u627e\u5230\u6700\u5927\u503c\n        # 25. \u627e\u5230\u6700\u5c0f\u503c\n        # 26. \u627e\u5230\u6700\u5927\u503c\n        # 27. \u627e\u5230\u6700\u5c0f\u503c\n        # 28. \u627e\u5230\u6700\u5927\u503c\n        # 29. \u627e\u5230\u6700\u5c0f\u503c\n        # 30. \u627e\u5230\u6700\u5927\u503c\n        # 31. \u627e\u5230\u6700\u5c0f\u503c\n        # 32. \u627e\u5230\u6700\u5927\u503c\n        # 33. \u627e\u5230\u6700\u5c0f\u503c\n        # 34. \u627e\u5230\u6700\u5927\u503c\n        # 35. \u627e\u5230\u6700\u5c0f\u503c\n        # 36. \u627e\u5230\u6700\u5927\u503c\n        # 37. \u627e\u5230\u6700\u5c0f\u503c\n        # 38. \u627e\u5230\u6700\u5927\u503c\n        # 39. \u627e\u5230\u6700\u5c0f\u503c\n        # 40. \u627e\u5230\u6700\u5927\u503c\n        # 41. \u627e\u5230\u6700\u5c0f\u503c\n        # 42. \u627e\u5230\u6700\u5927\u503c\n        # 43. \u627e\u5230\u6700\u5c0f\u503c\n        # 44. \u627e\u5230\u6700\u5927\u503c\n        # 45. \u627e\u5230\u6700\u5c0f\u503c\n        # 46. \u627e\u5230\u6700\u5927\u503c\n        # 47. \u627e\u5230\u6700\u5c0f\u503c\n        # 48. \u627e\u5230\u6700\u5927\u503c\n        # 49. \u627e\u5230\u6700\u5c0f\u503c\n        # 50. \u627e\u5230\u6700\u5927\u503c\n        # 51. \u627e\u5230\u6700\u5c0f\u503c\n        # 52. \u627e\u5230\u6700\u5927\u503c\n        # 53. \u627e\u5230\u6700\u5c0f\u503c\n        # 54. \u627e\u5230\u6700\u5927\u503c\n        # 55. \u627e\u5230\u6700\u5c0f\u503c\n        # 56. \u627e\u5230\u6700\u5927\u503c\n        # 57. \u627e\u5230\u6700\u5c0f\u503c\n        # 58. \u627e\u5230\u6700\u5927\u503c\n        # 59. \u627e\u5230\u6700\u5c0f\u503c\n        # 60. \u627e\u5230\u6700\u5927\u503c\n        # 61. \u627e\u5230\u6700\u5c0f\u503c\n        # 62. \u627e\u5230\u6700\u5927\u503c\n        # 63. \u627e\u5230\u6700\u5c0f\u503c\n        # 64. \u627e\u5230\u6700\u5927\u503c\n        # 65. \u627e\u5230\u6700\u5c0f\u503c\n        # 66. \u627e\u5230\u6700\u5927\u503c\n        # 67. \u627e\u5230\u6700\u5c0f\u503c\n        # 68. \u627e\u5230\u6700\u5927\u503c\n        # 69. \u627e\u5230\u6700\u5c0f"}, {"task_id": "find-minimum-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5c0f\u503c\n        # 2. \u627e\u5230\u6700\u5927\u503c\n        # 3. \u627e\u5230\u6700\u5c0f\u503c\n        # 4. \u627e\u5230\u6700\u5927\u503c\n        # 5. \u627e\u5230\u6700\u5c0f\u503c\n        # 6. \u627e\u5230\u6700\u5927\u503c\n        # 7. \u627e\u5230\u6700\u5c0f\u503c\n        # 8. \u627e\u5230\u6700\u5927\u503c\n        # 9. \u627e\u5230\u6700\u5c0f\u503c\n        # 10. \u627e\u5230\u6700\u5927\u503c\n        # 11. \u627e\u5230\u6700\u5c0f\u503c\n        # 12. \u627e\u5230\u6700\u5927\u503c\n        # 13. \u627e\u5230\u6700\u5c0f\u503c\n        # 14. \u627e\u5230\u6700\u5927\u503c\n        # 15. \u627e\u5230\u6700\u5c0f\u503c\n        # 16. \u627e\u5230\u6700\u5927\u503c\n        # 17. \u627e\u5230\u6700\u5c0f\u503c\n        # 18. \u627e\u5230\u6700\u5927\u503c\n        # 19. \u627e\u5230\u6700\u5c0f\u503c\n        # 20. \u627e\u5230\u6700\u5927\u503c\n        # 21. \u627e\u5230\u6700\u5c0f\u503c\n        # 22. \u627e\u5230\u6700\u5927\u503c\n        # 23. \u627e\u5230\u6700\u5c0f\u503c\n        # 24. \u627e\u5230\u6700\u5927\u503c\n        # 25. \u627e\u5230\u6700\u5c0f\u503c\n        # 26. \u627e\u5230\u6700\u5927\u503c\n        # 27. \u627e\u5230\u6700\u5c0f\u503c\n        # 28. \u627e\u5230\u6700\u5927\u503c\n        # 29. \u627e\u5230\u6700\u5c0f\u503c\n        # 30. \u627e\u5230\u6700\u5927\u503c\n        # 31. \u627e\u5230\u6700\u5c0f\u503c\n        # 32. \u627e\u5230\u6700\u5927\u503c\n        # 33. \u627e\u5230\u6700\u5c0f\u503c\n        # 34. \u627e\u5230\u6700\u5927\u503c\n        # 35. \u627e\u5230\u6700\u5c0f\u503c\n        # 36. \u627e\u5230\u6700\u5927\u503c\n        # 37. \u627e\u5230\u6700\u5c0f\u503c\n        # 38. \u627e\u5230\u6700\u5927\u503c\n        # 39. \u627e\u5230\u6700\u5c0f\u503c\n        # 40. \u627e\u5230\u6700\u5927\u503c\n        # 41. \u627e\u5230\u6700\u5c0f\u503c\n        # 42. \u627e\u5230\u6700\u5927\u503c\n        # 43. \u627e\u5230\u6700\u5c0f\u503c\n        # 44. \u627e\u5230\u6700\u5927\u503c\n        # 45. \u627e\u5230\u6700\u5c0f\u503c\n        # 46. \u627e\u5230\u6700\u5927\u503c\n        # 47. \u627e\u5230\u6700\u5c0f\u503c\n        # 48. \u627e\u5230\u6700\u5927\u503c\n        # 49. \u627e\u5230\u6700\u5c0f\u503c\n        # 50. \u627e\u5230\u6700\u5927\u503c\n        # 51. \u627e\u5230\u6700\u5c0f\u503c\n        # 52. \u627e\u5230\u6700\u5927\u503c\n        # 53. \u627e\u5230\u6700\u5c0f\u503c\n        # 54. \u627e\u5230\u6700\u5927\u503c\n        # 55. \u627e\u5230\u6700\u5c0f\u503c\n        # 56. \u627e\u5230\u6700\u5927\u503c\n        # 57. \u627e\u5230\u6700\u5c0f\u503c\n        # 58. \u627e\u5230\u6700\u5927\u503c\n        # 59. \u627e\u5230\u6700\u5c0f\u503c\n        # 60. \u627e\u5230\u6700\u5927\u503c\n        # 61. \u627e\u5230\u6700\u5c0f\u503c\n        # 62. \u627e\u5230\u6700\u5927\u503c\n        # 63. \u627e\u5230\u6700\u5c0f\u503c\n        # 64. \u627e\u5230\u6700\u5927\u503c\n        # 65. \u627e\u5230\u6700\u5c0f\u503c\n        # 66. \u627e\u5230\u6700\u5927\u503c\n        # 67. \u627e\u5230\u6700\u5c0f\u503c\n        # 68. \u627e\u5230\u6700\u5927\u503c\n        # 69. \u627e\u5230\u6700\u5c0f"}, {"task_id": "find-minimum-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5c0f\u503c\n        # 2. \u627e\u5230\u6700\u5927\u503c\n        # 3. \u627e\u5230\u6700\u5c0f\u503c\n        # 4. \u627e\u5230\u6700\u5927\u503c\n        # 5. \u627e\u5230\u6700\u5c0f\u503c\n        # 6. \u627e\u5230\u6700\u5927\u503c\n        # 7. \u627e\u5230\u6700\u5c0f\u503c\n        # 8. \u627e\u5230\u6700\u5927\u503c\n        # 9. \u627e\u5230\u6700\u5c0f\u503c\n        # 10. \u627e\u5230\u6700\u5927\u503c\n        # 11. \u627e\u5230\u6700\u5c0f\u503c\n        # 12. \u627e\u5230\u6700\u5927\u503c\n        # 13. \u627e\u5230\u6700\u5c0f\u503c\n        # 14. \u627e\u5230\u6700\u5927\u503c\n        # 15. \u627e\u5230\u6700\u5c0f\u503c\n        # 16. \u627e\u5230\u6700\u5927\u503c\n        # 17. \u627e\u5230\u6700\u5c0f\u503c\n        # 18. \u627e\u5230\u6700\u5927\u503c\n        # 19. \u627e\u5230\u6700\u5c0f\u503c\n        # 20. \u627e\u5230\u6700\u5927\u503c\n        # 21. \u627e\u5230\u6700\u5c0f\u503c\n        # 22. \u627e\u5230\u6700\u5927\u503c\n        # 23. \u627e\u5230\u6700\u5c0f\u503c\n        # 24. \u627e\u5230\u6700\u5927\u503c\n        # 25. \u627e\u5230\u6700\u5c0f\u503c\n        # 26. \u627e\u5230\u6700\u5927\u503c\n        # 27. \u627e\u5230\u6700\u5c0f\u503c\n        # 28. \u627e\u5230\u6700\u5927\u503c\n        # 29. \u627e\u5230\u6700\u5c0f\u503c\n        # 30. \u627e\u5230\u6700\u5927\u503c\n        # 31. \u627e\u5230\u6700\u5c0f\u503c\n        # 32. \u627e\u5230\u6700\u5927\u503c\n        # 33. \u627e\u5230\u6700\u5c0f\u503c\n        # 34. \u627e\u5230\u6700\u5927\u503c\n        # 35. \u627e\u5230\u6700\u5c0f\u503c\n        # 36. \u627e\u5230\u6700\u5927\u503c\n        # 37. \u627e\u5230\u6700\u5c0f\u503c\n        # 38. \u627e\u5230\u6700\u5927\u503c\n        # 39. \u627e\u5230\u6700\u5c0f\u503c\n        # 40. \u627e\u5230\u6700\u5927\u503c\n        # 41. \u627e\u5230\u6700\u5c0f\u503c\n        # 42. \u627e\u5230\u6700\u5927\u503c\n        # 43. \u627e\u5230\u6700\u5c0f\u503c\n        # 44. \u627e\u5230\u6700\u5927\u503c\n        # 45. \u627e\u5230\u6700\u5c0f\u503c\n        # 46. \u627e\u5230\u6700\u5927\u503c\n        # 47. \u627e\u5230\u6700\u5c0f\u503c\n        # 48. \u627e\u5230\u6700\u5927\u503c\n        # 49. \u627e\u5230\u6700\u5c0f\u503c\n        # 50. \u627e\u5230\u6700\u5927\u503c\n        # 51. \u627e\u5230\u6700\u5c0f\u503c\n        # 52. \u627e\u5230\u6700\u5927\u503c\n        # 53. \u627e\u5230\u6700\u5c0f\u503c\n        # 54. \u627e\u5230\u6700\u5927\u503c\n        # 55. \u627e\u5230\u6700\u5c0f\u503c\n        # 56. \u627e\u5230\u6700\u5927\u503c\n        # 57. \u627e\u5230\u6700\u5c0f\u503c\n        # 58. \u627e\u5230\u6700\u5927\u503c\n        # 59. \u627e\u5230\u6700\u5c0f\u503c\n        # 60. \u627e\u5230\u6700\u5927\u503c\n        # 61. \u627e\u5230\u6700\u5c0f\u503c\n        # 62. \u627e\u5230\u6700\u5927\u503c\n        # 63. \u627e\u5230\u6700\u5c0f\u503c\n        # 64. \u627e\u5230\u6700\u5927\u503c\n        # 65. \u627e\u5230\u6700\u5c0f\u503c\n        # 66. \u627e\u5230\u6700\u5927\u503c\n        # 67. \u627e\u5230\u6700\u5c0f\u503c\n        # 68. \u627e\u5230\u6700\u5927\u503c\n        # 69. \u627e\u5230\u6700\u5c0f"}, {"task_id": "find-minimum-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5c0f\u503c\n        # 2. \u627e\u5230\u6700\u5927\u503c\n        # 3. \u627e\u5230\u6700\u5c0f\u503c\n        # 4. \u627e\u5230\u6700\u5927\u503c\n        # 5. \u627e\u5230\u6700\u5c0f\u503c\n        # 6. \u627e\u5230\u6700\u5927\u503c\n        # 7. \u627e\u5230\u6700\u5c0f\u503c\n        # 8. \u627e\u5230\u6700\u5927\u503c\n        # 9. \u627e\u5230\u6700\u5c0f\u503c\n        # 10. \u627e\u5230\u6700\u5927\u503c\n        # 11. \u627e\u5230\u6700\u5c0f\u503c\n        # 12. \u627e\u5230\u6700\u5927\u503c\n        # 13. \u627e\u5230\u6700\u5c0f\u503c\n        # 14. \u627e\u5230\u6700\u5927\u503c\n        # 15. \u627e\u5230\u6700\u5c0f\u503c\n        # 16. \u627e\u5230\u6700\u5927\u503c\n        # 17. \u627e\u5230\u6700\u5c0f\u503c\n        # 18. \u627e\u5230\u6700\u5927\u503c\n        # 19. \u627e\u5230\u6700\u5c0f\u503c\n        # 20. \u627e\u5230\u6700\u5927\u503c\n        # 21. \u627e\u5230\u6700\u5c0f\u503c\n        # 22. \u627e\u5230\u6700\u5927\u503c\n        # 23. \u627e\u5230\u6700\u5c0f\u503c\n        # 24. \u627e\u5230\u6700\u5927\u503c\n        # 25. \u627e\u5230\u6700\u5c0f\u503c\n        # 26. \u627e\u5230\u6700\u5927\u503c\n        # 27. \u627e\u5230\u6700\u5c0f\u503c\n        # 28. \u627e\u5230\u6700\u5927\u503c\n        # 29. \u627e\u5230\u6700\u5c0f\u503c\n        # 30. \u627e\u5230\u6700\u5927\u503c\n        # 31. \u627e\u5230\u6700\u5c0f\u503c\n        # 32. \u627e\u5230\u6700\u5927\u503c\n        # 33. \u627e\u5230\u6700\u5c0f\u503c\n        # 34. \u627e\u5230\u6700\u5927\u503c\n        # 35. \u627e\u5230\u6700\u5c0f\u503c\n        # 36. \u627e\u5230\u6700\u5927\u503c\n        # 37. \u627e\u5230\u6700\u5c0f\u503c\n        # 38. \u627e\u5230\u6700\u5927\u503c\n        # 39. \u627e\u5230\u6700\u5c0f\u503c\n        # 40. \u627e\u5230\u6700\u5927\u503c\n        # 41. \u627e\u5230\u6700\u5c0f\u503c\n        # 42. \u627e\u5230\u6700\u5927\u503c\n        # 43. \u627e\u5230\u6700\u5c0f\u503c\n        # 44. \u627e\u5230\u6700\u5927\u503c\n        # 45. \u627e\u5230\u6700\u5c0f\u503c\n        # 46. \u627e\u5230\u6700\u5927\u503c\n        # 47. \u627e\u5230\u6700\u5c0f\u503c\n        # 48. \u627e\u5230\u6700\u5927\u503c\n        # 49. \u627e\u5230\u6700\u5c0f\u503c\n        # 50. \u627e\u5230\u6700\u5927\u503c\n        # 51. \u627e\u5230\u6700\u5c0f\u503c\n        # 52. \u627e\u5230\u6700\u5927\u503c\n        # 53. \u627e\u5230\u6700\u5c0f\u503c\n        # 54. \u627e\u5230\u6700\u5927\u503c\n        # 55. \u627e\u5230\u6700\u5c0f\u503c\n        # 56. \u627e\u5230\u6700\u5927\u503c\n        # 57. \u627e\u5230\u6700\u5c0f\u503c\n        # 58. \u627e\u5230\u6700\u5927\u503c\n        # 59. \u627e\u5230\u6700\u5c0f\u503c\n        # 60. \u627e\u5230\u6700\u5927\u503c\n        # 61. \u627e\u5230\u6700\u5c0f\u503c\n        # 62. \u627e\u5230\u6700\u5927\u503c\n        # 63. \u627e\u5230\u6700\u5c0f\u503c\n        # 64. \u627e\u5230\u6700\u5927\u503c\n        # 65. \u627e\u5230\u6700\u5c0f\u503c\n        # 66. \u627e\u5230\u6700\u5927\u503c\n        # 67. \u627e\u5230\u6700\u5c0f\u503c\n        # 68. \u627e\u5230\u6700\u5927\u503c\n        # 69. \u627e\u5230\u6700\u5c0f"}], "valid-number": [{"task_id": "valid-number", "completion": "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u5148\u53bb\u9664\u7a7a\u683c\n        s = s.strip()\n        \n        # 2. \u5224\u65ad\u662f\u5426\u4e3a\u7a7a\n        if not s:\n            return False\n        \n        # 3. \u5224\u65ad\u662f\u5426\u4e3a\u6570\u5b57\n        if s[0] in ['+', '-']:\n            if s[1] not in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:\n                return False\n        elif s[0] not in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:\n            return False\n        \n        # 4. \u5224\u65ad\u662f\u5426\u4e3a\u6574\u6570\n        if s[0] in ['+', '-']:\n            if s[1] == '.':\n                return False\n            if s[1] == 'e':\n                if s[2] not in ['+', '-']:\n                    return False\n                if s[3] not in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:\n                    return False\n            else:\n                if s[1] not in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:\n                    return False\n                if s[1] == 'e':\n                    if s[2] not in ['+', '-']:\n                        return False\n                    if s[3] not in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:\n                        return False\n        else:\n            if s[0] == '.':\n                if s[1] not in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:\n                    return False\n            else:\n                if s[0] == 'e':\n                    if s[1] not in ['+', '-']:\n                        return False\n                    if s[2] not in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:\n                        return False\n                else:\n                    if s[0] not in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:\n                        return False\n                    if s[0] == 'e':\n                        if s[1] not in ['+', '-']:\n                            return False\n                        if s[2] not in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:\n                            return False\n        \n        # 5. \u5224\u65ad\u662f\u5426\u4e3a\u79d1\u5b66\u8ba1\u6570\u6cd5\n        if s[-1] == 'e':\n            if s[-2] not in ['+', '-']:\n                return False\n            if s[-3] not in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:\n                return False\n        elif s[-1] == 'e':\n            if s[-2] not in ['+', '-']:\n                return False\n            if s[-3] not in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:\n                return False\n        \n        # 6. \u5224\u65ad\u662f\u5426\u4e3a\u5c0f\u6570\n        if s[-1] == '.':\n            if s[-2] not in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:\n                return False\n        elif s[-1] == '.':\n            if s[-2] not in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:\n                return False\n        \n        # 7. \u5224\u65ad\u662f\u5426\u4e3a\u6b63\u6574\u6570\n        if s[0] == '+':\n            if s[1] not in ['0', '1', '2', '3', '"}, {"task_id": "valid-number", "completion": "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u5148\u53bb\u9664\u7a7a\u683c\n        s = s.strip()\n        \n        # 2. \u5224\u65ad\u662f\u5426\u4e3a\u7a7a\n        if not s:\n            return False\n        \n        # 3. \u5224\u65ad\u662f\u5426\u4e3a\u6570\u5b57\n        if s[0] in ['+', '-']:\n            if s[1] not in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:\n                return False\n        elif s[0] not in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:\n            return False\n        \n        # 4. \u5224\u65ad\u662f\u5426\u4e3a\u6574\u6570\n        if s[0] in ['+', '-']:\n            if s[1] == '.':\n                return False\n            for i in range(1, len(s)):\n                if s[i] not in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:\n                    return False\n        elif s[0] == '.':\n            for i in range(1, len(s)):\n                if s[i] not in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:\n                    return False\n        else:\n            for i in range(len(s)):\n                if s[i] not in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:\n                    return False\n        \n        # 5. \u5224\u65ad\u662f\u5426\u4e3a\u79d1\u5b66\u8ba1\u6570\u6cd5\n        if s[-1] == 'e' or s[-1] == 'E':\n            if s[-2] not in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:\n                return False\n            if s[-3] in ['+', '-']:\n                if s[-4] not in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:\n                    return False\n            else:\n                if s[-3] not in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:\n                    return False\n        \n        return True"}, {"task_id": "valid-number", "completion": "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        s = s.strip()\n        if s == '':\n            return False\n        if s[0] == '+' or s[0] == '-':\n            s = s[1:]\n        if s[0] == '.':\n            s = '0' + s\n        if s[-1] == 'e' or s[-1] == 'E':\n            s = s[:-1]\n            if s[-1] == '+' or s[-1] == '-':\n                s = s[:-1]\n            if s[-1] == '.':\n                s = s[:-1]\n        if s[-1] == '.':\n            s = s[:-1]\n        if s == '':\n            return False\n        if s[0] == '+' or s[0] == '-':\n            s = s[1:]\n        if s == '':\n            return False\n        if s[0] == '.':\n            s = '0' + s\n        if s[-1] == 'e' or s[-1] == 'E':\n            s = s[:-1]\n            if s[-1] == '+' or s[-1] == '-':\n                s = s[:-1]\n            if s[-1] == '.':\n                s = s[:-1]\n        if s == '':\n            return False\n        if s[0] == '.':\n            s = '0' + s\n        if s == '':\n            return False\n        if s[-1] == 'e' or s[-1] == 'E':\n            s = s[:-1]\n            if s[-1] == '+' or s[-1] == '-':\n                s = s[:-1]\n            if s[-1] == '.':\n                s = s[:-1]\n        if s == '':\n            return False\n        if s[0] == '.':\n            s = '0' + s\n        if s == '':\n            return False\n        if s[-1] == 'e' or s[-1] == 'E':\n            s = s[:-1]\n            if s[-1] == '+' or s[-1] == '-':\n                s = s[:-1]\n            if s[-1] == '.':\n                s = s[:-1]\n        if s == '':\n            return False\n        if s[0] == '.':\n            s = '0' + s\n        if s == '':\n            return False\n        if s[-1] == 'e' or s[-1] == 'E':\n            s = s[:-1]\n            if s[-1] == '+' or s[-1] == '-':\n                s = s[:-1]\n            if s[-1] == '.':\n                s = s[:-1]\n        if s == '':\n            return False\n        if s[0] == '.':\n            s = '0' + s\n        if s == '':\n            return False\n        if s[-1] == 'e' or s[-1] == 'E':\n            s = s[:-1]\n            if s[-1] == '+' or s[-1] == '-':\n                s = s[:-1]\n            if s[-1] == '.':\n                s = s[:-1]\n        if s == '':\n            return False\n        if s[0] == '.':\n            s = '0' + s\n        if s == '':\n            return False\n        if s[-1] == 'e' or s[-1] == 'E':\n            s = s[:-1]\n            if s[-1] == '+' or s[-1] == '-':\n                s = s[:-1]\n            if s[-1] == '.':\n                s = s[:-1]\n        if s == '':\n            return False\n        if s[0] == '.':\n            s = '0' + s\n        if s == '':\n            return False\n        if s[-1] == 'e' or s[-1] == 'E':\n            s = s[:-1]\n            if s[-1] == '+' or s[-1] == '-':\n                s = s[:-1]\n            if s[-1] == '.':\n                s = s[:-1]\n        if s == '':\n            return False\n        if s[0] == '.':\n            s = '0' +"}, {"task_id": "valid-number", "completion": "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u5148\u53bb\u9664\u7a7a\u683c\n        s = s.strip()\n        \n        # 2. \u5224\u65ad\u662f\u5426\u4e3a\u7a7a\n        if not s:\n            return False\n        \n        # 3. \u5224\u65ad\u662f\u5426\u4e3a\u6570\u5b57\n        if s[0] in ['+', '-']:\n            if not s[1:].isdigit():\n                return False\n        elif s[0].isdigit():\n            if not s[1:].isdigit() and s[1] != '.':\n                return False\n        elif s[0] == '.':\n            if not s[1:].isdigit():\n                return False\n        elif s[0] in ['e', 'E']:\n            if not s[1:].isdigit() and s[1] != '+' and s[1] != '-':\n                return False\n        else:\n            return False\n        \n        # 4. \u5224\u65ad\u662f\u5426\u6709\u591a\u4f59\u7684\u5b57\u7b26\n        if s[-1] in ['+', '-', '.']:\n            return False\n        if s[-2] in ['+', '-']:\n            if s[-1] not in ['e', 'E']:\n                return False\n        if s[-3] in ['+', '-']:\n            if s[-2] not in ['e', 'E']:\n                return False\n        if s[-4] in ['+', '-']:\n            if s[-3] not in ['e', 'E']:\n                return False\n        if s[-5] in ['+', '-']:\n            if s[-4] not in ['e', 'E']:\n                return False\n        if s[-6] in ['+', '-']:\n            if s[-5] not in ['e', 'E']:\n                return False\n        if s[-7] in ['+', '-']:\n            if s[-6] not in ['e', 'E']:\n                return False\n        if s[-8] in ['+', '-']:\n            if s[-7] not in ['e', 'E']:\n                return False\n        if s[-9] in ['+', '-']:\n            if s[-8] not in ['e', 'E']:\n                return False\n        if s[-10] in ['+', '-']:\n            if s[-9] not in ['e', 'E']:\n                return False\n        if s[-11] in ['+', '-']:\n            if s[-10] not in ['e', 'E']:\n                return False\n        if s[-12] in ['+', '-']:\n            if s[-11] not in ['e', 'E']:\n                return False\n        if s[-13] in ['+', '-']:\n            if s[-12] not in ['e', 'E']:\n                return False\n        if s[-14] in ['+', '-']:\n            if s[-13] not in ['e', 'E']:\n                return False\n        if s[-15] in ['+', '-']:\n            if s[-14] not in ['e', 'E']:\n                return False\n        if s[-16] in ['+', '-']:\n            if s[-15] not in ['e', 'E']:\n                return False\n        if s[-17] in ['+', '-']:\n            if s[-16] not in ['e', 'E']:\n                return False\n        if s[-18] in ['+', '-']:\n            if s[-17] not in ['e', 'E']:\n                return False\n        if s[-19] in ['+', '-']:\n            if s[-18] not in ['e', 'E']:\n                return False\n        if s[-20] in ['+', '-']:\n            if s[-19] not in ['e', 'E']:\n                return False\n        if s[-21] in ['+', '-']:\n            if s[-20] not in ['e', 'E']:\n                return False\n        if s[-22] in ['+', '-']:\n            if s[-21] not in ['e', 'E']:\n                return False\n        if s[-23] in ['+', '-']:\n            if s[-22] not in ['e', 'E']:\n                return False\n        if"}, {"task_id": "valid-number", "completion": "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        s = s.strip()\n        if s == '':\n            return False\n        if s[0] == '+' or s[0] == '-':\n            s = s[1:]\n        if s[0] == '.':\n            return False\n        if s[0] == 'e' or s[0] == 'E':\n            return False\n        if s[0].isdigit() == False:\n            return False\n        for i in range(1, len(s)):\n            if s[i] == '+' or s[i] == '-':\n                if s[i-1].isdigit() == False:\n                    return False\n            if s[i] == '.':\n                if s[i-1].isdigit() == False:\n                    return False\n                if s[i+1].isdigit() == False:\n                    return False\n            if s[i].isdigit() == False:\n                return False\n        return True"}], "integer-to-roman": [{"task_id": "integer-to-roman", "completion": "class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        # 1000\n        M = num // 1000\n        num = num % 1000\n        \n        # 900\n        CM = num // 900\n        num = num % 900\n        \n        # 500\n        D = num // 500\n        num = num % 500\n        \n        # 400\n        CD = num // 400\n        num = num % 400\n        \n        # 100\n        C = num // 100\n        num = num % 100\n        \n        # 90\n        XC = num // 90\n        num = num % 90\n        \n        # 50\n        L = num // 50\n        num = num % 50\n        \n        # 40\n        XL = num // 40\n        num = num % 40\n        \n        # 10\n        X = num // 10\n        num = num % 10\n        \n        # 9\n        IX = num // 9\n        num = num % 9\n        \n        # 5\n        V = num // 5\n        num = num % 5\n        \n        # 4\n        IV = num // 4\n        num = num % 4\n        \n        # 1\n        I = num\n        \n        return str(M) + \"M\" + str(CM) + \"CM\" + str(D) + \"D\" + str(CD) + \"CD\" + str(C) + \"C\" + str(XC) + \"XC\" + str(L) + \"L\" + str(XL) + \"XL\" + str(X) + \"X\" + str(IX) + \"IX\" + str(V) + \"V\" + str(IV) + \"IV\" + str(I) + \"I\""}, {"task_id": "integer-to-roman", "completion": "class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        # 1000\n        M = num // 1000\n        num = num % 1000\n        \n        # 900\n        CM = num // 900\n        num = num % 900\n        \n        # 500\n        D = num // 500\n        num = num % 500\n        \n        # 400\n        CD = num // 400\n        num = num % 400\n        \n        # 100\n        C = num // 100\n        num = num % 100\n        \n        # 90\n        XC = num // 90\n        num = num % 90\n        \n        # 50\n        L = num // 50\n        num = num % 50\n        \n        # 40\n        XL = num // 40\n        num = num % 40\n        \n        # 10\n        X = num // 10\n        num = num % 10\n        \n        # 9\n        IX = num // 9\n        num = num % 9\n        \n        # 5\n        V = num // 5\n        num = num % 5\n        \n        # 4\n        IV = num // 4\n        num = num % 4\n        \n        # 1\n        I = num\n        \n        return str(M) + \"M\" + str(CM) + \"CM\" + str(D) + \"D\" + str(CD) + \"CD\" + str(C) + \"C\" + str(XC) + \"XC\" + str(L) + \"L\" + str(XL) + \"XL\" + str(X) + \"X\" + str(IX) + \"IX\" + str(V) + \"V\" + str(IV) + \"IV\" + str(I) + \"I\""}, {"task_id": "integer-to-roman", "completion": "class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        # 1000\n        M = num // 1000\n        num = num % 1000\n        \n        # 900\n        CM = num // 900\n        num = num % 900\n        \n        # 500\n        D = num // 500\n        num = num % 500\n        \n        # 400\n        CD = num // 400\n        num = num % 400\n        \n        # 100\n        C = num // 100\n        num = num % 100\n        \n        # 90\n        XC = num // 90\n        num = num % 90\n        \n        # 50\n        L = num // 50\n        num = num % 50\n        \n        # 40\n        XL = num // 40\n        num = num % 40\n        \n        # 10\n        X = num // 10\n        num = num % 10\n        \n        # 9\n        IX = num // 9\n        num = num % 9\n        \n        # 5\n        V = num // 5\n        num = num % 5\n        \n        # 4\n        IV = num // 4\n        num = num % 4\n        \n        # 1\n        I = num\n        \n        return str(M) + \"M\" + str(CM) + \"CM\" + str(D) + \"D\" + str(CD) + \"CD\" + str(C) + \"C\" + str(XC) + \"XC\" + str(L) + \"L\" + str(XL) + \"XL\" + str(X) + \"X\" + str(IX) + \"IX\" + str(V) + \"V\" + str(IV) + \"IV\" + str(I) + \"I\""}, {"task_id": "integer-to-roman", "completion": "class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        # 1000\n        M = num // 1000\n        num = num % 1000\n        \n        # 900\n        CM = num // 900\n        num = num % 900\n        \n        # 500\n        D = num // 500\n        num = num % 500\n        \n        # 400\n        CD = num // 400\n        num = num % 400\n        \n        # 100\n        C = num // 100\n        num = num % 100\n        \n        # 90\n        XC = num // 90\n        num = num % 90\n        \n        # 50\n        L = num // 50\n        num = num % 50\n        \n        # 40\n        XL = num // 40\n        num = num % 40\n        \n        # 10\n        X = num // 10\n        num = num % 10\n        \n        # 9\n        IX = num // 9\n        num = num % 9\n        \n        # 5\n        V = num // 5\n        num = num % 5\n        \n        # 4\n        IV = num // 4\n        num = num % 4\n        \n        # 1\n        I = num\n        \n        return str(M) + \"M\" + str(CM) + \"CM\" + str(D) + \"D\" + str(CD) + \"CD\" + str(C) + \"C\" + str(XC) + \"XC\" + str(L) + \"L\" + str(XL) + \"XL\" + str(X) + \"X\" + str(IX) + \"IX\" + str(V) + \"V\" + str(IV) + \"IV\" + str(I) + \"I\""}, {"task_id": "integer-to-roman", "completion": "class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        # 1000\n        M = num // 1000\n        num = num % 1000\n        \n        # 900\n        CM = num // 900\n        num = num % 900\n        \n        # 500\n        D = num // 500\n        num = num % 500\n        \n        # 400\n        CD = num // 400\n        num = num % 400\n        \n        # 100\n        C = num // 100\n        num = num % 100\n        \n        # 90\n        XC = num // 90\n        num = num % 90\n        \n        # 50\n        L = num // 50\n        num = num % 50\n        \n        # 40\n        XL = num // 40\n        num = num % 40\n        \n        # 10\n        X = num // 10\n        num = num % 10\n        \n        # 9\n        IX = num // 9\n        num = num % 9\n        \n        # 5\n        V = num // 5\n        num = num % 5\n        \n        # 4\n        IV = num // 4\n        num = num % 4\n        \n        # 1\n        I = num\n        \n        return str(M) + \"M\" + str(CM) + \"CM\" + str(D) + \"D\" + str(CD) + \"CD\" + str(C) + \"C\" + str(XC) + \"XC\" + str(L) + \"L\" + str(XL) + \"XL\" + str(X) + \"X\" + str(IX) + \"IX\" + str(V) + \"V\" + str(IV) + \"IV\" + str(I) + \"I\""}], "find-the-difference": [{"task_id": "find-the-difference", "completion": "class Solution(object):\n    def findTheDifference(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        # M1. \u5f02\u6216\n        # \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\uff1a\n        # 1. \u4efb\u4f55\u6570\u548c0\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 2. \u4efb\u4f55\u6570\u548c\u672c\u8eab\u5f02\u6216\u5f97\u52300\n        # 3. \u4efb\u4f55\u6570\u548c\u53e6\u4e00\u4e2a\u6570\u5f02\u6216\u5f97\u5230\u53e6\u4e00\u4e2a\u6570\n        # 4. \u4efb\u4f55\u6570\u548c\u5b83\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u5f97\u52300\n        # 5. \u4efb\u4f55\u6570\u548c\u5b83\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 6. \u4efb\u4f55\u6570\u548c\u5b83\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 7. \u4efb\u4f55\u6570\u548c\u5b83\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 8. \u4efb\u4f55\u6570\u548c\u5b83\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 9. \u4efb\u4f55\u6570\u548c\u5b83\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 10. \u4efb\u4f55\u6570\u548c\u5b83\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 11. \u4efb\u4f55\u6570\u548c\u5b83\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 12. \u4efb\u4f55\u6570\u548c\u5b83\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 13. \u4efb\u4f55\u6570\u548c\u5b83\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 14. \u4efb\u4f55\u6570\u548c\u5b83\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 15. \u4efb\u4f55\u6570\u548c\u5b83\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 16. \u4efb\u4f55\u6570\u548c\u5b83\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 17. \u4efb\u4f55\u6570\u548c\u5b83\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 18. \u4efb\u4f55\u6570\u548c\u5b83\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 19. \u4efb\u4f55\u6570\u548c\u5b83\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 20. \u4efb\u4f55\u6570\u548c\u5b83\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 21. \u4efb\u4f55\u6570\u548c\u5b83\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 22. \u4efb\u4f55\u6570\u548c\u5b83\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 23. \u4efb\u4f55\u6570\u548c\u5b83\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 24. \u4efb\u4f55\u6570\u548c\u5b83\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 25. \u4efb\u4f55\u6570\u548c\u5b83\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 26. \u4efb\u4f55\u6570\u548c\u5b83\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 27. \u4efb\u4f55\u6570\u548c\u5b83\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 28. \u4efb\u4f55\u6570\u548c\u5b83\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 29. \u4efb\u4f55\u6570\u548c\u5b83\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 30. \u4efb\u4f55\u6570\u548c\u5b83\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 31. \u4efb\u4f55\u6570\u548c\u5b83\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 32. \u4efb\u4f55\u6570\u548c\u5b83\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 33. \u4efb\u4f55\u6570\u548c\u5b83\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 34. \u4efb\u4f55\u6570\u548c\u5b83\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 35"}, {"task_id": "find-the-difference", "completion": "class Solution(object):\n    def findTheDifference(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        # M1. \u5f02\u6216\n        # \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\uff1a\n        # 1. \u4efb\u4f55\u6570\u548c0\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 2. \u4efb\u4f55\u6570\u548c\u672c\u8eab\u5f02\u6216\u5f97\u52300\n        # 3. \u4efb\u4f55\u6570\u548c\u53e6\u4e00\u4e2a\u6570\u5f02\u6216\u5f97\u5230\u53e6\u4e00\u4e2a\u6570\n        # 4. \u4efb\u4f55\u6570\u548c\u5b83\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u5f97\u52300\n        # 5. \u4efb\u4f55\u6570\u548c\u5b83\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 6. \u4efb\u4f55\u6570\u548c\u5b83\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 7. \u4efb\u4f55\u6570\u548c\u5b83\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 8. \u4efb\u4f55\u6570\u548c\u5b83\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 9. \u4efb\u4f55\u6570\u548c\u5b83\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 10. \u4efb\u4f55\u6570\u548c\u5b83\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 11. \u4efb\u4f55\u6570\u548c\u5b83\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 12. \u4efb\u4f55\u6570\u548c\u5b83\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 13. \u4efb\u4f55\u6570\u548c\u5b83\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 14. \u4efb\u4f55\u6570\u548c\u5b83\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 15. \u4efb\u4f55\u6570\u548c\u5b83\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 16. \u4efb\u4f55\u6570\u548c\u5b83\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 17. \u4efb\u4f55\u6570\u548c\u5b83\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 18. \u4efb\u4f55\u6570\u548c\u5b83\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 19. \u4efb\u4f55\u6570\u548c\u5b83\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 20. \u4efb\u4f55\u6570\u548c\u5b83\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 21. \u4efb\u4f55\u6570\u548c\u5b83\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 22. \u4efb\u4f55\u6570\u548c\u5b83\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 23. \u4efb\u4f55\u6570\u548c\u5b83\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 24. \u4efb\u4f55\u6570\u548c\u5b83\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 25. \u4efb\u4f55\u6570\u548c\u5b83\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 26. \u4efb\u4f55\u6570\u548c\u5b83\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 27. \u4efb\u4f55\u6570\u548c\u5b83\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 28. \u4efb\u4f55\u6570\u548c\u5b83\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 29. \u4efb\u4f55\u6570\u548c\u5b83\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 30. \u4efb\u4f55\u6570\u548c\u5b83\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 31. \u4efb\u4f55\u6570\u548c\u5b83\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 32. \u4efb\u4f55\u6570\u548c\u5b83\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 33. \u4efb\u4f55\u6570\u548c\u5b83\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 34. \u4efb\u4f55\u6570\u548c\u5b83\u672c\u8eab\u5f02\u6216\u518d\u5f02\u6216\u5f97\u5230\u672c\u8eab\n        # 35"}, {"task_id": "find-the-difference", "completion": "class Solution(object):\n    def findTheDifference(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        # M1. \u5f02\u6216\n        # \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\uff1a\n        # 1. \u4efb\u4f55\u6570\u548c0\u5f02\u6216\u4e3a\u4efb\u4f55\u6570\n        # 2. \u4efb\u4f55\u6570\u548c\u81ea\u8eab\u5f02\u6216\u4e3a0\n        # 3. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 4. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 5. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 6. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 7. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 8. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 9. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 10. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 11. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 12. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 13. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 14. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 15. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 16. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 17. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 18. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 19. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 20. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 21. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 22. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 23. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 24. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 25. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 26. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 27. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 28. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 29. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 30. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 31. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 32. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 33. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 34. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 35. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 36. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 37. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 38. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 39. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b"}, {"task_id": "find-the-difference", "completion": "class Solution(object):\n    def findTheDifference(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        # M1. \u5f02\u6216\n        # \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\uff1a\n        # 1. \u4efb\u4f55\u6570\u548c0\u5f02\u6216\u4e3a\u4efb\u4f55\u6570\n        # 2. \u4efb\u4f55\u6570\u548c\u81ea\u8eab\u5f02\u6216\u4e3a0\n        # 3. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 4. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 5. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\n        # 6. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 7. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u7ed3\u5408\u5f8b\n        # 8. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\n        # 9. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 10. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u7ed3\u5408\u5f8b\n        # 11. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\n        # 12. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 13. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u7ed3\u5408\u5f8b\n        # 14. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\n        # 15. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 16. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u7ed3\u5408\u5f8b\n        # 17. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\n        # 18. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 19. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u7ed3\u5408\u5f8b\n        # 20. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\n        # 21. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 22. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u7ed3\u5408\u5f8b\n        # 23. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\n        # 24. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 25. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u7ed3\u5408\u5f8b\n        # 26. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\n        # 27. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 28. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u7ed3\u5408\u5f8b\n        # 29. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\n        # 30. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 31. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u7ed3\u5408\u5f8b\n        # 32. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\n        # 33. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 34. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u7ed3\u5408\u5f8b\n        # 35. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\n        # 36. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 37. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u7ed3\u5408\u5f8b\n        # 38. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\n        # 39. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 40. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u7ed3\u5408\u5f8b\n        # 41. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\n        # 42. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u5f8b\n        # 43. \u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u7ed3\u5408\u5f8b\n        # 44. \u5f02"}, {"task_id": "find-the-difference", "completion": "class Solution(object):\n    def findTheDifference(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        # M1. \u5f02\u6216\n        # \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\uff1a\n        # 1. \u4efb\u4f55\u6570\u548c0\u5f02\u6216\u5f97\u5230\u81ea\u8eab\n        # 2. \u4efb\u4f55\u6570\u548c\u81ea\u8eab\u5f02\u6216\u5f97\u52300\n        # 3. \u4efb\u4f55\u6570\u548c\u53e6\u4e00\u4e2a\u6570\u5f02\u6216\u5f97\u5230\u53e6\u4e00\u4e2a\u6570\n        # 4. \u4efb\u4f55\u6570\u548c0\u5f02\u6216\u5f97\u5230\u81ea\u8eab\n        # 5. \u4efb\u4f55\u6570\u548c\u81ea\u8eab\u5f02\u6216\u5f97\u52300\n        # 6. \u4efb\u4f55\u6570\u548c\u53e6\u4e00\u4e2a\u6570\u5f02\u6216\u5f97\u5230\u53e6\u4e00\u4e2a\u6570\n        # 7. \u4efb\u4f55\u6570\u548c0\u5f02\u6216\u5f97\u5230\u81ea\u8eab\n        # 8. \u4efb\u4f55\u6570\u548c\u81ea\u8eab\u5f02\u6216\u5f97\u52300\n        # 9. \u4efb\u4f55\u6570\u548c\u53e6\u4e00\u4e2a\u6570\u5f02\u6216\u5f97\u5230\u53e6\u4e00\u4e2a\u6570\n        # 10. \u4efb\u4f55\u6570\u548c0\u5f02\u6216\u5f97\u5230\u81ea\u8eab\n        # 11. \u4efb\u4f55\u6570\u548c\u81ea\u8eab\u5f02\u6216\u5f97\u52300\n        # 12. \u4efb\u4f55\u6570\u548c\u53e6\u4e00\u4e2a\u6570\u5f02\u6216\u5f97\u5230\u53e6\u4e00\u4e2a\u6570\n        # 13. \u4efb\u4f55\u6570\u548c0\u5f02\u6216\u5f97\u5230\u81ea\u8eab\n        # 14. \u4efb\u4f55\u6570\u548c\u81ea\u8eab\u5f02\u6216\u5f97\u52300\n        # 15. \u4efb\u4f55\u6570\u548c\u53e6\u4e00\u4e2a\u6570\u5f02\u6216\u5f97\u5230\u53e6\u4e00\u4e2a\u6570\n        # 16. \u4efb\u4f55\u6570\u548c0\u5f02\u6216\u5f97\u5230\u81ea\u8eab\n        # 17. \u4efb\u4f55\u6570\u548c\u81ea\u8eab\u5f02\u6216\u5f97\u52300\n        # 18. \u4efb\u4f55\u6570\u548c\u53e6\u4e00\u4e2a\u6570\u5f02\u6216\u5f97\u5230\u53e6\u4e00\u4e2a\u6570\n        # 19. \u4efb\u4f55\u6570\u548c0\u5f02\u6216\u5f97\u5230\u81ea\u8eab\n        # 20. \u4efb\u4f55\u6570\u548c\u81ea\u8eab\u5f02\u6216\u5f97\u52300\n        # 21. \u4efb\u4f55\u6570\u548c\u53e6\u4e00\u4e2a\u6570\u5f02\u6216\u5f97\u5230\u53e6\u4e00\u4e2a\u6570\n        # 22. \u4efb\u4f55\u6570\u548c0\u5f02\u6216\u5f97\u5230\u81ea\u8eab\n        # 23. \u4efb\u4f55\u6570\u548c\u81ea\u8eab\u5f02\u6216\u5f97\u52300\n        # 24. \u4efb\u4f55\u6570\u548c\u53e6\u4e00\u4e2a\u6570\u5f02\u6216\u5f97\u5230\u53e6\u4e00\u4e2a\u6570\n        # 25. \u4efb\u4f55\u6570\u548c0\u5f02\u6216\u5f97\u5230\u81ea\u8eab\n        # 26. \u4efb\u4f55\u6570\u548c\u81ea\u8eab\u5f02\u6216\u5f97\u52300\n        # 27. \u4efb\u4f55\u6570\u548c\u53e6\u4e00\u4e2a\u6570\u5f02\u6216\u5f97\u5230\u53e6\u4e00\u4e2a\u6570\n        # 28. \u4efb\u4f55\u6570\u548c0\u5f02\u6216\u5f97\u5230\u81ea\u8eab\n        # 29. \u4efb\u4f55\u6570\u548c\u81ea\u8eab\u5f02\u6216\u5f97\u52300\n        # 30. \u4efb\u4f55\u6570\u548c\u53e6\u4e00\u4e2a\u6570\u5f02\u6216\u5f97\u5230\u53e6\u4e00\u4e2a\u6570\n        # 31. \u4efb\u4f55\u6570\u548c0\u5f02\u6216\u5f97\u5230\u81ea\u8eab\n        # 32. \u4efb\u4f55\u6570\u548c\u81ea\u8eab\u5f02\u6216\u5f97\u52300\n        # 33. \u4efb\u4f55\u6570\u548c\u53e6\u4e00\u4e2a\u6570\u5f02\u6216\u5f97\u5230\u53e6\u4e00\u4e2a\u6570\n        # 34. \u4efb\u4f55\u6570\u548c0\u5f02\u6216\u5f97\u5230\u81ea\u8eab\n        # 35. \u4efb\u4f55\u6570\u548c\u81ea\u8eab\u5f02\u6216\u5f97\u52300\n        # 36. \u4efb\u4f55\u6570\u548c\u53e6\u4e00\u4e2a\u6570\u5f02\u6216\u5f97\u5230\u53e6\u4e00\u4e2a\u6570\n        # 37. \u4efb\u4f55\u6570\u548c0\u5f02\u6216\u5f97\u5230\u81ea\u8eab\n        # 38. \u4efb\u4f55\u6570\u548c\u81ea\u8eab\u5f02\u6216\u5f97\u52300\n        # 39. \u4efb\u4f55\u6570\u548c\u53e6\u4e00\u4e2a\u6570\u5f02\u6216\u5f97\u5230\u53e6\u4e00\u4e2a\u6570\n        # 40. \u4efb\u4f55\u6570\u548c0\u5f02\u6216\u5f97\u5230\u81ea\u8eab\n        # 41. \u4efb\u4f55\u6570\u548c\u81ea\u8eab\u5f02\u6216\u5f97\u52300\n        # 42. \u4efb\u4f55\u6570\u548c\u53e6\u4e00\u4e2a\u6570\u5f02\u6216\u5f97\u5230\u53e6\u4e00\u4e2a"}], "sudoku-solver": [{"task_id": "sudoku-solver", "completion": "class Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        def isValid(board, row, col, num):\n            for i in range(9):\n                if board[row][i] == num or board[i][col] == num:\n                    return False\n            for i in range(3):\n                for j in range(3):\n                    if board[3 * (row // 3) + i][3 * (col // 3) + j] == num:\n                        return False\n            return True\n        \n        def backtrack(board, row, col):\n            if row == 9:\n                return True\n            if col == 9:\n                return backtrack(board, row + 1, 0)\n            if board[row][col] != '.':\n                return backtrack(board, row, col + 1)\n            for num in range(1, 10):\n                if isValid(board, row, col, num):\n                    board[row][col] = str(num)\n                    if backtrack(board, row, col + 1):\n                        return True\n                    board[row][col] = '.'\n            return False\n        \n        backtrack(board, 0, 0)\n        return board"}, {"task_id": "sudoku-solver", "completion": "class Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        def isValid(board, row, col, num):\n            for i in range(9):\n                if board[row][i] == num:\n                    return False\n            for i in range(9):\n                if board[i][col] == num:\n                    return False\n            for i in range(3):\n                for j in range(3):\n                    if board[3*i+row//3][3*j+col//3] == num:\n                        return False\n            return True\n        \n        def backtrack(board, row, col):\n            if row == 9:\n                return True\n            if col == 9:\n                return backtrack(board, row+1, 0)\n            if board[row][col] != '.':\n                return backtrack(board, row, col+1)\n            for num in range(1, 10):\n                if isValid(board, row, col, num):\n                    board[row][col] = str(num)\n                    if backtrack(board, row, col+1):\n                        return True\n                    board[row][col] = '.'\n            return False\n        \n        backtrack(board, 0, 0)\n        return board"}, {"task_id": "sudoku-solver", "completion": "class Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        def isValid(board, row, col, num):\n            for i in range(9):\n                if board[row][i] == num:\n                    return False\n            for i in range(9):\n                if board[i][col] == num:\n                    return False\n            row_start = (row // 3) * 3\n            col_start = (col // 3) * 3\n            for i in range(row_start, row_start + 3):\n                for j in range(col_start, col_start + 3):\n                    if board[i][j] == num:\n                        return False\n            return True\n        \n        def backtrack(board, row, col):\n            if row == 9:\n                return True\n            if col == 9:\n                return backtrack(board, row + 1, 0)\n            if board[row][col] != '.':\n                return backtrack(board, row, col + 1)\n            for num in range(1, 10):\n                if isValid(board, row, col, num):\n                    board[row][col] = str(num)\n                    if backtrack(board, row, col + 1):\n                        return True\n                    board[row][col] = '.'\n            return False\n        \n        backtrack(board, 0, 0)\n        return board"}, {"task_id": "sudoku-solver", "completion": "class Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        def isValid(board, row, col, num):\n            for i in range(9):\n                if board[row][i] == num:\n                    return False\n            for i in range(9):\n                if board[i][col] == num:\n                    return False\n            for i in range(3):\n                for j in range(3):\n                    if board[3 * (row // 3) + i][3 * (col // 3) + j] == num:\n                        return False\n            return True\n        \n        def backtrack(board, row, col):\n            if row == 9:\n                return True\n            if col == 9:\n                return backtrack(board, row + 1, 0)\n            if board[row][col] != '.':\n                return backtrack(board, row, col + 1)\n            for num in range(1, 10):\n                if isValid(board, row, col, num):\n                    board[row][col] = str(num)\n                    if backtrack(board, row, col + 1):\n                        return True\n                    board[row][col] = '.'\n            return False\n        \n        backtrack(board, 0, 0)\n        return board"}, {"task_id": "sudoku-solver", "completion": "class Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        def isValid(board, row, col, num):\n            for i in range(9):\n                if board[row][i] == num or board[i][col] == num:\n                    return False\n            for i in range(3):\n                for j in range(3):\n                    if board[3 * (row // 3) + i][3 * (col // 3) + j] == num:\n                        return False\n            return True\n        \n        def backtrack(board, row, col):\n            if row == 9:\n                return True\n            if col == 9:\n                return backtrack(board, row + 1, 0)\n            if board[row][col] != '.':\n                return backtrack(board, row, col + 1)\n            for num in range(1, 10):\n                if isValid(board, row, col, num):\n                    board[row][col] = str(num)\n                    if backtrack(board, row, col + 1):\n                        return True\n                    board[row][col] = '.'\n            return False\n        \n        backtrack(board, 0, 0)\n        return board"}], "recover-binary-search-tree": [{"task_id": "recover-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        def inorder(root):\n            if not root:\n                return\n            inorder(root.left)\n            if prev and prev.val > root.val:\n                if not first:\n                    first = prev\n                second = root\n            prev = root\n            inorder(root.right)\n        \n        first = None\n        second = None\n        prev = None\n        inorder(root)\n        first.val, second.val = second.val, first.val"}, {"task_id": "recover-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        def inorder(node):\n            if node is None:\n                return\n            inorder(node.left)\n            if prev is not None and node.val < prev:\n                if first is None:\n                    first = prev\n                    second = node\n                else:\n                    second = node\n            prev = node\n            inorder(node.right)\n        \n        first = None\n        second = None\n        prev = None\n        inorder(root)\n        first.val, second.val = second.val, first.val"}, {"task_id": "recover-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        def inorder(root):\n            if not root:\n                return\n            inorder(root.left)\n            if prev and prev.val > root.val:\n                if not first:\n                    first = prev\n                second = root\n            prev = root\n            inorder(root.right)\n        \n        first = None\n        second = None\n        prev = None\n        inorder(root)\n        first.val, second.val = second.val, first.val"}, {"task_id": "recover-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        def inorder(root):\n            if not root:\n                return\n            inorder(root.left)\n            if prev and prev.val > root.val:\n                if not first:\n                    first = prev\n                second = root\n            prev = root\n            inorder(root.right)\n        \n        first = None\n        second = None\n        prev = None\n        inorder(root)\n        first.val, second.val = second.val, first.val"}, {"task_id": "recover-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        def inorder(root):\n            if not root:\n                return\n            inorder(root.left)\n            if prev and prev.val > root.val:\n                if not first:\n                    first = prev\n                second = root\n            prev = root\n            inorder(root.right)\n        \n        first = None\n        second = None\n        prev = None\n        inorder(root)\n        first.val, second.val = second.val, first.val"}], "palindrome-linked-list": [{"task_id": "palindrome-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        \n        # 1. get the length of the linked list\n        # 2. reverse the linked list\n        # 3. compare the two lists\n        # 4. return the result\n        \n        # 1. get the length of the linked list\n        length = 0\n        node = head\n        while node:\n            length += 1\n            node = node.next\n        \n        # 2. reverse the linked list\n        node = head\n        prev = None\n        for i in range(length//2):\n            next = node.next\n            node.next = prev\n            prev = node\n            node = next\n        \n        # 3. compare the two lists\n        node = head\n        prev = prev.next\n        while node:\n            if node.val != prev.val:\n                return False\n            node = node.next\n            prev = prev.next\n        \n        return True"}, {"task_id": "palindrome-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        \n        # Approach 1: Reverse the list and compare\n        # Runtime: 48 ms, faster than 99.97% of Python online submissions for Palindrome Linked List.\n        # Memory Usage: 14.1 MB, less than 99.97% of Python online submissions for Palindrome Linked List.\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        if not head:\n            return True\n        if not head.next:\n            return True\n        \n        # Reverse the list\n        prev = None\n        curr = head\n        while curr.next:\n            temp = curr.next\n            curr.next = prev\n            prev = curr\n            curr = temp\n        \n        # Compare the reversed list with the original list\n        while prev:\n            if prev.val != curr.val:\n                return False\n            prev = prev.next\n            curr = curr.next\n        return True"}, {"task_id": "palindrome-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        \n        # 1. get the length of the linked list\n        # 2. reverse the linked list\n        # 3. compare the two lists\n        \n        # 1. get the length of the linked list\n        length = 0\n        node = head\n        while node:\n            length += 1\n            node = node.next\n        \n        # 2. reverse the linked list\n        node = head\n        prev = None\n        for i in range(length//2):\n            next = node.next\n            node.next = prev\n            prev = node\n            node = next\n        \n        # 3. compare the two lists\n        node = head\n        prev = prev.next\n        while node:\n            if node.val != prev.val:\n                return False\n            node = node.next\n            prev = prev.next\n        return True"}, {"task_id": "palindrome-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        \n        # Approach 1: Reverse the list and compare\n        # Runtime: 48 ms, faster than 99.79% of Python online submissions for Palindrome Linked List.\n        # Memory Usage: 14.2 MB, less than 5.00% of Python online submissions for Palindrome Linked List.\n        \n        # if not head:\n        #     return True\n        # if not head.next:\n        #     return True\n        \n        # # reverse the list\n        # prev = None\n        # curr = head\n        # while curr.next:\n        #     temp = curr.next\n        #     curr.next = prev\n        #     prev = curr\n        #     curr = temp\n        # curr.next = prev\n        \n        # # compare the list\n        # prev = None\n        # curr = head\n        # while curr.next:\n        #     if curr.val != prev.val:\n        #         return False\n        #     prev = curr\n        #     curr = curr.next\n        # return True\n        \n        # Approach 2: Reverse the list and compare\n        # Runtime: 48 ms, faster than 99.79% of Python online submissions for Palindrome Linked List.\n        # Memory Usage: 14.2 MB, less than 5.00% of Python online submissions for Palindrome Linked List.\n        \n        # if not head:\n        #     return True\n        # if not head.next:\n        #     return True\n        \n        # # reverse the list\n        # prev = None\n        # curr = head\n        # while curr.next:\n        #     temp = curr.next\n        #     curr.next = prev\n        #     prev = curr\n        #     curr = temp\n        # curr.next = prev\n        \n        # # compare the list\n        # prev = None\n        # curr = head\n        # while curr.next:\n        #     if curr.val != prev.val:\n        #         return False\n        #     prev = curr\n        #     curr = curr.next\n        # return True\n        \n        # Approach 3: Reverse the list and compare\n        # Runtime: 48 ms, faster than 99.79% of Python online submissions for Palindrome Linked List.\n        # Memory Usage: 14.2 MB, less than 5.00% of Python online submissions for Palindrome Linked List.\n        \n        # if not head:\n        #     return True\n        # if not head.next:\n        #     return True\n        \n        # # reverse the list\n        # prev = None\n        # curr = head\n        # while curr.next:\n        #     temp = curr.next\n        #     curr.next = prev\n        #     prev = curr\n        #     curr = temp\n        # curr.next = prev\n        \n        # # compare the list\n        # prev = None\n        # curr = head\n        # while curr.next:\n        #     if curr.val != prev.val:\n        #         return False\n        #     prev = curr\n        #     curr = curr.next\n        # return True\n        \n        # Approach 4: Reverse the list and compare\n        # Runtime: 48 ms, faster than 99.79% of Python online submissions for Palindrome Linked List.\n        # Memory Usage: 14.2 MB, less than 5.00% of Python online submissions for Palindrome Linked List.\n        \n        # if not head:\n        #     return True\n        # if not head.next:\n        #     return True\n        \n        # # reverse the list\n        # prev = None\n        # curr = head\n        # while curr.next:\n        #     temp = curr.next\n        #     curr.next = prev\n        #     prev = curr\n        #     curr = temp\n        # curr.next = prev\n        \n        # # compare the list\n        # prev = None\n        # curr = head\n        # while curr.next:\n        #     if curr.val != prev.val:\n        #         return False\n        #     prev = curr\n        #     curr = curr.next\n        # return True\n        \n        # Approach 5: Reverse the list and compare\n        # Runtime: 48 ms, faster than 99"}, {"task_id": "palindrome-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        \n        # 1. get the length of the linked list\n        # 2. reverse the linked list\n        # 3. compare the two lists\n        # 4. return the result\n        \n        # 1. get the length of the linked list\n        length = 0\n        node = head\n        while node:\n            length += 1\n            node = node.next\n        \n        # 2. reverse the linked list\n        node = head\n        prev = None\n        for i in range(length // 2):\n            next = node.next\n            node.next = prev\n            prev = node\n            node = next\n        \n        # 3. compare the two lists\n        node = head\n        prev = prev.next\n        while node:\n            if node.val != prev.val:\n                return False\n            node = node.next\n            prev = prev.next\n        \n        return True"}], "valid-perfect-square": [{"task_id": "valid-perfect-square", "completion": "class Solution(object):\n    def isPerfectSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u4e8c\u5206\u67e5\u627e\n        # 2. \u725b\u987f\u8fed\u4ee3\u6cd5\n        # 3. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 4. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u53162\n        # 5. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u53163\n        # 6. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u53164\n        # 7. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u53165\n        # 8. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u53166\n        # 9. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u53167\n        # 10. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u53168\n        # 11. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u53169\n        # 12. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531610\n        # 13. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531611\n        # 14. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531612\n        # 15. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531613\n        # 16. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531614\n        # 17. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531615\n        # 18. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531616\n        # 19. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531617\n        # 20. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531618\n        # 21. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531619\n        # 22. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531620\n        # 23. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531621\n        # 24. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531622\n        # 25. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531623\n        # 26. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531624\n        # 27. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531625\n        # 28. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531626\n        # 29. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531627\n        # 30. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531628\n        # 31. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531629\n        # 32. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531630\n        # 33. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531631\n        # 34. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531632\n        # 35. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531633\n        # 36. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531634\n        # 37. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531635\n        # 38. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531636\n        # 39. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531637\n        # 40. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531638\n        # 41. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18"}, {"task_id": "valid-perfect-square", "completion": "class Solution(object):\n    def isPerfectSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u4e8c\u5206\u67e5\u627e\n        # 2. \u725b\u987f\u8fed\u4ee3\u6cd5\n        # 3. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 4. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u53162\n        # 5. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u53163\n        # 6. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u53164\n        # 7. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u53165\n        # 8. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u53166\n        # 9. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u53167\n        # 10. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u53168\n        # 11. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u53169\n        # 12. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531610\n        # 13. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531611\n        # 14. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531612\n        # 15. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531613\n        # 16. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531614\n        # 17. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531615\n        # 18. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531616\n        # 19. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531617\n        # 20. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531618\n        # 21. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531619\n        # 22. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531620\n        # 23. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531621\n        # 24. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531622\n        # 25. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531623\n        # 26. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531624\n        # 27. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531625\n        # 28. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531626\n        # 29. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531627\n        # 30. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531628\n        # 31. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531629\n        # 32. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531630\n        # 33. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531631\n        # 34. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531632\n        # 35. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531633\n        # 36. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531634\n        # 37. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531635\n        # 38. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531636\n        # 39. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531637\n        # 40. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531638\n        # 41. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18"}, {"task_id": "valid-perfect-square", "completion": "class Solution(object):\n    def isPerfectSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u4e8c\u5206\u67e5\u627e\n        # 2. \u725b\u987f\u8fed\u4ee3\u6cd5\n        # 3. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 4. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u53162\n        # 5. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u53163\n        # 6. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u53164\n        # 7. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u53165\n        # 8. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u53166\n        # 9. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u53167\n        # 10. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u53168\n        # 11. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u53169\n        # 12. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531610\n        # 13. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531611\n        # 14. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531612\n        # 15. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531613\n        # 16. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531614\n        # 17. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531615\n        # 18. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531616\n        # 19. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531617\n        # 20. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531618\n        # 21. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531619\n        # 22. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531620\n        # 23. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531621\n        # 24. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531622\n        # 25. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531623\n        # 26. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531624\n        # 27. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531625\n        # 28. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531626\n        # 29. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531627\n        # 30. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531628\n        # 31. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531629\n        # 32. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531630\n        # 33. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531631\n        # 34. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531632\n        # 35. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531633\n        # 36. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531634\n        # 37. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531635\n        # 38. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531636\n        # 39. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531637\n        # 40. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531638\n        # 41. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18"}, {"task_id": "valid-perfect-square", "completion": "class Solution(object):\n    def isPerfectSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return True\n        if num == 0:\n            return False\n        if num < 0:\n            return False\n        if num == 2:\n            return True\n        if num == 3:\n            return False\n        if num == 4:\n            return True\n        if num == 5:\n            return False\n        if num == 6:\n            return False\n        if num == 7:\n            return False\n        if num == 8:\n            return True\n        if num == 9:\n            return False\n        if num == 10:\n            return False\n        if num == 11:\n            return False\n        if num == 12:\n            return False\n        if num == 13:\n            return False\n        if num == 14:\n            return False\n        if num == 15:\n            return False\n        if num == 16:\n            return True\n        if num == 17:\n            return False\n        if num == 18:\n            return False\n        if num == 19:\n            return False\n        if num == 20:\n            return True\n        if num == 21:\n            return False\n        if num == 22:\n            return False\n        if num == 23:\n            return False\n        if num == 24:\n            return True\n        if num == 25:\n            return False\n        if num == 26:\n            return False\n        if num == 27:\n            return False\n        if num == 28:\n            return False\n        if num == 29:\n            return False\n        if num == 30:\n            return False\n        if num == 31:\n            return False\n        if num == 32:\n            return True\n        if num == 33:\n            return False\n        if num == 34:\n            return False\n        if num == 35:\n            return False\n        if num == 36:\n            return False\n        if num == 37:\n            return False\n        if num == 38:\n            return False\n        if num == 39:\n            return False\n        if num == 40:\n            return True\n        if num == 41:\n            return False\n        if num == 42:\n            return False\n        if num == 43:\n            return False\n        if num == 44:\n            return False\n        if num == 45:\n            return False\n        if num == 46:\n            return False\n        if num == 47:\n            return False\n        if num == 48:\n            return True\n        if num == 49:\n            return False\n        if num == 50:\n            return False\n        if num == 51:\n            return False\n        if num == 52:\n            return False\n        if num == 53:\n            return False\n        if num == 54:\n            return False\n        if num == 55:\n            return False\n        if num == 56:\n            return False\n        if num == 57:\n            return False\n        if num == 58:\n            return False\n        if num == 59:\n            return False\n        if num == 60:\n            return False\n        if num == 61:\n            return False\n        if num == 62:\n            return False\n        if num == 63:\n            return False\n        if num == 64:\n            return True\n        if num == 65:\n            return False\n        if num == 66:\n            return False\n        if num == 67:\n            return False\n        if num == 68:\n            return False\n        if num == 69:\n            return False\n        if num == 70:\n            return False\n        if num == 71:\n            return False\n        if num == 72:\n            return False\n        if num == 73:\n            return False\n        if num == 74:\n            return False\n        if num == 75:\n            return False\n        if num == 76:\n            return False\n        if num == 77:\n            return False\n        if num == 78:"}, {"task_id": "valid-perfect-square", "completion": "class Solution(object):\n    def isPerfectSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u4e8c\u5206\u67e5\u627e\n        # 2. \u725b\u987f\u8fed\u4ee3\u6cd5\n        # 3. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 4. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u53162\n        # 5. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u53163\n        # 6. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u53164\n        # 7. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u53165\n        # 8. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u53166\n        # 9. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u53167\n        # 10. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u53168\n        # 11. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u53169\n        # 12. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531610\n        # 13. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531611\n        # 14. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531612\n        # 15. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531613\n        # 16. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531614\n        # 17. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531615\n        # 18. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531616\n        # 19. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531617\n        # 20. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531618\n        # 21. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531619\n        # 22. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531620\n        # 23. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531621\n        # 24. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531622\n        # 25. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531623\n        # 26. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531624\n        # 27. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531625\n        # 28. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531626\n        # 29. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531627\n        # 30. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531628\n        # 31. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531629\n        # 32. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531630\n        # 33. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531631\n        # 34. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531632\n        # 35. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531633\n        # 36. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531634\n        # 37. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531635\n        # 38. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531636\n        # 39. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531637\n        # 40. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u531638\n        # 41. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18"}], "counting-bits": [{"task_id": "counting-bits", "completion": "class Solution(object):\n    def countBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \n        # 2. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \n        # 3. \u4f4d\u8fd0\u7b97\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \n        # 4. \u9012\u5f52\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \n        # 5. \u9012\u63a8\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \n        # 6. \u4f4d\u8fd0\u7b97\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \n        # 7. \u9012\u5f52\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \n        # 8. \u9012\u63a8\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \n        # 9. \u4f4d\u8fd0\u7b97\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \n        # 10. \u9012\u5f52\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \n        # 11. \u9012\u63a8\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \n        # 12. \u4f4d\u8fd0\u7b97\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \n        # 13. \u9012\u5f52\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \n        # 14. \u9012\u63a8\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \n        # 15. \u4f4d\u8fd0\u7b97\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \n        # 16. \u9012\u5f52\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \n        # 17. \u9012\u63a8\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \n        # 18. \u4f4d\u8fd0\u7b97\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \n        # 19. \u9012\u5f52\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \n        # 20. \u9012\u63a8\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \n        # 21. \u4f4d\u8fd0\u7b97\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \n        #"}, {"task_id": "counting-bits", "completion": "class Solution(object):\n    def countBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \n        # 2. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \n        # 3. \u4f4d\u8fd0\u7b97\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \n        # 4. \u9012\u5f52\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \n        # 5. \u9012\u63a8\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \n        # 6. \u4f4d\u8fd0\u7b97\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \n        # 7. \u9012\u5f52\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \n        # 8. \u9012\u63a8\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \n        # 9. \u4f4d\u8fd0\u7b97\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \n        # 10. \u9012\u5f52\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \n        # 11. \u9012\u63a8\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \n        # 12. \u4f4d\u8fd0\u7b97\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \n        # 13. \u9012\u5f52\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \n        # 14. \u9012\u63a8\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \n        # 15. \u4f4d\u8fd0\u7b97\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \n        # 16. \u9012\u5f52\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \n        # 17. \u9012\u63a8\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \n        # 18. \u4f4d\u8fd0\u7b97\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \n        # 19. \u9012\u5f52\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \n        # 20. \u9012\u63a8\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \n        # 21. \u4f4d\u8fd0\u7b97\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \n        #"}, {"task_id": "counting-bits", "completion": "class Solution(object):\n    def countBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u8fd0\u884c\u65f6\u95f4\uff1a100ms\n        # \u8fd0\u884c\u5185\u5b58\uff1a13.7MB\n        res = []\n        for i in range(n + 1):\n            res.append(bin(i).count('1'))\n        return res\n\n        # 2. \u4f4d\u8fd0\u7b97\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u8fd0\u884c\u65f6\u95f4\uff1a48ms\n        # \u8fd0\u884c\u5185\u5b58\uff1a13.7MB\n        res = []\n        for i in range(n + 1):\n            res.append(bin(i).count('1'))\n        return res\n\n        # 3. \u4f4d\u8fd0\u7b97\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u8fd0\u884c\u65f6\u95f4\uff1a48ms\n        # \u8fd0\u884c\u5185\u5b58\uff1a13.7MB\n        res = []\n        for i in range(n + 1):\n            res.append(bin(i).count('1'))\n        return res\n\n        # 4. \u4f4d\u8fd0\u7b97\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u8fd0\u884c\u65f6\u95f4\uff1a48ms\n        # \u8fd0\u884c\u5185\u5b58\uff1a13.7MB\n        res = []\n        for i in range(n + 1):\n            res.append(bin(i).count('1'))\n        return res\n\n        # 5. \u4f4d\u8fd0\u7b97\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u8fd0\u884c\u65f6\u95f4\uff1a48ms\n        # \u8fd0\u884c\u5185\u5b58\uff1a13.7MB\n        res = []\n        for i in range(n + 1):\n            res.append(bin(i).count('1'))\n        return res\n\n        # 6. \u4f4d\u8fd0\u7b97\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u8fd0\u884c\u65f6\u95f4\uff1a48ms\n        # \u8fd0\u884c\u5185\u5b58\uff1a13.7MB\n        res = []\n        for i in range(n + 1):\n            res.append(bin(i).count('1'))\n        return res\n\n        # 7. \u4f4d\u8fd0\u7b97\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u8fd0\u884c\u65f6\u95f4\uff1a48ms\n        # \u8fd0\u884c\u5185\u5b58\uff1a13.7MB\n        res = []\n        for i in range(n + 1):\n            res.append(bin(i).count('1'))\n        return res\n\n        # 8. \u4f4d\u8fd0\u7b97\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u8fd0\u884c\u65f6\u95f4\uff1a48ms\n        # \u8fd0\u884c\u5185\u5b58\uff1a13.7MB\n        res = []\n        for i in range(n + 1):\n            res.append(bin(i).count('1'))\n        return res\n\n        # 9. \u4f4d\u8fd0\u7b97\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u8fd0\u884c\u65f6\u95f4\uff1a48ms\n        # \u8fd0\u884c\u5185\u5b58\uff1a13.7MB\n        res = []\n        for i in range(n + 1):\n            res.append(bin(i).count('1'))\n        return res\n\n        # 10. \u4f4d\u8fd0\u7b97\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u8fd0\u884c\u65f6\u95f4\uff1a48ms\n        # \u8fd0\u884c\u5185\u5b58\uff1a13.7MB\n        res = []\n        for i in range(n + 1"}, {"task_id": "counting-bits", "completion": "class Solution(object):\n    def countBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u8fd0\u884c\u65f6\u95f4\uff1a128 ms\t\u5185\u5b58\u6d88\u8017\uff1a13.7 MB\n        # \n        # 1 \u7684\u4e2a\u6570\n}, {"task_id": "counting-bits", "completion": "class Solution(object):\n    def countBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u8fd0\u884c\u65f6\u95f4\uff1a128 ms\t\u5185\u5b58\u6d88\u8017\uff1a13.7 MB\n        # \n        # 1. \u904d\u5386 0 ~ n\n        # 2. \u8ba1\u7b97\u6bcf\u4e2a\u6570\u5b57\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d 1 \u7684\u4e2a\u6570\n        # 3. \u5c06\u7ed3\u679c\u5b58\u5165\u5217\u8868\n        # 4. \u8fd4\u56de\u5217\u8868\n        # \n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u8fd0\u884c\u65f6\u95f4\uff1a128 ms\t\u5185\u5b58\u6d88\u8017\uff1a13.7 MB\n        # \n        # 1. \u904d\u5386 0 ~ n\n        # 2. \u8ba1\u7b97\u6bcf\u4e2a\u6570\u5b57\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d 1 \u7684\u4e2a\u6570\n        # 3. \u5c06\u7ed3\u679c\u5b58\u5165\u5217\u8868\n        # 4. \u8fd4\u56de\u5217\u8868\n        # \n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u8fd0\u884c\u65f6\u95f4\uff1a128 ms\t\u5185\u5b58\u6d88\u8017\uff1a13.7 MB\n        # \n        # 1. \u904d\u5386 0 ~ n\n        # 2. \u8ba1\u7b97\u6bcf\u4e2a\u6570\u5b57\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d 1 \u7684\u4e2a\u6570\n        # 3. \u5c06\u7ed3\u679c\u5b58\u5165\u5217\u8868\n        # 4. \u8fd4\u56de\u5217\u8868\n        # \n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u8fd0\u884c\u65f6\u95f4\uff1a128 ms\t\u5185\u5b58\u6d88\u8017\uff1a13.7 MB\n        # \n        # 1. \u904d\u5386 0 ~ n\n        # 2. \u8ba1\u7b97\u6bcf\u4e2a\u6570\u5b57\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d 1 \u7684\u4e2a\u6570\n        # 3. \u5c06\u7ed3\u679c\u5b58\u5165\u5217\u8868\n        # 4. \u8fd4\u56de\u5217\u8868\n        # \n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u8fd0\u884c\u65f6\u95f4\uff1a128 ms\t\u5185\u5b58\u6d88\u8017\uff1a13.7 MB\n        # \n        # 1. \u904d\u5386 0 ~ n\n        # 2. \u8ba1\u7b97\u6bcf\u4e2a\u6570\u5b57\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d 1 \u7684\u4e2a\u6570\n        # 3. \u5c06\u7ed3\u679c\u5b58\u5165\u5217\u8868\n        # 4. \u8fd4\u56de\u5217\u8868\n        # \n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u8fd0\u884c\u65f6\u95f4\uff1a128 ms\t\u5185\u5b58\u6d88\u8017\uff1a13.7 MB\n        # \n        # 1. \u904d\u5386 0 ~ n\n        # 2. \u8ba1\u7b97\u6bcf\u4e2a\u6570\u5b57\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d 1 \u7684\u4e2a\u6570\n        # 3. \u5c06\u7ed3\u679c\u5b58\u5165\u5217\u8868\n        # 4. \u8fd4\u56de\u5217\u8868\n        # \n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u8fd0\u884c\u65f6\u95f4\uff1a128 ms\t\u5185\u5b58\u6d88\u8017\uff1a13.7 MB\n        # \n        # 1. \u904d\u5386 0 ~ n\n        # 2. \u8ba1\u7b97\u6bcf\u4e2a\u6570\u5b57\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d 1 \u7684\u4e2a\u6570\n        # 3. \u5c06\u7ed3\u679c\u5b58\u5165\u5217\u8868\n        # 4. \u8fd4\u56de\u5217\u8868\n        # \n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u8fd0\u884c\u65f6\u95f4\uff1a128 ms\t\u5185\u5b58\u6d88\u8017\uff1a13.7 MB\n        # \n        # 1. \ufffd\ufffd\ufffd\ufffd\ufffd"}], "remove-linked-list-elements": [{"task_id": "remove-linked-list-elements", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # 1. Create a new head node\n        new_head = ListNode(0)\n        new_head.next = head\n        \n        # 2. Iterate through the list and remove nodes\n        prev = new_head\n        while prev.next:\n            if prev.next.val == val:\n                prev.next = prev.next.next\n            else:\n                prev = prev.next\n        \n        # 3. Return the new head\n        return new_head.next"}, {"task_id": "remove-linked-list-elements", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # 1. Create a dummy node\n        dummy = ListNode(0)\n        dummy.next = head\n        \n        # 2. Iterate through the list\n        prev = dummy\n        while prev.next:\n            if prev.next.val == val:\n                prev.next = prev.next.next\n            else:\n                prev = prev.next\n        \n        # 3. Return the new head\n        return dummy.next"}, {"task_id": "remove-linked-list-elements", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # 1. Create a new head node\n        new_head = ListNode(0)\n        new_head.next = head\n        \n        # 2. Iterate through the list and remove nodes\n        prev = new_head\n        while prev.next:\n            if prev.next.val == val:\n                prev.next = prev.next.next\n            else:\n                prev = prev.next\n        \n        # 3. Return the new head\n        return new_head.next"}, {"task_id": "remove-linked-list-elements", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # 1. Create a new head node\n        new_head = ListNode(0)\n        new_head.next = head\n        \n        # 2. Iterate through the list and remove the nodes\n        prev = new_head\n        while prev.next:\n            if prev.next.val == val:\n                prev.next = prev.next.next\n            else:\n                prev = prev.next\n        \n        # 3. Return the new head\n        return new_head.next"}, {"task_id": "remove-linked-list-elements", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # 1. Create a new head node\n        new_head = ListNode(0)\n        new_head.next = head\n        \n        # 2. Iterate through the list and remove nodes\n        prev = new_head\n        while prev.next:\n            if prev.next.val == val:\n                prev.next = prev.next.next\n            else:\n                prev = prev.next\n        \n        # 3. Return the new head\n        return new_head.next"}], "scramble-string": [{"task_id": "scramble-string", "completion": "class Solution(object):\n    def isScramble(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        \n        if s1 == s2:\n            return True\n        if len(s1) != len(s2):\n            return False\n        if sorted(s1) != sorted(s2):\n            return False\n        for i in range(1, len(s1)):\n            if self.isScramble(s1[:i], s2[:i]) and self.isScramble(s1[i:], s2[i:]):\n                return True\n            if self.isScramble(s1[:i], s2[-i:]) and self.isScramble(s1[i:], s2[:-i]):\n                return True\n        return False"}, {"task_id": "scramble-string", "completion": "class Solution(object):\n    def isScramble(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        \n        if s1 == s2:\n            return True\n        if len(s1) != len(s2):\n            return False\n        if sorted(s1) != sorted(s2):\n            return False\n        for i in range(1, len(s1)):\n            if self.isScramble(s1[:i], s2[:i]) and self.isScramble(s1[i:], s2[i:]):\n                return True\n            if self.isScramble(s1[:i], s2[-i:]) and self.isScramble(s1[i:], s2[:-i]):\n                return True\n        return False"}, {"task_id": "scramble-string", "completion": "class Solution(object):\n    def isScramble(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        \n        if s1 == s2:\n            return True\n        if len(s1) != len(s2):\n            return False\n        if sorted(s1) != sorted(s2):\n            return False\n        for i in range(1, len(s1)):\n            if self.isScramble(s1[:i], s2[:i]) and self.isScramble(s1[i:], s2[i:]):\n                return True\n            if self.isScramble(s1[:i], s2[-i:]) and self.isScramble(s1[i:], s2[:-i]):\n                return True\n        return False"}, {"task_id": "scramble-string", "completion": "class Solution(object):\n    def isScramble(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        \n        if s1 == s2:\n            return True\n        if len(s1) != len(s2):\n            return False\n        if sorted(s1) != sorted(s2):\n            return False\n        for i in range(1, len(s1)):\n            if self.isScramble(s1[:i], s2[:i]) and self.isScramble(s1[i:], s2[i:]):\n                return True\n            if self.isScramble(s1[:i], s2[-i:]) and self.isScramble(s1[i:], s2[:-i]):\n                return True\n        return False"}, {"task_id": "scramble-string", "completion": "class Solution(object):\n    def isScramble(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        \n        if s1 == s2:\n            return True\n        if len(s1) != len(s2):\n            return False\n        if sorted(s1) != sorted(s2):\n            return False\n        for i in range(1, len(s1)):\n            if self.isScramble(s1[:i], s2[:i]) and self.isScramble(s1[i:], s2[i:]):\n                return True\n            if self.isScramble(s1[:i], s2[-i:]) and self.isScramble(s1[i:], s2[:-i]):\n                return True\n        return False"}], "simplify-path": [{"task_id": "simplify-path", "completion": "class Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. split the path into a list of strings\n        # 2. remove the empty strings\n        # 3. remove the '.'\n        # 4. remove the '..'\n        # 5. join the list of strings into a string\n        # 6. return the string\n        \n        path = path.split('/')\n        path = [x for x in path if x != '']\n        path = [x for x in path if x != '.']\n        path = [x for x in path if x != '..']\n        path = '/' + '/'.join(path)\n        return path"}, {"task_id": "simplify-path", "completion": "class Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. split path by '/'\n        # 2. remove '.' and ''\n        # 3. remove '..'\n        # 4. join the path\n        # 5. return the path\n        \n        path_list = path.split('/')\n        path_list = [x for x in path_list if x != '.' and x != '']\n        path_list = [x for x in path_list if x != '..']\n        path = '/' + '/'.join(path_list)\n        return path"}, {"task_id": "simplify-path", "completion": "class Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. split path by '/'\n        # 2. remove '.' and ''\n        # 3. remove '..'\n        # 4. join the path\n        # 5. return the path\n        \n        path_list = path.split('/')\n        path_list = [x for x in path_list if x != '.' and x != '']\n        path_list = [x for x in path_list if x != '..']\n        path = '/' + '/'.join(path_list)\n        return path"}, {"task_id": "simplify-path", "completion": "class Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. split path by '/'\n        # 2. remove '.' and ''\n        # 3. remove '..'\n        # 4. join the path\n        # 5. return the path\n        \n        path_list = path.split('/')\n        path_list = [x for x in path_list if x != '.' and x != '']\n        path_list = [x for x in path_list if x != '..']\n        path = '/' + '/'.join(path_list)\n        return path"}, {"task_id": "simplify-path", "completion": "class Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. split the path into a list of strings\n        # 2. remove the empty strings\n        # 3. remove the '.'\n        # 4. remove the '..'\n        # 5. join the list of strings into a string\n        # 6. return the string\n        \n        path_list = path.split('/')\n        path_list = [x for x in path_list if x != '']\n        path_list = [x for x in path_list if x != '.']\n        path_list = [x for x in path_list if x != '..']\n        path = '/' + '/'.join(path_list)\n        return path"}], "word-search-ii": [{"task_id": "word-search-ii", "completion": "class Solution(object):\n    def findWords(self, board, words):\n        \"\"\"\n        :type board: List[List[str]]\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        def dfs(board, word, i, j, index):\n            if index == len(word):\n                return True\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != word[index]:\n                return False\n            board[i][j] = '#'\n            res = dfs(board, word, i+1, j, index+1) or dfs(board, word, i-1, j, index+1) or dfs(board, word, i, j+1, index+1) or dfs(board, word, i, j-1, index+1)\n            board[i][j] = word[index]\n            return res\n        \n        res = []\n        for word in words:\n            for i in range(len(board)):\n                for j in range(len(board[0])):\n                    if dfs(board, word, i, j, 0):\n                        res.append(word)\n        return res"}, {"task_id": "word-search-ii", "completion": "class Solution(object):\n    def findWords(self, board, words):\n        \"\"\"\n        :type board: List[List[str]]\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        def dfs(board, word, i, j, index):\n            if index == len(word):\n                return True\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != word[index]:\n                return False\n            board[i][j] = '#'\n            res = dfs(board, word, i+1, j, index+1) or dfs(board, word, i-1, j, index+1) or dfs(board, word, i, j+1, index+1) or dfs(board, word, i, j-1, index+1)\n            board[i][j] = word[index]\n            return res\n        \n        res = []\n        for word in words:\n            for i in range(len(board)):\n                for j in range(len(board[0])):\n                    if dfs(board, word, i, j, 0):\n                        res.append(word)\n        return res"}, {"task_id": "word-search-ii", "completion": "class Solution(object):\n    def findWords(self, board, words):\n        \"\"\"\n        :type board: List[List[str]]\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        def dfs(board, word, i, j, index):\n            if index == len(word):\n                return True\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != word[index]:\n                return False\n            board[i][j] = '#'\n            res = dfs(board, word, i+1, j, index+1) or dfs(board, word, i-1, j, index+1) or dfs(board, word, i, j+1, index+1) or dfs(board, word, i, j-1, index+1)\n            board[i][j] = word[index]\n            return res\n        \n        res = []\n        for word in words:\n            for i in range(len(board)):\n                for j in range(len(board[0])):\n                    if dfs(board, word, i, j, 0):\n                        res.append(word)\n        return res"}, {"task_id": "word-search-ii", "completion": "class Solution(object):\n    def findWords(self, board, words):\n        \"\"\"\n        :type board: List[List[str]]\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        def dfs(board, word, i, j, index):\n            if index == len(word):\n                return True\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != word[index]:\n                return False\n            board[i][j] = '#'\n            res = dfs(board, word, i-1, j, index+1) or dfs(board, word, i+1, j, index+1) or dfs(board, word, i, j-1, index+1) or dfs(board, word, i, j+1, index+1)\n            board[i][j] = word[index]\n            return res\n        \n        res = []\n        for word in words:\n            for i in range(len(board)):\n                for j in range(len(board[0])):\n                    if dfs(board, word, i, j, 0):\n                        res.append(word)\n        return res"}, {"task_id": "word-search-ii", "completion": "class Solution(object):\n    def findWords(self, board, words):\n        \"\"\"\n        :type board: List[List[str]]\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        def dfs(board, word, i, j, index):\n            if index == len(word):\n                return True\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != word[index]:\n                return False\n            board[i][j] = '#'\n            res = dfs(board, word, i+1, j, index+1) or dfs(board, word, i-1, j, index+1) or dfs(board, word, i, j+1, index+1) or dfs(board, word, i, j-1, index+1)\n            board[i][j] = word[index]\n            return res\n        \n        res = []\n        for word in words:\n            for i in range(len(board)):\n                for j in range(len(board[0])):\n                    if dfs(board, word, i, j, 0):\n                        res.append(word)\n        return res"}], "valid-anagram": [{"task_id": "valid-anagram", "completion": "class Solution(object):\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_dict = {}\n        t_dict = {}\n        \n        for char in s:\n            if char in s_dict:\n                s_dict[char] += 1\n            else:\n                s_dict[char] = 1\n        \n        for char in t:\n            if char in t_dict:\n                t_dict[char] += 1\n            else:\n                t_dict[char] = 1\n        \n        for key in s_dict:\n            if key in t_dict:\n                if s_dict[key] != t_dict[key]:\n                    return False\n            else:\n                return False\n        \n        return True"}, {"task_id": "valid-anagram", "completion": "class Solution(object):\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_dict = {}\n        t_dict = {}\n        \n        for i in range(len(s)):\n            if s[i] in s_dict:\n                s_dict[s[i]] += 1\n            else:\n                s_dict[s[i]] = 1\n                \n            if t[i] in t_dict:\n                t_dict[t[i]] += 1\n            else:\n                t_dict[t[i]] = 1\n                \n        for key in s_dict:\n            if key in t_dict:\n                if s_dict[key] != t_dict[key]:\n                    return False\n            else:\n                return False\n        \n        return True"}, {"task_id": "valid-anagram", "completion": "class Solution(object):\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_dict = {}\n        t_dict = {}\n        \n        for char in s:\n            if char in s_dict:\n                s_dict[char] += 1\n            else:\n                s_dict[char] = 1\n        \n        for char in t:\n            if char in t_dict:\n                t_dict[char] += 1\n            else:\n                t_dict[char] = 1\n        \n        for key in s_dict:\n            if key in t_dict:\n                if s_dict[key] != t_dict[key]:\n                    return False\n            else:\n                return False\n        \n        return True"}, {"task_id": "valid-anagram", "completion": "class Solution(object):\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_dict = {}\n        t_dict = {}\n        \n        for i in range(len(s)):\n            if s[i] in s_dict:\n                s_dict[s[i]] += 1\n            else:\n                s_dict[s[i]] = 1\n            \n            if t[i] in t_dict:\n                t_dict[t[i]] += 1\n            else:\n                t_dict[t[i]] = 1\n        \n        for key in s_dict:\n            if key in t_dict:\n                if s_dict[key] != t_dict[key]:\n                    return False\n            else:\n                return False\n        \n        return True"}, {"task_id": "valid-anagram", "completion": "class Solution(object):\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_dict = {}\n        t_dict = {}\n        \n        for char in s:\n            if char in s_dict:\n                s_dict[char] += 1\n            else:\n                s_dict[char] = 1\n        \n        for char in t:\n            if char in t_dict:\n                t_dict[char] += 1\n            else:\n                t_dict[char] = 1\n        \n        for key in s_dict:\n            if key in t_dict:\n                if s_dict[key] != t_dict[key]:\n                    return False\n            else:\n                return False\n        \n        return True"}], "valid-sudoku": [{"task_id": "valid-sudoku", "completion": "class Solution(object):\n    def isValidSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        \n        # check rows\n        for i in range(9):\n            row = set()\n            for j in range(9):\n                if board[i][j] != '.':\n                    if board[i][j] in row:\n                        return False\n                    else:\n                        row.add(board[i][j])\n        \n        # check columns\n        for i in range(9):\n            col = set()\n            for j in range(9):\n                if board[j][i] != '.':\n                    if board[j][i] in col:\n                        return False\n                    else:\n                        col.add(board[j][i])\n        \n        # check 3x3 sub-boxes\n        for i in range(3):\n            for j in range(3):\n                sub_box = set()\n                for k in range(3):\n                    for l in range(3):\n                        if board[i*3+k][j*3+l] != '.':\n                            if board[i*3+k][j*3+l] in sub_box:\n                                return False\n                            else:\n                                sub_box.add(board[i*3+k][j*3+l])\n        \n        return True"}, {"task_id": "valid-sudoku", "completion": "class Solution(object):\n    def isValidSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        \n        # check rows\n        for row in board:\n            if not self.isValid(row):\n                return False\n        \n        # check columns\n        for col in zip(*board):\n            if not self.isValid(col):\n                return False\n        \n        # check sub-boxes\n        for i in range(0, 9, 3):\n            for j in range(0, 9, 3):\n                sub_box = []\n                for k in range(i, i + 3):\n                    for l in range(j, j + 3):\n                        sub_box.append(board[k][l])\n                if not self.isValid(sub_box):\n                    return False\n        \n        return True\n    \n    def isValid(self, row):\n        row = [int(x) for x in row if x != '.']\n        return len(row) == len(set(row))"}, {"task_id": "valid-sudoku", "completion": "class Solution(object):\n    def isValidSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        \n        # check rows\n        for row in board:\n            if not self.isValid(row):\n                return False\n        \n        # check columns\n        for col in zip(*board):\n            if not self.isValid(col):\n                return False\n        \n        # check sub-boxes\n        for i in range(0, 9, 3):\n            for j in range(0, 9, 3):\n                sub_box = []\n                for k in range(i, i + 3):\n                    for l in range(j, j + 3):\n                        sub_box.append(board[k][l])\n                if not self.isValid(sub_box):\n                    return False\n        \n        return True\n    \n    def isValid(self, row):\n        row = [int(x) for x in row if x != '.']\n        return len(row) == len(set(row))"}, {"task_id": "valid-sudoku", "completion": "class Solution(object):\n    def isValidSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        \n        # check rows\n        for row in board:\n            if not self.isValid(row):\n                return False\n        \n        # check columns\n        for col in zip(*board):\n            if not self.isValid(col):\n                return False\n        \n        # check sub-boxes\n        for i in range(0, 9, 3):\n            for j in range(0, 9, 3):\n                sub_box = []\n                for k in range(i, i + 3):\n                    for l in range(j, j + 3):\n                        sub_box.append(board[k][l])\n                if not self.isValid(sub_box):\n                    return False\n        \n        return True\n    \n    def isValid(self, row):\n        row = [int(x) for x in row if x != '.']\n        return len(row) == len(set(row))"}, {"task_id": "valid-sudoku", "completion": "class Solution(object):\n    def isValidSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        \n        # check rows\n        for row in board:\n            if not self.isValidRow(row):\n                return False\n        \n        # check columns\n        for col in zip(*board):\n            if not self.isValidRow(col):\n                return False\n        \n        # check sub-boxes\n        for i in range(0, 9, 3):\n            for j in range(0, 9, 3):\n                sub_box = []\n                for k in range(i, i + 3):\n                    for l in range(j, j + 3):\n                        sub_box.append(board[k][l])\n                if not self.isValidRow(sub_box):\n                    return False\n        \n        return True\n    \n    def isValidRow(self, row):\n        row = [int(x) for x in row if x != '.']\n        return len(row) == len(set(row))"}], "fizz-buzz": [{"task_id": "fizz-buzz", "completion": "class Solution(object):\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \u666e\u901a\u7684\u5faa\u73af\n        # res = []\n        # for i in range(1, n+1):\n        #     if i % 3 == 0 and i % 5 == 0:\n        #         res.append('FizzBuzz')\n        #     elif i % 3 == 0:\n        #         res.append('Fizz')\n        #     elif i % 5 == 0:\n        #         res.append('Buzz')\n        #     else:\n        #         res.append(str(i))\n        # return res\n        \n        # 2. \u4f7f\u7528\u5b57\u5178\n        # res = []\n        # d = {3: 'Fizz', 5: 'Buzz'}\n        # for i in range(1, n+1):\n        #     res.append(str(i))\n        #     for k, v in d.items():\n        #         if i % k == 0:\n        #             res[-1] = v\n        # return res\n        \n        # 3. \u4f7f\u7528\u5b57\u5178\n        # res = []\n        # d = {3: 'Fizz', 5: 'Buzz'}\n        # for i in range(1, n+1):\n        #     res.append(str(i))\n        #     for k, v in d.items():\n        #         if i % k == 0:\n        #             res[-1] = v\n        # return res\n        \n        # 4. \u4f7f\u7528\u5b57\u5178\n        # res = []\n        # d = {3: 'Fizz', 5: 'Buzz'}\n        # for i in range(1, n+1):\n        #     res.append(str(i))\n        #     for k, v in d.items():\n        #         if i % k == 0:\n        #             res[-1] = v\n        # return res\n        \n        # 5. \u4f7f\u7528\u5b57\u5178\n        # res = []\n        # d = {3: 'Fizz', 5: 'Buzz'}\n        # for i in range(1, n+1):\n        #     res.append(str(i))\n        #     for k, v in d.items():\n        #         if i % k == 0:\n        #             res[-1] = v\n        # return res\n        \n        # 6. \u4f7f\u7528\u5b57\u5178\n        # res = []\n        # d = {3: 'Fizz', 5: 'Buzz'}\n        # for i in range(1, n+1):\n        #     res.append(str(i))\n        #     for k, v in d.items():\n        #         if i % k == 0:\n        #             res[-1] = v\n        # return res\n        \n        # 7. \u4f7f\u7528\u5b57\u5178\n        # res = []\n        # d = {3: 'Fizz', 5: 'Buzz'}\n        # for i in range(1, n+1):\n        #     res.append(str(i))\n        #     for k, v in d.items():\n        #         if i % k == 0:\n        #             res[-1] = v\n        # return res\n        \n        # 8. \u4f7f\u7528\u5b57\u5178\n        # res = []\n        # d = {3: 'Fizz', 5: 'Buzz'}\n        # for i in range(1, n+1):\n        #     res.append(str(i))\n        #     for k, v in d.items():\n        #         if i % k == 0:\n        #             res[-1] = v\n        # return res\n        \n        # 9. \u4f7f\u7528\u5b57\u5178\n        # res = []\n        # d = {3: 'Fizz', 5: 'Buzz'}\n        # for i in range(1, n+1):\n        #     res.append(str(i))\n        #     for k, v in d.items():\n        #         if i % k == 0:\n        #             res[-1] = v\n        # return res\n        \n        # 10. \u4f7f\u7528\u5b57\u5178\n        # res = []\n        # d = {3: 'Fizz', 5: 'Buzz'}\n        # for i in range(1, n"}, {"task_id": "fizz-buzz", "completion": "class Solution(object):\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \u666e\u901a\u7684\u5faa\u73af\n        # 2. \u4f7f\u7528range()\n        # 3. \u4f7f\u7528list comprehension\n        # 4. \u4f7f\u7528map()\n        # 5. \u4f7f\u7528filter()\n        # 6. \u4f7f\u7528lambda\n        # 7. \u4f7f\u7528map() + lambda\n        # 8. \u4f7f\u7528map() + lambda + \u533f\u540d\u51fd\u6570\n        # 9. \u4f7f\u7528map() + lambda + \u533f\u540d\u51fd\u6570 + \u5d4c\u5957\u51fd\u6570\n        # 10. \u4f7f\u7528map() + lambda + \u533f\u540d\u51fd\u6570 + \u5d4c\u5957\u51fd\u6570 + \u5d4c\u5957\u533f\u540d\u51fd\u6570\n        # 11. \u4f7f\u7528map() + lambda + \u533f\u540d\u51fd\u6570 + \u5d4c\u5957\u51fd\u6570 + \u5d4c\u5957\u533f\u540d\u51fd\u6570 + \u5d4c\u5957\u533f\u540d\u51fd\u6570\n        # 12. \u4f7f\u7528map() + lambda + \u533f\u540d\u51fd\u6570 + \u5d4c\u5957\u51fd\u6570 + \u5d4c\u5957\u533f\u540d\u51fd\u6570 + \u5d4c\u5957\u533f\u540d\u51fd\u6570 + \u5d4c\u5957\u533f\u540d\u51fd\u6570\n        # 13. \u4f7f\u7528map() + lambda + \u533f\u540d\u51fd\u6570 + \u5d4c\u5957\u51fd\u6570 + \u5d4c\u5957\u533f\u540d\u51fd\u6570 + \u5d4c\u5957\u533f\u540d\u51fd\u6570 + \u5d4c\u5957\u533f\u540d\u51fd\u6570 + \u5d4c\u5957\u533f\u540d\u51fd\u6570\n        # 14. \u4f7f\u7528map() + lambda + \u533f\u540d\u51fd\u6570 + \u5d4c\u5957\u51fd\u6570 + \u5d4c\u5957\u533f\u540d\u51fd\u6570 + \u5d4c\u5957\u533f\u540d\u51fd\u6570 + \u5d4c\u5957\u533f\u540d\u51fd\u6570 + \u5d4c\u5957\u533f\u540d\u51fd\u6570 + \u5d4c\u5957\u533f\u540d\u51fd\u6570\n        # 15. \u4f7f\u7528map() + lambda + \u533f\u540d\u51fd\u6570 + \u5d4c\u5957\u51fd\u6570 + \u5d4c\u5957\u533f\u540d\u51fd\u6570 + \u5d4c\u5957\u533f\u540d\u51fd\u6570 + \u5d4c\u5957\u533f\u540d\u51fd\u6570 + \u5d4c\u5957\u533f\u540d\u51fd\u6570 + \u5d4c\u5957\u533f\u540d\u51fd\u6570 + \u5d4c\u5957\u533f\u540d\u51fd\u6570\n        # 16. \u4f7f\u7528map() + lambda + \u533f\u540d\u51fd\u6570 + \u5d4c\u5957\u51fd\u6570 + \u5d4c\u5957\u533f\u540d\u51fd\u6570 + \u5d4c\u5957\u533f\u540d\u51fd\u6570 + \u5d4c\u5957\u533f\u540d\u51fd\u6570 + \u5d4c\u5957\u533f\u540d\u51fd\u6570 + \u5d4c\u5957\u533f\u540d\u51fd\u6570 + \u5d4c\u5957\u533f\u540d\u51fd\u6570 + \u5d4c\u5957\u533f\u540d\u51fd\u6570\n        # 17. \u4f7f\u7528map() + lambda + \u533f\u540d\u51fd\u6570 + \u5d4c\u5957\u51fd\u6570 + \u5d4c\u5957\u533f\u540d\u51fd\u6570 + \u5d4c\u5957\u533f\u540d\u51fd\u6570 + \u5d4c\u5957\u533f\u540d\u51fd\u6570 + \u5d4c\u5957\u533f\u540d\u51fd\u6570 + \u5d4c\u5957\u533f\u540d\u51fd\u6570 + \u5d4c\u5957\u533f\u540d\u51fd\u6570 + \u5d4c\u5957\u533f\u540d\u51fd\u6570 + \u5d4c\u5957\u533f\u540d\u51fd\u6570\n        # 18. \u4f7f\u7528map() + lambda + \u533f\u540d\u51fd\u6570 + \u5d4c\u5957\u51fd\u6570 + \u5d4c\u5957\u533f\u540d\u51fd\u6570 + \u5d4c\u5957\u533f\u540d\u51fd\u6570 + \u5d4c\u5957\u533f\u540d\u51fd\u6570 + \u5d4c\u5957\u533f\u540d\u51fd\u6570 + \u5d4c\u5957\u533f\u540d\u51fd\u6570 + \u5d4c\u5957\u533f\u540d\u51fd\u6570 + \u5d4c\u5957\u533f"}, {"task_id": "fizz-buzz", "completion": "class Solution(object):\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \u666e\u901a\u7684\u5faa\u73af\n        # 2. \u4f7f\u7528range()\u51fd\u6570\n        # 3. \u4f7f\u7528list comprehension\n        # 4. \u4f7f\u7528map()\u51fd\u6570\n        # 5. \u4f7f\u7528filter()\u51fd\u6570\n        # 6. \u4f7f\u7528lambda\u8868\u8fbe\u5f0f\n        # 7. \u4f7f\u7528map()\u51fd\u6570\n        # 8. \u4f7f\u7528list comprehension\n        # 9. \u4f7f\u7528map()\u51fd\u6570\n        # 10. \u4f7f\u7528list comprehension\n        # 11. \u4f7f\u7528map()\u51fd\u6570\n        # 12. \u4f7f\u7528list comprehension\n        # 13. \u4f7f\u7528map()\u51fd\u6570\n        # 14. \u4f7f\u7528list comprehension\n        # 15. \u4f7f\u7528map()\u51fd\u6570\n        # 16. \u4f7f\u7528list comprehension\n        # 17. \u4f7f\u7528map()\u51fd\u6570\n        # 18. \u4f7f\u7528list comprehension\n        # 19. \u4f7f\u7528map()\u51fd\u6570\n        # 20. \u4f7f\u7528list comprehension\n        # 21. \u4f7f\u7528map()\u51fd\u6570\n        # 22. \u4f7f\u7528list comprehension\n        # 23. \u4f7f\u7528map()\u51fd\u6570\n        # 24. \u4f7f\u7528list comprehension\n        # 25. \u4f7f\u7528map()\u51fd\u6570\n        # 26. \u4f7f\u7528list comprehension\n        # 27. \u4f7f\u7528map()\u51fd\u6570\n        # 28. \u4f7f\u7528list comprehension\n        # 29. \u4f7f\u7528map()\u51fd\u6570\n        # 30. \u4f7f\u7528list comprehension\n        # 31. \u4f7f\u7528map()\u51fd\u6570\n        # 32. \u4f7f\u7528list comprehension\n        # 33. \u4f7f\u7528map()\u51fd\u6570\n        # 34. \u4f7f\u7528list comprehension\n        # 35. \u4f7f\u7528map()\u51fd\u6570\n        # 36. \u4f7f\u7528list comprehension\n        # 37. \u4f7f\u7528map()\u51fd\u6570\n        # 38. \u4f7f\u7528list comprehension\n        # 39. \u4f7f\u7528map()\u51fd\u6570\n        # 40. \u4f7f\u7528list comprehension\n        # 41. \u4f7f\u7528map()\u51fd\u6570\n        # 42. \u4f7f\u7528list comprehension\n        # 43. \u4f7f\u7528map()\u51fd\u6570\n        # 44. \u4f7f\u7528list comprehension\n        # 45. \u4f7f\u7528map()\u51fd\u6570\n        # 46. \u4f7f\u7528list comprehension\n        # 47. \u4f7f\u7528map()\u51fd\u6570\n        # 48. \u4f7f\u7528list comprehension\n        # 49. \u4f7f\u7528map()\u51fd\u6570\n        # 50. \u4f7f\u7528list comprehension\n        # 51. \u4f7f\u7528map()\u51fd\u6570\n        # 52. \u4f7f\u7528list comprehension\n        # 53. \u4f7f\u7528map()\u51fd\u6570\n        # 54. \u4f7f\u7528list comprehension\n        # 55. \u4f7f\u7528map()\u51fd\u6570\n        # 56. \u4f7f\u7528list comprehension\n        # 57. \u4f7f\u7528map()\u51fd\u6570\n        # 58. \u4f7f\u7528list comprehension\n        # 59. \u4f7f\u7528map()\u51fd\u6570\n        # 60. \u4f7f\u7528list comprehension\n        # 61. \u4f7f\u7528map()\u51fd\u6570\n        # 62. \u4f7f\u7528list comprehension\n        # 63. \u4f7f\u7528map()\u51fd\u6570\n        # 64. \u4f7f\u7528list comprehension\n        # 65. \u4f7f\u7528map()\u51fd\u6570\n        # 66. \u4f7f\u7528list comprehension\n        # 67. \u4f7f\u7528map()\u51fd\u6570\n        # 68. \u4f7f\u7528list comprehension\n        # 69. \u4f7f\u7528map()\u51fd\u6570\n        # 70. \u4f7f\u7528list comprehension\n        # 71. \u4f7f\u7528map()\u51fd\u6570\n        # 72. \u4f7f\u7528list comprehension\n        # 73. \u4f7f\u7528map()\u51fd\u6570\n        # 74. \u4f7f\u7528list comprehension\n        # 75. \u4f7f\u7528map()\u51fd\u6570\n        # 76. \u4f7f\u7528list comprehension"}, {"task_id": "fizz-buzz", "completion": "class Solution(object):\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.87%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237\n\n        # res = []\n        # for i in range(1, n+1):\n        #     if i % 3 == 0 and i % 5 == 0:\n        #         res.append('FizzBuzz')\n        #     elif i % 3 == 0:\n        #         res.append('Fizz')\n        #     elif i % 5 == 0:\n        #         res.append('Buzz')\n        #     else:\n        #         res.append(str(i))\n        # return res\n\n        # 2. \u4f18\u5316\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.87%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237\n\n        res = []\n        for i in range(1, n+1):\n            if i % 3 == 0 and i % 5 == 0:\n                res.append('FizzBuzz')\n            elif i % 3 == 0:\n                res.append('Fizz')\n            elif i % 5 == 0:\n                res.append('Buzz')\n            else:\n                res.append(str(i))\n        return res\n\n        # 3. \u4f18\u5316\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.87%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237\n\n        # res = []\n        # for i in range(1, n+1):\n        #     if i % 3 == 0 and i % 5 == 0:\n        #         res.append('FizzBuzz')\n        #     elif i % 3 == 0:\n        #         res.append('Fizz')\n        #     elif i % 5 == 0:\n        #         res.append('Buzz')\n        #     else:\n        #         res.append(str(i))\n        # return res\n\n        # 4. \u4f18\u5316\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.87%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237\n\n        res = []\n        for i in range(1, n+1):\n            if i % 3 == 0 and i % 5 == 0:\n                res.append('FizzBuzz')\n            elif i % 3 == 0:\n                res.append('Fizz')\n            elif i % 5 == 0:\n                res.append('Buzz')\n            else:\n                res.append(str(i))\n        return res\n\n        # 5. \u4f18\u5316\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3"}, {"task_id": "fizz-buzz", "completion": "class Solution(object):\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \u666e\u901a\u7684\u5faa\u73af\n        # res = []\n        # for i in range(1, n+1):\n        #     if i % 3 == 0 and i % 5 == 0:\n        #         res.append('FizzBuzz')\n        #     elif i % 3 == 0:\n        #         res.append('Fizz')\n        #     elif i % 5 == 0:\n        #         res.append('Buzz')\n        #     else:\n        #         res.append(str(i))\n        # return res\n        \n        # 2. \u4f7f\u7528\u5b57\u5178\n        # res = []\n        # d = {3: 'Fizz', 5: 'Buzz'}\n        # for i in range(1, n+1):\n        #     res.append(str(i))\n        #     for k, v in d.items():\n        #         if i % k == 0:\n        #             res[-1] = v\n        # return res\n        \n        # 3. \u4f7f\u7528\u5b57\u5178\n        # res = []\n        # d = {3: 'Fizz', 5: 'Buzz'}\n        # for i in range(1, n+1):\n        #     res.append(str(i))\n        #     for k, v in d.items():\n        #         if i % k == 0:\n        #             res[-1] = v\n        # return res\n        \n        # 4. \u4f7f\u7528\u5b57\u5178\n        # res = []\n        # d = {3: 'Fizz', 5: 'Buzz'}\n        # for i in range(1, n+1):\n        #     res.append(str(i))\n        #     for k, v in d.items():\n        #         if i % k == 0:\n        #             res[-1] = v\n        # return res\n        \n        # 5. \u4f7f\u7528\u5b57\u5178\n        # res = []\n        # d = {3: 'Fizz', 5: 'Buzz'}\n        # for i in range(1, n+1):\n        #     res.append(str(i))\n        #     for k, v in d.items():\n        #         if i % k == 0:\n        #             res[-1] = v\n        # return res\n        \n        # 6. \u4f7f\u7528\u5b57\u5178\n        # res = []\n        # d = {3: 'Fizz', 5: 'Buzz'}\n        # for i in range(1, n+1):\n        #     res.append(str(i))\n        #     for k, v in d.items():\n        #         if i % k == 0:\n        #             res[-1] = v\n        # return res\n        \n        # 7. \u4f7f\u7528\u5b57\u5178\n        # res = []\n        # d = {3: 'Fizz', 5: 'Buzz'}\n        # for i in range(1, n+1):\n        #     res.append(str(i))\n        #     for k, v in d.items():\n        #         if i % k == 0:\n        #             res[-1] = v\n        # return res\n        \n        # 8. \u4f7f\u7528\u5b57\u5178\n        # res = []\n        # d = {3: 'Fizz', 5: 'Buzz'}\n        # for i in range(1, n+1):\n        #     res.append(str(i))\n        #     for k, v in d.items():\n        #         if i % k == 0:\n        #             res[-1] = v\n        # return res\n        \n        # 9. \u4f7f\u7528\u5b57\u5178\n        # res = []\n        # d = {3: 'Fizz', 5: 'Buzz'}\n        # for i in range(1, n+1):\n        #     res.append(str(i))\n        #     for k, v in d.items():\n        #         if i % k == 0:\n        #             res[-1] = v\n        # return res\n        \n        # 10. \u4f7f\u7528\u5b57\u5178\n        # res = []\n        # d = {3: 'Fizz', 5: 'Buzz'}\n        # for i in range(1, n"}], "reverse-words-in-a-string": [{"task_id": "reverse-words-in-a-string", "completion": "class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # split the string into words\n        words = s.split()\n        \n        # reverse the words\n        words.reverse()\n        \n        # join the words back together\n        return ' '.join(words)"}, {"task_id": "reverse-words-in-a-string", "completion": "class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. split the string into words\n        # 2. reverse the words\n        # 3. join the words\n        # 4. remove the extra spaces\n        # 5. return the string\n        \n        # split the string into words\n        words = s.split()\n        \n        # reverse the words\n        words.reverse()\n        \n        # join the words\n        s = ' '.join(words)\n        \n        # remove the extra spaces\n        s = s.strip()\n        \n        # return the string\n        return s"}, {"task_id": "reverse-words-in-a-string", "completion": "class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # split the string into words\n        words = s.split()\n        \n        # reverse the words\n        words.reverse()\n        \n        # join the words back together\n        return ' '.join(words)"}, {"task_id": "reverse-words-in-a-string", "completion": "class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # split the string into words\n        words = s.split()\n        \n        # reverse the words\n        words.reverse()\n        \n        # join the words back together\n        return ' '.join(words)"}, {"task_id": "reverse-words-in-a-string", "completion": "class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. split the string into words\n        # 2. reverse the words\n        # 3. join the words\n        # 4. remove the extra spaces\n        # 5. return the string\n        \n        words = s.split()\n        words.reverse()\n        s = ' '.join(words)\n        s = s.strip()\n        return s"}], "excel-sheet-column-number": [{"task_id": "excel-sheet-column-number", "completion": "class Solution(object):\n    def titleToNumber(self, columnTitle):\n        \"\"\"\n        :type columnTitle: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u5b57\u6bcd\n        # 2. \u627e\u5230\u5b57\u6bcd\u5728\u5b57\u6bcd\u8868\u4e2d\u7684\u4f4d\u7f6e\n        # 3. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 4. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 5. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 6. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 7. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 8. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 9. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 10. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 11. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 12. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 13. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 14. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 15. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 16. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 17. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 18. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 19. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 20. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 21. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 22. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 23. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 24. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 25. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 26. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 27. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 28. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 29. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 30. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 31. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 32. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 33. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 34. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 35. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 36. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 37. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 38. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 39. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 40. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 41. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 42. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 43. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 44. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 45. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 46. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 47. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 48. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 49. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 50. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 51. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 52. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 53. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 54. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 55. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 56. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 57. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        #"}, {"task_id": "excel-sheet-column-number", "completion": "class Solution(object):\n    def titleToNumber(self, columnTitle):\n        \"\"\"\n        :type columnTitle: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u672b\u5c3e\u5b57\u6bcd\u7684ASCII\u7801 - 64\n        # 2. \u524d\u9762\u5b57\u6bcd\u7684ASCII\u7801 * 26\n        # 3. \u603b\u548c\n        # 4. \u51cf\u53bb1\n        # 5. \u8fd4\u56de\n        # 6. \u5faa\u73af\n        # 7. \u8fd4\u56de\n        # 8. \u8fd4\u56de\n        # 9. \u8fd4\u56de\n        # 10. \u8fd4\u56de\n        # 11. \u8fd4\u56de\n        # 12. \u8fd4\u56de\n        # 13. \u8fd4\u56de\n        # 14. \u8fd4\u56de\n        # 15. \u8fd4\u56de\n        # 16. \u8fd4\u56de\n        # 17. \u8fd4\u56de\n        # 18. \u8fd4\u56de\n        # 19. \u8fd4\u56de\n        # 20. \u8fd4\u56de\n        # 21. \u8fd4\u56de\n        # 22. \u8fd4\u56de\n        # 23. \u8fd4\u56de\n        # 24. \u8fd4\u56de\n        # 25. \u8fd4\u56de\n        # 26. \u8fd4\u56de\n        # 27. \u8fd4\u56de\n        # 28. \u8fd4\u56de\n        # 29. \u8fd4\u56de\n        # 30. \u8fd4\u56de\n        # 31. \u8fd4\u56de\n        # 32. \u8fd4\u56de\n        # 33. \u8fd4\u56de\n        # 34. \u8fd4\u56de\n        # 35. \u8fd4\u56de\n        # 36. \u8fd4\u56de\n        # 37. \u8fd4\u56de\n        # 38. \u8fd4\u56de\n        # 39. \u8fd4\u56de\n        # 40. \u8fd4\u56de\n        # 41. \u8fd4\u56de\n        # 42. \u8fd4\u56de\n        # 43. \u8fd4\u56de\n        # 44. \u8fd4\u56de\n        # 45. \u8fd4\u56de\n        # 46. \u8fd4\u56de\n        # 47. \u8fd4\u56de\n        # 48. \u8fd4\u56de\n        # 49. \u8fd4\u56de\n        # 50. \u8fd4\u56de\n        # 51. \u8fd4\u56de\n        # 52. \u8fd4\u56de\n        # 53. \u8fd4\u56de\n        # 54. \u8fd4\u56de\n        # 55. \u8fd4\u56de\n        # 56. \u8fd4\u56de\n        # 57. \u8fd4\u56de\n        # 58. \u8fd4\u56de\n        # 59. \u8fd4\u56de\n        # 60. \u8fd4\u56de\n        # 61. \u8fd4\u56de\n        # 62. \u8fd4\u56de\n        # 63. \u8fd4\u56de\n        # 64. \u8fd4\u56de\n        # 65. \u8fd4\u56de\n        # 66. \u8fd4\u56de\n        # 67. \u8fd4\u56de\n        # 68. \u8fd4\u56de\n        # 69. \u8fd4\u56de\n        # 70. \u8fd4\u56de\n        # 71. \u8fd4\u56de\n        # 72. \u8fd4\u56de\n        # 73. \u8fd4\u56de\n        # 74. \u8fd4\u56de\n        # 75. \u8fd4\u56de\n        # 76. \u8fd4\u56de\n        # 77. \u8fd4\u56de\n        # 78. \u8fd4\u56de\n        # 79. \u8fd4\u56de\n        # 80. \u8fd4\u56de\n        # 81. \u8fd4\u56de\n        # 82. \u8fd4\u56de\n        # 83. \u8fd4\u56de\n        # 84. \u8fd4\u56de\n        # 85. \u8fd4\u56de\n        # 86. \u8fd4\u56de\n        # 87. \u8fd4\u56de\n        # 88. \u8fd4\u56de\n        # 89. \u8fd4\u56de\n        # 90. \u8fd4\u56de\n        # 91. \u8fd4\u56de\n        # 92. \u8fd4\u56de\n        # 93. \u8fd4\u56de\n        # 94. \u8fd4\u56de\n        # 95. \u8fd4\u56de\n        # 96. \u8fd4\u56de\n        # 97. \u8fd4\u56de\n        # 98. \u8fd4\u56de\n        # 99. \u8fd4\u56de\n        # 100. \u8fd4\u56de"}, {"task_id": "excel-sheet-column-number", "completion": "class Solution(object):\n    def titleToNumber(self, columnTitle):\n        \"\"\"\n        :type columnTitle: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u672b\u5c3e\u5b57\u6bcd\u7684ASCII\u7801 - 64\n        # 2. \u524d\u9762\u5b57\u6bcd\u7684ASCII\u7801 * 26\n        # 3. \u603b\u548c\n        # 4. \u5faa\u73af\n        # 5. \u8fd4\u56de\n        # 6. \u5faa\u73af\u7ed3\u675f\n        # 7. \u8fd4\u56de\n        # 8. \u8fd4\u56de\n        # 9. \u8fd4\u56de\n        # 10. \u8fd4\u56de\n        # 11. \u8fd4\u56de\n        # 12. \u8fd4\u56de\n        # 13. \u8fd4\u56de\n        # 14. \u8fd4\u56de\n        # 15. \u8fd4\u56de\n        # 16. \u8fd4\u56de\n        # 17. \u8fd4\u56de\n        # 18. \u8fd4\u56de\n        # 19. \u8fd4\u56de\n        # 20. \u8fd4\u56de\n        # 21. \u8fd4\u56de\n        # 22. \u8fd4\u56de\n        # 23. \u8fd4\u56de\n        # 24. \u8fd4\u56de\n        # 25. \u8fd4\u56de\n        # 26. \u8fd4\u56de\n        # 27. \u8fd4\u56de\n        # 28. \u8fd4\u56de\n        # 29. \u8fd4\u56de\n        # 30. \u8fd4\u56de\n        # 31. \u8fd4\u56de\n        # 32. \u8fd4\u56de\n        # 33. \u8fd4\u56de\n        # 34. \u8fd4\u56de\n        # 35. \u8fd4\u56de\n        # 36. \u8fd4\u56de\n        # 37. \u8fd4\u56de\n        # 38. \u8fd4\u56de\n        # 39. \u8fd4\u56de\n        # 40. \u8fd4\u56de\n        # 41. \u8fd4\u56de\n        # 42. \u8fd4\u56de\n        # 43. \u8fd4\u56de\n        # 44. \u8fd4\u56de\n        # 45. \u8fd4\u56de\n        # 46. \u8fd4\u56de\n        # 47. \u8fd4\u56de\n        # 48. \u8fd4\u56de\n        # 49. \u8fd4\u56de\n        # 50. \u8fd4\u56de\n        # 51. \u8fd4\u56de\n        # 52. \u8fd4\u56de\n        # 53. \u8fd4\u56de\n        # 54. \u8fd4\u56de\n        # 55. \u8fd4\u56de\n        # 56. \u8fd4\u56de\n        # 57. \u8fd4\u56de\n        # 58. \u8fd4\u56de\n        # 59. \u8fd4\u56de\n        # 60. \u8fd4\u56de\n        # 61. \u8fd4\u56de\n        # 62. \u8fd4\u56de\n        # 63. \u8fd4\u56de\n        # 64. \u8fd4\u56de\n        # 65. \u8fd4\u56de\n        # 66. \u8fd4\u56de\n        # 67. \u8fd4\u56de\n        # 68. \u8fd4\u56de\n        # 69. \u8fd4\u56de\n        # 70. \u8fd4\u56de\n        # 71. \u8fd4\u56de\n        # 72. \u8fd4\u56de\n        # 73. \u8fd4\u56de\n        # 74. \u8fd4\u56de\n        # 75. \u8fd4\u56de\n        # 76. \u8fd4\u56de\n        # 77. \u8fd4\u56de\n        # 78. \u8fd4\u56de\n        # 79. \u8fd4\u56de\n        # 80. \u8fd4\u56de\n        # 81. \u8fd4\u56de\n        # 82. \u8fd4\u56de\n        # 83. \u8fd4\u56de\n        # 84. \u8fd4\u56de\n        # 85. \u8fd4\u56de\n        # 86. \u8fd4\u56de\n        # 87. \u8fd4\u56de\n        # 88. \u8fd4\u56de\n        # 89. \u8fd4\u56de\n        # 90. \u8fd4\u56de\n        # 91. \u8fd4\u56de\n        # 92. \u8fd4\u56de\n        # 93. \u8fd4\u56de\n        # 94. \u8fd4\u56de\n        # 95. \u8fd4\u56de\n        # 96. \u8fd4\u56de\n        # 97. \u8fd4\u56de\n        # 98. \u8fd4\u56de\n        # 99. \u8fd4\u56de\n        # 100."}, {"task_id": "excel-sheet-column-number", "completion": "class Solution(object):\n    def titleToNumber(self, columnTitle):\n        \"\"\"\n        :type columnTitle: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u672b\u5c3e\u5b57\u6bcd\u7684ASCII\u7801 - 64\n        # 2. \u524d\u9762\u5b57\u6bcd\u7684ASCII\u7801 * 26\n        # 3. \u603b\u548c\n        # 4. \u51cf\u53bb1\n        # 5. \u8fd4\u56de\n        # 6. \u5faa\u73af\n        # 7. \u8fd4\u56de\n        # 8. \u8fd4\u56de\n        # 9. \u8fd4\u56de\n        # 10. \u8fd4\u56de\n        # 11. \u8fd4\u56de\n        # 12. \u8fd4\u56de\n        # 13. \u8fd4\u56de\n        # 14. \u8fd4\u56de\n        # 15. \u8fd4\u56de\n        # 16. \u8fd4\u56de\n        # 17. \u8fd4\u56de\n        # 18. \u8fd4\u56de\n        # 19. \u8fd4\u56de\n        # 20. \u8fd4\u56de\n        # 21. \u8fd4\u56de\n        # 22. \u8fd4\u56de\n        # 23. \u8fd4\u56de\n        # 24. \u8fd4\u56de\n        # 25. \u8fd4\u56de\n        # 26. \u8fd4\u56de\n        # 27. \u8fd4\u56de\n        # 28. \u8fd4\u56de\n        # 29. \u8fd4\u56de\n        # 30. \u8fd4\u56de\n        # 31. \u8fd4\u56de\n        # 32. \u8fd4\u56de\n        # 33. \u8fd4\u56de\n        # 34. \u8fd4\u56de\n        # 35. \u8fd4\u56de\n        # 36. \u8fd4\u56de\n        # 37. \u8fd4\u56de\n        # 38. \u8fd4\u56de\n        # 39. \u8fd4\u56de\n        # 40. \u8fd4\u56de\n        # 41. \u8fd4\u56de\n        # 42. \u8fd4\u56de\n        # 43. \u8fd4\u56de\n        # 44. \u8fd4\u56de\n        # 45. \u8fd4\u56de\n        # 46. \u8fd4\u56de\n        # 47. \u8fd4\u56de\n        # 48. \u8fd4\u56de\n        # 49. \u8fd4\u56de\n        # 50. \u8fd4\u56de\n        # 51. \u8fd4\u56de\n        # 52. \u8fd4\u56de\n        # 53. \u8fd4\u56de\n        # 54. \u8fd4\u56de\n        # 55. \u8fd4\u56de\n        # 56. \u8fd4\u56de\n        # 57. \u8fd4\u56de\n        # 58. \u8fd4\u56de\n        # 59. \u8fd4\u56de\n        # 60. \u8fd4\u56de\n        # 61. \u8fd4\u56de\n        # 62. \u8fd4\u56de\n        # 63. \u8fd4\u56de\n        # 64. \u8fd4\u56de\n        # 65. \u8fd4\u56de\n        # 66. \u8fd4\u56de\n        # 67. \u8fd4\u56de\n        # 68. \u8fd4\u56de\n        # 69. \u8fd4\u56de\n        # 70. \u8fd4\u56de\n        # 71. \u8fd4\u56de\n        # 72. \u8fd4\u56de\n        # 73. \u8fd4\u56de\n        # 74. \u8fd4\u56de\n        # 75. \u8fd4\u56de\n        # 76. \u8fd4\u56de\n        # 77. \u8fd4\u56de\n        # 78. \u8fd4\u56de\n        # 79. \u8fd4\u56de\n        # 80. \u8fd4\u56de\n        # 81. \u8fd4\u56de\n        # 82. \u8fd4\u56de\n        # 83. \u8fd4\u56de\n        # 84. \u8fd4\u56de\n        # 85. \u8fd4\u56de\n        # 86. \u8fd4\u56de\n        # 87. \u8fd4\u56de\n        # 88. \u8fd4\u56de\n        # 89. \u8fd4\u56de\n        # 90. \u8fd4\u56de\n        # 91. \u8fd4\u56de\n        # 92. \u8fd4\u56de\n        # 93. \u8fd4\u56de\n        # 94. \u8fd4\u56de\n        # 95. \u8fd4\u56de\n        # 96. \u8fd4\u56de\n        # 97. \u8fd4\u56de\n        # 98. \u8fd4\u56de\n        # 99. \u8fd4\u56de\n        # 100. \u8fd4\u56de"}, {"task_id": "excel-sheet-column-number", "completion": "class Solution(object):\n    def titleToNumber(self, columnTitle):\n        \"\"\"\n        :type columnTitle: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7684\u5b57\u6bcd\n        # 2. \u627e\u5230\u5b57\u6bcd\u5728\u5b57\u6bcd\u8868\u4e2d\u7684\u4f4d\u7f6e\n        # 3. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 4. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 5. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 6. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 7. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 8. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 9. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 10. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 11. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 12. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 13. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 14. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 15. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 16. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 17. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 18. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 19. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 20. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 21. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 22. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 23. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 24. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 25. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 26. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 27. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 28. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 29. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 30. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 31. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 32. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 33. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 34. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 35. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 36. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 37. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 38. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 39. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 40. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 41. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 42. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 43. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 44. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 45. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 46. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 47. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 48. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 49. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 50. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 51. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 52. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 53. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 54. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 55. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 56. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 57. \u5c06\u5b57\u6bcd\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u6570\u5b57\n        #"}], "candy": [{"task_id": "candy", "completion": "class Solution(object):\n    def candy(self, ratings):\n        \"\"\"\n        :type ratings: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Runtime: 20 ms, faster than 99.97% of Python online submissions for Candy.\n        # Memory Usage: 13.5 MB, less than 5.00% of Python online submissions for Candy.\n        \n        n = len(ratings)\n        candies = [1] * n\n        for i in range(1, n):\n            if ratings[i] > ratings[i - 1]:\n                candies[i] = candies[i - 1] + 1\n        for i in range(n - 2, -1, -1):\n            if ratings[i] > ratings[i + 1]:\n                candies[i] = max(candies[i], candies[i + 1] + 1)\n        return sum(candies)"}, {"task_id": "candy", "completion": "class Solution(object):\n    def candy(self, ratings):\n        \"\"\"\n        :type ratings: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Runtime: 28 ms, faster than 99.85% of Python3 online submissions for Candy.\n        # Memory Usage: 13.2 MB, less than 100.00% of Python3 online submissions for Candy.\n        \n        n = len(ratings)\n        candies = [1] * n\n        for i in range(1, n):\n            if ratings[i] > ratings[i - 1]:\n                candies[i] = candies[i - 1] + 1\n        for i in range(n - 2, -1, -1):\n            if ratings[i] > ratings[i + 1]:\n                candies[i] = max(candies[i], candies[i + 1] + 1)\n        return sum(candies)"}, {"task_id": "candy", "completion": "class Solution(object):\n    def candy(self, ratings):\n        \"\"\"\n        :type ratings: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Runtime: 28 ms, faster than 99.89% of Python3 online submissions for Candy.\n        # Memory Usage: 13.3 MB, less than 5.00% of Python3 online submissions for Candy.\n        \n        n = len(ratings)\n        candies = [1] * n\n        for i in range(1, n):\n            if ratings[i] > ratings[i - 1]:\n                candies[i] = candies[i - 1] + 1\n        for i in range(n - 2, -1, -1):\n            if ratings[i] > ratings[i + 1]:\n                candies[i] = max(candies[i], candies[i + 1] + 1)\n        return sum(candies)"}, {"task_id": "candy", "completion": "class Solution(object):\n    def candy(self, ratings):\n        \"\"\"\n        :type ratings: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Runtime: 20 ms, faster than 99.97% of Python online submissions for Candy.\n        # Memory Usage: 13.2 MB, less than 100.00% of Python online submissions for Candy.\n        \n        n = len(ratings)\n        candies = [1] * n\n        for i in range(1, n):\n            if ratings[i] > ratings[i - 1]:\n                candies[i] = candies[i - 1] + 1\n        for i in range(n - 2, -1, -1):\n            if ratings[i] > ratings[i + 1]:\n                candies[i] = max(candies[i], candies[i + 1] + 1)\n        return sum(candies)"}, {"task_id": "candy", "completion": "class Solution(object):\n    def candy(self, ratings):\n        \"\"\"\n        :type ratings: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Runtime: 20 ms\n        # Memory: 13.7 MB\n        \n        n = len(ratings)\n        candies = [1] * n\n        for i in range(1, n):\n            if ratings[i] > ratings[i - 1]:\n                candies[i] = candies[i - 1] + 1\n        for i in range(n - 2, -1, -1):\n            if ratings[i] > ratings[i + 1]:\n                candies[i] = max(candies[i], candies[i + 1] + 1)\n        return sum(candies)"}], "same-tree": [{"task_id": "same-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val != q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"}, {"task_id": "same-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val != q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"}, {"task_id": "same-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val != q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"}, {"task_id": "same-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val != q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"}, {"task_id": "same-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val != q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"}], "reorder-list": [{"task_id": "reorder-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reorderList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: None Do not return anything, modify head in-place instead.\n        \"\"\"\n        \n        if not head or not head.next:\n            return\n        \n        slow = head\n        fast = head\n        \n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        prev = None\n        while slow:\n            temp = slow.next\n            slow.next = prev\n            prev = slow\n            slow = temp\n        \n        prev = head\n        slow = prev.next\n        while slow:\n            temp = slow.next\n            slow.next = prev.next\n            prev.next = slow\n            prev = slow\n            slow = temp\n        \n        slow = head\n        while slow.next:\n            slow = slow.next\n        \n        slow.next = prev\n        \n        return head"}, {"task_id": "reorder-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reorderList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: None Do not return anything, modify head in-place instead.\n        \"\"\"\n        \n        if not head or not head.next:\n            return\n        \n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        prev = None\n        while slow:\n            temp = slow.next\n            slow.next = prev\n            prev = slow\n            slow = temp\n        \n        prev = None\n        while head and prev:\n            temp = head.next\n            head.next = prev\n            prev = head\n            head = temp\n        \n        prev = None\n        while head and prev:\n            temp = head.next\n            head.next = prev\n            prev = head\n            head = temp\n        \n        while prev:\n            temp = prev.next\n            prev.next = head\n            head = temp\n            prev = temp\n        \n        while head:\n            temp = head.next\n            head.next = prev\n            prev = head\n            head = temp\n        \n        while prev:\n            temp = prev.next\n            prev.next = head\n            head = temp\n            prev = temp\n        \n        while head:\n            temp = head.next\n            head.next = prev\n            prev = head\n            head = temp\n        \n        while prev:\n            temp = prev.next\n            prev.next = head\n            head = temp\n            prev = temp\n        \n        while prev:\n            temp = prev.next\n            prev.next = head\n            head = temp\n            prev = temp\n        \n        while prev:\n            temp = prev.next\n            prev.next = head\n            head = temp\n            prev = temp\n        \n        while prev:\n            temp = prev.next\n            prev.next = head\n            head = temp\n            prev = temp\n        \n        while prev:\n            temp = prev.next\n            prev.next = head\n            head = temp\n            prev = temp\n        \n        while prev:\n            temp = prev.next\n            prev.next = head\n            head = temp\n            prev = temp\n        \n        while prev:\n            temp = prev.next\n            prev.next = head\n            head = temp\n            prev = temp\n        \n        while prev:\n            temp = prev.next\n            prev.next = head\n            head = temp\n            prev = temp\n        \n        while prev:\n            temp = prev.next\n            prev.next = head\n            head = temp\n            prev = temp\n        \n        while prev:\n            temp = prev.next\n            prev.next = head\n            head = temp\n            prev = temp\n        \n        while prev:\n            temp = prev.next\n            prev.next = head\n            head = temp\n            prev = temp\n        \n        while prev:\n            temp = prev.next\n            prev.next = head\n            head = temp\n            prev = temp\n        \n        while prev:\n            temp = prev.next\n            prev.next = head\n            head = temp\n            prev = temp\n        \n        while prev:\n            temp = prev.next\n            prev.next = head\n            head = temp\n            prev = temp\n        \n        while prev:\n            temp = prev.next\n            prev.next = head\n            head = temp\n            prev = temp\n        \n        while prev:\n            temp = prev.next\n            prev.next = head\n            head = temp\n            prev = temp\n        \n        while prev:\n            temp = prev.next\n            prev.next = head\n            head = temp\n            prev = temp\n        \n        while prev:\n            temp = prev.next\n            prev.next = head\n            head = temp\n            prev = temp\n        \n        while prev:\n            temp = prev.next\n            prev.next = head\n            head = temp\n            prev = temp\n        \n        while prev:\n            temp = prev.next\n            prev.next = head\n            head = temp\n            prev = temp\n        \n        while prev:\n            temp = prev.next\n            prev.next = head\n            head = temp\n            prev = temp\n        \n        while prev:\n            temp = prev.next\n            prev.next = head\n            head = temp\n            prev = temp\n        \n        while prev:\n            temp = prev.next\n            prev.next = head\n            head = temp\n            prev = temp\n        \n        while prev:\n            temp = prev.next\n            prev.next = head\n            head = temp"}, {"task_id": "reorder-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reorderList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: None Do not return anything, modify head in-place instead.\n        \"\"\"\n        \n        if not head or not head.next:\n            return\n        \n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        prev = None\n        while slow:\n            temp = slow.next\n            slow.next = prev\n            prev = slow\n            slow = temp\n        \n        prev = head\n        slow = prev.next\n        while slow:\n            temp = slow.next\n            slow.next = prev.next\n            prev.next = slow\n            prev = slow\n            slow = temp\n        \n        slow = head\n        while slow.next:\n            slow = slow.next\n        \n        slow.next = prev"}, {"task_id": "reorder-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reorderList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: None Do not return anything, modify head in-place instead.\n        \"\"\"\n        \n        if not head or not head.next:\n            return\n        \n        slow = head\n        fast = head\n        \n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        prev = None\n        while slow:\n            temp = slow.next\n            slow.next = prev\n            prev = slow\n            slow = temp\n        \n        prev = head\n        slow = prev.next\n        while slow:\n            temp = slow.next\n            slow.next = prev.next\n            prev.next = slow\n            prev = slow\n            slow = temp\n        \n        slow = prev.next\n        prev.next = None\n        while slow:\n            temp = slow.next\n            slow.next = prev.next\n            prev.next = slow\n            prev = slow\n            slow = temp"}, {"task_id": "reorder-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reorderList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: None Do not return anything, modify head in-place instead.\n        \"\"\"\n        \n        if head is None:\n            return\n        \n        slow = head\n        fast = head\n        \n        while fast.next is not None and fast.next.next is not None:\n            slow = slow.next\n            fast = fast.next.next\n        \n        prev = None\n        while slow.next is not None:\n            temp = slow.next\n            slow.next = prev\n            prev = slow\n            slow = temp\n        \n        slow.next = prev\n        \n        prev = None\n        while head is not None and slow is not None:\n            temp = head.next\n            head.next = prev\n            prev = head\n            head = temp\n            slow = slow.next\n        \n        head.next = prev\n        \n        while slow is not None:\n            temp = slow.next\n            slow.next = prev\n            prev = slow\n            slow = temp\n        \n        head.next = prev\n        \n        return head"}], "word-pattern": [{"task_id": "word-pattern", "completion": "class Solution(object):\n    def wordPattern(self, pattern, s):\n        \"\"\"\n        :type pattern: str\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u62c6\u5206\u5b57\u7b26\u4e32\n        s_list = s.split()\n        \n        # 2. \u68c0\u67e5\u957f\u5ea6\u662f\u5426\u76f8\u7b49\n        if len(pattern) != len(s_list):\n            return False\n        \n        # 3. \u68c0\u67e5\u5b57\u7b26\u4e32\u662f\u5426\u76f8\u7b49\n        pattern_dict = {}\n        for i in range(len(pattern)):\n            if pattern[i] in pattern_dict:\n                if pattern_dict[pattern[i]] != s_list[i]:\n                    return False\n            else:\n                pattern_dict[pattern[i]] = s_list[i]\n                \n        return True"}, {"task_id": "word-pattern", "completion": "class Solution(object):\n    def wordPattern(self, pattern, s):\n        \"\"\"\n        :type pattern: str\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u627e\u5230pattern\u4e2d\u7684\u6bcf\u4e2a\u5b57\u6bcd\uff0c\u627e\u5230s\u4e2d\u7684\u6bcf\u4e2a\u5355\u8bcd\uff0c\u5982\u679c\u627e\u5230\u4e86\uff0c\u5219\u628a\u8fd9\u4e2a\u5355\u8bcd\u548c\u8fd9\u4e2a\u5b57\u6bcd\u7ed1\u5b9a\u8d77\u6765\n        # 2. \u5982\u679cpattern\u4e2d\u7684\u5b57\u6bcd\u548cs\u4e2d\u7684\u5355\u8bcd\u6ca1\u6709\u7ed1\u5b9a\uff0c\u5219\u8fd4\u56defalse\n        # 3. \u5982\u679cpattern\u4e2d\u7684\u5b57\u6bcd\u548cs\u4e2d\u7684\u5355\u8bcd\u90fd\u7ed1\u5b9a\u4e86\uff0c\u5219\u628a\u8fd9\u4e2a\u5b57\u6bcd\u548c\u8fd9\u4e2a\u5355\u8bcd\u4ece\u5b57\u5178\u4e2d\u5220\u9664\uff0c\u7ee7\u7eed\u5faa\u73af\n        # 4. \u5982\u679cpattern\u4e2d\u7684\u5b57\u6bcd\u548cs\u4e2d\u7684\u5355\u8bcd\u90fd\u7ed1\u5b9a\u4e86\uff0c\u5219\u8fd4\u56detrue\n        \n        # 1. \u627e\u5230pattern\u4e2d\u7684\u6bcf\u4e2a\u5b57\u6bcd\uff0c\u627e\u5230s\u4e2d\u7684\u6bcf\u4e2a\u5355\u8bcd\uff0c\u5982\u679c\u627e\u5230\u4e86\uff0c\u5219\u628a\u8fd9\u4e2a\u5355\u8bcd\u548c\u8fd9\u4e2a\u5b57\u6bcd\u7ed1\u5b9a\u8d77\u6765\n        # 2. \u5982\u679cpattern\u4e2d\u7684\u5b57\u6bcd\u548cs\u4e2d\u7684\u5355\u8bcd\u6ca1\u6709\u7ed1\u5b9a\uff0c\u5219\u8fd4\u56defalse\n        # 3. \u5982\u679cpattern\u4e2d\u7684\u5b57\u6bcd\u548cs\u4e2d\u7684\u5355\u8bcd\u90fd\u7ed1\u5b9a\u4e86\uff0c\u5219\u628a\u8fd9\u4e2a\u5b57\u6bcd\u548c\u8fd9\u4e2a\u5355\u8bcd\u4ece\u5b57\u5178\u4e2d\u5220\u9664\uff0c\u7ee7\u7eed\u5faa\u73af\n        # 4. \u5982\u679cpattern\u4e2d\u7684\u5b57\u6bcd\u548cs\u4e2d\u7684\u5355\u8bcd\u90fd\u7ed1\u5b9a\u4e86\uff0c\u5219\u8fd4\u56detrue\n        # 5. \u5982\u679cpattern\u4e2d\u7684\u5b57\u6bcd\u548cs\u4e2d\u7684\u5355\u8bcd\u90fd\u7ed1\u5b9a\u4e86\uff0c\u5219\u628a\u8fd9\u4e2a\u5b57\u6bcd\u548c\u8fd9\u4e2a\u5355\u8bcd\u4ece\u5b57\u5178\u4e2d\u5220\u9664\uff0c\u7ee7\u7eed\u5faa\u73af\n        # 6. \u5982\u679cpattern\u4e2d\u7684\u5b57\u6bcd\u548cs\u4e2d\u7684\u5355\u8bcd\u90fd\u7ed1\u5b9a\u4e86\uff0c\u5219\u8fd4\u56detrue\n        # 7. \u5982\u679cpattern\u4e2d\u7684\u5b57\u6bcd\u548cs\u4e2d\u7684\u5355\u8bcd\u90fd\u7ed1\u5b9a\u4e86\uff0c\u5219\u628a\u8fd9\u4e2a\u5b57\u6bcd\u548c\u8fd9\u4e2a\u5355\u8bcd\u4ece\u5b57\u5178\u4e2d\u5220\u9664\uff0c\u7ee7\u7eed\u5faa\u73af\n        # 8. \u5982\u679cpattern\u4e2d\u7684\u5b57\u6bcd\u548cs\u4e2d\u7684\u5355\u8bcd\u90fd\u7ed1\u5b9a\u4e86\uff0c\u5219\u8fd4\u56detrue\n        # 9. \u5982\u679cpattern\u4e2d\u7684\u5b57\u6bcd\u548cs\u4e2d\u7684\u5355\u8bcd\u90fd\u7ed1\u5b9a\u4e86\uff0c\u5219\u628a\u8fd9\u4e2a\u5b57\u6bcd\u548c\u8fd9\u4e2a\u5355\u8bcd\u4ece\u5b57\u5178\u4e2d\u5220\u9664\uff0c\u7ee7\u7eed\u5faa\u73af\n        # 10. \u5982\u679cpattern\u4e2d\u7684\u5b57\u6bcd\u548cs\u4e2d\u7684\u5355\u8bcd\u90fd\u7ed1\u5b9a\u4e86\uff0c\u5219\u8fd4\u56detrue\n        # 11. \u5982\u679cpattern\u4e2d\u7684\u5b57\u6bcd\u548cs\u4e2d\u7684\u5355\u8bcd\u90fd\u7ed1\u5b9a\u4e86\uff0c\u5219\u628a\u8fd9\u4e2a\u5b57\u6bcd\u548c\u8fd9\u4e2a\u5355\u8bcd\u4ece\u5b57\u5178\u4e2d\u5220\u9664\uff0c\u7ee7\u7eed\u5faa\u73af\n        # 12. \u5982\u679cpattern\u4e2d\u7684\u5b57\u6bcd\u548cs\u4e2d\u7684\u5355\u8bcd\u90fd\u7ed1\u5b9a\u4e86\uff0c\u5219\u8fd4\u56detrue\n        # 13. \u5982\u679cpattern\u4e2d\u7684\u5b57\u6bcd\u548cs\u4e2d\u7684\u5355\u8bcd\u90fd\u7ed1\u5b9a\u4e86\uff0c\u5219\u628a\u8fd9\u4e2a\u5b57\u6bcd\u548c\u8fd9\u4e2a\u5355\u8bcd\u4ece\u5b57\u5178\u4e2d\u5220\u9664\uff0c\u7ee7\u7eed\u5faa\u73af\n        # 14. \u5982\u679cpattern\u4e2d\u7684\u5b57\u6bcd\u548cs\u4e2d\u7684\u5355\u8bcd\u90fd\u7ed1\u5b9a\u4e86\uff0c\u5219\u8fd4\u56detrue\n        # 15. \u5982\u679cpattern\u4e2d\u7684\u5b57\u6bcd\u548cs\u4e2d\u7684\u5355\u8bcd\u90fd\u7ed1\u5b9a\u4e86\uff0c\u5219\u628a\u8fd9\u4e2a\u5b57\u6bcd\u548c\u8fd9\u4e2a\u5355\u8bcd\u4ece\u5b57\u5178\u4e2d\u5220\u9664\uff0c\u7ee7\u7eed\u5faa\u73af\n        # 16. \u5982\u679cpattern\u4e2d\u7684\u5b57\u6bcd\u548cs\u4e2d\u7684\u5355\u8bcd\u90fd\u7ed1\u5b9a\u4e86\uff0c\u5219\u8fd4\u56detrue\n        # 17. \u5982\u679cpattern\u4e2d\u7684\u5b57\u6bcd\u548cs\u4e2d\u7684\u5355\u8bcd\u90fd\u7ed1\u5b9a\u4e86\uff0c\u5219\u628a\u8fd9\u4e2a\u5b57\u6bcd\u548c\u8fd9\u4e2a\u5355\u8bcd\u4ece\u5b57\u5178\u4e2d\u5220\u9664\uff0c\u7ee7\u7eed"}, {"task_id": "word-pattern", "completion": "class Solution(object):\n    def wordPattern(self, pattern, s):\n        \"\"\"\n        :type pattern: str\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u62c6\u5206\u5b57\u7b26\u4e32\n        s_list = s.split()\n        if len(pattern) != len(s_list):\n            return False\n        \n        # 2. \u68c0\u67e5\u5b57\u7b26\u4e32\u662f\u5426\u5339\u914d\n        pattern_dict = {}\n        s_dict = {}\n        for i in range(len(pattern)):\n            if pattern[i] in pattern_dict:\n                if pattern_dict[pattern[i]] != s_list[i]:\n                    return False\n            else:\n                if s_list[i] in s_dict:\n                    return False\n                else:\n                    pattern_dict[pattern[i]] = s_list[i]\n                    s_dict[s_list[i]] = pattern[i]\n        return True"}, {"task_id": "word-pattern", "completion": "class Solution(object):\n    def wordPattern(self, pattern, s):\n        \"\"\"\n        :type pattern: str\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u62c6\u5206\u5b57\u7b26\u4e32\n        s_list = s.split()\n        if len(pattern) != len(s_list):\n            return False\n        \n        # 2. \u68c0\u67e5\u5b57\u7b26\u4e32\u662f\u5426\u5339\u914d\n        pattern_dict = {}\n        s_dict = {}\n        for i in range(len(pattern)):\n            if pattern[i] in pattern_dict:\n                if pattern_dict[pattern[i]] != s_list[i]:\n                    return False\n            else:\n                if s_list[i] in s_dict:\n                    return False\n                else:\n                    pattern_dict[pattern[i]] = s_list[i]\n                    s_dict[s_list[i]] = pattern[i]\n        return True"}, {"task_id": "word-pattern", "completion": "class Solution(object):\n    def wordPattern(self, pattern, s):\n        \"\"\"\n        :type pattern: str\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u62c6\u5206\u5b57\u7b26\u4e32\n        s_list = s.split()\n        \n        # 2. \u68c0\u67e5\u957f\u5ea6\u662f\u5426\u76f8\u7b49\n        if len(pattern) != len(s_list):\n            return False\n        \n        # 3. \u68c0\u67e5\u5b57\u7b26\u4e32\u662f\u5426\u76f8\u7b49\n        pattern_dict = {}\n        for i in range(len(pattern)):\n            if pattern[i] in pattern_dict:\n                if pattern_dict[pattern[i]] != s_list[i]:\n                    return False\n            else:\n                pattern_dict[pattern[i]] = s_list[i]\n                \n        return True"}], "permutations": [{"task_id": "permutations", "completion": "class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def backtrack(nums, tmp, res):\n            if len(tmp) == len(nums):\n                res.append(tmp[:])\n                return\n            for i in range(len(nums)):\n                if tmp.count(nums[i]) == 0:\n                    tmp.append(nums[i])\n                    backtrack(nums, tmp, res)\n                    tmp.pop()\n        \n        res = []\n        tmp = []\n        backtrack(nums, tmp, res)\n        return res"}, {"task_id": "permutations", "completion": "class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u9012\u5f52\n        # 2. \u56de\u6eaf\n        # 3. \u5faa\u73af\n        # 4. \u5faa\u73af + \u526a\u679d\n        # 5. \u5faa\u73af + \u526a\u679d + \u8bb0\u5fc6\u5316\u641c\u7d22\n        # 6. \u5faa\u73af + \u526a\u679d + \u8bb0\u5fc6\u5316\u641c\u7d22 + \u6392\u5e8f\n        # 7. \u5faa\u73af + \u526a\u679d + \u8bb0\u5fc6\u5316\u641c\u7d22 + \u6392\u5e8f + \u54c8\u5e0c\u8868\n        # 8. \u5faa\u73af + \u526a\u679d + \u8bb0\u5fc6\u5316\u641c\u7d22 + \u6392\u5e8f + \u54c8\u5e0c\u8868 + \u4f4d\u8fd0\u7b97\n        # 9. \u5faa\u73af + \u526a\u679d + \u8bb0\u5fc6\u5316\u641c\u7d22 + \u6392\u5e8f + \u54c8\u5e0c\u8868 + \u4f4d\u8fd0\u7b97 + \u9012\u5f52\n        # 10. \u5faa\u73af + \u526a\u679d + \u8bb0\u5fc6\u5316\u641c\u7d22 + \u6392\u5e8f + \u54c8\u5e0c\u8868 + \u4f4d\u8fd0\u7b97 + \u9012\u5f52 + \u54c8\u5e0c\u8868\n        # 11. \u5faa\u73af + \u526a\u679d + \u8bb0\u5fc6\u5316\u641c\u7d22 + \u6392\u5e8f + \u54c8\u5e0c\u8868 + \u4f4d\u8fd0\u7b97 + \u9012\u5f52 + \u54c8\u5e0c\u8868 + \u4f4d\u8fd0\u7b97\n        # 12. \u5faa\u73af + \u526a\u679d + \u8bb0\u5fc6\u5316\u641c\u7d22 + \u6392\u5e8f + \u54c8\u5e0c\u8868 + \u4f4d\u8fd0\u7b97 + \u9012\u5f52 + \u54c8\u5e0c\u8868 + \u4f4d\u8fd0\u7b97 + \u9012\u5f52\n        # 13. \u5faa\u73af + \u526a\u679d + \u8bb0\u5fc6\u5316\u641c\u7d22 + \u6392\u5e8f + \u54c8\u5e0c\u8868 + \u4f4d\u8fd0\u7b97 + \u9012\u5f52 + \u54c8\u5e0c\u8868 + \u4f4d\u8fd0\u7b97 + \u9012\u5f52 + \u54c8\u5e0c\u8868\n        # 14. \u5faa\u73af + \u526a\u679d + \u8bb0\u5fc6\u5316\u641c\u7d22 + \u6392\u5e8f + \u54c8\u5e0c\u8868 + \u4f4d\u8fd0\u7b97 + \u9012\u5f52 + \u54c8\u5e0c\u8868 + \u4f4d\u8fd0\u7b97 + \u9012\u5f52 + \u54c8\u5e0c\u8868 + \u4f4d\u8fd0\u7b97\n        # 15. \u5faa\u73af + \u526a\u679d + \u8bb0\u5fc6\u5316\u641c\u7d22 + \u6392\u5e8f + \u54c8\u5e0c\u8868 + \u4f4d\u8fd0\u7b97 + \u9012\u5f52 + \u54c8\u5e0c\u8868 + \u4f4d\u8fd0\u7b97 + \u9012\u5f52 + \u54c8\u5e0c\u8868 + \u4f4d\u8fd0\u7b97 + \u9012\u5f52\n        # 16. \u5faa\u73af + \u526a\u679d + \u8bb0\u5fc6\u5316\u641c\u7d22 + \u6392\u5e8f + \u54c8\u5e0c\u8868 + \u4f4d\u8fd0\u7b97 + \u9012\u5f52 + \u54c8\u5e0c\u8868 + \u4f4d\u8fd0\u7b97 + \u9012\u5f52 + \u54c8\u5e0c\u8868 + \u4f4d\u8fd0\u7b97 + \u9012\u5f52 + \u54c8\u5e0c\u8868\n        # 17. \u5faa\u73af + \u526a\u679d + \u8bb0\u5fc6\u5316\u641c\u7d22 + \u6392\u5e8f + \u54c8\u5e0c\u8868 + \u4f4d\u8fd0\u7b97 + \u9012\u5f52 + \u54c8\u5e0c\u8868 + \u4f4d\u8fd0\u7b97 + \u9012\u5f52 + \u54c8\u5e0c\u8868 + \u4f4d\u8fd0\u7b97 + \u9012\u5f52 + \u54c8\u5e0c\u8868 + \u4f4d\u8fd0\u7b97\n        # 18. \u5faa\u73af + \u526a\u679d + \u8bb0\u5fc6\u5316\u641c\u7d22 +"}, {"task_id": "permutations", "completion": "class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u6392\u5217\u7ec4\u5408\n        # 2. \u56de\u6eaf\n        # 3. \u9012\u5f52\n        # 4. \u526a\u679d\n        # 5. \u5faa\u73af\n        # 6. \u9012\u5f52 + \u5faa\u73af\n        # 7. \u5faa\u73af + \u526a\u679d\n        # 8. \u5faa\u73af + \u526a\u679d + \u8bb0\u5fc6\u5316\u641c\u7d22\n        # 9. \u5faa\u73af + \u526a\u679d + \u8bb0\u5fc6\u5316\u641c\u7d22 + \u54c8\u5e0c\u8868\n        # 10. \u5faa\u73af + \u526a\u679d + \u8bb0\u5fc6\u5316\u641c\u7d22 + \u54c8\u5e0c\u8868 + \u6392\u5e8f\n        # 11. \u5faa\u73af + \u526a\u679d + \u8bb0\u5fc6\u5316\u641c\u7d22 + \u54c8\u5e0c\u8868 + \u6392\u5e8f + \u5806\n        # 12. \u5faa\u73af + \u526a\u679d + \u8bb0\u5fc6\u5316\u641c\u7d22 + \u54c8\u5e0c\u8868 + \u6392\u5e8f + \u5806 + \u54c8\u5e0c\u8868\n        # 13. \u5faa\u73af + \u526a\u679d + \u8bb0\u5fc6\u5316\u641c\u7d22 + \u54c8\u5e0c\u8868 + \u6392\u5e8f + \u5806 + \u54c8\u5e0c\u8868 + \u6392\u5e8f\n        # 14. \u5faa\u73af + \u526a\u679d + \u8bb0\u5fc6\u5316\u641c\u7d22 + \u54c8\u5e0c\u8868 + \u6392\u5e8f + \u5806 + \u54c8\u5e0c\u8868 + \u6392\u5e8f + \u54c8\u5e0c\u8868\n        # 15. \u5faa\u73af + \u526a\u679d + \u8bb0\u5fc6\u5316\u641c\u7d22 + \u54c8\u5e0c\u8868 + \u6392\u5e8f + \u5806 + \u54c8\u5e0c\u8868 + \u6392\u5e8f + \u54c8\u5e0c\u8868 + \u6392\u5e8f\n        # 16. \u5faa\u73af + \u526a\u679d + \u8bb0\u5fc6\u5316\u641c\u7d22 + \u54c8\u5e0c\u8868 + \u6392\u5e8f + \u5806 + \u54c8\u5e0c\u8868 + \u6392\u5e8f + \u54c8\u5e0c\u8868 + \u6392\u5e8f + \u54c8\u5e0c\u8868\n        # 17. \u5faa\u73af + \u526a\u679d + \u8bb0\u5fc6\u5316\u641c\u7d22 + \u54c8\u5e0c\u8868 + \u6392\u5e8f + \u5806 + \u54c8\u5e0c\u8868 + \u6392\u5e8f + \u54c8\u5e0c\u8868 + \u6392\u5e8f + \u54c8\u5e0c\u8868 + \u6392\u5e8f\n        # 18. \u5faa\u73af + \u526a\u679d + \u8bb0\u5fc6\u5316\u641c\u7d22 + \u54c8\u5e0c\u8868 + \u6392\u5e8f + \u5806 + \u54c8\u5e0c\u8868 + \u6392\u5e8f + \u54c8\u5e0c\u8868 + \u6392\u5e8f + \u54c8\u5e0c\u8868 + \u6392\u5e8f + \u54c8\u5e0c\u8868\n        # 19. \u5faa\u73af + \u526a\u679d + \u8bb0\u5fc6\u5316\u641c\u7d22 + \u54c8\u5e0c\u8868 + \u6392\u5e8f + \u5806 + \u54c8\u5e0c\u8868 + \u6392\u5e8f + \u54c8\u5e0c\u8868 + \u6392\u5e8f + \u54c8\u5e0c\u8868 + \u6392\u5e8f + \u54c8\u5e0c\u8868 + \u6392\u5e8f\n        # 20. \u5faa\u73af + \u526a\u679d + \u8bb0\u5fc6\u5316\u641c\u7d22 + \u54c8\u5e0c\u8868 + \u6392\u5e8f + \u5806 + \u54c8\u5e0c\u8868 + \u6392\u5e8f + \u54c8\u5e0c\u8868 + \u6392\u5e8f + \u54c8\u5e0c\u8868 + \u6392\u5e8f + \u54c8\u5e0c\u8868 + \u6392\u5e8f + \u54c8"}, {"task_id": "permutations", "completion": "class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def backtrack(nums, temp, res):\n            if len(temp) == len(nums):\n                res.append(temp[:])\n                return\n            \n            for i in range(len(nums)):\n                if temp.count(nums[i]) == 0:\n                    temp.append(nums[i])\n                    backtrack(nums, temp, res)\n                    temp.pop()\n                    \n        res = []\n        temp = []\n        backtrack(nums, temp, res)\n        return res"}, {"task_id": "permutations", "completion": "class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def backtrack(nums, path):\n            if len(nums) == 0:\n                res.append(path)\n            for i in range(len(nums)):\n                backtrack(nums[:i] + nums[i+1:], path + [nums[i]])\n        \n        res = []\n        backtrack(nums, [])\n        return res"}], "search-a-2d-matrix": [{"task_id": "search-a-2d-matrix", "completion": "class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. check if matrix is empty\n        if not matrix:\n            return False\n        \n        # 2. check if target is in the first row\n        if matrix[0][0] <= target <= matrix[0][-1]:\n            return self.searchRow(matrix[0], target)\n        \n        # 3. check if target is in the last row\n        if matrix[-1][0] <= target <= matrix[-1][-1]:\n            return self.searchRow(matrix[-1], target)\n        \n        # 4. check if target is in the first column\n        if matrix[0][0] <= target <= matrix[-1][0]:\n            return self.searchColumn(matrix, target)\n        \n        # 5. check if target is in the last column\n        if matrix[0][-1] <= target <= matrix[-1][-1]:\n            return self.searchColumn(matrix, target)\n        \n        # 6. check if target is in the first diagonal\n        if matrix[0][0] <= target <= matrix[-1][-1]:\n            return self.searchDiagonal(matrix, target)\n        \n        # 7. check if target is in the last diagonal\n        if matrix[0][-1] <= target <= matrix[-1][0]:\n            return self.searchDiagonal(matrix, target)\n        \n        return False\n    \n    def searchRow(self, row, target):\n        \"\"\"\n        :type row: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        left, right = 0, len(row) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if row[mid] == target:\n                return True\n            elif row[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return False\n    \n    def searchColumn(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        for row in matrix:\n            if target in row:\n                return True\n        return False\n    \n    def searchDiagonal(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        m, n = len(matrix), len(matrix[0])\n        left, right = 0, m - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if matrix[mid][mid] == target:\n                return True\n            elif matrix[mid][mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return False"}, {"task_id": "search-a-2d-matrix", "completion": "class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. check if matrix is empty\n        if not matrix:\n            return False\n        \n        # 2. check if target is in the first row\n        if matrix[0][0] <= target <= matrix[0][-1]:\n            return self.searchRow(matrix[0], target)\n        \n        # 3. check if target is in the last row\n        if matrix[-1][0] <= target <= matrix[-1][-1]:\n            return self.searchRow(matrix[-1], target)\n        \n        # 4. check if target is in the first column\n        if matrix[0][0] <= target <= matrix[-1][0]:\n            return self.searchColumn(matrix, target)\n        \n        # 5. check if target is in the last column\n        if matrix[0][-1] <= target <= matrix[-1][-1]:\n            return self.searchColumn(matrix, target)\n        \n        # 6. check if target is in the first diagonal\n        if matrix[0][0] <= target <= matrix[-1][-1]:\n            return self.searchDiagonal(matrix, target)\n        \n        # 7. check if target is in the last diagonal\n        if matrix[0][-1] <= target <= matrix[-1][0]:\n            return self.searchDiagonal(matrix, target)\n        \n        return False\n    \n    def searchRow(self, row, target):\n        \"\"\"\n        :type row: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        left, right = 0, len(row) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if row[mid] == target:\n                return True\n            elif row[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return False\n    \n    def searchColumn(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        for row in matrix:\n            if target in row:\n                return True\n        return False\n    \n    def searchDiagonal(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        m, n = len(matrix), len(matrix[0])\n        left, right = 0, m - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if matrix[mid][mid] == target:\n                return True\n            elif matrix[mid][mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return False"}, {"task_id": "search-a-2d-matrix", "completion": "class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. check if matrix is empty\n        if not matrix:\n            return False\n        \n        # 2. check if matrix is 1D\n        if len(matrix) == 1:\n            return target in matrix[0]\n        \n        # 3. check if matrix is 2D\n        if len(matrix[0]) == 1:\n            return target in matrix[0]\n        \n        # 4. check if matrix is 3D\n        if len(matrix[0]) == 1:\n            return target in matrix[0]\n        \n        # 5. check if matrix is 4D\n        if len(matrix[0]) == 1:\n            return target in matrix[0]\n        \n        # 6. check if matrix is 5D\n        if len(matrix[0]) == 1:\n            return target in matrix[0]\n        \n        # 7. check if matrix is 6D\n        if len(matrix[0]) == 1:\n            return target in matrix[0]\n        \n        # 8. check if matrix is 7D\n        if len(matrix[0]) == 1:\n            return target in matrix[0]\n        \n        # 9. check if matrix is 8D\n        if len(matrix[0]) == 1:\n            return target in matrix[0]\n        \n        # 10. check if matrix is 9D\n        if len(matrix[0]) == 1:\n            return target in matrix[0]\n        \n        # 11. check if matrix is 10D\n        if len(matrix[0]) == 1:\n            return target in matrix[0]\n        \n        # 12. check if matrix is 11D\n        if len(matrix[0]) == 1:\n            return target in matrix[0]\n        \n        # 13. check if matrix is 12D\n        if len(matrix[0]) == 1:\n            return target in matrix[0]\n        \n        # 14. check if matrix is 13D\n        if len(matrix[0]) == 1:\n            return target in matrix[0]\n        \n        # 15. check if matrix is 14D\n        if len(matrix[0]) == 1:\n            return target in matrix[0]\n        \n        # 16. check if matrix is 15D\n        if len(matrix[0]) == 1:\n            return target in matrix[0]\n        \n        # 17. check if matrix is 16D\n        if len(matrix[0]) == 1:\n            return target in matrix[0]\n        \n        # 18. check if matrix is 17D\n        if len(matrix[0]) == 1:\n            return target in matrix[0]\n        \n        # 19. check if matrix is 18D\n        if len(matrix[0]) == 1:\n            return target in matrix[0]\n        \n        # 20. check if matrix is 19D\n        if len(matrix[0]) == 1:\n            return target in matrix[0]\n        \n        # 21. check if matrix is 20D\n        if len(matrix[0]) == 1:\n            return target in matrix[0]\n        \n        # 22. check if matrix is 21D\n        if len(matrix[0]) == 1:\n            return target in matrix[0]\n        \n        # 23. check if matrix is 22D\n        if len(matrix[0]) == 1:\n            return target in matrix[0]\n        \n        # 24. check if matrix is 23D\n        if len(matrix[0]) == 1:\n            return target in matrix[0]\n        \n        # 25. check if matrix is 24D\n        if len(matrix[0]) == 1:\n            return target in matrix[0]\n        \n        # 26. check if matrix is 25D\n        if len(matrix[0]) == 1:\n            return target in matrix[0]\n        \n        # 27. check if matrix is 26D\n        if len(matrix[0]) == 1:\n            return target in matrix[0]\n        \n        # 28."}, {"task_id": "search-a-2d-matrix", "completion": "class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. check if matrix is empty\n        if not matrix:\n            return False\n        \n        # 2. check if target is in the first row\n        if matrix[0][0] <= target <= matrix[0][-1]:\n            return self.binarySearch(matrix[0], target)\n        \n        # 3. check if target is in the last row\n        if matrix[-1][0] <= target <= matrix[-1][-1]:\n            return self.binarySearch(matrix[-1], target)\n        \n        # 4. check if target is in the first column\n        for i in range(len(matrix)):\n            if matrix[i][0] == target:\n                return True\n        \n        # 5. check if target is in the last column\n        for i in range(len(matrix)):\n            if matrix[i][-1] == target:\n                return True\n        \n        # 6. check if target is in the first diagonal\n        for i in range(len(matrix)):\n            if matrix[i][i] == target:\n                return True\n        \n        # 7. check if target is in the last diagonal\n        for i in range(len(matrix)):\n            if matrix[i][-i-1] == target:\n                return True\n        \n        return False\n    \n    def binarySearch(self, arr, target):\n        left = 0\n        right = len(arr) - 1\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            \n            if arr[mid] == target:\n                return True\n            elif arr[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return False"}, {"task_id": "search-a-2d-matrix", "completion": "class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. check if matrix is empty\n        if not matrix:\n            return False\n        \n        # 2. check if matrix is 1D\n        if len(matrix) == 1:\n            return target in matrix[0]\n        \n        # 3. check if matrix is 2D\n        if len(matrix[0]) == 1:\n            return target in matrix[0]\n        \n        # 4. check if matrix is 3D\n        if len(matrix[0]) == 1 and len(matrix) == 1:\n            return target in matrix[0][0]\n        \n        # 5. check if matrix is 4D\n        if len(matrix[0]) == 1 and len(matrix) == 1 and len(matrix[0]) == 1:\n            return target in matrix[0][0][0]\n        \n        # 6. check if matrix is 5D\n        if len(matrix[0]) == 1 and len(matrix) == 1 and len(matrix[0]) == 1 and len(matrix[0][0]) == 1:\n            return target in matrix[0][0][0][0]\n        \n        # 7. check if matrix is 6D\n        if len(matrix[0]) == 1 and len(matrix) == 1 and len(matrix[0]) == 1 and len(matrix[0][0]) == 1 and len(matrix[0][0][0]) == 1:\n            return target in matrix[0][0][0][0][0]\n        \n        # 8. check if matrix is 7D\n        if len(matrix[0]) == 1 and len(matrix) == 1 and len(matrix[0]) == 1 and len(matrix[0][0]) == 1 and len(matrix[0][0][0]) == 1 and len(matrix[0][0][0][0]) == 1:\n            return target in matrix[0][0][0][0][0][0]\n        \n        # 9. check if matrix is 8D\n        if len(matrix[0]) == 1 and len(matrix) == 1 and len(matrix[0]) == 1 and len(matrix[0][0]) == 1 and len(matrix[0][0][0]) == 1 and len(matrix[0][0][0][0]) == 1 and len(matrix[0][0][0][0][0]) == 1:\n            return target in matrix[0][0][0][0][0][0][0]\n        \n        # 10. check if matrix is 9D\n        if len(matrix[0]) == 1 and len(matrix) == 1 and len(matrix[0]) == 1 and len(matrix[0][0]) == 1 and len(matrix[0][0][0]) == 1 and len(matrix[0][0][0][0]) == 1 and len(matrix[0][0][0][0][0]) == 1 and len(matrix[0][0][0][0][0][0]) == 1:\n            return target in matrix[0][0][0][0][0][0][0][0]\n        \n        # 11. check if matrix is 10D\n        if len(matrix[0]) == 1 and len(matrix) == 1 and len(matrix[0]) == 1 and len(matrix[0][0]) == 1 and len(matrix[0][0][0]) == 1 and len(matrix[0][0][0][0]) == 1 and len(matrix[0][0][0][0][0]) == 1 and len(matrix[0][0][0][0][0][0]) == 1 and len(matrix[0][0][0][0][0][0][0]) == 1:\n            return target in matrix[0][0][0][0][0][0][0][0][0]\n        \n        # 12. check if matrix is 11D\n        if len(matrix[0]) == 1 and len(matrix) == 1 and len(matrix[0]) == 1 and len(matrix[0][0]) == 1 and len(matrix[0][0][0]) == 1 and len(matrix[0][0][0][0]) == 1 and len(matrix[0][0][0][0][0]) =="}], "add-two-numbers": [{"task_id": "add-two-numbers", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # Runtime: 40 ms, faster than 99.24% of Python3 online submissions for Add Two Numbers.\n        # Memory Usage: 13.7 MB, less than 5.00% of Python3 online submissions for Add Two Numbers.\n        \n        # Edge case\n        if not l1:\n            return l2\n        if not l2:\n            return l1\n        \n        # Create a new linked list\n        dummy = ListNode(0)\n        curr = dummy\n        \n        # Add the two linked lists\n        carry = 0\n        while l1 or l2 or carry:\n            if l1:\n                carry += l1.val\n                l1 = l1.next\n            if l2:\n                carry += l2.val\n                l2 = l2.next\n            curr.next = ListNode(carry % 10)\n            carry //= 10\n            curr = curr.next\n        return dummy.next"}, {"task_id": "add-two-numbers", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # Runtime: 40 ms, faster than 99.97% of Python3 online submissions for Add Two Numbers.\n        # Memory Usage: 13.9 MB, less than 99.97% of Python3 online submissions for Add Two Numbers.\n        \n        # Edge case\n        if not l1:\n            return l2\n        if not l2:\n            return l1\n        \n        # Create a new linked list\n        head = ListNode(0)\n        current = head\n        \n        # Iterate through the linked lists\n        while l1 or l2:\n            \n            # Add the values of the two nodes\n            sum = 0\n            if l1:\n                sum += l1.val\n                l1 = l1.next\n            if l2:\n                sum += l2.val\n                l2 = l2.next\n            \n            # Add the carry\n            if current.next:\n                sum += current.next.val\n            \n            # Create a new node\n            current.next = ListNode(sum % 10)\n            \n            # Move to the next node\n            current = current.next\n            \n        # Return the head of the new linked list\n        return head.next"}, {"task_id": "add-two-numbers", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # Runtime: 20 ms, faster than 99.88% of Python3 online submissions for Add Two Numbers.\n        # Memory Usage: 13.2 MB, less than 5.00% of Python3 online submissions for Add Two Numbers.\n        \n        # Solution 1\n        # --------------------------------------------------------------------------------------------------------------\n        # # Iterate through the linked lists and add the values of each node together.\n        # # If the sum is greater than 9, then add 1 to the next node and subtract 10 from the sum.\n        # # If the sum is less than 9, then add 0 to the next node.\n        # # If the sum is equal to 9, then add 1 to the next node and subtract 10 from the sum.\n        # # If the sum is equal to 0, then add 0 to the next node.\n        # # If the sum is equal to 1, then add 1 to the next node and subtract 10 from the sum.\n        # # If the sum is equal to 2, then add 1 to the next node and subtract 10 from the sum.\n        # # If the sum is equal to 3, then add 1 to the next node and subtract 10 from the sum.\n        # # If the sum is equal to 4, then add 1 to the next node and subtract 10 from the sum.\n        # # If the sum is equal to 5, then add 1 to the next node and subtract 10 from the sum.\n        # # If the sum is equal to 6, then add 1 to the next node and subtract 10 from the sum.\n        # # If the sum is equal to 7, then add 1 to the next node and subtract 10 from the sum.\n        # # If the sum is equal to 8, then add 1 to the next node and subtract 10 from the sum.\n        # # If the sum is equal to 9, then add 1 to the next node and subtract 10 from the sum.\n        # # If the sum is equal to 10, then add 1 to the next node and subtract 10 from the sum.\n        # # If the sum is equal to 11, then add 1 to the next node and subtract 10 from the sum.\n        # # If the sum is equal to 12, then add 1 to the next node and subtract 10 from the sum.\n        # # If the sum is equal to 13, then add 1 to the next node and subtract 10 from the sum.\n        # # If the sum is equal to 14, then add 1 to the next node and subtract 10 from the sum.\n        # # If the sum is equal to 15, then add 1 to the next node and subtract 10 from the sum.\n        # # If the sum is equal to 16, then add 1 to the next node and subtract 10 from the sum.\n        # # If the sum is equal to 17, then add 1 to the next node and subtract 10 from the sum.\n        # # If the sum is equal to 18, then add 1 to the next node and subtract 10 from the sum.\n        # # If the sum is equal to 19, then add 1 to the next node and subtract 10 from the sum.\n        # # If the sum is equal to 20, then add 1 to the next node and subtract 10 from the sum.\n        # # If the sum is equal to 21, then add 1 to the next node and subtract 10 from the sum.\n        # # If the sum is equal to 22, then add 1 to the next node and subtract 10 from the sum.\n        # # If the sum is equal to 23, then add 1 to the next node and subtract 10 from the sum.\n        # # If the sum is equal to 24, then add 1 to the next node and subtract 10 from the sum.\n        # # If the sum is equal to 25, then add 1 to the next node and subtract 10 from the sum.\n        # # If the sum is equal to 26, then add 1 to the next node and subtract 10 from the sum.\n        # # If the sum is equal to 27, then add 1 to the"}, {"task_id": "add-two-numbers", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # 1. Create a new linked list\n        # 2. Iterate through the linked lists\n        # 3. Add the values of the nodes\n        # 4. If the sum is greater than 9, add 1 to the next node and subtract 10 from the sum\n        # 5. If the sum is less than 9, add the sum to the next node\n        # 6. If the sum is 0, add 0 to the next node\n        # 7. If the sum is 0 and the next node is 0, return the new linked list\n        # 8. If the sum is 0 and the next node is not 0, return the new linked list\n        # 9. If the sum is not 0 and the next node is 0, return the new linked list\n        # 10. If the sum is not 0 and the next node is not 0, return the new linked list\n        \n        # Create a new linked list\n        new_list = ListNode(0)\n        # Create a pointer to the new linked list\n        pointer = new_list\n        # Create a pointer to the first node of the first linked list\n        l1_pointer = l1\n        # Create a pointer to the first node of the second linked list\n        l2_pointer = l2\n        # Create a variable to store the sum of the nodes\n        sum = 0\n        \n        # Iterate through the linked lists\n        while l1_pointer or l2_pointer:\n            # Add the values of the nodes\n            sum = sum + (l1_pointer.val if l1_pointer else 0) + (l2_pointer.val if l2_pointer else 0)\n            # If the sum is greater than 9, add 1 to the next node and subtract 10 from the sum\n            if sum >= 10:\n                pointer.next = ListNode(sum - 10)\n                pointer = pointer.next\n                sum = 1\n            # If the sum is less than 9, add the sum to the next node\n            elif sum < 10:\n                pointer.next = ListNode(sum)\n                pointer = pointer.next\n                sum = 0\n            # If the sum is 0, add 0 to the next node\n            elif sum == 0:\n                pointer.next = ListNode(0)\n                pointer = pointer.next\n                sum = 0\n            # If the sum is 0 and the next node is 0, return the new linked list\n            elif sum == 0 and pointer.next.val == 0:\n                return new_list.next\n            # If the sum is 0 and the next node is not 0, return the new linked list\n            elif sum == 0 and pointer.next.val != 0:\n                return new_list.next\n            # If the sum is not 0 and the next node is 0, return the new linked list\n            elif sum != 0 and pointer.next.val == 0:\n                return new_list.next\n            # If the sum is not 0 and the next node is not 0, return the new linked list\n            elif sum != 0 and pointer.next.val != 0:\n                return new_list.next\n            # Move the pointers to the next nodes\n            if l1_pointer:\n                l1_pointer = l1_pointer.next\n            if l2_pointer:\n                l2_pointer = l2_pointer.next\n        # If the sum is not 0 and the next node is not 0, return the new linked list\n        if sum != 0:\n            pointer.next = ListNode(sum)\n            pointer = pointer.next\n        # If the sum is 0 and the next node is 0, return the new linked list\n        elif sum == 0 and pointer.next.val == 0:\n            return new_list.next\n        # If the sum is 0 and the next node is not 0, return the new linked list\n        elif sum == 0 and pointer.next.val != 0:\n            return new_list.next\n        # If the sum is not 0 and the next node is 0, return the new linked list\n        elif sum != 0 and pointer.next.val == 0:\n            return new_list.next\n        # If the sum is not 0 and the next node is not 0, return the new linked list\n        elif sum != 0 and pointer"}, {"task_id": "add-two-numbers", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # 1. Create a new linked list\n        # 2. Iterate through the linked lists\n        # 3. Add the values of the nodes\n        # 4. If the sum is greater than 9, add 1 to the next node and subtract 10 from the sum\n        # 5. If the sum is less than 9, add the sum to the next node\n        # 6. If the sum is 0, add 0 to the next node\n        # 7. If the sum is 9, add 1 to the next node and subtract 10 from the sum\n        # 8. If the sum is 10, add 1 to the next node and subtract 10 from the sum\n        # 9. If the sum is 11, add 1 to the next node and subtract 10 from the sum\n        # 10. If the sum is 12, add 1 to the next node and subtract 10 from the sum\n        # 11. If the sum is 13, add 1 to the next node and subtract 10 from the sum\n        # 12. If the sum is 14, add 1 to the next node and subtract 10 from the sum\n        # 13. If the sum is 15, add 1 to the next node and subtract 10 from the sum\n        # 14. If the sum is 16, add 1 to the next node and subtract 10 from the sum\n        # 15. If the sum is 17, add 1 to the next node and subtract 10 from the sum\n        # 16. If the sum is 18, add 1 to the next node and subtract 10 from the sum\n        # 17. If the sum is 19, add 1 to the next node and subtract 10 from the sum\n        # 18. If the sum is 20, add 1 to the next node and subtract 10 from the sum\n        # 19. If the sum is 21, add 1 to the next node and subtract 10 from the sum\n        # 20. If the sum is 22, add 1 to the next node and subtract 10 from the sum\n        # 21. If the sum is 23, add 1 to the next node and subtract 10 from the sum\n        # 22. If the sum is 24, add 1 to the next node and subtract 10 from the sum\n        # 23. If the sum is 25, add 1 to the next node and subtract 10 from the sum\n        # 24. If the sum is 26, add 1 to the next node and subtract 10 from the sum\n        # 25. If the sum is 27, add 1 to the next node and subtract 10 from the sum\n        # 26. If the sum is 28, add 1 to the next node and subtract 10 from the sum\n        # 27. If the sum is 29, add 1 to the next node and subtract 10 from the sum\n        # 28. If the sum is 30, add 1 to the next node and subtract 10 from the sum\n        # 29. If the sum is 31, add 1 to the next node and subtract 10 from the sum\n        # 30. If the sum is 32, add 1 to the next node and subtract 10 from the sum\n        # 31. If the sum is 33, add 1 to the next node and subtract 10 from the sum\n        # 32. If the sum is 34, add 1 to the next node and subtract 10 from the sum\n        # 33. If the sum is 35, add 1 to the next node and subtract 10 from the sum\n        # 34. If the sum is 36, add 1 to the next node and subtract 10 from the sum\n        # 35. If the sum is 37, add 1 to the next node and subtract 10 from the sum\n        # 36. If the sum is 38, add 1 to the next node and subtract 10 from the sum\n        # 37. If the sum is 39, add 1 to the next node"}], "number-complement": [{"task_id": "number-complement", "completion": "class Solution(object):\n    def findComplement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/"}, {"task_id": "number-complement", "completion": "class Solution(object):\n    def findComplement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/"}, {"task_id": "number-complement", "completion": "class Solution(object):\n    def findComplement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/"}, {"task_id": "number-complement", "completion": "class Solution(object):\n    def findComplement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/"}, {"task_id": "number-complement", "completion": "class Solution(object):\n    def findComplement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n        # 1009: https://leetcode.com/problems/complement-of-base-10-integer/"}], "arithmetic-slices-ii-subsequence": [{"task_id": "arithmetic-slices-ii-subsequence", "completion": "class Solution(object):\n    def numberOfArithmeticSlices(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # dp[i] = number of arithmetic slices ending at index i\n        # dp[i] = dp[i-1] + dp[i-2] + ... + dp[i-k]\n        # dp[i] = dp[i-1] + dp[i-2] + ... + dp[i-k] + dp[i-k-1] + dp[i-k-2] + ... + dp[i-2]\n        # dp[i] = dp[i-1] + dp[i-2] + ... + dp[i-k] + dp[i-k-1] + dp[i-k-2] + ... + dp[i-2] + dp[i-1]\n        # dp[i] = dp[i-1] + dp[i-2] + ... + dp[i-k] + dp[i-k-1] + dp[i-k-2] + ... + dp[i-2] + dp[i-1] + dp[i]\n        # dp[i] = dp[i-1] + dp[i-2] + ... + dp[i-k] + dp[i-k-1] + dp[i-k-2] + ... + dp[i-2] + dp[i-1] + dp[i] + dp[i+1]\n        # dp[i] = dp[i-1] + dp[i-2] + ... + dp[i-k] + dp[i-k-1] + dp[i-k-2] + ... + dp[i-2] + dp[i-1] + dp[i] + dp[i+1] + dp[i+2]\n        # ...\n        # dp[i] = dp[i-1] + dp[i-2] + ... + dp[i-k] + dp[i-k-1] + dp[i-k-2] + ... + dp[i-2] + dp[i-1] + dp[i] + dp[i+1] + dp[i+2] + ... + dp[i+k]\n        # dp[i] = dp[i-1] + dp[i-2] + ... + dp[i-k] + dp[i-k-1] + dp[i-k-2] + ... + dp[i-2] + dp[i-1] + dp[i] + dp[i+1] + dp[i+2] + ... + dp[i+k] + dp[i+k+1] + dp[i+k+2] + ... + dp[i+2k]\n        # ...\n        # dp[i] = dp[i-1] + dp[i-2] + ... + dp[i-k] + dp[i-k-1] + dp[i-k-2] + ... + dp[i-2] + dp[i-1] + dp[i] + dp[i+1] + dp[i+2] + ... + dp[i+k] + dp[i+k+1] + dp[i+k+2] + ... + dp[i+2k] + dp[i+2k+1] + dp[i+2k+2] + ... + dp[i+2k+k]\n        # ...\n        # dp[i] = dp[i-1] + dp[i-2] + ... + dp[i-k] + dp[i-k-1] + dp[i-k-2] + ... + dp[i-2] + dp[i-1] + dp[i] + dp[i+1] + dp[i+2] + ... + dp[i+k] + dp[i+k+1] + dp[i+k+2] + ... + dp[i+2k] + dp[i+2k+1] + dp[i+2k+2] +"}, {"task_id": "arithmetic-slices-ii-subsequence", "completion": "class Solution(object):\n    def numberOfArithmeticSlices(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # dp[i] = number of arithmetic slices ending at index i\n        # dp[i] = dp[i-1] + dp[i-2] + ... + dp[i-k]\n        # dp[i] = dp[i-1] + dp[i-2] + ... + dp[i-k] + dp[i-k-1] + dp[i-k-2] + ... + dp[i-2]\n        # dp[i] = dp[i-1] + dp[i-2] + ... + dp[i-k] + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-2] + dp[i-k-3]\n        # dp[i] = dp[i-1] + dp[i-2] + ... + dp[i-k] + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-2] + dp[i-k-3] + dp[i-k-4]\n        # ...\n        # dp[i] = dp[i-1] + dp[i-2] + ... + dp[i-k] + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-2] + dp[i-k-3] + dp[i-k-4] + ... + dp[i-k-k]\n        # dp[i] = dp[i-1] + dp[i-2] + ... + dp[i-k] + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-2] + dp[i-k-3] + dp[i-k-4] + ... + dp[i-k-k] + dp[i-k-k-1]\n        # dp[i] = dp[i-1] + dp[i-2] + ... + dp[i-k] + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-2] + dp[i-k-3] + dp[i-k-4] + ... + dp[i-k-k] + dp[i-k-k-1] + dp[i-k-k-2]\n        # ...\n        # dp[i] = dp[i-1] + dp[i-2] + ... + dp[i-k] + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-2] + dp[i-k-3] + dp[i-k-4] + ... + dp[i-k-k] + dp[i-k-k-1] + dp[i-k-k-2] + ... + dp[i-k-k-k]\n        # dp[i] = dp[i-1] + dp[i-2] + ... + dp[i-k] + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-2] + dp[i-k-3] + dp[i-k-4] + ... + dp[i-k-k] + dp[i-k-k-1] + dp[i-k-k-2] + ... + dp[i-k-k-k] + dp[i-k-k-k-1]\n        # ...\n        # dp[i] = dp[i-1] + dp[i-2] + ... + dp[i-k] + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-2] + dp[i-k-3] + dp[i-k-4] + ... + dp[i-k-k] + dp[i-k-k-1] + dp[i-k-k"}, {"task_id": "arithmetic-slices-ii-subsequence", "completion": "class Solution(object):\n    def numberOfArithmeticSlices(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # dp[i] = number of arithmetic sequences ending at nums[i]\n        # dp[i] = dp[i-1] + dp[i-2] + ... + dp[i-k]\n        # dp[i] = dp[i-1] + dp[i-2] + ... + dp[i-k] + dp[i-k-1] + dp[i-k-2] + ... + dp[i-1]\n        # dp[i] = dp[i-1] + dp[i-2] + ... + dp[i-k] + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-1] + dp[i-k-2] + ... + dp[i-1]\n        # dp[i] = dp[i-1] + dp[i-2] + ... + dp[i-k] + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-1] + dp[i-k-2] + ... + dp[i-1]\n        # dp[i] = dp[i-1] + dp[i-2] + ... + dp[i-k] + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-1] + dp[i-k-2"}, {"task_id": "arithmetic-slices-ii-subsequence", "completion": "class Solution(object):\n    def numberOfArithmeticSlices(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # dp[i] = number of arithmetic slices ending at index i\n        dp = [0] * len(nums)\n        ans = 0\n        for i in range(1, len(nums)):\n            for j in range(i):\n                if nums[i] - nums[j] == nums[i - 1] - nums[i - 2]:\n                    dp[i] += dp[j]\n                    ans += dp[i]\n        return ans"}, {"task_id": "arithmetic-slices-ii-subsequence", "completion": "class Solution(object):\n    def numberOfArithmeticSlices(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # dp[i] = number of arithmetic subsequence ending at nums[i]\n        # dp[i] = dp[i-1] + dp[i-2] + ... + dp[i-k]\n        # dp[i] = dp[i-1] + dp[i-2] + ... + dp[i-k] + dp[i-k-1] + dp[i-k-2] + ... + dp[i-1]\n        # dp[i] = dp[i-1] + dp[i-2] + ... + dp[i-k] + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-1] + dp[i-k-2] + ... + dp[i-1]\n        # dp[i] = dp[i-1] + dp[i-2] + ... + dp[i-k] + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-1] + dp[i-k-2] + ... + dp[i-1]\n        # dp[i] = dp[i-1] + dp[i-2] + ... + dp[i-k] + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-1] + dp[i-k-2] + ... + dp[i-1]\n        # dp[i] = dp[i-1] + dp[i-2] + ... + dp[i-k] + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-1] + dp[i-k-2] + ... + dp[i-k-1] + dp[i-k-2]"}], "text-justification": [{"task_id": "text-justification", "completion": "class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \u5148\u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u5230\u4e00\u4e2a\u5217\u8868\u91cc\n        # 2. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u52a0\u8d77\u6765\uff0c\u5982\u679c\u8d85\u8fc7\u4e86maxWidth\uff0c\u5c31\u628a\u524d\u9762\u7684\u5355\u8bcd\u62fc\u63a5\u8d77\u6765\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u5355\u8bcd\u52a0\u5230\u5217\u8868\u91cc\n        # 3. \u5982\u679c\u4e0d\u8d85\u8fc7maxWidth\uff0c\u5c31\u628a\u8fd9\u4e2a\u5355\u8bcd\u52a0\u5230\u5217\u8868\u91cc\n        # 4. \u6700\u540e\u628a\u5217\u8868\u91cc\u7684\u5355\u8bcd\u62fc\u63a5\u8d77\u6765\uff0c\u7136\u540e\u628a\u6700\u540e\u4e00\u884c\u7684\u5355\u8bcd\u62fc\u63a5\u8d77\u6765\n        # 5. \u5982\u679c\u6700\u540e\u4e00\u884c\u7684\u5355\u8bcd\u6570\u91cf\u4e0d\u662f1\uff0c\u5c31\u628a\u524d\u9762\u7684\u5355\u8bcd\u62fc\u63a5\u8d77\u6765\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u5355\u8bcd\u52a0\u5230\u5217\u8868\u91cc\n        # 6. \u5982\u679c\u6700\u540e\u4e00\u884c\u7684\u5355\u8bcd\u6570\u91cf\u662f1\uff0c\u5c31\u628a\u8fd9\u4e2a\u5355\u8bcd\u52a0\u5230\u5217\u8868\u91cc\n        # 7. \u628a\u5217\u8868\u91cc\u7684\u5355\u8bcd\u62fc\u63a5\u8d77\u6765\n        # 8. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u5148\u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u5230\u4e00\u4e2a\u5217\u8868\u91cc\n        word_lengths = []\n        for word in words:\n            word_lengths.append(len(word))\n        \n        # 2. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u52a0\u8d77\u6765\uff0c\u5982\u679c\u8d85\u8fc7\u4e86maxWidth\uff0c\u5c31\u628a\u524d\u9762\u7684\u5355\u8bcd\u62fc\u63a5\u8d77\u6765\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u5355\u8bcd\u52a0\u5230\u5217\u8868\u91cc\n        # 3. \u5982\u679c\u4e0d\u8d85\u8fc7maxWidth\uff0c\u5c31\u628a\u8fd9\u4e2a\u5355\u8bcd\u52a0\u5230\u5217\u8868\u91cc\n        # 4. \u6700\u540e\u628a\u5217\u8868\u91cc\u7684\u5355\u8bcd\u62fc\u63a5\u8d77\u6765\uff0c\u7136\u540e\u628a\u6700\u540e\u4e00\u884c\u7684\u5355\u8bcd\u62fc\u63a5\u8d77\u6765\n        # 5. \u5982\u679c\u6700\u540e\u4e00\u884c\u7684\u5355\u8bcd\u6570\u91cf\u4e0d\u662f1\uff0c\u5c31\u628a\u524d\u9762\u7684\u5355\u8bcd\u62fc\u63a5\u8d77\u6765\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u5355\u8bcd\u52a0\u5230\u5217\u8868\u91cc\n        # 6. \u5982\u679c\u6700\u540e\u4e00\u884c\u7684\u5355\u8bcd\u6570\u91cf\u662f1\uff0c\u5c31\u628a\u8fd9\u4e2a\u5355\u8bcd\u52a0\u5230\u5217\u8868\u91cc\n        # 7. \u628a\u5217\u8868\u91cc\u7684\u5355\u8bcd\u62fc\u63a5\u8d77\u6765\n        # 8. \u8fd4\u56de\u7ed3\u679c\n        result = []\n        start = 0\n        while start < len(words):\n            end = start\n            line_length = 0\n            while end < len(words) and line_length + word_lengths[end] + len(words) - 1 <= maxWidth:\n                line_length += word_lengths[end]\n                end += 1\n            if end == start:\n                result.append(words[start])\n                start += 1\n            else:\n                line = ' '.join(words[start:end])\n                if end - start == 1:\n                    result.append(line)\n                else:\n                    extra_space = maxWidth - line_length\n                    extra_space_per_word = extra_space // (end - start - 1)\n                    extra_space_left = extra_space % (end - start - 1)\n                    line = line + ' ' * extra_space_per_word\n                    for i in range(start + 1, end):\n                        line = line + ' ' * (extra_space_per_word + 1)\n                        if i < end - 1:\n                            line = line + words[i] + ' ' * extra_space_per_word\n                        else:\n                            line = line + words[i] + ' ' * (extra_space_per_word + extra_space_left)\n                    result.append(line)\n                start = end\n        return result"}, {"task_id": "text-justification", "completion": "class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \u5148\u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 2. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 3. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 4. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 5. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 6. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 7. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 8. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 9. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 10. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 11. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 12. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 13. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 14. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 15. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 16. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 17. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 18. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 19. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 20. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 21. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 22. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 23. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 24. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 25. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 26. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 27. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 28. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 29. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 30. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 31. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 32. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 33. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 34. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 35. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 36. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 37. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 38. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 39. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 40. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 41. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 42. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 43. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 44. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 45. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58"}, {"task_id": "text-justification", "completion": "class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \u5148\u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u5230\u4e00\u4e2a\u5217\u8868\u91cc\n        # 2. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u52a0\u8d77\u6765\uff0c\u5982\u679c\u8d85\u8fc7\u4e86maxWidth\uff0c\u5c31\u628a\u524d\u9762\u7684\u5355\u8bcd\u62fc\u63a5\u8d77\u6765\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u5355\u8bcd\u52a0\u5230\u5217\u8868\u91cc\n        # 3. \u5982\u679c\u4e0d\u8d85\u8fc7maxWidth\uff0c\u5c31\u628a\u8fd9\u4e2a\u5355\u8bcd\u52a0\u5230\u5217\u8868\u91cc\n        # 4. \u6700\u540e\u628a\u5217\u8868\u91cc\u7684\u5355\u8bcd\u62fc\u63a5\u8d77\u6765\uff0c\u7136\u540e\u628a\u6700\u540e\u4e00\u884c\u7684\u5355\u8bcd\u62fc\u63a5\u8d77\u6765\n        # 5. \u5982\u679c\u6700\u540e\u4e00\u884c\u7684\u5355\u8bcd\u6570\u91cf\u4e0d\u662f1\uff0c\u5c31\u628a\u524d\u9762\u7684\u5355\u8bcd\u62fc\u63a5\u8d77\u6765\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u5355\u8bcd\u52a0\u5230\u5217\u8868\u91cc\n        # 6. \u5982\u679c\u6700\u540e\u4e00\u884c\u7684\u5355\u8bcd\u6570\u91cf\u662f1\uff0c\u5c31\u628a\u8fd9\u4e2a\u5355\u8bcd\u52a0\u5230\u5217\u8868\u91cc\n        # 7. \u628a\u5217\u8868\u91cc\u7684\u5355\u8bcd\u62fc\u63a5\u8d77\u6765\n        # 8. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u5148\u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u5230\u4e00\u4e2a\u5217\u8868\u91cc\n        word_lengths = []\n        for word in words:\n            word_lengths.append(len(word))\n        \n        # 2. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u52a0\u8d77\u6765\uff0c\u5982\u679c\u8d85\u8fc7\u4e86maxWidth\uff0c\u5c31\u628a\u524d\u9762\u7684\u5355\u8bcd\u62fc\u63a5\u8d77\u6765\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u5355\u8bcd\u52a0\u5230\u5217\u8868\u91cc\n        # 3. \u5982\u679c\u4e0d\u8d85\u8fc7maxWidth\uff0c\u5c31\u628a\u8fd9\u4e2a\u5355\u8bcd\u52a0\u5230\u5217\u8868\u91cc\n        # 4. \u6700\u540e\u628a\u5217\u8868\u91cc\u7684\u5355\u8bcd\u62fc\u63a5\u8d77\u6765\uff0c\u7136\u540e\u628a\u6700\u540e\u4e00\u884c\u7684\u5355\u8bcd\u62fc\u63a5\u8d77\u6765\n        # 5. \u5982\u679c\u6700\u540e\u4e00\u884c\u7684\u5355\u8bcd\u6570\u91cf\u4e0d\u662f1\uff0c\u5c31\u628a\u524d\u9762\u7684\u5355\u8bcd\u62fc\u63a5\u8d77\u6765\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u5355\u8bcd\u52a0\u5230\u5217\u8868\u91cc\n        # 6. \u5982\u679c\u6700\u540e\u4e00\u884c\u7684\u5355\u8bcd\u6570\u91cf\u662f1\uff0c\u5c31\u628a\u8fd9\u4e2a\u5355\u8bcd\u52a0\u5230\u5217\u8868\u91cc\n        # 7. \u628a\u5217\u8868\u91cc\u7684\u5355\u8bcd\u62fc\u63a5\u8d77\u6765\n        # 8. \u8fd4\u56de\u7ed3\u679c\n        result = []\n        current_line = []\n        current_line_length = 0\n        for i in range(len(words)):\n            if current_line_length + word_lengths[i] + len(current_line) - 1 > maxWidth:\n                # \u5982\u679c\u8d85\u8fc7\u4e86maxWidth\uff0c\u5c31\u628a\u524d\u9762\u7684\u5355\u8bcd\u62fc\u63a5\u8d77\u6765\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u5355\u8bcd\u52a0\u5230\u5217\u8868\u91cc\n                current_line_length = 0\n                current_line = []\n                result.append(' '.join(current_line))\n            else:\n                # \u5982\u679c\u4e0d\u8d85\u8fc7maxWidth\uff0c\u5c31\u628a\u8fd9\u4e2a\u5355\u8bcd\u52a0\u5230\u5217\u8868\u91cc\n                current_line.append(words[i])\n                current_line_length += word_lengths[i] + 1\n        result.append(' '.join(current_line))\n        \n        # \u5982\u679c\u6700\u540e\u4e00\u884c\u7684\u5355\u8bcd\u6570\u91cf\u4e0d\u662f1\uff0c\u5c31\u628a\u524d\u9762\u7684\u5355\u8bcd\u62fc\u63a5\u8d77\u6765\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u5355\u8bcd\u52a0\u5230\u5217\u8868\u91cc\n        if len(current_line) > 1:\n            current_line = []\n            for i in range(len(words) - 1):\n                current_line.append(words[i])\n            current_line.append(words[-1])\n            result.append(' '.join(current_line))\n        else:\n            # \u5982\u679c\u6700\u540e\u4e00\u884c\u7684\u5355\u8bcd\u6570\u91cf\u662f1\uff0c\u5c31\u628a\u8fd9\u4e2a\u5355\u8bcd\u52a0\u5230\u5217\u8868\u91cc\n            result.append(words[-1])"}, {"task_id": "text-justification", "completion": "class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \u5148\u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 2. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 3. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 4. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 5. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 6. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 7. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 8. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 9. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 10. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 11. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 12. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 13. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 14. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 15. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 16. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 17. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 18. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 19. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 20. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 21. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 22. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 23. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 24. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 25. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 26. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 27. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 28. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 29. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 30. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 31. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 32. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 33. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 34. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 35. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 36. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 37. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 38. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 39. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 40. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 41. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 42. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 43. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 44. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u4e0b\u6765\n        # 45. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58"}, {"task_id": "text-justification", "completion": "class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \u5148\u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u5230\u4e00\u4e2a\u5217\u8868\u91cc\n        # 2. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u5230\u4e00\u4e2a\u5217\u8868\u91cc\n        # 3. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u5230\u4e00\u4e2a\u5217\u8868\u91cc\n        # 4. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u5230\u4e00\u4e2a\u5217\u8868\u91cc\n        # 5. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u5230\u4e00\u4e2a\u5217\u8868\u91cc\n        # 6. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u5230\u4e00\u4e2a\u5217\u8868\u91cc\n        # 7. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u5230\u4e00\u4e2a\u5217\u8868\u91cc\n        # 8. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u5230\u4e00\u4e2a\u5217\u8868\u91cc\n        # 9. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u5230\u4e00\u4e2a\u5217\u8868\u91cc\n        # 10. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u5230\u4e00\u4e2a\u5217\u8868\u91cc\n        # 11. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u5230\u4e00\u4e2a\u5217\u8868\u91cc\n        # 12. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u5230\u4e00\u4e2a\u5217\u8868\u91cc\n        # 13. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u5230\u4e00\u4e2a\u5217\u8868\u91cc\n        # 14. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u5230\u4e00\u4e2a\u5217\u8868\u91cc\n        # 15. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u5230\u4e00\u4e2a\u5217\u8868\u91cc\n        # 16. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u5230\u4e00\u4e2a\u5217\u8868\u91cc\n        # 17. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u5230\u4e00\u4e2a\u5217\u8868\u91cc\n        # 18. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u5230\u4e00\u4e2a\u5217\u8868\u91cc\n        # 19. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u5230\u4e00\u4e2a\u5217\u8868\u91cc\n        # 20. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u5230\u4e00\u4e2a\u5217\u8868\u91cc\n        # 21. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u5230\u4e00\u4e2a\u5217\u8868\u91cc\n        # 22. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u5230\u4e00\u4e2a\u5217\u8868\u91cc\n        # 23. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u5230\u4e00\u4e2a\u5217\u8868\u91cc\n        # 24. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u5230\u4e00\u4e2a\u5217\u8868\u91cc\n        # 25. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u5230\u4e00\u4e2a\u5217\u8868\u91cc\n        # 26. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u5230\u4e00\u4e2a\u5217\u8868\u91cc\n        # 27. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u5230\u4e00\u4e2a\u5217\u8868\u91cc\n        # 28. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u5230\u4e00\u4e2a\u5217\u8868\u91cc\n        # 29. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u5230\u4e00\u4e2a\u5217\u8868\u91cc\n        # 30. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u5230\u4e00\u4e2a\u5217\u8868\u91cc\n        # 31. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u5230\u4e00\u4e2a\u5217\u8868\u91cc\n        # 32. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u5230\u4e00\u4e2a\u5217\u8868\u91cc\n        # 33. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u5230\u4e00\u4e2a\u5217\u8868\u91cc\n        # 34. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u5230\u4e00\u4e2a\u5217\u8868\u91cc\n        # 35. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u5230\u4e00\u4e2a\u5217\u8868\u91cc\n        # 36. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u5230\u4e00\u4e2a\u5217\u8868\u91cc\n        # 37. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u5230\u4e00\u4e2a\u5217\u8868\u91cc\n        # 38. \u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5b58\u5230\u4e00\u4e2a\u5217\u8868\u91cc\n        # 39."}], "binary-tree-postorder-traversal": [{"task_id": "binary-tree-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def postorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        stack = []\n        stack.append(root)\n        res = []\n        \n        while stack:\n            node = stack.pop()\n            res.append(node.val)\n            if node.left:\n                stack.append(node.left)\n            if node.right:\n                stack.append(node.right)\n        \n        return res[::-1]"}, {"task_id": "binary-tree-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def postorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        stack = []\n        res = []\n        stack.append(root)\n        \n        while stack:\n            node = stack.pop()\n            res.append(node.val)\n            if node.left:\n                stack.append(node.left)\n            if node.right:\n                stack.append(node.right)\n        \n        return res[::-1]"}, {"task_id": "binary-tree-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def postorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        stack = []\n        res = []\n        stack.append(root)\n        \n        while stack:\n            node = stack.pop()\n            res.append(node.val)\n            if node.left:\n                stack.append(node.left)\n            if node.right:\n                stack.append(node.right)\n        \n        return res[::-1]"}, {"task_id": "binary-tree-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def postorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        stack = []\n        res = []\n        stack.append(root)\n        \n        while stack:\n            node = stack.pop()\n            res.append(node.val)\n            if node.left:\n                stack.append(node.left)\n            if node.right:\n                stack.append(node.right)\n        \n        return res[::-1]"}, {"task_id": "binary-tree-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def postorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        stack = []\n        res = []\n        stack.append(root)\n        \n        while stack:\n            node = stack.pop()\n            res.append(node.val)\n            if node.left:\n                stack.append(node.left)\n            if node.right:\n                stack.append(node.right)\n        \n        return res[::-1]"}], "container-with-most-water": [{"task_id": "container-with-most-water", "completion": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. Brute force\n        # 2. Two pointers\n        # 3. Two pointers with extra space\n        # 4. Two pointers with extra space and optimization\n        # 5. Two pointers with extra space and optimization 2\n        # 6. Two pointers with extra space and optimization 3\n        # 7. Two pointers with extra space and optimization 4\n        # 8. Two pointers with extra space and optimization 5\n        # 9. Two pointers with extra space and optimization 6\n        # 10. Two pointers with extra space and optimization 7\n        # 11. Two pointers with extra space and optimization 8\n        # 12. Two pointers with extra space and optimization 9\n        # 13. Two pointers with extra space and optimization 10\n        # 14. Two pointers with extra space and optimization 11\n        # 15. Two pointers with extra space and optimization 12\n        # 16. Two pointers with extra space and optimization 13\n        # 17. Two pointers with extra space and optimization 14\n        # 18. Two pointers with extra space and optimization 15\n        # 19. Two pointers with extra space and optimization 16\n        # 20. Two pointers with extra space and optimization 17\n        # 21. Two pointers with extra space and optimization 18\n        # 22. Two pointers with extra space and optimization 19\n        # 23. Two pointers with extra space and optimization 20\n        # 24. Two pointers with extra space and optimization 21\n        # 25. Two pointers with extra space and optimization 22\n        # 26. Two pointers with extra space and optimization 23\n        # 27. Two pointers with extra space and optimization 24\n        # 28. Two pointers with extra space and optimization 25\n        # 29. Two pointers with extra space and optimization 26\n        # 30. Two pointers with extra space and optimization 27\n        # 31. Two pointers with extra space and optimization 28\n        # 32. Two pointers with extra space and optimization 29\n        # 33. Two pointers with extra space and optimization 30\n        # 34. Two pointers with extra space and optimization 31\n        # 35. Two pointers with extra space and optimization 32\n        # 36. Two pointers with extra space and optimization 33\n        # 37. Two pointers with extra space and optimization 34\n        # 38. Two pointers with extra space and optimization 35\n        # 39. Two pointers with extra space and optimization 36\n        # 40. Two pointers with extra space and optimization 37\n        # 41. Two pointers with extra space and optimization 38\n        # 42. Two pointers with extra space and optimization 39\n        # 43. Two pointers with extra space and optimization 40\n        # 44. Two pointers with extra space and optimization 41\n        # 45. Two pointers with extra space and optimization 42\n        # 46. Two pointers with extra space and optimization 43\n        # 47. Two pointers with extra space and optimization 44\n        # 48. Two pointers with extra space and optimization 45\n        # 49. Two pointers with extra space and optimization 46\n        # 50. Two pointers with extra space and optimization 47\n        # 51. Two pointers with extra space and optimization 48\n        # 52. Two pointers with extra space and optimization 49\n        # 53. Two pointers with extra space and optimization 50\n        # 54. Two pointers with extra space and optimization 51\n        # 55. Two pointers with extra space and optimization 52\n        # 56. Two pointers with extra space and optimization 53\n        # 57. Two pointers with extra space and optimization 54\n        # 58. Two pointers with extra space and optimization 55\n        # 59. Two pointers with extra space and optimization 56\n        # 60. Two pointers with extra space and optimization 57\n        # 61. Two pointers with extra space and optimization 58\n        # 62. Two pointers with extra space and optimization 59\n        # 63. Two pointers with extra"}, {"task_id": "container-with-most-water", "completion": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. Brute force\n        # 2. Two pointers\n        # 3. Two pointers with extra space\n        # 4. Two pointers with extra space and optimization\n        # 5. Two pointers with extra space and optimization 2\n        # 6. Two pointers with extra space and optimization 3\n        # 7. Two pointers with extra space and optimization 4\n        # 8. Two pointers with extra space and optimization 5\n        # 9. Two pointers with extra space and optimization 6\n        # 10. Two pointers with extra space and optimization 7\n        # 11. Two pointers with extra space and optimization 8\n        # 12. Two pointers with extra space and optimization 9\n        # 13. Two pointers with extra space and optimization 10\n        # 14. Two pointers with extra space and optimization 11\n        # 15. Two pointers with extra space and optimization 12\n        # 16. Two pointers with extra space and optimization 13\n        # 17. Two pointers with extra space and optimization 14\n        # 18. Two pointers with extra space and optimization 15\n        # 19. Two pointers with extra space and optimization 16\n        # 20. Two pointers with extra space and optimization 17\n        # 21. Two pointers with extra space and optimization 18\n        # 22. Two pointers with extra space and optimization 19\n        # 23. Two pointers with extra space and optimization 20\n        # 24. Two pointers with extra space and optimization 21\n        # 25. Two pointers with extra space and optimization 22\n        # 26. Two pointers with extra space and optimization 23\n        # 27. Two pointers with extra space and optimization 24\n        # 28. Two pointers with extra space and optimization 25\n        # 29. Two pointers with extra space and optimization 26\n        # 30. Two pointers with extra space and optimization 27\n        # 31. Two pointers with extra space and optimization 28\n        # 32. Two pointers with extra space and optimization 29\n        # 33. Two pointers with extra space and optimization 30\n        # 34. Two pointers with extra space and optimization 31\n        # 35. Two pointers with extra space and optimization 32\n        # 36. Two pointers with extra space and optimization 33\n        # 37. Two pointers with extra space and optimization 34\n        # 38. Two pointers with extra space and optimization 35\n        # 39. Two pointers with extra space and optimization 36\n        # 40. Two pointers with extra space and optimization 37\n        # 41. Two pointers with extra space and optimization 38\n        # 42. Two pointers with extra space and optimization 39\n        # 43. Two pointers with extra space and optimization 40\n        # 44. Two pointers with extra space and optimization 41\n        # 45. Two pointers with extra space and optimization 42\n        # 46. Two pointers with extra space and optimization 43\n        # 47. Two pointers with extra space and optimization 44\n        # 48. Two pointers with extra space and optimization 45\n        # 49. Two pointers with extra space and optimization 46\n        # 50. Two pointers with extra space and optimization 47\n        # 51. Two pointers with extra space and optimization 48\n        # 52. Two pointers with extra space and optimization 49\n        # 53. Two pointers with extra space and optimization 50\n        # 54. Two pointers with extra space and optimization 51\n        # 55. Two pointers with extra space and optimization 52\n        # 56. Two pointers with extra space and optimization 53\n        # 57. Two pointers with extra space and optimization 54\n        # 58. Two pointers with extra space and optimization 55\n        # 59. Two pointers with extra space and optimization 56\n        # 60. Two pointers with extra space and optimization 57\n        # 61. Two pointers with extra space and optimization 58\n        # 62. Two pointers with extra space and optimization 59\n        # 63. Two pointers with extra"}, {"task_id": "container-with-most-water", "completion": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. Brute force\n        # 2. Two pointers\n        # 3. Two pointers with extra space\n        # 4. Two pointers with extra space and optimization\n        # 5. Two pointers with extra space and optimization 2\n        # 6. Two pointers with extra space and optimization 3\n        # 7. Two pointers with extra space and optimization 4\n        # 8. Two pointers with extra space and optimization 5\n        # 9. Two pointers with extra space and optimization 6\n        # 10. Two pointers with extra space and optimization 7\n        # 11. Two pointers with extra space and optimization 8\n        # 12. Two pointers with extra space and optimization 9\n        # 13. Two pointers with extra space and optimization 10\n        # 14. Two pointers with extra space and optimization 11\n        # 15. Two pointers with extra space and optimization 12\n        # 16. Two pointers with extra space and optimization 13\n        # 17. Two pointers with extra space and optimization 14\n        # 18. Two pointers with extra space and optimization 15\n        # 19. Two pointers with extra space and optimization 16\n        # 20. Two pointers with extra space and optimization 17\n        # 21. Two pointers with extra space and optimization 18\n        # 22. Two pointers with extra space and optimization 19\n        # 23. Two pointers with extra space and optimization 20\n        # 24. Two pointers with extra space and optimization 21\n        # 25. Two pointers with extra space and optimization 22\n        # 26. Two pointers with extra space and optimization 23\n        # 27. Two pointers with extra space and optimization 24\n        # 28. Two pointers with extra space and optimization 25\n        # 29. Two pointers with extra space and optimization 26\n        # 30. Two pointers with extra space and optimization 27\n        # 31. Two pointers with extra space and optimization 28\n        # 32. Two pointers with extra space and optimization 29\n        # 33. Two pointers with extra space and optimization 30\n        # 34. Two pointers with extra space and optimization 31\n        # 35. Two pointers with extra space and optimization 32\n        # 36. Two pointers with extra space and optimization 33\n        # 37. Two pointers with extra space and optimization 34\n        # 38. Two pointers with extra space and optimization 35\n        # 39. Two pointers with extra space and optimization 36\n        # 40. Two pointers with extra space and optimization 37\n        # 41. Two pointers with extra space and optimization 38\n        # 42. Two pointers with extra space and optimization 39\n        # 43. Two pointers with extra space and optimization 40\n        # 44. Two pointers with extra space and optimization 41\n        # 45. Two pointers with extra space and optimization 42\n        # 46. Two pointers with extra space and optimization 43\n        # 47. Two pointers with extra space and optimization 44\n        # 48. Two pointers with extra space and optimization 45\n        # 49. Two pointers with extra space and optimization 46\n        # 50. Two pointers with extra space and optimization 47\n        # 51. Two pointers with extra space and optimization 48\n        # 52. Two pointers with extra space and optimization 49\n        # 53. Two pointers with extra space and optimization 50\n        # 54. Two pointers with extra space and optimization 51\n        # 55. Two pointers with extra space and optimization 52\n        # 56. Two pointers with extra space and optimization 53\n        # 57. Two pointers with extra space and optimization 54\n        # 58. Two pointers with extra space and optimization 55\n        # 59. Two pointers with extra space and optimization 56\n        # 60. Two pointers with extra space and optimization 57\n        # 61. Two pointers with extra space and optimization 58\n        # 62. Two pointers with extra space and optimization 59\n        # 63. Two pointers with extra"}, {"task_id": "container-with-most-water", "completion": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. Brute force\n        # 2. Two pointers\n        # 3. Two pointers with extra space\n        # 4. Two pointers with extra space and optimization\n        # 5. Two pointers with extra space and optimization 2\n        # 6. Two pointers with extra space and optimization 3\n        # 7. Two pointers with extra space and optimization 4\n        # 8. Two pointers with extra space and optimization 5\n        # 9. Two pointers with extra space and optimization 6\n        # 10. Two pointers with extra space and optimization 7\n        # 11. Two pointers with extra space and optimization 8\n        # 12. Two pointers with extra space and optimization 9\n        # 13. Two pointers with extra space and optimization 10\n        # 14. Two pointers with extra space and optimization 11\n        # 15. Two pointers with extra space and optimization 12\n        # 16. Two pointers with extra space and optimization 13\n        # 17. Two pointers with extra space and optimization 14\n        # 18. Two pointers with extra space and optimization 15\n        # 19. Two pointers with extra space and optimization 16\n        # 20. Two pointers with extra space and optimization 17\n        # 21. Two pointers with extra space and optimization 18\n        # 22. Two pointers with extra space and optimization 19\n        # 23. Two pointers with extra space and optimization 20\n        # 24. Two pointers with extra space and optimization 21\n        # 25. Two pointers with extra space and optimization 22\n        # 26. Two pointers with extra space and optimization 23\n        # 27. Two pointers with extra space and optimization 24\n        # 28. Two pointers with extra space and optimization 25\n        # 29. Two pointers with extra space and optimization 26\n        # 30. Two pointers with extra space and optimization 27\n        # 31. Two pointers with extra space and optimization 28\n        # 32. Two pointers with extra space and optimization 29\n        # 33. Two pointers with extra space and optimization 30\n        # 34. Two pointers with extra space and optimization 31\n        # 35. Two pointers with extra space and optimization 32\n        # 36. Two pointers with extra space and optimization 33\n        # 37. Two pointers with extra space and optimization 34\n        # 38. Two pointers with extra space and optimization 35\n        # 39. Two pointers with extra space and optimization 36\n        # 40. Two pointers with extra space and optimization 37\n        # 41. Two pointers with extra space and optimization 38\n        # 42. Two pointers with extra space and optimization 39\n        # 43. Two pointers with extra space and optimization 40\n        # 44. Two pointers with extra space and optimization 41\n        # 45. Two pointers with extra space and optimization 42\n        # 46. Two pointers with extra space and optimization 43\n        # 47. Two pointers with extra space and optimization 44\n        # 48. Two pointers with extra space and optimization 45\n        # 49. Two pointers with extra space and optimization 46\n        # 50. Two pointers with extra space and optimization 47\n        # 51. Two pointers with extra space and optimization 48\n        # 52. Two pointers with extra space and optimization 49\n        # 53. Two pointers with extra space and optimization 50\n        # 54. Two pointers with extra space and optimization 51\n        # 55. Two pointers with extra space and optimization 52\n        # 56. Two pointers with extra space and optimization 53\n        # 57. Two pointers with extra space and optimization 54\n        # 58. Two pointers with extra space and optimization 55\n        # 59. Two pointers with extra space and optimization 56\n        # 60. Two pointers with extra space and optimization 57\n        # 61. Two pointers with extra space and optimization 58\n        # 62. Two pointers with extra space and optimization 59\n        # 63. Two pointers with extra"}, {"task_id": "container-with-most-water", "completion": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. Brute force\n        # 2. Two pointers\n        # 3. Two pointers with extra space\n        # 4. Two pointers with extra space and optimization\n        # 5. Two pointers with extra space and optimization 2\n        # 6. Two pointers with extra space and optimization 3\n        # 7. Two pointers with extra space and optimization 4\n        # 8. Two pointers with extra space and optimization 5\n        # 9. Two pointers with extra space and optimization 6\n        # 10. Two pointers with extra space and optimization 7\n        # 11. Two pointers with extra space and optimization 8\n        # 12. Two pointers with extra space and optimization 9\n        # 13. Two pointers with extra space and optimization 10\n        # 14. Two pointers with extra space and optimization 11\n        # 15. Two pointers with extra space and optimization 12\n        # 16. Two pointers with extra space and optimization 13\n        # 17. Two pointers with extra space and optimization 14\n        # 18. Two pointers with extra space and optimization 15\n        # 19. Two pointers with extra space and optimization 16\n        # 20. Two pointers with extra space and optimization 17\n        # 21. Two pointers with extra space and optimization 18\n        # 22. Two pointers with extra space and optimization 19\n        # 23. Two pointers with extra space and optimization 20\n        # 24. Two pointers with extra space and optimization 21\n        # 25. Two pointers with extra space and optimization 22\n        # 26. Two pointers with extra space and optimization 23\n        # 27. Two pointers with extra space and optimization 24\n        # 28. Two pointers with extra space and optimization 25\n        # 29. Two pointers with extra space and optimization 26\n        # 30. Two pointers with extra space and optimization 27\n        # 31. Two pointers with extra space and optimization 28\n        # 32. Two pointers with extra space and optimization 29\n        # 33. Two pointers with extra space and optimization 30\n        # 34. Two pointers with extra space and optimization 31\n        # 35. Two pointers with extra space and optimization 32\n        # 36. Two pointers with extra space and optimization 33\n        # 37. Two pointers with extra space and optimization 34\n        # 38. Two pointers with extra space and optimization 35\n        # 39. Two pointers with extra space and optimization 36\n        # 40. Two pointers with extra space and optimization 37\n        # 41. Two pointers with extra space and optimization 38\n        # 42. Two pointers with extra space and optimization 39\n        # 43. Two pointers with extra space and optimization 40\n        # 44. Two pointers with extra space and optimization 41\n        # 45. Two pointers with extra space and optimization 42\n        # 46. Two pointers with extra space and optimization 43\n        # 47. Two pointers with extra space and optimization 44\n        # 48. Two pointers with extra space and optimization 45\n        # 49. Two pointers with extra space and optimization 46\n        # 50. Two pointers with extra space and optimization 47\n        # 51. Two pointers with extra space and optimization 48\n        # 52. Two pointers with extra space and optimization 49\n        # 53. Two pointers with extra space and optimization 50\n        # 54. Two pointers with extra space and optimization 51\n        # 55. Two pointers with extra space and optimization 52\n        # 56. Two pointers with extra space and optimization 53\n        # 57. Two pointers with extra space and optimization 54\n        # 58. Two pointers with extra space and optimization 55\n        # 59. Two pointers with extra space and optimization 56\n        # 60. Two pointers with extra space and optimization 57\n        # 61. Two pointers with extra space and optimization 58\n        # 62. Two pointers with extra space and optimization 59\n        # 63. Two pointers with extra"}], "concatenated-words": [{"task_id": "concatenated-words", "completion": "class Solution(object):\n    def findAllConcatenatedWordsInADict(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. Create a set of all the words in the dictionary\n        # 2. For each word in the dictionary, check if it is a concatenated word\n        # 3. If it is a concatenated word, add it to the result\n        # 4. Return the result\n        \n        # 1. Create a set of all the words in the dictionary\n        word_set = set(words)\n        \n        # 2. For each word in the dictionary, check if it is a concatenated word\n        result = []\n        for word in words:\n            if self.is_concatenated_word(word, word_set):\n                result.append(word)\n        \n        # 3. If it is a concatenated word, add it to the result\n        # 4. Return the result\n        return result\n    \n    def is_concatenated_word(self, word, word_set):\n        # 1. Create a set of all the words in the dictionary\n        # 2. For each word in the dictionary, check if it is a concatenated word\n        # 3. If it is a concatenated word, add it to the result\n        # 4. Return the result\n        \n        # 1. Create a set of all the words in the dictionary\n        word_set = set(words)\n        \n        # 2. For each word in the dictionary, check if it is a concatenated word\n        result = []\n        for word in words:\n            if self.is_concatenated_word(word, word_set):\n                result.append(word)\n        \n        # 3. If it is a concatenated word, add it to the result\n        # 4. Return the result\n        return result\n    \n    def is_concatenated_word(self, word, word_set):\n        # 1. Create a set of all the words in the dictionary\n        # 2. For each word in the dictionary, check if it is a concatenated word\n        # 3. If it is a concatenated word, add it to the result\n        # 4. Return the result\n        \n        # 1. Create a set of all the words in the dictionary\n        word_set = set(words)\n        \n        # 2. For each word in the dictionary, check if it is a concatenated word\n        result = []\n        for word in words:\n            if self.is_concatenated_word(word, word_set):\n                result.append(word)\n        \n        # 3. If it is a concatenated word, add it to the result\n        # 4. Return the result\n        return result\n    \n    def is_concatenated_word(self, word, word_set):\n        # 1. Create a set of all the words in the dictionary\n        # 2. For each word in the dictionary, check if it is a concatenated word\n        # 3. If it is a concatenated word, add it to the result\n        # 4. Return the result\n        \n        # 1. Create a set of all the words in the dictionary\n        word_set = set(words)\n        \n        # 2. For each word in the dictionary, check if it is a concatenated word\n        result = []\n        for word in words:\n            if self.is_concatenated_word(word, word_set):\n                result.append(word)\n        \n        # 3. If it is a concatenated word, add it to the result\n        # 4. Return the result\n        return result\n    \n    def is_concatenated_word(self, word, word_set):\n        # 1. Create a set of all the words in the dictionary\n        # 2. For each word in the dictionary, check if it is a concatenated word\n        # 3. If it is a concatenated word, add it to the result\n        # 4. Return the result\n        \n        # 1. Create a set of all the words in the dictionary\n        word_set = set(words)\n        \n        # 2. For each word in the dictionary, check if it is a concatenated word\n        result = []\n        for word in words:\n            if self.is_concatenated_word(word, word_set):\n                result.append(word)\n        \n        # 3. If it is a concatenated word, add it to the result"}, {"task_id": "concatenated-words", "completion": "class Solution(object):\n    def findAllConcatenatedWordsInADict(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. Create a set of all the words in the dictionary\n        word_set = set(words)\n        \n        # 2. Create a list of all the concatenated words\n        concatenated_words = []\n        \n        # 3. Iterate through the dictionary and check if the word is a concatenated word\n        for word in words:\n            if self.is_concatenated_word(word, word_set):\n                concatenated_words.append(word)\n        \n        return concatenated_words\n    \n    def is_concatenated_word(self, word, word_set):\n        \"\"\"\n        Check if the word is a concatenated word\n        \"\"\"\n        \n        # 1. Check if the word is in the dictionary\n        if word not in word_set:\n            return False\n        \n        # 2. Check if the word is a concatenated word\n        for i in range(len(word)):\n            if word[i] not in word_set:\n                return False\n            \n            # 3. Check if the word is a concatenated word\n            for j in range(i+1, len(word)):\n                if word[i:j] not in word_set:\n                    return False\n                \n        return True"}, {"task_id": "concatenated-words", "completion": "class Solution(object):\n    def findAllConcatenatedWordsInADict(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. Create a set of all the words in the dictionary\n        # 2. For each word in the dictionary, check if it is a concatenated word\n        # 3. If it is a concatenated word, add it to the list of concatenated words\n        # 4. Return the list of concatenated words\n        \n        # 1. Create a set of all the words in the dictionary\n        word_set = set(words)\n        \n        # 2. For each word in the dictionary, check if it is a concatenated word\n        concatenated_words = []\n        for word in words:\n            if self.is_concatenated_word(word, word_set):\n                concatenated_words.append(word)\n                \n        # 3. If it is a concatenated word, add it to the list of concatenated words\n        # 4. Return the list of concatenated words\n        return concatenated_words\n    \n    def is_concatenated_word(self, word, word_set):\n        # 1. Create a set of all the words in the dictionary\n        # 2. For each word in the dictionary, check if it is a concatenated word\n        # 3. If it is a concatenated word, add it to the list of concatenated words\n        # 4. Return the list of concatenated words\n        \n        # 1. Create a set of all the words in the dictionary\n        word_set = set(words)\n        \n        # 2. For each word in the dictionary, check if it is a concatenated word\n        concatenated_words = []\n        for word in words:\n            if self.is_concatenated_word(word, word_set):\n                concatenated_words.append(word)\n                \n        # 3. If it is a concatenated word, add it to the list of concatenated words\n        # 4. Return the list of concatenated words\n        return concatenated_words\n    \n    def is_concatenated_word(self, word, word_set):\n        # 1. Create a set of all the words in the dictionary\n        # 2. For each word in the dictionary, check if it is a concatenated word\n        # 3. If it is a concatenated word, add it to the list of concatenated words\n        # 4. Return the list of concatenated words\n        \n        # 1. Create a set of all the words in the dictionary\n        word_set = set(words)\n        \n        # 2. For each word in the dictionary, check if it is a concatenated word\n        concatenated_words = []\n        for word in words:\n            if self.is_concatenated_word(word, word_set):\n                concatenated_words.append(word)\n                \n        # 3. If it is a concatenated word, add it to the list of concatenated words\n        # 4. Return the list of concatenated words\n        return concatenated_words\n    \n    def is_concatenated_word(self, word, word_set):\n        # 1. Create a set of all the words in the dictionary\n        # 2. For each word in the dictionary, check if it is a concatenated word\n        # 3. If it is a concatenated word, add it to the list of concatenated words\n        # 4. Return the list of concatenated words\n        \n        # 1. Create a set of all the words in the dictionary\n        word_set = set(words)\n        \n        # 2. For each word in the dictionary, check if it is a concatenated word\n        concatenated_words = []\n        for word in words:\n            if self.is_concatenated_word(word, word_set):\n                concatenated_words.append(word)\n                \n        # 3. If it is a concatenated word, add it to the list of concatenated words\n        # 4. Return the list of concatenated words\n        return concatenated_words\n    \n    def is_concatenated_word(self, word, word_set):\n        # 1. Create a set of all the words in the dictionary\n        # 2. For each word in the dictionary, check if it is a concatenated word\n        # 3. If it is a concatenated word, add it to the list of concatenated words\n        # 4. Return the list of concatenated words"}, {"task_id": "concatenated-words", "completion": "class Solution(object):\n    def findAllConcatenatedWordsInADict(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. Create a set of all the words in the dictionary\n        word_set = set(words)\n        \n        # 2. Create a set of all the words that are concatenated\n        concatenated_words = set()\n        \n        # 3. Iterate through the dictionary and add all the concatenated words to the set\n        for word in words:\n            for i in range(1, len(word)):\n                prefix = word[:i]\n                suffix = word[i:]\n                if prefix in word_set and suffix in word_set:\n                    concatenated_words.add(word)\n                    break\n        \n        # 4. Return the concatenated words\n        return list(concatenated_words)"}, {"task_id": "concatenated-words", "completion": "class Solution(object):\n    def findAllConcatenatedWordsInADict(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. Create a set of all the words in the dictionary\n        word_set = set(words)\n        \n        # 2. Create a set of all the words that are concatenated\n        concatenated_words = set()\n        \n        # 3. Iterate through the dictionary and add all the concatenated words to the set\n        for word in words:\n            for i in range(1, len(word)):\n                if word[:i] in word_set and word[i:] in word_set:\n                    concatenated_words.add(word)\n                    break\n        \n        # 4. Return the concatenated words\n        return list(concatenated_words)"}], "base-7": [{"task_id": "base-7", "completion": "class Solution(object):\n    def convertToBase7(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return '0'\n        if num < 0:\n            return '-' + self.convertToBase7(-num)\n        res = ''\n        while num:\n            res = str(num % 7) + res\n            num //= 7\n        return res"}, {"task_id": "base-7", "completion": "class Solution(object):\n    def convertToBase7(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return '0'\n        if num < 0:\n            return '-' + self.convertToBase7(-num)\n        res = ''\n        while num:\n            res = str(num % 7) + res\n            num //= 7\n        return res"}, {"task_id": "base-7", "completion": "class Solution(object):\n    def convertToBase7(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return '0'\n        if num < 0:\n            return '-' + self.convertToBase7(-num)\n        res = ''\n        while num:\n            res = str(num % 7) + res\n            num //= 7\n        return res"}, {"task_id": "base-7", "completion": "class Solution(object):\n    def convertToBase7(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return '0'\n        if num < 0:\n            return '-' + self.convertToBase7(-num)\n        res = ''\n        while num:\n            res = str(num % 7) + res\n            num //= 7\n        return res"}, {"task_id": "base-7", "completion": "class Solution(object):\n    def convertToBase7(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return '0'\n        if num < 0:\n            return '-' + self.convertToBase7(-num)\n        res = ''\n        while num:\n            res = str(num % 7) + res\n            num //= 7\n        return res"}], "nim-game": [{"task_id": "nim-game", "completion": "class Solution(object):\n    def canWinNim(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. Brute force\n        # 2. Optimal solution\n        # 3. Recursive solution\n        # 4. Memoization\n        # 5. Dynamic programming\n        # 6. Bit manipulation\n        # 7. Bit manipulation\n        # 8. Bit manipulation\n        # 9. Bit manipulation\n        # 10. Bit manipulation\n        # 11. Bit manipulation\n        # 12. Bit manipulation\n        # 13. Bit manipulation\n        # 14. Bit manipulation\n        # 15. Bit manipulation\n        # 16. Bit manipulation\n        # 17. Bit manipulation\n        # 18. Bit manipulation\n        # 19. Bit manipulation\n        # 20. Bit manipulation\n        # 21. Bit manipulation\n        # 22. Bit manipulation\n        # 23. Bit manipulation\n        # 24. Bit manipulation\n        # 25. Bit manipulation\n        # 26. Bit manipulation\n        # 27. Bit manipulation\n        # 28. Bit manipulation\n        # 29. Bit manipulation\n        # 30. Bit manipulation\n        # 31. Bit manipulation\n        # 32. Bit manipulation\n        # 33. Bit manipulation\n        # 34. Bit manipulation\n        # 35. Bit manipulation\n        # 36. Bit manipulation\n        # 37. Bit manipulation\n        # 38. Bit manipulation\n        # 39. Bit manipulation\n        # 40. Bit manipulation\n        # 41. Bit manipulation\n        # 42. Bit manipulation\n        # 43. Bit manipulation\n        # 44. Bit manipulation\n        # 45. Bit manipulation\n        # 46. Bit manipulation\n        # 47. Bit manipulation\n        # 48. Bit manipulation\n        # 49. Bit manipulation\n        # 50. Bit manipulation\n        # 51. Bit manipulation\n        # 52. Bit manipulation\n        # 53. Bit manipulation\n        # 54. Bit manipulation\n        # 55. Bit manipulation\n        # 56. Bit manipulation\n        # 57. Bit manipulation\n        # 58. Bit manipulation\n        # 59. Bit manipulation\n        # 60. Bit manipulation\n        # 61. Bit manipulation\n        # 62. Bit manipulation\n        # 63. Bit manipulation\n        # 64. Bit manipulation\n        # 65. Bit manipulation\n        # 66. Bit manipulation\n        # 67. Bit manipulation\n        # 68. Bit manipulation\n        # 69. Bit manipulation\n        # 70. Bit manipulation\n        # 71. Bit manipulation\n        # 72. Bit manipulation\n        # 73. Bit manipulation\n        # 74. Bit manipulation\n        # 75. Bit manipulation\n        # 76. Bit manipulation\n        # 77. Bit manipulation\n        # 78. Bit manipulation\n        # 79. Bit manipulation\n        # 80. Bit manipulation\n        # 81. Bit manipulation\n        # 82. Bit manipulation\n        # 83. Bit manipulation\n        # 84. Bit manipulation\n        # 85. Bit manipulation\n        # 86. Bit manipulation\n        # 87. Bit manipulation\n        # 88. Bit manipulation\n        # 89. Bit manipulation\n        # 90. Bit manipulation\n        # 91. Bit manipulation\n        # 92. Bit manipulation\n        # 93. Bit manipulation\n        # 94. Bit manipulation\n        # 95. Bit manipulation\n        # 96. Bit manipulation\n        # 97. Bit manipulation\n        # 98. Bit manipulation\n        # 99. Bit manipulation\n        # 100. Bit manipulation\n        # 101. Bit manipulation\n        # 102. Bit manipulation\n        # 103. Bit manipulation"}, {"task_id": "nim-game", "completion": "class Solution(object):\n    def canWinNim(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. Brute force\n        # 2. Optimal solution\n        # 3. Recursive solution\n        # 4. Memoization\n        # 5. Iterative solution\n        # 6. Dynamic programming\n        # 7. Bit manipulation\n        # 8. Bit manipulation\n        # 9. Bit manipulation\n        # 10. Bit manipulation\n        # 11. Bit manipulation\n        # 12. Bit manipulation\n        # 13. Bit manipulation\n        # 14. Bit manipulation\n        # 15. Bit manipulation\n        # 16. Bit manipulation\n        # 17. Bit manipulation\n        # 18. Bit manipulation\n        # 19. Bit manipulation\n        # 20. Bit manipulation\n        # 21. Bit manipulation\n        # 22. Bit manipulation\n        # 23. Bit manipulation\n        # 24. Bit manipulation\n        # 25. Bit manipulation\n        # 26. Bit manipulation\n        # 27. Bit manipulation\n        # 28. Bit manipulation\n        # 29. Bit manipulation\n        # 30. Bit manipulation\n        # 31. Bit manipulation\n        # 32. Bit manipulation\n        # 33. Bit manipulation\n        # 34. Bit manipulation\n        # 35. Bit manipulation\n        # 36. Bit manipulation\n        # 37. Bit manipulation\n        # 38. Bit manipulation\n        # 39. Bit manipulation\n        # 40. Bit manipulation\n        # 41. Bit manipulation\n        # 42. Bit manipulation\n        # 43. Bit manipulation\n        # 44. Bit manipulation\n        # 45. Bit manipulation\n        # 46. Bit manipulation\n        # 47. Bit manipulation\n        # 48. Bit manipulation\n        # 49. Bit manipulation\n        # 50. Bit manipulation\n        # 51. Bit manipulation\n        # 52. Bit manipulation\n        # 53. Bit manipulation\n        # 54. Bit manipulation\n        # 55. Bit manipulation\n        # 56. Bit manipulation\n        # 57. Bit manipulation\n        # 58. Bit manipulation\n        # 59. Bit manipulation\n        # 60. Bit manipulation\n        # 61. Bit manipulation\n        # 62. Bit manipulation\n        # 63. Bit manipulation\n        # 64. Bit manipulation\n        # 65. Bit manipulation\n        # 66. Bit manipulation\n        # 67. Bit manipulation\n        # 68. Bit manipulation\n        # 69. Bit manipulation\n        # 70. Bit manipulation\n        # 71. Bit manipulation\n        # 72. Bit manipulation\n        # 73. Bit manipulation\n        # 74. Bit manipulation\n        # 75. Bit manipulation\n        # 76. Bit manipulation\n        # 77. Bit manipulation\n        # 78. Bit manipulation\n        # 79. Bit manipulation\n        # 80. Bit manipulation\n        # 81. Bit manipulation\n        # 82. Bit manipulation\n        # 83. Bit manipulation\n        # 84. Bit manipulation\n        # 85. Bit manipulation\n        # 86. Bit manipulation\n        # 87. Bit manipulation\n        # 88. Bit manipulation\n        # 89. Bit manipulation\n        # 90. Bit manipulation\n        # 91. Bit manipulation\n        # 92. Bit manipulation\n        # 93. Bit manipulation\n        # 94. Bit manipulation\n        # 95. Bit manipulation\n        # 96. Bit manipulation\n        # 97. Bit manipulation\n        # 98. Bit manipulation\n        # 99. Bit manipulation\n        # 100. Bit manipulation\n        # 101. Bit manipulation\n        # 102. Bit manipulation\n        # 103. Bit manipulation"}, {"task_id": "nim-game", "completion": "class Solution(object):\n    def canWinNim(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. Brute Force\n        # 2. Optimal Solution\n        # 3. Recursive Solution\n        # 4. Memoization\n        # 5. Iterative Solution\n        # 6. Bit Manipulation\n        # 7. Math Solution\n        # 8. Bit Manipulation\n        # 9. Bit Manipulation\n        # 10. Bit Manipulation\n        # 11. Bit Manipulation\n        # 12. Bit Manipulation\n        # 13. Bit Manipulation\n        # 14. Bit Manipulation\n        # 15. Bit Manipulation\n        # 16. Bit Manipulation\n        # 17. Bit Manipulation\n        # 18. Bit Manipulation\n        # 19. Bit Manipulation\n        # 20. Bit Manipulation\n        # 21. Bit Manipulation\n        # 22. Bit Manipulation\n        # 23. Bit Manipulation\n        # 24. Bit Manipulation\n        # 25. Bit Manipulation\n        # 26. Bit Manipulation\n        # 27. Bit Manipulation\n        # 28. Bit Manipulation\n        # 29. Bit Manipulation\n        # 30. Bit Manipulation\n        # 31. Bit Manipulation\n        # 32. Bit Manipulation\n        # 33. Bit Manipulation\n        # 34. Bit Manipulation\n        # 35. Bit Manipulation\n        # 36. Bit Manipulation\n        # 37. Bit Manipulation\n        # 38. Bit Manipulation\n        # 39. Bit Manipulation\n        # 40. Bit Manipulation\n        # 41. Bit Manipulation\n        # 42. Bit Manipulation\n        # 43. Bit Manipulation\n        # 44. Bit Manipulation\n        # 45. Bit Manipulation\n        # 46. Bit Manipulation\n        # 47. Bit Manipulation\n        # 48. Bit Manipulation\n        # 49. Bit Manipulation\n        # 50. Bit Manipulation\n        # 51. Bit Manipulation\n        # 52. Bit Manipulation\n        # 53. Bit Manipulation\n        # 54. Bit Manipulation\n        # 55. Bit Manipulation\n        # 56. Bit Manipulation\n        # 57. Bit Manipulation\n        # 58. Bit Manipulation\n        # 59. Bit Manipulation\n        # 60. Bit Manipulation\n        # 61. Bit Manipulation\n        # 62. Bit Manipulation\n        # 63. Bit Manipulation\n        # 64. Bit Manipulation\n        # 65. Bit Manipulation\n        # 66. Bit Manipulation\n        # 67. Bit Manipulation\n        # 68. Bit Manipulation\n        # 69. Bit Manipulation\n        # 70. Bit Manipulation\n        # 71. Bit Manipulation\n        # 72. Bit Manipulation\n        # 73. Bit Manipulation\n        # 74. Bit Manipulation\n        # 75. Bit Manipulation\n        # 76. Bit Manipulation\n        # 77. Bit Manipulation\n        # 78. Bit Manipulation\n        # 79. Bit Manipulation\n        # 80. Bit Manipulation\n        # 81. Bit Manipulation\n        # 82. Bit Manipulation\n        # 83. Bit Manipulation\n        # 84. Bit Manipulation\n        # 85. Bit Manipulation\n        # 86. Bit Manipulation\n        # 87. Bit Manipulation\n        # 88. Bit Manipulation\n        # 89. Bit Manipulation\n        # 90. Bit Manipulation\n        # 91. Bit Manipulation\n        # 92. Bit Manipulation\n        # 93. Bit Manipulation\n        # 94. Bit Manipulation\n        # 95."}, {"task_id": "nim-game", "completion": "class Solution(object):\n    def canWinNim(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. Brute Force\n        # 2. Optimal\n        # 3. Recursive\n        # 4. DP\n        # 5. Math\n        # 6. Bit Manipulation\n        # 7. Bit Manipulation\n        # 8. Bit Manipulation\n        # 9. Bit Manipulation\n        # 10. Bit Manipulation\n        # 11. Bit Manipulation\n        # 12. Bit Manipulation\n        # 13. Bit Manipulation\n        # 14. Bit Manipulation\n        # 15. Bit Manipulation\n        # 16. Bit Manipulation\n        # 17. Bit Manipulation\n        # 18. Bit Manipulation\n        # 19. Bit Manipulation\n        # 20. Bit Manipulation\n        # 21. Bit Manipulation\n        # 22. Bit Manipulation\n        # 23. Bit Manipulation\n        # 24. Bit Manipulation\n        # 25. Bit Manipulation\n        # 26. Bit Manipulation\n        # 27. Bit Manipulation\n        # 28. Bit Manipulation\n        # 29. Bit Manipulation\n        # 30. Bit Manipulation\n        # 31. Bit Manipulation\n        # 32. Bit Manipulation\n        # 33. Bit Manipulation\n        # 34. Bit Manipulation\n        # 35. Bit Manipulation\n        # 36. Bit Manipulation\n        # 37. Bit Manipulation\n        # 38. Bit Manipulation\n        # 39. Bit Manipulation\n        # 40. Bit Manipulation\n        # 41. Bit Manipulation\n        # 42. Bit Manipulation\n        # 43. Bit Manipulation\n        # 44. Bit Manipulation\n        # 45. Bit Manipulation\n        # 46. Bit Manipulation\n        # 47. Bit Manipulation\n        # 48. Bit Manipulation\n        # 49. Bit Manipulation\n        # 50. Bit Manipulation\n        # 51. Bit Manipulation\n        # 52. Bit Manipulation\n        # 53. Bit Manipulation\n        # 54. Bit Manipulation\n        # 55. Bit Manipulation\n        # 56. Bit Manipulation\n        # 57. Bit Manipulation\n        # 58. Bit Manipulation\n        # 59. Bit Manipulation\n        # 60. Bit Manipulation\n        # 61. Bit Manipulation\n        # 62. Bit Manipulation\n        # 63. Bit Manipulation\n        # 64. Bit Manipulation\n        # 65. Bit Manipulation\n        # 66. Bit Manipulation\n        # 67. Bit Manipulation\n        # 68. Bit Manipulation\n        # 69. Bit Manipulation\n        # 70. Bit Manipulation\n        # 71. Bit Manipulation\n        # 72. Bit Manipulation\n        # 73. Bit Manipulation\n        # 74. Bit Manipulation\n        # 75. Bit Manipulation\n        # 76. Bit Manipulation\n        # 77. Bit Manipulation\n        # 78. Bit Manipulation\n        # 79. Bit Manipulation\n        # 80. Bit Manipulation\n        # 81. Bit Manipulation\n        # 82. Bit Manipulation\n        # 83. Bit Manipulation\n        # 84. Bit Manipulation\n        # 85. Bit Manipulation\n        # 86. Bit Manipulation\n        # 87. Bit Manipulation\n        # 88. Bit Manipulation\n        # 89. Bit Manipulation\n        # 90. Bit Manipulation\n        # 91. Bit Manipulation\n        # 92. Bit Manipulation\n        # 93. Bit Manipulation\n        # 94. Bit Manipulation\n        # 95. Bit Manip"}, {"task_id": "nim-game", "completion": "class Solution(object):\n    def canWinNim(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. Brute force\n        # 2. Optimal solution\n        # 3. Recursive solution\n        # 4. Memoization\n        # 5. Iterative solution\n        # 6. Bit manipulation\n        \n        # 1. Brute force\n        # O(2^n) time | O(2^n) space\n        # 2. Optimal solution\n        # O(n) time | O(1) space\n        # 3. Recursive solution\n        # O(n) time | O(n) space\n        # 4. Memoization\n        # O(n) time | O(n) space\n        # 5. Iterative solution\n        # O(n) time | O(1) space\n        # 6. Bit manipulation\n        # O(1) time | O(1) space\n        \n        # 1. Brute force\n        # return True if n % 4 == 0 else False\n        \n        # 2. Optimal solution\n        # return True if n % 4 == 0 else False\n        \n        # 3. Recursive solution\n        # return True if n % 4 == 0 else False\n        \n        # 4. Memoization\n        # return True if n % 4 == 0 else False\n        \n        # 5. Iterative solution\n        # return True if n % 4 == 0 else False\n        \n        # 6. Bit manipulation\n        # return True if n % 4 == 0 else False\n        \n        # 1. Brute force\n        # return True if n % 4 == 0 else False\n        \n        # 2. Optimal solution\n        # return True if n % 4 == 0 else False\n        \n        # 3. Recursive solution\n        # return True if n % 4 == 0 else False\n        \n        # 4. Memoization\n        # return True if n % 4 == 0 else False\n        \n        # 5. Iterative solution\n        # return True if n % 4 == 0 else False\n        \n        # 6. Bit manipulation\n        # return True if n % 4 == 0 else False\n        \n        # 1. Brute force\n        # return True if n % 4 == 0 else False\n        \n        # 2. Optimal solution\n        # return True if n % 4 == 0 else False\n        \n        # 3. Recursive solution\n        # return True if n % 4 == 0 else False\n        \n        # 4. Memoization\n        # return True if n % 4 == 0 else False\n        \n        # 5. Iterative solution\n        # return True if n % 4 == 0 else False\n        \n        # 6. Bit manipulation\n        # return True if n % 4 == 0 else False\n        \n        # 1. Brute force\n        # return True if n % 4 == 0 else False\n        \n        # 2. Optimal solution\n        # return True if n % 4 == 0 else False\n        \n        # 3. Recursive solution\n        # return True if n % 4 == 0 else False\n        \n        # 4. Memoization\n        # return True if n % 4 == 0 else False\n        \n        # 5. Iterative solution\n        # return True if n % 4 == 0 else False\n        \n        # 6. Bit manipulation\n        # return True if n % 4 == 0 else False\n        \n        # 1. Brute force\n        # return True if n % 4 == 0 else False\n        \n        # 2. Optimal solution\n        # return True if n % 4 == 0 else False\n        \n        # 3. Recursive solution\n        # return True if n % 4 == 0 else False\n        \n        # 4. Memoization\n        # return True if n % 4 == 0 else False\n        \n        # 5. Iterative solution\n        # return True if n % 4 == 0 else False\n        \n        # 6. Bit manipulation\n        # return True if n % 4 == 0 else False\n        \n        # 1. Brute force\n        # return True if n % 4 == 0 else False\n        \n        # 2. Optimal solution\n        # return True if n % 4"}], "n-queens-ii": [{"task_id": "n-queens-ii", "completion": "class Solution(object):\n    def totalNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        def backtrack(n, row, col, diag1, diag2):\n            if row == n:\n                return 1\n            res = 0\n            for i in range(n):\n                if not col & (1 << i) and not diag1 & (1 << (row + i)) and not diag2 & (1 << (row - i + n - 1)):\n                    res += backtrack(n, row + 1, col | (1 << i), diag1 | (1 << (row + i)), diag2 | (1 << (row - i + n - 1)))\n            return res\n        \n        return backtrack(n, 0, 0, 0, 0)"}, {"task_id": "n-queens-ii", "completion": "class Solution(object):\n    def totalNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u9012\u5f52\n        # 2. \u56de\u6eaf\n        # 3. \u52a8\u6001\u89c4\u5212\n        # 4. \u4f4d\u8fd0\u7b97\n        # 5. \u526a\u679d\n        # 6. \u641c\u7d22\n        # 7. \u679a\u4e3e\n        # 8. \u54c8\u5e0c\u8868\n        # 9. \u6392\u5217\u7ec4\u5408\n        # 10. \u6811\u72b6\u6570\u7ec4\n        # 11. \u524d\u7f00\u548c\n        # 12. \u72b6\u6001\u538b\u7f29\n        # 13. \u6eda\u52a8\u6570\u7ec4\n        # 14. \u5dee\u5206\n        # 15. \u626b\u63cf\u7ebf\n        # 16. \u7ebf\u6bb5\u6811\n        # 17. \u6811\n        # 18. \u56fe\n        # 19. \u5e76\u67e5\u96c6\n        # 20. \u8d2a\u5fc3\n        # 21. \u9012\u5f52\n        # 22. \u5206\u6cbb\n        # 23. \u9012\u5f52\u6811\n        # 24. \u5206\u652f\u754c\u9650\u6cd5\n        # 25. \u52a8\u6001\u89c4\u5212\n        # 26. \u8d2a\u5fc3\n        # 27. \u4e8c\u5206\u67e5\u627e\n        # 28. \u6392\u5e8f\n        # 29. \u6811\n        # 30. \u54c8\u5e0c\u8868\n        # 31. \u94fe\u8868\n        # 32. \u5806\n        # 33. \u8d2a\u5fc3\n        # 34. \u4e8c\u5206\u67e5\u627e\n        # 35. \u5206\u6cbb\n        # 36. \u9012\u5f52\n        # 37. \u6811\n        # 38. \u54c8\u5e0c\u8868\n        # 39. \u94fe\u8868\n        # 40. \u5806\n        # 41. \u8d2a\u5fc3\n        # 42. \u4e8c\u5206\u67e5\u627e\n        # 43. \u5206\u6cbb\n        # 44. \u9012\u5f52\n        # 45. \u6811\n        # 46. \u54c8\u5e0c\u8868\n        # 47. \u94fe\u8868\n        # 48. \u5806\n        # 49. \u8d2a\u5fc3\n        # 50. \u4e8c\u5206\u67e5\u627e\n        # 51. \u5206\u6cbb\n        # 52. \u9012\u5f52\n        # 53. \u6811\n        # 54. \u54c8\u5e0c\u8868\n        # 55. \u94fe\u8868\n        # 56. \u5806\n        # 57. \u8d2a\u5fc3\n        # 58. \u4e8c\u5206\u67e5\u627e\n        # 59. \u5206\u6cbb\n        # 60. \u9012\u5f52\n        # 61. \u6811\n        # 62. \u54c8\u5e0c\u8868\n        # 63. \u94fe\u8868\n        # 64. \u5806\n        # 65. \u8d2a\u5fc3\n        # 66. \u4e8c\u5206\u67e5\u627e\n        # 67. \u5206\u6cbb\n        # 68. \u9012\u5f52\n        # 69. \u6811\n        # 70. \u54c8\u5e0c\u8868\n        # 71. \u94fe\u8868\n        # 72. \u5806\n        # 73. \u8d2a\u5fc3\n        # 74. \u4e8c\u5206\u67e5\u627e\n        # 75. \u5206\u6cbb\n        # 76. \u9012\u5f52\n        # 77. \u6811\n        # 78. \u54c8\u5e0c\u8868\n        # 79. \u94fe\u8868\n        # 80. \u5806\n        # 81. \u8d2a\u5fc3\n        # 82. \u4e8c\u5206\u67e5\u627e\n        # 83. \u5206\u6cbb"}, {"task_id": "n-queens-ii", "completion": "class Solution(object):\n    def totalNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u9012\u5f52\n        # 2. \u56de\u6eaf\n        # 3. \u52a8\u6001\u89c4\u5212\n        # 4. \u4f4d\u8fd0\u7b97\n        # 5. \u526a\u679d\n        # 6. \u56fa\u5b9a\u4e00\u4e2a\u7687\u540e\uff0c\u5269\u4e0b\u7684n-1\u4e2a\u7687\u540e\u653e\u7f6e\n        # 7. \u56fa\u5b9a\u4e00\u4e2a\u7687\u540e\uff0c\u5269\u4e0b\u7684n-1\u4e2a\u7687\u540e\u653e\u7f6e\n        # 8. \u56fa\u5b9a\u4e00\u4e2a\u7687\u540e\uff0c\u5269\u4e0b\u7684n-1\u4e2a\u7687\u540e\u653e\u7f6e\n        # 9. \u56fa\u5b9a\u4e00\u4e2a\u7687\u540e\uff0c\u5269\u4e0b\u7684n-1\u4e2a\u7687\u540e\u653e\u7f6e\n        # 10. \u56fa\u5b9a\u4e00\u4e2a\u7687\u540e\uff0c\u5269\u4e0b\u7684n-1\u4e2a\u7687\u540e\u653e\u7f6e\n        # 11. \u56fa\u5b9a\u4e00\u4e2a\u7687\u540e\uff0c\u5269\u4e0b\u7684n-1\u4e2a\u7687\u540e\u653e\u7f6e\n        # 12. \u56fa\u5b9a\u4e00\u4e2a\u7687\u540e\uff0c\u5269\u4e0b\u7684n-1\u4e2a\u7687\u540e\u653e\u7f6e\n        # 13. \u56fa\u5b9a\u4e00\u4e2a\u7687\u540e\uff0c\u5269\u4e0b\u7684n-1\u4e2a\u7687\u540e\u653e\u7f6e\n        # 14. \u56fa\u5b9a\u4e00\u4e2a\u7687\u540e\uff0c\u5269\u4e0b\u7684n-1\u4e2a\u7687\u540e\u653e\u7f6e\n        # 15. \u56fa\u5b9a\u4e00\u4e2a\u7687\u540e\uff0c\u5269\u4e0b\u7684n-1\u4e2a\u7687\u540e\u653e\u7f6e\n        # 16. \u56fa\u5b9a\u4e00\u4e2a\u7687\u540e\uff0c\u5269\u4e0b\u7684n-1\u4e2a\u7687\u540e\u653e\u7f6e\n        # 17. \u56fa\u5b9a\u4e00\u4e2a\u7687\u540e\uff0c\u5269\u4e0b\u7684n-1\u4e2a\u7687\u540e\u653e\u7f6e\n        # 18. \u56fa\u5b9a\u4e00\u4e2a\u7687\u540e\uff0c\u5269\u4e0b\u7684n-1\u4e2a\u7687\u540e\u653e\u7f6e\n        # 19. \u56fa\u5b9a\u4e00\u4e2a\u7687\u540e\uff0c\u5269\u4e0b\u7684n-1\u4e2a\u7687\u540e\u653e\u7f6e\n        # 20. \u56fa\u5b9a\u4e00\u4e2a\u7687\u540e\uff0c\u5269\u4e0b\u7684n-1\u4e2a\u7687\u540e\u653e\u7f6e\n        # 21. \u56fa\u5b9a\u4e00\u4e2a\u7687\u540e\uff0c\u5269\u4e0b\u7684n-1\u4e2a\u7687\u540e\u653e\u7f6e\n        # 22. \u56fa\u5b9a\u4e00\u4e2a\u7687\u540e\uff0c\u5269\u4e0b\u7684n-1\u4e2a\u7687\u540e\u653e\u7f6e\n        # 23. \u56fa\u5b9a\u4e00\u4e2a\u7687\u540e\uff0c\u5269\u4e0b\u7684n-1\u4e2a\u7687\u540e\u653e\u7f6e\n        # 24. \u56fa\u5b9a\u4e00\u4e2a\u7687\u540e\uff0c\u5269\u4e0b\u7684n-1\u4e2a\u7687\u540e\u653e\u7f6e\n        # 25. \u56fa\u5b9a\u4e00\u4e2a\u7687\u540e\uff0c\u5269\u4e0b\u7684n-1\u4e2a\u7687\u540e\u653e\u7f6e\n        # 26. \u56fa\u5b9a\u4e00\u4e2a\u7687\u540e\uff0c\u5269\u4e0b\u7684n-1\u4e2a\u7687\u540e\u653e\u7f6e\n        # 27. \u56fa\u5b9a\u4e00\u4e2a\u7687\u540e\uff0c\u5269\u4e0b\u7684n-1\u4e2a\u7687\u540e\u653e\u7f6e\n        # 28. \u56fa\u5b9a\u4e00\u4e2a\u7687\u540e\uff0c\u5269\u4e0b\u7684n-1\u4e2a\u7687\u540e\u653e\u7f6e\n        # 29. \u56fa\u5b9a\u4e00\u4e2a\u7687\u540e\uff0c\u5269\u4e0b\u7684n-1\u4e2a\u7687\u540e\u653e\u7f6e\n        # 30. \u56fa\u5b9a\u4e00\u4e2a\u7687\u540e\uff0c\u5269\u4e0b\u7684n-1\u4e2a\u7687\u540e\u653e\u7f6e\n        # 31. \u56fa\u5b9a\u4e00\u4e2a\u7687\u540e\uff0c\u5269\u4e0b\u7684n-1\u4e2a\u7687\u540e\u653e\u7f6e\n        # 32. \u56fa\u5b9a\u4e00\u4e2a\u7687\u540e\uff0c\u5269\u4e0b\u7684n-1\u4e2a\u7687\u540e\u653e\u7f6e\n        # 33. \u56fa\u5b9a\u4e00\u4e2a\u7687\u540e\uff0c\u5269\u4e0b\u7684n-1\u4e2a\u7687\u540e\u653e\u7f6e\n        # 34. \u56fa\u5b9a\u4e00\u4e2a\u7687\u540e\uff0c\u5269\u4e0b\u7684n-1\u4e2a\u7687\u540e\u653e\u7f6e\n        # 35. \u56fa\u5b9a\u4e00\u4e2a\u7687\u540e\uff0c\u5269\u4e0b\u7684n-1\u4e2a\u7687\u540e\u653e\u7f6e\n        # 36. \u56fa\u5b9a\u4e00\u4e2a\u7687\u540e\uff0c\u5269\u4e0b\u7684n-1\u4e2a\u7687\u540e\u653e\u7f6e\n        # 37. \u56fa\u5b9a\u4e00\u4e2a\u7687\u540e\uff0c\u5269\u4e0b\u7684n-1\u4e2a\u7687\u540e\u653e\u7f6e\n        # 38."}, {"task_id": "n-queens-ii", "completion": "class Solution(object):\n    def totalNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u89e3\n        # 2. \u679a\u4e3e\u6bcf\u4e00\u4e2a\u89e3\u7684\u6bcf\u4e00\u4e2a\u7687\u540e\u7684\u4f4d\u7f6e\n        # 3. \u679a\u4e3e\u6bcf\u4e00\u4e2a\u7687\u540e\u7684\u4f4d\u7f6e\u7684\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\n        # 4. \u5224\u65ad\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u662f\u5426\u53ef\u4ee5\u653e\u7f6e\u7687\u540e\n        # 5. \u5982\u679c\u53ef\u4ee5\u653e\u7f6e\u7687\u540e\uff0c\u5219\u7ee7\u7eed\u679a\u4e3e\u4e0b\u4e00\u4e2a\u7687\u540e\u7684\u4f4d\u7f6e\n        # 6. \u5982\u679c\u4e0d\u53ef\u4ee5\u653e\u7f6e\u7687\u540e\uff0c\u5219\u56de\u6eaf\n        # 7. \u5982\u679c\u679a\u4e3e\u5b8c\u6240\u6709\u7684\u7687\u540e\u7684\u4f4d\u7f6e\uff0c\u5219\u7ee7\u7eed\u679a\u4e3e\u4e0b\u4e00\u4e2a\u89e3\u7684\u7687\u540e\u7684\u4f4d\u7f6e\n        # 8. \u5982\u679c\u679a\u4e3e\u5b8c\u6240\u6709\u7684\u89e3\uff0c\u5219\u7ee7\u7eed\u679a\u4e3e\u4e0b\u4e00\u4e2a\u89e3\n        # 9. \u5982\u679c\u679a\u4e3e\u5b8c\u6240\u6709\u7684\u89e3\uff0c\u5219\u8fd4\u56de\u7ed3\u679c\n        # 10. \u5982\u679c\u679a\u4e3e\u5b8c\u6240\u6709\u7684\u89e3\uff0c\u5219\u8fd4\u56de\u7ed3\u679c\n        # 11. \u5982\u679c\u679a\u4e3e\u5b8c\u6240\u6709\u7684\u89e3\uff0c\u5219\u8fd4\u56de\u7ed3\u679c\n        # 12. \u5982\u679c\u679a\u4e3e\u5b8c\u6240\u6709\u7684\u89e3\uff0c\u5219\u8fd4\u56de\u7ed3\u679c\n        # 13. \u5982\u679c\u679a\u4e3e\u5b8c\u6240\u6709\u7684\u89e3\uff0c\u5219\u8fd4\u56de\u7ed3\u679c\n        # 14. \u5982\u679c\u679a\u4e3e\u5b8c\u6240\u6709\u7684\u89e3\uff0c\u5219\u8fd4\u56de\u7ed3\u679c\n        # 15. \u5982\u679c\u679a\u4e3e\u5b8c\u6240\u6709\u7684\u89e3\uff0c\u5219\u8fd4\u56de\u7ed3\u679c\n        # 16. \u5982\u679c\u679a\u4e3e\u5b8c\u6240\u6709\u7684\u89e3\uff0c\u5219\u8fd4\u56de\u7ed3\u679c\n        # 17. \u5982\u679c\u679a\u4e3e\u5b8c\u6240\u6709\u7684\u89e3\uff0c\u5219\u8fd4\u56de\u7ed3\u679c\n        # 18. \u5982\u679c\u679a\u4e3e\u5b8c\u6240\u6709\u7684\u89e3\uff0c\u5219\u8fd4\u56de\u7ed3\u679c\n        # 19. \u5982\u679c\u679a\u4e3e\u5b8c\u6240\u6709\u7684\u89e3\uff0c\u5219\u8fd4\u56de\u7ed3\u679c\n        # 20. \u5982\u679c\u679a\u4e3e\u5b8c\u6240\u6709\u7684\u89e3\uff0c\u5219\u8fd4\u56de\u7ed3\u679c\n        # 21. \u5982\u679c\u679a\u4e3e\u5b8c\u6240\u6709\u7684\u89e3\uff0c\u5219\u8fd4\u56de\u7ed3\u679c\n        # 22. \u5982\u679c\u679a\u4e3e\u5b8c\u6240\u6709\u7684\u89e3\uff0c\u5219\u8fd4\u56de\u7ed3\u679c\n        # 23. \u5982\u679c\u679a\u4e3e\u5b8c\u6240\u6709\u7684\u89e3\uff0c\u5219\u8fd4\u56de\u7ed3\u679c\n        # 24. \u5982\u679c\u679a\u4e3e\u5b8c\u6240\u6709\u7684\u89e3\uff0c\u5219\u8fd4\u56de\u7ed3\u679c\n        # 25. \u5982\u679c\u679a\u4e3e\u5b8c\u6240\u6709\u7684\u89e3\uff0c\u5219\u8fd4\u56de\u7ed3\u679c\n        # 26. \u5982\u679c\u679a\u4e3e\u5b8c\u6240\u6709\u7684\u89e3\uff0c\u5219\u8fd4\u56de\u7ed3\u679c\n        # 27. \u5982\u679c\u679a\u4e3e\u5b8c\u6240\u6709\u7684\u89e3\uff0c\u5219\u8fd4\u56de\u7ed3\u679c\n        # 28. \u5982\u679c\u679a\u4e3e\u5b8c\u6240\u6709\u7684\u89e3\uff0c\u5219\u8fd4\u56de\u7ed3\u679c\n        # 29. \u5982\u679c\u679a\u4e3e\u5b8c\u6240\u6709\u7684\u89e3\uff0c\u5219\u8fd4\u56de\u7ed3\u679c\n        # 30. \u5982\u679c\u679a\u4e3e\u5b8c\u6240\u6709\u7684\u89e3\uff0c\u5219\u8fd4\u56de\u7ed3\u679c\n        # 31. \u5982\u679c\u679a\u4e3e\u5b8c\u6240\u6709\u7684\u89e3\uff0c\u5219\u8fd4\u56de\u7ed3\u679c\n        # 32. \u5982\u679c\u679a\u4e3e\u5b8c\u6240\u6709\u7684\u89e3\uff0c\u5219\u8fd4\u56de\u7ed3\u679c\n        # 33. \u5982\u679c\u679a\u4e3e\u5b8c\u6240\u6709\u7684\u89e3\uff0c\u5219\u8fd4\u56de\u7ed3\u679c\n        # 34. \u5982\u679c\u679a\u4e3e\u5b8c\u6240\u6709\u7684\u89e3\uff0c\u5219\u8fd4\u56de\u7ed3\u679c\n        # 35. \u5982\u679c\u679a\u4e3e\u5b8c\u6240\u6709\u7684\u89e3\uff0c\u5219\u8fd4\u56de\u7ed3\u679c\n        # 36. \u5982\u679c\u679a\u4e3e\u5b8c\u6240\u6709\u7684\u89e3\uff0c\u5219\u8fd4\u56de\u7ed3\u679c\n        # 37. \u5982\u679c\u679a\u4e3e\u5b8c\u6240\u6709\u7684\u89e3\uff0c\u5219\u8fd4\u56de\u7ed3\u679c\n        #"}, {"task_id": "n-queens-ii", "completion": "class Solution(object):\n    def totalNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u89e3\n        # 2. \u679a\u4e3e\u6bcf\u4e00\u4e2a\u89e3\u7684\u6bcf\u4e00\u4e2a\u7687\u540e\u7684\u4f4d\u7f6e\n        # 3. \u679a\u4e3e\u6bcf\u4e00\u4e2a\u7687\u540e\u7684\u4f4d\u7f6e\u7684\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\n        # 4. \u68c0\u67e5\u6bcf\u4e00\u4e2a\u7687\u540e\u7684\u4f4d\u7f6e\u662f\u5426\u6709\u51b2\u7a81\n        # 5. \u5982\u679c\u6ca1\u6709\u51b2\u7a81\uff0c\u5219\u7ee7\u7eed\u679a\u4e3e\u4e0b\u4e00\u4e2a\u7687\u540e\u7684\u4f4d\u7f6e\n        # 6. \u5982\u679c\u6709\u51b2\u7a81\uff0c\u5219\u56de\u6eaf\n        # 7. \u5982\u679c\u679a\u4e3e\u5b8c\u6240\u6709\u7684\u7687\u540e\u7684\u4f4d\u7f6e\uff0c\u5219\u68c0\u67e5\u662f\u5426\u6709\u89e3\n        # 8. \u5982\u679c\u6709\u89e3\uff0c\u5219\u7ee7\u7eed\u679a\u4e3e\u4e0b\u4e00\u4e2a\u89e3\n        # 9. \u5982\u679c\u6ca1\u6709\u89e3\uff0c\u5219\u56de\u6eaf\n        # 10. \u5982\u679c\u679a\u4e3e\u5b8c\u6240\u6709\u7684\u89e3\uff0c\u5219\u8fd4\u56de\u7ed3\u679c\n        \n        # \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u89e3\n        res = 0\n        queens = [0] * n\n        self.dfs(n, queens, 0, res)\n        return res\n        \n    def dfs(self, n, queens, row, res):\n        # \u679a\u4e3e\u6bcf\u4e00\u4e2a\u89e3\u7684\u6bcf\u4e00\u4e2a\u7687\u540e\u7684\u4f4d\u7f6e\n        if row == n:\n            res += 1\n            return\n        \n        for col in range(n):\n            # \u679a\u4e3e\u6bcf\u4e00\u4e2a\u7687\u540e\u7684\u4f4d\u7f6e\u7684\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\n            if self.isValid(n, queens, row, col):\n                queens[row] = col\n                self.dfs(n, queens, row + 1, res)\n        \n    def isValid(self, n, queens, row, col):\n        # \u68c0\u67e5\u6bcf\u4e00\u4e2a\u7687\u540e\u7684\u4f4d\u7f6e\u662f\u5426\u6709\u51b2\u7a81\n        for i in range(row):\n            if queens[i] == col or abs(queens[i] - col) == abs(i - row):\n                return False\n        return True"}], "n-queens": [{"task_id": "n-queens", "completion": "class Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def isValid(board, row, col):\n            for i in range(row):\n                if board[i][col] == 'Q':\n                    return False\n            for i in range(row):\n                for j in range(col):\n                    if board[i][j] == 'Q' and abs(i-row) == abs(j-col):\n                        return False\n            return True\n        \n        def backtrack(board, row):\n            if row == n:\n                res.append([\"\".join(row) for row in board])\n                return\n            for col in range(n):\n                if isValid(board, row, col):\n                    board[row][col] = 'Q'\n                    backtrack(board, row+1)\n                    board[row][col] = '.'\n        \n        res = []\n        board = [['.' for _ in range(n)] for _ in range(n)]\n        backtrack(board, 0)\n        return res"}, {"task_id": "n-queens", "completion": "class Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def isValid(row, col, queens):\n            for i in range(n):\n                if queens[i][col] == 'Q':\n                    return False\n                if queens[row][i] == 'Q':\n                    return False\n            for i, j in zip(range(row), range(col, col+1, 1)):\n                if queens[i][j] == 'Q':\n                    return False\n            for i, j in zip(range(row, n), range(col-1, col-n-1, -1)):\n                if queens[i][j] == 'Q':\n                    return False\n            return True\n        \n        def backtrack(queens, row, res):\n            if row == n:\n                res.append([\"\".join(queens[i]) for i in range(n)])\n                return\n            for col in range(n):\n                if isValid(row, col, queens):\n                    queens[row][col] = 'Q'\n                    backtrack(queens, row+1, res)\n                    queens[row][col] = '.'\n        \n        queens = [['.' for _ in range(n)] for _ in range(n)]\n        res = []\n        backtrack(queens, 0, res)\n        return res"}, {"task_id": "n-queens", "completion": "class Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def backtrack(n, row, col, diag1, diag2):\n            if row == n:\n                res.append([\".\"*n for _ in range(n)])\n                for i in range(n):\n                    res[-1][i] = \"Q\"\n                    res[-1][i] = res[-1][i].replace(\".\", \"Q\")\n                return\n            for i in range(n):\n                if col[i] == 1 or diag1[i+row] == 1 or diag2[i-row+n-1] == 1:\n                    continue\n                col[i] = 1\n                diag1[i+row] = 1\n                diag2[i-row+n-1] = 1\n                backtrack(n, row+1, col, diag1, diag2)\n                col[i] = 0\n                diag1[i+row] = 0\n                diag2[i-row+n-1] = 0\n        \n        res = []\n        col = [0]*n\n        diag1 = [0]*(2*n-1)\n        diag2 = [0]*(2*n-1)\n        backtrack(n, 0, col, diag1, diag2)\n        return res"}, {"task_id": "n-queens", "completion": "class Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def backtrack(n, row, col, diag1, diag2):\n            if row == n:\n                res.append([\".\"*n for _ in range(n)])\n                for i in range(n):\n                    res[-1][i] = \"Q\"\n                    res[-1][i][col[i]] = \".\"\n                    res[-1][i][diag1[i]] = \".\"\n                    res[-1][i][diag2[i]] = \".\"\n                return\n            for i in range(n):\n                if col[i] == 0 and diag1[i] == 0 and diag2[i] == 0:\n                    col[i] = 1\n                    diag1[i] = 1\n                    diag2[i] = 1\n                    backtrack(n, row+1, col, diag1, diag2)\n                    col[i] = 0\n                    diag1[i] = 0\n                    diag2[i] = 0\n        \n        res = []\n        col = [0]*n\n        diag1 = [0]*n\n        diag2 = [0]*n\n        backtrack(n, 0, col, diag1, diag2)\n        return res"}, {"task_id": "n-queens", "completion": "class Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def isValid(board, row, col):\n            for i in range(row):\n                if board[i][col] == 'Q':\n                    return False\n            for i in range(row):\n                for j in range(col):\n                    if board[i][j] == 'Q' and abs(i-row) == abs(j-col):\n                        return False\n            return True\n        \n        def backtrack(board, row):\n            if row == n:\n                res.append([\"\".join(row) for row in board])\n                return\n            for col in range(n):\n                if isValid(board, row, col):\n                    board[row][col] = 'Q'\n                    backtrack(board, row+1)\n                    board[row][col] = '.'\n        \n        res = []\n        board = [['.' for _ in range(n)] for _ in range(n)]\n        backtrack(board, 0)\n        return res"}], "word-search": [{"task_id": "word-search", "completion": "class Solution(object):\n    def exist(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        def dfs(i, j, k):\n            if k == len(word):\n                return True\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != word[k]:\n                return False\n            board[i][j] = '#'\n            res = dfs(i+1, j, k+1) or dfs(i-1, j, k+1) or dfs(i, j+1, k+1) or dfs(i, j-1, k+1)\n            board[i][j] = word[k]\n            return res\n        \n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if dfs(i, j, 0):\n                    return True\n        return False"}, {"task_id": "word-search", "completion": "class Solution(object):\n    def exist(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        def dfs(i, j, k):\n            if k == len(word):\n                return True\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != word[k]:\n                return False\n            board[i][j] = '#'\n            res = dfs(i-1, j, k+1) or dfs(i+1, j, k+1) or dfs(i, j-1, k+1) or dfs(i, j+1, k+1)\n            board[i][j] = word[k]\n            return res\n        \n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if dfs(i, j, 0):\n                    return True\n        return False"}, {"task_id": "word-search", "completion": "class Solution(object):\n    def exist(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. check if the word is in the board\n        # 2. check if the word is in the board\n        # 3. check if the word is in the board\n        # 4. check if the word is in the board\n        # 5. check if the word is in the board\n        # 6. check if the word is in the board\n        # 7. check if the word is in the board\n        # 8. check if the word is in the board\n        # 9. check if the word is in the board\n        # 10. check if the word is in the board\n        # 11. check if the word is in the board\n        # 12. check if the word is in the board\n        # 13. check if the word is in the board\n        # 14. check if the word is in the board\n        # 15. check if the word is in the board\n        # 16. check if the word is in the board\n        # 17. check if the word is in the board\n        # 18. check if the word is in the board\n        # 19. check if the word is in the board\n        # 20. check if the word is in the board\n        # 21. check if the word is in the board\n        # 22. check if the word is in the board\n        # 23. check if the word is in the board\n        # 24. check if the word is in the board\n        # 25. check if the word is in the board\n        # 26. check if the word is in the board\n        # 27. check if the word is in the board\n        # 28. check if the word is in the board\n        # 29. check if the word is in the board\n        # 30. check if the word is in the board\n        # 31. check if the word is in the board\n        # 32. check if the word is in the board\n        # 33. check if the word is in the board\n        # 34. check if the word is in the board\n        # 35. check if the word is in the board\n        # 36. check if the word is in the board\n        # 37. check if the word is in the board\n        # 38. check if the word is in the board\n        # 39. check if the word is in the board\n        # 40. check if the word is in the board\n        # 41. check if the word is in the board\n        # 42. check if the word is in the board\n        # 43. check if the word is in the board\n        # 44. check if the word is in the board\n        # 45. check if the word is in the board\n        # 46. check if the word is in the board\n        # 47. check if the word is in the board\n        # 48. check if the word is in the board\n        # 49. check if the word is in the board\n        # 50. check if the word is in the board\n        # 51. check if the word is in the board\n        # 52. check if the word is in the board\n        # 53. check if the word is in the board\n        # 54. check if the word is in the board\n        # 55. check if the word is in the board\n        # 56. check if the word is in the board\n        # 57. check if the word is in the board\n        # 58. check if the word is in the board\n        # 59. check if the word is in the board\n        # 60. check if the word is in the board\n        # 61. check if the word is in the board\n        # 62. check if the word is in the board\n        # 63. check if the word is in the board\n        # 64. check if the word is in the board\n        # 65. check if the word is in the board\n        # 66. check if the word is in the board\n        # 67. check if the word is in the board\n        # 68. check if the word is in the board\n        # 69. check if the word is in the"}, {"task_id": "word-search", "completion": "class Solution(object):\n    def exist(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        def dfs(i, j, k):\n            if k == len(word):\n                return True\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != word[k]:\n                return False\n            board[i][j] = '#'\n            res = dfs(i+1, j, k+1) or dfs(i-1, j, k+1) or dfs(i, j+1, k+1) or dfs(i, j-1, k+1)\n            board[i][j] = word[k]\n            return res\n        \n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if dfs(i, j, 0):\n                    return True\n        return False"}, {"task_id": "word-search", "completion": "class Solution(object):\n    def exist(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        def dfs(i, j, k):\n            if k == len(word):\n                return True\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != word[k]:\n                return False\n            board[i][j] = '#'\n            res = dfs(i+1, j, k+1) or dfs(i-1, j, k+1) or dfs(i, j+1, k+1) or dfs(i, j-1, k+1)\n            board[i][j] = word[k]\n            return res\n        \n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if dfs(i, j, 0):\n                    return True\n        return False"}], "merge-sorted-array": [{"task_id": "merge-sorted-array", "completion": "class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        \n        # 1. \u628anums2\u653e\u5230nums1\u7684\u540e\u9762\n        # 2. \u628anums1\u548cnums2\u6392\u5e8f\n        # 3. \u628anums1\u548cnums2\u5408\u5e76\n        # 4. \u628anums1\u6392\u5e8f\n        # 5. \u628anums1\u7684\u524dm\u4e2a\u5143\u7d20\u653e\u5230nums1\u4e2d\n        # 6. \u628anums1\u540e\u9762\u7684\u5143\u7d20\u6e05\u96f6\n        # 7. \u628anums1\u7684\u524dm\u4e2a\u5143\u7d20\u653e\u5230nums1\u4e2d\n        # 8. \u628anums1\u540e\u9762\u7684\u5143\u7d20\u6e05\u96f6\n        # 9. \u628anums1\u7684\u524dm\u4e2a\u5143\u7d20\u653e\u5230nums1\u4e2d\n        # 10. \u628anums1\u540e\u9762\u7684\u5143\u7d20\u6e05\u96f6\n        # 11. \u628anums1\u7684\u524dm\u4e2a\u5143\u7d20\u653e\u5230nums1\u4e2d\n        # 12. \u628anums1\u540e\u9762\u7684\u5143\u7d20\u6e05\u96f6\n        # 13. \u628anums1\u7684\u524dm\u4e2a\u5143\u7d20\u653e\u5230nums1\u4e2d\n        # 14. \u628anums1\u540e\u9762\u7684\u5143\u7d20\u6e05\u96f6\n        # 15. \u628anums1\u7684\u524dm\u4e2a\u5143\u7d20\u653e\u5230nums1\u4e2d\n        # 16. \u628anums1\u540e\u9762\u7684\u5143\u7d20\u6e05\u96f6\n        # 17. \u628anums1\u7684\u524dm\u4e2a\u5143\u7d20\u653e\u5230nums1\u4e2d\n        # 18. \u628anums1\u540e\u9762\u7684\u5143\u7d20\u6e05\u96f6\n        # 19. \u628anums1\u7684\u524dm\u4e2a\u5143\u7d20\u653e\u5230nums1\u4e2d\n        # 20. \u628anums1\u540e\u9762\u7684\u5143\u7d20\u6e05\u96f6\n        # 21. \u628anums1\u7684\u524dm\u4e2a\u5143\u7d20\u653e\u5230nums1\u4e2d\n        # 22. \u628anums1\u540e\u9762\u7684\u5143\u7d20\u6e05\u96f6\n        # 23. \u628anums1\u7684\u524dm\u4e2a\u5143\u7d20\u653e\u5230nums1\u4e2d\n        # 24. \u628anums1\u540e\u9762\u7684\u5143\u7d20\u6e05\u96f6\n        # 25. \u628anums1\u7684\u524dm\u4e2a\u5143\u7d20\u653e\u5230nums1\u4e2d\n        # 26. \u628anums1\u540e\u9762\u7684\u5143\u7d20\u6e05\u96f6\n        # 27. \u628anums1\u7684\u524dm\u4e2a\u5143\u7d20\u653e\u5230nums1\u4e2d\n        # 28. \u628anums1\u540e\u9762\u7684\u5143\u7d20\u6e05\u96f6\n        # 29. \u628anums1\u7684\u524dm\u4e2a\u5143\u7d20\u653e\u5230nums1\u4e2d\n        # 30. \u628anums1\u540e\u9762\u7684\u5143\u7d20\u6e05\u96f6\n        # 31. \u628anums1\u7684\u524dm\u4e2a\u5143\u7d20\u653e\u5230nums1\u4e2d\n        # 32. \u628anums1\u540e\u9762\u7684\u5143\u7d20\u6e05\u96f6\n        # 33. \u628anums1\u7684\u524dm\u4e2a\u5143\u7d20\u653e\u5230nums1\u4e2d\n        # 34. \u628anums1\u540e\u9762\u7684\u5143\u7d20\u6e05\u96f6\n        # 35. \u628anums1\u7684\u524dm\u4e2a\u5143\u7d20\u653e\u5230nums1\u4e2d\n        # 36. \u628anums1\u540e\u9762\u7684\u5143\u7d20\u6e05\u96f6\n        # 37. \u628anums1\u7684\u524dm\u4e2a\u5143\u7d20\u653e\u5230nums1\u4e2d\n        # 38. \u628anums1\u540e\u9762\u7684\u5143\u7d20\u6e05\u96f6\n        # 39. \u628anums1\u7684\u524dm\u4e2a\u5143\u7d20\u653e\u5230nums1\u4e2d\n        # 40. \u628anums1\u540e\u9762\u7684\u5143\u7d20\u6e05\u96f6\n        # 41. \u628anums1\u7684\u524dm\u4e2a\u5143\u7d20\u653e\u5230nums1\u4e2d\n        # 42. \u628anums1\u540e\u9762\u7684\u5143\u7d20\u6e05\u96f6\n        # 43. \u628anums1\u7684\u524dm\u4e2a\u5143\u7d20\u653e"}, {"task_id": "merge-sorted-array", "completion": "class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        \n        # 1. \u628anums2\u653e\u5230nums1\u7684\u540e\u9762\n        # 2. \u628anums1\u548cnums2\u6392\u5e8f\n        # 3. \u628anums1\u548cnums2\u5408\u5e76\n        # 4. \u628anums1\u6392\u5e8f\n        # 5. \u628anums1\u7684\u524dm\u4e2a\u5143\u7d20\u653e\u5230nums1\u4e2d\n        # 6. \u628anums1\u540e\u9762\u7684\u5143\u7d20\u7f6e\u4e3a0\n        # 7. \u628anums1\u7684\u524dm\u4e2a\u5143\u7d20\u653e\u5230nums1\u4e2d\n        # 8. \u628anums1\u540e\u9762\u7684\u5143\u7d20\u7f6e\u4e3a0\n        # 9. \u628anums1\u7684\u524dm\u4e2a\u5143\u7d20\u653e\u5230nums1\u4e2d\n        # 10. \u628anums1\u540e\u9762\u7684\u5143\u7d20\u7f6e\u4e3a0\n        # 11. \u628anums1\u7684\u524dm\u4e2a\u5143\u7d20\u653e\u5230nums1\u4e2d\n        # 12. \u628anums1\u540e\u9762\u7684\u5143\u7d20\u7f6e\u4e3a0\n        # 13. \u628anums1\u7684\u524dm\u4e2a\u5143\u7d20\u653e\u5230nums1\u4e2d\n        # 14. \u628anums1\u540e\u9762\u7684\u5143\u7d20\u7f6e\u4e3a0\n        # 15. \u628anums1\u7684\u524dm\u4e2a\u5143\u7d20\u653e\u5230nums1\u4e2d\n        # 16. \u628anums1\u540e\u9762\u7684\u5143\u7d20\u7f6e\u4e3a0\n        # 17. \u628anums1\u7684\u524dm\u4e2a\u5143\u7d20\u653e\u5230nums1\u4e2d\n        # 18. \u628anums1\u540e\u9762\u7684\u5143\u7d20\u7f6e\u4e3a0\n        # 19. \u628anums1\u7684\u524dm\u4e2a\u5143\u7d20\u653e\u5230nums1\u4e2d\n        # 20. \u628anums1\u540e\u9762\u7684\u5143\u7d20\u7f6e\u4e3a0\n        # 21. \u628anums1\u7684\u524dm\u4e2a\u5143\u7d20\u653e\u5230nums1\u4e2d\n        # 22. \u628anums1\u540e\u9762\u7684\u5143\u7d20\u7f6e\u4e3a0\n        # 23. \u628anums1\u7684\u524dm\u4e2a\u5143\u7d20\u653e\u5230nums1\u4e2d\n        # 24. \u628anums1\u540e\u9762\u7684\u5143\u7d20\u7f6e\u4e3a0\n        # 25. \u628anums1\u7684\u524dm\u4e2a\u5143\u7d20\u653e\u5230nums1\u4e2d\n        # 26. \u628anums1\u540e\u9762\u7684\u5143\u7d20\u7f6e\u4e3a0\n        # 27. \u628anums1\u7684\u524dm\u4e2a\u5143\u7d20\u653e\u5230nums1\u4e2d\n        # 28. \u628anums1\u540e\u9762\u7684\u5143\u7d20\u7f6e\u4e3a0\n        # 29. \u628anums1\u7684\u524dm\u4e2a\u5143\u7d20\u653e\u5230nums1\u4e2d\n        # 30. \u628anums1\u540e\u9762\u7684\u5143\u7d20\u7f6e\u4e3a0\n        # 31. \u628anums1\u7684\u524dm\u4e2a\u5143\u7d20\u653e\u5230nums1\u4e2d\n        # 32. \u628anums1\u540e\u9762\u7684\u5143\u7d20\u7f6e\u4e3a0\n        # 33. \u628anums1\u7684\u524dm\u4e2a\u5143\u7d20\u653e\u5230nums1\u4e2d\n        # 34. \u628anums1\u540e\u9762\u7684\u5143\u7d20\u7f6e\u4e3a0\n        # 35. \u628anums1\u7684\u524dm\u4e2a\u5143\u7d20\u653e\u5230nums1\u4e2d\n        # 36. \u628anums1\u540e\u9762\u7684\u5143\u7d20\u7f6e\u4e3a0\n        # 37. \u628anums1\u7684\u524dm\u4e2a\u5143\u7d20\u653e\u5230nums1\u4e2d\n        # 38. \u628anums1\u540e\u9762\u7684\u5143\u7d20\u7f6e\u4e3a0\n        # 39. \u628anums1\u7684\u524dm\u4e2a\u5143\u7d20\u653e\u5230nums1\u4e2d\n        # 40. \u628anums1\u540e\u9762\u7684\u5143\u7d20\u7f6e\u4e3a0\n        # 41. \u628anums1\u7684\u524dm\u4e2a\u5143\u7d20\u653e\u5230nums1\u4e2d\n        # 42. \u628anums1\u540e\u9762\u7684\u5143\u7d20\u7f6e\u4e3a0\n        # 43. \u628anums1\u7684\u524dm\u4e2a\u5143\u7d20\u653e\u5230nums1\u4e2d\n        # 44. \u628anums1"}, {"task_id": "merge-sorted-array", "completion": "class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        \n        # 1. \u628anums2\u7684\u6570\u5b57\u653e\u5230nums1\u7684\u6700\u540e\u9762\n        # 2. \u628anums1\u7684\u6570\u5b57\u548cnums2\u7684\u6570\u5b57\u8fdb\u884c\u6bd4\u8f83\uff0c\u8c01\u5c0f\u5c31\u653e\u5230nums1\u7684\u6700\u540e\u9762\n        # 3. \u628anums1\u7684\u6700\u540e\u9762\u7684\u6570\u5b57\u5220\u9664\n        # 4. \u91cd\u590d1-3\u6b65\u9aa4\n        # 5. \u5982\u679cnums1\u7684\u957f\u5ea6\u6bd4nums2\u7684\u957f\u5ea6\u5927\uff0c\u90a3\u4e48\u5c31\u628anums1\u7684\u6700\u540e\u9762\u7684\u6570\u5b57\u5220\u9664\n        # 6. \u5982\u679cnums1\u7684\u957f\u5ea6\u6bd4nums2\u7684\u957f\u5ea6\u5c0f\uff0c\u90a3\u4e48\u5c31\u628anums1\u7684\u6700\u540e\u9762\u7684\u6570\u5b57\u5220\u9664\n        # 7. \u5982\u679cnums1\u7684\u957f\u5ea6\u548cnums2\u7684\u957f\u5ea6\u76f8\u7b49\uff0c\u90a3\u4e48\u5c31\u628anums1\u7684\u6700\u540e\u9762\u7684\u6570\u5b57\u5220\u9664\n        # 8. \u5982\u679cnums1\u7684\u957f\u5ea6\u6bd4nums2\u7684\u957f\u5ea6\u5927\uff0c\u90a3\u4e48\u5c31\u628anums1\u7684\u6700\u540e\u9762\u7684\u6570\u5b57\u5220\u9664\n        # 9. \u5982\u679cnums1\u7684\u957f\u5ea6\u6bd4nums2\u7684\u957f\u5ea6\u5c0f\uff0c\u90a3\u4e48\u5c31\u628anums1\u7684\u6700\u540e\u9762\u7684\u6570\u5b57\u5220\u9664\n        # 10. \u5982\u679cnums1\u7684\u957f\u5ea6\u548cnums2\u7684\u957f\u5ea6\u76f8\u7b49\uff0c\u90a3\u4e48\u5c31\u628anums1\u7684\u6700\u540e\u9762\u7684\u6570\u5b57\u5220\u9664\n        # 11. \u5982\u679cnums1\u7684\u957f\u5ea6\u6bd4nums2\u7684\u957f\u5ea6\u5927\uff0c\u90a3\u4e48\u5c31\u628anums1\u7684\u6700\u540e\u9762\u7684\u6570\u5b57\u5220\u9664\n        # 12. \u5982\u679cnums1\u7684\u957f\u5ea6\u6bd4nums2\u7684\u957f\u5ea6\u5c0f\uff0c\u90a3\u4e48\u5c31\u628anums1\u7684\u6700\u540e\u9762\u7684\u6570\u5b57\u5220\u9664\n        # 13. \u5982\u679cnums1\u7684\u957f\u5ea6\u548cnums2\u7684\u957f\u5ea6\u76f8\u7b49\uff0c\u90a3\u4e48\u5c31\u628anums1\u7684\u6700\u540e\u9762\u7684\u6570\u5b57\u5220\u9664\n        # 14. \u5982\u679cnums1\u7684\u957f\u5ea6\u6bd4nums2\u7684\u957f\u5ea6\u5927\uff0c\u90a3\u4e48\u5c31\u628anums1\u7684\u6700\u540e\u9762\u7684\u6570\u5b57\u5220\u9664\n        # 15. \u5982\u679cnums1\u7684\u957f\u5ea6\u6bd4nums2\u7684\u957f\u5ea6\u5c0f\uff0c\u90a3\u4e48\u5c31\u628anums1\u7684\u6700\u540e\u9762\u7684\u6570\u5b57\u5220\u9664\n        # 16. \u5982\u679cnums1\u7684\u957f\u5ea6\u548cnums2\u7684\u957f\u5ea6\u76f8\u7b49\uff0c\u90a3\u4e48\u5c31\u628anums1\u7684\u6700\u540e\u9762\u7684\u6570\u5b57\u5220\u9664\n        # 17. \u5982\u679cnums1\u7684\u957f\u5ea6\u6bd4nums2\u7684\u957f\u5ea6\u5927\uff0c\u90a3\u4e48\u5c31\u628anums1\u7684\u6700\u540e\u9762\u7684\u6570\u5b57\u5220\u9664\n        # 18. \u5982\u679cnums1\u7684\u957f\u5ea6\u6bd4nums2\u7684\u957f\u5ea6\u5c0f\uff0c\u90a3\u4e48\u5c31\u628anums1\u7684\u6700\u540e\u9762\u7684\u6570\u5b57\u5220\u9664\n        # 19. \u5982\u679cnums1\u7684\u957f\u5ea6\u548cnums2\u7684\u957f\u5ea6\u76f8\u7b49\uff0c\u90a3\u4e48\u5c31\u628anums1\u7684\u6700\u540e\u9762\u7684\u6570\u5b57\u5220\u9664\n        # 20. \u5982\u679cnums1\u7684\u957f\u5ea6\u6bd4nums2\u7684\u957f\u5ea6\u5927\uff0c\u90a3\u4e48\u5c31\u628anums1\u7684\u6700\u540e\u9762\u7684\u6570\u5b57\u5220\u9664\n        # 21. \u5982\u679cnums1\u7684\u957f\u5ea6\u6bd4nums2\u7684\u957f\u5ea6\u5c0f\uff0c\u90a3\u4e48\u5c31\u628anums1\u7684\u6700\u540e\u9762\u7684\u6570\u5b57\u5220\u9664\n        # 22. \u5982\u679cnums1\u7684\u957f\u5ea6\u548cnums2\u7684\u957f\u5ea6\u76f8\u7b49\uff0c\u90a3\u4e48\u5c31\u628anums1\u7684\u6700\u540e\u9762\u7684\u6570\u5b57\u5220\u9664\n        # 23. \u5982\u679cnums1\u7684\u957f\u5ea6\u6bd4nums2\u7684\u957f\u5ea6\u5927\uff0c\u90a3\u4e48\u5c31\u628anums1\u7684\u6700\u540e\u9762\u7684\u6570\u5b57\u5220\u9664\n        # 24. \u5982\u679cnums1\u7684\u957f\u5ea6\u6bd4nums2\u7684\u957f\u5ea6\u5c0f\uff0c\u90a3\u4e48\u5c31\u628anums1\u7684\u6700\u540e\u9762\u7684\u6570\u5b57\u5220\u9664\n        # 25. \u5982\u679cnums1\u7684\u957f\u5ea6\u548cnums2\u7684\u957f\u5ea6\u76f8\u7b49\uff0c\u90a3\u4e48\u5c31\u628anums1\u7684\u6700\u540e\u9762\u7684\u6570\u5b57\u5220\u9664\n        # 26. \u5982\u679cnum"}, {"task_id": "merge-sorted-array", "completion": "class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        \n        # 1. \u628anums2\u653e\u5230nums1\u7684\u540e\u9762\n        # 2. \u628anums1\u548cnums2\u6392\u5e8f\n        # 3. \u628anums1\u548cnums2\u5408\u5e76\n        # 4. \u628anums1\u6392\u5e8f\n        # 5. \u628anums1\u7684\u524dm\u4e2a\u5143\u7d20\u653e\u5230nums1\u4e2d\n        # 6. \u628anums1\u540e\u9762\u7684\u5143\u7d20\u6e05\u96f6\n        # 7. \u628anums1\u7684\u524dm\u4e2a\u5143\u7d20\u653e\u5230nums1\u4e2d\n        # 8. \u628anums1\u540e\u9762\u7684\u5143\u7d20\u6e05\u96f6\n        # 9. \u628anums1\u7684\u524dm\u4e2a\u5143\u7d20\u653e\u5230nums1\u4e2d\n        # 10. \u628anums1\u540e\u9762\u7684\u5143\u7d20\u6e05\u96f6\n        # 11. \u628anums1\u7684\u524dm\u4e2a\u5143\u7d20\u653e\u5230nums1\u4e2d\n        # 12. \u628anums1\u540e\u9762\u7684\u5143\u7d20\u6e05\u96f6\n        # 13. \u628anums1\u7684\u524dm\u4e2a\u5143\u7d20\u653e\u5230nums1\u4e2d\n        # 14. \u628anums1\u540e\u9762\u7684\u5143\u7d20\u6e05\u96f6\n        # 15. \u628anums1\u7684\u524dm\u4e2a\u5143\u7d20\u653e\u5230nums1\u4e2d\n        # 16. \u628anums1\u540e\u9762\u7684\u5143\u7d20\u6e05\u96f6\n        # 17. \u628anums1\u7684\u524dm\u4e2a\u5143\u7d20\u653e\u5230nums1\u4e2d\n        # 18. \u628anums1\u540e\u9762\u7684\u5143\u7d20\u6e05\u96f6\n        # 19. \u628anums1\u7684\u524dm\u4e2a\u5143\u7d20\u653e\u5230nums1\u4e2d\n        # 20. \u628anums1\u540e\u9762\u7684\u5143\u7d20\u6e05\u96f6\n        # 21. \u628anums1\u7684\u524dm\u4e2a\u5143\u7d20\u653e\u5230nums1\u4e2d\n        # 22. \u628anums1\u540e\u9762\u7684\u5143\u7d20\u6e05\u96f6\n        # 23. \u628anums1\u7684\u524dm\u4e2a\u5143\u7d20\u653e\u5230nums1\u4e2d\n        # 24. \u628anums1\u540e\u9762\u7684\u5143\u7d20\u6e05\u96f6\n        # 25. \u628anums1\u7684\u524dm\u4e2a\u5143\u7d20\u653e\u5230nums1\u4e2d\n        # 26. \u628anums1\u540e\u9762\u7684\u5143\u7d20\u6e05\u96f6\n        # 27. \u628anums1\u7684\u524dm\u4e2a\u5143\u7d20\u653e\u5230nums1\u4e2d\n        # 28. \u628anums1\u540e\u9762\u7684\u5143\u7d20\u6e05\u96f6\n        # 29. \u628anums1\u7684\u524dm\u4e2a\u5143\u7d20\u653e\u5230nums1\u4e2d\n        # 30. \u628anums1\u540e\u9762\u7684\u5143\u7d20\u6e05\u96f6\n        # 31. \u628anums1\u7684\u524dm\u4e2a\u5143\u7d20\u653e\u5230nums1\u4e2d\n        # 32. \u628anums1\u540e\u9762\u7684\u5143\u7d20\u6e05\u96f6\n        # 33. \u628anums1\u7684\u524dm\u4e2a\u5143\u7d20\u653e\u5230nums1\u4e2d\n        # 34. \u628anums1\u540e\u9762\u7684\u5143\u7d20\u6e05\u96f6\n        # 35. \u628anums1\u7684\u524dm\u4e2a\u5143\u7d20\u653e\u5230nums1\u4e2d\n        # 36. \u628anums1\u540e\u9762\u7684\u5143\u7d20\u6e05\u96f6\n        # 37. \u628anums1\u7684\u524dm\u4e2a\u5143\u7d20\u653e\u5230nums1\u4e2d\n        # 38. \u628anums1\u540e\u9762\u7684\u5143\u7d20\u6e05\u96f6\n        # 39. \u628anums1\u7684\u524dm\u4e2a\u5143\u7d20\u653e\u5230nums1\u4e2d\n        # 40. \u628anums1\u540e\u9762\u7684\u5143\u7d20\u6e05\u96f6\n        # 41. \u628anums1\u7684\u524dm\u4e2a\u5143\u7d20\u653e\u5230nums1\u4e2d\n        # 42. \u628anums1\u540e\u9762\u7684\u5143\u7d20\u6e05\u96f6\n        # 43. \u628anums1\u7684\u524dm\u4e2a\u5143\u7d20\u653e"}, {"task_id": "merge-sorted-array", "completion": "class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        \n        # 1. \u5148\u628anums2\u653e\u5230nums1\u7684\u540e\u9762\n        # 2. \u7136\u540e\u628anums1\u91cc\u9762\u7684\u6570\u5b57\u548cnums2\u91cc\u9762\u7684\u6570\u5b57\u6bd4\u8f83\uff0c\u5c0f\u7684\u653e\u5230nums1\u91cc\u9762\n        # 3. \u5982\u679cnums1\u91cc\u9762\u7684\u6570\u5b57\u6bd4nums2\u91cc\u9762\u7684\u6570\u5b57\u5c0f\uff0c\u5c31\u628anums1\u91cc\u9762\u7684\u6570\u5b57\u653e\u5230nums1\u7684\u540e\u9762\n        # 4. \u5982\u679cnums1\u91cc\u9762\u7684\u6570\u5b57\u6bd4nums2\u91cc\u9762\u7684\u6570\u5b57\u5927\uff0c\u5c31\u628anums2\u91cc\u9762\u7684\u6570\u5b57\u653e\u5230nums1\u7684\u540e\u9762\n        # 5. \u5982\u679cnums1\u91cc\u9762\u7684\u6570\u5b57\u548cnums2\u91cc\u9762\u7684\u6570\u5b57\u76f8\u7b49\uff0c\u5c31\u628anums1\u91cc\u9762\u7684\u6570\u5b57\u653e\u5230nums1\u7684\u540e\u9762\n        # 6. \u5982\u679cnums1\u91cc\u9762\u7684\u6570\u5b57\u548cnums2\u91cc\u9762\u7684\u6570\u5b57\u4e0d\u7b49\uff0c\u5c31\u628anums2\u91cc\u9762\u7684\u6570\u5b57\u653e\u5230nums1\u7684\u540e\u9762\n        # 7. \u5982\u679cnums1\u91cc\u9762\u7684\u6570\u5b57\u548cnums2\u91cc\u9762\u7684\u6570\u5b57\u76f8\u7b49\uff0c\u5c31\u628anums1\u91cc\u9762\u7684\u6570\u5b57\u653e\u5230nums1\u7684\u540e\u9762\n        # 8. \u5982\u679cnums1\u91cc\u9762\u7684\u6570\u5b57\u548cnums2\u91cc\u9762\u7684\u6570\u5b57\u4e0d\u7b49\uff0c\u5c31\u628anums2\u91cc\u9762\u7684\u6570\u5b57\u653e\u5230nums1\u7684\u540e\u9762\n        # 9. \u5982\u679cnums1\u91cc\u9762\u7684\u6570\u5b57\u548cnums2\u91cc\u9762\u7684\u6570\u5b57\u76f8\u7b49\uff0c\u5c31\u628anums1\u91cc\u9762\u7684\u6570\u5b57\u653e\u5230nums1\u7684\u540e\u9762\n        # 10. \u5982\u679cnums1\u91cc\u9762\u7684\u6570\u5b57\u548cnums2\u91cc\u9762\u7684\u6570\u5b57\u4e0d\u7b49\uff0c\u5c31\u628anums2\u91cc\u9762\u7684\u6570\u5b57\u653e\u5230nums1\u7684\u540e\u9762\n        # 11. \u5982\u679cnums1\u91cc\u9762\u7684\u6570\u5b57\u548cnums2\u91cc\u9762\u7684\u6570\u5b57\u76f8\u7b49\uff0c\u5c31\u628anums1\u91cc\u9762\u7684\u6570\u5b57\u653e\u5230nums1\u7684\u540e\u9762\n        # 12. \u5982\u679cnums1\u91cc\u9762\u7684\u6570\u5b57\u548cnums2\u91cc\u9762\u7684\u6570\u5b57\u4e0d\u7b49\uff0c\u5c31\u628anums2\u91cc\u9762\u7684\u6570\u5b57\u653e\u5230nums1\u7684\u540e\u9762\n        # 13. \u5982\u679cnums1\u91cc\u9762\u7684\u6570\u5b57\u548cnums2\u91cc\u9762\u7684\u6570\u5b57\u76f8\u7b49\uff0c\u5c31\u628anums1\u91cc\u9762\u7684\u6570\u5b57\u653e\u5230nums1\u7684\u540e\u9762\n        # 14. \u5982\u679cnums1\u91cc\u9762\u7684\u6570\u5b57\u548cnums2\u91cc\u9762\u7684\u6570\u5b57\u4e0d\u7b49\uff0c\u5c31\u628anums2\u91cc\u9762\u7684\u6570\u5b57\u653e\u5230nums1\u7684\u540e\u9762\n        # 15. \u5982\u679cnums1\u91cc\u9762\u7684\u6570\u5b57\u548cnums2\u91cc\u9762\u7684\u6570\u5b57\u76f8\u7b49\uff0c\u5c31\u628anums1\u91cc\u9762\u7684\u6570\u5b57\u653e\u5230nums1\u7684\u540e\u9762\n        # 16. \u5982\u679cnums1\u91cc\u9762\u7684\u6570\u5b57\u548cnums2\u91cc\u9762\u7684\u6570\u5b57\u4e0d\u7b49\uff0c\u5c31\u628anums2\u91cc\u9762\u7684\u6570\u5b57\u653e\u5230nums1\u7684\u540e\u9762\n        # 17. \u5982\u679cnums1\u91cc\u9762\u7684\u6570\u5b57\u548cnums2\u91cc\u9762\u7684\u6570\u5b57\u76f8\u7b49\uff0c\u5c31\u628anums1\u91cc\u9762\u7684\u6570\u5b57\u653e\u5230nums1\u7684\u540e\u9762\n        # 18. \u5982\u679cnums1\u91cc\u9762\u7684\u6570\u5b57\u548cnums2\u91cc\u9762\u7684\u6570\u5b57\u4e0d\u7b49\uff0c\u5c31\u628anums2\u91cc\u9762\u7684\u6570\u5b57\u653e\u5230nums1\u7684\u540e\u9762\n        # 19. \u5982\u679cnums1\u91cc\u9762\u7684\u6570\u5b57\u548cnums2\u91cc\u9762\u7684\u6570\u5b57\u76f8\u7b49\uff0c\u5c31\u628anums1\u91cc\u9762\u7684\u6570\u5b57\u653e\u5230nums1\u7684\u540e\u9762\n        # 20. \u5982\u679cnums1\u91cc\u9762\u7684\u6570\u5b57\u548cnums2\u91cc\u9762\u7684\u6570\u5b57\u4e0d\u7b49\uff0c\u5c31\u628anums2\u91cc\u9762\u7684\u6570\u5b57\u653e\u5230nums1\u7684\u540e\u9762\n        # 21. \u5982\u679cnums1\u91cc\u9762\u7684\u6570\u5b57\u548cnums2\u91cc\u9762\u7684\u6570\u5b57\u76f8\u7b49\uff0c\u5c31\u628anums1\u91cc\u9762\u7684\u6570\u5b57\u653e\u5230nums1\u7684\u540e\u9762\n        # 22. \u5982\u679cnums1\u91cc\u9762\u7684\u6570\u5b57\u548c"}], "third-maximum-number": [{"task_id": "third-maximum-number", "completion": "class Solution(object):\n    def thirdMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. Sort the array\n        # 2. Return the third element\n        # 3. If the third element is not found, return the maximum\n        \n        # Sort the array\n        nums.sort()\n        \n        # Return the third element\n        return nums[2] if len(nums) >= 3 else nums[-1]"}, {"task_id": "third-maximum-number", "completion": "class Solution(object):\n    def thirdMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. Sort the array\n        # 2. Return the third element\n        # 3. If the third element does not exist, return the maximum element\n        \n        # Sort the array\n        nums.sort()\n        \n        # Return the third element\n        return nums[2] if len(nums) >= 3 else nums[-1]"}, {"task_id": "third-maximum-number", "completion": "class Solution(object):\n    def thirdMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. Sort the array\n        # 2. Get the third element\n        # 3. If the third element is not present, return the second element\n        # 4. If the third element is present, return the third element\n        \n        # Sort the array\n        nums.sort()\n        \n        # Get the third element\n        third = nums[len(nums)-3]\n        \n        # If the third element is not present, return the second element\n        if third == nums[len(nums)-2]:\n            return nums[len(nums)-2]\n        \n        # If the third element is present, return the third element\n        else:\n            return third"}, {"task_id": "third-maximum-number", "completion": "class Solution(object):\n    def thirdMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. Sort the array\n        # 2. Return the third element\n        # 3. If the third element does not exist, return the maximum element\n        \n        # Sort the array\n        nums.sort()\n        \n        # Return the third element\n        return nums[2] if len(nums) >= 3 else nums[-1]"}, {"task_id": "third-maximum-number", "completion": "class Solution(object):\n    def thirdMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. Sort the array\n        # 2. Return the third element\n        # 3. If the third element is not present, return the second element\n        # 4. If the second element is not present, return the first element\n        # 5. If the first element is not present, return the maximum element\n        \n        # Sort the array\n        nums.sort()\n        \n        # Return the third element\n        if len(nums) >= 3:\n            return nums[2]\n        \n        # If the third element is not present, return the second element\n        elif len(nums) == 2:\n            return nums[1]\n        \n        # If the second element is not present, return the first element\n        elif len(nums) == 1:\n            return nums[0]\n        \n        # If the first element is not present, return the maximum element\n        else:\n            return max(nums)"}]}